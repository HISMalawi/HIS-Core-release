import{d as v,an as o,ao as s,bk as d,bn as p,bJ as h,c3 as b,dG as _,bs as l,q as u,y,H as T,S,aD as D,aw as F,dl as B,am as C,ar as L,a as I,b as w}from"./index-qFt4YszW.js";import{_ as x}from"./EncounterMixin.vue_vue_type_script_lang-Ba1E7e4E.js";import{L as R}from"./lab_order_service-EUN9C6_8.js";import"./encounter_guidelines-CLmFwnI6.js";import"./GuidelineEngine-D6V1_Znr.js";import"./HisStandardForm-B3LOSMqB.js";const E=v({mixins:[x],data:()=>({patientID:-1,service:{},fields:[],barcode:"",activityType:"",canScanDBS:!1,isNextBtnDisabled:!0,verifyingBarcode:!1}),async created(){this.canScanDBS=await B.canScanDBS()},watch:{$route:{handler({query:e,params:t}){e&&t&&(this.patientID=t.patient_id,this.activityType=e.type,this.service=new _(this.patientID),this.fields=[this.getClinianGivenNameField(),this.getClinianFamilyNameField(),this.getFacililityLocationField(),this.getReasonForTestField(),this.getTestSpecimensField(),this.getTestSelectionField(),this.getBarcodeInput(),this.getTestCombinationField()])},immediate:!0,deep:!0}},methods:{async onSubmit(e,t){const i=await p.getConceptID("HIV viral load"),c=await p.getConceptID("Plasma");if(t.specimen.concept_id!=c){const a=t.tests.findIndex(n=>n.concept_id===i);if(a!==-1){const r=await new R(parseInt(this.patientID),this.providerID).createEncounter();if(r){const g=t.tests.splice(a,1)[0],f=this.buildLabOrders(t,g.concept_id,r),m=await d.saveOrdersArray(r.encounter_id,f);if(!m)return u("Unable to save lab orders");D.invalidate("PATIENT_LAB_ORDERS"),await F("Lab orders and encounter created!, print out your last orders?",{confirmBtnLabel:"Yes",cancelBtnLabel:"No"})&&await this.service.printSpecimenLabel(m[0].order_id),t.tests.length<=0&&this.$router.push("/patient/dashboard/".concat(this.patientID))}}}if(t.tests.length>0){const a=await this.service.placeOrder(t);a&&(await this.service.printSpecimenLabel(a[0].order_id),this.$router.push("/patient/dashboard/".concat(this.patientID)))}},buildLabOrders(e,t,i){return[{...this.barcode?{accession_number:this.barcode}:{},encounter_id:i.encounter_id,tests:[{concept_id:t}],reason_for_test_id:e.reason_for_test_id,target_lab:e.target_lab,date:T.toStandardHisFormat(S.getSessionDate()),requesting_clinician:e.requesting_clinician,specimen:{concept_id:e.specimen.concept_id}}]},async verifyingScanedBarcode(e){if(this.verifyingBarcode=!this.verifyingBarcode,this.verifyingBarcode)return!1;if((await l.create({message:"Checking ".concat(e)})).present(),this.isNextBtnDisabled=!0,!/^([A-Z]{1})?[0-9]{7,8}$/i.test("".concat(e).trim()))return u("Invalid Barcode"),this.verifyingBarcode=!1,l.getTop().then(i=>i&&l.dismiss()),!1;try{if(await d.accessionNumExists(e))u("Barcode ".concat(e," was already used"));else return this.barcode=e,this.isNextBtnDisabled=!1,!0}catch(i){y("Failed to confirm barcode "+e+", Please try again later",8e3)}this.verifyingBarcode=!1,l.getTop().then(i=>i&&l.dismiss())},getFacililityLocationField(){return{id:"target_lab",helpText:"Requesting location",type:s.TT_SELECT,defaultValue:()=>_.getLocationName(),validation:e=>o.required(e),options:(e,t="")=>b(t),computedValue:e=>e.label,config:{showKeyboard:!0,isFilterDataViaApi:!0}}},getClinianGivenNameField(){const e=h.getGivenNameField();return e.helpText="Requesting clinician - First name",e.proxyID="requesting_clinician",e.condition=()=>this.activityType==="DRAW_SAMPLES",e.appearInSummary=()=>!1,e},getClinianFamilyNameField(){const e=h.getFamilyNameField();return e.helpText="Requesting clinician - Last name",e.proxyID="requesting_clinician",e.condition=()=>this.activityType==="DRAW_SAMPLES",e.summaryMapValue=(t,i)=>({label:"Clinician name",value:"".concat(i.given_name.value," ").concat(t.value)}),e.computedValue=(t,i)=>"".concat(i.given_name.value," ").concat(t.value),e},getReasonForTestField(){return{id:"reason_for_test_id",helpText:"Reason for test",type:s.TT_SELECT,validation:e=>o.required(e),computedValue:e=>p.getCachedConceptID(e.value,!0),options:()=>[{label:"Routine",value:"Routine"},{label:"Targeted",value:"Targeted"},{label:"Confirmatory",value:"Confirmatory"},{label:"Repeat / Missing",value:"Repeat / Missing"},{label:"Stat",value:"Stat"}]}},getTestSpecimensField(){return{id:"specimen",helpText:"Select specimen",type:s.TT_SELECT,condition:()=>this.activityType==="DRAW_SAMPLES",validation:e=>o.required(e),computedValue:e=>({concept_id:e.value}),options:async()=>(await d.getSpecimens("")).map(t=>({label:t.name,value:t.concept_id})),config:{showKeyboard:!0}}},getTestSelectionField(){let e="";return{id:"tests",helpText:"Select tests",type:s.TT_GRID_SELECTOR,validation:t=>o.required(t),computedValue:t=>t.map(i=>({concept_id:i.value})),options:async(t,i,c)=>t.specimen&&t.specimen.label!=e?(e=t.specimen.label,(await d.getTestTypesBySpecimen(t.specimen.label)).map(n=>({label:n.name,value:n.concept_id,isChecked:!1,other:n}))):c}},getBarcodeInput(){return{id:"barcode",helpText:"Scan viral load barcode",type:s.TT_BARCODE,onValue:async e=>await this.verifyingScanedBarcode(e),summaryMapValue:e=>({label:"Scaned Barcode",value:e}),condition:e=>e.tests.some(t=>t.label==="HIV viral load"&&this.canScanDBS)&&e.specimen.label!=="Plasma",config:{hiddenFooterBtns:["Clear"],overrideDefaultFooterBtns:{nextBtn:{name:"Next",state:{disabled:{default:()=>this.isNextBtnDisabled}}}},showScannedBarcode:!0}}},getTestCombinationField(){return{id:"combine_tests",helpText:"Combine test(s) in one order",type:s.TT_SELECT,computedValue:e=>e.value==="Yes",condition:e=>e.tests.length>1,validation:e=>o.required(e),options:()=>this.yesNoOptions()}}}});function O(e,t,i,c,a,n){const r=L("his-standard-form");return w(),I(r,{fields:e.fields,onFinishAction:e.onSubmit},null,8,["fields","onFinishAction"])}const M=C(E,[["render",O]]);export{M as default};
