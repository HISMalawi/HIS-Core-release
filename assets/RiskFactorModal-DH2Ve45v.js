import{bJ as $,d as x,as as u,br as _,a3 as M,S as P,O as S,R as E,Q as O,a0 as R,$ as Y,U as z,ae as H,Z as L,a4 as N,aV as A,_ as T,a8 as U,ad as n,u as r,B as p,x as o,w as t,z as i,E as m,C as G,v as h,Y as j,G as q}from"./index-B-uGcoDO.js";class J extends ${constructor(a,s){super(a,30,s)}}const K=x({name:"Modal",props:{factors:{type:Object,required:!0},title:{type:String,default:""}},computed:{showManageBPButton(){return this.$route.name!="bp_management"}},created(){this.patientID=parseInt("".concat(this.$route.params.patient_id))},methods:{async postActivities(){const e=new J(this.patientID,-1);if(await e.createEncounter()){const s=await this.buildObs();await e.saveObservationList(s),await this.closeModal()}},manageBP(){this.$router.push("/art/encounters/bp_management/".concat(this.patientID))},exit(){u.dismiss([])},async closeModal(){await u.dismiss(this.riskFactors)},async buildObs(){return this.riskFactors.map(e=>{const a=e.isChecked===!0?"Yes":"No",s=_.getConceptID(a,!0);return{concept_id:_.getConceptID(e.concept,!0),value_coded:s}})}},data(){return{patientID:-1,riskFactors:[{name:"Diabetes",isChecked:!1,concept:"Diabetes"},{name:"Cronic kidney disease",isChecked:!1,concept:"CKD"},{name:"Past history of IHD or CVD",isChecked:!1,concept:"history of CVD"},{name:"First degree relative with IHD or CVD <65",isChecked:!1,concept:"relative with CVD"},{name:"Patient currently smokes",isChecked:!1,concept:"patient smokes"}]}},mounted(){this.factors.forEach(e=>{if(e.value==="Yes"){const a=this.riskFactors.findIndex(s=>s.concept===e.concept);this.riskFactors[a].isChecked=!0}})},components:{IonButton:M,IonContent:P,IonHeader:S,IonTitle:E,IonToolbar:O,IonLabel:R,IonList:Y,IonItem:z,IonCheckbox:H,IonRow:L,IonFooter:N,IonGrid:A,IonCol:T}});function Q(e,a,s,f,Z,W){const k=n("ion-title"),d=n("ion-toolbar"),C=n("ion-header"),b=n("ion-label"),I=n("ion-checkbox"),g=n("ion-item"),v=n("ion-list"),w=n("ion-col"),y=n("ion-row"),D=n("ion-grid"),B=n("ion-content"),l=n("ion-button"),V=n("ion-footer");return r(),p(m,null,[o(C,null,{default:t(()=>[o(d,null,{default:t(()=>[o(k,null,{default:t(()=>[i("Risk Factors")]),_:1})]),_:1})]),_:1}),o(B,{style:{overflowY:"hidden",background:"grey"}},{default:t(()=>[o(D,null,{default:t(()=>[o(y,null,{default:t(()=>[o(w,null,{default:t(()=>[o(v,{style:{overflowY:"auto",height:"78vh"}},{default:t(()=>[(r(!0),p(m,null,G(e.riskFactors,c=>(r(),h(g,{key:c},{default:t(()=>[o(b,null,{default:t(()=>[i(j(c.name),1)]),_:2},1024),o(I,{modelValue:c.isChecked,"onUpdate:modelValue":F=>c.isChecked=F,slot:"start"},null,8,["modelValue","onUpdate:modelValue"])]),_:2},1024))),128))]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}),o(V,null,{default:t(()=>[o(d,null,{default:t(()=>[o(l,{size:"large",onClick:e.exit,slot:"start",color:"danger"},{default:t(()=>[i(" Close ")]),_:1},8,["onClick"]),e.showManageBPButton?(r(),h(l,{key:0,size:"large",onClick:e.manageBP,slot:"start"},{default:t(()=>[i(" Manage BP ")]),_:1},8,["onClick"])):q("",!0),o(l,{size:"large",color:"success",onClick:e.postActivities,slot:"end"},{default:t(()=>[i(" Save ")]),_:1},8,["onClick"])]),_:1})]),_:1})],64)}const ee=U(K,[["render",Q],["__scopeId","data-v-a68c415c"]]);export{ee as R};
