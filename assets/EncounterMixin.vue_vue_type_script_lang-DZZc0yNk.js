import{d as c,R as h,ab as l,q as d,aI as u,p as m}from"./index-DTBWhHAq.js";import{F as o,E as D}from"./encounter_guidelines-BDvVJmZ6.js";import{m as f}from"./GuidelineEngine-D6V1_Znr.js";import{H as E}from"./HisStandardForm-lonwENLb.js";const T=c({components:{HisStandardForm:E},data:()=>({patient:{},fields:[],patientID:"",providerID:-1,providers:[],facts:{sessionDate:"",apiDate:"",encounterName:"N/A",providers:[],isBdeMode:!1,birthDate:"",outcome:"",outcomeStartDate:""},ready:!1}),watch:{$route:{handler(t){t.params.patient_id&&this.patientID!=t.params.patient_id&&(this.patientID=parseInt(t.params.patient_id),h.get("ACTIVE_PATIENT",{patientID:this.patientID}).then(e=>{this.patient=e,this.setEncounterFacts().then(()=>{this.checkEncounterGuidelines().then(()=>{this.ready=!0})})}))},immediate:!0,deep:!0}},computed:{cancelDestination(){return this.patientDashboardUrl()}},methods:{runflowState(t,e=null){const s={};if(s[o.SET_PROVIDER]=a=>{const[i]=a.split(" "),n=l.find(this.providers,{username:i});return n&&(this.providerID=n.person_id),o.CONTINUE},s[o.CHANGE_SESSION_DATE]=()=>(this.$router.push("/session/date?patient_dashboard_redirection_id=".concat(this.patientID)),o.EXIT),s[o.CHANGE_PATIENT_OUTCOME]=()=>(this.$router.push("/patient/programs/".concat(this.patientID)),o.EXIT),s[o.GO_TO_PATIENT_DASHBOARD]=()=>(this.gotoPatientDashboard(),o.EXIT),t in s)return s[t](e)},async checkEncounterGuidelines(){var e,s,a,i;const t=f(this.facts,D);for(const n in t){const r=t[n];if((e=r==null?void 0:r.actions)!=null&&e.alert&&this.runflowState(await((s=r==null?void 0:r.actions)==null?void 0:s.alert(this.facts)))===o.EXIT)return;if((a=r==null?void 0:r.actions)!=null&&a.selection){const p=await((i=r==null?void 0:r.actions)==null?void 0:i.selection(this.facts));this.runflowState(p.flowState,p.value)}}},async setEncounterFacts(){try{const t=await h.get("PATIENT_PROGRAM",{patientID:this.patientID});this.facts.outcome=t.outcome,this.facts.outcomeStartDate=t.startDate}catch(t){console.error(t),d("".concat(t))}this.facts.sessionDate=u.getSessionDate(),this.facts.apiDate=u.getCachedApiDate(),this.facts.isBdeMode=u.isBDE(),this.facts.birthDate=this.patient.getBirthdate(),this.facts.encounterName=this.$route.name?this.$route.name.toString().toUpperCase():"N/A",u.isBDE()&&(this.providers=await h.get("PROVIDERS"),this.facts.providers=this.providers.sort((t,e)=>{const s=t.username.toUpperCase(),a=e.username.toUpperCase();return s<a?-1:s>a?1:0}).map(t=>{var s,a;let e="".concat(t.username);if(!l.isEmpty((s=t==null?void 0:t.person)==null?void 0:s.names)){const[i]=((a=t.person)==null?void 0:a.names)||[];e+=" (".concat(i.given_name," ").concat(i.family_name,")")}return e}))},toOption(t,e={}){return{label:t,value:t,other:e}},mapStrToOptions(t){return t.map(e=>({label:e,value:e}))},patientDashboardUrl(){return"/patient/dashboard/".concat(this.patientID)},gotoPatientDashboard(){return this.$router.push({path:this.patientDashboardUrl()})},nextTask(){return m(this.patientID,this.$router)},yesNoOptions(){return[{label:"Yes",value:"Yes"},{label:"No",value:"No"}]},toYesNoOption(t,e={}){return{label:t,value:"",other:{...e,values:this.yesNoOptions()}}},mapOptions(t){return t.map(e=>({label:e,value:e}))},yesNoUnknownOptions(){return[{label:"Yes",value:"Yes"},{label:"No",value:"No"},{label:"Unknown",value:"Unknown"}]},resolveObs(t,e=""){const s=Object.values(t).filter(a=>a&&(a.tag===e||e==="")).reduce((a,i)=>{const n=i.obs?i.obs:i;return Array.isArray(n)?a=a.concat(n):typeof n=="function"?a.push(n()):a.push(n),a},[]);return Promise.all(s)},inArray(t,e){try{return t.filter(s=>e(s)).length>0}catch(s){return!1}},validateSeries(t){try{for(const e in t){const s=t[e]();if(s)return s}}catch(e){return[e]}},buildDateObs(t,e,s,a){return s?a.buildValueDateEstimated(t,e):a.buildValueDate(t,e)}}});export{T as _};
