import{d as l,K as u,bg as d,dj as m,F as _,o as f,c as T,w as E,b as v,cu as o,I as N}from"./index-BRM9VIxF.js";import{H as P}from"./HisStandardForm-IKQjpnfg.js";import{u as S}from"./useEncounter-BCD_2aPy.js";import{g as s}from"./util-CyjuS_4X.js";import{r as A}from"./commons-6n-XULSz.js";import"./isEmpty-voE6vqu8.js";import"./encounter_guidelines-Codu4SxN.js";import"./GuidelineEngine-D6V1_Znr.js";const F=l({__name:"Pregnancy",setup(I){const n=u([]),e=new d(-1,m.UPDATE_PREGNANCY_STATUS),{goToNextTask:r,patientDashboardUrl:i}=S((t,a)=>{e.patientID=a,e.providerID=t,n.value=[{id:"personIsPregnant",helpText:"Is Person pregnant?:",type:_.TT_SELECT,computedValue:p=>({concept_id:s("PATIENT_IS_PREGNANT"),value_coded:s("".concat(p.value)),obs_datetime:e.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}]}]});async function c(t,a){await e.createEncounter(),await e.saveObservationList(await A(a)),r()}return(t,a)=>(f(),T(o(N),null,{default:E(()=>[v(P,{cancelDestinationPath:o(i),onFinishAction:c,fields:n.value,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{F as default};
