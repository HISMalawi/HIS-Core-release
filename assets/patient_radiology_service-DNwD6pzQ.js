import{bQ as l,bx as c,ao as r,aN as u,S as g,H as p}from"./index-CMZASHAR.js";class y extends l{constructor(t,e){super(t,121,e)}static async getRadiologyList(t,e=""){return c.getConceptSet(t,e)}async getRadiologyObs(t){try{const e="radiology/radiology_orders?patient_id="+t;return await r.getJson(e)}catch(e){return 0}}async showPreviousRadiolgy(t){return(await this.getRadiologyObs(t.getID())).length>0}async getPreviousRadiologyExaminations(t){const e=await r.getThirdpartyApps();let a="";for(const n of e)n.name=="pacs"&&(a=n.url);u.isEmpty(a)&&(a="opd/encounters/radiology/".concat(this.patientID));const o=await this.getRadiologyObs(t.getID());return o.length>0?{data:o,url:a}:!1}async submitToPacs(t,e){let a;for(const s of t)a=s.children[0].accession_number;const o=await Promise.all(t.map(async s=>({main_value_text:s.value_text,obs_id:s.obs_id,sub_value_text:s.children[0].value_text}))),n={patient_name:e.getFullName(),patientAge:e.getAge(),patientDOB:e.getBirthdate(),patientGender:e.getGender(),national_id:e.getNationalID(),person_id:e.getID(),encounter_id:this.getEncounterID(),date_created:this.getDate(),accession_number:a},i={username:r.getUserName(),userID:r.getUserID(),userRoles:r.getUserRoles()};return r.postJson("radiology/radiology_orders",{patient_details:n,physician_details:i,radiology_orders:o})}async getAccesionNumber(){return(await r.getJson("sequences/next_accession_number")).accession_number}async obsObj(t){const e=await this.getAccesionNumber(),a=[];for(const o of t)a.push({concept_id:o.concept_id,value_text:await c.getConceptName(o.child.concept_id),child:[{concept_id:o.child.concept_id,accession_number:e,value_text:await c.getConceptName(o.child.value_coded)}]});return a}async printOrders(t,e){const a=new g,o=e.getNationalID(),n=e.getFullName(),i=[];for(const s of t){const d=s.value_text+": "+s.children[0].value_text;i.push("/radiology/barcode?accession_number=".concat(s.children[0].accession_number,"&patient_national_id=").concat(o,"&patient_name=").concat(n,"&radio_order=").concat(d,"&date_created=").concat(p.toStandardHisDisplayFormat(s.obs_datetime)))}await a.batchPrintLbls(i,!0)}}export{y as P};
