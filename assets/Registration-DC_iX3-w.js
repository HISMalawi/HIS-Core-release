import{bQ as _,d as m,bD as v,bE as d,aw as T,R as b,ad as n,ae as a,aN as f,aV as l,H as y,bC as g,bZ as h,ds as w,W as V,dt as E,aW as c,aa as D,c as S,af as C,a as A}from"./index-CMZASHAR.js";import{_ as N}from"./StagingMixin.vue_vue_type_script_lang-CV_3rAy5.js";import{V as k}from"./vitals_service-DXPPoar9.js";import"./EncounterMixin.vue_vue_type_script_lang-v2aYCq6R.js";import"./encounter_guidelines-CJXpBOk4.js";import"./GuidelineEngine-D6V1_Znr.js";import"./HisStandardForm-BCjM4-bc.js";class p extends _{constructor(t,i){super(t,9,i)}}const x=m({mixins:[N],data:()=>({registration:{},prescription:{},dispensation:{},regimens:[],customRegimens:[],vitals:{}}),watch:{ready:{async handler(e){e&&(this.canShowStagingFields=!1,this.registration=new p(this.patientID,this.providerID),this.vitals=new k(this.patientID,this.providerID),this.showStagingWeightChart=!1,this.fields=this.getRegistrationFields())},immediate:!0}},methods:{async onSubmit(e,t){var s;const i={...t};if(await this.registration.createEncounter(),this.hasStaging(e)&&(await this.submitStaging(t),await this.vitals.createEncounter(),await this.vitals.saveObservationList(await this.resolveObs(i,"vitals"))),await this.registration.saveObservationList(await this.resolveObs(i,"reg")),(s=e==null?void 0:e.cell_phone_number)!=null&&s.value){const r=new v;r.setPersonID(this.patientID),await r.updatePerson(d.resolvePerson(t)),T.invalidate("ACTIVE_PATIENT")}b("Clinic registration complete!"),this.nextTask()},buildDateObs(e,t,i){let s={};return t.match(/unknown/i)?s=this.registration.buildValueText(e,"Unknown"):i?s=this.registration.buildValueDateEstimated(e,t):s=this.registration.buildValueDate(e,t),s},getRegistrationFields(){return[{id:"followup_agreement",helpText:"Agrees to follow-up",type:n.TT_MULTIPLE_YES_NO,summaryMapValue:({value:e,label:t})=>({value:e,label:"".concat(t," followup")}),validation:e=>this.validateSeries([()=>a.required(e),()=>a.anyEmpty(e)]),computedValue:e=>{const t=[];return e.forEach(({label:i,value:s})=>{t.push(this.registration.buildValueCoded(i,s)),t.push(this.registration.buildValueCoded("Agrees to followup",i))}),{tag:"reg",obs:t}},options:e=>f.isEmpty(e.followup_agreement)?[{label:"Phone",value:"",other:{values:this.yesNoOptions()}},{label:"Home visit",value:"",other:{values:this.yesNoOptions()}}]:e.followup_agreement},{...d.getCellNumberField(),config:{customKeyboard:[[["1","2","3"],["4","5","6"],["7","8","9"],["","0",""]],[["+265","/"],["Delete"]]]},condition:e=>{const t=this.patient.getPhoneNumber();return e.followup_agreement.some(i=>i.label==="Phone"&&i.value==="Yes"&&(!t||/unknown|n\/a/i.test(t)))}},{id:"has_linkage_code",helpText:"HTS Linkage number confirmation",type:n.TT_YES_NO,summaryMapValue:e=>({label:"Has HTS Linkage number?",value:e}),validation:e=>a.required(e),options:()=>[{label:"Does client have an HTS Linkage number?",value:"",values:this.yesNoOptions()}]},{id:"hts_serial_number",helpText:"HTS Linkage Number",type:n.TT_LINKAGE_CODE,validation:e=>a.validateSeries([()=>a.required(e),()=>{var t;return(t=e==null?void 0:e.other)!=null&&t.isValidLinkageCode?null:["Invalid Scanform linkage code"]}]),condition:e=>e.has_linkage_code==="Yes",computedValue:e=>({tag:"reg",obs:this.registration.buildValueText("HTC Serial number",e.value)})},{id:"received_arvs",helpText:"Ever received ARVs for treatment or prophylaxis?",type:n.TT_SELECT,computedValue:({value:e})=>({tag:"reg",obs:this.registration.buildValueCoded("Ever received ART",e)}),validation:e=>a.required(e),options:()=>this.yesNoOptions()},...l({id:"date_last_taken_arvs",helpText:"Last taken ARVS",required:!0,minDate:()=>this.patient.getBirthdate(),maxDate:()=>this.staging.getDate(),condition:e=>e.received_arvs.value==="Yes",estimation:{allowUnknown:!0},computeValue:(e,t)=>({date:e,tag:"reg",isEstimate:t,obs:this.buildDateObs("Date ART last taken",e,t)})}),{id:"taken_art_in_last_two_months",helpText:"Taken ARVs in the last two months?",type:n.TT_SELECT,validation:e=>a.required(e),computedValue:({value:e})=>({tag:"reg",obs:[this.registration.buildValueCoded("Has the patient taken ART in the last two months",e)]}),options:()=>this.yesNoUnknownOptions(),condition:e=>e.year_date_last_taken_arvs.value==="Unknown"},{id:"taken_art_in_last_two_weeks",helpText:"Taken ARV's in the last two weeks?",type:n.TT_SELECT,computedValue:({value:e},t)=>{let i="";const s=[];let r=-1;return e==="Yes"?r=14:t.taken_art_in_last_two_months.value==="Yes"&&(r=60),r>0&&(i=y.getDateBeforeByDays(this.registration.getDate(),r),s.push(this.registration.buildValueDateEstimated("Date ART last taken",i))),{date:i,tag:"reg",obs:[...s,this.registration.buildValueCoded("Has the patient taken ART in the last two weeks",e)]}},validation:e=>a.required(e),condition:e=>e.taken_art_in_last_two_months.value==="Yes",options:()=>this.yesNoUnknownOptions()},{id:"ever_registered_at_art_clinic",helpText:"Ever registered at an ART clinic?",type:n.TT_SELECT,computedValue:({value:e})=>({tag:"reg",obs:this.registration.buildValueCoded("Ever registered at ART clinic",e)}),validation:e=>a.required(e),condition:e=>e.received_arvs.value==="Yes",options:()=>this.yesNoOptions()},{id:"location_of_art_initialization",helpText:"Location of ART initiation",type:n.TT_SELECT,computedValue:({label:e})=>({tag:"reg",obs:this.registration.buildValueText("Location of ART initiation",e)}),validation:e=>a.required(e),condition:e=>e.ever_registered_at_art_clinic.value==="Yes",options:(e,t="")=>this.getFacilities(t),config:{showKeyboard:!0,isFilterDataViaApi:!0}},...l({id:"date_started_art",helpText:"Started ART",required:!0,init:async()=>(await this.initStaging(this.patient),!0),beforeNext:e=>{const t=g(e).diff(this.patient.getBirthdate(),"years");return this.staging.setAge(t),this.stagingFacts.age=t,this.stagingFacts.ageInMonths=t*12,!0},condition:e=>e.ever_registered_at_art_clinic.value==="Yes",minDate:()=>this.patient.getBirthdate(),maxDate:()=>this.staging.getDate(),estimation:{allowUnknown:!0,estimationFieldType:h.MONTH_ESTIMATE_FIELD},computeValue:(e,t)=>(this.staging.setDate(e),this.vitals.setDate(e),{date:e,tag:"reg",isEstimate:t,obs:this.buildDateObs("Date ART started",e,t)})}),{id:"previous_art_number",helpText:"ART number at previous location",type:n.TT_TEXT,condition:e=>e.ever_registered_at_art_clinic.value==="Yes",computedValue:e=>({tag:"reg",obs:this.registration.buildValueText("ART number at previous location",e.value)}),validation:e=>a.required(e)},{id:"has_transfer_letter",helpText:"Has staging information?",type:n.TT_SELECT,validation:e=>a.required(e),computedValue:({value:e})=>({tag:"reg",obs:this.registration.buildValueCoded("Has transfer letter",e)}),options:()=>this.yesNoOptions(),condition:e=>e.ever_registered_at_art_clinic.value==="Yes"},{id:"height",helpText:"Height (CM)",type:n.TT_NUMBER,condition:e=>e.has_transfer_letter.value==="Yes",computedValue:({value:e})=>({tag:"vitals",obs:this.vitals.buildValueNumber("Height",e)}),validation:e=>this.validateSeries([()=>a.required(e),()=>a.isNumber(e),()=>a.rangeOf(e,40,222)])},{id:"weight",helpText:"Weight (Kg)",type:n.TT_TEXT,unload:async(e,t,i)=>{const s=i.weight.value,r=i.height.value,u=await w.getBMI(s,r,this.patient.getGender(),this.patient.getAge());if(this.stagingFacts.bmi=u.index,!this.staging.isPedaid())return;const o=await this.patient.getMedianWeightHeight();try{this.stagingFacts.weightPercentile=parseFloat(s)/parseFloat(o.weight)*100}catch(F){this.stagingFacts.weightPercentile=0}},computedValue:({value:e})=>({tag:"vitals",obs:this.vitals.buildValueNumber("weight",e)}),condition:e=>e.has_transfer_letter.value==="Yes",validation:e=>this.validateSeries([()=>{const t={...e,other:{modifier:"."}};return this.vitals.isNotEmptyandFloat(t)},()=>a.rangeOf(e,1,300)]),config:{customKeyboard:[[["1","2","3",""],["4","5","6",""],["7","8","9","."],["","0","",""]],[["Delete"]]]}},...this.getStagingFields(),{id:"new_cd4_percent_available",helpText:"CD4 percent available",type:n.TT_SELECT,options:()=>this.yesNoOptions(),condition:e=>e.has_transfer_letter.value==="Yes",validation:e=>a.required(e)},{id:"cd4_percent",helpText:"CD4 Percent",type:n.TT_TEXT,condition:e=>e.new_cd4_percent_available.value==="Yes",computedValue:({value:e})=>({tag:"staging",obs:this.registration.buildValueNumber("CD4 percent",parseInt(e.toString().substring(1)),"%")}),onValue:e=>e.value&&!this.staging.cd4CountIsValid(e.value)?(V("Cd4 percentage invalid. Use one modifier or start with either of these symbols: >, < or ="),!1):!0,validation:e=>a.required(e),config:{customKeyboard:[E,[["Delete"]]]}},{id:"type_of_confirmatory_hiv_test",helpText:"Confirmatory HIV test",type:n.TT_SELECT,beforeNext:e=>(this.stagingFacts.testType="".concat(e.value),!0),validation:e=>a.required(e),onValue:async e=>(e.value==="Not done"&&await c("Reminder","UNKNOWN HIV CONFIRMATORY TEST","Please arrange for a confirmatory test",[{name:"Agreed",color:"success",slot:"start"}]),!0),computedValue:({value:e})=>({tag:"reg",obs:this.registration.buildValueCoded("Confirmatory hiv test type",e)}),options:e=>[{label:"Rapid antibody test",value:"HIV rapid test"},{label:"DNA PCR",value:"HIV DNA polymerase chain reaction"},{label:"Not done",value:"Not done",disabled:e.has_linkage_code==="Yes"}]},{id:"confirmatory_hiv_test_location",helpText:"Location of confirmatory HIV test",type:n.TT_SELECT,defaultValue:e=>(e.ever_registered_at_art_clinic&&e.ever_registered_at_art_clinic.value)==="Yes"?"":p.getLocationName(),computedValue:e=>({tag:"reg",obs:this.registration.buildValueText("Confirmatory HIV test location",e.label)}),validation:e=>a.required(e),condition:e=>e.type_of_confirmatory_hiv_test.value!="Not done",options:(e,t="")=>this.getFacilities(t),config:{showKeyboard:!0,isFilterDataViaApi:!0}},...l({id:"date_of_confirmatory_hiv_test",helpText:"Confirmatory HIV test",beforeNext:async(e,t)=>{if(t.received_arvs.value!="Yes"){const i=g(this.staging.getDate()).diff(e,"days");if(i>=20)return await c("Data inconsistency warning","Confirmatory Date for newly initiated ART patient is ".concat(i," days ago"),"Are you sure this is accurate?",[{name:"No, Re-enter date",slot:"start",color:"success"},{name:"Yes, its accurate",slot:"end",color:"danger"}])==="Yes, its accurate"}return!0},condition:e=>e.confirmatory_hiv_test_location.value,required:!0,minDate:()=>this.patient.getBirthdate(),maxDate:()=>this.staging.getDate(),estimation:{allowUnknown:!0,estimationFieldType:h.MONTH_ESTIMATE_FIELD},computeValue:(e,t)=>({date:e,tag:"reg",isEstimate:t,obs:this.buildDateObs("Confirmatory HIV test date",e,t)})}),this.getStagingSummaryField("Staging summary")]}}});function R(e,t,i,s,r,u){const o=C("his-standard-form");return A(),S(o,{cancelDestinationPath:e.cancelDestination,fields:e.fields,onFinishAction:e.onSubmit},null,8,["cancelDestinationPath","fields","onFinishAction"])}const M=D(x,[["render",R]]);export{M as default};
