import{H as f}from"./HisStandardForm-BJZg4csl.js";import{bU as S,d as w,r as _,a9 as v,aa as b,aZ as r,O as s,ad as h,ah as g,u as y,v as x,w as C,x as T,y as l,a5 as D}from"./index-BMVUUxuO.js";import{u as P}from"./useEncounter-CyzDcDi4.js";import"./isEmpty-DO_V95XA.js";import"./encounter_guidelines-BpuRwq-s.js";import"./GuidelineEngine-D6V1_Znr.js";class A extends S{constructor(i,a){super(i,42,a)}}const V=w({__name:"AdmitPatient",setup(c){const i=_([]);let a;const{goToNextTask:u,patientDashboardUrl:d}=P((e,o)=>{a=new A(o,e),i.value.push(p())});async function m(e,o){const t=await Promise.all([o.internal_sections]);await a.createEncounter(),await a.saveObservationList(t),u()}function p(){return{id:"internal_sections",helpText:"Select Ward/internal section",type:v.TT_SELECT,validation:e=>b.required(e),computedValue:e=>a.buildValueText("Admit to ward",e.label),options:()=>r.getInternalSections(),config:{showKeyboard:!0,footerBtns:[{name:"Add Section",slot:"end",color:"success",onClick:async(e,o,t)=>{if(typeof t.filter!="string"||t.filter.length<3)return s("Please enter a valid section name");if(t.filtered.some(n=>n.label.toLowerCase()===t.filter.toLowerCase()))return s("Section already existing");if(await h("Do you want to add internal section?")){const n=await r.createInternalSection(t.filter.toUpperCase());n?(t.filter=n.name,t.listData=[{label:n.name,value:n.id},...t.listData]):g("Unable to add ".concat(t.filter))}}}]}}}return(e,o)=>(y(),x(l(D),null,{default:C(()=>[T(f,{cancelDestinationPath:l(d),fields:i.value,onFinishAction:m,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{V as default};
