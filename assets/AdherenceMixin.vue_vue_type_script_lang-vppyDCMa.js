var A=Object.defineProperty;var v=(r,t,e)=>t in r?A(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var h=(r,t,e)=>v(r,typeof t!="symbol"?t+"":t,e);import{bg as d,ae as g,b3 as E,H as u,d as P,t as T,F as p,T as x,V as _}from"./index-CtD5m6Vn.js";import{B as w}from"./htn_service-C2hCwzKR.js";import{_ as R}from"./EncounterMixin.vue_vue_type_script_lang-DwaXqCKA.js";class F extends d{constructor(e,a){super(e,68,a);h(this,"lastDrugs");h(this,"lastReceiptDate");this.lastDrugs=[],this.lastReceiptDate=""}async loadPreviousDrugs(e=!1){const a=new Date(this.date);a.setDate(a.getDate()-1);const i=c=>u.toStandardHisFormat(c),o=await d.getJson("patients/".concat(this.patientID,"/drugs_received"),{date:i(a)});if(!g.isEmpty(o)){this.lastReceiptDate=o.reduce((s,n)=>!s||new Date(i(n.order.start_date))>new Date(s)?i(n.order.start_date):s,null);const c=w.htnDrugReferences().map(s=>s.drug_id);if(this.lastDrugs=o.filter(s=>!c.includes(s.drug.drug_id)&&i(s.order.start_date)===this.lastReceiptDate),e){const s=await this.getPreviousDrugPillCount()||{};this.lastDrugs=this.lastDrugs.map(n=>(s[n.drug.drug_id]&&n.quantity&&(n.quantity+=s[n.drug.drug_id]),n))}}}getReceiptDate(){return this.lastReceiptDate}getLastDrugs(){return this.lastDrugs}receivedDrugsBefore(){return!g.isEmpty(this.lastDrugs)}buildPillCountObs(e,a){return this.buildValueNumber("Number of tablets brought to clinic",a,null,e)}getPreviousDrugPillCount(){return d.getJson("last_drugs_pill_count",{patient_id:this.patientID,program_id:this.programID,date:this.lastReceiptDate})}async buildAdherenceObs(e,a,i){return{concept_id:await d.getConceptID("Drug adherence",!0),value_numeric:i,value_drug:a,value_modifier:"%",order_id:e,person_id:this.patientID,obs_datetime:d.getSessionDate()}}isAdherenceGood(e){return e>=95&&e<=105}calculateAdherence(e,a,i){return Math.round(100*(e-a)/(e-i))}calculateExpected(e,a,i,o){const c=o==="QW"?"week":"day",s=this.calcTimeElapsed(i,c);return e-s*parseFloat(a.toString())}calcTimeElapsed(e,a){return E(u.toStandardHisFormat(this.date)).diff(u.toStandardHisFormat(e),a)+1}calculateUnaccountedOrMissed(e,a){const i=parseFloat(e)-parseFloat(a);return i<0?i*-1+" missed":i+" unacc"}}const C=P({mixins:[R],data:()=>({adherence:{},drugObs:[],askReasonForPoorAdherence:!1,calculationAgreementObs:[]}),methods:{async saveAdherence(){await this.adherence.createEncounter();const r=await Promise.all([...this.drugObs,...this.calculationAgreementObs]);if(!await this.adherence.saveObservationList(r))return T("Unable to save patient observations")},buildAdherenceReport(r){const t=this.adherence.getReceiptDate(),e=this.adherence.calcTimeElapsed(t,"day"),a=" Last visit: ".concat(u.toStandardHisDisplayFormat(t)," \n                (").concat(e," Days Elapsed)"),i=[{indexes:[0,3,6],class:"adherence-col-bg"}],o=[],c=[a],s=[["Prescription"],["Tabs given"],["Tabs per"],["Tabs remaining"],["Expected"],["Actual (counted)"],["Adherence"],["Doses missed/ Unaccounted for"],["Doses consumed"],["Art Adherence"]];return r.forEach((n,D)=>{const y=this.formatFrequency(n.frequency),l=this.calcPillsExpected(n),m=this.adherence.calculateAdherence(n.quantity,n.pillsBrought,l),b=this.adherence.isAdherenceGood(m)?"Good adherence":"Explore problem",f=this.adherence.calculateUnaccountedOrMissed(l,n.pillsBrought);c.push(n.drug.name),s[0].push(""),s[1].push(n.quantity),s[2].push("".concat(n.equivalent_daily_dose," <b>").concat(y,"</b>")),s[3].push(""),s[4].push(l<0?0:l),s[5].push(n.pillsBrought),s[6].push(""),s[7].push(f),s[8].push("".concat(m,"%")),s[9].push(b),o.push({index:D+1,row:9,class:b.match(/good/i)?"adherence-txt-good":"adherence-txt-bad"})}),[{label:"Selected Medication",value:"Table",other:{columns:c,rows:s,rowColors:i,cellColors:o}}]},formatFrequency(r){return"".concat(r).match(/qod/i)?"QOD":"".concat(r).match(/weekly/i)?"QW":r},calcPillsExpected(r){return this.adherence.calculateExpected(r.quantity,r.equivalent_daily_dose,r.order.start_date,this.formatFrequency(r.frequency))},getAdherenceFields(r=!1){return[{id:"pills_brought",helpText:"Pills remaining (brought to clinic)",type:p.TT_ADHERENCE_INPUT,init:async()=>(this.adherence=new F(this.patientID,this.providerID),await this.adherence.loadPreviousDrugs(await x.get("ASK_HANGING_PILLS")),!0),condition:()=>r?this.adherence.receivedDrugsBefore():!0,validation:t=>_.required(t)?["No drugs available"]:t.map(a=>a.value==="").some(Boolean)?["Some values are missing"]:null,unload:async t=>{this.drugObs=[],t.forEach(async e=>{const{drug:a,order:i}=e.other,o={...e.other,pillsBrought:e.value},c=this.adherence.calculateAdherence(o.quantity,o.pillsBrought,this.calcPillsExpected(o));this.drugObs.push(this.adherence.buildAdherenceObs(i.order_id,a.drug_id,c)),this.drugObs.push(this.adherence.buildPillCountObs(i.order_id,e.value)),this.askReasonForPoorAdherence||(this.askReasonForPoorAdherence=!this.adherence.isAdherenceGood(o))})},options:t=>g.isEmpty(t.pills_brought)?this.adherence.getLastDrugs().map(e=>({label:e.drug.name,value:"",other:{...e}})):t.pills_brought},{id:"adherence_report",helpText:"ART adherence",type:p.TT_TABLE_VIEWER,condition:()=>r?this.adherence.receivedDrugsBefore():!0,options:t=>this.buildAdherenceReport(t.pills_brought.map(e=>({...e.other,pillsBrought:e.value}))),config:{hiddenFooterBtns:["Clear"]}},{id:"agree_with_calculation",helpText:"Agree with adherence calculation",type:p.TT_SELECT,condition:()=>this.askReasonForPoorAdherence,validation:t=>_.required(t),unload:({value:t})=>{this.calculationAgreementObs=[this.adherence.buildValueCoded("Reason for poor treatment adherence",t)]},options:()=>[{label:"Yes",value:"Yes"},{label:"No",value:"No"}]}]}}});export{C as _};
