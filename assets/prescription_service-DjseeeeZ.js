var p=Object.defineProperty;var m=(o,n,t)=>n in o?p(o,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[n]=t;var c=(o,n,t)=>m(o,typeof n!="symbol"?n+"":n,t);import{D as g}from"./drug_order_service-DwQHOfYk.js";import{ao as f,bQ as a,aN as D,H as u,ci as l}from"./index-CMZASHAR.js";class d extends f{constructor(){super()}static getAllArvRegimens(){return this.getJson("programs/".concat(this.getProgramID(),"/all_arv_regimens"))}static getRegimens(n){return this.getJson("programs/".concat(this.getProgramID(),"/regimens"),{patient_id:n})}static getCustomIngridients(){return this.getJson("programs/".concat(this.getProgramID(),"/custom_regimen_ingredients"))}static getCurrentRegimen(n,t=this.getSessionDate()){return this.getJson("programs/".concat(this.getProgramID(),"/").concat(n),{date:t})}}class E extends a{constructor(t,e){super(t,25,e);c(this,"nextVisitInterval");c(this,"fastTrack");c(this,"regimenExtras");c(this,"hangingPills");c(this,"fastTrackMedications");c(this,"medicationOrders");c(this,"treatmentState");c(this,"contraindications");c(this,"sideEffects");c(this,"tptPrescriptionCount");c(this,"lastSideEffectDate");this.nextVisitInterval=0,this.fastTrack=!1,this.regimenExtras=[],this.fastTrackMedications=[],this.hangingPills=[],this.medicationOrders=[],this.treatmentState="",this.contraindications={},this.sideEffects={},this.tptPrescriptionCount=0,this.lastSideEffectDate=""}setNextVisitInterval(t){this.nextVisitInterval=t}getHangingPills(){return this.hangingPills}getMedicationOrders(){return this.medicationOrders.map(t=>a.getCachedConceptName(t))}getTptPrescriptionCount(){return this.tptPrescriptionCount}getLastSideEffectDate(){return this.lastSideEffectDate}getContraindications(){return this.contraindications}getSideEffects(){return this.sideEffects}getRegimenExtras(){return this.regimenExtras}getPatientRegimens(){return d.getRegimens(this.patientID)}getARVs(){return d.getJson("arv_drugs")}getCustomIngridients(){return d.getCustomIngridients()}getFastTrackMedications(){return this.fastTrackMedications}getTreatmentState(){return this.treatmentState}isFastTrack(){return this.fastTrack}medicationOrdersAvailable(){return!D.isEmpty(this.medicationOrders)}shouldPrescribeArvs(){const t=a.getCachedConceptID("Antiretroviral drugs");return this.medicationOrders.includes(t)}shouldPrescribeExtras(){return a.getConceptsByCategory("art_extra_medication_order").map(s=>this.medicationOrders.includes(s.concept_id)).some(Boolean)}getRegimenStarterpack(t,e){const s={weight:e,regimen:t};return a.getJson("programs/".concat(a.getProgramID(),"/regimen_starter_packs"),s)}async getLvpDrugsByType(t,e){return a.getJson("programs/".concat(a.getProgramID(),"/regimens/").concat(e),{patient_id:this.patientID,lpv_drug_type:t})}async loadContraindications(){const t=await a.getConceptID("Contraindications");(await a.getObs({concept_id:t,person_id:this.patientID})).forEach(s=>{const i=u.toStandardHisFormat(s.obs_datetime);this.contraindications[i]||(this.contraindications[i]=[]);const r=a.getCachedConceptName(s.value_coded);this.contraindications[i].push(r)})}async loadDrugInduced(){const t=await a.getConceptID("Drug induced"),e=await a.getObs({concept_id:t,person_id:this.patientID});e&&e.forEach(s=>{const i=u.toStandardHisFormat(s.obs_datetime);if(this.lastSideEffectDate||(this.lastSideEffectDate=i),!s.value_drug||!s.value_coded)return;this.sideEffects[i]||(this.sideEffects[i]={}),this.sideEffects[i][s.value_drug]||(this.sideEffects[i][s.value_drug]=[]);const r=a.getCachedConceptName(s.value_coded);this.sideEffects[i][s.value_drug].push(r)})}async loadTptPrescriptionCount(){const t=await a.getJson("tpt_prescription_count",{patient_id:this.patientID,date:this.date});if(t){const e=t.count+1;this.tptPrescriptionCount=e>3?3:e}}async loadFastTrackStatus(){const t=await a.getFirstValueCoded(this.patientID,"Fast track"),e=await a.getConceptID("yes");t&&(this.fastTrack=t===e)}async loadRegimenExtras(t=this.date){const e=await d.getJson("programs/".concat(d.getProgramID(),"/patients/").concat(this.patientID,"/dosages"),{date:t});e&&(this.regimenExtras=Object.values(e))}async loadMedicationOrders(){const t=await a.getConceptID("Medication orders"),e=await a.getObs({concept_id:t,date:this.date,person_id:this.patientID,page_size:5});this.medicationOrders=e.map(s=>s.value_coded)}async loadHangingPills(){const t=await a.getAll(this.patientID,"Pills brought")||[];this.hangingPills=t.filter(e=>e.value_numeric>=1?e.value_drug&&l(e.obs_datetime)===l(this.date)?!0:e.order||!1:!1).map(e=>{var s,i;return((i=(s=e==null?void 0:e.order)==null?void 0:s.drug_order)==null?void 0:i.drug_inventory_id)||e.value_drug})}async loadFastTrackMedications(){const e=(await g.getLastDrugsReceived(this.patientID)).map(async s=>{const{drug:i}=s,r=await g.getDrugDosages(this.patientID,i.drug_id);return{drug_id:i.drug_id,drug_name:i.name,units:i.units,am:r.am,noon:r.noon,pm:r.pm,frequency:s.frequency}});this.fastTrackMedications=await Promise.all(e)}async loadTreatmentState(){const t={date:this.date},e=await a.getJson("programs/".concat(a.getProgramID(),"/patients/").concat(this.patientID,"/status"),t);e&&(this.treatmentState=e.status)}findAndGroupDrugSideEffects(t){const e={};for(const s in this.sideEffects){const i=this.sideEffects[s];for(const r in i)t.includes(parseInt(r))&&(e[s]||(e[s]=[]),e[s]=[...e[s],...i[r]])}return e}calculatePillsPerDay(t,e,s){return parseFloat(t.toString())+e+s}estimatePackSize(t,e=0){const s=t*this.nextVisitInterval/(e||1);let i=Math.round(s);return i<=0&&(i+=1),i}calculateDosage(t,e){let s=0;return e===0&&(s=t),t==0&&(s=e),t>0&&e>0&&(s=(t+e)/2),s}calculateEquivalentDosage(t,e){return t+e}calculateDateFromInterval(){const t=new Date(this.date);return t.setDate(t.getDate()+this.nextVisitInterval),u.toStandardHisFormat(t)}getDrugPackSize(t){if(t.pack_size)return t.pack_size;try{return t.barcodes[0].tabs}catch(e){return 30}}getInstructions(t,e,s,i){return"".concat(t," :- Morning: ").concat(e," ").concat(i,", Evening: ").concat(s," ").concat(i)}toOrderObj(t,e,s,i=0,r=0,h=""){return{drug_inventory_id:t,equivalent_daily_dose:this.calculateEquivalentDosage(i,r),start_date:this.date,auto_expire_date:this.calculateDateFromInterval(),units:s,instructions:this.getInstructions(e,i,r,s),dose:this.calculateDosage(i,r),frequency:h}}async getReasonForRegimenSwitch(){const t=await a.getFirstValueText(this.patientID,"Reason for ARV switch");return t||"N/A"}async createDrugOrder(t){return g.create({encounter_id:this.encounterID,drug_orders:t})}async createHangingPillsObs(t){return this.saveValueTextObs("appointment type",t)}async createRegimenSwitchObs(t){return this.saveValueTextObs("Reason for ARV switch",t)}}export{E as P,d as R};
