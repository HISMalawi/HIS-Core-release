import{d as l,T as c,ae as u,q as d,aP as p,p as m}from"./index-Bb5e7Gwm.js";import{F as o,E as f}from"./encounter_guidelines-VYVjdqQ1.js";import{m as D}from"./GuidelineEngine-D6V1_Znr.js";import{H as v}from"./HisStandardForm-CB4MLGeB.js";const _=l({components:{HisStandardForm:v},data:()=>({patient:{},fields:[],patientID:"",providerID:-1,providers:[],facts:{sessionDate:"",apiDate:"",encounterName:"N/A",providers:[],isBdeMode:!1,birthDate:"",outcome:"",outcomeStartDate:""},ready:!1}),watch:{$route:{handler(t){t.params.patient_id&&this.patientID!=t.params.patient_id&&(this.patientID=parseInt(t.params.patient_id),c.get("ACTIVE_PATIENT",{patientID:this.patientID}).then(e=>{this.patient=e,this.setEncounterFacts().then(()=>{this.checkEncounterGuidelines().then(()=>{this.ready=!0})})}))},immediate:!0,deep:!0}},computed:{cancelDestination(){return this.patientDashboardUrl()}},methods:{runflowState(t,e=null){const s={};if(s[o.SET_PROVIDER]=a=>{const[n]=a.split(" "),r=u.find(this.providers,{username:n});return r&&(this.providerID=r.person_id),o.CONTINUE},s[o.CHANGE_SESSION_DATE]=()=>(this.$router.push("/session/date?patient_dashboard_redirection_id=".concat(this.patientID)),o.EXIT),s[o.CHANGE_PATIENT_OUTCOME]=()=>(this.$router.push("/patient/programs/".concat(this.patientID)),o.EXIT),s[o.GO_TO_PATIENT_DASHBOARD]=()=>(this.gotoPatientDashboard(),o.EXIT),t in s)return s[t](e)},async checkEncounterGuidelines(){var e,s,a,n;const t=D(this.facts,f);for(const r in t){const i=t[r];if((e=i==null?void 0:i.actions)!=null&&e.alert&&this.runflowState(await((s=i==null?void 0:i.actions)==null?void 0:s.alert(this.facts)))===o.EXIT)return;if((a=i==null?void 0:i.actions)!=null&&a.selection){const h=await((n=i==null?void 0:i.actions)==null?void 0:n.selection(this.facts));this.runflowState(h.flowState,h.value)}}},async setEncounterFacts(){try{const t=await c.get("PATIENT_PROGRAM",{patientID:this.patientID});this.facts.outcome=t.outcome,this.facts.outcomeStartDate=t.startDate}catch(t){console.error(t),d("".concat(t))}if(this.facts.sessionDate=p.getSessionDate(),this.facts.apiDate=p.getCachedApiDate(),this.facts.isBdeMode=p.isBDE(),this.facts.birthDate=this.patient.getBirthdate(),this.facts.encounterName=this.$route.name?this.$route.name.toString().toUpperCase():"N/A",p.isBDE()){this.providers=await c.get("PROVIDERS");const t=u.find(this.providers,s=>s.user_id==p.getUserID());this.providers=this.providers.sort((s,a)=>{const n=s.username.toUpperCase(),r=a.username.toUpperCase();return n<r?-1:n>r?1:0});const e=t?[t,...this.providers]:this.providers;this.facts.providers=u.uniq(e.map(s=>{var n,r;let a="".concat(s.username);if(!u.isEmpty((n=s==null?void 0:s.person)==null?void 0:n.names)){const[i]=((r=s.person)==null?void 0:r.names)||[];a+=" (".concat(i.given_name," ").concat(i.family_name,")")}return a}))}},toOption(t,e={}){return{label:t,value:t,other:e}},mapStrToOptions(t){return t.map(e=>({label:e,value:e}))},patientDashboardUrl(){return"/patient/dashboard/".concat(this.patientID)},gotoPatientDashboard(){return this.$router.push({path:this.patientDashboardUrl()})},nextTask(){return m(this.patientID,this.$router)},yesNoOptions(){return[{label:"Yes",value:"Yes"},{label:"No",value:"No"}]},toYesNoOption(t,e={}){return{label:t,value:"",other:{...e,values:this.yesNoOptions()}}},mapOptions(t){return t.map(e=>({label:e,value:e}))},yesNoUnknownOptions(){return[{label:"Yes",value:"Yes"},{label:"No",value:"No"},{label:"Unknown",value:"Unknown"}]},resolveObs(t,e=""){const s=Object.values(t).filter(a=>a&&(a.tag===e||e==="")).reduce((a,n)=>{const r=n.obs?n.obs:n;return Array.isArray(r)?a=a.concat(r):typeof r=="function"?a.push(r()):a.push(r),a},[]);return Promise.all(s)},inArray(t,e){try{return t.filter(s=>e(s)).length>0}catch(s){return!1}},validateSeries(t){try{for(const e in t){const s=t[e]();if(s)return s}}catch(e){return[e]}}}});export{_};
