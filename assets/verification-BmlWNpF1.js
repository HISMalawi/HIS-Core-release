import{d as c,R as l,am as d,dm as n,ad as s,ae as o,W as u,de as p,H as _,aa as h,c as y,af as v,a as m}from"./index-CMZASHAR.js";import{H as f}from"./HisStandardForm-BCjM4-bc.js";const b=c({components:{HisStandardForm:f},data:()=>({activeField:"",fields:[],drugs:[],stockService:{}}),methods:{async onFinish(t){const a=this.prepDrugs(t);try{await this.stockService.batchUpdate({verification_date:t.date.value,reason:t.reason.value,items:a}),l("Stock succesfully updated"),this.$router.push("/")}catch(e){d("Could not save stock"),console.error(e)}},mapDrugsToOptions(t){const a=new Map;return t.forEach(e=>{var i;e.pack_size||(e.pack_size=n.getPackSize(e.drug_id)),e.original_quantity=Math.trunc(e.current_quantity/(e.pack_size||1)),e.current_quantity=e.original_quantity,a.has(e.drug_id)?(i=a.get(e.drug_id))==null||i.other.push(e):a.set(e.drug_id,{label:"".concat((e==null?void 0:e.drug_name)||(e==null?void 0:e.drug_legacy_name)," (").concat(e.product_code,")"),value:e.drug_id,other:[e]})}),Array.from(a.values())},getFields(){return[{id:"date",helpText:"Verification Date",type:s.TT_FULL_DATE,validation:t=>o.required(t)},{id:"enter_batches",helpText:"Batch entry",type:s.TT_BATCH_VERIFICATION,options:()=>this.drugs,validation:t=>o.required(t),init:async()=>{try{const t=await this.stockService.getItems();return this.drugs=this.mapDrugsToOptions(t),!0}catch(t){return console.error(t),u("Unable to load drugs"),!1}}},{id:"reason",helpText:"Select reason",type:s.TT_SELECT,validation:t=>o.required(t),options:()=>[{label:"Monthly stock take",value:"Monthly stock take"},{label:"Audit",value:"Audit"},{label:"Adhoc (due to stock imbalance)",value:"Adhoc (due to stock imbalance)"},{label:"Supervision",value:"Supervision"},{label:"Handover",value:"Handover"}]},{id:"verification_summary",helpText:"Summary",type:s.TT_TABLE_VIEWER,options:t=>this.buildResults(t.enter_batches),config:{hiddenFooterBtns:["Clear"]}}]},buildResults(t){const a=["Drug Name (BatchNumber)","Tins/Pallets","Reason for Modification","Expiry date"],e=t.map(i=>["".concat(i.drug_name," (").concat(i.batch_number,")"),p(i.current_quantity),i.reason,_.toStandardHisDisplayFormat(i.expiry_date)]);return[{label:"Confirm entry",value:"Table",other:{columns:a,rows:e}}]},prepDrugs(t){return t.enter_batches.map(a=>({id:a.id,current_quantity:parseInt(a.pack_size)*parseInt(a.current_quantity),delivered_quantity:a.delivered_quantity,pack_size:a.pack_size,expiry_date:a.expiry_date,delivery_date:a.delivery_date,batch_number:a.batch_number,reason:a.reason}))}},async created(){this.stockService=new n,this.fields=this.getFields()}});function k(t,a,e,i,T,S){const r=v("his-standard-form");return m(),y(r,{fields:t.fields,activeField:t.activeField,onFinishAction:t.onFinish,skipSummary:!0},null,8,["fields","activeField","onFinishAction"])}const A=h(b,[["render",k]]);export{A as default};
