import{D as l,C as i}from"./data_cleaning_report_service-Ch0qcmST.js";import{_ as D}from"./ReportMixin.vue_vue_type_script_lang-BkEBICIk.js";import{R as _}from"./TableReportTemplate-BzYrhG4C.js";import{d as f,a5 as w,ab as g,ac as T,aM as h,aq as t,aK as R,dj as u,cW as x,al as c,a8 as b,ad as p,u as v,v as I,w as S,x as C}from"./index-DrPQ21-i.js";import"./BasicReportTemplate-C9nv9YKJ.js";import"./Export-CWTuI3QV.js";import"./Pagination-CnUjUj_l.js";import"./HisStandardForm-rh8Trs2q.js";import"./ReportErrors-DfCcETVj.js";const E=f({mixins:[D],components:{ReportTemplate:_,IonPage:w},data:()=>({title:"Data cleaning report",rows:[],columns:[]}),created(){this.fields=[{id:"indicator",helpText:"Select indicator",type:g.TT_SELECT,requireNext:!1,validation:a=>T.required(a),options:()=>this.getIndicatorOptions()},...h({id:"start_date",helpText:"Start",required:!0,condition:a=>!a.indicator.other.skipDateSelection,minDate:()=>"2001-01-01",maxDate:()=>c.getSessionDate(),estimation:{allowUnknown:!1},computeValue:a=>a}),...h({id:"end_date",helpText:"End",required:!0,condition:a=>!a.indicator.other.skipDateSelection,minDate:(a,e)=>e.start_date,maxDate:()=>c.getSessionDate(),estimation:{allowUnknown:!1},computeValue:a=>a})]},methods:{async onPeriod(a,e){this.rows=[],this.title=a.indicator.label;const s=a.indicator;this.columns=s.other.columns,await s.other.setRows(a,e)},masterCardBtn(a){return t.tdBtn("View",()=>this.$router.push("/art/mastercard/".concat(a)))},getDefaultIndicatorColumns(a=[]){return[[t.thTxt("ARV Number"),t.thTxt("Patient Id"),t.thTxt("First Name"),t.thTxt("Last Name"),t.thTxt("Gender"),t.thTxt("Date of birth"),...a,t.thTxt("Action")]]},async setDefaultIndicatorRows(a,e,s,o=null){this.report=new l,this.report.setStartDate(e),this.report.setEndDate(s),this.period=this.report.getDateIntervalPeriod();const n=this.sortByArvNumber(await this.report.getCleaningToolReport(a)||[],"arv_number");R.isEmpty(n)||n.forEach(r=>{const d=typeof o=="function"?o(r):[];this.rows.push([t.td(r.arv_number),t.td(r.patient_id),t.td(r.given_name),t.td(r.family_name),t.td(this.formatGender(r.gender)),t.tdDate(r.birthdate),...d,this.masterCardBtn(r.patient_id)])})},getIndicatorOptions(){return[{label:"DOB > Date enrolled",value:i.DobMoreThanEnrolledDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(i.DobMoreThanEnrolledDate,e.start_date,e.end_date)}},{label:"Date enrolled < Earliest start date",value:i.DateEnrolledLessThanEarliestStartDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Earliest start date"),t.thTxt("Date enrolled")]),setRows:(a,e)=>this.setDefaultIndicatorRows(i.DateEnrolledLessThanEarliestStartDate,e.start_date,e.end_date,s=>[t.tdDate(s.earliest_start_date),t.tdDate(s.date_enrolled)])}},{label:"Encounters after Death",value:i.ClientsWithEncountersAfterDeath,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(i.ClientsWithEncountersAfterDeath,e.start_date,e.end_date)}},{label:"Incomplete visits",value:"Incomplete visits",other:{skipDateSelection:!1,columns:[[t.thTxt("ARV#"),t.thTxt("NHID"),t.thTxt("First name"),t.thTxt("Last name"),t.thTxt("Gender"),t.thTxt("Birthdate"),t.thTxt("Date(s)"),t.thTxt("Action")]],setRows:async(a,e)=>{this.report=new l,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod();const s=await this.report.getIncompleteVisits();for(const o in s){const n=s[o];this.rows.push([t.td(n.arv_number),t.td(n.national_id),t.td(n.given_name),t.td(n.family_name),t.td(this.formatGender(n.gender)),t.tdDate(n.birthdate),t.td(n.dates.map(r=>this.toDate(r)).join("<br/>")),this.masterCardBtn(parseInt(o.toString()))])}}}},{label:"Enrolled on ART before birth",value:"Enrolled on ART before birth",other:{skipDateSelection:!0,columns:[[t.thTxt("ARV number"),t.thTxt("Name"),t.thTxt("Earliest start date"),t.thTxt("Date enrolled"),t.thTxt("Gender"),t.thTxt("Birth Date"),t.thTxt("Action")]],setRows:async()=>{try{this.report=new l,(await this.report.getEnrolledOnArtBeforeBirth()).forEach(e=>{this.rows.push([t.td(e.identifier),t.td(e.name),t.tdDate(e.earliest_start_date),t.tdDate(e.date_enrolled),t.td(this.formatGender(e.gender)),t.tdDate(e.birthdate),this.masterCardBtn(e.patient_id)])})}catch(a){if(!(a instanceof u))throw a}}}},{label:"Missing VL Results",value:"Missing VL Results",other:{columns:[[t.thTxt("ARV number"),t.thTxt("First name"),t.thTxt("Last name"),t.thTxt("Gender"),t.thTxt("Accession number"),t.thTxt("Order date"),t.thTxt("Action")]],setRows:async(a,e)=>{try{this.report=new l,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod(),(await this.report.getCleaningToolReport(i.MissingVlResults)).forEach(o=>{this.rows.push([t.td(o.arv_number),t.td(o.given_name),t.td(o.family_name),t.td(this.formatGender(o.gender)),t.td(o.accession_number),t.tdDate(o.order_date),this.masterCardBtn(o.patient_id)])})}catch(s){if(!(s instanceof u))throw s}}}},{label:"Male patients with female observations",value:i.MalesWithFemaleObs,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Visit date")]),setRows:(a,e)=>this.setDefaultIndicatorRows(i.MalesWithFemaleObs,e.start_date,e.end_date,s=>[t.tdDate(s.visit_date)])}},{label:"Missing important demographics elements",value:i.MissingDemographics,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(i.MissingDemographics,e.start_date,e.end_date)}},{label:"Missing start reason",value:i.MissingStartReasons,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(i.MissingStartReasons,e.start_date,e.end_date)}},{label:"Missing ART start date",value:i.MissingArtStartDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(i.MissingArtStartDate,e.start_date,e.end_date)}},{label:"Multiple start reasons",value:i.MultipleStartReasons,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Reasons"),t.thTxt("Visits")]),setRows:(a,e)=>this.setDefaultIndicatorRows(i.MultipleStartReasons,e.start_date,e.end_date,s=>[t.td("".concat(s.reasons).split(",").join("<p/>")),t.td(s.visits.split(",").map(o=>x(o)).join("<p/>"))])}},{label:"Patients with Pre-ART / Unknown outcome",value:i.PreArtOrUnknownOutcomes,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(i.PreArtOrUnknownOutcomes,e.start_date,e.end_date)}},{label:"Prescriptions without dispensations",value:i.PrescriptionWithoutDispensation,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Visit Date")]),setRows:(a,e)=>this.setDefaultIndicatorRows(i.PrescriptionWithoutDispensation,e.start_date,e.end_date,s=>[t.tdDate(s.visit_date)])}},{label:"Different pregnancy value on same date",value:i.DifferentPregnancyValueOnSameDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Visit Date")]),setRows:(a,e)=>this.setDefaultIndicatorRows(i.DifferentPregnancyValueOnSameDate,e.start_date,e.end_date,s=>[t.tdDate(s.visit_date)])}}]}}});function k(a,e,s,o,n,r){const d=p("report-template"),m=p("ion-page");return v(),I(m,null,{default:S(()=>[C(d,{title:a.title,period:a.period,rows:a.rows,fields:a.fields,columns:a.columns,showFilters:!0,onReportConfiguration:a.onPeriod},null,8,["title","period","rows","fields","columns","onReportConfiguration"])]),_:1})}const G=b(E,[["render",k]]);export{G as default};
