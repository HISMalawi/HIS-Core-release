System.register(["./index-legacy-2OuOZQ1w.js","./HisStandardForm-legacy-Cd-xGvNm.js","./vitals_service-legacy-BemjK_th.js","./EncounterMixin.vue_vue_type_script_lang-legacy-0B8kyv9-.js","./htn_service-legacy-CNFo9QKC.js","./encounter_guidelines-legacy-w17rLgkK.js","./GuidelineEngine-legacy-KsvQuFdF.js"],(function(t,e){"use strict";var i,a,s,n,l,h,r,o,c,g,d,u,p,b,v,H,f,m,y,w,T,F,B;return{setters:[t=>{i=t.d,a=t.bj,s=t.an,n=t.ao,l=t.aD,h=t.a$,r=t.dl,o=t.bo,c=t.B,g=t.a_,d=t.dz,u=t.aw,p=t.be,b=t.q,v=t.p,H=t.am,f=t.a,m=t.ar,y=t.b},t=>{w=t.H},t=>{T=t.V},t=>{F=t._},t=>{B=t.B},null,null],execute:function(){const e=i({mixins:[F],components:{HisStandardForm:w},data:()=>({app:a.getActiveApp(),activeField:"",age:null,gender:null,hasBPinfo:!1,finalHeightValue:null,recentHeight:null,recentHeightObsID:-1,HTNEnabled:!1,optionWhiteList:[],hasHTNObs:!1,vitals:{},weightForHeight:{},medianWeightandHeight:{},canEditHeight:!1,patientAgeAtPrevRecordedHeight:-1,bpIsMandatory:!1}),watch:{ready:{handler(t){t&&this.init()},immediate:!0}},methods:{init(){this.vitals=new T(this.patientID,this.providerID),this.age=this.patient.getAge(),this.gender=this.patient.getGender(),this.fields=this.getFields()},getOptions(){let t="";this.recentHeight&&(this.age>18||this.patientAgeAtPrevRecordedHeight>=18)&&(t=this.recentHeight||"");const e=[{label:"Weight",value:"",other:{modifier:"KG",icon:"weight",required:!0}},{label:"Height",value:`${t}`,other:{modifier:"CM",icon:"height",recentHeight:this.recentHeight,visible:this.canEditHeight,required:this.canEditHeight}},{label:"BP",value:"",other:{modifier:"mmHG",icon:"bp",required:this.bpIsMandatory}},{label:"Temp",value:"",other:{modifier:"Â°C",icon:"temp"}},{label:"SP02",value:"",other:{modifier:"%",icon:"spo2"}},{label:"Pulse",value:"",other:{modifier:"BPM",icon:"pulse-rate"}},{label:"Age",value:this.age,other:{modifier:"Years old",icon:"",visible:!1}}];return g.isEmpty(this.optionWhiteList)?e:e.filter((t=>this.optionWhiteList.includes(t.label))).map((t=>(t.other.required=!0,t)))},canCheckWeightHeight(){return g.isEmpty(this.optionWhiteList)||this.optionWhiteList.includes("Height")&&this.optionWhiteList.includes("Weight")},canCheckBp(){return g.isEmpty(this.optionWhiteList)||this.optionWhiteList.includes("BP")},async onFinish(t){if(!(await this.vitals.createEncounter()))return b("Unable to create treatment encounter");const e=await this.buildObs(t);if(!(await this.vitals.saveObservationList(e)))return b("Unable to save patient observations");v("Observations and encounter created!"),this.nextTask()},async buildObs(t){const e=await this.mapObs(this.sanitizeVitals(t.vitals).filter((t=>"BP"!==t.label)).map((t=>("Height"===t.label&&t.other.visible&&this.finalHeightValue&&(t.value=this.finalHeightValue),t))));if(this.HTNEnabled&&!this.hasHTNObs&&t.on_htn_medication){const i=await this.vitals.buildValueText("Treatment status",t.on_htn_medication.value);e.push(i)}return e},splitBP(t){const e=[];return t.forEach((t=>{if("BP"===t.label){const i=`${t.value}`.split("/"),a=i[0],s=i[1];e.push({label:"Systolic",value:a}),e.push({label:"Diastolic",value:s})}})),e},getBMI(t){const e=this.getVal(t,"Weight"),i=this.getVal(t,"Height"),a=[];if(this.age<=14){const t=(e/parseFloat(this.medianWeightandHeight.weight)*100).toFixed(0),s=(i/parseFloat(this.medianWeightandHeight.height)*100).toFixed(0),n=(i%Math.floor(i)<.5?0:.5)+Math.floor(i),l=(e/this.weightForHeight[n.toFixed(1)]*100).toFixed(0);isNaN(parseFloat(l))||a.push({label:"Weight for height percent of median",value:l}),a.push({label:"Weight for age percent of median",value:t}),a.push({label:"Height for age percent of median",value:s})}else{const t=d.calculateBMI(e,i);a.push({label:"BMI",value:t})}return a},getVal(t,e){const i=t.filter((t=>t.label===e));return""===i[0].value?0:parseFloat(`${i[0].value}`)},async mapObs(t){const e=t.map((async t=>await this.vitals.buildValueNumber(t.label,t.value)));return Promise.all(e)},validateVitals(t){const e=this.checkRequiredVitals(t);if(e.length>0)return e.map((t=>[`${t.label} can not be empty`]));const i=this.sanitizeVitals(t);return this.vitals.validateAll(i)},sanitizeVitals(t){let e=t.filter((t=>("Height"!==t.label||0!=t.other.required)&&""!==t.value&&"Age"!==t.label));return this.canCheckBp()&&(e=e.concat(this.splitBP(e))),this.canCheckWeightHeight()&&(e=e.concat(this.getBMI(t))),e},checkRequiredVitals:t=>t.filter((t=>""===t.value&&!0===t.other.required)),getFields(){return[{id:"on_htn_medication",helpText:"Is client hypertensive?",type:n.TT_SELECT,init:async()=>{if("ART"===this.app?.applicationName&&(this.HTNEnabled=await l.get("IS_ART_HTN_ENABLED"),this.HTNEnabled)){await T.getAll(this.patientID,"Treatment status").then((t=>{this.hasHTNObs=t&&t.length>0}));const t=new B(this.patientID,this.providerID),e=await t.getBPTrail();if(Object.keys(e).length>0&&!B.isBpNormotensive(e))return this.bpIsMandatory=!0,await h("HTN alert","Patient's previous BP readings were not within normal range","Bp Test is required to continue",[{name:"Continue",slot:"start",color:"primary"}]),!0;const i=await r.htnAgeThreshold()??0,a=await o.getFirstObs(this.patientID,"Systolic blood pressure");i&&this.patient.getAge()>=i&&(this.bpIsMandatory=!a?.obs_datetime||c(T.getSessionDate()).diff(a.obs_datetime,"years")>=1)}return!0},validation:t=>s.required(t),condition:()=>this.HTNEnabled&&!this.hasHTNObs,options:()=>[{label:"Yes",value:"BP Drugs started"},{label:"No",value:"Not on BP Drugs"}]},{id:"vitals",helpText:"Vitals entry",type:n.TT_VITALS_ENTRY,init:async()=>{const t=this.$route.query.vital_options;if(t&&(this.optionWhiteList=t.split(",")),this.canCheckWeightHeight()){const t=await this.patient.getRecentHeightObs();g.isEmpty(t)?this.canEditHeight=!0:(this.patientAgeAtPrevRecordedHeight=c(t.obs_datetime).diff(this.patient.getBirthdate(),"year"),this.recentHeight=t.value_numeric,this.recentHeightObsID=t.obs_id,this.canEditHeight=this.patientAgeAtPrevRecordedHeight<18||this.age<18),this.age<=14&&(this.medianWeightandHeight=await this.patient.getMedianWeightHeight(),this.weightForHeight=await p.getWeightForHeightValues())}return!0},validation:t=>this.validateVitals(t),beforeNext:async t=>{const e=g.find(t,{label:"Height"});if(e&&this.recentHeight&&e.other.visible){const t=parseInt(`${e.value||0}`),i=parseInt(`${this.recentHeight||0}`);if(t<i){const e=`Use ${i} CM`,a=`Use ${t} CM`;await h(`Previous Height "${i} CM"`,`Current Height "${t} CM"`,`Inconsistent Height Reading (Height can not be lower than previous height of " ${this.recentHeight} "CM. Please SELECT the correct height.)`,[{name:e,slot:"start",color:"success"},{name:a,slot:"end",color:"danger"}])===a&&this.recentHeightObsID?await u(`Do you want to void height observation for ${i}`)&&await T.voidObs(this.recentHeightObsID):this.finalHeightValue=i}}return!0},config:{hiddenFooterBtns:["Clear"],onUpdateAlertStatus:async t=>{const e=g.find(t,{label:"Weight"}),i=g.find(t,{label:"Height"});if(!e||!i)return;const a=parseFloat(e.value),s=parseFloat(i.value);if(a<=0||s<=0)return{label:"BMI",value:"N/A",color:"",status:""};const n=await d.getBMI(a,s,this.gender,this.age);return{label:"BMI",value:n.index,color:n.color,status:n.result}},onChangeOption:t=>{if(!t.value&&t.other.required)throw`Value for ${t.label} is required`;if(t.value){const e=this.vitals.validator(t);if(e&&e.length)throw e}}},options:()=>this.getOptions()}]}}});t("default",H(e,[["render",function(t,e,i,a,s,n){const l=m("his-standard-form");return y(),f(l,{fields:t.fields,activeField:t.activeField,onOnskip:e[0]||(e[0]=e=>t.activeField=""),onFinishAction:t.onFinish,skipSummary:!0,cancelDestinationPath:t.cancelDestination},null,8,["fields","activeField","onFinishAction","cancelDestinationPath"])}]]))}}}));
