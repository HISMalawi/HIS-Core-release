import{H as d}from"./HisStandardForm-CxcKR3FF.js";import{_ as p}from"./EncounterMixin.vue_vue_type_script_lang-CFt8Lh3d.js";import{b2 as c,d as u,t as o,P as m,cz as v,V as a,_ as f,r as h,o as _,c as g}from"./index-BPESSmpp.js";import{F as n}from"./dynamic-import-helper-Bsjrd6Ro.js";import{g as T}from"./LocationFieldOptions-CCEPt1U2.js";import{C as b}from"./KbLayouts-VRA-vjeH.js";import"./TouchScreenForm-BjDI66hA.js";import"./ToolbarMediumCard-DnRdVW_r.js";import"./Transformers-BPPLlH12.js";import"./ViewPort-DixuDTZA.js";import"./encounter_guidelines-ilvUE8mV.js";import"./GuidelineEngine-D6V1_Znr.js";class y extends c{constructor(i,t){super(i,104,t)}}const N=u({components:{HisStandardForm:d},mixins:[p],data:()=>({registrationService:{}}),watch:{ready:{async handler(e){e&&(this.registrationService=new y(this.patient.getID(),this.providerID),this.fields=this.getFields())},immediate:!0,deep:!0}},methods:{async onSubmit(e,i){if(await this.asignNID(e),!await this.registrationService.createEncounter())return o("Unable to create registration encounter");const s=await this.resolveObs({...i});if(!await this.registrationService.saveObservationList(s))return o("Unable to save observations");this.nextTask()},async asignNID(e){const i=e.national_id_available,t=e.national_id;i&&i.value==="Yes"&&await this.patient.updateMWNationalId(t.value)},async mwIdExists(e){return e?(await m.findByOtherID(v,e)).length>0:!1},getFields(){return[{id:"visit_type",helpText:"Type of visit",type:n.TT_SELECT,validation:e=>a.required(e),computedValue:e=>({obs:this.registrationService.buildValueCoded("Type of visit",e.value)}),options:()=>[{label:"New",value:"New patient"},{label:"Referral",value:"Referral"},{label:"Re-visiting",value:"Re-visiting"}]},{id:"referring_facility_name",helpText:"Referred from",type:n.TT_SELECT,validation:e=>a.required(e),computedValue:({label:e})=>({obs:this.registrationService.buildValueText("Referred from",e)}),condition:e=>e.visit_type.value==="Referral",options:(e,i="")=>T(i),config:{showKeyboard:!0,isFilterDataViaApi:!0}},{id:"national_id_available",helpText:"National ID Available",type:n.TT_SELECT,validation:e=>a.required(e),condition:()=>this.patient.getMWNationalID()==="Unknown",options:()=>this.yesNoUnknownOptions(),appearInSummary:()=>!1},{id:"national_id",helpText:"Enter National ID",type:n.TT_TEXT,validation:e=>a.isMWNationalID(e),condition:e=>e.national_id_available.value==="Yes",beforeNext:async e=>e.value&&await this.mwIdExists(e.value.toString())?(o("National ID already exists"),!1):!0,summaryMapValue:({value:e})=>({value:e,label:"National ID"}),config:{casing:"uppercase",customKeyboard:[b,[["Delete"]]]}},{id:"patient_pregnant",helpText:"Patient pregnant",type:n.TT_SELECT,validation:e=>a.required(e),computedValue:({value:e})=>({obs:this.registrationService.buildValueCoded("PATIENT PREGNANT",e)}),condition:()=>this.patient.isChildBearing(),options:()=>this.yesNoUnknownOptions()}]}}});function S(e,i,t,s,r,E){const l=h("his-standard-form");return _(),g(l,{cancelDestinationPath:e.cancelDestination,fields:e.fields,onFinishAction:e.onSubmit},null,8,["cancelDestinationPath","fields","onFinishAction"])}const k=f(N,[["render",S]]);export{k as default};
