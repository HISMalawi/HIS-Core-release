import{d as S,K as A,bg as f,dj as g,F as c,aP as I,V as u,dm as R,bo as b,o as h,c as F,w as P,b as w,cu as T,am as x,b0 as y,dk as m,I as W}from"./index-C-Wf7IuL.js";import{H as B}from"./HisStandardForm-zCup__or.js";import{u as C}from"./useEncounter-Cdg-ySH1.js";import{g as o}from"./util-CyjuS_4X.js";import{r as O}from"./commons-B-xNtGcO.js";import"./isEmpty-CAuO0MZq.js";import"./encounter_guidelines-p4GeYGc_.js";import"./GuidelineEngine-D6V1_Znr.js";const H=S({__name:"Reception",setup(Y){const E=A([]),t=new f(-1,g.TB_RECEPTION),{goToNextTask:v,patientDashboardUrl:_}=C((i,r,a)=>{t.patientID=r,t.providerID=i;const n=()=>{let e={};return{id:"treatForIpt",helpText:"Enroll in TPT program?",type:c.TT_SELECT,requireNext:!1,init:async()=>(e=await I.getProgramInformation(r),!0),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}],validation:p=>u.required(p),condition:()=>!e.tb_positive&&a.getAge()>=0&&a.getAge()<R}},l=()=>({id:"catchmentArea",helpText:"Patient living within catchment area?",type:c.TT_SELECT,requireNext:!1,Validation:e=>u.required(e),computedValue:e=>({concept_id:o("LIVES_NEAR"),value_coded:o("".concat(e.value)),obs_datetime:t.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}]}),s=()=>({id:"livesNearTB",helpText:"Patient living near a TB registration centre?",type:c.TT_SELECT,requireNext:!1,computedValue:e=>({concept_id:o("TRANSFERRED_OUT_EXTERN"),value_coded:o("".concat(e.value)),obs_datetime:t.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}],validation:e=>u.required(e),condition:e=>e.catchmentArea.value==="NO_ANSWER"}),d=()=>({id:"locationId",type:c.TT_SELECT,helpText:"Select TB Registration Centre:",computedValue:e=>({concept_id:o("FACILITY_NAME"),value_text:e.label,obs_datetime:t.date}),options:(e,p="")=>b(p),config:{showKeyboard:!0,isFilterDataViaApi:!0},validation:e=>u.required(e),condition:e=>e.livesNearTB.value==="YES_ANSWER",requireNext:!1});E.value=[n(),l(),s(),d()]});async function N(i,r){var n,l,s;if(((n=i.treatForIpt)==null?void 0:n.value)==="NO_ANSWER")return x.push(_.value);await t.createEncounter(),await t.saveObservationList(await O(r));const a=new y(t.patientID);a.setStateDate(t.date);try{await a.enrollProgram()}catch(d){console.warn("".concat(d))}((l=i.treatForIpt)==null?void 0:l.value)==="YES_ANSWER"&&a.setStateId(m.TPT),((s=i.livesNearTB)==null?void 0:s.value)==="YES_ANSWER"&&a.setStateId(m.TRANSFER_OUT),a.stateId!=-1&&await a.updateState(),v()}return(i,r)=>(h(),F(T(W),null,{default:P(()=>[w(B,{cancelDestinationPath:T(_),onFinishAction:N,fields:E.value,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{H as default};
