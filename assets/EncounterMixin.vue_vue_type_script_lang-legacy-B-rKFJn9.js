System.register(["./index-legacy-pSEoxn3J.js","./encounter_guidelines-legacy-mYSO8ZN5.js","./GuidelineEngine-legacy-KsvQuFdF.js","./HisStandardForm-legacy-CGi-zolz.js"],(function(t,e){"use strict";var s,a,i,n,r,o,c,p,u,h;return{setters:[t=>{s=t.d,a=t.a_,i=t.ax,n=t.aD,r=t.y,o=t.be},t=>{c=t.F,p=t.E},t=>{u=t.m},t=>{h=t.H}],execute:function(){t("_",s({components:{HisStandardForm:h},data:()=>({patient:{},fields:[],patientID:"",providerID:-1,providers:[],facts:{sessionDate:"",apiDate:"",encounterName:"N/A",providers:[],isBdeMode:!1,birthDate:"",outcome:"",outcomeStartDate:""},ready:!1}),watch:{$route:{handler(t){t.params.patient_id&&this.patientID!=t.params.patient_id&&(this.patientID=parseInt(t.params.patient_id),n.get("ACTIVE_PATIENT",{patientID:this.patientID}).then((t=>{this.patient=t,this.setEncounterFacts().then((()=>{this.checkEncounterGuidelines().then((()=>{this.ready=!0}))}))})))},immediate:!0,deep:!0}},computed:{cancelDestination(){return this.patientDashboardUrl()}},methods:{runflowState(t,e=null){const s={};if(s[c.SET_PROVIDER]=t=>{const[e]=t.split(" "),s=a.find(this.providers,{username:e});return s&&(this.providerID=s.person_id),c.CONTINUE},s[c.CHANGE_SESSION_DATE]=()=>(this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`),c.EXIT),s[c.CHANGE_PATIENT_OUTCOME]=()=>(this.$router.push(`/patient/programs/${this.patientID}`),c.EXIT),s[c.GO_TO_PATIENT_DASHBOARD]=()=>(this.gotoPatientDashboard(),c.EXIT),t in s)return s[t](e)},async checkEncounterGuidelines(){const t=u(this.facts,p);for(const e in t){const s=t[e];if(s?.actions?.alert&&this.runflowState(await(s?.actions?.alert(this.facts)))===c.EXIT)return;if(s?.actions?.selection){const t=await(s?.actions?.selection(this.facts));this.runflowState(t.flowState,t.value)}}},async setEncounterFacts(){try{const t=await n.get("PATIENT_PROGRAM",{patientID:this.patientID});this.facts.outcome=t.outcome,this.facts.outcomeStartDate=t.startDate}catch(t){console.error(t),r(`${t}`)}if(this.facts.sessionDate=o.getSessionDate(),this.facts.apiDate=o.getCachedApiDate(),this.facts.isBdeMode=o.isBDE(),this.facts.birthDate=this.patient.getBirthdate(),this.facts.encounterName=this.$route.name?this.$route.name.toString().toUpperCase():"N/A",o.isBDE()){this.providers=await n.get("PROVIDERS");const t=a.find(this.providers,(t=>t.user_id==o.getUserID()));this.providers=this.providers.sort(((t,e)=>{const s=t.username.toUpperCase(),a=e.username.toUpperCase();return s<a?-1:s>a?1:0}));const e=t?[t,...this.providers]:this.providers;this.facts.providers=a.uniq(e.map((t=>{let e=`${t.username}`;if(!a.isEmpty(t?.person?.names)){const[s]=t.person?.names||[];e+=` (${s.given_name} ${s.family_name})`}return e})))}},toOption:(t,e={})=>({label:t,value:t,other:e}),mapStrToOptions:t=>t.map((t=>({label:t,value:t}))),patientDashboardUrl(){return`/patient/dashboard/${this.patientID}`},gotoPatientDashboard(){return this.$router.push({path:this.patientDashboardUrl()})},nextTask(){return i(this.patientID,this.$router)},getOptions(t,e){return t.map((t=>{const s=a.find(e,{label:t});return{label:t,value:s?s.value:"",other:{values:this.yesNoOptions()}}}))},yesNoOptions:()=>[{label:"Yes",value:"Yes"},{label:"No",value:"No"}],toYesNoOption(t,e={}){return{label:t,value:"",other:{...e,values:this.yesNoOptions()}}},mapOptions:t=>t.map((t=>({label:t,value:t}))),yesNoUnknownOptions:()=>[{label:"Yes",value:"Yes"},{label:"No",value:"No"},{label:"Unknown",value:"Unknown"}],resolveObs(t,e=""){const s=Object.values(t).filter((t=>t&&(t.tag===e||""===e))).reduce(((t,e)=>{const s=e.obs?e.obs:e;return Array.isArray(s)?t=t.concat(s):"function"==typeof s?t.push(s()):t.push(s),t}),[]);return Promise.all(s)},inArray(t,e){try{return t.filter((t=>e(t))).length>0}catch(s){return!1}},validateSeries(t){try{for(const e in t){const s=t[e]();if(s)return s}}catch(e){return[e]}}}}))}}}));
