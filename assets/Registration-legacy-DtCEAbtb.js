System.register(["./HisStandardForm-legacy-OekRIZB_.js","./index-legacy-CNrLGT3P.js","./LocationFieldOptions-legacy-DJYLOgCp.js","./useEncounter-legacy-B8HzQoKi.js","./commons-legacy-sfoimUeS.js","./storage-legacy-uuFjVbAf.js","./encounter_guidelines-legacy-BxkBj-oZ.js","./GuidelineEngine-legacy-KsvQuFdF.js"],(function(e,a){"use strict";var i,t,n,l,o,s,r,u,d,c,p,v,T,y,g,f,b,_;return{setters:[e=>{i=e.H},e=>{t=e.bk,n=e.d,l=e.K,o=e.F,s=e.V,r=e.t,u=e.bs,d=e.o,c=e.c,p=e.cD,v=e.T,T=e.P,y=e.c_},e=>{g=e.g},e=>{f=e.u},e=>{b=e.y,_=e.r},null,null,null],execute:function(){class a extends t{constructor(e,a){super(e,104,a)}}e("default",n({__name:"Registration",setup(e){let t,n;const E=l([]),{goToNextTask:m,patientDashboardUrl:h}=f(((e,i,l)=>{n=l,t=new a(i,e),E.value=[{id:"visit_type",helpText:"Type of visit",type:o.TT_SELECT,validation:e=>s.required(e),computedValue:e=>({obs:t.buildValueCoded("Type of visit",e.value)}),options:()=>[{label:"New",value:"New patient"},{label:"Referral",value:"Referral"},{label:"Re-visiting",value:"Re-visiting"}]},{id:"referring_facility_name",helpText:"Referred from",type:o.TT_SELECT,validation:e=>s.required(e),computedValue:({label:e})=>({obs:t.buildValueText("Referred from",e)}),condition:e=>"Referral"===e.visit_type.value,options:(e,a="")=>g(a),config:{showKeyboard:!0,isFilterDataViaApi:!0}},{id:"national_id_available",helpText:"National ID Available",type:o.TT_SELECT,validation:e=>s.required(e),condition:()=>"Unknown"===n.getMWNationalID(),options:()=>b(),appearInSummary:()=>!1},{id:"national_id",helpText:"Enter National ID",type:o.TT_TEXT,validation:e=>s.isMWNationalID(e),condition:e=>"Yes"===e.national_id_available.value,beforeNext:async e=>!e.value||!(await async function(e){return!!e&&(await T.findByOtherID(y,e)).length>0}(e.value.toString()))||(r("National ID already exists"),!1),summaryMapValue:({value:e})=>({value:e,label:"National ID"}),config:{casing:"uppercase",customKeyboard:[u,[["Delete"]]]}},{id:"patient_pregnant",helpText:"Patient pregnant",type:o.TT_SELECT,validation:e=>s.required(e),computedValue:({value:e})=>({obs:t.buildValueCoded("PATIENT PREGNANT",e)}),condition:()=>n.isChildBearing(),options:()=>b()}]}));async function N(e,a){if(await async function(e){const a=e.national_id_available,i=e.national_id;a&&"Yes"===a.value&&(await n.updateMWNationalId(i.value),v.invalidate("ACTIVE_PATIENT"))}(e),!(await t.createEncounter()))return r("Unable to create registration encounter");const i=await _({...a});if(!(await t.saveObservationList(i)))return r("Unable to save observations");m()}return(e,a)=>(d(),c(i,{cancelDestinationPath:p(h),fields:E.value,onFinishAction:N},null,8,["cancelDestinationPath","fields"]))}}))}}}));
