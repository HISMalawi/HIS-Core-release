import{d as P,am as c,bA as f,aw as _,H as n,bn as s,aN as l,W as m,R as d,ai as g,ad as r,ae as o,b_ as S,aV as F,b$ as y,aa as T,c as v,af as D,a as w}from"./index-CpJHxj6i.js";import{H as I}from"./HisStandardForm-BxDywvJp.js";import{p as h}from"./VoidReason-DotUhof_.js";const b=P({components:{HisStandardForm:I},data:()=>({hisFormKey:0,patient:{},patientProgram:{},fields:[],fieldComponent:"",activeField:"",activeProgram:{},programSelectionFieldContext:{}}),watch:{fieldComponent(t){t&&(this.activeField=t)},activeField(t){t==="program_selection"&&(this.hisFormKey+=1)},$route:{async handler({params:t}){if(t&&t.patient_id){const e=await c.findByID(t.patient_id);this.patient=new c(e),this.patientProgram=new f(this.patient.getID()),this.fields=[this.getProgramSelectionField(),this.getProgramEnrollmentField(),...this.getProgramOutcomeDateFields(),this.getProgramStateField(),this.getTransferOutFacilityFields(),...this.getTransferoutReasonFields(),this.getStateOutcomeDateFields()]}},deep:!0,immediate:!0}},methods:{async onFinish(t){switch(this.activeField){case"program_enrollment":await this.onEnrollProgram();break;case"program_state":await this.onProgramState(t);break}_.invalidate("PATIENT_PROGRAM")},async patientPrograms(){return(await this.patientProgram.getPrograms()).map(e=>({label:e.program.name,value:e.program.program_id,other:{...e,programStates:e.patient_states.map(a=>({name:a.name,startDate:n.toStandardHisDisplayFormat(a.start_date),endDate:a.end_date?n.toStandardHisDisplayFormat(a.end_date):"N/A",actions:this.getStateActions(a)}))}}))},async allPrograms(){const t=this.programSelectionFieldContext.listData;return(await s.getAllPrograms()).map(a=>({label:a.name,value:a.program_id,disabled:l.find(t,{value:a.program_id}),other:{...a}}))},async programWorkflows(){const t=await s.getProgramWorkflows(this.patientProgram.getProgramId());if(!l.isEmpty(t))return t[0].states.map(e=>({label:e.name,value:e.program_workflow_state_id,other:{...e}}))},getStateActions(t){const e=[{name:"Void",color:"danger",action:async(a,i)=>{await this.onVoidState(t.patient_state_id,a,i)}}];return t.name==="Patient transferred out"&&e.push({name:"Print",color:"primary",action:async()=>await this.patientProgram.printTransferout(t.start_date)}),e},onUpdateState(){if(this.patientProgram.getProgramId()===-1)return m("Please select a program");this.fieldComponent="program_state"},async onProgramState(t){try{await this.patientProgram.updateState(),this.fieldComponent="program_selection",t.transfer_out_state&&await this.patientProgram.transferOutEncounter(t.transfer_out_state.other,t.reason_for_transferrout.value),d("State has been updated")}catch(e){g("".concat(e))}},async onEnrollProgram(){if(this.patientProgram.getProgramId()===-1)return m("Please select a program");try{this.activeProgram=await this.patientProgram.enrollProgram(),this.fieldComponent="program_state",d("Patient has been enrolled!")}catch(e){this.activeProgram={},g("".concat(e))}},async onVoidState(t,e,a){await h(async i=>{try{this.patientProgram.setStateId(t),await this.patientProgram.voidState(i),this.patientProgram.setStateId(-1),e.other.programStates.splice(a,1),d("State has been voided")}catch(p){g("".concat(p))}})},async onVoidProgram(){if(this.patientProgram.getPatientProgramId()===-1)return m("Please select a program");await h(async e=>{try{await this.patientProgram.voidProgram(e);const a=this.programSelectionFieldContext,i=l.findIndex(a.listData,{value:this.patientProgram.getProgramId()});a.listData.splice(i,1),a.activeProgram={},this.patientProgram.setPatientProgramId(-1),this.patientProgram.setProgramId(-1),d("Program removed")}catch(a){console.error(a),g("".concat(a))}})},getStateOutcomeDateFields(){return{id:"state_outcome_date",helpText:"Select Outcome date",type:r.TT_DATE_PICKER,defaultValue:()=>s.getSessionDate(),validation:t=>o.required(t),condition:t=>t.program_state,computedValue:t=>this.patientProgram.setStateDate(t),config:{minDate:()=>this.patientProgram.getProgramDate(),maxDate:()=>s.getSessionDate(),infoItems:t=>[{label:"Selected Outcome Date",value:n.toStandardHisDisplayFormat(t)}]}}},getTransferOutFacilityFields(){return{id:"transfer_out_state",helpText:"Please Select facility name",type:r.TT_SELECT,validation:t=>o.required(t),condition:t=>t.program_state.label==="Patient transferred out",options:(t,e="")=>S(e),config:{showKeyboard:!0,isFilterDataViaApi:!0}}},getTransferoutReasonFields(){return[{id:"transferout_reasons",proxyID:"reason_for_transferrout",helpText:"Reason for Transferring out",type:r.TT_SELECT,validation:t=>o.required(t),condition:t=>t.program_state.label==="Patient transferred out",options:()=>{const t=e=>({label:e,value:e});return[t("Workplace transfer/lost job-related reasons"),t("Relocation to another place/home village"),t("Transport due to long distance"),t("School"),t("Business"),t("Marriage"),t("Unknown"),t("Clinic not helping"),t("Other")]}},{id:"transferout_other",proxyID:"reason_for_transferrout",helpText:"Other Reason for Transferring out",type:r.TT_TEXT,condition:t=>t.transferout_reasons.value==="Other",validation:t=>o.required(t)}]},getProgramStateField(){return{id:"program_state",helpText:"State",type:r.TT_SELECT,validation:t=>o.required(t),options:()=>this.programWorkflows(),condition:()=>this.activeField==="program_state",unload:t=>this.patientProgram.setStateId(t.value)}},getProgramEnrollmentField(){return{id:"program_enrollment",helpText:"Please select a programme",type:r.TT_SELECT,condition:()=>this.activeField==="program_enrollment",unload:t=>this.patientProgram.setProgramId(t.value),options:()=>this.allPrograms(),validation:t=>o.required(t),config:{showKeyboard:!0}}},getProgramOutcomeDateFields(){return F({id:"program_outcome_date",helpText:"Outcome",required:!0,minDate:()=>n.estimateDateFromAge(100),maxDate:()=>s.getSessionDate(),condition:()=>this.activeField==="program_enrollment",beforeNext:(t,e)=>{if(/hiv/i.test(e.program_enrollment.label)&&n.getAgeInWeeks(this.patient.getBirthdate().toString(),t)<6)return m("Patient must be at least 6 weeks old to enroll in ART"),!1},estimation:{allowUnknown:!0,estimationFieldType:y.MONTH_ESTIMATE_FIELD},computeValue:t=>this.patientProgram.setProgramDate(t)})},getProgramSelectionField(){const t=e=>!l.isEmpty(e.program_selection);return{id:"program_selection",helpText:"Programs",type:r.TT_PROGRAM_SELECTION,onload:e=>{this.activeField="program_selection",this.programSelectionFieldContext=e},onValue:e=>(e&&(this.activeProgram=e.other,this.patientProgram.setProgramId(e.value),this.patientProgram.setPatientProgramId(e.other.patient_program_id),this.patientProgram.setProgramDate(n.toStandardHisFormat(e.other.date_enrolled))),!0),validation:e=>o.required(e),options:()=>this.patientPrograms(),config:{onVoidState:this.onVoidState,hiddenFooterBtns:["Back","Next","Clear"],footerBtns:[{name:"Void Program",slot:"end",color:"danger",state:{visible:{default:(e,a)=>t(a),onValue:(e,a)=>t(a)}},onClick:async()=>{await this.onVoidProgram()}},{name:"Update state",slot:"end",state:{visible:{default:(e,a)=>t(a),onValue:(e,a)=>t(a)}},onClick:async()=>{await this.onUpdateState()}},{name:"Enroll",color:"success",slot:"end",onClick:()=>{this.fieldComponent="program_enrollment"}}]}}}}});function C(t,e,a,i,p,E){const u=D("his-standard-form");return w(),v(u,{key:t.hisFormKey,activeField:t.fieldComponent,skipSummary:!0,fields:t.fields,onOnIndex:e[0]||(e[0]=k=>t.fieldComponent=""),onOnFinish:t.onFinish},null,8,["activeField","fields","onOnFinish"])}const A=T(b,[["render",C]]);export{A as default};
