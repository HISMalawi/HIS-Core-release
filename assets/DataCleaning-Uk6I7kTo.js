import{D as l,C as i}from"./data_cleaning_report_service-uZxJD4ya.js";import{_ as f}from"./ReportMixin.vue_vue_type_script_lang-Da78yexD.js";import{R as g}from"./TableReportTemplate-B9gJG81F.js";import{d as w,a5 as T,ab as R,ac as v,aN as h,aq as t,aL as b,dp as c,as as m,c$ as u,al as p,a8 as x,v as I,w as S,ad as D,u as C,x as E}from"./index-CG6KEPsv.js";import{v as k}from"./TableView-QLAT3IiF.js";import"./BasicReportTemplate-DH-zB7dh.js";import"./Export-ngX2Az_3.js";import"./index-bO2fy8Iw.js";import"./Pagination-BNbmZwZV.js";import"./HisStandardForm-CWpBcokh.js";import"./ReportErrors-CnbOzUh9.js";const A=w({mixins:[f],components:{ReportTemplate:g,IonPage:T},data:()=>({title:"Data cleaning report",rows:[],columns:[]}),created(){this.fields=[{id:"indicator",helpText:"Select indicator",type:R.TT_SELECT,requireNext:!1,validation:a=>v.required(a),options:()=>this.getIndicatorOptions()},...h({id:"start_date",helpText:"Start",required:!0,condition:a=>!a.indicator.other.skipDateSelection,minDate:()=>"2001-01-01",maxDate:()=>p.getSessionDate(),estimation:{allowUnknown:!1},computeValue:a=>a}),...h({id:"end_date",helpText:"End",required:!0,condition:a=>!a.indicator.other.skipDateSelection,minDate:(a,e)=>e.start_date,maxDate:()=>p.getSessionDate(),estimation:{allowUnknown:!1},computeValue:a=>a})]},methods:{async onPeriod(a,e){this.rows=[],this.title=a.indicator.label;const s=a.indicator;this.columns=s.other.columns,await s.other.setRows(a,e)},masterCardBtn(a){return t.tdBtn("View",()=>this.$router.push("/art/mastercard/".concat(a)))},getDefaultIndicatorColumns(a=[]){return[[t.thTxt("ARV Number"),t.thTxt("Patient Id"),t.thTxt("First Name"),t.thTxt("Last Name"),t.thTxt("Gender"),t.thTxt("Date of birth"),...a,t.thTxt("Action")]]},async setDefaultIndicatorRows(a,e,s,n=null){this.report=new l,this.report.setStartDate(e),this.report.setEndDate(s),this.period=this.report.getDateIntervalPeriod();const o=this.sortByArvNumber(await this.report.getCleaningToolReport(a)||[],"arv_number");b.isEmpty(o)||o.forEach(r=>{const d=typeof n=="function"?n(r):[];this.rows.push([t.td(r.arv_number),t.td(r.patient_id),t.td(r.given_name),t.td(r.family_name),t.td(this.formatGender(r.gender)),t.tdDate(r.birthdate),...d,this.masterCardBtn(r.patient_id)])})},getIndicatorOptions(){return[{label:"DOB > Date enrolled",value:i.DobMoreThanEnrolledDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(i.DobMoreThanEnrolledDate,e.start_date,e.end_date)}},{label:"Date enrolled < Earliest start date",value:i.DateEnrolledLessThanEarliestStartDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Earliest start date"),t.thTxt("Date enrolled")]),setRows:(a,e)=>this.setDefaultIndicatorRows(i.DateEnrolledLessThanEarliestStartDate,e.start_date,e.end_date,s=>[t.tdDate(s.earliest_start_date),t.tdDate(s.date_enrolled)])}},{label:"Encounters after Death",value:i.ClientsWithEncountersAfterDeath,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(i.ClientsWithEncountersAfterDeath,e.start_date,e.end_date)}},{label:"Incomplete visits",value:"Incomplete visits",other:{skipDateSelection:!1,columns:[[t.thTxt("ARV#"),t.thTxt("NHID"),t.thTxt("First name"),t.thTxt("Last name"),t.thTxt("Gender"),t.thTxt("Birthdate"),t.thTxt("Date(s)"),t.thTxt("Action")]],setRows:async(a,e)=>{this.report=new l,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod();const s=await this.report.getIncompleteVisits();for(const n in s){const o=s[n];this.rows.push([t.td(o.arv_number),t.td(o.national_id),t.td(o.given_name),t.td(o.family_name),t.td(this.formatGender(o.gender)),t.tdDate(o.birthdate),t.td(o.dates.map(r=>this.toDate(r)).join("<br/>")),this.masterCardBtn(parseInt(n.toString()))])}}}},{label:"Enrolled on ART before birth",value:"Enrolled on ART before birth",other:{skipDateSelection:!0,columns:[[t.thTxt("ARV number"),t.thTxt("Name"),t.thTxt("Earliest start date"),t.thTxt("Date enrolled"),t.thTxt("Gender"),t.thTxt("Birth Date"),t.thTxt("Action")]],setRows:async()=>{try{this.report=new l,(await this.report.getEnrolledOnArtBeforeBirth()).forEach(e=>{this.rows.push([t.td(e.identifier),t.td(e.name),t.tdDate(e.earliest_start_date),t.tdDate(e.date_enrolled),t.td(this.formatGender(e.gender)),t.tdDate(e.birthdate),this.masterCardBtn(e.patient_id)])})}catch(a){if(!(a instanceof c))throw a}}}},{label:"Missing VL Results",value:"Missing VL Results",other:{columns:[[t.thTxt("ARV number"),t.thTxt("First name"),t.thTxt("Last name"),t.thTxt("Gender"),t.thTxt("Accession number"),t.thTxt("Order date"),t.thTxt("Action")]],setRows:async(a,e)=>{try{this.report=new l,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod(),(await this.report.getCleaningToolReport(i.MissingVlResults)).forEach(n=>{this.rows.push([t.td(n.arv_number),t.td(n.given_name),t.td(n.family_name),t.td(this.formatGender(n.gender)),t.td(n.accession_number),t.tdDate(n.order_date),this.masterCardBtn(n.patient_id)])})}catch(s){if(!(s instanceof c))throw s}}}},{label:"Male patients with female observations",value:i.MalesWithFemaleObs,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Visit date")]),setRows:(a,e)=>this.setDefaultIndicatorRows(i.MalesWithFemaleObs,e.start_date,e.end_date,s=>[(()=>{const n="".concat(s.visit_date).split(",");return n.length<=1?t.tdDate(s.visit_date):t.tdLink("".concat(n.length," visits dates"),async()=>{(await m.create({component:k,backdropDismiss:!1,cssClass:"large-modal",componentProps:{title:"".concat(n.length," visit dates"),columns:[[{label:"ARV",ref:"arv_number"},{label:"Given name",ref:"given_name"},{label:"Family name",ref:"family_name"},{label:"Visit date",ref:"visit_date"}]],columnData:n.map(o=>({...s,visit_date:u(o)})),onFinish:()=>m.dismiss()}})).present()})})()])}},{label:"Missing important demographics elements",value:i.MissingDemographics,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(i.MissingDemographics,e.start_date,e.end_date)}},{label:"Missing start reason",value:i.MissingStartReasons,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(i.MissingStartReasons,e.start_date,e.end_date)}},{label:"Missing ART start date",value:i.MissingArtStartDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(i.MissingArtStartDate,e.start_date,e.end_date)}},{label:"Multiple start reasons",value:i.MultipleStartReasons,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Reasons"),t.thTxt("Visits")]),setRows:(a,e)=>this.setDefaultIndicatorRows(i.MultipleStartReasons,e.start_date,e.end_date,s=>[t.td("".concat(s.reasons).split(",").join("<p/>")),t.td(s.visits.split(",").map(n=>u(n)).join("<p/>"))])}},{label:"Patients with Pre-ART / Unknown outcome",value:i.PreArtOrUnknownOutcomes,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(i.PreArtOrUnknownOutcomes,e.start_date,e.end_date)}},{label:"Prescriptions without dispensations",value:i.PrescriptionWithoutDispensation,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Visit Date")]),setRows:(a,e)=>this.setDefaultIndicatorRows(i.PrescriptionWithoutDispensation,e.start_date,e.end_date,s=>[t.tdDate(s.visit_date)])}},{label:"Different pregnancy value on same date",value:i.DifferentPregnancyValueOnSameDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Visit Date")]),setRows:(a,e)=>this.setDefaultIndicatorRows(i.DifferentPregnancyValueOnSameDate,e.start_date,e.end_date,s=>[t.tdDate(s.visit_date)])}}]}}});function y(a,e,s,n,o,r){const d=D("report-template"),_=D("ion-page");return C(),I(_,null,{default:S(()=>[E(d,{title:a.title,period:a.period,rows:a.rows,fields:a.fields,columns:a.columns,showFilters:!0,onReportConfiguration:a.onPeriod},null,8,["title","period","rows","fields","columns","onReportConfiguration"])]),_:1})}const q=x(A,[["render",y]]);export{q as default};
