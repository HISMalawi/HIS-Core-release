import{d as m,r as o,dZ as g,at as v,o as b,a as D,c as _,w as h,b as u,u as c,cL as w,I as C,W as R,ai as P,D as x,cl as O,ck as d}from"./index-CpJHxj6i.js";import{v as S}from"./TableView-Bdbus33v.js";import"./Export-BAZju45s.js";import"./index-DJAIPCuH.js";const y=m({__name:"ClinicOutcomes",setup(k){const t=o([]),n=o(""),r=o(!1),a=new g,f=v(()=>[[{label:"Age Group",ref:"age_group"},{label:"Gender",ref:"gender"},{label:"Alive",ref:"alive"},{label:"Died",ref:"gender",value:e=>O(e.gender)},{label:"Referred Within",ref:"birthdate",value:e=>d(e.birthdate)},{label:"Transferred Out",ref:"order_date",value:e=>d(e.order_date)}]]),s=async()=>{if(!(a.startDate&&a.endDate))return R("Start date and end date required!");r.value=!0,t.value=[];try{t.value=await a.getOutcomesReport()}catch(e){P("Unable to generate report!")}r.value=!1},l=()=>x({onFinish:(e,i,p)=>{n.value="Period (".concat(p,")"),a.startDate=e,a.endDate=i,s()}});return b(()=>l()),(e,i)=>(D(),_(c(C),null,{default:h(()=>[u(c(w),{"is-open":r.value,message:"Please wait..."},null,8,["is-open"]),u(S,{title:"Clinic Outcomes Report",subtitle:n.value,columns:f.value,columnData:t.value,rowsPerPage:15,onConfigure:l,onRefresh:()=>s(),"report-prefix":"Clinic"},null,8,["subtitle","columns","columnData","onRefresh"])]),_:1}))}});export{y as default};
