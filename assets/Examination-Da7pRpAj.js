import{d,r as p,bL as u,bQ as m,ad as f,ae as _,dW as n,a as v,c as E,w as T,b,u as s,I as h}from"./index-DOO_dFo7.js";import{H as D}from"./HisStandardForm-Dxm9AvFo.js";import{u as I}from"./useEncounter-CTDcaFHK.js";import{r as C}from"./commons-BYdU_7rI.js";import"./isEmpty-B9gTfDRz.js";import"./encounter_guidelines-DtVJ39TV.js";import"./GuidelineEngine-D6V1_Znr.js";const P=d({__name:"Examination",setup(L){const i=p([]),e=new u(-1,m.EXAMINATION),{goToNextTask:r,patientDashboardUrl:c}=I((t,a)=>{e.patientID=a,e.providerID=t,i.value=[{id:"diagnosisType",helpText:"Method of Diagnosis:",type:f.TT_SELECT,validation:o=>_.required(o),computedValue:o=>({concept_id:n("PROCEDURE_TYPE"),value_coded:n("".concat(o.value)),obs_datetime:e.date}),options:()=>[{value:"LAB_ORDER",label:"Lab Order"},{value:"CLINICAL",label:"Clinical"}]}]});async function l(t,a){await e.createEncounter(),await e.saveObservationList(await C(a)),r()}return(t,a)=>(v(),E(s(h),null,{default:T(()=>[b(D,{cancelDestinationPath:s(c),onFinishAction:l,fields:i.value,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{P as default};
