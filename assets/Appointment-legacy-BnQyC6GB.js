System.register(["./index-legacy-2OuOZQ1w.js","./HisStandardForm-legacy-Cd-xGvNm.js","./EncounterMixin.vue_vue_type_script_lang-legacy-0B8kyv9-.js","./appointment_service-legacy-CAQgSgVn.js","./anc_global_props-legacy-B669vtWT.js","./encounter_guidelines-legacy-w17rLgkK.js","./GuidelineEngine-legacy-KsvQuFdF.js"],(function(t,e){"use strict";var a,n,i,o,s,l,d,r,p,c,u,m,y,h,w,g;return{setters:[t=>{a=t.d,n=t.an,i=t.ao,o=t.H,s=t.a_,l=t.aw,d=t.B,r=t.bN,p=t.am,c=t.ar,u=t.a,m=t.b},t=>{y=t.H},t=>{h=t._},t=>{w=t.A},t=>{g=t.A},null,null],execute:function(){const e=a({mixins:[h],components:{HisStandardForm:y},data:()=>({appointment:{}}),watch:{ready:{handler(t){t&&(this.appointment=new w(this.patientID,this.providerID),this.fields=[this.getAppointmentField()])},immediate:!0}},methods:{async onFinish(t,e){await this.appointment.createEncounter(),await this.appointment.saveObservationList(await this.resolveObs(e)),this.nextTask()},getAppointmentField(){const t=t=>o.toStandardHisDisplayFormat(t),e=(t,e)=>new RegExp(t,"i").test(`${e}`);let a="",p="",c=-1,u=this.appointment.date,m=null;const y={},h=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];return{id:"set_appointment",helpText:"Appointments booking",type:i.TT_DATE_PICKER,init:async()=>{try{const t=await this.appointment.getNextAppointment();u=t.appointment_date,m=t.drugs_run_out_date}catch(e){if(console.warn(e),await r(400),!(await l("Next appointment/drug-runout date is not available, do you want to proceed anyway?")))return this.gotoPatientDashboard(),!0}const t=await g.appointmentLimit();return c=t?parseInt(t):0,!0},onValue:async n=>{if(void 0===y[n]){const t=await w.getDailiyAppointments(n);y[n]=Array.isArray(t)?t.length:0}return!(c>=1&&y[n]>=c&&await l(`${y[n]} clients were booked on ${t(n)}`,{header:`APPOINTMENT LIMIT (${c}) REACHED`,cancelBtnLabel:"Proceed",confirmBtnLabel:"New date"})||(s.isEmpty(p)&&(p=await g.clinicHolidays()),e(n,p)&&!(await l(`${t(n)} is a clinic holiday, do you want to set an appointment?`))||(s.isEmpty(a)&&(a=await g.clinicDays()),!e(h[d(n).day()],a)&&!(await l(`${t(n)} is not a clinic day. Do you want to proceed with this date?`)))))},validation:t=>n.required(t),defaultValue:()=>u,computedValue:t=>[this.appointment.buildValueDate("Appointment date",t),this.appointment.buildValueDate("Estimated date",u)],config:{hiddenFooterBtns:["Clear"],minDate:()=>this.appointment.date,maxDate:()=>m,supValue:t=>`${y[t]}`,infoItems:e=>[{label:"Medication Run out Date",value:m?t(m):"Not available"},{label:"User set appointment date",value:t(e)},{label:"Appointments",value:y[e]},{label:"Appointment limit (per/day)",value:c}]}}}}});t("default",p(e,[["render",function(t,e,a,n,i,o){const s=c("his-standard-form");return m(),u(s,{fields:t.fields,onFinishAction:t.onFinish,skipSummary:!0,cancelDestinationPath:t.cancelDestination},null,8,["fields","onFinishAction","cancelDestinationPath"])}]]))}}}));
