import{d as v,aJ as A,bC as S,H as _,L as n,O as p,bD as h,V as D,R as C,S as x,ab as P,P as w}from"./index-BFG-WECc.js";import{g as f}from"./MultiFieldDateHelper-CAg9Dfet.js";import{D as g}from"./BasicReportTemplate-SATK8Q6M.js";import{F as y}from"./dynamic-import-helper-Bsjrd6Ro.js";const q=v({data:()=>({app:A.getActiveApp(),fields:[],report:{},reportReady:!1,period:"",startDate:"",endDate:"",customFileName:"",isMilitarySite:!1,drillDownCache:{}}),methods:{formatGender(t){return S(t)},toDate(t){return _.toStandardHisDisplayFormat(t)},sortByArvNumber(t,r="arv_number"){try{return t.sort((a,i)=>this.getArvInt(a[r])>this.getArvInt(i[r])?1:-1)}catch(a){return console.error(a),t}},getArvInt(t){if(typeof t=="string"){const r=t.split("-")[2],a=parseInt(r);return typeof a=="number"?a:0}return 0},tdARV(t,r={}){return n.td(t,{sortValue:this.getArvInt(t),...r})},confirmPatient(t){return this.$router.push("/patients/confirm?person_id=".concat(t))},async drilldownAsyncRows(t,r,a,i=!0){(await p.create({component:g,cssClass:"large-modal",componentProps:{title:t,columns:r,asyncRows:a,canExport:i,showFilters:!0,rowsPerPage:50,paginated:!0,showReportStamp:!1,footerColor:"light",onFinish:()=>p.dismiss()}})).present()},async drilldownData(t,r,a,i){(await p.create({component:g,cssClass:"large-modal",componentProps:{title:t,columns:r,rows:a,rowParser:i,rowsPerPage:50,showFilters:!0,paginated:!0,showReportStamp:!1,footerColor:"light",onFinish:()=>p.dismiss()}})).present()},getDefaultDrillDownTable(){const t=[[n.thTxt("ARV number"),n.thTxt("Gender"),n.thTxt("Birth Date"),n.thTxt("Actions")]];return{rowParser:async a=>{let i=0;const u=a.map(async o=>{let s=null,d=null;if(P.isArray(o)){const[b,m]=o;if(d=b,m in this.drillDownCache)return[d,...this.drillDownCache[m].slice(1)]}else if(s=o,s in this.drillDownCache)return this.drillDownCache[s];const T=await w.findByID(s),c=new w(T),l=[];return d&&(i=1,l.push(d)),l.push(this.tdARV(c.getArvNumber())),l.push(n.td(this.formatGender(c.getGender()))),l.push(n.tdDate(c.getBirthdate().toString())),l.push(n.tdBtn("Show",async()=>{await p.dismiss({}),this.$router.push({path:"/patient/dashboard/".concat(s)})})),this.drillDownCache[s]=l,l});return(await Promise.all(u)).sort((o,s)=>o[i].sortValue>s[i].sortValue?1:-1)},columns:t}},runTableDrill(t,r="Drilldown patients"){const{columns:a,rowParser:i}=this.getDefaultDrillDownTable();this.drilldownData(r,a,t,i)},drill(t,r="Drill table"){return t&&t.length>0?n.tdLink(t.length,()=>this.runTableDrill(t,r)):n.td(0)},getQuaterOptions(){return h.getReportQuarters().map(r=>({label:r.name,value:r.start,other:r}))},getDateDurationFields(t=!1,r=!1,a=5,i=x.getSessionDate()){const u="2000-01-01";return[{id:"quarter",helpText:"Select Quarter",type:y.TT_SELECT,condition:()=>t,validation:e=>D.required(e),options:()=>{let o=h.getReportQuarters(a).map(s=>({label:s.name,value:s.start,other:s}));return r&&(o=[{label:"Set custom period",value:"custom_period",other:{}},...o]),o}},...f({id:"start_date",helpText:"Start",required:!0,condition:e=>e.quarter&&e.quarter.value==="custom_period"||!t,minDate:()=>u,maxDate:()=>i,estimation:{allowUnknown:!1},computeValue:e=>e}),...f({id:"end_date",helpText:"End",required:!0,condition:e=>e.quarter&&e.quarter.value==="custom_period"||!t,unload:(e,o,s,d)=>{o==="next"&&(this.endDate=d.end_date)},minDate:(e,o)=>o.start_date,maxDate:()=>i,estimation:{allowUnknown:!1},computeValue:e=>e}),{id:"occupation",helpText:"Report Group",type:y.TT_SELECT,init:async()=>(this.isMilitarySite=await C.get("IS_MILITARY_SITE"),!0),computedValue:e=>e.value,condition:()=>{var e;return((e=this.app)==null?void 0:e.applicationName)==="ART"&&this.isMilitarySite},validation:e=>D.required(e),options:()=>[{label:"All",value:"All"},{label:"Military",value:"Military"},{label:"Civilian",value:"Civilian"}]}]}}});export{q as _};
