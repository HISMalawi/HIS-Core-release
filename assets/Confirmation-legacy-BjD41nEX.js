System.register(["./index-legacy-CA6M7ipO.js","./GuidelineEngine-legacy-KsvQuFdF.js","./VoidReason-legacy-BRRDDujz.js"],(function(t,e){"use strict";var a,i,n,s,o,r,c,l,d,p,h,u,m,g,f,N,D,y,I,E,w,A,P,_,T,b,v,C,R,O,F,S,L,H,M,B,V,U,$,x,G,k,W,X,Y,j,z,K,q,J,Q,Z,tt,et,at,it,nt;return{setters:[t=>{a=t.aW,i=t.bO,n=t.bP,s=t.bQ,o=t.bn,r=t.bC,c=t.d,l=t._,d=t.X,p=t.a9,h=t.I,u=t.Y,m=t.bR,g=t.a3,f=t.a4,N=t.a8,D=t.bb,y=t.bo,I=t.an,E=t.aN,w=t.H,A=t.U,P=t.bz,_=t.al,T=t.am,b=t.bS,v=t.bT,C=t.aw,R=t.bU,O=t.bA,F=t.bI,S=t.by,L=t.au,H=t.W,M=t.aj,B=t.bF,V=t.bV,U=t.R,$=t.B,x=t.bG,G=t.ak,k=t.bB,W=t.aa,X=t.c,Y=t.w,j=t.af,z=t.a,K=t.b,q=t.K,J=t.C,Q=t.a2,Z=t.E,tt=t.G,et=t.J,at=t.M},t=>{it=t.m},t=>{nt=t.p}],execute:function(){var st=document.createElement("style");st.textContent=".tool-bar-medium-card[data-v-a2faf79c]{padding:.3em}ion-col p[data-v-a2faf79c]{margin:0}\n/*$vite$:1*/",document.head.appendChild(st);var ot=(t=>(t.ON_CONTINUE="oncontinue",t.ONLOAD="onload",t))(ot||{}),rt=(t=>(t.FORCE_EXIT="forceExit",t.GO_HOME="gotoHome",t.GO_BACK="goBack",t.CONTINUE="continue",t.ENROLL="enroll",t.EXIT="exit",t.ACTIVATE_FN="activateFn",t.ASSIGN_NPID="assignNpid",t.UPDATE_DMG="updateDemographics",t.PRINT_NPID="printNPID",t.CREATE_NPID_WITH_REMOTE_DIFF="createNpiDWithRemote",t.REFRESH_DDE_DEMOGRAPHICS="refreshDemographicsDDE",t.UPDATE_LOCAL_DDE_DIFFS="updateLocalDiffs",t.RESOLVE_DUPLICATE_NPIDS="resolveDuplicateNpids",t.ADD_AS_DRUG_REFILL="addAsDrugRefill",t.ADD_AS_NEW_PATIENT="addAsNewPatient",t.ADD_AS_EXTERNAL_CONSULTATION="addAsExternalConsultation",t.INITIATE_ANC_PREGNANCY="initiateNewAncPregnancy",t.VIEW_MERGE_AUDIT_FOR_NPID="viewMergeAuditForNpid",t.SEARCH_BY_NAME="searchByName",t.SYNCH_ART_STATUS_WITH_TB="syncArtStatusWithTb",t.ALERT_TO_BRING_NATIONAL_ID_NEXT="bringNationalID",t.SCAN_NATIONAL_ID="scanNationalID",t))(rt||{});const ct={"[DDE NOT ENABLED] Do not proceed if patient is not found in the system":{weight:98,targetEvent:"onload",actions:{alert:async()=>"Search by name"===await a(" 0 Search results","Patient has not been found","Choose how to proceed",[{name:"Close",slot:"start",color:"primary"},{name:"Search by name",slot:"end",color:"success"}],"his-danger-color")?"searchByName":"gotoHome"},conditions:{globalProperties:({ddeEnabled:t})=>!1===t,patientFound:t=>!1===t}},"[DDE ENABLED] Show invalid attributes for a patient whose remote":{weight:78,targetEvent:"onload",actions:{alert:async t=>(await i("DDE Entity Error","Remote patient has invalid attributes",["Attribute","Errors"],t.demographics.invalidDemographics,[{name:"Close",slot:"start",color:"danger"}],"his-danger-color"),"goBack")},conditions:{demographics:({hasInvalidDemographics:t})=>!0===t}},"[DDE ENABLED] Do not proceed if NPID is not found and Provide history of voided NPIDS":{weight:98,targetEvent:"onload",actions:{alert:async t=>{const e=await i(`Voided patients with ID ${t.scannedNpid}`,"NPID was not found. Please review available patient with similar ID",t.dde.voidedNpids.cols,t.dde.voidedNpids.rows,[{name:"Close",slot:"start",color:"primary"},{name:"Merge history",slot:"end",color:"primary"},{name:"Search by name",slot:"end",color:"success"}],"his-danger-color");return"Merge history"===e?"viewMergeAuditForNpid":"Search by name"===e?"searchByName":"gotoHome"}},conditions:{globalProperties:({ddeEnabled:t})=>!0===t,patientFound:t=>!1===t}},"[DDE NOT ENABLED] Notify the user to proceed with Remote NPID if local NPID does not match remote":{weight:77,targetEvent:"onload",actions:{alert:async({dde:t})=>(await a("Missing Local NPID",`Local NPID of "${t.localNpidDiff}" does not match remote "${t.remoteNpidDiff}"`,"Proceed to Fix issue",[{name:"Resolve issue",slot:"start",color:"danger"}],"his-danger-color"),"createNpiDWithRemote")},conditions:{dde:({localNpidDiff:t,remoteNpidDiff:e})=>t!=e,globalProperties:({ddeEnabled:t})=>!0===t}},"Warn if patient is missing National ID and assign them one":{weight:75,targetEvent:"onload",actions:{alert:async()=>(await a("Missing National ID","Patient was found BUT has no National ID","The system is going to assign the patient with a new ID",[{name:"OK",slot:"start",color:"primary"}],"his-danger-color"),"assignNpid")},conditions:{currentNpid:t=>n(t)}},"Detect NPID over 5 duplicates and prompt the user to resolve them":{weight:99,targetEvent:"onload",actions:{alert:async({scannedNpid:t})=>"Search by name"===await a("More than 5 duplicates found",`There are more than 5 duplicates for this NPID (${t}). Please search by name and gender`,"Choose how to proceed",[{name:"Close",slot:"start",color:"danger"},{name:"Search by name",slot:"start",color:"primary"}],"his-danger-color")?"searchByName":"gotoHome"},conditions:{npidHasOverFiveDuplicates:t=>t}},"Detect NPID duplicates and prompt the user to resolve them":{weight:99,targetEvent:"onload",actions:{alert:async({scannedNpid:t})=>(await a("DUPLICATE NPID",`NPID ${t} is currently assigned to multiple patients`,"Proceed to resolve the issue",[{name:"Resolve Duplicate NPIDs",slot:"start",color:"danger"}],"his-danger-color"),"resolveDuplicateNpids")},conditions:{npidHasDuplicates:t=>t}},"Enquire if patient has brought a national ID":{weight:95,targetEvent:"onload",actions:{alert:async()=>"Yes"==await a("Malawi National ID","Has Client brought a National ID Card or Birth Certificate?","",[{name:"Yes",slot:"start",color:"primary"},{name:"No",slot:"end",color:"primary"}])?"scanNationalID":"bringNationalID"},conditions:{isMalawiNationalIDFeaturesEnabled:t=>t,hasMalawiNationalID:t=>!t}},"Warn before proceeding if patient is deceased based on current Patient state":{weight:50,targetEvent:"oncontinue",actions:{alert:async()=>"Yes"===await a("Deceased Patient","Patient outcome is Died!","Do you want to continue?",[{name:"Yes",slot:"start",color:"danger"},{name:"No",slot:"end",color:"success"}],"his-warning-color")?"continue":"forceExit"},conditions:{currentOutcome:t=>"Patient died"===t}},"Warn before proceeding if patient stopped treatment based on current Patient state":{weight:49,targetEvent:"oncontinue",actions:{alert:async()=>"Yes"===await a("Stopped Treatment","Patient outcome is Stopped Treatment ","Do you want to continue?",[{name:"Yes",slot:"start",color:"danger"},{name:"No",slot:"end",color:"success"}],"his-warning-color")?"continue":"forceExit"},conditions:{currentOutcome:t=>"Treatment stopped"===t}},"[ART patient visit purpose] Select purpose of visit if patient is Transferred out or Emergency supply":{weight:70,targetEvent:"oncontinue",actions:{alert:async({patientType:t,currentOutcome:e})=>{let i=[];switch("External consultation"!==t&&"Patient transferred out"!==e||(i=[{name:"Emergency supply",slot:"start",color:"primary"},{name:"New Patient",slot:"end",color:"primary"}]),"Emergency supply"===t&&(i=[{name:"External Consultation",slot:"start",color:"primary"},{name:"New Patient",slot:"end",color:"primary"}]),"New patient"===t&&(i=[{name:"External Consultation",slot:"start",color:"primary"},{name:"Emergency supply",slot:"start",color:"primary"}]),await a("Purpose of visit",`Patient type: ${t} | State: ${e}`,"Please select purpose of the visit",[...i,{name:"Continue",slot:"end",color:"success"}])){case"Emergency supply":return"addAsDrugRefill";case"External Consultation":return"addAsExternalConsultation";case"New Patient":return"addAsNewPatient";default:return"continue"}}},conditions:{programName:t=>"ART"===t,patientType:(t,{currentOutcome:e})=>["Emergency supply","External consultation"].includes(t)||"Patient transferred out"===e}},"Prompt patient enrollment in current programme if not enrolled":{weight:30,targetEvent:"onload",actions:{alert:async()=>"Yes"===await a("Programme Enrollment","Patient is not enrolled in current programme, do you want to enroll?","",[{name:"Yes",slot:"start",color:"success"},{name:"No",slot:"end",color:"danger"}])?"enroll":"exit"},conditions:{enrolledInProgram:t=>!1===t}},"(ART Filing numbers) Prompt dormant filing number reactivation if patient has a dormant filing number":{weight:25,targetEvent:"onload",actions:{alert:async()=>"Yes"===await a("Filing Numbers","Activate dormant #?","",[{name:"Yes",slot:"start",color:"success"},{name:"No",slot:"end",color:"danger"}])?"activateFn":"exit"},conditions:{programName:t=>"ART"===t,identifiers:t=>t.includes("Archived filing number"),currentOutcome:t=>!["Treatment stopped","Patient transferred out","Patient died"].includes(t),globalProperties:({useFilingNumbers:t})=>t}},"[DDE OFF] Prompt the user to update patient demographics when data is incomplete":{weight:92,targetEvent:"onload",actions:{alert:async()=>"Yes"===await a("Demographics","Patient data is incomplete","Do you want to review and update now?",[{name:"Yes",slot:"start",color:"success"},{name:"No",slot:"end",color:"danger"}],"his-danger-color")?"updateDemographics":"exit"},conditions:{globalProperties:({ddeEnabled:t})=>!1===t,demographics:({patientIsComplete:t})=>!1===t,patientFound:t=>!0===t}},"[DDE] Alert When remote Patient demographics dont match Local Demographics ":{weight:93,targetEvent:"onload",actions:{alert:async({dde:t})=>"Use Local"===await i("Demographics Mismatch","Local Demographics do not match Remote Demographics",["Attributes","Local","Remote"],t.diffRows,[{name:"Use Local",slot:"start",color:"primary"},{name:"Use Remote",slot:"start",color:"primary"}],"his-danger-color",t.diffRowColors)?"updateLocalDiffs":"refreshDemographicsDDE"},conditions:{dde:({hasDemographicConflict:t})=>t}},"[DDE] Alert to print newer NPID when the scanned NPID doesnt match active NPID":{weight:69,targetEvent:"onload",actions:{alert:async({currentNpid:t})=>(await a("[DDE] NATIONAL ID",`Patient has a newer National Identifier ${t}`,"Print and proceed",[{name:"Print",slot:"start",color:"primary"}]),"printNPID")},conditions:{globalProperties:({ddeEnabled:t})=>!0===t,scannedNpid:(t,{currentNpid:e})=>!t.match(new RegExp(e,"i"))}},"assign newer NPID when the current one is invalid":{weight:68,targetEvent:"onload",actions:{alert:async({currentNpid:t})=>(await a("NATIONAL ID",`Current NPID ${t} is invalid`,"Reasign and Print",[{name:"Reassign",slot:"start",color:"primary"}]),"assignNpid")},conditions:{demographics:({patientIsComplete:t})=>!0===t,patientFound:t=>!0===t,hasInvalidNpid:t=>t}},"[DDE ON] Warn program managers when Patient has incomplete demographics. Dont force them to update though":{weight:91,targetEvent:"onload",actions:{alert:async()=>"Yes"===await a("Demographics","Patient data is incomplete data","Do you want to review and update now?",[{name:"Yes",slot:"start",color:"success"},{name:"No",slot:"end",color:"danger"}],"his-danger-color")?"updateDemographics":"continue"},conditions:{globalProperties:({ddeEnabled:t})=>!0===t,demographics:({patientIsComplete:t})=>!1===t,patientFound:t=>!0===t,userRoles:t=>!0===t.includes("Program Manager")}},"[DDE ON] Force Users to update Incomplete Patient demographics":{weight:92,targetEvent:"onload",actions:{alert:async()=>"Cancel"===await a("Patient Demographics","Demographic data is incomplete","Continue to update",[{name:"Update",slot:"start",color:"success"},{name:"Cancel",slot:"start",color:"danger"}],"his-warning-color")?"gotoHome":"updateDemographics"},conditions:{globalProperties:({ddeEnabled:t})=>!0===t,demographics:({patientIsComplete:t})=>!1===t,userRoles:t=>!1===t.includes("Program Manager")}},"Warn the user when patient has high viral load":{weight:45,targetEvent:"onload",actions:{alert:async()=>(await a("High Viral Load","Patient has a high viral load, please take immediate action!","",[{name:"OK",slot:"end",color:"danger"}],"his-danger-color"),"continue")},conditions:{hasHighViralLoad:t=>!0===t}},"[ANC] Warn last LMP is more than 8 months ago and ask to initiate new pregnancy":{weight:32,targetEvent:"oncontinue",actions:{alert:async({anc:t})=>"Yes"===await a("Pregancy overdue",`Last menstrual period was ${t.lmpMonths} months ago!`,"Would you like to initiate new pregnancy?",[{name:"Yes",slot:"end",color:"success"},{name:"No",slot:"end",color:"danger"}],"his-danger-color")?"initiateNewAncPregnancy":"continue"},conditions:{programName:t=>"ANC"===t,anc:t=>!0===t.currentPregnancyIsOverdue}},"[ANC] Exit if client is NOT ELIGIBLE for ANC":{weight:89,targetEvent:"onload",actions:{alert:async()=>"EXIT"===await a("Client not eligible for ANC","This program is for women eligible for ANC only","If this is a mistake, please update client Demographics or Exit",[{name:"EXIT",slot:"end",color:"success"},{name:"EDIT DEMOGRAPHICS",slot:"end",color:"danger"}],"his-danger-color")?"gotoHome":"updateDemographics"},conditions:{demographics:({gender:t})=>{const e=t.toLowerCase();return"m"===e||"male"===e},programName:t=>"ANC"===t}},"Alert the provider that the client is on ART and record needs to be synched with TB":{weight:89,targetEvent:"oncontinue",actions:{alert:async()=>"No"===await a("TB PROGRAM ALERT","Client was enrolled in the ART program","Do you want to synchronize ART status into TB program?",[{name:"No",slot:"end",color:"primary"},{name:"Yes",slot:"end",color:"success"}],"his-danger-color")?"continue":"syncArtStatusWithTb"},conditions:{programName:t=>"TB"===t,tb:({noHivPositiveRecordInTB:t,clientEnrolledInArtProgram:e})=>e&&t}}};class lt extends s{constructor(t,e){super(t,111,e)}async getLmpInMonths(){const t=await o.getProgramInformation(this.patientID);if(t.date_of_lnmp){const e=r(t.date_of_lnmp);return r(this.date).diff(e,"months")}return-1}async pregnancyIsOverdue(){return await this.getLmpInMonths()>9}async canInitiateNewPregnancy(){return await this.getLmpInMonths()>=7}async createNewPregnancyStatus(){return await this.createEncounter(),this.saveValueCodedObs("Pregnancy status","New")}}const dt=c({name:"Patient Confirmation",components:{IonContent:l,IonHeader:d,IonFooter:p,IonPage:h,IonToolbar:u,IonSpinner:m,IonRow:g,IonCol:f,IonButton:N,ConfirmationCard:D((()=>k((()=>e.import("./PatientConfirmationCards-legacy-B5zIm_y7.js")),void 0)))},data:()=>({app:{},program:{},patient:{},localPatient:{},ddeInstance:{},useDDE:!1,programInfo:{},isReady:!1,cards:[],facts:{isMalawiNationalIDFeaturesEnabled:!1,hasMalawiNationalID:!1,hasHighViralLoad:!1,patientFound:!1,npidHasDuplicates:!1,npidHasOverFiveDuplicates:!1,userRoles:[],scannedNpid:"",currentNpid:"",hasInvalidNpid:!1,enrolledInProgram:!1,programName:"N/A",currentOutcome:"",programs:[],identifiers:[],patientType:"N/A",patientTypeLastUpdated:"",tb:{noHivPositiveRecordInTB:!1,clientEnrolledInArtProgram:!1,_artData:{}},anc:{lmpMonths:-1,canInitiateNewPregnancy:!1,currentPregnancyIsOverdue:!1},dde:{localNpidDiff:"",remoteNpidDiff:"",voidedNpids:{cols:[],rows:[]},hasDemographicConflict:!1,localDiffs:{},diffRows:[],diffRowColors:[]},demographics:{patientIsComplete:!1,hasInvalidDemographics:!1,invalidDemographics:[],givenName:"",familyName:"",patientName:"",landmark:"",phoneNumber:"",currentDistrict:"",currentTA:"",currentVillage:"",ancestryDistrict:"",ancestryTA:"",ancestryVillage:"",gender:"",birthdate:""},globalProperties:{useFilingNumbers:!1,ddeEnabled:!1}}}),created(){this.initCards(),this.app=y.getActiveApp()||{}},mounted(){this.app&&(this.updateCards(),this.ddeInstance=new I,this.setGlobalPropertyFacts().then((()=>{const t=this.$route.query;E.isEmpty(t)||!t.person_id&&!t.patient_barcode||this.findAndSetPatient(t.person_id,t.patient_barcode)})))},computed:{demographics(){return this.facts.demographics},birthdate(){return w.toStandardHisDisplayFormat(this.facts.demographics.birthdate)},canVoidClient(){return this.facts.patientFound&&A.isDataManager()}},methods:{initCards(){for(let t=0;t<6;t++)this.cards[t]={label:"-",isLoading:!0,values:[]}},async updateCards(){if("function"==typeof this.app.confirmationSummary){const t=this.app.confirmationSummary(this.patient,this.program,this.facts),e=Object.keys(t);for(let a=0;a<this.cards.length;a++){const i=e[a]?t[e[a]]():[];if(this.cards[a]={label:e[a]||"-",isLoading:!1,values:i},"object"==typeof i&&i.then)this.cards[a].isLoading=!0,E.isEmpty(this.patient)||i.then((t=>{this.cards[a].isLoading=!1,this.cards[a].values=t})).catch((t=>{this.cards[a].isLoading=!1,console.error(`${t}`)}));else for(let t=0;t<i.length;++t){const e=i[t];this.cards[a].values[t]=e,E.isEmpty(this.patient)||("function"==typeof e.init&&await e.init(),"function"==typeof e.asyncValue?e.asyncValue().then((e=>{this.cards[a].values[t].value=e})).catch((e=>{this.cards[a].values[t].value="_ERROR_",console.error(`${e}`)})):"function"==typeof e.staticValue&&(this.cards[a].values[t].value=e.staticValue()))}}}},async setViralLoadStatus(){try{const t=(await P.getOrders(this.patient.getID())).reduce(((t,e)=>{const a=P.getVLResults(e);return E.isEmpty(a)||a[0].date<t.date?t:a[0]}),{});this.facts.hasHighViralLoad=P.isHighViralLoadResult(t)}catch(t){console.error(t)}},async findAndSetPatient(t,e){let a=null;this.isReady=!1,this.localPatient={},this.facts.scannedNpid||(this.facts.scannedNpid=e||""),a=this.useDDE&&e?this.ddeInstance.searchNpid(e):t?_.findByID(t):_.findByNpid(e),this.handleSearchResults(a).then((()=>this.isReady=!0)).catch((t=>T(`${t}`,3e5)))},async handleSearchResults(t){let e=[];try{e=await t}catch(a){if(a instanceof b&&!E.isEmpty(a.entity))e=a.entity;else if(a instanceof v&&Array.isArray(a.errors)){const[t,...e]=a.errors;"string"==typeof t&&"Invalid parameter(s)"===t&&this.setInvalidParametersFacts(e)}else T(`${a}`,3e5)}if(E.isEmpty(e)&&!E.isEmpty(this.localPatient)&&(e=this.localPatient),Array.isArray(e)&&e.length>1?(this.facts.npidHasDuplicates=e.length<=5,this.facts.npidHasOverFiveDuplicates=e.length>5):this.facts.patientFound=!E.isEmpty(e),this.facts.patientFound){this.patient=new _(Array.isArray(e)?e[0]:e),this.updateCards(),C.set("ACTIVE_PATIENT",this.patient),this.setPatientFacts();const t=[];t.push(this.setProgramFacts()),this.useDDE&&t.push(this.setDDEFacts()),"ANC"===this.facts.programName&&t.push(this.setAncFacts()),"TB"===this.facts.programName&&t.push(this.setTbFacts()),"ART"===this.facts.programName&&t.push(this.setViralLoadStatus()),this.facts.currentNpid=this.patient.getNationalID(),t.push(this.validateNpid()),await Promise.all(t)}else this.facts.scannedNpid&&this.setVoidedNpidFacts(this.facts.scannedNpid);this.onEvent(ot.ONLOAD).then((()=>this.isReady=!0)).catch((t=>{T(`${t}`,3e5),this.isReady=!0}))},async validateNpid(){if(this.useDDE)this.facts.hasInvalidNpid=!this.patient.getDocID()||this.patient.getDocID()&&n(this.patient.getNationalID());else{const t=await _.findByNpid(this.facts.currentNpid,{page_size:2});this.facts.hasInvalidNpid=Array.isArray(t)&&t.length>1}},setInvalidParametersFacts(t){this.facts.demographics.hasInvalidDemographics=!0,this.facts.demographics.invalidDemographics=t.map((t=>{const e=Object.entries(t);return[e[0][0],e[0][1].join(", ")]}))},reloadPatient(){return this.findAndSetPatient(this.patient.getID(),void 0)},setPatientFacts(){this.facts.demographics.patientIsComplete=this.patient.patientIsComplete(),this.facts.demographics.patientName=this.patient.getFullName(),this.facts.demographics.givenName=this.patient.getGivenName(),this.facts.demographics.familyName=this.patient.getFamilyName(),this.facts.demographics.landmark=this.patient.getAttribute(19),this.facts.demographics.phoneNumber=this.patient.getAttribute(12),this.facts.demographics.gender=this.patient.getGender(),this.facts.demographics.birthdate=this.patient.getBirthdate(),this.facts.demographics.ancestryDistrict=this.patient.getHomeDistrict(),this.facts.demographics.ancestryTA=this.patient.getHomeTA(),this.facts.demographics.ancestryVillage=this.patient.getHomeVillage(),this.facts.demographics.currentDistrict=this.patient.getCurrentDistrict(),this.facts.demographics.currentTA=this.patient.getCurrentTA(),this.facts.demographics.currentVillage=this.patient.getCurrentVillage(),this.facts.identifiers=this.patient.getIdentifiers().map((t=>t.type.name)),this.facts.hasMalawiNationalID=!/unknown/i.test(this.patient.getMWNationalID())},async setGlobalPropertyFacts(){this.facts.isMalawiNationalIDFeaturesEnabled=await C.get("IS_MW_NATIONAL_ID_SCANNER_ENABLED"),this.facts.globalProperties.ddeEnabled=await C.get("IS_DDE_ENABLED"),this.useDDE=this.facts.globalProperties.ddeEnabled,"ART"===this.app.applicationName&&(this.facts.globalProperties.useFilingNumbers=await C.get("IS_ART_FILING_NUMBER_ENABLED"))},async setAncFacts(){const t=new lt(this.patient.getID(),-1);this.facts.anc.canInitiateNewPregnancy=await t.canInitiateNewPregnancy(),this.facts.anc.currentPregnancyIsOverdue=await t.pregnancyIsOverdue(),this.facts.anc.lmpMonths=await t.getLmpInMonths()},async setTbFacts(){const t=await R.generateArtStatusFromArt(this.patient.getID(),R.getSessionDate());t&&(this.facts.tb.noHivPositiveRecordInTB=!t.hivStatus._recordedStatusInTB,this.facts.tb.clientEnrolledInArtProgram=!0,this.facts.tb._artData=t)},buildDDEDiffs(t){const e=[],a={givenName:{label:"First Name",ref:"given_name"},familyName:{label:"Last Name",ref:"family_name"},birthdate:{label:"Birthdate",ref:"birthdate"},gender:{label:"Gender",ref:"gender"},phoneNumber:{label:"Phone number",ref:"phone_number"},ancestryDistrict:{label:"Home District",ref:"home_district"},ancestryTA:{label:"Home TA",ref:"home_traditional_authority"},ancestryVillage:{label:"Home Village",ref:"home_village"},currentDistrict:{label:"Current District",ref:"current_district"},currentTA:{label:"Current TA",ref:"current_traditional_authority"},currentVillage:{label:"Current Village",ref:"current_village"}};let i=0;const n={indexes:[],class:"his-empty-set-color"};for(const s in a){let o=this.facts.demographics[s],r=o;a[s].ref in t&&(n.indexes.push(i),o=t[a[s].ref].local,r=t[a[s].ref].remote),e.push([a[s].label,o,r]),++i}return{comparisons:e,rowColors:[n]}},async setProgramFacts(){this.facts.programName=this.app.applicationName;try{this.program=new O(this.patient.getID()),this.programInfo=await this.program.getProgram(),C.set("PATIENT_PROGRAM",this.programInfo);const{program:t,outcome:e}=this.programInfo;this.facts.enrolledInProgram=!(F(t)||t.match(/n\/a/i)),this.facts.currentOutcome=e,this.facts.userRoles=A.getUserRoles().map((t=>t.role));const a=await S.getFirstObs(this.patient.getID(),"Type of patient");a?.value_coded&&(this.facts.patientType=a.value_coded,this.facts.patientTypeLastUpdated=w.toStandardHisFormat(a.obs_datetime))}catch(t){console.error(`${t}`)}},async setDDEFacts(){try{const t=(await this.ddeInstance.getLocalAndRemoteDiffs())?.diff;this.facts.dde.localDiffs=this.ddeInstance.formatDiffValuesByType(t,"local");const{comparisons:e,rowColors:a}=this.buildDDEDiffs(t);if(this.facts.dde.diffRows=e,this.facts.dde.diffRowColors=a,t.npid){const{local:e,remote:a}=t.npid;this.facts.dde.localNpidDiff=e,this.facts.dde.remoteNpidDiff=a,delete t.npid}this.facts.dde.hasDemographicConflict=!E.isEmpty(t)}catch(t){console.warn(t)}},async setVoidedNpidFacts(t){const e=["Name","Birthdate","Gender","Ancestry Home","CurrentID","Action"];let a=[];const i=await this.ddeInstance.findVoidedIdentifier(t);i&&(a=i.map((t=>{const e=new _(t);return[e.getFullName(),e.getBirthdate(),e.getGender(),e.getHomeTA(),e.getNationalID(),{type:"button",name:"Select",action:async()=>{if(!e.patientIsComplete())return this.$router.push(`/patient/registration?edit_person=${e.getID()}`);if(e.getNationalID().match(/unknown/i)||!e.getDocID())try{return await e.assignNpid(),await this.findAndSetPatient(e.getID(),void 0),L.dismiss()}catch(t){return H("Failed to assign npid to patient with unknown npid."),console.error(t)}await L.dismiss(),await this.findAndSetPatient(void 0,e.getNationalID())}}]})),this.facts.dde.voidedNpids.cols=e,this.facts.dde.voidedNpids.rows=a)},async onEvent(t,e={}){const a=it(this.facts,ct,"",t,"weight");for(const i in a){const t=a[i];if(t?.actions?.alert){const e=await(t?.actions?.alert(this.facts));if(await this.runFlowState(e)===rt.FORCE_EXIT)return!1}}"function"==typeof e&&e()},async onInitiateNewAncPregnancy(){await M("Are you sure you want to initiate new pregnancy?")&&(await this.initiateNewAncPregnancy()?(this.facts.anc.canInitiateNewPregnancy=!1,this.facts.anc.currentPregnancyIsOverdue=!1,this.nextTask()):H("Unable to initiate new pregnancy"))},initiateNewAncPregnancy(){return new lt(this.patient.getID(),-1).createNewPregnancyStatus()},async runFlowState(t){const e={};if(e[rt.SCAN_NATIONAL_ID]=async()=>await M("Are you able to scan National ID Card / Birth certificates at your Station?")?(await a("Malawi National ID","Use your 2D barcode scanner to scan the National ID Card / Birth certificate on the Home Page to proceed","",[{name:"Go To Home Page",slot:"start",color:"primary"}]),this.$router.push("/"),rt.FORCE_EXIT):(await a("Malawi National ID","Please update Missing Malawi National ID Code","",[{name:"Update Demographics Manually",slot:"start",color:"primary"}]),this.$router.push(`/patient/registration?edit_person=${this.patient.getID()}`),rt.FORCE_EXIT),e[rt.ALERT_TO_BRING_NATIONAL_ID_NEXT]=async()=>(await a("Malawi National ID","","Please remind the client to bring a National ID or Birth certificate on their next visit",[{name:"Understood",slot:"start",color:"success"}]),rt.CONTINUE),e[rt.GO_HOME]=()=>(this.$router.push("/"),rt.FORCE_EXIT),e[rt.GO_BACK]=()=>(this.$router.back(),rt.FORCE_EXIT),e[rt.ENROLL]=()=>this.program.enrollProgram(),e[rt.ACTIVATE_FN]=()=>(this.$router.push(`/art/filing_numbers/${this.patient.getID()}?assign=true`),rt.FORCE_EXIT),e[rt.UPDATE_DMG]=()=>(this.$router.push(`/patient/registration?edit_person=${this.patient.getID()}`),rt.FORCE_EXIT),e[rt.PRINT_NPID]=async()=>(await this.ddeInstance.printNpid(this.patient.getID()),await B(1800),rt.CONTINUE),e[rt.SYNCH_ART_STATUS_WITH_TB]=async()=>{const t=new s(this.patient.getID(),V.UPDATE_HIV_STATUS,-1);await t.createEncounter(),await t.saveObservationList(Object.keys(this.facts.tb._artData).reduce(((t,e)=>[...t,this.facts.tb._artData[e].obs]),[]))},e[rt.CREATE_NPID_WITH_REMOTE_DIFF]=async()=>{const t=this.facts.dde.remoteNpidDiff;try{if(t&&await this.ddeInstance.createNPID(t))return this.facts.scannedNpid=t,this.facts.currentNpid=t,this.facts.dde.localNpidDiff=t,U("Remote NPID successfully updated"),await B(300),await this.ddeInstance.printNpid(),await this.findAndSetPatient(void 0,t),rt.FORCE_EXIT}catch(e){const t=/Identifier already assigned to another patient/i;if(e instanceof v&&e.errors.join(",").match(t)){const t=await this.ddeInstance.reassignNpid(this.patient.getDocID());if(t)return this.patient=new _(t),U("Patient has been reassigned NPID"),await B(300),await this.ddeInstance.printNpid(),await this.findAndSetPatient(void 0,this.patient.getNationalID()),rt.FORCE_EXIT}T(`Unable to assign NPID: ${e}`)}},e[rt.ASSIGN_NPID]=async()=>(await this.patient.assignNpid(),await $(this.patient.getID()),await B(300),await this.reloadPatient(),rt.FORCE_EXIT),e[rt.INITIATE_ANC_PREGNANCY]=async()=>(await this.initiateNewAncPregnancy(),rt.CONTINUE),e[rt.VIEW_MERGE_AUDIT_FOR_NPID]=()=>(this.$router.push(`/merge/rollback/${this.facts.scannedNpid}`),rt.FORCE_EXIT),e[rt.RESOLVE_DUPLICATE_NPIDS]=()=>(this.$router.push(`/npid/duplicates/${this.facts.scannedNpid}`),rt.FORCE_EXIT),e[rt.REFRESH_DDE_DEMOGRAPHICS]=async()=>(await this.ddeInstance.refreshDemographics(),await this.reloadPatient(),rt.FORCE_EXIT),e[rt.ADD_AS_DRUG_REFILL]=async()=>(await this.createPatientType("Emergency supply"),rt.CONTINUE),e[rt.ADD_AS_NEW_PATIENT]=async()=>(await this.createPatientType("New patient"),rt.CONTINUE),e[rt.ADD_AS_EXTERNAL_CONSULTATION]=async()=>(await this.createPatientType("External consultation"),rt.CONTINUE),e[rt.SEARCH_BY_NAME]=()=>(this.$router.push("/patient/registration"),rt.FORCE_EXIT),e[rt.UPDATE_LOCAL_DDE_DIFFS]=async()=>(await this.ddeInstance.updateLocalDifferences(this.facts.dde.localDiffs),await this.reloadPatient(),rt.FORCE_EXIT),t in e)try{return await e[t]()}catch(i){T(`${i}`)}return t},async createPatientType(t){if(t!=this.facts.patientType&&this.facts.patientTypeLastUpdated===_.getSessionDate()&&!(await M(`This client was flagged today as "${this.facts.patientType}", altering patient type to "${t}" may affect record integrity, do you want to affect change?`)))return;const e=new x(this.patient.getID(),-1);await e.createEncounter(),await e.savePatientType(t)},async onVoid(){nt((async t=>{try{await _.voidPatient(this.patient.getID(),t),this.$router.push("/")}catch(e){T(`${e}`)}}),"void-modal")},nextTask(){this.onEvent(ot.ON_CONTINUE,(()=>{G(this.patient.getID(),this.$router)}))}}}),pt={class:"tool-bar-medium-card"},ht={class:"his-sm-text"},ut={class:"his-sm-text"},mt={class:"his-sm-text"},gt={class:"tool-bar-medium-card"},ft={class:"his-sm-text"},Nt={class:"his-sm-text"},Dt={class:"his-sm-text"},yt={class:"tool-bar-medium-card"},It={class:"his-sm-text"},Et={class:"his-sm-text"},wt={class:"his-sm-text"};t("default",W(dt,[["render",function(t,e,a,i,n,s){const o=j("ion-col"),r=j("ion-row"),c=j("ion-toolbar"),l=j("ion-header"),d=j("confirmation-card"),p=j("ion-content"),h=j("ion-button"),u=j("ion-spinner"),m=j("ion-footer"),g=j("ion-page");return z(),X(g,null,{default:Y((()=>[K(l,{translucent:!0},{default:Y((()=>[K(c,null,{default:Y((()=>[K(r,null,{default:Y((()=>[K(o,null,{default:Y((()=>[q("div",pt,[q("span",ht,[e[0]||(e[0]=J("Patient Name: ")),q("b",null,Q(t.demographics.patientName),1)]),e[3]||(e[3]=J()),e[4]||(e[4]=q("p",null,null,-1)),q("span",ut,[e[1]||(e[1]=J("Birthdate: ")),q("b",null,Q(t.birthdate),1)]),e[5]||(e[5]=J()),e[6]||(e[6]=q("p",null,null,-1)),q("span",mt,[e[2]||(e[2]=J("Gender: ")),q("b",null,Q(t.demographics.gender),1)])])])),_:1}),K(o,null,{default:Y((()=>[q("div",gt,[q("span",ft,[e[7]||(e[7]=J("Ancestry district: ")),q("b",null,Q(t.demographics.ancestryDistrict),1)]),e[10]||(e[10]=q("p",null,null,-1)),q("span",Nt,[e[8]||(e[8]=J("Ancestry TA: ")),q("b",null,Q(t.demographics.ancestryTA),1)]),e[11]||(e[11]=q("p",null,null,-1)),q("span",Dt,[e[9]||(e[9]=J("Ancestry village: ")),q("b",null,Q(t.demographics.ancestryVillage),1)]),e[12]||(e[12]=q("p",null,null,-1))])])),_:1}),K(o,null,{default:Y((()=>[q("div",yt,[q("span",It,[e[13]||(e[13]=J("Current District:")),q("b",null,Q(t.demographics.currentDistrict),1),e[14]||(e[14]=q("p",null,null,-1))]),q("span",Et,[e[15]||(e[15]=J("Current TA: ")),q("b",null,Q(t.demographics.currentTA),1),e[16]||(e[16]=q("p",null,null,-1))]),q("span",wt,[e[17]||(e[17]=J("Current Village: ")),q("b",null,Q(t.demographics.currentVillage),1),e[18]||(e[18]=q("p",null,null,-1))])])])),_:1})])),_:1})])),_:1})])),_:1}),K(p,null,{default:Y((()=>[K(r,null,{default:Y((()=>[(z(!0),Z(et,null,tt(t.cards,((t,e)=>(z(),X(o,{"size-md":"4","size-sm":"12",key:e},{default:Y((()=>[(z(),X(d,{key:`card-${e}`,title:t.label,items:t.values,isLoading:t.isLoading},null,8,["title","items","isLoading"]))])),_:2},1024)))),128))])),_:1})])),_:1}),K(m,null,{default:Y((()=>[K(c,{color:"dark"},{default:Y((()=>[K(h,{color:"danger",size:"large","router-link":"/"},{default:Y((()=>e[19]||(e[19]=[J(" Cancel ")]))),_:1}),K(h,{disabled:!t.canVoidClient,color:"danger left",size:"large",onClick:t.onVoid},{default:Y((()=>e[20]||(e[20]=[J("Void Client")]))),_:1},8,["disabled","onClick"]),t.facts.anc.canInitiateNewPregnancy?(z(),X(h,{key:0,slot:"end",size:"large",onClick:t.onInitiateNewAncPregnancy},{default:Y((()=>e[21]||(e[21]=[J(" New Pregnancy ")]))),_:1},8,["onClick"])):at("",!0),K(h,{disabled:!t.facts.patientFound||t.facts.patientFound&&!t.isReady,slot:"end",color:"success",size:"large",onClick:t.nextTask},{default:Y((()=>[t.isReady?at("",!0):(z(),X(u,{key:0,name:"crescent"})),e[22]||(e[22]=J(" Continue "))])),_:1},8,["disabled","onClick"])])),_:1})])),_:1})])),_:1})}],["__scopeId","data-v-a2faf79c"]]))}}}));
