System.register(["./index-legacy-2OuOZQ1w.js","./HisStandardForm-legacy-Cd-xGvNm.js","./VoidReason-legacy-Sz1tr4lF.js"],(function(t,e){"use strict";var a,r,o,i,n,s,l,m,d,g,p,c,h,u,P,_,f,S,y,F,v;return{setters:[t=>{a=t.d,r=t.an,o=t.ao,i=t.H,n=t.b0,s=t.c2,l=t.be,m=t.q,d=t.c3,g=t.a_,p=t.p,c=t.y,h=t.aD,u=t.av,P=t.bi,_=t.am,f=t.ar,S=t.a,y=t.b},t=>{F=t.H},t=>{v=t.p}],execute:function(){const e=a({components:{HisStandardForm:F},data:()=>({hisFormKey:0,patient:{},patientProgram:{},fields:[],fieldComponent:"",activeField:"",activeProgram:{},programSelectionFieldContext:{}}),watch:{fieldComponent(t){t&&(this.activeField=t)},activeField(t){"program_selection"===t&&(this.hisFormKey+=1)},$route:{async handler({params:t}){if(t&&t.patient_id){const e=await u.findByID(t.patient_id);this.patient=new u(e),this.patientProgram=new P(this.patient.getID()),this.fields=[this.getProgramSelectionField(),this.getProgramEnrollmentField(),...this.getProgramOutcomeDateFields(),this.getProgramStateField(),this.getTransferOutFacilityFields(),...this.getTransferoutReasonFields(),this.getStateOutcomeDateFields()]}},deep:!0,immediate:!0}},methods:{async onFinish(t){switch(this.activeField){case"program_enrollment":await this.onEnrollProgram();break;case"program_state":await this.onProgramState(t)}h.invalidate("PATIENT_PROGRAM")},async patientPrograms(){return(await this.patientProgram.getPrograms()).map((t=>({label:t.program.name,value:t.program.program_id,other:{...t,programStates:t.patient_states.map((t=>({name:t.name,startDate:i.toStandardHisDisplayFormat(t.start_date),endDate:t.end_date?i.toStandardHisDisplayFormat(t.end_date):"N/A",actions:this.getStateActions(t)})))}})))},async allPrograms(){const t=this.programSelectionFieldContext.listData;return(await l.getAllPrograms()).map((e=>({label:e.name,value:e.program_id,disabled:g.find(t,{value:e.program_id}),other:{...e}})))},async programWorkflows(){const t=await l.getProgramWorkflows(this.patientProgram.getProgramId());if(!g.isEmpty(t))return t[0].states.map((t=>({label:t.name,value:t.program_workflow_state_id,other:{...t}})))},getStateActions(t){const e=[{name:"Void",color:"danger",action:async(e,a)=>{await this.onVoidState(t.patient_state_id,e,a)}}];return"Patient transferred out"===t.name&&e.push({name:"Print",color:"primary",action:async()=>await this.patientProgram.printTransferout(t.start_date)}),e},onUpdateState(){if(-1===this.patientProgram.getProgramId())return m("Please select a program");this.fieldComponent="program_state"},async onProgramState(t){try{await this.patientProgram.updateState(),this.fieldComponent="program_selection",t.transfer_out_state&&await this.patientProgram.transferOutEncounter(t.transfer_out_state.other,t.reason_for_transferrout.value),p("State has been updated")}catch(e){c(`${e}`)}},async onEnrollProgram(){if(-1===this.patientProgram.getProgramId())return m("Please select a program");try{this.activeProgram=await this.patientProgram.enrollProgram(),this.fieldComponent="program_state",p("Patient has been enrolled!")}catch(t){this.activeProgram={},c(`${t}`)}},async onVoidState(t,e,a){await v((async r=>{try{this.patientProgram.setStateId(t),await this.patientProgram.voidState(r),this.patientProgram.setStateId(-1),e.other.programStates.splice(a,1),p("State has been voided")}catch(o){c(`${o}`)}}))},async onVoidProgram(){if(-1===this.patientProgram.getPatientProgramId())return m("Please select a program");await v((async t=>{try{await this.patientProgram.voidProgram(t);const e=this.programSelectionFieldContext,a=g.findIndex(e.listData,{value:this.patientProgram.getProgramId()});e.listData.splice(a,1),e.activeProgram={},this.patientProgram.setPatientProgramId(-1),this.patientProgram.setProgramId(-1),p("Program removed")}catch(e){console.error(e),c(`${e}`)}}))},getStateOutcomeDateFields(){return{id:"state_outcome_date",helpText:"Select Outcome date",type:o.TT_DATE_PICKER,defaultValue:()=>l.getSessionDate(),validation:t=>r.required(t),condition:t=>t.program_state,computedValue:t=>this.patientProgram.setStateDate(t),config:{minDate:()=>this.patientProgram.getProgramDate(),maxDate:()=>l.getSessionDate(),infoItems:t=>[{label:"Selected Outcome Date",value:i.toStandardHisDisplayFormat(t)}]}}},getTransferOutFacilityFields:()=>({id:"transfer_out_state",helpText:"Please Select facility name",type:o.TT_SELECT,validation:t=>r.required(t),condition:t=>"Patient transferred out"===t.program_state.label,options:(t,e="")=>d(e),config:{showKeyboard:!0,isFilterDataViaApi:!0}}),getTransferoutReasonFields:()=>[{id:"transferout_reasons",proxyID:"reason_for_transferrout",helpText:"Reason for Transferring out",type:o.TT_SELECT,validation:t=>r.required(t),condition:t=>"Patient transferred out"===t.program_state.label,options:()=>{const t=t=>({label:t,value:t});return[t("Workplace transfer/lost job-related reasons"),t("Relocation to another place/home village"),t("Transport due to long distance"),t("School"),t("Business"),t("Marriage"),t("Unknown"),t("Clinic not helping"),t("Other")]}},{id:"transferout_other",proxyID:"reason_for_transferrout",helpText:"Other Reason for Transferring out",type:o.TT_TEXT,condition:t=>"Other"===t.transferout_reasons.value,validation:t=>r.required(t)}],getProgramStateField(){return{id:"program_state",helpText:"State",type:o.TT_SELECT,validation:t=>r.required(t),options:()=>this.programWorkflows(),condition:()=>"program_state"===this.activeField,unload:t=>this.patientProgram.setStateId(t.value)}},getProgramEnrollmentField(){return{id:"program_enrollment",helpText:"Please select a programme",type:o.TT_SELECT,condition:()=>"program_enrollment"===this.activeField,unload:t=>this.patientProgram.setProgramId(t.value),options:()=>this.allPrograms(),validation:t=>r.required(t),config:{showKeyboard:!0}}},getProgramOutcomeDateFields(){return n({id:"program_outcome_date",helpText:"Outcome",required:!0,minDate:()=>i.estimateDateFromAge(100),maxDate:()=>l.getSessionDate(),condition:()=>"program_enrollment"===this.activeField,beforeNext:(t,e)=>{if(/hiv/i.test(e.program_enrollment.label)&&i.getAgeInWeeks(this.patient.getBirthdate().toString(),t)<6)return m("Patient must be at least 6 weeks old to enroll in ART"),!1},estimation:{allowUnknown:!0,estimationFieldType:s.MONTH_ESTIMATE_FIELD},computeValue:t=>this.patientProgram.setProgramDate(t)})},getProgramSelectionField(){const t=t=>!g.isEmpty(t.program_selection);return{id:"program_selection",helpText:"Programs",type:o.TT_PROGRAM_SELECTION,onload:t=>{this.activeField="program_selection",this.programSelectionFieldContext=t},onValue:t=>(t&&(this.activeProgram=t.other,this.patientProgram.setProgramId(t.value),this.patientProgram.setPatientProgramId(t.other.patient_program_id),this.patientProgram.setProgramDate(i.toStandardHisFormat(t.other.date_enrolled))),!0),validation:t=>r.required(t),options:()=>this.patientPrograms(),config:{onVoidState:this.onVoidState,hiddenFooterBtns:["Back","Next","Clear"],footerBtns:[{name:"Void Program",slot:"end",color:"danger",state:{visible:{default:(e,a)=>t(a),onValue:(e,a)=>t(a)}},onClick:async()=>{await this.onVoidProgram()}},{name:"Update state",slot:"end",state:{visible:{default:(e,a)=>t(a),onValue:(e,a)=>t(a)}},onClick:async()=>{await this.onUpdateState()}},{name:"Enroll",color:"success",slot:"end",onClick:()=>{this.fieldComponent="program_enrollment"}}]}}}}});t("default",_(e,[["render",function(t,e,a,r,o,i){const n=f("his-standard-form");return y(),S(n,{key:t.hisFormKey,activeField:t.fieldComponent,skipSummary:!0,fields:t.fields,onOnIndex:e[0]||(e[0]=e=>t.fieldComponent=""),onOnFinish:t.onFinish},null,8,["activeField","fields","onOnFinish"])}]]))}}}));
