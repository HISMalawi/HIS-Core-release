import{d as N,r as S,bI as f,bN as A,a9 as s,bf as b,aa as c,dU as g,dR as o,bQ as I,u as h,v as R,w as F,x,y as E,aQ as P,bs as w,dS as y,a5 as C}from"./index-BY8l3Vlw.js";import{H as W}from"./HisStandardForm-B5OFjm88.js";import{u as B}from"./useEncounter-CjxNJWQO.js";import{r as D}from"./commons-CCinnKi6.js";import"./isEmpty-diJxMdaX.js";import"./encounter_guidelines-BWKNaIgH.js";import"./GuidelineEngine-D6V1_Znr.js";const G=N({__name:"Reception",setup(L){const p=S([]),t=new f(-1,A.TB_RECEPTION),{goToNextTask:T,patientDashboardUrl:_}=B((i,r,a)=>{t.patientID=r,t.providerID=i;const n=()=>{let e={};return{id:"treatForIpt",helpText:"Enroll in TPT program?",type:s.TT_SELECT,requireNext:!1,init:async()=>(e=await b.getProgramInformation(r),!0),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}],validation:d=>c.required(d),condition:()=>!e.tb_positive&&a.getAge()>=0&&a.getAge()<g}},l=()=>({id:"catchmentArea",helpText:"Patient living within catchment area?",type:s.TT_SELECT,requireNext:!1,Validation:e=>c.required(e),computedValue:e=>({concept_id:o("LIVES_NEAR"),value_coded:o("".concat(e.value)),obs_datetime:t.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}]}),u=()=>({id:"livesNearTB",helpText:"Patient living near a TB registration centre?",type:s.TT_SELECT,requireNext:!1,computedValue:e=>({concept_id:o("TRANSFERRED_OUT_EXTERN"),value_coded:o("".concat(e.value)),obs_datetime:t.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}],validation:e=>c.required(e),condition:e=>e.catchmentArea.value==="NO_ANSWER"}),m=()=>({id:"locationId",type:s.TT_SELECT,helpText:"Select TB Registration Centre:",computedValue:e=>({concept_id:o("FACILITY_NAME"),value_text:e.label,obs_datetime:t.date}),options:(e,d="")=>I(d),config:{showKeyboard:!0,isFilterDataViaApi:!0},validation:e=>c.required(e),condition:e=>e.livesNearTB.value==="YES_ANSWER",requireNext:!1});p.value=[n(),l(),u(),m()]});async function v(i,r){var n,l;if(((n=i.treatForIpt)==null?void 0:n.value)==="NO_ANSWER")return P.push(_.value);await t.createEncounter(),await t.saveObservationList(await D(r));const a=new w(t.patientID);a.setStateDate(t.date);try{await a.enrollProgram()}catch(u){console.warn("".concat(u))}((l=i.treatForIpt)==null?void 0:l.value)==="YES_ANSWER"&&a.setStateId(y.TPT),a.stateId!=-1&&await a.updateState(),T()}return(i,r)=>(h(),R(E(C),null,{default:F(()=>[x(W,{cancelDestinationPath:E(_),onFinishAction:v,fields:p.value,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{G as default};
