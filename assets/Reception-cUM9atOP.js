import{d as S,r as A,bI as f,dO as g,ab as c,bg as R,ac as u,dR as I,bO as b,u as h,v as F,w as P,x,y as T,aR as w,bt as y,dP as v,a5 as O}from"./index-LyP1z09P.js";import{H as W}from"./HisStandardForm-DTr2fl7A.js";import{u as B}from"./useEncounter-aN4Ia2f8.js";import{g as o}from"./util-KW2bx-74.js";import{r as C}from"./commons-P78U_Jw3.js";import"./isEmpty-XyLlvQzF.js";import"./encounter_guidelines-6akTZ644.js";import"./GuidelineEngine-syyQoOzo.js";const H=S({__name:"Reception",setup(Y){const E=A([]),t=new f(-1,g.TB_RECEPTION),{goToNextTask:m,patientDashboardUrl:_}=B((i,r,a)=>{t.patientID=r,t.providerID=i;const n=()=>{let e={};return{id:"treatForIpt",helpText:"Enroll in TPT program?",type:c.TT_SELECT,requireNext:!1,init:async()=>(e=await R.getProgramInformation(r),!0),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}],validation:p=>u.required(p),condition:()=>!e.tb_positive&&a.getAge()>=0&&a.getAge()<I}},l=()=>({id:"catchmentArea",helpText:"Patient living within catchment area?",type:c.TT_SELECT,requireNext:!1,Validation:e=>u.required(e),computedValue:e=>({concept_id:o("LIVES_NEAR"),value_coded:o("".concat(e.value)),obs_datetime:t.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}]}),s=()=>({id:"livesNearTB",helpText:"Patient living near a TB registration centre?",type:c.TT_SELECT,requireNext:!1,computedValue:e=>({concept_id:o("TRANSFERRED_OUT_EXTERN"),value_coded:o("".concat(e.value)),obs_datetime:t.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}],validation:e=>u.required(e),condition:e=>e.catchmentArea.value==="NO_ANSWER"}),d=()=>({id:"locationId",type:c.TT_SELECT,helpText:"Select TB Registration Centre:",computedValue:e=>({concept_id:o("FACILITY_NAME"),value_text:e.label,obs_datetime:t.date}),options:(e,p="")=>b(p),config:{showKeyboard:!0,isFilterDataViaApi:!0},validation:e=>u.required(e),condition:e=>e.livesNearTB.value==="YES_ANSWER",requireNext:!1});E.value=[n(),l(),s(),d()]});async function N(i,r){var n,l,s;if(((n=i.treatForIpt)==null?void 0:n.value)==="NO_ANSWER")return w.push(_.value);await t.createEncounter(),await t.saveObservationList(await C(r));const a=new y(t.patientID);a.setStateDate(t.date);try{await a.enrollProgram()}catch(d){console.warn("".concat(d))}((l=i.treatForIpt)==null?void 0:l.value)==="YES_ANSWER"&&a.setStateId(v.TPT),((s=i.livesNearTB)==null?void 0:s.value)==="YES_ANSWER"&&a.setStateId(v.TRANSFER_OUT),a.stateId!=-1&&await a.updateState(),m()}return(i,r)=>(h(),F(T(O),null,{default:P(()=>[x(W,{cancelDestinationPath:T(_),onFinishAction:N,fields:E.value,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{H as default};
