import{H as p}from"./DataTableTemplate-B_aqqmrF.js";import{d as u,dE as m,L as t,P as d,ao as _,O as h,_ as f,r as v,o as T,c as b}from"./index-BFVcutZq.js";import"./Layout-CVFcxuWh.js";const y=u({components:{HtsTemplate:p},setup(){const n=new m("HTS MONTHLY ACTIVITY LOG");return{params:{logo:"reports.png",title:"HTS MONTHLY ACTIVITY LOG",prefix:"Clinic",columns:[[{label:"Provider ID",value:e=>e.provider_code||"N/A"},{label:"Username",value:e=>e.username},{label:"HIV Rapid",columnType:"drilldown",value:e=>e.hiv_status},{label:"Syphilis Rapid",columnType:"drilldown",value:e=>e.syphilis_status},{label:"HepB Rapid",columnType:"drilldown",value:e=>e.hepb_status},{label:"DBS EID",value:e=>e.dbs_eid||"N/A"},{label:"DBS VL",value:e=>e.dbs_vl||"N/A"},{label:"DBS for inconclusives",value:e=>e.dbs_for_inconclusives||"N/A"},{label:"Self-Tests distributed",columnType:"customDrillDown",drillParams:(e,s)=>({title:"Self tests distributed",columns:[[t.thTxt("National ID"),t.thTxt("First name"),t.thTxt("Last name"),t.thTxt("Birthdate"),t.thTxt("Kits"),t.thTxt("Action")]],data:e.self_test_kits,generator:async a=>{const i=[];for(const r of a){const o="".concat(r.person_id,"_kits_given");if(s.drill[o]){i.push(s.drill[o]);continue}try{const l=new d(await d.findByID(r.person_id));s.drill[o]=[t.td(l.getNationalID()),t.td(l.getGivenName()),t.td(l.getFamilyName()),t.tdDate("".concat(l.getBirthdate())),t.td(r.self_kits),t.tdBtn("Show",()=>{_.push({path:"/patient/dashboard/".concat(o)}),h.dismiss({})})],i.push(s.drill[o])}catch(l){console.error(l)}}return i}}),value:e=>e.self_test_kits,staticValue:e=>e.self_test_kits.reduce((s,a)=>s+a.self_kits,0)},{label:"Recency",columnType:"drilldown",value:e=>e.recency}]],hasPeriodSelection:!0,data:async(e,s,a)=>(n.startDate=a.start_date,n.endDate=a.end_date,n.requestReport())}}}});function S(n,c,e,s,a,i){const r=v("hts-template");return T(),b(r,{params:n.params},null,8,["params"])}const N=f(y,[["render",S]]);export{N as default};
