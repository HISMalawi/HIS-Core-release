import{d as Y,an as M,U as L,S as j,R as q,W as K,aU as W,_ as Q,a3 as X,dd as J,dh as Z,$ as x,a4 as tt,a5 as et,X as at,a1 as st,aq as i,bl as I,ai as v,al as nt,aA as P,Q as p,br as b,bg as y,bq as ot,as as it,aK as rt,aN as lt,bt as ct,M as ut,a8 as dt,ad as s,u as r,v as u,w as a,x as n,K as k,E as w,B as C,H as m,z as d,C as ht,G as pt}from"./index-DrPQ21-i.js";import{_ as mt}from"./EncounterMixin.vue_vue_type_script_lang-_NQuqjHg.js";import{R as ft}from"./RiskFactorModal-DnS1XO8Z.js";import{B as T}from"./htn_service-CwrOol97.js";import{V as gt}from"./vitals_service-gZVKDWsr.js";import"./encounter_guidelines-D8L0Wl1z.js";import"./GuidelineEngine-D6V1_Znr.js";import"./HisStandardForm-rh8Trs2q.js";const f={background:"#444444"},bt=Y({mixins:[mt],components:{DataTable:M,IonTitle:L,IonToolbar:j,IonHeader:q,IonContent:K,IonGrid:W,IonRow:Q,IonButton:X,IonRadioGroup:J,IonRadio:Z,IonCol:x,IonFooter:tt,IonPage:et,IonItem:at,IonLabel:st},data:()=>({htn:{},hasARVNumber:!0,suggestedNumber:"",columns:[[i.thTxt("Date",{style:f}),i.thTxt("Systolic",{style:f}),i.thTxt("Diastolic",{style:f}),i.thTxt("BP Drugs",{style:f}),i.thTxt("Action / Note",{style:f})]],bpGradeColorMap:{"N/A":"#ffffff",normal:"#ffffff","grade 1":"#FFC3CE","grade 2":"#F20056","grade 3":"#FF3333"},rows:[],riskFactors:[],action:null,trail:[],date:null,patientOnBPDrugs:!1,patientFirstVisit:!1,normatensive:!1,patientHasHyperTensionObs:!1,currentDrugs:[],items:[],isEnrolledInHTN:!1,isAliveOnHTN:!1,HTNProgramID:20,aliveState:160,refer:!1}),watch:{ready:{async handler(t){if(!t)return;await(await I.create({message:"Please wait...",backdropDismiss:!1})).present(),this.htn=new T(this.patientID,this.providerID),this.trail=await this.htn.getBPTrail(),this.rows=this.formatBpTrailRows(this.trail),this.normatensive=T.isBpNormotensive(this.trail),this.riskFactors=await this.getRiskFactors(),this.date=v.toStandardHisDisplayFormat(nt.getSessionDate()),await this.isTransfered(),await this.hasHyperTenstion(),await this.getTreatmentStatus(),await this.getProgramStatus(),I.dismiss(),this.patientFirstVisit&&this.patientOnBPDrugs&&await this.alertTransferIn(),this.getItems()},immediate:!0}},computed:{totalRiskFactors(){return this.riskFactors.filter(t=>t.value==="Yes").length},showClinicianButton(){return!(P.isClinician()&&P.isDoctor())}},methods:{async onFinish(){var t,e;if(this.action||this.refer){if(!await this.htn.createEncounter())return p("Unable to create encounter");if(this.refer){if(!await this.htn.saveValueCodedObs("Refer patient to clinician","Yes"))return p("Unable to create Obs");this.gotoPatientDashboard()}else{if(!await this.htn.saveValueTextObs("Plan",this.action.label))return p("Unable to create Obs");const c={state:this.action.value};if(await this.htn.enrollPatient(c),typeof((e=(t=this.action)==null?void 0:t.other)==null?void 0:e.action)=="function")return this.action.other.action();this.nextTask()}}else p("Please select an action")},referPatient(){this.refer=!0,this.onFinish()},goToDiagnosis(){return this.$router.push({path:"/art/encounters/hypertension_diagnosis/".concat(this.patientID)})},async hasHyperTenstion(){const t=await b.getFirstValueCoded(this.patientID,"Patient has hypertension");this.patientHasHyperTensionObs=!!"".concat(t).match(/yes|no/i)},async isTransfered(){const t=await b.getFirstValueCoded(this.patientID,"Transferred");this.patientFirstVisit=!t},async getTreatmentStatus(){const t=await b.getFirstValueText(this.patientID,"Treatment status");this.patientOnBPDrugs=!!(t&&t.match(/BP Drugs started/i))},async getProgramStatus(){const t=await y.getPatientPrograms(this.patientID);this.isEnrolledInHTN=t.filter(e=>e.program.name==="HYPERTENSION PROGRAM").length>0,this.isEnrolledInHTN&&await this.programState()},async programState(){const t=await y.getPatientStates(this.patientID,this.HTNProgramID);this.isAliveOnHTN=t.filter(e=>e.name==="Alive").length>0},async getRiskFactors(){const e=ot.getConceptsByCategory("risk factors").map(async o=>{const l=await b.getFirstValueCoded(this.patientID,o.name);return{concept:o.name,value:l}});return Promise.all(e)},formatBpTrailRows(t){return Object.keys(t).map(e=>{const o=v.toStandardHisDisplayFormat(e);this.currentDrugs=this.currentDrugs.concat(t[e].drugs);const c={background:(()=>{const D=T.getBpGrade(parseInt(t[e].sbp),parseInt(t[e].dbp));return this.bpGradeColorMap[D]})()};return[i.tdDate(o,{style:c}),i.td(t[e].sbp,{style:c}),i.td(t[e].dbp,{style:c}),i.td(t[e].drugs.join(", "),{style:c}),i.td(t[e].note,{style:c})]})},async showRiskFactors(){const t=await it.create({component:ft,backdropDismiss:!1,cssClass:"large-modal",componentProps:{factors:this.riskFactors}});t.present();const{data:e}=await t.onDidDismiss();rt.isEmpty(e)||(this.riskFactors=e.map(o=>{const l=o.isChecked===!0?"Yes":"No";return{concept:o.concept,value:l}}))},async alertTransferIn(){await lt("Transfer in","Does the patient want to transfer in for HTN management?","",[{name:"Yes",slot:"end",color:"success"},{name:"No",slot:"start",color:"danger"}])==="Yes"?(await this.enrollInHTN(),await this.setHtnTransferred("Yes"),this.patientFirstVisit=!1,await this.getItems()):(await this.setHtnTransferred("No"),this.nextTask())},async enrollInHTN(){try{const t=new ct(this.patientID);t.setProgramId(this.HTNProgramID),t.setStateDate(y.getSessionDate()),t.setStateId(this.aliveState),await t.enrollProgram(),await t.updateState(),this.isEnrolledInHTN=!0,ut("Patient is now enrolled in HTN")}catch(t){console.error(t),p("".concat(t))}},async setHtnTransferred(t){const e=new gt(this.patientID,this.providerID);await e.createEncounter()?await e.saveValueCodedObs("Transferred",t)||p("Unable to create observation Transferred for patient"):p("Unable to create patient transfer encounter")},async getItems(){this.currentDrugs.length>0?this.items=[{label:"Did not take prescribed drugs",value:"on treatment",other:{action:()=>this.$router.push("/art/encounters/bp_adherence/".concat(this.patientID))}},{label:"Continue drugs",value:"on treatment",other:{action:()=>this.$router.push("/art/encounters/bp_adherence/".concat(this.patientID))}},{label:"Review drugs",value:"on treatment",other:{action:()=>this.$router.push("/art/encounters/bp_adherence/".concat(this.patientID,"?review=true"))}}]:(this.items=[{label:"Lifestyle advice given",value:"Lifestyle changes only"},{label:"Not yet stable on ART",value:"Symptomatic but not in treatment"},{label:"Patient declining BP drugs ",value:"Symptomatic but not in treatment"}],this.normatensive&&this.items.push({label:"Return to annual screening",value:"Alive"}),this.items.push({label:"Start anti hypertensives",value:"On treatment",other:{action:()=>this.$router.push("/art/encounters/bp_prescription/".concat(this.patientID))}}))}}}),_t={key:0,style:{color:"green"}},yt={slot:"end"},wt=k("h1",{style:{"text-align":"center"}},"Actions",-1);function Tt(t,e,o,l,c,D){const H=s("ion-title"),h=s("ion-button"),_=s("ion-toolbar"),F=s("ion-header"),S=s("data-table"),N=s("ion-content"),R=s("ion-label"),B=s("ion-radio"),V=s("ion-item"),O=s("ion-col"),E=s("ion-row"),$=s("ion-grid"),A=s("ion-radio-group"),G=s("ion-footer"),U=s("ion-page");return r(),u(U,null,{default:a(()=>[n(F,null,{default:a(()=>[n(_,null,{default:a(()=>[n(H,null,{default:a(()=>[k("span",null,"BP management screening on "+w(t.date),1),t.patientOnBPDrugs?(r(),C("small",_t," (Patient already on BP drugs)")):m("",!0)]),_:1}),k("span",yt,[t.totalRiskFactors>0?(r(),u(h,{key:0,color:"danger",onClick:t.showRiskFactors},{default:a(()=>[d("View/Edit risk factors "+w(t.totalRiskFactors),1)]),_:1},8,["onClick"])):m("",!0),t.totalRiskFactors===0?(r(),u(h,{key:1,onClick:t.showRiskFactors},{default:a(()=>[d("add riskfactors")]),_:1},8,["onClick"])):m("",!0)])]),_:1})]),_:1}),n(N,null,{default:a(()=>[n(S,{config:{showIndex:!1},columns:t.columns,rows:t.rows},null,8,["columns","rows"])]),_:1}),n(G,null,{default:a(()=>[n(_,null,{default:a(()=>[wt,n(A,{modelValue:t.action,"onUpdate:modelValue":e[0]||(e[0]=g=>t.action=g)},{default:a(()=>[n($,null,{default:a(()=>[n(E,null,{default:a(()=>[(r(!0),C(pt,null,ht(t.items,(g,z)=>(r(),u(O,{size:"4",key:z},{default:a(()=>[n(V,null,{default:a(()=>[n(R,{style:{"font-size":"1.0rem","font-weight":"bold"}},{default:a(()=>[d(w(g.label),1)]),_:2},1024),n(B,{value:g},null,8,["value"])]),_:2},1024)]),_:2},1024))),128))]),_:1})]),_:1})]),_:1},8,["modelValue"])]),_:1}),n(_,{color:"dark"},{default:a(()=>[n(h,{size:"large",color:"danger",slot:"start",onClick:t.gotoPatientDashboard},{default:a(()=>[d(" cancel ")]),_:1},8,["onClick"]),t.showClinicianButton?(r(),u(h,{key:0,size:"large",color:"danger",slot:"start",onClick:t.referPatient},{default:a(()=>[d(" Refer to clinician ")]),_:1},8,["onClick"])):m("",!0),t.patientHasHyperTensionObs?m("",!0):(r(),u(h,{key:1,size:"large",slot:"end",onClick:t.goToDiagnosis},{default:a(()=>[d(" Hypertension Diagnosis ")]),_:1},8,["onClick"])),t.patientHasHyperTensionObs&&!t.isEnrolledInHTN?(r(),u(h,{key:2,size:"large",slot:"end",onClick:t.enrollInHTN},{default:a(()=>[d(" Enroll in HTN ")]),_:1},8,["onClick"])):m("",!0),t.patientHasHyperTensionObs?(r(),u(h,{key:3,size:"large",color:"success",slot:"end",onClick:t.onFinish},{default:a(()=>[d(" Finish ")]),_:1},8,["onClick"])):m("",!0)]),_:1})]),_:1})]),_:1})}const St=dt(bt,[["render",Tt]]);export{St as default};
