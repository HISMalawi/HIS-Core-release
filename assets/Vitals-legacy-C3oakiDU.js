System.register(["./index-legacy-fdrleUji.js","./HisStandardForm-legacy-DBItdiwO.js","./vitals_service-legacy-BYIKUcGe.js","./EncounterMixin.vue_vue_type_script_lang-legacy-DpQaTBKW.js","./encounter_guidelines-legacy-CUS7BXt4.js","./GuidelineEngine-legacy-KsvQuFdF.js"],(function(e,t){"use strict";var i,a,s,n,l,h,r,o,c,g,u,d,p,v,b,H,f,m,y,F;return{setters:[e=>{i=e.d,a=e.aP,s=e.ae,n=e.t,l=e.U,h=e.F,r=e.T,o=e.V,c=e.b6,g=e.aO,u=e.ah,d=e.n,p=e.cL,v=e._,b=e.r,H=e.o,f=e.c},e=>{m=e.H},e=>{y=e.V},e=>{F=e._},null,null],execute:function(){const t=i({mixins:[F],components:{HisStandardForm:m},data:()=>({app:a.getActiveApp(),activeField:"",age:null,gender:null,hasBPinfo:!1,finalHeightValue:null,recentHeight:null,recentHeightObsID:-1,HTNEnabled:!1,optionWhiteList:[],hasHTNObs:!1,vitals:{},weightForHeight:{},medianWeightandHeight:{},canEditHeight:!1,patientAgeAtPrevRecordedHeight:-1}),watch:{ready:{handler(e){e&&this.init()},immediate:!0}},methods:{init(){this.vitals=new y(this.patientID,this.providerID),this.age=this.patient.getAge(),this.gender=this.patient.getGender(),this.fields=this.getFields()},getOptions(){let e="";this.recentHeight&&(this.age>18||this.patientAgeAtPrevRecordedHeight>=18)&&(e=this.recentHeight||"");const t=[{label:"Weight",value:"",other:{modifier:"KG",icon:"weight",required:!0}},{label:"Height",value:`${e}`,other:{modifier:"CM",icon:"height",recentHeight:this.recentHeight,visible:this.canEditHeight,required:this.canEditHeight}},{label:"BP",value:"",other:{modifier:"mmHG",icon:"bp"}},{label:"Temp",value:"",other:{modifier:"Â°C",icon:"temp"}},{label:"SP02",value:"",other:{modifier:"%",icon:"spo2"}},{label:"Pulse",value:"",other:{modifier:"BPM",icon:"pulse-rate"}},{label:"Age",value:this.age,other:{modifier:"Years old",icon:"",visible:!1}}];return s.isEmpty(this.optionWhiteList)?t:t.filter((e=>this.optionWhiteList.includes(e.label))).map((e=>(e.other.required=!0,e)))},canCheckWeightHeight(){return s.isEmpty(this.optionWhiteList)||this.optionWhiteList.includes("Height")&&this.optionWhiteList.includes("Weight")},canCheckBp(){return s.isEmpty(this.optionWhiteList)||this.optionWhiteList.includes("BP")},async onFinish(e){if(!(await this.vitals.createEncounter()))return n("Unable to create treatment encounter");const t=await this.buildObs(e);if(!(await this.vitals.saveObservationList(t)))return n("Unable to save patient observations");l("Observations and encounter created!"),this.nextTask()},async buildObs(e){const t=await this.mapObs(this.sanitizeVitals(e.vitals).filter((e=>"BP"!==e.label)).map((e=>("Height"===e.label&&e.other.visible&&this.finalHeightValue&&(e.value=this.finalHeightValue),e))));if(this.HTNEnabled&&!this.hasHTNObs&&e.on_htn_medication){const i=await this.vitals.buildValueText("Treatment status",e.on_htn_medication.value);t.push(i)}return t},splitBP(e){const t=[];return e.forEach((e=>{if("BP"===e.label){const i=`${e.value}`.split("/"),a=i[0],s=i[1];t.push({label:"Systolic",value:a}),t.push({label:"Diastolic",value:s})}})),t},getBMI(e){const t=this.getVal(e,"Weight"),i=this.getVal(e,"Height"),a=[];if(this.age<=14){const e=(t/parseFloat(this.medianWeightandHeight.weight)*100).toFixed(0),s=(i/parseFloat(this.medianWeightandHeight.height)*100).toFixed(0),n=(i%Math.floor(i)<.5?0:.5)+Math.floor(i),l=(t/this.weightForHeight[n.toFixed(1)]*100).toFixed(0);isNaN(parseFloat(l))||a.push({label:"Weight for height percent of median",value:l}),a.push({label:"Weight for age percent of median",value:e}),a.push({label:"Height for age percent of median",value:s})}else{const e=p.calculateBMI(t,i);a.push({label:"BMI",value:e})}return a},getVal(e,t){const i=e.filter((e=>e.label===t));return""===i[0].value?0:parseFloat(`${i[0].value}`)},async mapObs(e){const t=e.map((async e=>await this.vitals.buildValueNumber(e.label,e.value)));return Promise.all(t)},validateVitals(e){const t=this.checkRequiredVitals(e);if(t.length>0)return t.map((e=>[`${e.label} can not be empty`]));const i=this.sanitizeVitals(e);return this.vitals.validateAll(i)},sanitizeVitals(e){let t=e.filter((e=>("Height"!==e.label||0!=e.other.required)&&""!==e.value&&"Age"!==e.label));return this.canCheckBp()&&(t=t.concat(this.splitBP(t))),this.canCheckWeightHeight()&&(t=t.concat(this.getBMI(e))),t},checkRequiredVitals:e=>e.filter((e=>""===e.value&&!0===e.other.required)),getFields(){return[{id:"on_htn_medication",helpText:"Already taking drugs for blood pressure?",type:h.TT_SELECT,init:async()=>("ART"===this.app?.applicationName&&(this.HTNEnabled=await r.get("IS_ART_HTN_ENABLED"),this.HTNEnabled&&await y.getAll(this.patientID,"Treatment status").then((e=>{this.hasHTNObs=e&&e.length>0}))),!0),validation:e=>o.required(e),condition:()=>this.HTNEnabled&&!this.hasHTNObs,options:()=>[{label:"Yes",value:"BP Drugs started"},{label:"No",value:"Not on BP Drugs"}]},{id:"vitals",helpText:"Vitals entry",type:h.TT_VITALS_ENTRY,init:async()=>{const e=this.$route.query.vital_options;if(e&&(this.optionWhiteList=e.split(",")),this.canCheckWeightHeight()){const e=await this.patient.getRecentHeightObs();s.isEmpty(e)?this.canEditHeight=!0:(this.patientAgeAtPrevRecordedHeight=c(e.obs_datetime).diff(this.patient.getBirthdate(),"year"),this.recentHeight=e.value_numeric,this.recentHeightObsID=e.obs_id,this.canEditHeight=this.patientAgeAtPrevRecordedHeight<18||this.age<18),this.age<=14&&(this.medianWeightandHeight=await this.patient.getMedianWeightHeight(),this.weightForHeight=await g.getWeightForHeightValues())}return!0},validation:e=>this.validateVitals(e),beforeNext:async e=>{const t=s.find(e,{label:"Height"});if(t&&this.recentHeight&&t.other.visible){const e=parseInt(`${t.value||0}`),i=parseInt(`${this.recentHeight||0}`);if(e<i){const t=`Use ${i} CM`,a=`Use ${e} CM`;await u(`Previous Height "${i} CM"`,`Current Height "${e} CM"`,`Inconsistent Height Reading (Height can not be lower than previous height of " ${this.recentHeight} "CM. Please SELECT the correct height.)`,[{name:t,slot:"start",color:"success"},{name:a,slot:"end",color:"danger"}])===a&&this.recentHeightObsID?await d(`Do you want to void height observation for ${i}`)&&await y.voidObs(this.recentHeightObsID):this.finalHeightValue=i}}return!0},config:{hiddenFooterBtns:["Clear"],onUpdateAlertStatus:async e=>{const t=s.find(e,{label:"Weight"}),i=s.find(e,{label:"Height"});if(!t||!i)return;const a=parseFloat(t.value),n=parseFloat(i.value);if(a<=0||n<=0)return{label:"BMI",value:"N/A",color:"",status:""};const l=await p.getBMI(a,n,this.gender,this.age);return{label:"BMI",value:l.index,color:l.color,status:l.result}},onChangeOption:e=>{if(!e.value&&e.other.required)throw`Value for ${e.label} is required`;if(e.value){const t=this.vitals.validator(e);if(t&&t.length)throw t}}},options:()=>this.getOptions()}]}}});e("default",v(t,[["render",function(e,t,i,a,s,n){const l=b("his-standard-form");return H(),f(l,{fields:e.fields,activeField:e.activeField,onOnskip:t[0]||(t[0]=t=>e.activeField=""),onFinishAction:e.onFinish,skipSummary:!0,cancelDestinationPath:e.cancelDestination},null,8,["fields","activeField","onFinishAction","cancelDestinationPath"])}]]))}}}));
