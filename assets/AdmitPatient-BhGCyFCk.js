import{H as f}from"./HisStandardForm-BCjM4-bc.js";import{bQ as S,d as w,r as _,ad as b,ae as v,ax as r,W as s,aj as g,am as h,a as x,c as y,w as C,b as T,u as c,I as D}from"./index-CMZASHAR.js";import{u as P}from"./useEncounter-CsCeua2V.js";import"./isEmpty-DjKeGqZh.js";import"./encounter_guidelines-CJXpBOk4.js";import"./GuidelineEngine-D6V1_Znr.js";class A extends S{constructor(i,a){super(i,42,a)}}const B=w({__name:"AdmitPatient",setup(l){const i=_([]);let a;const{goToNextTask:u,patientDashboardUrl:d}=P((t,o)=>{a=new A(o,t),i.value.push(p())});async function m(t,o){const e=await Promise.all([o.internal_sections]);await a.createEncounter(),await a.saveObservationList(e),u()}function p(){return{id:"internal_sections",helpText:"Select Ward/internal section",type:b.TT_SELECT,validation:t=>v.required(t),computedValue:t=>a.buildValueText("Admit to ward",t.label),options:()=>r.getInternalSections(),config:{showKeyboard:!0,footerBtns:[{name:"Add Section",slot:"end",color:"success",onClick:async(t,o,e)=>{if(typeof e.filter!="string"||e.filter.length<3)return s("Please enter a valid section name");if(e.filtered.some(n=>n.label.toLowerCase()===e.filter.toLowerCase()))return s("Section already existing");if(await g("Do you want to add internal section?")){const n=await r.createInternalSection(e.filter.toUpperCase());n?(e.filter=n.name,e.listData=[{label:n.name,value:n.id},...e.listData]):h("Unable to add ".concat(e.filter))}}}]}}}return(t,o)=>(x(),y(c(D),null,{default:C(()=>[T(f,{cancelDestinationPath:c(d),fields:i.value,onFinishAction:m,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{B as default};
