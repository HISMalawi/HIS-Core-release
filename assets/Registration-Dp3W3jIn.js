import{H as c}from"./HisStandardForm-BOy0NDXg.js";import{_ as p}from"./EncounterMixin.vue_vue_type_script_lang-CKR1fUiN.js";import{bI as u,d as v,M as s,ah as h,dr as f,ab as a,ac as n,bQ as _,cY as r,bP as m,a8 as g,ad as T,u as b,v as y}from"./index-BXYGQb-P.js";import"./encounter_guidelines-BPEdCHLc.js";import"./GuidelineEngine-D6V1_Znr.js";class N extends u{constructor(t,i){super(t,104,i)}}const S=v({components:{HisStandardForm:c},mixins:[p],data:()=>({registrationService:{}}),watch:{ready:{async handler(e){e&&(this.registrationService=new N(this.patient.getID(),this.providerID),this.fields=this.getFields())},immediate:!0,deep:!0}},methods:{async onSubmit(e,t){if(await this.asignNID(e),!await this.registrationService.createEncounter())return s("Unable to create registration encounter");const o=await this.resolveObs({...t});if(!await this.registrationService.saveObservationList(o))return s("Unable to save observations");this.nextTask()},async asignNID(e){const t=e.national_id_available,i=e.national_id;t&&t.value==="Yes"&&await this.patient.updateMWNationalId(i.value)},async mwIdExists(e){return e?(await h.findByOtherID(f,e)).length>0:!1},getFields(){return[{id:"visit_type",helpText:"Type of visit",type:a.TT_SELECT,validation:e=>n.required(e),computedValue:e=>({obs:this.registrationService.buildValueCoded("Type of visit",e.value)}),options:()=>[{label:"New",value:"New patient"},{label:"Referral",value:"Referral"},{label:"Re-visiting",value:"Re-visiting"}]},{id:"referring_facility_name",helpText:"Referred from",type:a.TT_SELECT,validation:e=>n.required(e),computedValue:({label:e})=>({obs:this.registrationService.buildValueText("Referred from",e)}),condition:e=>e.visit_type.value==="Referral",options:(e,t="")=>_(t),config:{showKeyboard:!0,isFilterDataViaApi:!0}},{id:"national_id_available",helpText:"National ID Available",type:a.TT_SELECT,validation:e=>n.required(e),condition:()=>{var e,t;return r((t=(e=this.patient)==null?void 0:e.patient)==null?void 0:t.date_created)!=r(this.registrationService.date)&&this.patient.getMWNationalID()==="Unknown"},options:()=>this.yesNoUnknownOptions(),appearInSummary:()=>!1},{id:"national_id",helpText:"Enter National ID",type:a.TT_TEXT,validation:e=>n.isMWNationalID(e),condition:e=>e.national_id_available.value==="Yes",beforeNext:async e=>e.value&&await this.mwIdExists(e.value.toString())?(s("National ID already exists"),!1):!0,summaryMapValue:({value:e})=>({value:e,label:"National ID"}),config:{casing:"uppercase",customKeyboard:[m,[["Delete"]]]}},{id:"patient_pregnant",helpText:"Patient pregnant",type:a.TT_SELECT,validation:e=>n.required(e),computedValue:({value:e})=>({obs:this.registrationService.buildValueCoded("PATIENT PREGNANT",e)}),condition:()=>this.patient.isChildBearing(),options:()=>this.yesNoUnknownOptions()}]}}});function I(e,t,i,o,l,D){const d=T("his-standard-form");return b(),y(d,{cancelDestinationPath:e.cancelDestination,fields:e.fields,onFinishAction:e.onSubmit},null,8,["cancelDestinationPath","fields","onFinishAction"])}const C=g(S,[["render",I]]);export{C as default};
