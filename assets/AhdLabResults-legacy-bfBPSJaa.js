System.register(["./index-legacy-B5_bWIZW.js","./patient_lab_result_service-legacy-BPKmYNZ5.js","./lab-legacy-BrUexagE.js","./EncounterMixin.vue_vue_type_script_lang-legacy-3qg1ag9R.js","./HisStandardForm-legacy-Bk_2V3lo.js","./lab_order_service-legacy-BOcZIoyW.js","./encounter_guidelines-legacy-SSGo1c3B.js","./GuidelineEngine-legacy-KsvQuFdF.js"],(function(e,t){"use strict";var i,s,a,r,l,n,o,u,d,c,v,h,p,m,g,T;return{setters:[e=>{i=e.d,s=e.F,a=e.V,r=e.b3,l=e.b9,n=e.cO,o=e.bg,u=e.H,d=e._,c=e.r,v=e.o,h=e.c},e=>{p=e.P},e=>{m=e.c},e=>{g=e._},e=>{T=e.H},null,null,null],execute:function(){const t=i({mixins:[g],components:{HisStandardForm:T},data:()=>({fields:[],service:{},availableTests:{}}),watch:{ready:{async handler(e){e&&(this.availableTests={"Urine Lam":this.mapStrToOptions(["Positive","Negative"]),GeneXpert:this.mapStrToOptions(["Positive","Negative"]),"Culture & Sensitivity":this.mapStrToOptions(["Positive","Negative"]),"TB Microscopic Exam":this.mapStrToOptions(["Positive","Negative"]),FASH:this.mapStrToOptions(["Positive","Negative"]),"CSF CrAg":this.mapStrToOptions(["Positive","Negative"]),"Serum Crag":this.mapStrToOptions(["Positive","Negative"]),Biopsy:this.mapStrToOptions(["Positive","Negative"])},this.service=new p(this.patientID),this.fields=this.getFields())},immediate:!0}},methods:{async onFinish(e,t){await this.service.createEncounter();const i=await Promise.all(this.resolveData(t,"obs"));i.length&&await this.service.saveObservationList(i);const s=this.resolveData(t,"orders");s.length&&await m(this.patientID,this.providerID,s);const a=(t?.results?.measures||[]).map((e=>(this.service.setTestID(e.testID),this.service.setResultDate(e.resultDate),this.service.createLabResult([e.measure]))));await Promise.all(a),this.nextTask()},getResultFieldValue:(e,t)=>e.results.reduce(((e,t)=>(e[t.label]={},t.other.fields.forEach((i=>e[t.label][i.label]=i.value)),e)),{})[t],recentOrderResultsField(){let e=[];return{id:"results",helpText:"Recent Orders",type:s.TT_INPUT_ARRAY,init:async()=>{const t=(e,t)=>[{label:"Accession #",value:e.accession_number,clearable:!1,other:{usefontBold:!0}},{label:"Test name",clearable:!1,value:t.name},{label:"Result date",value:"",valuable:!0,other:{onclick:t=>n({id:"result_date",helpText:`Result date for ${e.accession_number}`,type:s.TT_FULL_DATE,validation:t=>a.validateSeries([()=>a.required(t),()=>{const i=new Date(t.value),s=new Date(o.getSessionDate()),a=new Date(u.toStandardHisFormat(e.order_date));if(i>s||i<a)return["Entered date is out of range"]}])},(e=>t.value=e.value))}},{label:"Result",value:"",valuable:!0,other:{onclick:i=>n({id:"result",helpText:`Result for ${e.accession_number}`,type:s.TT_SELECT,validation:e=>a.required(e),options:()=>this.availableTests[t.name]},(e=>i.value=e.value))}}];return e=(await this.service.getTestsWithoutResults()).reduce(((e,i)=>(i.tests.forEach((s=>{Object.keys(this.availableTests).includes(s.name)&&!s.result&&e.push({label:s.name,value:"",other:{order:i,test_id:s.id,test_concept:s.concept_id,fields:t(i,s)}})})),e)),[]),!0},computedValue:e=>({measures:e.map((e=>{const t=e.other.fields.reduce(((e,t)=>({...e,[t.label]:t.value})),{});if(t.Result)return{testID:e.other.test_id,resultDate:t["Result date"],measure:{indicator:{concept_id:e.other.test_concept},value:t.Result,value_type:"text",value_modifier:"="}}})).filter((e=>e))}),validation:e=>{const t=e.map((e=>e.other.fields));return t.some((e=>{const t=e.filter((e=>""!=e.value)).length;return t>0&&t<2}))?["Some rows have incomplete data!"]:t.every((e=>e.some((e=>""===e.value))))?["All can't be Empty"]:null},options:()=>e}},orderCsfCragField(){return{id:"order_csf_crag",helpText:"CSF CrAg test required",type:s.TT_HIS_LAB_ORDER_INPUT,validation:e=>a.required(e),computedValue:e=>({orders:e.map((e=>e.other))}),options:()=>this.mapStrToOptions(["CSF CrAg"]),condition:e=>"Positive"===this.getResultFieldValue(e,"Serum Crag")?.Result}},cmTreatmentStartDate(){return{id:"cm_start_date",helpText:"CM treatment start date",type:s.TT_FULL_DATE,validation:(e,t)=>a.validateSeries([()=>a.required(e),()=>{const i=new Date(e.value),s=new Date(this.service.date),a=new Date(this.getResultFieldValue(t,"CSF CrAg")["Result date"]);if(i<s&&i<a)return["Date is not in range"]}]),computedValue:(e,t)=>({obs:[this.service.buildValueDate("CM treatment start date",`${e.value}`),...(()=>"Positive"===this.getResultFieldValue(t,"CSF CrAg")?.Result?[this.service.buildValueCoded("Cryptococcal Meningitis status","Positive")]:[])()]}),condition:e=>/positive|negative/i.test(`${this.getResultFieldValue(e,"CSF CrAg")?.Result}`)}},cmPreventiveDurationField(){return{id:"cm_preventive_duration",helpText:"CM preventive treatment duration",type:s.TT_AGE_INPUT,validation:e=>a.required(e),computedValue:e=>{const t=r(this.service.date).subtract(e.other.value,e.other.unit).format(l);return{obs:this.service.buildValueDate("CM treatment duration",t)}},condition:e=>"Negative"===this.getResultFieldValue(e,"CSF CrAg").Result}},resultsAvailableTodayField(){return{id:"results_available_today",helpText:"Will results be available today?",type:s.TT_SELECT,requireNext:!1,computedValue:e=>({obs:this.service.buildValueCoded("CSF results available today",e.value)}),options:()=>this.yesNoOptions(),validation:e=>a.required(e),condition:e=>e.order_csf_crag.length>0}},getFields(){return[this.recentOrderResultsField(),this.orderCsfCragField(),this.cmTreatmentStartDate(),this.cmPreventiveDurationField(),this.resultsAvailableTodayField()]}}});e("default",d(t,[["render",function(e,t,i,s,a,r){const l=c("his-standard-form");return v(),h(l,{fields:e.fields,skipSummary:!0,onFinishAction:e.onFinish,cancelDestinationPath:e.cancelDestination},null,8,["fields","onFinishAction","cancelDestinationPath"])}]]))}}}));
