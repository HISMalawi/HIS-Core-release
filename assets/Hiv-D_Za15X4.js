import{d as A,K as V,bg as N,dj as f,F as o,V as i,o as R,c as b,w as I,b as h,cu as u,I as O}from"./index-BRM9VIxF.js";import{H as D}from"./HisStandardForm-IKQjpnfg.js";import{u as F}from"./useEncounter-BCD_2aPy.js";import{g as t}from"./util-CyjuS_4X.js";import{r as x}from"./commons-6n-XULSz.js";import"./isEmpty-voE6vqu8.js";import"./encounter_guidelines-Codu4SxN.js";import"./GuidelineEngine-D6V1_Znr.js";const W=A({__name:"Hiv",setup(B){const n=V([]),a=new N(-1,f.UPDATE_HIV_STATUS),{goToNextTask:d,patientDashboardUrl:s}=F((r,l,c)=>{a.patientID=l,a.providerID=r;const _=()=>({id:"hivStatus",helpText:"HIV Status",type:o.TT_SELECT,requireNext:!1,validation:e=>i.required(e),computedValue:e=>e.value==="NOT_DONE"?{concept_id:t("HIV_TEST_DONE_TODAY"),value_coded:t("NO_ANSWER"),obs_datetime:a.date}:{concept_id:t("HIV_STATUS"),value_coded:t("".concat(e.value)),obs_datetime:a.date},options:()=>[{value:"POSITIVE",label:"Positive"},{value:"NEGATIVE",label:"Negative"},{value:"NOT_DONE",label:"Not Tested"}]}),p=()=>({id:"timeOfHIVTest",helpText:"Time of HIV test",type:o.TT_SELECT,requireNext:!1,validation:e=>i.required(e),computedValue:e=>({concept_id:t("TIME_OF_HIV_TEST"),value_coded:t("".concat(e.value)),obs_datetime:a.date}),condition:e=>e.hivStatus.value==="POSITIVE"||e.hivStatus.value==="NEGATIVE",options:()=>[{value:"HIV_BEFORE_TB",label:"Before TB Registration"},{value:"HIV_AFTER_TB",label:"After TB Registration"}]}),S=()=>({id:"artStatus",helpText:"ART Started",type:o.TT_SELECT,requireNext:!1,validation:e=>i.required(e),condition:e=>e.hivStatus.value==="POSITIVE",computedValue:e=>({concept_id:t("ON_ART"),value_coded:t("".concat(e.value)),obs_datetime:a.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}]}),v=()=>({id:"arvStatus",helpText:"ARV Status",type:o.TT_SELECT,requireNext:!1,validation:e=>i.required(e),condition:e=>e.artStatus.value==="YES_ANSWER",computedValue:e=>({concept_id:t("ARV_STATUS"),value_coded:t("".concat(e.value)),obs_datetime:a.date}),options:()=>[{value:"ARV_BEFORE_TB",label:"Started ARV before TB Treatment"},{value:"ARV_WHILE_TB",label:"Started ARV while on TB Treatment"},{value:"ARV_AFTER_DISCHARGE",label:"ARV not started by the time when discharged from TB treatment"}]}),E=()=>({id:"cptStatus",helpText:"Started CPT",type:o.TT_SELECT,requireNext:!1,validation:e=>i.required(e),condition:e=>e.artStatus.value==="YES_ANSWER",computedValue:e=>({concept_id:t("ON_CPT"),value_coded:t("".concat(e.value)),obs_datetime:a.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}]}),m=()=>({id:"cptStartDate",helpText:"CPT Start Date",type:o.TT_FULL_DATE,validation:e=>i.validateSeries([()=>i.required(e),()=>i.dateRangeOf(e,"".concat(c.getBirthdate()),a.date)]),computedValue:e=>({concept_id:t("CPT_START_DATE"),[/unknown/i.test("".concat(e.value))?"value_text":"value_datetime"]:e.value,obs_datetime:a.date}),condition:e=>e.cptStatus.value==="YES_ANSWER",config:{allowUnknown:!0}});n.value=[_(),p(),S(),v(),E(),m()]});async function T(r,l){await a.createEncounter(),await a.saveObservationList(await x(l)),d()}return(r,l)=>(R(),b(u(O),null,{default:I(()=>[h(D,{cancelDestinationPath:u(s),onFinishAction:T,fields:n.value,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{W as default};
