import{d as v,F as l,V as n,b3 as p,b9 as m,cO as d,bg as h,H as T,_,r as f,o as b,c as g}from"./index-DsVZSn5I.js";import{P as D}from"./patient_lab_result_service-DFzvcvPl.js";import{c as F}from"./lab-BpTRGhMz.js";import{_ as S}from"./EncounterMixin.vue_vue_type_script_lang-C0K9gJxk.js";import{H as C}from"./HisStandardForm-CBASeHGe.js";import"./lab_order_service-Uc0zcQAs.js";import"./encounter_guidelines-CYP5Ifi5.js";import"./GuidelineEngine-D6V1_Znr.js";const R=v({mixins:[S],components:{HisStandardForm:C},data:()=>({fields:[],service:{},availableTests:{}}),watch:{ready:{async handler(e){e&&(this.availableTests={"Urine Lam":this.mapStrToOptions(["Positive","Negative"]),GeneXpert:this.mapStrToOptions(["Positive","Negative"]),"Culture & Sensitivity":this.mapStrToOptions(["Positive","Negative"]),"TB Microscopic Exam":this.mapStrToOptions(["Positive","Negative"]),FASH:this.mapStrToOptions(["Positive","Negative"]),"CSF CrAg":this.mapStrToOptions(["Positive","Negative"]),"Serum Crag":this.mapStrToOptions(["Positive","Negative"]),Biopsy:this.mapStrToOptions(["Positive","Negative"])},this.service=new D(this.patientID),this.fields=this.getFields())},immediate:!0}},methods:{async onFinish(e,t){var r;await this.service.createEncounter();const s=await Promise.all(this.resolveData(t,"obs"));s.length&&await this.service.saveObservationList(s);const i=this.resolveData(t,"orders");i.length&&await F(this.patientID,this.providerID,i);const a=(((r=t==null?void 0:t.results)==null?void 0:r.measures)||[]).map(o=>(this.service.setTestID(o.testID),this.service.setResultDate(o.resultDate),this.service.createLabResult([o.measure])));await Promise.all(a),this.nextTask()},getResultFieldValue(e,t){return e.results.reduce((s,i)=>(s[i.label]={},i.other.fields.forEach(a=>s[i.label][a.label]=a.value),s),{})[t]},recentOrderResultsField(){let e=[];return{id:"results",helpText:"Recent Orders",type:l.TT_INPUT_ARRAY,init:async()=>{const t=(s,i)=>[{label:"Accession #",value:s.accession_number,clearable:!1,other:{usefontBold:!0}},{label:"Test name",clearable:!1,value:i.name},{label:"Result date",value:"",valuable:!0,other:{onclick:a=>d({id:"result_date",helpText:"Result date for ".concat(s.accession_number),type:l.TT_FULL_DATE,validation:r=>n.validateSeries([()=>n.required(r),()=>{const o=new Date(r.value),u=new Date(h.getSessionDate()),c=new Date(T.toStandardHisFormat(s.order_date));if(o>u||o<c)return["Entered date is out of range"]}])},r=>a.value=r.value)}},{label:"Result",value:"",valuable:!0,other:{onclick:a=>d({id:"result",helpText:"Result for ".concat(s.accession_number),type:l.TT_SELECT,validation:r=>n.required(r),options:()=>this.availableTests[i.name]},r=>a.value=r.value)}}];return e=(await this.service.getTestsWithoutResults()).reduce((s,i)=>(i.tests.forEach(a=>{Object.keys(this.availableTests).includes(a.name)&&!a.result&&s.push({label:a.name,value:"",other:{order:i,test_id:a.id,test_concept:a.concept_id,fields:t(i,a)}})}),s),[]),!0},computedValue:t=>({measures:t.map(i=>{const a=i.other.fields.reduce((r,o)=>({...r,[o.label]:o.value}),{});if(a.Result)return{testID:i.other.test_id,resultDate:a["Result date"],measure:{indicator:{concept_id:i.other.test_concept},value:a.Result,value_type:"text",value_modifier:"="}}}).filter(i=>i)}),validation:t=>{const s=t.map(r=>r.other.fields);return s.some(r=>{const o=r.filter(u=>u.value!="").length;return o>0&&o<2})?["Some rows have incomplete data!"]:s.every(r=>r.some(o=>o.value===""))?["All can't be Empty"]:null},options:()=>e}},orderCsfCragField(){return{id:"order_csf_crag",helpText:"CSF CrAg test required",type:l.TT_HIS_LAB_ORDER_INPUT,validation:e=>n.required(e),computedValue:e=>({orders:e.map(t=>t.other)}),options:()=>this.mapStrToOptions(["CSF CrAg"]),condition:e=>{var t;return((t=this.getResultFieldValue(e,"Serum Crag"))==null?void 0:t.Result)==="Positive"}}},cmTreatmentStartDate(){return{id:"cm_start_date",helpText:"CM treatment start date",type:l.TT_FULL_DATE,validation:(e,t)=>n.validateSeries([()=>n.required(e),()=>{const s=new Date(e.value),i=new Date(this.service.date),a=new Date(this.getResultFieldValue(t,"CSF CrAg")["Result date"]);if(s<i&&s<a)return["Date is not in range"]}]),computedValue:(e,t)=>({obs:[this.service.buildValueDate("CM treatment start date","".concat(e.value)),...(()=>{var s;return((s=this.getResultFieldValue(t,"CSF CrAg"))==null?void 0:s.Result)==="Positive"?[this.service.buildValueCoded("Cryptococcal Meningitis status","Positive")]:[]})()]}),condition:e=>{var t;return/positive|negative/i.test("".concat((t=this.getResultFieldValue(e,"CSF CrAg"))==null?void 0:t.Result))}}},cmPreventiveDurationField(){return{id:"cm_preventive_duration",helpText:"CM preventive treatment duration",type:l.TT_AGE_INPUT,validation:e=>n.required(e),computedValue:e=>{const t=p(this.service.date).subtract(e.other.value,e.other.unit).format(m);return{obs:this.service.buildValueDate("CM treatment duration",t)}},condition:e=>this.getResultFieldValue(e,"CSF CrAg").Result==="Negative"}},resultsAvailableTodayField(){return{id:"results_available_today",helpText:"Will results be available today?",type:l.TT_SELECT,requireNext:!1,computedValue:e=>({obs:this.service.buildValueCoded("CSF results available today",e.value)}),options:()=>this.yesNoOptions(),validation:e=>n.required(e),condition:e=>e.order_csf_crag.length>0}},getFields(){return[this.recentOrderResultsField(),this.orderCsfCragField(),this.cmTreatmentStartDate(),this.cmPreventiveDurationField(),this.resultsAvailableTodayField()]}}});function y(e,t,s,i,a,r){const o=f("his-standard-form");return b(),g(o,{fields:e.fields,skipSummary:!0,onFinishAction:e.onFinish,cancelDestinationPath:e.cancelDestination},null,8,["fields","onFinishAction","cancelDestinationPath"])}const L=_(R,[["render",y]]);export{L as default};
