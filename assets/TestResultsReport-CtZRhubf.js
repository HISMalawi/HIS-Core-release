import{L as m}from"./lab_report_service-CXqkH4Wf.js";import{_ as g}from"./ReportMixin.vue_vue_type_script_lang-w4VtTENp.js";import{R as f}from"./TableReportTemplate-Bex2T2ri.js";import{d as T,L as t,F as d,cW as h,_ as v,r as R,o as b,c as _}from"./index-C6EjxQ0a.js";import"./HisStandardForm-CHL0RBXf.js";import"./ReportErrors-DibpB--Z.js";const y=T({mixins:[g],components:{ReportTemplate:f},data:()=>({title:"Lab test result(s)",rows:[],cohort:[],reportType:"",reportReady:!1,columns:[],patientLevelColumns:[[t.thTxt("ARV#"),t.thTxt("Gender"),t.thTxt("Birthdate"),t.thTxt("Ordered"),t.thTxt("Specimen"),t.thTxt("Test"),t.thTxt("Result"),t.thTxt("Released")]],disaggregatedColumns:[t.thTxt("Age group"),t.thTxt("Gender")]}),created(){this.report=new m,this.fields=this.getFormFields()},methods:{async onPeriod({type:s,tests:r}){this.reportReady=!0,this.rows=[],this.period=this.report.getDateIntervalPeriod(),this.reportType=s.value,this.reportType==="disaggregated"?this.setDisaggregatedRows(r):this.reportType==="patient_level"&&this.setPatientLevelRows(r)},getFormFields(){return[...this.getDateDurationFields(),{id:"tests",helpText:"Available test(s) results",type:d.TT_MULTIPLE_SELECT,options:async(s,r,e)=>{this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date);const o=await this.report.getLabResultsReport(),a=this.buildAvailableTests(o);return this.buildAvailableTestOptions(a)}},{id:"type",helpText:"Select report type",type:d.TT_SELECT,options:()=>[{label:"Disaggregated",value:"disaggregated"},{label:"Patient level",value:"patient_level"}]}]},buildAvailableTests(s){const r={};return this.sortByArvNumber(s).forEach(e=>{e.measures.forEach(o=>{o.name in r||(r[o.name]=[]),r[o.name].push({id:e.patient_id,arv:e.arv_number,gender:e.gender,ageGroup:e.age_group,birthdate:this.toDate(e.birthdate),ordered:this.toDate(e.order_date),specimen:e.test,test:o.name,result:"".concat(o.modifier," ").concat(o.value),released:this.toDate(e.result_date)})})}),r},buildAvailableTestOptions(s){const r=[];for(const e in s){const o=s[e];r.push({label:e,value:o.length,other:o})}return r},setDisaggregatedRows(s){const r=[],e=[];this.columns=[this.disaggregatedColumns.concat(s.map(o=>t.thTxt(o.label)))];for(const o in h){const a=h[o],l=[t.td(a),t.td("M")],i=[t.td(a),t.td("F")];s.forEach(({other:c})=>{const p=u=>c.filter(n=>n.gender===u&&n.ageGroup===a).map(n=>n.id);l.push(this.drill(p("M"))),i.push(this.drill(p("F")))}),r.push(l),e.push(i),this.rows=[...e,...r]}},setPatientLevelRows(s){this.columns=this.patientLevelColumns,s.forEach(({other:r})=>{r.forEach(e=>{this.rows.push([this.tdARV(e.arv),t.td(e.gender),t.tdDate(e.birthdate),t.tdDate(e.ordered),t.td(e.specimen),t.td(e.test),t.td(e.result),t.tdDate(e.released)])})})}}});function w(s,r,e,o,a,l){const i=R("report-template");return b(),_(i,{title:s.title,period:s.period,rows:s.rows,fields:s.fields,columns:s.columns,canExportCsv:!0,canExportPDf:!0,reportReady:s.reportReady,onReportConfiguration:s.onPeriod},null,8,["title","period","rows","fields","columns","reportReady","onReportConfiguration"])}const F=v(y,[["render",w]]);export{F as default};
