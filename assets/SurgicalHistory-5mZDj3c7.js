import{_ as l}from"./EncounterMixin.vue_vue_type_script_lang-6UF_ldRw.js";import{bI as d,bq as u,d as p,a5 as m,ab as h,ac as f,aK as o,a8 as _,ad as i,u as g,v as C,w as b,x as y}from"./index-LyP1z09P.js";import"./encounter_guidelines-6akTZ644.js";import"./GuidelineEngine-syyQoOzo.js";import"./HisStandardForm-DTr2fl7A.js";class a extends d{constructor(n,s){super(n,83,s)}static surgicalHistoryOptions(){return u.getConceptsByCategory("anc_surgical_history").sort((n,s)=>n.name>s.name?1:-1)}}const v=p({components:{IonPage:m},mixins:[l],data:()=>({formFields:[],service:{}}),watch:{ready:{handler(e){e&&(this.formFields=this.getFields())},immediate:!0}},methods:{async onFinish(e,n){const s=await this.resolveObs(n),t=new a(this.patientID,this.providerID);await t.createEncounter(),await t.saveObservationList(s),this.nextTask()},surgeryOptions(e){return[...a.surgicalHistoryOptions(),{name:"None"}].map(n=>e({label:n.name,value:"Yes",isChecked:!1}))},getFields(){return[{id:"history",helpText:"Previous Surgical Procedure(s) Done",type:h.TT_MULTIPLE_SELECT,validation:e=>f.required(e),onValueUpdate:(e,n)=>{if(n.label==="None"&&n.isChecked)return e.map(s=>(s.label!="None"&&(s.isChecked=!1),s));if(n.label!="None"&&n.isChecked){const s=o.findIndex(e,{label:"None"});e[s].isChecked=!1}return e},computedValue:e=>o.find(e,{label:"None"})?a.buildValueText("Procedure done","None"):e.map(n=>a.buildValueCoded(n.label,"".concat(n.value))),options:()=>this.surgeryOptions(e=>e),config:{footerBtns:[{name:"None",slot:"end",onClickComponentEvents:{refreshOptions:()=>this.surgeryOptions(e=>(e.isChecked=e.label==="None",e))},onClick:()=>"None"}]}}]}}});function k(e,n,s,t,N,x){const r=i("his-standard-form"),c=i("ion-page");return g(),C(c,null,{default:b(()=>[y(r,{fields:e.formFields,skipSummary:!0,onFinishAction:e.onFinish,cancelDestinationPath:e.cancelDestination},null,8,["fields","onFinishAction","cancelDestinationPath"])]),_:1})}const E=_(v,[["render",k]]);export{E as default};
