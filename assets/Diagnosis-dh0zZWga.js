import{H as l}from"./HisStandardForm-DASCGMaQ.js";import{_ as c}from"./EncounterMixin.vue_vue_type_script_lang-WQYZM_3x.js";import{P as s}from"./patient_diagnosis_service-Cu4d0qcD.js";import{b5 as d,d as p,aU as m,S as u,ab as o,n as h,V as g,_ as f,r as _,o as v,c as S}from"./index-BCfs_J-V.js";import{F as n}from"./dynamic-import-helper-Bsjrd6Ro.js";import"./TouchScreenForm-BEQyavf9.js";import"./ToolbarMediumCard-DFqt8bLl.js";import"./Transformers-BPPLlH12.js";import"./ViewPort-CUJ1kut7.js";import"./encounter_guidelines-CdLGhSXd.js";import"./GuidelineEngine-D6V1_Znr.js";class y extends d{constructor(i,a){super(i,105,a)}}const T=p({components:{HisStandardForm:l},mixins:[c],data:()=>({activeField:"",notesService:{},diagnosisService:{},malariaTestResult:"No"}),watch:{ready:{async handler(e){e&&(this.malariaTestResult=await m.getLatestMalariaTestResult(this.patientID),this.notesService=new y(this.patientID,this.providerID),this.diagnosisService=new s(this.patientID,this.providerID),this.fields=this.getFields())},immediate:!0,deep:!0}},methods:{async onSubmit(e,i){await this.diagnosisService.createEncounter();const a=await this.resolveObs({...i,obs_datetime:u.getSessionDate()},"diagnosis");await this.diagnosisService.saveObservationList(a);const t=await this.resolveObs({...i},"notes");o.isEmpty(t)||(await this.notesService.createEncounter(),await this.notesService.saveObservationList(t)),this.nextTask()},mapListToOptions(e){return o.isEmpty(e)?[]:e.map(i=>({label:i.name,value:i.name,other:i.concept_id,isChecked:!1})).sort((i,a)=>i.label<a.label?-1:i.label>a.label?1:0)},async checkMalariaResult(e){return e.find(a=>a.label==="Malaria")?this.malariaTestResult==="Positive"?!0:await h("Patient has ".concat(this.malariaTestResult," malaria test result. Do you want to continue?")):!0},getFields(){return[{id:"primary_diagnosis",helpText:"Select primary diagnosis",type:n.TT_INFINITE_SCROLL_MULTIPLE_SELECT,validation:e=>g.required(e),options:async(e,i="",a=1,t=10)=>this.mapListToOptions(await s.getDiagnosis(i,a,t)),beforeNext:async e=>await this.checkMalariaResult(e),computedValue:e=>({tag:"diagnosis",obs:e.map(({other:i})=>this.diagnosisService.buildValueCodedFromConceptId("Primary diagnosis",i))}),summaryMapValue:({value:e})=>({value:e,label:"Primary diagnosis"}),config:{isFilterDataViaApi:!0,showKeyboard:!0}},{id:"secondary_diagnosis",helpText:"Select secondary diagnosis",type:n.TT_INFINITE_SCROLL_MULTIPLE_SELECT,options:async(e,i="",a=1,t=10)=>this.mapListToOptions(await s.getDiagnosis(i,a,t)),beforeNext:async e=>await this.checkMalariaResult(e),computedValue:e=>!o.isEmpty(e)&&{tag:"diagnosis",obs:e.map(({other:i})=>this.diagnosisService.buildValueCodedFromConceptId("Secondary diagnosis",i))},summaryMapValue:({value:e})=>({value:e,label:"Secondary diagnosis"}),config:{showKeyboard:!0,isFilterDataViaApi:!0}},{id:"clinical_notes",helpText:"Clinical notes",type:n.TT_TEXT,computedValue:e=>e&&{tag:"notes",obs:this.notesService.buildValueText("Clinical notes construct",e.value)}}]}}});function b(e,i,a,t,w,D){const r=_("his-standard-form");return v(),S(r,{cancelDestinationPath:e.cancelDestination,fields:e.fields,onFinishAction:e.onSubmit},null,8,["cancelDestinationPath","fields","onFinishAction"])}const N=f(T,[["render",b]]);export{N as default};
