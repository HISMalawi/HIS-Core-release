System.register(["./HisStandardForm-legacy-utPdp3kG.js","./EncounterMixin.vue_vue_type_script_lang-legacy-B46L6Viz.js","./patient_complaints_service-legacy-C_ETeVV6.js","./index-legacy-DR3-kJVE.js","./patient_radiology_service-legacy-D0jHAPDj.js","./HisRadiologyPicker-legacy-BsjPcGXk.js","./encounter_guidelines-legacy-DY_ggaXO.js","./GuidelineEngine-legacy-KsvQuFdF.js","./SelectMixin-legacy-DWv5bq0B.js","./BaseTextInput-legacy-BHj6DnSn.js","./FieldMixin.vue_vue_type_script_lang-legacy-DLOmHDkL.js"],(function(e,t){"use strict";var i,a,n,s,l,o,r,d,c,h,u,p,m,g,y,b,v,_,S,C,f,w,O,T,E,I,P,x,R,D,F,A,B,V,L;return{setters:[e=>{i=e.H},e=>{a=e._},e=>{n=e.P},e=>{s=e.d,l=e.a8,o=e._,r=e.X,d=e.Z,c=e.Y,h=e.a9,u=e.dA,p=e.aN,m=e.at,g=e.aa,y=e.af,b=e.a,v=e.E,_=e.b,S=e.w,C=e.C,f=e.J,w=e.I,O=e.bt,T=e.W,E=e.bl,I=e.H,P=e.ad,x=e.ae,R=e.bu,D=e.av,F=e.ah,A=e.bL,B=e.c},e=>{V=e.P},e=>{L=e.default},null,null,null,null,null],execute:function(){var t=document.createElement("style");t.textContent=".his-table tr{height:50px}\n/*$vite$:1*/",document.head.appendChild(t);const j=s({name:"Modal",components:{IonButton:l,IonContent:o,IonHeader:r,IonTitle:d,IonToolbar:c,IonFooter:h,HisRadiologyPicker:L},mixins:[a],data:()=>({radiologyService:{},isPacsEnabled:!1,emitedSelectedOptions:{}}),watch:{ready:{async handler(e){e&&(this.radiologyService=new V(this.patientID,this.providerID),this.isPacsEnabled=await u.isPACsEnabled())},immediate:!0,deep:!0}},methods:{async onValue(e){this.emitedSelectedOptions=e},async getSelected(){return this.emitedSelectedOptions.map((async e=>({...await this.radiologyService.buildValueCoded("Radiology Orders",e.other.parent),child:[await this.radiologyService.buildValueCodedFromConceptId(e.other.parent,e.other.concept_id)]})))},async onSubmit(){if(!p.isEmpty(this.emitedSelectedOptions)){this.closeModal();let t=await this.getSelected();t=await Promise.all(t),await this.radiologyService.createEncounter();const i=await this.radiologyService.obsObj(t),a=await this.radiologyService.saveObservationList(i);if(await this.radiologyService.printOrders(a,this.patient),this.isPacsEnabled)try{await this.radiologyService.submitToPacs(a,this.patient)}catch(e){console.log(e)}}},async closeModal(){await m.dismiss([])}}}),k=g(j,[["render",function(e,t,i,a,n,s){const l=y("ion-title"),o=y("ion-toolbar"),r=y("ion-header"),d=y("his-radiology-picker"),c=y("ion-content"),h=y("ion-button"),u=y("ion-footer");return b(),v(f,null,[_(r,null,{default:S((()=>[_(o,null,{default:S((()=>[_(l,{class:"his-lg-text"},{default:S((()=>t[2]||(t[2]=[C("Radiology Examination")]))),_:1})])),_:1})])),_:1}),_(c,{style:{overflow:"hidden",background:"grey",height:"70vh"}},{default:S((()=>[_(d,{onOnValue:e.onValue},null,8,["onOnValue"])])),_:1}),_(u,null,{default:S((()=>[_(o,null,{default:S((()=>[_(h,{onClick:t[0]||(t[0]=t=>e.onSubmit()),size:"large",slot:"end",disabled:0===e.emitedSelectedOptions.length},{default:S((()=>t[3]||(t[3]=[C(" Place orders ")]))),_:1},8,["disabled"]),_(h,{onClick:t[1]||(t[1]=t=>e.closeModal()),size:"large",slot:"start",color:"danger"},{default:S((()=>t[4]||(t[4]=[C(" Close ")]))),_:1})])),_:1})])),_:1})],64)}]]),M=s({components:{HisStandardForm:i,IonPage:w},mixins:[a],data:()=>({complaintsService:{},todaysDate:O.getSessionDate(),presentingComplaints:"",isPacsEnabled:!1,radiologyBtnName:"Radiology Order",hasTriageComplaints:!1,labOrderFieldContext:{},labOrders:[]}),watch:{ready:{async handler(e){e&&(this.complaintsService=new n(this.patientID,this.providerID),this.isPacsEnabled=await u.isPACsEnabled(),this.hasTriageComplaints=await this.getTriagePresentingComplaints(),this.fields=this.getFields())},immediate:!0,deep:!0}},methods:{async onSubmit(e,t){try{const e=await this.resolveObs(t,"complaints");await this.complaintsService.createEncounter(),await this.complaintsService.saveObservationList(e),this.nextTask()}catch(i){console.error(i),T("An error occurred while saving the complaints")}},async launchRadiologyOrderSelection(){const e=await m.create({component:k,backdropDismiss:!1,cssClass:"large-modal"});e.present(),await e.onDidDismiss()},async getTriagePresentingComplaints(){if(!((await this.complaintsService.fetchLatestTriageEncounter()).length>0))return!1;const e=(await E.getEncounters(this.patientID,this.todaysDate)).filter((function(e){return"TRIAGE PRESENTING COMPLAINTS"==e.type.name&&I.toStandardHisFormat(e.encounter_datetime)==O.getSessionDate()}));return e.length>0&&(this.presentingComplaints=e[0].observations,!0)},buildResults(){let e="",t=this.presentingComplaints.map((t=>{if(null!=t.obs_group_id)return[e,t.value_text];e=t.value_text}));return t=t.filter((e=>null!=e)),this.presentingComplaints=t,[{label:"",value:"",other:{columns:["Group","Presenting complaints"],rows:t}}]},getFields(){return[{id:"triage_complaints",helpText:"Triaging Complaints",condition:()=>this.hasTriageComplaints,type:P.TT_TABLE_VIEWER,options:()=>this.buildResults(),config:{hiddenFooterBtns:["Clear"]}},{id:"complaints",helpText:"Presenting Complaints",type:P.TT_COMPLAINTS_PICKER,validation:e=>x.required(e),computedValue:e=>({tag:"complaints",obs:e.filter((e=>!/other (specify)/i.test(e.label))).map((async e=>({...await this.complaintsService.buildValueCoded("Presenting complaint",e.other.parent),child:[await this.complaintsService.buildValueCodedFromConceptId(e.other.parent,e.other.concept_id)]})))})},{id:"other_complaints",helpText:"Other Complaints",type:P.TT_TEXT,condition:e=>e.complaints.some((e=>"Other (specify)"===e.label&&e.isChecked)),computedValue:async e=>({tag:"complaints",obs:{...await this.complaintsService.buildValueCoded("Presenting complaint","Other"),child:[await this.complaintsService.buildValueText("Other",e.label)]}})},{id:"lab_order",helpText:"Lab Orders",type:P.TT_LAB_ORDERS,onload:e=>this.labOrderFieldContext=e,init:async()=>(this.labOrders=R.formatLabs(await D.get("GET_LAB_ORDERS_WITH_GIVEN_RESULT_STATUS",{patientID:this.patientID})),!0),unload:async()=>{const e=this.labOrders.filter((e=>"No"===e.result_given));if(e.length&&await F("Result(s) Given to Client?")){const t=new A(this.patientID,-1,this.providerID),i=e.reduce(((e,i)=>[...e,...i.resultIds.map((async e=>(t.encounterID=i.encounter_id,t.saveObs(await t.buildObs("Result Given to Client",{value_coded:"Yes",obs_group_id:e})))))]),[]);await Promise.all(i)}},options:()=>[{label:"Lab orders",value:"order trail",other:{values:this.labOrders}}],config:{hiddenFooterBtns:[this.showRadiologyOdersBtn()],footerBtns:[{name:"Order",size:"large",slot:"end",color:"primary",visible:!0,onClick:async()=>{p.isEmpty(this.labOrderFieldContext)||await this.labOrderFieldContext.launchOrderSelection()}},{name:this.radiologyBtnName,size:"large",slot:"end",color:"primary",visible:!0,onClick:async()=>await this.launchRadiologyOrderSelection(),visibleOnStateChange:e=>1===e.index}]}},{id:"all_presenting_complaints",helpText:"Summary",condition:()=>this.presentingComplaints.length>0,type:P.TT_SUMMARY,options:e=>this.buildSummaryResults(e),config:{hiddenFooterBtns:["Clear"]}}]},showRadiologyOdersBtn(){return this.isPacsEnabled?"":this.radiologyBtnName},buildSummaryResults(e){const t=e.complaints.map((e=>({label:"OPD Complaints",value:e.label}))),i=this.presentingComplaints.map((e=>({label:"Triaging Complaints",value:e[1]})));return t.concat(i)}}});e("default",g(M,[["render",function(e,t,i,a,n,s){const l=y("his-standard-form"),o=y("ion-page");return b(),B(o,null,{default:S((()=>[_(l,{cancelDestinationPath:e.cancelDestination,fields:e.fields,onFinishAction:e.onSubmit,skipSummary:!0},null,8,["cancelDestinationPath","fields","onFinishAction"])])),_:1})}]]))}}}));
