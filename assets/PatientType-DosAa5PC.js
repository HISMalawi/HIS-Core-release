import{d as p,bb as a,t as r,U as c,F as l,V as s,_ as d,r as y,o as h,c as u}from"./index-C6EjxQ0a.js";import{H as T}from"./HisStandardForm-CHL0RBXf.js";import{_ as m}from"./EncounterMixin.vue_vue_type_script_lang-Btc3zcWc.js";import{P as _}from"./PersonFieldHelper-WAyvRtHn.js";import"./encounter_guidelines-C0mDoJuD.js";import"./GuidelineEngine-D6V1_Znr.js";import"./LocationFieldOptions-DprQ5-p8.js";import"./storage-CYNMGoMg.js";const F=p({mixins:[m],components:{HisStandardForm:T},data:()=>({patientType:{}}),watch:{ready:{async handler(e){e&&(this.patientType=new a(this.patientID,this.providerID),await this.patientType.loadPatientType(),this.fields=this.getFields())},immediate:!0}},methods:{async onFinish(e){var i,n;if(!await this.patientType.createEncounter())return r("Unable to create encounter");this.patientType.setLocationName((i=e==null?void 0:e.location)==null?void 0:i.label),this.patientType.setPatientType((n=e==null?void 0:e.patient_type)==null?void 0:n.value),await this.patientType.save(),c("Observations and encounter created!"),this.nextTask()},facilityLocationField(){const e=_.getFacilityLocationField();return e.condition=t=>["Emergency supply","External consultation"].includes(t.patient_type.value),e},getFields(){return[{id:"patient_type",helpText:"Current type: ".concat(this.patientType.getType()),type:l.TT_SELECT,validation:e=>s.required(e)||s.notTheSame(e.value,this.patientType.getType()),options:()=>a.getPatientTypes()},this.facilityLocationField()]}}});function f(e,t,i,n,P,g){const o=y("his-standard-form");return h(),u(o,{fields:e.fields,onFinishAction:e.onFinish,skipSummary:!0,cancelDestinationPath:e.cancelDestination},null,8,["fields","onFinishAction","cancelDestinationPath"])}const x=d(F,[["render",f]]);export{x as default};
