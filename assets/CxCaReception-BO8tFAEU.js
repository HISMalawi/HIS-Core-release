import{bW as l,d,r as f,an as m,ao as v,a as _,f as b,b as S,q as h,p as T}from"./index-qFt4YszW.js";import{H as x}from"./HisStandardForm-B3LOSMqB.js";import{u as y}from"./useEncounter-Bj5eamVf.js";import{m as g}from"./commons-B4jZtVaM.js";import"./isEmpty-1LErKKNT.js";import"./encounter_guidelines-CLmFwnI6.js";import"./GuidelineEngine-D6V1_Znr.js";class k extends l{constructor(e,n){super(e,184,n)}}const P=d({__name:"CxCaReception",setup(o){let e;const n=f([]),{patientDashboardUrl:r,goToNextTask:s}=y(async(t,a)=>{e=new k(a,t),n.value=c()});async function i(t){if(!await e.createEncounter())return h("Unable to create encounter");const u=t.reason_for_visit,p=await e.buildValueCoded("Reason for visit",u.value);await e.saveObs(p),T("Observations and encounter created!"),s()}function c(){return[{id:"reason_for_visit",helpText:"Reason for visit",type:v.TT_SELECT,validation:t=>m.required(t),options:()=>g(["Initial screening","Postponed treatment","One year subsequent check-up after treatment","Subsequent screening","Problem visit after treatment","Referral"])}]}return(t,a)=>(S(),_(x,{fields:n.value,onFinishAction:i,skipSummary:!0,cancelDestinationPath:b(r)},null,8,["fields","cancelDestinationPath"]))}});export{P as default};
