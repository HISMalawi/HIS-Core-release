import{d as N,r as S,bT as f,bY as b,ai as s,bp as A,aj as c,e3 as g,e0 as o,b$ as I,a as h,c as R,w as F,b as P,u as E,b0 as w,bC as x,e1 as y,f as C}from"./index-4ZhJu3VE.js";import{H as W}from"./HisStandardForm-K1lIrz3_.js";import{u as Y}from"./useEncounter-BL6Y94J5.js";import{r as B}from"./commons-D-SkGAiW.js";import"./isEmpty-Cw9u0tW9.js";import"./encounter_guidelines-DE8ypU-x.js";import"./GuidelineEngine-D6V1_Znr.js";const H=N({__name:"Reception",setup(D){const p=S([]),t=new f(-1,b.TB_RECEPTION),{goToNextTask:T,patientDashboardUrl:_}=Y((i,r,a)=>{t.patientID=r,t.providerID=i;const n=()=>{let e={};return{id:"treatForIpt",helpText:"Enroll in TPT program?",type:s.TT_SELECT,requireNext:!1,init:async()=>(e=await A.getProgramInformation(r),!0),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}],validation:d=>c.required(d),condition:()=>!e.tb_positive&&a.getAge()>=0&&a.getAge()<g}},l=()=>({id:"catchmentArea",helpText:"Patient living within catchment area?",type:s.TT_SELECT,requireNext:!1,Validation:e=>c.required(e),computedValue:e=>({concept_id:o("LIVES_NEAR"),value_coded:o("".concat(e.value)),obs_datetime:t.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}]}),u=()=>({id:"livesNearTB",helpText:"Patient living near a TB registration centre?",type:s.TT_SELECT,requireNext:!1,computedValue:e=>({concept_id:o("TRANSFERRED_OUT_EXTERN"),value_coded:o("".concat(e.value)),obs_datetime:t.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}],validation:e=>c.required(e),condition:e=>e.catchmentArea.value==="NO_ANSWER"}),v=()=>({id:"locationId",type:s.TT_SELECT,helpText:"Select TB Registration Centre:",computedValue:e=>({concept_id:o("FACILITY_NAME"),value_text:e.label,obs_datetime:t.date}),options:(e,d="")=>I(d),config:{showKeyboard:!0,isFilterDataViaApi:!0},validation:e=>c.required(e),condition:e=>e.livesNearTB.value==="YES_ANSWER",requireNext:!1});p.value=[n(),l(),u(),v()]});async function m(i,r){var n,l;if(((n=i.treatForIpt)==null?void 0:n.value)==="NO_ANSWER")return w.push(_.value);await t.createEncounter(),await t.saveObservationList(await B(r));const a=new x(t.patientID);a.setStateDate(t.date);try{await a.enrollProgram()}catch(u){console.warn("".concat(u))}((l=i.treatForIpt)==null?void 0:l.value)==="YES_ANSWER"&&a.setStateId(y.TPT),a.stateId!=-1&&await a.updateState(),T()}return(i,r)=>(h(),R(E(C),null,{default:F(()=>[P(W,{cancelDestinationPath:E(_),onFinishAction:m,fields:p.value,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{H as default};
