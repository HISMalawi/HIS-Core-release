System.register(["./index-legacy-Brqe4EI3.js","./HisStandardForm-legacy-CygYTnNn.js","./vitals_service-legacy-DSXd4zC5.js","./useEncounter-legacy-DcxtTJ-_.js","./isEmpty-legacy-Df1UeZdO.js","./_Set-legacy-WqaFnoIt.js","./_setToArray-legacy-B5rwerOj.js","./encounter_guidelines-legacy-CWBESXTS.js","./GuidelineEngine-legacy-KsvQuFdF.js"],(function(e,t){"use strict";var a,n,i,l,r,o,u,s,c,v,g,h,d;return{setters:[e=>{a=e.d,n=e.K,i=e.M,l=e.F,r=e.o,o=e.c,u=e.cz,s=e.ae,c=e.ah,v=e.n},e=>{g=e.H},e=>{h=e.V},e=>{d=e.u},null,null,null,null,null],execute:function(){e("default",a({__name:"AncVitals",setup(e){const t=n(0),a=n(-1),f=n(-1),b=n(-1),y=n([]);let m;const{patientDashboardUrl:p,goToNextTask:w}=d((async function(e,n,i){m=new h(n,e);const r=await h.getFirstObs(n,"Weight");f.value=parseFloat(`${r?.value_numeric??0}`),b.value=parseInt(`${r?.obs_id??-1}`),t.value=i.getAge(),a.value=await i.getRecentHeight(),y.value.push({id:"vitals",helpText:"Vitals entry",type:l.TT_VITALS_ENTRY,validation:S,options:()=>[$,P.value,A,H.value],config:{onUpdateAlertStatus:T,onChangeOption:W,hiddenFooterBtns:["Clear"]}})})),$={label:"Weight",value:"",other:{modifier:"KG",icon:"weight",required:!0}},A={label:"BP",value:"",other:{modifier:"mmHG",icon:"bp"}},H=i((()=>({label:"Age",value:t.value,other:{doNotSave:!0,modifier:"Years old",icon:"",visible:!1}}))),P=i((()=>{const e=a.value>0&&t.value>18;return{label:"Height",value:`${e?a.value:""}`,other:{modifier:"CM",icon:"height",recentHeight:a.value,visible:!e}}}));function S(e){const t=function(e){return e.filter((e=>""===e.value&&!0===e.other.required))}(e);if(t.length>0)return t.map((e=>[`${e.label} can not be empty`]));const a=function(e){return e.filter((e=>("Height"!==e.label||0!=e.other.required)&&""!==e.value&&"Age"!==e.label))}(e);return m.validateAll(a)}function T(e){const t=s.find(e,{label:"BP"});if(t&&""!=t.value){const[e,a]=`${t.value}`.split("/").map((e=>parseInt(e)));if(e>=140&&a>=90)return{status:"Client is at risk of pre-eclampsia, refer for urine protein test.",color:"brown"};if(e<120||e>140)return{status:"Systolic reading is out of normal range",color:"brown"};if(a<80||a>90)return{status:"Diastolic reading is out of normal range",color:"brown"};if(e>=130&&e<=139&&a>=80&&a<=89)return{status:"Prehypertension",color:"brown"}}return{status:"",color:""}}async function E(e){const t=e.value,a=t-f.value;if(100*(Math.abs(a)/f.value||1)>30){const e=`Use ${f.value} Kg`,n=`Use ${t} Kg`;if(await c("Abnormal Weight Change",`Previous Weight "${f.value} Kg". Current Weight "${t} Kg"`,`Weight Reading has been ${a>0?"increased":"decresed"} by more than 30%. Please SELECT the correct Weight.)`,[{name:e,slot:"start",color:"success"},{name:n,slot:"end",color:"danger"}])!==n||!b)return f.value;await v(`Do you want to void Weight observation for ${f.value}`)&&await h.voidObs(b.value)}return t}async function W(e){if(!e.value&&e.other.required)throw`Value for ${e.label} is required`;if(e.value){const t=m.validator(e);if(t&&t.length)throw t}"Weight"===e.label&&f.value>0&&(e.value=await E(e))}async function _(e){return(await Promise.all(e.filter((e=>!(e.other?.doNotSave||s.isEmpty(e.value)))).map((async e=>"BP"===e.label?async function(e){const[t,a]=e.split("/");return[await m.buildValueNumber("Systolic",parseInt(t)),await m.buildValueNumber("Diastolic",parseInt(a))]}(e.value):("Weight"===e.label&&f.value>0&&(e.value=await E(e)),m.buildValueNumber(e.label,e.value)))))).flat()}async function j({vitals:e}){if(!(await async function(e){const t=s.find(e,{label:"Height"});return t?.value>0||!(await v("Patient has no height reading. Do you want to proceed without recording height?",{header:"HEIGHT CONFIRMATION",confirmBtnLabel:"Enter Height",cancelBtnLabel:"Proceed"}))}(e)))return;await m.createEncounter();const t=await _(e);await m.saveObservationList(t),w()}return(e,t)=>(r(),o(g,{fields:y.value,onFinishAction:j,skipSummary:!0,cancelDestinationPath:u(p)},null,8,["fields","cancelDestinationPath"]))}}))}}}));
