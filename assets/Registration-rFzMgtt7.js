import{H as E}from"./HisStandardForm-DO3sZVdL.js";import{bk as I,d as A,K as D,F as n,V as o,t as l,bs as S,o as h,c as w,cD as R,T as x,P as V,c_ as F}from"./index-BFVcutZq.js";import{g as C}from"./LocationFieldOptions-C8xpWQA4.js";import{u as P}from"./useEncounter-D0sesEfx.js";import{y as u,r as L}from"./commons-CSbjPVvq.js";import"./storage-DBvOSj8j.js";import"./encounter_guidelines-fEzG7yyD.js";import"./GuidelineEngine-D6V1_Znr.js";class O extends I{constructor(a,i){super(a,104,i)}}const G=A({__name:"Registration",setup(c){let a,i;const s=D([]),{goToNextTask:d,patientDashboardUrl:p}=P((e,t,r)=>{i=r,a=new O(t,e),s.value=[_(),g(),b(),m(),y()]});async function f(e,t){if(await v(e),!await a.createEncounter())return l("Unable to create registration encounter");const N=await L({...t});if(!await a.saveObservationList(N))return l("Unable to save observations");d()}async function v(e){const t=e.national_id_available,r=e.national_id;t&&t.value==="Yes"&&(await i.updateMWNationalId(r.value),x.invalidate("ACTIVE_PATIENT"))}async function T(e){return e?(await V.findByOtherID(F,e)).length>0:!1}function _(){return{id:"visit_type",helpText:"Type of visit",type:n.TT_SELECT,validation:e=>o.required(e),computedValue:e=>({obs:a.buildValueCoded("Type of visit",e.value)}),options:()=>[{label:"New",value:"New patient"},{label:"Referral",value:"Referral"},{label:"Re-visiting",value:"Re-visiting"}]}}function g(){return{id:"referring_facility_name",helpText:"Referred from",type:n.TT_SELECT,validation:e=>o.required(e),computedValue:({label:e})=>({obs:a.buildValueText("Referred from",e)}),condition:e=>e.visit_type.value==="Referral",options:(e,t="")=>C(t),config:{showKeyboard:!0,isFilterDataViaApi:!0}}}function b(){return{id:"national_id_available",helpText:"National ID Available",type:n.TT_SELECT,validation:e=>o.required(e),condition:()=>i.getMWNationalID()==="Unknown",options:()=>u(),appearInSummary:()=>!1}}function m(){return{id:"national_id",helpText:"Enter National ID",type:n.TT_TEXT,validation:e=>o.isMWNationalID(e),condition:e=>e.national_id_available.value==="Yes",beforeNext:async e=>e.value&&await T(e.value.toString())?(l("National ID already exists"),!1):!0,summaryMapValue:({value:e})=>({value:e,label:"National ID"}),config:{casing:"uppercase",customKeyboard:[S,[["Delete"]]]}}}function y(){return{id:"patient_pregnant",helpText:"Patient pregnant",type:n.TT_SELECT,validation:e=>o.required(e),computedValue:({value:e})=>({obs:a.buildValueCoded("PATIENT PREGNANT",e)}),condition:()=>i.isChildBearing(),options:()=>u()}}return(e,t)=>(h(),w(E,{cancelDestinationPath:R(p),fields:s.value,onFinishAction:f},null,8,["cancelDestinationPath","fields"]))}});export{G as default};
