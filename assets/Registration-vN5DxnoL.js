import{H as d}from"./HisStandardForm-BCjM4-bc.js";import{_ as c}from"./EncounterMixin.vue_vue_type_script_lang-v2aYCq6R.js";import{bQ as u,d as v,W as s,al as h,dC as f,bn as g,ad as a,ae as n,bY as m,ci as o,bX as _,aa as b,af as T,a as y,c as I}from"./index-CMZASHAR.js";import"./encounter_guidelines-CJXpBOk4.js";import"./GuidelineEngine-D6V1_Znr.js";class N extends u{constructor(t,i){super(t,104,i)}}const S=v({components:{HisStandardForm:d},mixins:[c],data:()=>({registrationService:{}}),watch:{ready:{async handler(e){e&&(this.registrationService=new N(this.patient.getID(),this.providerID),this.fields=this.getFields())},immediate:!0,deep:!0}},methods:{async onSubmit(e,t){if(await this.asignNID(e),!await this.registrationService.createEncounter())return s("Unable to create registration encounter");const r=await this.resolveObs({...t});if(!await this.registrationService.saveObservationList(r))return s("Unable to save observations");this.nextTask()},async asignNID(e){const t=e.national_id_available,i=e.national_id;t&&t.value==="Yes"&&await this.patient.updateMWNationalId(i.value)},async mwIdExists(e){return e?(await h.findByOtherID(f,e)).length>0:!1},isANCClient(){return g.getSuspendedProgram()==="ANC"},getFields(){return[{id:"visit_type",helpText:"Type of visit",type:a.TT_SELECT,validation:e=>n.required(e),computedValue:e=>({obs:this.registrationService.buildValueCoded("Type of visit",e.value)}),options:()=>[{label:"New",value:"New patient"},{label:"Referral",value:"Referral"},{label:"Re-visiting",value:"Re-visiting"}]},{id:"referring_facility_name",helpText:"Referred from",type:a.TT_SELECT,validation:e=>n.required(e),computedValue:({label:e})=>({obs:this.registrationService.buildValueText("Referred from",e)}),condition:e=>e.visit_type.value==="Referral",options:(e,t="")=>m(t),config:{showKeyboard:!0,isFilterDataViaApi:!0}},{id:"national_id_available",helpText:"National ID Available",type:a.TT_SELECT,validation:e=>n.required(e),condition:()=>{var e,t;return o((t=(e=this.patient)==null?void 0:e.patient)==null?void 0:t.date_created)!=o(this.registrationService.date)&&this.patient.getMWNationalID()==="Unknown"},options:()=>this.yesNoUnknownOptions(),appearInSummary:()=>!1},{id:"national_id",helpText:"Enter National ID",type:a.TT_TEXT,validation:e=>n.isMWNationalID(e),condition:e=>e.national_id_available.value==="Yes",beforeNext:async e=>e.value&&await this.mwIdExists(e.value.toString())?(s("National ID already exists"),!1):!0,summaryMapValue:({value:e})=>({value:e,label:"National ID"}),config:{casing:"uppercase",customKeyboard:[_,[["Delete"]]]}},{id:"patient_pregnant",helpText:"Patient pregnant or breastfeeding?",type:a.TT_MULTIPLE_YES_NO,validation:e=>n.required(e),condition:()=>this.patient.isChildBearing(),computedValue:e=>({obs:e.map(t=>this.registrationService.buildValueCoded(t.other.concept,t.value))}),options:()=>{const e=[];return this.isANCClient()||e.push({label:"Is patient pregnant?",value:"",other:{values:this.yesNoUnknownOptions(),concept:"Is patient pregnant"}}),e.push({label:"Is patient breastfeeding?",value:"",other:{values:this.yesNoUnknownOptions(),concept:"Is patient breast feeding"}}),e}}]}}});function D(e,t,i,r,l,w){const p=T("his-standard-form");return y(),I(p,{cancelDestinationPath:e.cancelDestination,fields:e.fields,onFinishAction:e.onSubmit,"skip-summary":""},null,8,["cancelDestinationPath","fields","onFinishAction"])}const O=b(S,[["render",D]]);export{O as default};
