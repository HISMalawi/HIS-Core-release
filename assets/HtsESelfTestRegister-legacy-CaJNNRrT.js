System.register(["./index-legacy-CNrLGT3P.js","./PersonFieldHelper-legacy-BoBLQ8TI.js","./hts_items_given-legacy-Bl6xMErS.js","./testKits-legacy-DYvG61Vg.js","./HisStandardForm-legacy-OekRIZB_.js","./LocationFieldOptions-legacy-DJYLOgCp.js","./storage-legacy-uuFjVbAf.js"],(function(e,t){"use strict";var l,a,i,s,n,o,r,u,d,c,p,m,v,b,h,f,T,_,g,y,I,V,E,S,C,F;return{setters:[e=>{l=e.d,a=e.I,i=e.K,s=e.dF,n=e.F,o=e.H,r=e.ah,u=e.ao,d=e.aV,c=e.dG,p=e.ct,m=e.aW,v=e.bf,b=e.bg,h=e.t,f=e._,T=e.r,_=e.o,g=e.c,y=e.w,I=e.b},e=>{V=e.P},e=>{E=e.H},e=>{S=e.T,C=e.K},e=>{F=e.H},null,null],execute:function(){const t=l({components:{IonPage:a,HisStandardForm:F},setup(){const e=i([{id:"accesspoint_type",helpText:"Distribution point type",type:n.TT_SELECT,isRequired:()=>!0,finalComputedValue:e=>({tag:"reg",obs:t.buildValueCoded("HTS Access Type",e.value)}),options:()=>a(["Health Facility","Community"])},{id:"facility_access_points",helpText:"Health facility distribution point",type:n.TT_SELECT_GRID,isRequired:()=>!0,condition:e=>"Health Facility"===e.accesspoint_type.value,summaryMapValue:e=>e,finalComputedValue:e=>({tag:"reg",obs:t.buildValueText("Location where test took place",e.value.toString())}),config:{columnsPerRow:2},options:()=>[{label:"1 | VCT",value:"VCT"},{label:"2 | ANC",value:"ANC First Visit"},{label:"3 | Inpatient",value:"Inpatient"},{label:"4 | STI",value:"STI"},{label:"5 | PMTCT-Follow-up (ANC FUP, Mat, Post-nat, BF)",value:"PMTCT FUP"},{label:"6 | Index",value:"Index"},{label:"7 | Paediatric",value:"Paediatric"},{label:"8 | VMMC",value:"VMMC"},{label:"9 | Malnutrition",value:"Malnutrition"},{label:"10 | TB",value:"TB"},{label:"11 | OPD",value:"OPD"},{label:"12 | Other PITC (PrEP, dental e.t.c)",value:"Other"},{label:"18 | SNS (Social Network Strategies)",value:"SNS"}]},{id:"community_access_points",helpText:"Community distribution points",type:n.TT_SELECT,condition:e=>"Community"===e.accesspoint_type.value,isRequired:()=>!0,finalComputedValue:e=>({tag:"reg",obs:t.buildValueText("Location where test took place",`${e.value}`)}),options:()=>[{label:"13 | VCT",value:"VCT"},{label:"14 | Index",value:"Index"},{label:"15 | VMMC",value:"VMMC"},{label:"16 | Other",value:"Other"},{label:"17 | SNS",value:"SNS"},{label:"19 | Mobile",value:"Mobile"}]},{id:"gender",helpText:"Recipient's Sex",type:n.TT_SELECT,isRequired:()=>!0,finalComputedValue:e=>({person:e.value}),options:()=>[{label:"Female",value:"F"},{label:"Male",value:"M"}]},{id:"birthdate",helpText:"Recipient's age",type:n.TT_NUMBER,isRequired:()=>!0,validation:e=>{const t=parseInt(`${e.value}`);return/unknown/i.test(`${e.value}`)?null:t<=10||t>=125||isNaN(t)?["Invalid Age"]:null},finalComputedValue:e=>({person:{birthdate:o.estimateDateFromAge(e.value),birthdate_estimated:!0}})},{id:"pregnancy_status",helpText:"Pregnancy Status",type:n.TT_SELECT,isRequired:()=>!0,condition:e=>"F"===e.gender.value,finalComputedValue:e=>({tag:"reg",obs:t.buildValueCoded("Pregnancy status",e.value)}),options:()=>[{label:"Non-pregnant",value:"Not Pregnant / Breastfeeding"},{label:"Pregnant",value:"Pregnant woman"},{label:"Breastfeeding",value:"Breastfeeding"}]},{id:"last_hiv_result",helpText:"Recipient's Last HIV Test Results",type:n.TT_SELECT,isRequired:()=>!0,finalComputedValue:e=>({tag:"reg",obs:t.buildValueCoded("Previous HIV Test Results",e.value)}),options:()=>a(["Never Tested","Negative","Positive NOT on ART","Positive on ART","Inconclusive"])},{id:"last_time_hiv_tested",helpText:"Time since last HIV test",type:n.TT_AGE_INPUT,condition:e=>e.last_hiv_result.value&&"Never Tested"!=e.last_hiv_result.value,isRequired:()=>!0,validation:(e,t)=>parseInt(`${e.other.value}`)<=0&&!/day/i.test(e.other.timeUnit)?[`Enter ${e.other.timeUnit} greater than zero`]:"Days"===e.other.timeUnit&&parseInt(`${e.other.value}`)>90?[`Enter ${e.other.timeUnit} less than 90, use Weeks Instead`]:"Weeks"===e.other.timeUnit&&parseInt(`${e.other.value}`)>12?[`Enter ${e.other.timeUnit} less than 12, use Months Instead`]:"Months"===e.other.timeUnit&&parseInt(`${e.other.value}`)>24?[`Enter ${e.other.timeUnit} less than 24, use Years Instead`]:"Years"===e.other.timeUnit&&parseInt(`${e.other.value}`)>parseInt(t.birthdate.value)?[`${e.label} is greater than client's age of ${t.birthdate.value} Years`]:e.other.value.length>1&&"0"===e.other.value[0]||e.other.value.length>1&&"0"===e.other.value[0]?[`Value ${e.other.value} is invalid!`]:null,finalComputedValue:e=>({tag:"reg",obs:t.buildObs("Time of HIV test",{value_datetime:e.other.date,value_text:e.value})}),config:{excludeUnits:["Hours"]}},{id:"items_given_to_client",helpText:"Items given to the client",type:n.TT_ADHERENCE_INPUT,isRequired:()=>!0,summaryMapValue:e=>e,validation:e=>e.every((e=>""===e.value))?["Values cannot be empty"]:e.some((e=>/self-test/i.test(e.label)&&(!e.value||parseInt(`${e.value}`)<=0)))?["Please enter number of self kits to give client"]:e.some((e=>/self-test/i.test(e.label)&&parseInt(`${e.value}`)>3))?["Cannot distribute more than 3 Self-test kits. Please adjust the number accordingly"]:e.some((e=>"Male condoms"==e.label&&parseInt(`${e.value}`)>99))?["Cannot distribute more than 99 Male Condoms. Please adjust the number accordingly"]:e.some((e=>"Female condoms"==e.label&&parseInt(`${e.value}`)>99))?["Cannot distribute more than 99 Female Condoms. Please adjust the number accordingly"]:e.some((e=>/frs/i.test(e.label.toLowerCase())&&parseInt(`${e.value}`)>5))?["Cannot distribute more than 5 FRS. Please adjust the number accordingly"]:null,options:e=>r.isEmpty(e.items_given_to_client)?[{label:"Self-Test Kit",value:""},{label:"Male condoms",value:""},{label:"Female condoms",value:""},{label:"FRS",value:""}]:e.items_given_to_client,finalComputedValue:e=>({tag:"reg",obs:e.filter((e=>e.value)).map((e=>t.buildValueNumber(e.label,parseInt(`${e.value}`))))}),config:{noFloat:!0,titles:{label:"Item",value:"Quantity"}}},{id:"self_test_kits",helpText:"Self-test kit users",type:n.TT_INPUT_ARRAY,isRequired:()=>!0,condition:e=>e.items_given_to_client.some((e=>/self-test/i.test(e.label)&&parseInt(`${e.value}`)>0)),finalComputedValue:e=>({tag:"reg",obs:e.map((e=>e.other.fields)).map((async e=>{const[t,...l]=e.filter((e=>"function"==typeof e.other.obs)).map((e=>e.other.obs(e.value,e)));return{...await t,child:await Promise.all(l)}}))}),summaryMapValue:e=>e.other.fields.map((e=>{const t={...e};return"Age"===t.label&&t?.other?.estimate&&(t.value=`${t.value} (Estimated)`),t})),config:{columns:[{label:"End-User"},{label:"Sex"},{label:"Age"},{label:"Approach"},{label:"Result"}]},validation:e=>{const t=e.map((e=>e.other.fields));return t.some((e=>{const t=e.filter((e=>""!=e.value)).length;return t>0&&t<4}))?["Some rows have incomplete data!"]:t.some((e=>e.some((e=>""===e.value))))?["Some rows are missing data"]:null},options:e=>{const l=(e,t,l,a)=>{e.forEach((e=>{if("function"==typeof e?.other?.broadcastlistener){const i=e.other.broadcastlistener(t,l,a);i&&(e.value=i.value,e.disabled=i.disabled)}}))},a=f(e),i=(i=a)=>Array.from({length:i},(()=>({label:"item",value:"N/A",other:{fields:[{label:"User",value:"",other:{obs:e=>t.buildValueCoded("Self-test end user",e),onclick:async(t,a,i,s,n)=>{const o=n.filter(((e,t)=>t!=i)),r=[];if(!/Self/.test(JSON.stringify(o))){const t=e.last_hiv_result?.value;/positive/.test(t.toLowerCase())||r.push("Self")}v([...r,"Sexual partner","Caretaker for child","Other"],(e=>{l(a,"User",e,t.value),t.value=e}),{title:"Select End-User",preset:null!=t?t.value:"",size:"small-modal"})}}},{label:"Sex",value:"",other:{broadcastlistener:(t,l,a)=>{if("User"===t){if("Self"===l)return{value:e.gender.label,disabled:!0};if("Self"===a)return{value:"",disabled:!1}}},obs:e=>t.buildValueCoded("Gender of contact",e),onclick:e=>{v(["Female","Male"],(t=>e.value=t),{title:"Select sex",size:"small-modal",preset:null!=e?e.value:""})}}},{label:"Age",value:"",other:{broadcastlistener:(t,l)=>{if("User"===t)return"Self"===l?{value:`${e.birthdate.value}`,disabled:!0}:{value:"",disabled:!1}},obs:(e,l)=>{const a=parseInt(e);if(l?.other?.estimate)return t.buildNumericEstimate("Age of contact",a);{const e=o.estimateDateFromAge(a);return t.buildObs("Age of contact",{value_datetime:e,value_numeric:a})}},onclick:e=>{b(((t,l)=>{if(t&&parseInt(`${t}`)>=125)return e.value="",h("Age exceeds maximum human life expectancy of 124 years");e.value=t,e.other.estimate=l}),{title:"Age",preset:" ",toggleButton:"Age is estimated?",noFloat:!0,strictNumbers:!0})}}},{label:"Approach",value:"",other:{broadcastlistener:(e,t)=>{if("User"===e)return"Self"!=t?{value:"Un-assisted",disabled:!0}:{value:"",disabled:!1}},obs:e=>t.buildValueCoded("Self-test approach",e),onclick:(e,t)=>{v(["Directly-assisted","Un-assisted"],(a=>{l(t,"Approach",a,e.value),e.value=a}),{title:"Select approach",size:"small-modal",preset:null!=e?e.value:""})}}},{label:"Result",value:"N/A",other:{obs:e=>{if(e&&!/n\/a/i.test(`${e}`))return t.buildValueCoded("Test 1",e)},onclick:(e,t)=>{v(["Negative","Positive","N/A"],(a=>{l(t,"Result",a,e.value),e.value=a}),{title:"Directly-assisted HIV Result"})}}}]}})));return Array.isArray(e.self_test_kits)?a<e.self_test_kits.length?e.self_test_kits.slice(0,a):a>e.self_test_kits.length?[...e.self_test_kits,...i(a-e.self_test_kits.length)]:e.self_test_kits:i()}},function(){const{initKits:e,getLotNo:l,getExpiryDate:a}=S();return{id:"test_kit",helpText:"Kit information",type:n.TT_INPUT_ARRAY,config:{columns:[{label:"Kit Name"},{label:"Kit Lot No."},{label:"Kit Expiry Date"}]},init:async()=>(await e(),!0),isRequired:()=>!0,summaryMapValue:e=>e?.other?.fields,validation:e=>e.map((e=>e.other.fields)).some((e=>e.some((e=>""===e.value))))?["Some rows are missing data"]:null,condition:()=>!l(C.HIV_SELF_KIT),defaultOutput:e=>{if(f(e)>=1&&l(C.HIV_SELF_KIT))return Array.from({length:f(e)}).map((()=>({label:C.HIV_SELF_KIT,value:l(C.HIV_SELF_KIT),other:{fields:[{label:"Kit name",value:C.HIV_SELF_KIT,other:{obs:()=>t.buildValueText("Kit name",C.HIV_SELF_KIT)}},{label:"KitLot No.",value:l(C.HIV_SELF_KIT),other:{obs:()=>t.buildValueText("Kit lot number",l(C.HIV_SELF_KIT))}},{label:"Kit Expiry date",value:a(C.HIV_SELF_KIT),other:{obs:()=>t.buildValueDate("kit expiry date",a(C.HIV_SELF_KIT))}}]}})))},finalComputedValue:e=>({obs:e.map((e=>e.other.fields)).map((async e=>{const[t,...l]=e.filter((e=>"function"==typeof e.other.obs)).map((e=>e.other.obs(e)));return{...await t,child:await Promise.all(l)}}))}),options:async e=>{if(null!=e.test_kit)return e.test_kit;const i=f(e),s=(e=i)=>Array.from({length:e},(()=>({label:"",value:"",other:{fields:[{label:"Kit Name",value:C.HIV_SELF_KIT,other:{obs:e=>t.buildValueText("Kit name",e.value),onclick:(e,t,l,a,i)=>{c({id:"name",helpText:"Kit Name",type:n.TT_TEXT,isRequired:()=>!0},(t=>{e.value=t.value,0===l&&i.forEach((t=>{t.other.fields.forEach((t=>{/name/i.test(t.label)&&""===t.value&&(t.value=e.value)}))}))}))}}},{label:"Kit Lot No.",value:l(C.HIV_SELF_KIT),other:{obs:e=>t.buildValueNumber("Kit lot number",e.value),onclick:(e,t,l,a,i)=>{c({id:"lot",helpText:"Enter Lot Number",type:n.TT_TEXT,isRequired:()=>!0},(t=>{e.value=t.value,0===l&&i.forEach((t=>{t.other.fields.forEach((t=>{/lot/i.test(t.label)&&""===t.value&&(t.value=e.value)}))}))}))}}},{label:"Kit Expiry Date",value:a(C.HIV_SELF_KIT),other:{obs:e=>t.buildValueDate("kit expiry date",e.value),onclick:(e,l,a,i,s)=>{c({id:"end_user",helpText:"Kit Expiry Date",type:n.TT_FULL_DATE,isRequired:()=>!0,validation:e=>new Date(e.label)<new Date(t.date)?["Expiry date cannot be less than current date "+p(t.date)]:m(e.label).diff(t.date,"month")<=2?["It's not advisable to use a test kit that will expire in less than 2 months"]:null},(t=>{e.value=t.value,0===a&&s.forEach((t=>{t.other.fields.forEach((t=>{/expiry/i.test(t.label)&&""===t.value&&(t.value=e.value)}))}))}))}}}]}})));return Array.isArray(e.test_kit)?i<e.test_kit.length?e.test_kit.slice(0,i):i>e.test_kit.length?[...e.test_kit,...s(i-e.test_kit.length)]:e.test_kit:s()}}}(),{id:"visit_type",helpText:"Visit Type",type:n.TT_HIDDEN,isRequired:()=>!0,computedValue:e=>({tag:"reg",obs:t.buildValueCoded("Visit type","Self test distribution")})},(()=>{const e=V.getGivenNameField();return e.validation=()=>!0,e.type=n.TT_HIDDEN,e.computedValue=()=>({person:"Unknown"}),e})(),(()=>{const e=V.getFamilyNameField();return e.type=n.TT_HIDDEN,e.validation=()=>!0,e.computedValue=()=>({person:"Unknown"}),e})(),(()=>{const e=V.getHomeDistrictField();return e.type=n.TT_HIDDEN,e.computedValue=()=>({person:"Unknown"}),e})(),(()=>{const e=V.getHomeTaField();return e.type=n.TT_HIDDEN,e.computedValue=()=>({person:"Unknown"}),e})(),(()=>{const e=V.getHomeVillageField();return e.type=n.TT_HIDDEN,e.computedValue=()=>({person:"Unknown"}),e})(),(()=>{const e=V.getCurrentDistrictField();return e.type=n.TT_HIDDEN,e.computedValue=()=>({person:"Unknown"}),e})(),(()=>{const e=V.getCurrentTAfield();return e.type=n.TT_HIDDEN,e.computedValue=()=>({person:"Unknown"}),e})(),(()=>{const e=V.getCurrentVillageField();return e.type=n.TT_HIDDEN,e.computedValue=()=>({person:"Unknown"}),e})(),(()=>{const e=V.getCellNumberField();return e.type=n.TT_HIDDEN,e.computedValue=()=>({person:"Unknown"}),e})()]),t=new E(-1),{resolveObs:l,mapStrToOptions:a}=s();function f(e){return r.find(e.items_given_to_client||[],{label:"Self-Test Kit"})?.value||0}return{onFinish:async function(e,a){const{saveObsOffline:i,savePersonOffline:s,synchronizeRecord:n}=d(),o=s("Self test client registration",V.resolvePerson(a),[]);i({id:o,observations:await l(a,"reg"),encounterName:"Self-test kit register",encounterTypeID:t.encounterTypeID,meta:e}),n(o),u.push("/")},fields:e}}});e("default",f(t,[["render",function(e,t,l,a,i,s){const n=T("his-standard-form"),o=T("ion-page");return _(),g(o,null,{default:y((()=>[I(n,{formLabel:"Self Test Registration",fields:e.fields,onFinishAction:e.onFinish,cancelDestinationPath:"/"},null,8,["fields","onFinishAction"])])),_:1})}]]))}}}));
