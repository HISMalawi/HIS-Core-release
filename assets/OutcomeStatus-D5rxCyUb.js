import{H as d}from"./HisStandardForm-BCjM4-bc.js";import{_ as u}from"./EncounterMixin.vue_vue_type_script_lang-v2aYCq6R.js";import{bQ as l,d as m,ad as r,ae as o,bY as p,dD as f,ax as s,W as n,aj as h,am as v,aa as S,c as _,af as b,a as w}from"./index-CMZASHAR.js";import"./encounter_guidelines-CJXpBOk4.js";import"./GuidelineEngine-D6V1_Znr.js";class T extends l{constructor(i,t){super(i,114,t)}}class y extends l{constructor(i,t){super(i,42,t)}}const g=m({components:{HisStandardForm:d},mixins:[u],data:()=>({referralService:{},admissionService:{}}),watch:{ready:{async handler(e){e&&(this.referralService=new T(this.patientID,this.providerID),this.admissionService=new y(this.patientID,this.providerID),this.fields=this.getFields())},immediate:!0,deep:!0}},methods:{async onSubmit(e,i){if(e.opd_outcome.value==="Admission"){await this.admissionService.createEncounter();const t=await this.resolveObs({...i},"admission");await this.admissionService.saveObservationList(t)}else{await this.referralService.createEncounter();const t=await this.resolveObs({...i},"referral");await this.referralService.saveObservationList(t)}this.nextTask()},getFields(){return[{id:"opd_outcome",helpText:"Select outcome",type:r.TT_SELECT,validation:e=>o.required(e),options:()=>[{label:"Admit",value:"Admission"},{label:"Internal referral",value:"Internal referral"},{label:"Refer to another hospital/clinic",value:"External referral"}]},{id:"facility_name",helpText:"Select Facility name",type:r.TT_SELECT,validation:e=>o.required(e),computedValue:({value:e})=>({tag:"referral",obs:this.referralService.buildValueText("Referred",e)}),condition:e=>e.opd_outcome.value==="External referral",options:(e,i="")=>p(i),config:{showKeyboard:!0,isFilterDataViaApi:!0}},{id:"specialist_clinic",helpText:"Select clinic",type:r.TT_SELECT,validation:e=>o.required(e),computedValue:({other:e})=>this.referralService.buildValueCodedFromConceptId("Specialist clinic",e.concept_id),condition:e=>e.opd_outcome.value==="Internal referral",options:()=>f(),config:{showKeyboard:!0}},{id:"wards",helpText:"Select ward",type:r.TT_SELECT,condition:e=>e.opd_outcome.value==="Admission",validation:e=>o.required(e),computedValue:e=>({tag:"admission",obs:this.admissionService.buildValueText("Admit to ward",e.label)}),options:()=>s.getInternalSections(),config:{showKeyboard:!0,footerBtns:[{name:"Add Section",slot:"end",color:"success",onClick:async(e,i,t)=>{if(typeof t.filter!="string"||t.filter.length<3)return n("Please enter a valid section name");if(t.filtered.some(a=>a.label.toLowerCase()===t.filter.toLowerCase()))return n("Section already existing");if(await h("Do you want to add internal section?")){const a=await s.createInternalSection(t.filter.toUpperCase());a?(t.filter=a.name,t.listData=[{label:a.name,value:a.id},...t.listData]):v("Unable to add ".concat(t.filter))}}}]}}]}}});function x(e,i,t,a,C,D){const c=b("his-standard-form");return w(),_(c,{cancelDestinationPath:e.cancelDestination,fields:e.fields,onFinishAction:e.onSubmit},null,8,["cancelDestinationPath","fields","onFinishAction"])}const V=S(g,[["render",x]]);export{V as default};
