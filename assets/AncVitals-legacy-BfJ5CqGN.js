System.register(["./index-legacy-CA6M7ipO.js","./HisStandardForm-legacy-a9YJRGaH.js","./vitals_service-legacy-Dr1dMWAK.js","./useEncounter-legacy-CgHUO1ZL.js","./isEmpty-legacy-cRrH0Hs5.js","./encounter_guidelines-legacy-Bcz_Mw7r.js","./GuidelineEngine-legacy-KsvQuFdF.js"],(function(e,t){"use strict";var a,i,n,l,r,o,u,s,c,v,g,h,d;return{setters:[e=>{a=e.d,i=e.r,n=e.at,l=e.ad,r=e.a,o=e.c,u=e.u,s=e.aN,c=e.aW,v=e.aj},e=>{g=e.H},e=>{h=e.V},e=>{d=e.u},null,null,null],execute:function(){e("default",a({__name:"AncVitals",setup(e){const t=i(0),a=i(-1),f=i(-1),b=i(-1),m=i([]);let p;const{patientDashboardUrl:y,goToNextTask:w}=d((async function(e,i,n){p=new h(i,e);const r=await h.getFirstObs(i,"Weight");f.value=parseFloat(`${r?.value_numeric??0}`),b.value=parseInt(`${r?.obs_id??-1}`),t.value=n.getAge(),a.value=await n.getRecentHeight(),m.value.push({id:"vitals",helpText:"Vitals entry",type:l.TT_VITALS_ENTRY,validation:A,options:()=>[$,W.value,H,P.value],config:{onUpdateAlertStatus:E,onChangeOption:S,hiddenFooterBtns:["Clear"]}})})),$={label:"Weight",value:"",other:{modifier:"KG",icon:"weight",required:!0}},H={label:"BP",value:"",other:{modifier:"mmHG",icon:"bp"}},P=n((()=>({label:"Age",value:t.value,other:{doNotSave:!0,modifier:"Years old",icon:"",visible:!1}}))),W=n((()=>{const e=a.value>0&&t.value>18;return{label:"Height",value:`${e?a.value:""}`,other:{modifier:"CM",icon:"height",recentHeight:a.value,visible:!e}}}));function A(e){const t=function(e){return e.filter((e=>""===e.value&&!0===e.other.required))}(e);if(t.length>0)return t.map((e=>[`${e.label} can not be empty`]));const a=function(e){return e.filter((e=>("Height"!==e.label||0!=e.other.required)&&""!==e.value&&"Age"!==e.label))}(e);return p.validateAll(a)}function E(e){const t=s.find(e,{label:"BP"});if(t&&""!=t.value){const[e,a]=`${t.value}`.split("/").map((e=>parseInt(e)));if(e>=140&&a>=90)return{status:"Client is at risk of pre-eclampsia, refer for urine protein test.",color:"brown"};if(e<120||e>140)return{status:"Systolic reading is out of normal range",color:"brown"};if(a<80||a>90)return{status:"Diastolic reading is out of normal range",color:"brown"};if(e>=130&&e<=139&&a>=80&&a<=89)return{status:"Prehypertension",color:"brown"}}return{status:"",color:""}}async function N(e){const t=e.value,a=t-f.value;if(100*(Math.abs(a)/f.value||1)>30){const e=`Use ${f.value} Kg`,i=`Use ${t} Kg`;if(await c("Abnormal Weight Change",`Previous Weight "${f.value} Kg". Current Weight "${t} Kg"`,`Weight Reading has been ${a>0?"increased":"decresed"} by more than 30%. Please SELECT the correct Weight.)`,[{name:e,slot:"start",color:"success"},{name:i,slot:"end",color:"danger"}])!==i||!b)return f.value;await v(`Do you want to void Weight observation for ${f.value}`)&&await h.voidObs(b.value)}return t}async function S(e){if(!e.value&&e.other.required)throw`Value for ${e.label} is required`;if(e.value){const t=p.validator(e);if(t&&t.length)throw t}"Weight"===e.label&&f.value>0&&(e.value=await N(e))}async function T(e){return(await Promise.all(e.filter((e=>!(e.other?.doNotSave||s.isEmpty(e.value)))).map((async e=>"BP"===e.label?async function(e){const[t,a]=e.split("/");return[await p.buildValueNumber("Systolic",parseInt(t)),await p.buildValueNumber("Diastolic",parseInt(a))]}(e.value):("Weight"===e.label&&f.value>0&&(e.value=await N(e)),p.buildValueNumber(e.label,e.value)))))).flat()}async function C({vitals:e}){if(!(await async function(e){const t=s.find(e,{label:"Height"});return t?.value>0||!(await v("Patient has no height reading. Do you want to proceed without recording height?",{header:"HEIGHT CONFIRMATION",confirmBtnLabel:"Enter Height",cancelBtnLabel:"Proceed"}))}(e)))return;await p.createEncounter();const t=await T(e);await p.saveObservationList(t),w()}return(e,t)=>(r(),o(g,{fields:m.value,onFinishAction:C,skipSummary:!0,cancelDestinationPath:u(y)},null,8,["fields","cancelDestinationPath"]))}}))}}}));
