import{H as E}from"./HisStandardForm-DV91SVN0.js";import{_ as y}from"./EncounterMixin.vue_vue_type_script_lang-D_tD9mOm.js";import{P as I}from"./patient_complaints_service-CDdNgmrb.js";import{L as B}from"./LabOrderModal-DTZ5f1xa.js";import{d as b,a3 as D,U as L,Q as R,S as V,R as k,a4 as x,du as f,aJ as N,aq as u,a6 as _,ab as s,u as v,B as $,x as o,w as n,z as p,E as F,a5 as A,bq as g,bH as M,O as W,bi as H,ag as q,aM as z,bp as G,a9 as r,aa as d,v as U}from"./index-ZHjf-rL0.js";import{P as Y}from"./patient_radiology_service-DGPukBjF.js";import j from"./HisRadiologyPicker-DBsmSE37.js";import"./encounter_guidelines-BZZ6VwqE.js";import"./GuidelineEngine-D6V1_Znr.js";import"./lab_order_service-auYUzOGp.js";import"./SelectMixin-BiW8IGY0.js";import"./BaseTextInput-jCg6YrmV.js";import"./FieldMixin.vue_vue_type_script_lang-BpYOJpAA.js";const J=b({name:"Modal",components:{IonButton:D,IonContent:L,IonHeader:R,IonTitle:V,IonToolbar:k,IonFooter:x,HisRadiologyPicker:j},mixins:[y],data:()=>({radiologyService:{},isPacsEnabled:!1,emitedSelectedOptions:{}}),watch:{ready:{async handler(e){e&&(this.radiologyService=new Y(this.patientID,this.providerID),this.isPacsEnabled=await f.isPACsEnabled())},immediate:!0,deep:!0}},methods:{async onValue(e){this.emitedSelectedOptions=e},async getSelected(){return this.emitedSelectedOptions.map(async e=>({...await this.radiologyService.buildValueCoded("Radiology Orders",e.other.parent),child:[await this.radiologyService.buildValueCodedFromConceptId(e.other.parent,e.other.concept_id)]}))},async onSubmit(){if(!N.isEmpty(this.emitedSelectedOptions)){this.closeModal();let e=await this.getSelected();e=await Promise.all(e),await this.radiologyService.createEncounter();const t=await this.radiologyService.obsObj(e),i=await this.radiologyService.saveObservationList(t);if(await this.radiologyService.printOrders(i,this.patient),this.isPacsEnabled)try{await this.radiologyService.submitToPacs(i,this.patient)}catch(a){console.log(a)}}},async closeModal(){await u.dismiss([])}}});function K(e,t,i,a,l,S){const m=s("ion-title"),c=s("ion-toolbar"),C=s("ion-header"),w=s("his-radiology-picker"),T=s("ion-content"),h=s("ion-button"),P=s("ion-footer");return v(),$(F,null,[o(C,null,{default:n(()=>[o(c,null,{default:n(()=>[o(m,{class:"his-lg-text"},{default:n(()=>t[2]||(t[2]=[p("Radiology Examination")])),_:1})]),_:1})]),_:1}),o(T,{style:{overflow:"hidden",background:"grey",height:"70vh"}},{default:n(()=>[o(w,{onOnValue:e.onValue},null,8,["onOnValue"])]),_:1}),o(P,null,{default:n(()=>[o(c,null,{default:n(()=>[o(h,{onClick:t[0]||(t[0]=O=>e.onSubmit()),size:"large",slot:"end",disabled:e.emitedSelectedOptions.length===0},{default:n(()=>t[3]||(t[3]=[p(" Place orders ")])),_:1},8,["disabled"]),o(h,{onClick:t[1]||(t[1]=O=>e.closeModal()),size:"large",slot:"start",color:"danger"},{default:n(()=>t[4]||(t[4]=[p(" Close ")])),_:1})]),_:1})]),_:1})],64)}const Q=_(J,[["render",K]]),X=b({components:{HisStandardForm:E,IonPage:A},mixins:[y],data:()=>({complaintsService:{},todaysDate:g.getSessionDate(),weightLossPercentageNum:0,lostTenPercentBodyWeight:!1,presentingComplaints:"",isPacsEnabled:!1,radiologyBtnName:"Radiology Order",hasTriageComplaints:!1,generalConsultationEncounter:168}),watch:{ready:{async handler(e){e&&(this.complaintsService=new I(this.patientID,this.providerID),this.isPacsEnabled=await f.isPACsEnabled(),this.hasTriageComplaints=await this.getTriagePresentingComplaints(),this.fields=this.getFields())},immediate:!0,deep:!0}},methods:{async onSubmit(e,t){try{const i=await this.resolveObs(t,"complaints"),a=await this.resolveObs(t,"consulation");await this.complaintsService.createEncounter(),await this.complaintsService.saveObservationList(i);const l=new M(this.patientID,this.generalConsultationEncounter,this.providerID);await l.createEncounter(),await l.saveObservationList(a),this.nextTask()}catch(i){console.error(i),W("An error occurred while saving the complaints")}},async launchOrderSelection(){const e=await u.create({component:B,backdropDismiss:!1,cssClass:"large-modal"});e.present(),await e.onDidDismiss()},async launchRadiologyOrderSelection(){const e=await u.create({component:Q,backdropDismiss:!1,cssClass:"large-modal"});e.present(),await e.onDidDismiss()},async getTriagePresentingComplaints(){if(!((await this.complaintsService.fetchLatestTriageEncounter()).length>0))return!1;const i=(await H.getEncounters(this.patientID,this.todaysDate)).filter(function(a){return a.type.name=="TRIAGE PRESENTING COMPLAINTS"&&q.toStandardHisFormat(a.encounter_datetime)==g.getSessionDate()});return i.length>0?(this.presentingComplaints=i[0].observations,!0):!1},buildResults(){const e=["Group","Presenting complaints"];let t="",i=this.presentingComplaints.map(a=>{if(a.obs_group_id!=null)return[t,a.value_text];t=a.value_text});return i=i.filter(a=>a!=null),this.presentingComplaints=i,[{label:"",value:"",other:{columns:e,rows:i}}]},async checkIfWeightLossIsControlled(e){if(this.lostTenPercentBodyWeight&&"".concat(e.label).match(/malnutrition/i)&&"".concat(e.value).match(/no/i)){const t=await z("Recommendation","Patient's weight has dropped by ".concat(this.weightLossPercentageNum,"% , is this controlled weight loss??"),"Please verify",[{name:"Confirm weight loss",slot:"start",color:"success"},{name:"Confirm controlled",slot:"end",color:"primary"}]);e.value=t==="Confirm weight loss"?"Yes":"No"}},getTBSymptoms(e){const t=G.getConceptsByCategory("tb_symptom",!0).map(({name:i})=>i);return this.getOptions([...t],e)},getFields(){return[{id:"on_tb_treatment",helpText:"On TB Treatment?",type:r.TT_SELECT,validation:e=>d.required(e),computedValue:e=>({tag:"consulation",obs:this.complaintsService.buildValueCoded("TB treatment",e.value)}),options:()=>this.yesNoOptions()},{id:"tb_side_effects",helpText:"TB Associated symptoms",type:r.TT_MULTIPLE_YES_NO,init:async()=>{const e=await this.patient.getWeightHistory();return this.weightLossPercentageNum=this.patient.getWeightLossPercentageFromTrail(e),this.lostTenPercentBodyWeight=Number(this.weightLossPercentageNum)>=10,!0},onValue:async e=>(await this.checkIfWeightLossIsControlled(e),!0),validation:e=>this.validateSeries([()=>d.required(e),()=>d.anyEmpty(e)]),condition:e=>e.on_tb_treatment.value.match(/no/i),options:(e,t)=>this.getTBSymptoms(t),computedValue:e=>({tag:"consulation",obs:e.map(async t=>({...await this.complaintsService.buildValueCoded("Routine TB Screening",t.label),child:[await this.complaintsService.buildValueCoded(t.label,t.value)]}))})},{id:"triage_complaints",helpText:"Triaging Complaints",condition:()=>this.hasTriageComplaints,type:r.TT_TABLE_VIEWER,options:()=>this.buildResults(),config:{hiddenFooterBtns:["Clear"]}},{id:"complaints",helpText:"Presenting Complaints",type:r.TT_COMPLAINTS_PICKER,validation:e=>d.required(e),computedValue:e=>({tag:"complaints",obs:e.filter(t=>!/other (specify)/i.test(t.label)).map(async t=>({...await this.complaintsService.buildValueCoded("Presenting complaint",t.other.parent),child:[await this.complaintsService.buildValueCodedFromConceptId(t.other.parent,t.other.concept_id)]}))}),config:{hiddenFooterBtns:[this.showRadiologyOdersBtn()],footerBtns:[{name:"Lab Order",size:"large",slot:"end",color:"primary",visible:!0,onClick:async()=>await this.launchOrderSelection(),visibleOnStateChange:e=>e.index===1},{name:this.radiologyBtnName,size:"large",slot:"end",color:"primary",visible:!0,onClick:async()=>await this.launchRadiologyOrderSelection(),visibleOnStateChange:e=>e.index===1}]}},{id:"other_complaints",helpText:"Other Complaints",type:r.TT_TEXT,condition:e=>e.complaints.some(t=>t.label==="Other (specify)"&&t.isChecked),computedValue:async e=>({tag:"complaints",obs:{...await this.complaintsService.buildValueCoded("Presenting complaint","Other"),child:[await this.complaintsService.buildValueText("Other",e.label)]}})},{id:"all_presenting_complaints",helpText:"Summary",condition:()=>this.presentingComplaints.length>0,type:r.TT_SUMMARY,options:e=>this.buildSummaryResults(e),config:{hiddenFooterBtns:["Clear"]}}]},showRadiologyOdersBtn(){return this.isPacsEnabled?"":this.radiologyBtnName},buildSummaryResults(e){const t=e.complaints.map(a=>({label:"OPD Complaints",value:a.label})),i=this.presentingComplaints.map(a=>({label:"Triaging Complaints",value:a[1]}));return t.concat(i)}}});function Z(e,t,i,a,l,S){const m=s("his-standard-form"),c=s("ion-page");return v(),U(c,null,{default:n(()=>[o(m,{cancelDestinationPath:e.cancelDestination,fields:e.fields,onFinishAction:e.onSubmit,skipSummary:!0},null,8,["cancelDestinationPath","fields","onFinishAction"])]),_:1})}const ue=_(X,[["render",Z]]);export{ue as default};
