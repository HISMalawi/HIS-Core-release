import{d as q,aA as u,ah as x,a7 as K,m as W,k as J,ad as Q,dA as X,du as Z,i as tt,ac as et,b6 as at,I as nt,a4 as st,l as ot,a5 as it,ay as rt,at as lt,q as g,dB as ct,bi as ut,p as dt,an as ht,ao as pt,a$ as ft,z as mt,a_ as gt,H as S,bn as bt,bo as y,be as N,U as A,bs as V,S as _t,am as yt,a as l,w as a,ar as o,b as i,e as n,g as T,h as C,a6 as m,t as k,j as h,a9 as R,aa as O}from"./index-DrAzzURJ.js";import{_ as kt}from"./EncounterMixin.vue_vue_type_script_lang-Bw4PWSin.js";import{R as Tt}from"./RiskFactorModal-Bcyhfse8.js";import{B as P}from"./htn_service-fnB_Pzbh.js";import{V as wt}from"./vitals_service-BzEu4va8.js";import"./encounter_guidelines-wbooCIhg.js";import"./GuidelineEngine-D6V1_Znr.js";import"./HisStandardForm-BuN2ARUl.js";const b={background:"#444444"},Dt=q({mixins:[kt],components:{IonCheckbox:lt,DataTable:rt,IonTitle:it,IonToolbar:ot,IonHeader:st,IonContent:nt,IonGrid:at,IonRow:et,IonButton:tt,IonRadioGroup:Z,IonRadio:X,IonCol:Q,IonFooter:J,IonPage:W,IonItem:K,IonLabel:x},data:()=>({htn:{},hasARVNumber:!0,suggestedNumber:"",columns:[[u.thTxt("Date",{style:b}),u.thTxt("Systolic",{style:b}),u.thTxt("Diastolic",{style:b}),u.thTxt("BP Drugs",{style:b}),u.thTxt("Action / Note",{style:b})]],bpGradeColorMap:{"N/A":"#ffffff",normal:"#ffffff","grade 1":"#FFC3CE","grade 2":"#F20056","grade 3":"#FF3333"},rows:[],riskFactors:[],action:null,trail:[],date:null,patientOnBPDrugs:!1,patientFirstVisit:!1,normatensive:!1,patientHasHyperTensionObs:!1,currentDrugs:[],items:[],isEnrolledInHTN:!1,isAliveOnHTN:!1,HTNProgramID:20,aliveState:160,refer:!1,onBpDrugActions:[],noneBpActions:[]}),watch:{ready:{async handler(t){if(!t)return;await(await V.create({message:"Please wait...",backdropDismiss:!1})).present(),this.htn=new P(this.patientID,this.providerID),this.trail=await this.htn.getBPTrail(),this.rows=this.formatBpTrailRows(this.trail),this.normatensive=P.isBpNormotensive(this.trail),this.riskFactors=await this.getRiskFactors(),this.date=S.toStandardHisDisplayFormat(_t.getSessionDate()),await this.isTransfered(),await this.hasHyperTenstion(),await this.getTreatmentStatus(),await this.getProgramStatus(),V.dismiss(),this.patientFirstVisit&&this.patientOnBPDrugs&&await this.alertTransferIn(),this.setBpActions()},immediate:!0}},computed:{totalRiskFactors(){return this.riskFactors.filter(t=>t.value==="Yes").length},showClinicianButton(){return!(A.isClinician()&&A.isDoctor())}},methods:{setBpActions(){this.onBpDrugActions=[{label:"Continue drugs",value:"on treatment",other:{action:()=>this.$router.push("/art/encounters/bp_adherence/".concat(this.patientID))}},{label:"Medication not available",value:"on treatment",other:{action:()=>this.$router.push("/art/encounters/bp_adherence/".concat(this.patientID))}},{label:"Review drugs",value:"on treatment",other:{action:()=>this.$router.push("/art/encounters/bp_adherence/".concat(this.patientID,"?review=true"))}}],this.noneBpActions=[{label:"Lifestyle advice given",value:"Lifestyle changes only",isChecked:!1},{label:"Patient declining BP drugs ",value:"Symptomatic but not in treatment",isChecked:!1},...this.normatensive?[{label:"Return to annual screening",value:"Alive"}]:[],{label:"Start anti hypertensives",value:"On treatment",other:{action:()=>this.$router.push("/art/encounters/bp_prescription/".concat(this.patientID))}}]},async onFinish(){var t,e;if(this.noneBpActions.some(r=>r.isChecked)||this.action||this.refer){if(!await this.htn.createEncounter())return g("Unable to create encounter");if(this.refer){if(!await this.htn.saveValueCodedObs("Refer patient to clinician","Yes"))return g("Unable to create Obs");this.gotoPatientDashboard()}else{if(this.currentDrugs.length){await this.htn.saveValueTextObs("Plan",this.action.label);const s={state:this.action.value};await this.htn.enrollPatient(s)}else{const s=this.noneBpActions.filter(d=>d.isChecked);if(s.length){const d=s.map(w=>this.htn.saveValueTextObs("Plan",w.label));await Promise.all(d)}}const c=this.noneBpActions.filter(s=>{var d;return s.isChecked&&typeof((d=s.other)==null?void 0:d.action)=="function"});if(c.length)return c.forEach(s=>s.other.action());if(typeof((e=(t=this.action)==null?void 0:t.other)==null?void 0:e.action)=="function")return this.action.other.action();this.nextTask()}}else g("Please select an action")},referPatient(){this.refer=!0,this.onFinish()},goToDiagnosis(){return this.$router.push({path:"/art/encounters/hypertension_diagnosis/".concat(this.patientID)})},async hasHyperTenstion(){const t=await y.getFirstValueCoded(this.patientID,"Patient has hypertension");this.patientHasHyperTensionObs=!!"".concat(t).match(/yes|no/i)},async isTransfered(){const t=await y.getFirstValueCoded(this.patientID,"Transferred");this.patientFirstVisit=!t},async getTreatmentStatus(){const t=await y.getFirstValueText(this.patientID,"Treatment status");this.patientOnBPDrugs=!!(t&&t.match(/BP Drugs started/i))},async getProgramStatus(){const t=await N.getPatientPrograms(this.patientID);this.isEnrolledInHTN=t.filter(e=>e.program.name==="HYPERTENSION PROGRAM").length>0,this.isEnrolledInHTN&&await this.programState()},async programState(){const t=await N.getPatientStates(this.patientID,this.HTNProgramID);this.isAliveOnHTN=t.filter(e=>e.name==="Alive").length>0},async getRiskFactors(){const e=bt.getConceptsByCategory("risk factors").map(async r=>{const c=await y.getFirstValueCoded(this.patientID,r.name);return{concept:r.name,value:c}});return Promise.all(e)},formatBpTrailRows(t){return Object.keys(t).map(e=>{const r=S.toStandardHisDisplayFormat(e);this.currentDrugs=this.currentDrugs.concat(t[e].drugs);const s={background:(()=>{const d=P.getBpGrade(parseInt(t[e].sbp),parseInt(t[e].dbp));return this.bpGradeColorMap[d]})()};return[u.tdDate(r,{style:s}),u.td(t[e].sbp,{style:s}),u.td(t[e].dbp,{style:s}),u.td(t[e].drugs.join(", "),{style:s}),u.td(t[e].note,{style:s})]})},async showRiskFactors(){const t=await mt.create({component:Tt,backdropDismiss:!1,cssClass:"large-modal",componentProps:{factors:this.riskFactors}});t.present();const{data:e}=await t.onDidDismiss();gt.isEmpty(e)||(this.riskFactors=e.map(r=>{const c=r.isChecked===!0?"Yes":"No";return{concept:r.concept,value:c}}))},async alertTransferIn(){await ft("Transfer in","Does the patient want to transfer in for HTN management?","",[{name:"Yes",slot:"end",color:"success"},{name:"No",slot:"start",color:"danger"}])==="Yes"?(await this.enrollInHTN(),await this.setHtnTransferred("Yes"),this.patientFirstVisit=!1,this.setBpActions()):(await this.setHtnTransferred("No"),this.nextTask())},async enrollInHTN(){ct({id:"enrollment_date",helpText:"HTN Enrollment date",type:pt.TT_FULL_DATE,validation:t=>ht.required(t)},async t=>{try{const e=new ut(this.patientID);e.setProgramId(this.HTNProgramID),e.setProgramDate("".concat(t.value)),e.setStateDate("".concat(t.value)),e.setStateId(this.aliveState),await e.enrollProgram(),await e.updateState(),this.isEnrolledInHTN=!0,dt("Patient is now enrolled in HTN")}catch(e){console.error(e),g("".concat(e))}})},async setHtnTransferred(t){const e=new wt(this.patientID,this.providerID);await e.createEncounter()?await e.saveValueCodedObs("Transferred",t)||g("Unable to create observation Transferred for patient"):g("Unable to create patient transfer encounter")}}}),vt={key:0,style:{color:"green"}},It={slot:"end"},Ct=T("h1",{style:{"text-align":"center"}},"Actions",-1),Pt=T("h1",{style:{"text-align":"center"}},"Actions",-1);function Ht(t,e,r,c,s,d){const w=o("ion-title"),f=o("ion-button"),_=o("ion-toolbar"),E=o("ion-header"),$=o("data-table"),U=o("ion-content"),G=o("ion-radio"),H=o("ion-label"),B=o("ion-item"),D=o("ion-col"),v=o("ion-row"),F=o("ion-grid"),Y=o("ion-radio-group"),z=o("ion-checkbox"),L=o("ion-footer"),M=o("ion-page");return i(),l(M,null,{default:a(()=>[n(E,null,{default:a(()=>[n(_,null,{default:a(()=>[n(w,null,{default:a(()=>[T("span",null,"BP management screening on "+k(t.date),1),t.patientOnBPDrugs?(i(),C("small",vt," (Patient already on BP drugs)")):m("",!0)]),_:1}),T("span",It,[t.totalRiskFactors>0?(i(),l(f,{key:0,color:"danger",onClick:t.showRiskFactors},{default:a(()=>[h("View/Edit risk factors "+k(t.totalRiskFactors),1)]),_:1},8,["onClick"])):m("",!0),t.totalRiskFactors===0?(i(),l(f,{key:1,onClick:t.showRiskFactors},{default:a(()=>[h("add riskfactors")]),_:1},8,["onClick"])):m("",!0)])]),_:1})]),_:1}),n(U,null,{default:a(()=>[n($,{config:{showIndex:!1},columns:t.columns,rows:t.rows},null,8,["columns","rows"])]),_:1}),n(L,null,{default:a(()=>[t.currentDrugs.length?(i(),l(_,{key:0},{default:a(()=>[Ct,n(Y,{modelValue:t.action,"onUpdate:modelValue":e[0]||(e[0]=p=>t.action=p)},{default:a(()=>[n(F,null,{default:a(()=>[n(v,null,{default:a(()=>[(i(!0),C(R,null,O(t.onBpDrugActions,(p,I)=>(i(),l(D,{key:I},{default:a(()=>[n(B,{lines:"none"},{default:a(()=>[n(G,{style:{"margin-right":"10px"},value:p},null,8,["value"]),n(H,{style:{"font-size":"1.0rem","font-weight":"bold"}},{default:a(()=>[h(k(p.label),1)]),_:2},1024)]),_:2},1024)]),_:2},1024))),128))]),_:1})]),_:1})]),_:1},8,["modelValue"])]),_:1})):(i(),l(_,{key:1},{default:a(()=>[n(F,null,{default:a(()=>[n(v,null,{default:a(()=>[n(D,null,{default:a(()=>[Pt]),_:1})]),_:1}),n(v,null,{default:a(()=>[(i(!0),C(R,null,O(t.noneBpActions,(p,I)=>(i(),l(D,{key:I},{default:a(()=>[n(B,{lines:"none"},{default:a(()=>[n(z,{style:{"margin-right":"10px"},modelValue:p.isChecked,"onUpdate:modelValue":j=>p.isChecked=j},null,8,["modelValue","onUpdate:modelValue"]),n(H,null,{default:a(()=>[h(k(p.label),1)]),_:2},1024)]),_:2},1024)]),_:2},1024))),128))]),_:1})]),_:1})]),_:1})),n(_,{color:"dark"},{default:a(()=>[n(f,{size:"large",color:"danger",slot:"start",onClick:t.gotoPatientDashboard},{default:a(()=>[h(" cancel ")]),_:1},8,["onClick"]),t.showClinicianButton?(i(),l(f,{key:0,size:"large",color:"danger",slot:"start",onClick:t.referPatient},{default:a(()=>[h(" Refer to clinician ")]),_:1},8,["onClick"])):m("",!0),t.patientHasHyperTensionObs?m("",!0):(i(),l(f,{key:1,size:"large",slot:"end",onClick:t.goToDiagnosis},{default:a(()=>[h(" Hypertension Diagnosis ")]),_:1},8,["onClick"])),t.patientHasHyperTensionObs&&!t.isEnrolledInHTN?(i(),l(f,{key:2,size:"large",slot:"end",onClick:t.enrollInHTN},{default:a(()=>[h(" Enroll in HTN ")]),_:1},8,["onClick"])):m("",!0),t.patientHasHyperTensionObs?(i(),l(f,{key:3,size:"large",color:"success",slot:"end",onClick:t.onFinish},{default:a(()=>[h(" Finish ")]),_:1},8,["onClick"])):m("",!0)]),_:1})]),_:1})]),_:1})}const Et=yt(Dt,[["render",Ht]]);export{Et as default};
