import{bU as l,d,r as m,an as f,ao as v,a as _,b,i as S,l as h,k as T}from"./index-CJleCCtM.js";import{H as k}from"./HisStandardForm-BPNPJCrM.js";import{u as x}from"./useEncounter-BYi6HXkG.js";import{m as y}from"./commons-CcXQGk9e.js";import"./isEmpty-Dwdx9lIX.js";import"./encounter_guidelines-CfQXyRxl.js";import"./GuidelineEngine-D6V1_Znr.js";class g extends l{constructor(e,n){super(e,184,n)}}const q=d({__name:"CxCaReception",setup(o){let e;const n=m([]),{patientDashboardUrl:r,goToNextTask:s}=x(async(t,a)=>{e=new g(a,t),n.value=c()});async function i(t){if(!await e.createEncounter())return h("Unable to create encounter");const u=t.reason_for_visit,p=await e.buildValueCoded("Reason for visit",u.value);await e.saveObs(p),T("Observations and encounter created!"),s()}function c(){return[{id:"reason_for_visit",helpText:"Reason for visit",type:f.TT_SELECT,validation:t=>v.required(t),options:()=>y(["Initial screening","Postponed treatment","One year subsequent check-up after treatment","Subsequent screening","Problem visit after treatment","Referral"])}]}return(t,a)=>(_(),b(k,{fields:n.value,onFinishAction:i,skipSummary:!0,cancelDestinationPath:S(r)},null,8,["fields","cancelDestinationPath"]))}});export{q as default};
