import{bQ as r,aN as c,H as d}from"./index-CMZASHAR.js";import{D as i}from"./drug_order_service-DwQHOfYk.js";const o={"Once a day (OD)":1,"Twice a day (BD)":2,"Three a day (TDS)":3,"Four times a day (QID)":4,"Five times a day (5X/D)":5,"Six times a day (Q4HRS)":6,"In the morning (QAM)":1,"Once a week (QWK)":1,"Once a month":1,"Twice a month":2};class y extends r{constructor(e,t){super(e,25,t)}vaccinationDrugObj(){return{drug_inventory_id:609,dose:.5,equivalent_daily_dose:.5,frequency:"Once a day (od)",start_date:this.date,auto_expire_date:this.date,instructions:"Once a day",units:"ml"}}async updateVaccinationOrder(){const e=await this.dispenseVaccinationDrug();if(!c.isEmpty(e)){const t=e[0].order_id;return i.updateDispensationOrders([{order_id:t,quantity:1}])}throw"Unable to dispense"}dispenseVaccinationDrug(){return this.createOrders([this.vaccinationDrugObj()])}createOrders(e){return i.create({drug_orders:e,encounter_id:this.getEncounterID()})}async submitTreatment(e){await this.createEncounter();const t=await this.createOrders(e.map(a=>this.buildDrugOrderObj(a)));await new r(this.patientID,54,this.providerID).createEncounter(),e.forEach(a=>{t.forEach(s=>{s.drug_inventory_id===a.id&&(s.quantity=this.calculateAmountNeeded(a))})}),await i.updateDispensationOrders(t)}calculateAmountNeeded(e){const t=this.calculateDosage(e),n=this.calculateDailyEquivalentDose(e,t);let a=e.duration*(n||1)-(e.quantity||0);return Math.max(0,Math.ceil(a))}calculateDosage(e){return parseFloat(e.dose||"".concat(o[e.frequency]))}calculateDailyEquivalentDose(e,t){return t*o[e.frequency]}buildDrugOrderObj(e){const t=new Date(this.date),n=t.setDate(t.getDate()+parseInt("".concat(e.duration))),a=this.calculateDosage(e);return{drug_inventory_id:e.id,dose:a,frequency:e.frequency,start_date:this.date,auto_expire_date:d.toStandardHisFormat(new Date(n)),equivalent_daily_dose:this.calculateDailyEquivalentDose(e,a),instructions:e.drug_name+":"+e.dose+" "+e.units+" "+e.frequency,units:e.units}}}export{y as A,o as D};
