System.register(["./data_cleaning_report_service-legacy-D4n58EXP.js","./ReportMixin.vue_vue_type_script_lang-legacy-SQxkN2ye.js","./TableReportTemplate-legacy-S2pkSxVJ.js","./index-legacy-2OuOZQ1w.js","./TableView-legacy-qKxmf6r2.js","./BasicReportTemplate-legacy-D72Xzs9J.js","./Export-legacy-D1zUexdI.js","./index-legacy-D_LoyUSC.js","./Pagination-legacy-BgwkMHfb.js","./HisStandardForm-legacy-Cd-xGvNm.js","./ReportErrors-legacy-DqayzlCU.js"],(function(t,e){"use strict";var a,s,i,r,n,o,l,d,h,c,u,p,m,D,_,g,T,f,w,x,R,b;return{setters:[t=>{a=t.C,s=t.D},t=>{i=t._},t=>{r=t.R},t=>{n=t.d,o=t.m,l=t.aA,d=t.dD,h=t.z,c=t.cw,u=t.a_,p=t.an,m=t.ao,D=t.b0,_=t.S,g=t.am,T=t.a,f=t.w,w=t.ar,x=t.b,R=t.e},t=>{b=t.v},null,null,null,null,null,null],execute:function(){const e=n({mixins:[i],components:{ReportTemplate:r,IonPage:o},data:()=>({title:"Data cleaning report",rows:[],columns:[]}),created(){this.fields=[{id:"indicator",helpText:"Select indicator",type:m.TT_SELECT,requireNext:!1,validation:t=>p.required(t),options:()=>this.getIndicatorOptions()},...D({id:"start_date",helpText:"Start",required:!0,condition:t=>!t.indicator.other.skipDateSelection,minDate:()=>"2001-01-01",maxDate:()=>_.getSessionDate(),estimation:{allowUnknown:!1},computeValue:t=>t}),...D({id:"end_date",helpText:"End",required:!0,condition:t=>!t.indicator.other.skipDateSelection,minDate:(t,e)=>e.start_date,maxDate:()=>_.getSessionDate(),estimation:{allowUnknown:!1},computeValue:t=>t})]},methods:{async onPeriod(t,e){this.rows=[],this.title=t.indicator.label;const a=t.indicator;this.columns=a.other.columns,await a.other.setRows(t,e)},masterCardBtn(t){return l.tdBtn("View",(()=>this.$router.push(`/art/mastercard/${t}`)))},getDefaultIndicatorColumns:(t=[])=>[[l.thTxt("ARV Number"),l.thTxt("Patient Id"),l.thTxt("First Name"),l.thTxt("Last Name"),l.thTxt("Gender"),l.thTxt("Date of birth"),...t,l.thTxt("Action")]],async setDefaultIndicatorRows(t,e,a,i=null){this.report=new s,this.report.setStartDate(e),this.report.setEndDate(a),this.period=this.report.getDateIntervalPeriod();const r=this.sortByArvNumber(await this.report.getCleaningToolReport(t)||[],"arv_number");u.isEmpty(r)||r.forEach((t=>{const e="function"==typeof i?i(t):[];this.rows.push([l.td(t.arv_number),l.td(t.patient_id),l.td(t.given_name),l.td(t.family_name),l.td(this.formatGender(t.gender)),l.tdDate(t.birthdate),...e,this.masterCardBtn(t.patient_id)])}))},getIndicatorOptions(){return[{label:"DOB > Date enrolled",value:a.DobMoreThanEnrolledDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(t,e)=>this.setDefaultIndicatorRows(a.DobMoreThanEnrolledDate,e.start_date,e.end_date)}},{label:"Date enrolled < Earliest start date",value:a.DateEnrolledLessThanEarliestStartDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([l.thTxt("Earliest start date"),l.thTxt("Date enrolled")]),setRows:(t,e)=>this.setDefaultIndicatorRows(a.DateEnrolledLessThanEarliestStartDate,e.start_date,e.end_date,(t=>[l.tdDate(t.earliest_start_date),l.tdDate(t.date_enrolled)]))}},{label:"Encounters after Death",value:a.ClientsWithEncountersAfterDeath,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(t,e)=>this.setDefaultIndicatorRows(a.ClientsWithEncountersAfterDeath,e.start_date,e.end_date)}},{label:"Incomplete visits",value:"Incomplete visits",other:{skipDateSelection:!1,columns:[[l.thTxt("ARV#"),l.thTxt("NHID"),l.thTxt("First name"),l.thTxt("Last name"),l.thTxt("Gender"),l.thTxt("Birthdate"),l.thTxt("Date(s)"),l.thTxt("Action")]],setRows:async(t,e)=>{this.report=new s,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod();const a=await this.report.getIncompleteVisits();for(const s in a){const t=a[s];this.rows.push([l.td(t.arv_number),l.td(t.national_id),l.td(t.given_name),l.td(t.family_name),l.td(this.formatGender(t.gender)),l.tdDate(t.birthdate),l.td(t.dates.map((t=>this.toDate(t))).join("<br/>")),this.masterCardBtn(parseInt(s.toString()))])}}}},{label:"Enrolled on ART before birth",value:"Enrolled on ART before birth",other:{skipDateSelection:!0,columns:[[l.thTxt("ARV number"),l.thTxt("Name"),l.thTxt("Earliest start date"),l.thTxt("Date enrolled"),l.thTxt("Gender"),l.thTxt("Birth Date"),l.thTxt("Action")]],setRows:async()=>{try{this.report=new s,(await this.report.getEnrolledOnArtBeforeBirth()).forEach((t=>{this.rows.push([l.td(t.identifier),l.td(t.name),l.tdDate(t.earliest_start_date),l.tdDate(t.date_enrolled),l.td(this.formatGender(t.gender)),l.tdDate(t.birthdate),this.masterCardBtn(t.patient_id)])}))}catch(t){if(!(t instanceof d))throw t}}}},{label:"Missing VL Results",value:"Missing VL Results",other:{columns:[[l.thTxt("ARV number"),l.thTxt("First name"),l.thTxt("Last name"),l.thTxt("Gender"),l.thTxt("Accession number"),l.thTxt("Order date"),l.thTxt("Action")]],setRows:async(t,e)=>{try{this.report=new s,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod(),(await this.report.getCleaningToolReport(a.MissingVlResults)).forEach((t=>{this.rows.push([l.td(t.arv_number),l.td(t.given_name),l.td(t.family_name),l.td(this.formatGender(t.gender)),l.td(t.accession_number),l.tdDate(t.order_date),this.masterCardBtn(t.patient_id)])}))}catch(i){if(!(i instanceof d))throw i}}}},{label:"Male patients with female observations",value:a.MalesWithFemaleObs,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([l.thTxt("Visit date")]),setRows:(t,e)=>this.setDefaultIndicatorRows(a.MalesWithFemaleObs,e.start_date,e.end_date,(t=>[(()=>{const e=`${t.visit_date}`.split(",");return e.length<=1?l.tdDate(t.visit_date):l.tdLink(`${e.length} visits dates`,(async()=>{(await h.create({component:b,backdropDismiss:!1,cssClass:"large-modal",componentProps:{title:`${e.length} visit dates`,columns:[[{label:"ARV",ref:"arv_number"},{label:"Given name",ref:"given_name"},{label:"Family name",ref:"family_name"},{label:"Visit date",ref:"visit_date"}]],columnData:e.map((e=>({...t,visit_date:c(e)}))),onFinish:()=>h.dismiss()}})).present()}))})()]))}},{label:"Missing important demographics elements",value:a.MissingDemographics,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(t,e)=>this.setDefaultIndicatorRows(a.MissingDemographics,e.start_date,e.end_date)}},{label:"Missing start reason",value:a.MissingStartReasons,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(t,e)=>this.setDefaultIndicatorRows(a.MissingStartReasons,e.start_date,e.end_date)}},{label:"Missing ART start date",value:a.MissingArtStartDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(t,e)=>this.setDefaultIndicatorRows(a.MissingArtStartDate,e.start_date,e.end_date)}},{label:"Multiple start reasons",value:a.MultipleStartReasons,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([l.thTxt("Reasons"),l.thTxt("Visits")]),setRows:(t,e)=>this.setDefaultIndicatorRows(a.MultipleStartReasons,e.start_date,e.end_date,(t=>[l.td(`${t.reasons}`.split(",").join("<p/>")),l.td(t.visits.split(",").map((t=>c(t))).join("<p/>"))]))}},{label:"Patients with Pre-ART / Unknown outcome",value:a.PreArtOrUnknownOutcomes,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(t,e)=>this.setDefaultIndicatorRows(a.PreArtOrUnknownOutcomes,e.start_date,e.end_date)}},{label:"Prescriptions without dispensations",value:a.PrescriptionWithoutDispensation,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([l.thTxt("Visit Date")]),setRows:(t,e)=>this.setDefaultIndicatorRows(a.PrescriptionWithoutDispensation,e.start_date,e.end_date,(t=>[l.tdDate(t.visit_date)]))}},{label:"Different pregnancy value on same date",value:a.DifferentPregnancyValueOnSameDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([l.thTxt("Visit Date")]),setRows:(t,e)=>this.setDefaultIndicatorRows(a.DifferentPregnancyValueOnSameDate,e.start_date,e.end_date,(t=>[l.tdDate(t.visit_date)]))}},{label:"Active Clients with Adverse Outcomes",value:a.ActiveClientsWithAdverseOutcomes,other:{skipDateSelection:!1,columns:[[l.thTxt("ARV number"),l.thTxt("Filling Number"),l.thTxt("Outcome"),l.thTxt("Outcome Date"),l.thTxt("Last Dispensation Date"),l.thTxt("Action")]],setRows:async(t,e)=>{try{this.report=new s,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod(),(await this.report.getCleaningToolReport(a.ActiveClientsWithAdverseOutcomes)).forEach((t=>{this.rows.push([l.td(t.arv_number),l.td(t.filling_number),l.td(t.outcome),l.td(this.toDate(t.outcome_date)),l.td(this.toDate(t.dispensation_visit_date)),this.masterCardBtn(t.patient_id)])}))}catch(i){if(!(i instanceof d))throw i}}}},{label:"DOB >= ART Start Date",value:a.StartDateBeforeDob,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([l.thTxt("Earliest Start Date")]),setRows:(t,e)=>this.setDefaultIndicatorRows(a.StartDateBeforeDob,e.start_date,e.end_date,(t=>[l.tdDate(t.art_start_date)]))}},{label:"Clients on ART without HIV Program",value:a.ClientsOnArtWithoutHivProgram,other:{columns:[[l.thTxt("#"),l.thTxt("ART Number"),l.thTxt("Date of Birth (DOB)"),l.thTxt("ART Start Date"),l.thTxt("Last ART Dispensation"),l.thTxt("Action")]],setRows:async(t,e)=>{try{this.report=new s,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod(),(await this.report.getCleaningToolReport(a.ClientsOnArtWithoutHivProgram)).forEach(((t,e)=>{this.rows.push([l.td(e+1),l.td(t.arv_number),l.tdDate(t.birthdate),l.tdDate(t.art_start_date),l.tdDate(t.last_art_dispensation_date),l.tdBtn("View",(()=>this.$router.push(`/patient/programs/${t.patient_id}`)))])}))}catch(i){if(!(i instanceof d))throw i}}}},{label:"Dispensed Implausible Amounts",value:a.DipensationImplausibleAmounts,other:{columns:[[l.thTxt("#"),l.thTxt("ART Number"),l.thTxt("Gender"),l.thTxt("Date of Birth (DOB)"),l.thTxt("ART Start Date"),l.thTxt("Regimen"),l.thTxt("Amount dispensed"),l.thTxt("Date Dispensed"),l.thTxt("User"),l.thTxt("Next appointment"),l.thTxt("Action")]],setRows:async(t,e)=>{try{this.report=new s,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod(),(await this.report.getCleaningToolReport(a.DipensationImplausibleAmounts)).forEach(((t,e)=>{this.rows.push([l.td(e+1),l.td(t.arv_number),l.td(t.gender),l.tdDate(t.birthdate),l.tdDate(t.start_date),l.td(t.regimen),l.td(t.amount_dispensed),l.tdDate(t.date_dispensed),l.td(t.dispensing_user),l.tdDate(t.next_appointment),this.masterCardBtn(t.patient_id)])}))}catch(i){if(!(i instanceof d))throw i}}}}]}}});t("default",g(e,[["render",function(t,e,a,s,i,r){const n=w("report-template"),o=w("ion-page");return x(),T(o,null,{default:f((()=>[R(n,{title:t.title,period:t.period,rows:t.rows,fields:t.fields,columns:t.columns,showFilters:!0,onReportConfiguration:t.onPeriod},null,8,["title","period","rows","fields","columns","onReportConfiguration"])])),_:1})}]]))}}}));
