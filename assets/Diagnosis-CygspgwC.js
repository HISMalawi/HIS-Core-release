import{H as d}from"./HisStandardForm-CG-mBCAJ.js";import{_ as p}from"./EncounterMixin.vue_vue_type_script_lang-DbMXlRb8.js";import{b5 as r,aS as m,d as u,aU as h,S as g,ab as s,n as S,V as _,_ as v,r as f,o as y,c as T}from"./index-CEHwIYqs.js";import{F as o}from"./dynamic-import-helper-Bsjrd6Ro.js";import"./TouchScreenForm-CoH4BwNu.js";import"./ToolbarMediumCard-C9Oru3Lp.js";import"./Transformers-BPPLlH12.js";import"./ViewPort-CUJZqAQw.js";import"./encounter_guidelines-k6Sgx1Jq.js";import"./GuidelineEngine-D6V1_Znr.js";class n extends r{constructor(i,a){super(i,8,a)}static async getDiagnosis(i="",a=1,t=10){const c=m.getConceptID("Qech outpatient diagnosis list");return r.getJson("diagnosis",{id:c,name:i,page:a,page_size:t})}}class b extends r{constructor(i,a){super(i,105,a)}}const D=u({components:{HisStandardForm:d},mixins:[p],data:()=>({activeField:"",notesService:{},diagnosisService:{},malariaTestResult:"No"}),watch:{ready:{async handler(e){e&&(this.malariaTestResult=await h.getLatestMalariaTestResult(this.patientID),this.notesService=new b(this.patientID,this.providerID),this.diagnosisService=new n(this.patientID,this.providerID),this.fields=this.getFields())},immediate:!0,deep:!0}},methods:{async onSubmit(e,i){await this.diagnosisService.createEncounter();const a=await this.resolveObs({...i,obs_datetime:g.getSessionDate()},"diagnosis");await this.diagnosisService.saveObservationList(a);const t=await this.resolveObs({...i},"notes");s.isEmpty(t)||(await this.notesService.createEncounter(),await this.notesService.saveObservationList(t)),this.nextTask()},mapListToOptions(e){return s.isEmpty(e)?[]:e.map(i=>({label:i.name,value:i.name,other:i.concept_id,isChecked:!1})).sort((i,a)=>i.label<a.label?-1:i.label>a.label?1:0)},async checkMalariaResult(e){return e.find(a=>a.label==="Malaria")?this.malariaTestResult==="Positive"?!0:await S("Patient has ".concat(this.malariaTestResult," malaria test result. Do you want to continue?")):!0},getFields(){return[{id:"primary_diagnosis",helpText:"Select primary diagnosis",type:o.TT_INFINITE_SCROLL_MULTIPLE_SELECT,validation:e=>_.required(e),options:async(e,i="",a=1,t=10)=>this.mapListToOptions(await n.getDiagnosis(i,a,t)),beforeNext:async e=>await this.checkMalariaResult(e),computedValue:e=>({tag:"diagnosis",obs:e.map(({other:i})=>this.diagnosisService.buildValueCodedFromConceptId("Primary diagnosis",i))}),summaryMapValue:({value:e})=>({value:e,label:"Primary diagnosis"}),config:{isFilterDataViaApi:!0,showKeyboard:!0}},{id:"secondary_diagnosis",helpText:"Select secondary diagnosis",type:o.TT_INFINITE_SCROLL_MULTIPLE_SELECT,options:async(e,i="",a=1,t=10)=>this.mapListToOptions(await n.getDiagnosis(i,a,t)),beforeNext:async e=>await this.checkMalariaResult(e),computedValue:e=>!s.isEmpty(e)&&{tag:"diagnosis",obs:e.map(({other:i})=>this.diagnosisService.buildValueCodedFromConceptId("Secondary diagnosis",i))},summaryMapValue:({value:e})=>({value:e,label:"Secondary diagnosis"}),config:{showKeyboard:!0,isFilterDataViaApi:!0}},{id:"clinical_notes",helpText:"Clinical notes",type:o.TT_NOTE,computedValue:e=>e&&{tag:"notes",obs:this.notesService.buildValueText("Clinical notes construct",e.value)}}]}}});function w(e,i,a,t,c,C){const l=f("his-standard-form");return y(),T(l,{cancelDestinationPath:e.cancelDestination,fields:e.fields,onFinishAction:e.onSubmit},null,8,["cancelDestinationPath","fields","onFinishAction"])}const P=v(D,[["render",w]]);export{P as default};
