import{d as j,ar as q,ax as K,ab as W,p as J,aa as Q,I as X,b4 as Z,af as tt,m as et,dr as nt,dx as at,ag as st,n as ot,q as it,ac as rt,ai as lt,ay as u,bv as S,H as N,S as ct,U as V,l as g,bB as k,bq as A,bA as ut,z as dt,aR as pt,a_ as ht,dy as ft,bD as mt,k as gt,an as bt,ao as yt,ak as kt,b as l,w as n,ap as o,a as i,e as a,f as T,t as _,g as C,a6 as m,h as p,a4 as R,a5 as O}from"./index-CJleCCtM.js";import{_ as Tt}from"./EncounterMixin.vue_vue_type_script_lang-Cy2p88dG.js";import{R as _t}from"./RiskFactorModal-Bcs3R5Ql.js";import{B as P}from"./htn_service-C2TGXIhw.js";import{V as wt}from"./vitals_service-C9Nh2ETO.js";import"./encounter_guidelines-CfQXyRxl.js";import"./GuidelineEngine-D6V1_Znr.js";import"./HisStandardForm-BPNPJCrM.js";const b={background:"#444444"},Dt=j({mixins:[Tt],components:{IonCheckbox:q,DataTable:K,IonTitle:W,IonToolbar:J,IonHeader:Q,IonContent:X,IonGrid:Z,IonRow:tt,IonButton:et,IonRadioGroup:nt,IonRadio:at,IonCol:st,IonFooter:ot,IonPage:it,IonItem:rt,IonLabel:lt},data:()=>({htn:{},hasARVNumber:!0,suggestedNumber:"",columns:[[u.thTxt("Date",{style:b}),u.thTxt("Systolic",{style:b}),u.thTxt("Diastolic",{style:b}),u.thTxt("BP Drugs",{style:b}),u.thTxt("Action / Note",{style:b})]],bpGradeColorMap:{"N/A":"#ffffff",normal:"#ffffff","grade 1":"#FFC3CE","grade 2":"#F20056","grade 3":"#FF3333"},rows:[],riskFactors:[],action:null,trail:[],date:null,patientOnBPDrugs:!1,patientFirstVisit:!1,normatensive:!1,patientHasHyperTensionObs:!1,currentDrugs:[],items:[],isEnrolledInHTN:!1,isAliveOnHTN:!1,HTNProgramID:20,aliveState:160,refer:!1,onBpDrugActions:[],noneBpActions:[]}),watch:{ready:{async handler(t){if(!t)return;await(await S.create({message:"Please wait...",backdropDismiss:!1})).present(),this.htn=new P(this.patientID,this.providerID),this.trail=await this.htn.getBPTrail(),this.rows=this.formatBpTrailRows(this.trail),this.normatensive=P.isBpNormotensive(this.trail),this.riskFactors=await this.getRiskFactors(),this.date=N.toStandardHisDisplayFormat(ct.getSessionDate()),await this.isTransfered(),await this.hasHyperTenstion(),await this.getTreatmentStatus(),await this.getProgramStatus(),S.dismiss(),this.patientFirstVisit&&this.patientOnBPDrugs&&await this.alertTransferIn(),this.setBpActions()},immediate:!0}},computed:{totalRiskFactors(){return this.riskFactors.filter(t=>t.value==="Yes").length},showClinicianButton(){return!(V.isClinician()&&V.isDoctor())}},methods:{setBpActions(){this.onBpDrugActions=[{label:"Continue drugs",value:"on treatment",other:{action:()=>this.$router.push("/art/encounters/bp_adherence/".concat(this.patientID))}},{label:"Medication not available",value:"on treatment",other:{action:()=>this.$router.push("/art/encounters/bp_adherence/".concat(this.patientID))}},{label:"Review drugs",value:"on treatment",other:{action:()=>this.$router.push("/art/encounters/bp_adherence/".concat(this.patientID,"?review=true"))}}],this.noneBpActions=[{label:"Lifestyle advice given",value:"Lifestyle changes only",isChecked:!1},{label:"Patient declining BP drugs ",value:"Symptomatic but not in treatment",isChecked:!1},...this.normatensive?[{label:"Return to annual screening",value:"Alive"}]:[],{label:"Start anti hypertensives",value:"On treatment",other:{action:()=>this.$router.push("/art/encounters/bp_prescription/".concat(this.patientID))}}]},async onFinish(){var t,e;if(this.noneBpActions.some(r=>r.isChecked)||this.action||this.refer){if(!await this.htn.createEncounter())return g("Unable to create encounter");if(this.refer){if(!await this.htn.saveValueCodedObs("Refer patient to clinician","Yes"))return g("Unable to create Obs");this.gotoPatientDashboard()}else{if(this.currentDrugs.length){await this.htn.saveValueTextObs("Plan",this.action.label);const s={state:this.action.value};await this.htn.enrollPatient(s)}else{const s=this.noneBpActions.filter(d=>d.isChecked);if(s.length){const d=s.map(w=>this.htn.saveValueTextObs("Plan",w.label));await Promise.all(d)}}const c=this.noneBpActions.filter(s=>{var d;return s.isChecked&&typeof((d=s.other)==null?void 0:d.action)=="function"});if(c.length)return c.forEach(s=>s.other.action());if(typeof((e=(t=this.action)==null?void 0:t.other)==null?void 0:e.action)=="function")return this.action.other.action();this.nextTask()}}else g("Please select an action")},referPatient(){this.refer=!0,this.onFinish()},goToDiagnosis(){return this.$router.push({path:"/art/encounters/hypertension_diagnosis/".concat(this.patientID)})},async hasHyperTenstion(){const t=await k.getFirstValueCoded(this.patientID,"Patient has hypertension");this.patientHasHyperTensionObs=!!"".concat(t).match(/yes|no/i)},async isTransfered(){const t=await k.getFirstValueCoded(this.patientID,"Transferred");this.patientFirstVisit=!t},async getTreatmentStatus(){const t=await k.getFirstValueText(this.patientID,"Treatment status");this.patientOnBPDrugs=!!(t&&t.match(/BP Drugs started/i))},async getProgramStatus(){const t=await A.getPatientPrograms(this.patientID);this.isEnrolledInHTN=t.filter(e=>e.program.name==="HYPERTENSION PROGRAM").length>0,this.isEnrolledInHTN&&await this.programState()},async programState(){const t=await A.getPatientStates(this.patientID,this.HTNProgramID);this.isAliveOnHTN=t.filter(e=>e.name==="Alive").length>0},async getRiskFactors(){const e=ut.getConceptsByCategory("risk factors").map(async r=>{const c=await k.getFirstValueCoded(this.patientID,r.name);return{concept:r.name,value:c}});return Promise.all(e)},formatBpTrailRows(t){return Object.keys(t).map(e=>{const r=N.toStandardHisDisplayFormat(e);this.currentDrugs=this.currentDrugs.concat(t[e].drugs);const s={background:(()=>{const d=P.getBpGrade(parseInt(t[e].sbp),parseInt(t[e].dbp));return this.bpGradeColorMap[d]})()};return[u.tdDate(r,{style:s}),u.td(t[e].sbp,{style:s}),u.td(t[e].dbp,{style:s}),u.td(t[e].drugs.join(", "),{style:s}),u.td(t[e].note,{style:s})]})},async showRiskFactors(){const t=await dt.create({component:_t,backdropDismiss:!1,cssClass:"large-modal",componentProps:{factors:this.riskFactors}});t.present();const{data:e}=await t.onDidDismiss();pt.isEmpty(e)||(this.riskFactors=e.map(r=>{const c=r.isChecked===!0?"Yes":"No";return{concept:r.concept,value:c}}))},async alertTransferIn(){await ht("Transfer in","Does the patient want to transfer in for HTN management?","",[{name:"Yes",slot:"end",color:"success"},{name:"No",slot:"start",color:"danger"}])==="Yes"?(await this.enrollInHTN(),await this.setHtnTransferred("Yes"),this.patientFirstVisit=!1,this.setBpActions()):(await this.setHtnTransferred("No"),this.nextTask())},async enrollInHTN(){ft({id:"enrollment_date",helpText:"HTN Enrollment date",type:bt.TT_FULL_DATE,validation:t=>yt.required(t)},async t=>{try{const e=new mt(this.patientID);e.setProgramId(this.HTNProgramID),e.setProgramDate("".concat(t.value)),e.setStateDate("".concat(t.value)),e.setStateId(this.aliveState),await e.enrollProgram(),await e.updateState(),this.isEnrolledInHTN=!0,gt("Patient is now enrolled in HTN")}catch(e){console.error(e),g("".concat(e))}})},async setHtnTransferred(t){const e=new wt(this.patientID,this.providerID);await e.createEncounter()?await e.saveValueCodedObs("Transferred",t)||g("Unable to create observation Transferred for patient"):g("Unable to create patient transfer encounter")}}}),vt={key:0,style:{color:"green"}},It={slot:"end"};function Ct(t,e,r,c,s,d){const w=o("ion-title"),f=o("ion-button"),y=o("ion-toolbar"),E=o("ion-header"),$=o("data-table"),U=o("ion-content"),G=o("ion-radio"),H=o("ion-label"),B=o("ion-item"),D=o("ion-col"),v=o("ion-row"),F=o("ion-grid"),Y=o("ion-radio-group"),z=o("ion-checkbox"),L=o("ion-footer"),M=o("ion-page");return i(),l(M,null,{default:n(()=>[a(E,null,{default:n(()=>[a(y,null,{default:n(()=>[a(w,null,{default:n(()=>[T("span",null,"BP management screening on "+_(t.date),1),t.patientOnBPDrugs?(i(),C("small",vt," (Patient already on BP drugs)")):m("",!0)]),_:1}),T("span",It,[t.totalRiskFactors>0?(i(),l(f,{key:0,color:"danger",onClick:t.showRiskFactors},{default:n(()=>[p("View/Edit risk factors "+_(t.totalRiskFactors),1)]),_:1},8,["onClick"])):m("",!0),t.totalRiskFactors===0?(i(),l(f,{key:1,onClick:t.showRiskFactors},{default:n(()=>e[1]||(e[1]=[p("add riskfactors")])),_:1},8,["onClick"])):m("",!0)])]),_:1})]),_:1}),a(U,null,{default:n(()=>[a($,{config:{showIndex:!1},columns:t.columns,rows:t.rows},null,8,["columns","rows"])]),_:1}),a(L,null,{default:n(()=>[t.currentDrugs.length?(i(),l(y,{key:0},{default:n(()=>[e[2]||(e[2]=T("h1",{style:{"text-align":"center"}},"Actions",-1)),a(Y,{modelValue:t.action,"onUpdate:modelValue":e[0]||(e[0]=h=>t.action=h)},{default:n(()=>[a(F,null,{default:n(()=>[a(v,null,{default:n(()=>[(i(!0),C(O,null,R(t.onBpDrugActions,(h,I)=>(i(),l(D,{key:I},{default:n(()=>[a(B,{lines:"none"},{default:n(()=>[a(G,{style:{"margin-right":"10px"},value:h},null,8,["value"]),a(H,{style:{"font-size":"1.0rem","font-weight":"bold"}},{default:n(()=>[p(_(h.label),1)]),_:2},1024)]),_:2},1024)]),_:2},1024))),128))]),_:1})]),_:1})]),_:1},8,["modelValue"])]),_:1})):(i(),l(y,{key:1},{default:n(()=>[a(F,null,{default:n(()=>[a(v,null,{default:n(()=>[a(D,null,{default:n(()=>e[3]||(e[3]=[T("h1",{style:{"text-align":"center"}},"Actions",-1)])),_:1})]),_:1}),a(v,null,{default:n(()=>[(i(!0),C(O,null,R(t.noneBpActions,(h,I)=>(i(),l(D,{key:I},{default:n(()=>[a(B,{lines:"none"},{default:n(()=>[a(z,{style:{"margin-right":"10px"},modelValue:h.isChecked,"onUpdate:modelValue":x=>h.isChecked=x},null,8,["modelValue","onUpdate:modelValue"]),a(H,null,{default:n(()=>[p(_(h.label),1)]),_:2},1024)]),_:2},1024)]),_:2},1024))),128))]),_:1})]),_:1})]),_:1})),a(y,{color:"dark"},{default:n(()=>[a(f,{size:"large",color:"danger",slot:"start",onClick:t.gotoPatientDashboard},{default:n(()=>e[4]||(e[4]=[p(" cancel ")])),_:1},8,["onClick"]),t.showClinicianButton?(i(),l(f,{key:0,size:"large",color:"danger",slot:"start",onClick:t.referPatient},{default:n(()=>e[5]||(e[5]=[p(" Refer to clinician ")])),_:1},8,["onClick"])):m("",!0),t.patientHasHyperTensionObs?m("",!0):(i(),l(f,{key:1,size:"large",slot:"end",onClick:t.goToDiagnosis},{default:n(()=>e[6]||(e[6]=[p(" Hypertension Diagnosis ")])),_:1},8,["onClick"])),t.patientHasHyperTensionObs&&!t.isEnrolledInHTN?(i(),l(f,{key:2,size:"large",slot:"end",onClick:t.enrollInHTN},{default:n(()=>e[7]||(e[7]=[p(" Enroll in HTN ")])),_:1},8,["onClick"])):m("",!0),t.patientHasHyperTensionObs?(i(),l(f,{key:3,size:"large",color:"success",slot:"end",onClick:t.onFinish},{default:n(()=>e[8]||(e[8]=[p(" Finish ")])),_:1},8,["onClick"])):m("",!0)]),_:1})]),_:1})]),_:1})}const Rt=kt(Dt,[["render",Ct]]);export{Rt as default};
