import{L as m}from"./lab_report_service-B1kCiB_P.js";import{_ as g}from"./ReportMixin.vue_vue_type_script_lang-bNARcyGN.js";import{R as f}from"./TableReportTemplate-DYGrVqT5.js";import{d as T,ao as s,a9 as d,dB as h,bx as v,a6 as R,ab as _,u as b,v as y}from"./index-CyYd6aWW.js";import"./HisStandardForm-CuX9K_Ib.js";import"./ReportErrors-buNL-Vye.js";const w=T({mixins:[g],components:{ReportTemplate:f},data:()=>({title:"Tests requested",rows:[],cohort:[],reportType:"",reportReady:!1,columns:[],patientLevelColumns:[[s.thTxt("ARV#"),s.thTxt("Gender"),s.thTxt("Birthdate"),s.thTxt("Ordered Date"),s.thTxt("Test"),s.thTxt("Reason")]],disaggregatedColumns:[s.thTxt("Age group"),s.thTxt("Gender")]}),created(){this.report=new m,this.fields=this.getFormFields()},methods:{async onPeriod({type:e,tests:o}){this.reportReady=!0,this.rows=[],this.period=this.report.getDateIntervalPeriod(),this.reportType=e.value,this.reportType==="disaggregated"?this.setDisaggregatedRows(o):this.reportType==="patient_level"&&this.setPatientLevelRows(o)},getFormFields(){return[...this.getDateDurationFields(),{id:"tests",helpText:"Test(s) Requested",type:d.TT_MULTIPLE_SELECT,options:async(e,o,t)=>{this.report.setStartDate(t.start_date),this.report.setEndDate(t.end_date);const r=await this.report.getSamplesDrawnReport(),a=this.buildAvailableTests(r);return this.buildAvailableTestOptions(a)}},{id:"type",helpText:"Select report type",type:d.TT_SELECT,options:()=>[{label:"Disaggregated",value:"disaggregated"},{label:"Patient level",value:"patient_level"}]}]},buildAvailableTests(e){const o={};return e.forEach(t=>{t.tests.forEach(r=>{r in o||(o[r]=[]),o[r].push(t)})}),o},buildAvailableTestOptions(e){const o=[];for(const t in e){const r=e[t];o.push({label:t,value:r.length,other:r})}return o},setDisaggregatedRows(e){const o=[],t=[];this.columns=[this.disaggregatedColumns.concat(e.map(r=>s.thTxt(r.label)))];for(const r in h){const a=h[r],l=[s.td(a),s.td("M")],i=[s.td(a),s.td("F")];e.forEach(({other:u})=>{const p=c=>u.filter(n=>n.gender===c&&n.age_group===a).map(n=>n.patient_id);l.push(this.drill(p("M"),"Males of ".concat(a))),i.push(this.drill(p("F"),"Females of ".concat(a)))}),o.push(l),t.push(i),this.rows=[...t,...o]}},setPatientLevelRows(e){this.columns=this.patientLevelColumns,e.forEach(({other:o})=>{this.sortByArvNumber(o).forEach(async t=>{this.rows.push([s.td(t.arv_number),s.td(t.gender),s.tdDate(t.birthdate),s.tdDate(t.order_date),s.td(t.tests.join(",")),s.td(await v.getConceptName(t.reason_for_test))])})})}}});function E(e,o,t,r,a,l){const i=_("report-template");return b(),y(i,{title:e.title,period:e.period,rows:e.rows,fields:e.fields,columns:e.columns,canExportCsv:!0,canExportPDf:!0,reportReady:e.reportReady,onReportConfiguration:e.onPeriod},null,8,["title","period","rows","fields","columns","reportReady","onReportConfiguration"])}const A=R(w,[["render",E]]);export{A as default};
