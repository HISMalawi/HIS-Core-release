System.register(["./drug_order_service-legacy-3VUXkHbj.js","./index-legacy-CA6M7ipO.js"],(function(t,e){"use strict";var s,i,a,r,n,o;return{setters:[t=>{s=t.D},t=>{i=t.ao,a=t.bQ,r=t.aN,n=t.H,o=t.ci}],execute:function(){class e extends i{constructor(){super()}static getAllArvRegimens(){return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)}static getRegimens(t){return this.getJson(`programs/${this.getProgramID()}/regimens`,{patient_id:t})}static getCustomIngridients(){return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)}static getCurrentRegimen(t,e=this.getSessionDate()){return this.getJson(`programs/${this.getProgramID()}/${t}`,{date:e})}}t("R",e),t("P",class extends a{nextVisitInterval;fastTrack;regimenExtras;hangingPills;fastTrackMedications;medicationOrders;treatmentState;contraindications;sideEffects;tptPrescriptionCount;lastSideEffectDate;constructor(t,e){super(t,25,e),this.nextVisitInterval=0,this.fastTrack=!1,this.regimenExtras=[],this.fastTrackMedications=[],this.hangingPills=[],this.medicationOrders=[],this.treatmentState="",this.contraindications={},this.sideEffects={},this.tptPrescriptionCount=0,this.lastSideEffectDate=""}setNextVisitInterval(t){this.nextVisitInterval=t}getHangingPills(){return this.hangingPills}getMedicationOrders(){return this.medicationOrders.map((t=>a.getCachedConceptName(t)))}getTptPrescriptionCount(){return this.tptPrescriptionCount}getLastSideEffectDate(){return this.lastSideEffectDate}getContraindications(){return this.contraindications}getSideEffects(){return this.sideEffects}getRegimenExtras(){return this.regimenExtras}getPatientRegimens(){return e.getRegimens(this.patientID)}getARVs(){return e.getJson("arv_drugs")}getCustomIngridients(){return e.getCustomIngridients()}getFastTrackMedications(){return this.fastTrackMedications}getTreatmentState(){return this.treatmentState}isFastTrack(){return this.fastTrack}medicationOrdersAvailable(){return!r.isEmpty(this.medicationOrders)}shouldPrescribeArvs(){const t=a.getCachedConceptID("Antiretroviral drugs");return this.medicationOrders.includes(t)}shouldPrescribeExtras(){return a.getConceptsByCategory("art_extra_medication_order").map((t=>this.medicationOrders.includes(t.concept_id))).some(Boolean)}getRegimenStarterpack(t,e){const s={weight:e,regimen:t};return a.getJson(`programs/${a.getProgramID()}/regimen_starter_packs`,s)}async getLvpDrugsByType(t,e){return a.getJson(`programs/${a.getProgramID()}/regimens/${e}`,{patient_id:this.patientID,lpv_drug_type:t})}async loadContraindications(){const t=await a.getConceptID("Contraindications");(await a.getObs({concept_id:t,person_id:this.patientID})).forEach((t=>{const e=n.toStandardHisFormat(t.obs_datetime);this.contraindications[e]||(this.contraindications[e]=[]);const s=a.getCachedConceptName(t.value_coded);this.contraindications[e].push(s)}))}async loadDrugInduced(){const t=await a.getConceptID("Drug induced"),e=await a.getObs({concept_id:t,person_id:this.patientID});e&&e.forEach((t=>{const e=n.toStandardHisFormat(t.obs_datetime);if(this.lastSideEffectDate||(this.lastSideEffectDate=e),!t.value_drug||!t.value_coded)return;this.sideEffects[e]||(this.sideEffects[e]={}),this.sideEffects[e][t.value_drug]||(this.sideEffects[e][t.value_drug]=[]);const s=a.getCachedConceptName(t.value_coded);this.sideEffects[e][t.value_drug].push(s)}))}async loadTptPrescriptionCount(){const t=await a.getJson("tpt_prescription_count",{patient_id:this.patientID,date:this.date});if(t){const e=t.count+1;this.tptPrescriptionCount=e>3?3:e}}async loadFastTrackStatus(){const t=await a.getFirstValueCoded(this.patientID,"Fast track"),e=await a.getConceptID("yes");t&&(this.fastTrack=t===e)}async loadRegimenExtras(t=this.date){const s=await e.getJson(`programs/${e.getProgramID()}/patients/${this.patientID}/dosages`,{date:t});s&&(this.regimenExtras=Object.values(s))}async loadMedicationOrders(){const t=await a.getConceptID("Medication orders"),e=await a.getObs({concept_id:t,date:this.date,person_id:this.patientID,page_size:5});this.medicationOrders=e.map((t=>t.value_coded))}async loadHangingPills(){const t=await a.getAll(this.patientID,"Pills brought")||[];this.hangingPills=t.filter((t=>t.value_numeric>=1&&(!(!t.value_drug||o(t.obs_datetime)!==o(this.date))||t.order||!1))).map((t=>t?.order?.drug_order?.drug_inventory_id||t.value_drug))}async loadFastTrackMedications(){const t=(await s.getLastDrugsReceived(this.patientID)).map((async t=>{const{drug:e}=t,i=await s.getDrugDosages(this.patientID,e.drug_id);return{drug_id:e.drug_id,drug_name:e.name,units:e.units,am:i.am,noon:i.noon,pm:i.pm,frequency:t.frequency}}));this.fastTrackMedications=await Promise.all(t)}async loadTreatmentState(){const t={date:this.date},e=await a.getJson(`programs/${a.getProgramID()}/patients/${this.patientID}/status`,t);e&&(this.treatmentState=e.status)}findAndGroupDrugSideEffects(t){const e={};for(const s in this.sideEffects){const i=this.sideEffects[s];for(const a in i)t.includes(parseInt(a))&&(e[s]||(e[s]=[]),e[s]=[...e[s],...i[a]])}return e}calculatePillsPerDay(t,e,s){return parseFloat(t.toString())+e+s}estimatePackSize(t,e=0){const s=t*this.nextVisitInterval/(e||1);let i=Math.round(s);return i<=0&&(i+=1),i}calculateDosage(t,e){let s=0;return 0===e&&(s=t),0==t&&(s=e),t>0&&e>0&&(s=(t+e)/2),s}calculateEquivalentDosage(t,e){return t+e}calculateDateFromInterval(){const t=new Date(this.date);return t.setDate(t.getDate()+this.nextVisitInterval),n.toStandardHisFormat(t)}getDrugPackSize(t){if(t.pack_size)return t.pack_size;try{return t.barcodes[0].tabs}catch(e){return 30}}getInstructions(t,e,s,i){return`${t} :- Morning: ${e} ${i}, Evening: ${s} ${i}`}toOrderObj(t,e,s,i=0,a=0,r=""){return{drug_inventory_id:t,equivalent_daily_dose:this.calculateEquivalentDosage(i,a),start_date:this.date,auto_expire_date:this.calculateDateFromInterval(),units:s,instructions:this.getInstructions(e,i,a,s),dose:this.calculateDosage(i,a),frequency:r}}async getReasonForRegimenSwitch(){const t=await a.getFirstValueText(this.patientID,"Reason for ARV switch");return t||"N/A"}async createDrugOrder(t){return s.create({encounter_id:this.encounterID,drug_orders:t})}async createHangingPillsObs(t){return this.saveValueTextObs("appointment type",t)}async createRegimenSwitchObs(t){return this.saveValueTextObs("Reason for ARV switch",t)}})}}}));
