System.register(["./index-legacy-CNrLGT3P.js"],(function(e,t){"use strict";var r;return{setters:[e=>{r=e.ah}],execute:function(){const t="openmrs";e("s",((e="IndexedDBStorage")=>"IndexedDBStorage"===e?new n:new o));class o{existsinStorage(e){return localStorage.getItem(e)?Promise.resolve(!0):Promise.resolve(!1)}getFromStorage(e){return new Promise(((t,r)=>{const o=localStorage.getItem(e);if(o)return t(JSON.parse(o));t([])}))}deleteFromStorage(e){return localStorage.removeItem(e),!0}saveToStorage(e,t){return localStorage.setItem(e,JSON.stringify(t)),!0}}class n{db;constructor(){const e=indexedDB.open("offline_db",1);e.onupgradeneeded=function(){e.result.createObjectStore(t)},e.onsuccess=()=>{this.db=e.result}}existsinStorage(e){return new Promise(((r,o)=>{const n=this.db.transaction(t).objectStore(t).get(e);n.onsuccess=()=>{r(n.result)},n.onerror=()=>{o(n.error)}}))}getFromStorage(e,o){return new Promise(((n,s)=>{const a=this.db.transaction(t).objectStore(t).openCursor();a.onsuccess=()=>{const t=a.result;t?(t.key===e&&n(o?function(e,t){return r.filter(e.value,(e=>Object.entries(t).every((([t,o])=>r.isInteger(e[t])?!o||e[t]===o:!o||r.toLower(e[t]).includes(r.toLower(o))))))}(t,o):t.value.data),t.continue()):n([])},a.onerror=()=>{s("error")}}))}saveToStorage(e,r){return this.db.transaction(t,"readwrite").objectStore(t).put(r,e),!0}deleteFromStorage(e){return this.db.transaction(t,"readwrite").objectStore(t).delete(e),!0}}}}}));
