import{bQ as O,d as $,a5 as k,r as Y,ei as q,a9 as n,aB as L,dD as H,aq as y,aN as B,ad as U,bD as u,ag as R,bo as T,aO as A,aP as f,d8 as S,a6 as M,v as K,w as W,ab as w,u as G,x as j}from"./index-CyYd6aWW.js";import{H as X}from"./HisStandardForm-CuX9K_Ib.js";class Q extends O{constructor(t,s=-1){super(t,195,s)}}const z=$({components:{IonPage:k,HisStandardForm:X},setup(){const c=Y([]),t=new Q(-1),{htsClient:s,toOption:v,resolveObs:b,yesNoOptions:d,saveEncounter:m,mapStrToOptions:r,patientDashboardUrl:D}=q({onInitVisit:()=>{c.value=[N(),P()]}});function E(e,a){m({encounterName:"HTS Contact",encounterTypeID:t.encounterTypeID,computedData:a})}function F(e,a,i){let o={};return a.match(/unknown/i)?o=t.buildValueText(e,"Unknown"):i?o=t.buildValueDateEstimated(e,a):o=t.buildValueDate(e,a),o}function N(){return{id:"discuss_partner",helpText:"Discuss Partner",type:n.TT_YES_NO,isRequired:()=>!0,finalComputedValue:e=>({obs:t.buildValueCoded("Consent Confirmation",e)}),options:()=>[{label:"Does the client consent to discuss contact?",value:"",values:d()}]}}function P(){let e=null;return{id:"contact_index_page",helpText:"Registered contacts",type:n.TT_TABLE_VIEWER,onload:a=>e=a,condition:a=>a.discuss_partner==="Yes",isRequired:()=>!0,validation:a=>parseInt("".concat(a[0].value))<=0?["Contact list is empty!!. Please register some"]:null,options:async a=>{var g,x;let i={};a.contact_index_page!=null&&(i=a.contact_index_page[0]||{});const o=[...((g=i==null?void 0:i.other)==null?void 0:g.rows)||[]],h={...((x=i==null?void 0:i.other)==null?void 0:x.contacts)||{}},C=I();return await(await L(C,{formLabel:"Contact Registration #".concat(o.length+1),onFinish:async(ee,l)=>{const _=o.length+1;o.push([_,"".concat(l.given_name.val," ").concat(l.family_name.val),l.relation_to_contact.val,l.birth_date.val+" years",{name:"View",type:"button",color:"primary",action:async()=>{H({id:"summary_view",helpText:"More details",type:n.TT_SUMMARY,options:()=>Object.keys(l).filter(p=>l[p].val).map(p=>{var V;return{value:l[p].val,label:l[p].valLabel||((V=B.find(C,{id:p}))==null?void 0:V.helpText)}})},()=>y.dismiss())}},{name:"Remove",type:"button",color:"danger",action:async()=>{await U(" Are you sure you want to remove contact?")&&(delete e.data[0].other.contacts[_],e.data[0].label="".concat(parseInt("".concat(e.data[0].label))-1),e.data[0].value=parseInt(e.data[0].label),e.data[0].other.rows.splice(e.data[0].other.rows.findIndex(p=>p[0]===_),1))}}]),h[_]={...await t.buildValueText("Patient contacts construct","".concat(l.given_name.val," ").concat(l.family_name.val)),child:await b(l)},y.dismiss()}})).onDidDismiss(),[{label:"".concat(o.length),value:"".concat(o.length),other:{columns:["ID","Name","Relation","Age"],contacts:h,rows:o}}]},finalComputedValue:a=>({obs:Object.values(a[0].other.contacts).reduce((i,o)=>i.concat(o),[])}),config:{footerBtns:[{name:"Add New",slot:"end",color:"success",onClick:async()=>e.data=await e.options(e.fdata)}]}}}function I(){return[(()=>{const e=u.getGivenNameField();return e.finalComputedValue=a=>({val:a.value,obs:t.buildValueText("First name of contact","".concat(a.value))}),e})(),(()=>{const e=u.getFamilyNameField();return e.finalComputedValue=a=>({val:a.value,obs:t.buildValueText("Last name of contact","".concat(a.value))}),e})(),{id:"relation_to_contact",helpText:"Contact is a ___",type:n.TT_SELECT,finalComputedValue:e=>({val:e.value,obs:t.buildValueCoded("Relationships of contact",e.value)}),isRequired:()=>!0,options:()=>r(["Sexual Partner","Biological Child","Biological Parent"]),validation:e=>{const a=R.getAgeInYears(s.birthDate);return e.value==="Biological Child"&&a<13?["Contact is too young to have a biological child"]:e.value==="Sexual Partner"&&a<13?["Contact is too young to have a sexual partner"]:null}},...(()=>{const e=u.getDobConfig(!1),a=14;return e.helpText="Contact Birth",e.computeValue=i=>{const o=R.getAgeInYears(i);return{valLabel:"Age",val:o,obs:t.buildValueNumber("Age of contact",o)}},e.minDate=i=>{let o="";return i.relation_to_contact.value==="Biological Child"&&(o=T(s.birthDate).add(a,"year").format("YYYY-MM-DD")),o},e.maxDate=i=>{let o="";return i.relation_to_contact.value==="Biological Parent"&&(o=T(s.birthDate).subtract(a,"year").format("YYYY-MM-DD")),o},A(e)})(),(()=>{const e=u.getGenderField([{label:"Male",value:"M"},{label:"Female",value:"F"}]);return e.helpText="Sex of contact",e.finalComputedValue=a=>({val:a.value,obs:t.buildValueText("Gender of contact","".concat(a.value))}),e})(),{id:"contact_pregnancy_status",helpText:"Pregnancy status of contact",type:n.TT_SELECT,condition:e=>e.gender.value==="F",options:()=>[{label:"Non-Pregnant",value:"FNP"},{label:"Pregnant",value:"FP"},{label:"Breastfeeding",value:"FBf"},{label:"Unknown",value:"Unknown"}],finalComputedValue:e=>({val:e.value,obs:t.buildValueText("Contact pregnancy status","".concat(e.value))})},(()=>{const e=u.getCellNumberField();return e.finalComputedValue=a=>({val:a.value,obs:t.buildValueText("Contact phone number","".concat(a.value))}),e})(),{id:"contact_hiv_status",helpText:"HIV Status of the contact",type:n.TT_SELECT,isRequired:()=>!0,finalComputedValue:e=>({val:e.value,obs:t.buildValueCoded("Contact HIV tested",e.value)}),options:()=>r(["Positive","Negative","Unknown"])},{id:"last_time_hiv_tested",helpText:"When was Contact's Last HIV Test",type:n.TT_SELECT,condition:e=>e.contact_hiv_status.value&&e.contact_hiv_status.value=="Negative",isRequired:()=>!0,finalComputedValue:e=>({obs:t.buildValueText("Contact HIV test date","".concat(e.value," ago"))}),options:()=>r(["A year or more ago","Less than a year ago"]),beforeNext:async e=>e.value=="Less than a year ago"?await f("Last HIV test","Last HIV test","The case will be closed because the contact was recently tested and does not need to be followed up on.",[{name:"OK",slot:"start",color:"success"}],"primary",!1)=="OK":!0},{id:"ipv_status",helpText:"IPV Status",type:n.TT_SELECT,isRequired:()=>!0,condition:e=>e.contact_hiv_status.value=="Negative"&&e.last_time_hiv_tested.value=="A year or more ago"||e.contact_hiv_status.value=="Unknown",finalComputedValue:e=>({val:e.value,obs:t.buildValueText("IPV Status","".concat(e.value))}),options:()=>r(["Risk","No Risk"]),beforeNext:async e=>(e.value=="Risk"&&await f("IPV Risk","IPV Risk","This contact is at risk of IPV, therefore the case will be closed.",[{name:"OK",slot:"start",color:"success"}],"primary",!1),!0)},{id:"contact_consent",helpText:"Consent to reach out to the contact",type:n.TT_YES_NO,isRequired:()=>!0,condition:e=>e.ipv_status.value==="No Risk",finalComputedValue:e=>({val:e,obs:t.buildValueCoded("Consent to contact the contact",e)}),options:()=>[{label:"Does the client consent to reach out to the contact?",value:"",values:d()}]},{id:"reason_for_no_consent",helpText:"Would you like to share the reason for not consenting? (Optional)",type:n.TT_NOTE,condition:e=>e.contact_consent==="No",finalComputedValue:e=>{if(e&&e.value)return{val:e.value,obs:t.buildValueText("Reason for not consenting to contact contact","".concat(e.value))}}},{id:"notification_means",helpText:"Recommended mode of Notification",type:n.TT_SELECT,isRequired:()=>!0,condition:e=>e.contact_consent==="Yes",options:()=>r(["Active","Passive"]),finalComputedValue:e=>({val:e.value,obs:t.buildValueCoded("Notification Means",e.value)})},{id:"referral_type",helpText:"Referral Type",type:n.TT_SELECT,isRequired:()=>!0,condition:e=>e.notification_means.value==="Active",finalComputedValue:e=>({val:e.value,obs:t.buildValueCoded("Referral type",e.value)}),options:()=>r(["Provider referral","Contract referral","Dual referral"])},{id:"set_appointment",helpText:"Appointment Date (Within 2 weeks)",type:n.TT_DATE_PICKER,isRequired:()=>!0,defaultValue:()=>t.date,condition:e=>e.notification_means.value==="Active",finalComputedValue:e=>({val:S(e.value),obs:t.buildValueDate("Contact appointment date",e.value)}),config:{minDate:()=>t.date,maxDate:()=>T(t.date).add(15,"day").toDate(),infoItems:e=>[{label:"User set appointment",value:S(e)}]}},{id:"testing_location",helpText:"Testing Location",type:n.TT_SELECT,isRequired:()=>!0,finalComputedValue:e=>({obs:t.buildValueText("Contact Appointment location","".concat(e.value))}),options:()=>r(["Facility","Home/Other Facility"]),condition:e=>e.notification_means.value==="Active"},{...u.getCurrentRegionField(),helpText:"Contact's Current Region of Residence",config:{footerBtns:[{name:"Same as index",slot:"end",onClickComponentEvents:{setValue:()=>"Same as index"},onClick:()=>"Same as index"}]},condition:e=>e.notification_means.value==="Active",computedValue:e=>({val:e.label,obs:t.buildValueText("Contact current region",e.label)})},{...u.getCurrentDistrictField(),helpText:"Contact's Current District of Residence",defaultComputedOutput:void 0,condition:e=>!/same as index/i.test(e.current_region.label)&&e.notification_means.value==="Active",defaultOutput:e=>{if(/Same as index/i.test(e.current_region.label))return v(s.district)},computedValue:e=>({val:e.label,obs:t.buildValueText("Contact current district",e.label)})},{...u.getCurrentTAfield(),helpText:"Contact's Current TA of Residence",defaultComputedOutput:void 0,condition:e=>!/foreign|same as index/i.test("".concat(e.current_region.label))&&e.notification_means.value==="Active",defaultOutput:e=>{if(/Same as index/i.test(e.current_region.label))return v(s.currentTA)},computedValue:e=>({val:e.label,obs:t.buildValueText("Contact current TA",e.label)})},{...u.getCurrentVillageField(),helpText:"Contact's Current Village of Residence",defaultComputedOutput:void 0,condition:e=>!/foreign|same as index/i.test("".concat(e.current_region.label))&&e.notification_means.value==="Active",defaultOutput:e=>{if(/Same as index/i.test(e.current_region.label))return v(s.village)},computedValue:e=>({val:e.label,obs:t.buildValueText("Contact current village","".concat(e.value))})},{id:"contact_address",helpText:"Physical address",type:n.TT_NOTE,isRequired:()=>!0,condition:e=>e.notification_means.value==="Active",finalComputedValue:e=>({val:e.value,obs:t.buildValueText("Contact physical address","".concat(e.value))})},{id:"self_testkit_given",helpText:"Contact Self Test Kit Given",type:n.TT_YES_NO,isRequired:()=>!0,condition:e=>e.contact_consent==="No"||e.notification_means.value==="Passive",finalComputedValue:e=>({obs:t.buildValueCoded("Self-Test kit given",e)}),options:()=>[{label:"Was a self test kit given to the Index for their contact?",value:"",values:d()}]},{id:"reason_for_not_giving_self_testkit",helpText:"Reason for not providing a self test (Optional)",type:n.TT_NOTE,condition:e=>e.self_testkit_given==="No",finalComputedValue:e=>{if(e)return{val:e.value,obs:t.buildValueText("Reason for not giving self-test kit","".concat(e.value))}}},{id:"frs_given",helpText:"FRS Given",type:n.TT_YES_NO,isRequired:()=>!1,condition:e=>e.notification_means.value==="Passive",finalComputedValue:e=>({obs:t.buildValueCoded("FRS given",e)}),options:()=>[{label:"Was FRS given to the Index client for their contact?",value:"",values:d()}]},{id:"reason_for_not_giving_frs",helpText:"Reason for not providing FRS",type:n.TT_TEXT,isRequired:()=>!0,condition:e=>e.frs_given==="No",finalComputedValue:e=>({obs:t.buildValueText("Reason for not giving FRS","".concat(e.value))})},{id:"contact_on_art",helpText:"On ART",type:n.TT_YES_NO,isRequired:()=>!1,condition:e=>e.contact_hiv_status.value&&e.contact_hiv_status.value==="Positive",finalComputedValue:e=>({obs:t.buildValueCoded("Contact ever registered at ART clinic",e)}),options:()=>[{label:"Is the Contact on ART?",value:"",values:d()}]},{id:"index_contact",helpText:"Contact Indexing",type:n.TT_YES_NO,isRequired:()=>!0,condition:e=>e.contact_on_art&&e.contact_on_art==="No",options:()=>[{label:"Do you want to convert the contact to an index client?",value:"",values:d()}],finalComputedValue:e=>({obs:t.buildValueCoded("Index patient",e)})},{id:"art_start_location",helpText:"Contact ART start location?",type:n.TT_SELECT,isRequired:()=>!1,finalComputedValue:e=>({obs:t.buildValueText("Contact location of ART initiation","".concat(e.value))}),options:()=>r(["Same Health Facility","Other Health Facility","Unknown"]),condition:e=>e.contact_on_art&&e.contact_on_art==="Yes"},...A({id:"date_started_art",helpText:"Contact Art Start",required:!1,condition:e=>e.contact_on_art&&e.contact_on_art==="Yes",minDate:()=>s.birthDate,maxDate:()=>t.getDate(),estimation:{allowUnknown:!0},computeValue:(e,a)=>({date:e,isEstimate:a,obs:F("Contact Date ART started",e,a)})},t.getDate()),{id:"contact_art_number",helpText:"Contact ART number",type:n.TT_TEXT,isRequired:()=>!1,condition:e=>e.contact_on_art&&e.contact_on_art==="Yes",beforeNext:async e=>(e.value==null||e.value.trim()==""||e.value=="Unknown"?await f("Contact ART number","Contact ART status","Since  an ART number has not been submitted for this HIV+ contact. The case will remian open, until the ART number is added.",[{name:"OK",slot:"start",color:"success"}],"primary",!1):await f("Contact ART number","Contact ART status","The contact is already on ART, therefore does not need follow up. This contact case will be closed.",[{name:"OK",slot:"start",color:"success"}],"primary",!1),!0),computedValue:e=>({tag:"reg",obs:t.buildValueText("Contact ART number at previous location","".concat(e.value))})}]}return{patientDashboardUrl:D,onFinish:E,fields:c}}});function J(c,t,s,v,b,d){const m=w("his-standard-form"),r=w("ion-page");return G(),K(r,null,{default:W(()=>[j(m,{formLabel:"Contact tracing",fields:c.fields,onFinishAction:c.onFinish,cancelDestinationPath:c.patientDashboardUrl()},null,8,["fields","onFinishAction","cancelDestinationPath"])]),_:1})}const ne=M(z,[["render",J]]);export{ne as default};
