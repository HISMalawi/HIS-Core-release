import{H as f}from"./HisStandardForm-DO24IwRD.js";import{bf as S,d as w,K as _,F as b,V as v,W as r,t as s,n as g,q as h,o as y,c as x,w as C,b as T,cA as c,I as A}from"./index-ox16Qeox.js";import{u as D}from"./useEncounter-BLqGjVJ4.js";import"./isEmpty-B1wJ0NxN.js";import"./_Set-j4-Dv5el.js";import"./_setToArray-Dz1d9BZs.js";import"./encounter_guidelines-BOX5-MUG.js";import"./GuidelineEngine-D6V1_Znr.js";class P extends S{constructor(i,a){super(i,42,a)}}const W=w({__name:"AdmitPatient",setup(l){const i=_([]);let a;const{goToNextTask:u,patientDashboardUrl:d}=D((e,o)=>{a=new P(o,e),i.value.push(p())});async function m(e,o){const t=await Promise.all([o.internal_sections]);await a.createEncounter(),await a.saveObservationList(t),u()}function p(){return{id:"internal_sections",helpText:"Select Ward/internal section",type:b.TT_SELECT,validation:e=>v.required(e),computedValue:e=>a.buildValueText("Admit to ward",e.label),options:()=>r.getInternalSections(),config:{showKeyboard:!0,footerBtns:[{name:"Add Section",slot:"end",color:"success",onClick:async(e,o,t)=>{if(typeof t.filter!="string"||t.filter.length<3)return s("Please enter a valid section name");if(t.filtered.some(n=>n.label.toLowerCase()===t.filter.toLowerCase()))return s("Section already existing");if(await g("Do you want to add internal section?")){const n=await r.createInternalSection(t.filter.toUpperCase());n?(t.filter=n.name,t.listData=[{label:n.name,value:n.id},...t.listData]):h("Unable to add ".concat(t.filter))}}}]}}}return(e,o)=>(y(),x(c(A),null,{default:C(()=>[T(f,{cancelDestinationPath:c(d),fields:i.value,onFinishAction:m,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{W as default};
