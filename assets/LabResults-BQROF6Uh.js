import{H as R}from"./HisStandardForm-CuX9K_Ib.js";import{d as I,as as L,K as $,ah as S,bz as V,ad as E,a9 as n,aa as u,O as _,aN as f,ag as b,aO as x,aj as C,a6 as D,v as F,ab as O,u as w}from"./index-CyYd6aWW.js";import{P as A}from"./patient_lab_result_service-DKEEcvPN.js";const H=I({components:{HisStandardForm:R},data:()=>({fieldComponent:"",labResult:{},hisFormKey:0,patient:{},fields:[],selectedTest:{},testOptions:[],testIndicators:[]}),watch:{$route:{async handler({params:i}){i&&i.patient_id&&(this.patient=i.patient_id,this.labResult=new A(this.patient),await this.initData(),this.fields=this.getFields())},deep:!0,immediate:!0}},methods:{async onFinish(i,e){try{const r=Object.values(e).filter(a=>a.tag==="result_indicator"&&a.measures).map(a=>a.measures);this.labResult.setTestID(this.selectedTest.value),this.labResult.setResultDate(e.result_date),await this.labResult.createEncounter(),await this.labResult.createLabResult(r),L.invalidate("PATIENT_LAB_ORDERS"),this.testOptions=[],this.selectedTest={},this.testIndicators=[],await this.initData(),this.hisFormKey=Math.floor(Math.random()*5e3),$("Lab result saved!")}catch(r){S("".concat(r)),console.error(r)}},generateTestIndicatorsFields(){return this.testIndicators.reduce((i,e)=>i.concat(this.buildTestIndicatorFields(e.indicatorId,e.indicatorName,e.specimen,e.testId)),[])},async validateVLresults(i,e,r){if(i!=="HIV viral load")return!0;const a=r.substring(0,1),s=r.substring(1,r.length);return V.isValidVLResult(e,a,s)?!0:!await E("Invalid results for ".concat(e," HIV viral load"),{cancelBtnLabel:"Process result",confirmBtnLabel:"Re-enter result"})},alphaValueIsValid(i){try{return!!i.match(/^(>|<|=)(.*)/)}catch(e){return!1}},numericValueIsValid(i){try{return!!i.match(/^(=|<|>)([0-9]*)$/m)}catch(e){return!1}},isCrAgResult(i){return/serum crag/i.test(i)},isMalariaResult(i){return!!i.match(/mrdt|malaria/i)},isUrineLamResult(i){return!!i.match(/Lam/i)},buildTestIndicatorFields(i,e,r,a){const s=i*a,l=t=>[this.selectedTest.value===a,!!f.find(t.result_indicators,{label:e})].every(Boolean),d=t=>this.validateVLresults(e,r,t.value.toString()),o=(t,h)=>{if(t.value==="Other"&&e.match(/HIV viral load/i))return{};const m=this.isMalariaResult(e)||this.isUrineLamResult(e)||this.isCrAgResult(e)?"text":h["type_".concat(s)].value;let c=this.isMalariaResult(e)||this.isUrineLamResult(e)||this.isCrAgResult(e)?"="+t.value:"".concat(t.value);const y=/[=><]/i.test("".concat(c).charAt(0));let p="=";y&&(p=c.charAt(0),c=c.substring(1));const v=m==="numeric"?parseInt(c):c,T=h.result_indicators.filter(g=>g.value===i)[0];return{tag:"result_indicator",measures:{indicator:{concept_id:T.value},value:v,value_modifier:p,value_type:m},result:v,modifier:p,test:T.label}};return[{id:"type_".concat(s),helpText:"Result type (".concat(e,")"),type:n.TT_SELECT,group:"test_indicator",condition:t=>l(t)&&!this.isMalariaResult(e)&&!this.isUrineLamResult(e)&&!this.isCrAgResult(e),appearInSummary:()=>!1,validation:t=>u.required(t),options:()=>[{label:"Numeric (numbers only)",value:"numeric"},{label:"Alphanumeric(text and numbers)",value:"text"}]},{id:"urine_result_".concat(s),helpText:"Select Test Result (".concat(e,")"),type:n.TT_SELECT,group:"test_indicator",computedValue:o,validation:t=>u.required(t),condition:t=>l(t)&&this.isUrineLamResult(e),options:()=>[{label:"Positive",value:"positive"},{label:"Negative",value:"negative"}]},{id:"crag_result_".concat(s),helpText:"Select Serum CrAg Result (".concat(e,")"),type:n.TT_SELECT,group:"test_indicator",computedValue:o,validation:t=>u.required(t),condition:t=>l(t)&&this.isCrAgResult(e),options:()=>[{label:"Positive",value:"positive"},{label:"Negative",value:"negative"}]},{id:"num_".concat(s),helpText:"Test Result (".concat(e,")"),type:n.TT_TEXT,group:"test_indicator",computedValue:o,beforeNext:d,onValue:t=>/hiv/i.test(e)&&t&&t.value&&!this.numericValueIsValid(t.value.toString())?(_("You must enter a modifer and numbers only. i.e =90 / >19 / < 750"),!1):!0,validation:t=>u.required(t),condition:t=>l(t)&&t["type_".concat(s)].value==="numeric",config:{customKeyboard:[[["1","2","3"],["4","5","6","=","<",">"],["7","8","9","."],["","0",""]],[["Delete"]]]}},{id:"alpha_".concat(s),helpText:"Test Result (".concat(e,")"),type:n.TT_TEXT,group:"test_indicator",computedValue:o,validation:t=>u.required(t),condition:t=>l(t)&&t["type_".concat(s)].value==="text"&&!e.match(/HIV viral load/i)},{id:"VL_alpha_".concat(s),helpText:"Select Test Result (".concat(e,")"),type:n.TT_SELECT,group:"test_indicator",computedValue:o,validation:t=>u.required(t),condition:t=>l(t)&&t["type_".concat(s)].value==="text"&&e.match(/HIV viral load/i),options:()=>[{label:"Collect Another Sample",value:"=Collect Another Sample"},{label:"<LDL",value:"<LDL"},{label:"=LDL",value:"=LDL"},{value:"Other",label:"Other"}]},{id:"other_VL_alpha_".concat(s),helpText:"Test Result (".concat(e,")"),type:n.TT_TEXT,group:"test_indicator",onValue:t=>t&&t.value&&!this.alphaValueIsValid(t.value.toString())?(_("You must enter a modifier plus result (for example =LDL)"),!1):!0,computedValue:o,validation:t=>u.required(t),condition:t=>l(t)&&t["type_".concat(s)].value==="text"&&e.match(/HIV viral load/i)&&t["VL_alpha_".concat(s)].value==="Other"},{id:"malaria_result_".concat(s),helpText:"Select Test Result (".concat(e,")"),type:n.TT_SELECT,group:"test_indicator",computedValue:o,validation:t=>u.required(t),condition:t=>l(t)&&this.isMalariaResult(e),options:()=>e.match(/mrdt/i)?[{label:"Positive",value:"positive"},{label:"Negative",value:"negative"}]:[{label:"Parasites seen",value:"parasites seen"},{label:"No parasites seen",value:"no parasites seen"}]}]},async initData(){const i=await this.labResult.getTestsWithoutResults();for(const e in i){const r=i[e];for(const a in r.tests){const s=r.tests[a];if(!f.isEmpty(s.result))continue;this.labResult.setTestTypeID(s.concept_id);const d=(await this.labResult.getTestIndicators()).map(o=>({testId:s.id,indicatorName:o.name,indicatorId:o.concept_id,specimen:r.specimen.name}));this.testIndicators=[...this.testIndicators,...d],this.testOptions.push({label:s.name,value:s.id,other:{accession:r.accession_number,specimen:r.specimen.name,test:s.name,orderDate:r.order_date,testIndicators:d}})}}},getFields(){return[{id:"test_type",helpText:"Tests without results",type:n.TT_TABLE_VIEWER,options:()=>[{label:"",value:"",other:{rows:this.testOptions.map(e=>[e.other.accession,e.other.specimen,e.other.test,b.toStandardHisDisplayFormat(e.other.orderDate),{type:"button",name:"Select",action:()=>{this.selectedTest=e,this.$nextTick(()=>this.fieldComponent="year_result_date")}}]),columns:["Acession#","Specimen","Test","Order date"]}}],validation:i=>u.required(i),config:{overrideDefaultFooterBtns:{nextBtn:{name:"Finish",onClick:()=>this.$router.back()}},hiddenFooterBtns:["Clear","Cancel"]}},...x({id:"result_date",helpText:"Result",required:!0,estimation:{allowUnknown:!1},minDate:()=>b.toStandardHisFormat(this.selectedTest.other.orderDate),maxDate:()=>C.getSessionDate(),computeValue:i=>i}),{id:"result_indicators",helpText:"Select test result indicators",type:n.TT_MULTIPLE_SELECT,validation:i=>u.required(i),options:()=>this.selectedTest.other.testIndicators.map(i=>({label:i.indicatorName,value:i.indicatorId}))},...this.generateTestIndicatorsFields(),{id:"entry_confirmation",helpText:"Confirm entry",type:n.TT_TABLE_VIEWER,options:(i,e)=>[{label:"",value:"",other:{rows:Object.values(e).filter(a=>typeof a=="object"&&a!=null&&a.tag==="result_indicator").map(a=>[a.test,a.modifier,a.result]),columns:["Test","Modifier","Result"]}}]}]}}});function q(i,e,r,a,s,l){const d=O("his-standard-form");return w(),F(d,{key:i.hisFormKey,fields:i.fields,activeField:i.fieldComponent,skipSummary:!0,onOnIndex:e[0]||(e[0]=o=>i.fieldComponent=""),onOnFinish:i.onFinish},null,8,["fields","activeField","onOnFinish"])}const M=D(H,[["render",q]]);export{M as default};
