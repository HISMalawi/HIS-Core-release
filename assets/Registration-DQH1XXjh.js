import{H as I}from"./HisStandardForm-BRJuunr9.js";import{bQ as A,d as D,r as w,ad as n,ae as o,bY as S,ci as u,W as l,bX as h,a as R,c as x,u as C,aw as V,am as F,dC as P}from"./index-BXJohQKw.js";import{u as L}from"./useEncounter-6SffLPm5.js";import{b as d,r as O}from"./commons-Dj7e3awy.js";import"./isEmpty-DHS-1Ust.js";import"./encounter_guidelines-B0VbSS_4.js";import"./GuidelineEngine-D6V1_Znr.js";class M extends A{constructor(t,i){super(t,104,i)}}const X=D({__name:"Registration",setup(c){let t,i;const s=w([]),{goToNextTask:p,patientDashboardUrl:f}=L((e,a,r)=>{i=r,t=new M(a,e),s.value=[b(),g(),m(),y(),N()]});async function v(e,a){if(await T(e),!await t.createEncounter())return l("Unable to create registration encounter");const E=await O({...a});if(!await t.saveObservationList(E))return l("Unable to save observations");p()}async function T(e){const a=e.national_id_available,r=e.national_id;a&&a.value==="Yes"&&(await i.updateMWNationalId(r.value),V.invalidate("ACTIVE_PATIENT"))}async function _(e){return e?(await F.findByOtherID(P,e)).length>0:!1}function b(){return{id:"visit_type",helpText:"Type of visit",type:n.TT_SELECT,validation:e=>o.required(e),computedValue:e=>({obs:t.buildValueCoded("Type of visit",e.value)}),options:()=>[{label:"New",value:"New patient"},{label:"Referral",value:"Referral"},{label:"Re-visiting",value:"Re-visiting"}]}}function g(){return{id:"referring_facility_name",helpText:"Referred from",type:n.TT_SELECT,validation:e=>o.required(e),computedValue:({label:e})=>({obs:t.buildValueText("Referred from",e)}),condition:e=>e.visit_type.value==="Referral",options:(e,a="")=>S(a),config:{showKeyboard:!0,isFilterDataViaApi:!0}}}function m(){return{id:"national_id_available",helpText:"National ID Available",type:n.TT_SELECT,validation:e=>o.required(e),condition:()=>{var e;return u((e=i==null?void 0:i.patient)==null?void 0:e.date_created)!=u(t.date)&&i.getMWNationalID()==="Unknown"},options:()=>d(),appearInSummary:()=>!1}}function y(){return{id:"national_id",helpText:"Enter National ID",type:n.TT_TEXT,validation:e=>o.isMWNationalID(e),condition:e=>e.national_id_available.value==="Yes",beforeNext:async e=>e.value&&await _(e.value.toString())?(l("National ID already exists"),!1):!0,summaryMapValue:({value:e})=>({value:e,label:"National ID"}),config:{casing:"uppercase",customKeyboard:[h,[["Delete"]]]}}}function N(){return{id:"patient_pregnant",helpText:"Patient pregnant",type:n.TT_SELECT,validation:e=>o.required(e),computedValue:({value:e})=>({obs:t.buildValueCoded("PATIENT PREGNANT",e)}),condition:()=>i.isChildBearing(),options:()=>d()}}return(e,a)=>(R(),x(I,{cancelDestinationPath:C(f),fields:s.value,onFinishAction:v},null,8,["cancelDestinationPath","fields"]))}});export{X as default};
