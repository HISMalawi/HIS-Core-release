var _=Object.defineProperty;var f=(g,o,t)=>o in g?_(g,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):g[o]=t;var c=(g,o,t)=>f(g,typeof o!="symbol"?o+"":o,t);import{aj as a,cn as S,dh as m,aV as R,M as A,ag as l}from"./index-BMVUUxuO.js";const w={one:"AL 1",two:"AL 2",three:"AL 3",four:"LA 4"},y=["Diabetes","Hypertension","Stroke","Suspected cancer","Confirmed cancer","Palliative cancer","Asthma","Depression","Acute psychosis","Chronic psychosis","Epilepsy"],b=["Organic mental disorder (Chronic)","Organic mental disorder (acute)","Alcohol use mental disorder","Drug use mental disorder","Schizophrenia","Acute and transient psychotic disorder","Schizo-affective disorder","Mood-affective disorder (MANIC)","Mood-affective disorder (BIPOLAR)","Mood-affective disorder (DEPRESSION)","Anxiety disorder","Stress reaction adjustment disorder","Dissociative conversion disorder","Somatoform disorder","Puerperal mental disorder","Personality/Behaviour disorder","Mental retardation","Psychological mental disorder","Hyperkinetic conduct disorder","Epilepsy"],$={total:"Total Clients",prev_pos_not_on_art:"Pre Pos not on ART",prev_pos_on_art:"Pre Pos on ART",new_neg:"New Neg",new_pos:"New Pos",not_done:"Not Done",screened:"Screened for TB",not_screened:"Not Screened for TB"};class F extends a{constructor(){super();c(this,"programID");c(this,"startDate");c(this,"endDate");c(this,"date");c(this,"epiweek");this.endDate="",this.startDate="",this.epiweek="",this.date=a.getSessionDate(),this.programID=a.getProgramID()}async getDisaggReport(){const t=await this.getReport("programs/".concat(this.programID,"/reports/opd_disaggregated")),e=this.aggregateDisagReportData(t.data);return[...e.F.rows,...e.M.rows,{ageGroup:"All",gender:"Male",...e.M.aggregate},...await this.buildMaternityAgreggateRows(e.F.aggregate,t.aggregated)]}aggregateDisagReportData(t){return Object.entries(t).reduce((e,[i,d])=>(i!=="Unknown"&&Object.entries(d).forEach(([s,r])=>{e[s].rows.push({ageGroup:i,gender:S(s),...r}),Object.entries(r).forEach(([n,p])=>{var h;e[s].aggregate[n]=[...(h=e[s].aggregate[n])!=null?h:[],...p]})}),e),{M:{rows:[],aggregate:{}},F:{rows:[],aggregate:{}}})}async getMaternalStatus(t,e="pepfar"){const i=m.parameterizeObjToString(this.buildRequest({report_definition:e}));return a.postJson("vl_maternal_status?".concat(i),{patient_ids:t})}async buildMaternityAgreggateRows(t,e,i="pepfar"){const d=Object.keys(t);let s=[],r={FBf:[],FP:[]};if(e)r.FBf=e.bf,r.FP=e.p;else{const n=R.uniq(Object.values(t).flat(1).map(p=>p instanceof Object?p.patient_id:p));r=await this.getMaternalStatus(n,i)}return s=r.FBf.concat(r.FP),["FP","FNP","FBf"].map(n=>d.reduce((p,h)=>({[h]:t[h].filter(D=>{const u=D instanceof Object?D.patient_id:D;return n==="FNP"?!s.includes(u):r[n].includes(u)}),...p}),{ageGroup:"All",gender:n}))}getMentalHealth(){return this.getReport("programs/".concat(this.programID,"/reports/mental_health"))}getCasesSeen(){return this.getReport("programs/".concat(this.programID,"/reports/cases_seen"))}getPatientsWithNIDs(){return this.getReport("with_nids")}getClinicRegistrations(){return this.getReport("registration")}getAttendance(){return this.getReport("programs/".concat(this.programID,"/reports/attendance"))}getDrugs(){const t="programs/".concat(this.programID,"/reports/drug");return a.getJson(t,{start_date:this.startDate,end_date:this.endDate,date:this.date})}getDiagnosis(){const t="programs/".concat(this.programID,"/reports/diagnosis");return a.getJson(t,{start_date:this.startDate,end_date:this.endDate,date:this.date})}getDiagnosisByAddress(){return this.getReport("diagnosis_by_address")}getLaPrescriptions(){const t="programs/".concat(this.programID,"/reports/la_prescriptions");return a.getJson(t,{start_date:this.startDate,end_date:this.endDate})}getMalariaReport(){const t="programs/".concat(this.programID,"/reports/malaria_report");return a.getJson(t,{start_date:this.startDate,end_date:this.endDate,date:this.date})}printLaReport(t){const e=new A,i="programs/".concat(this.programID,"/barcodes/la_report"),d={"date[start]":this.startDate,"date[end]":this.endDate};return Object.keys(w).forEach((s,r)=>{r++,d["".concat(r,"[prescription]")]=t["total_la_".concat(s,"_prescribed_drugs")],d["".concat(r,"[dispensed]")]=t["total_la_".concat(s,"_dispensed_drugs")]}),e.printLbl("".concat(i,"?").concat(m.parameterizeObjToString(d)))}getDateIntervalPeriod(){return"".concat(l.toStandardHisDisplayFormat(this.startDate)," - ").concat(l.toStandardHisDisplayFormat(this.endDate))}setStartDate(t){this.startDate=t}setEndDate(t){this.endDate=t}setEpiWeek(t){this.epiweek=t}getReportPeriod(){return this.startDate&&this.endDate?"".concat(l.toStandardHisDisplayFormat(this.startDate)," - ").concat(l.toStandardHisDisplayFormat(this.endDate)):"-"}getReport(t,e={}){return a.getJson(t,this.buildRequest(e))}buildRequest(t={}){const e={date:this.date,program_id:this.programID};return this.startDate&&this.endDate&&(e.start_date=this.startDate,e.end_date=this.endDate),this.epiweek&&(e.epiweek=this.epiweek),{...e,...t}}}export{$ as D,w as L,b as M,y as N,F as O};
