System.register(["./EncounterMixin.vue_vue_type_script_lang-legacy-qUwf12Yn.js","./index-legacy-CA6M7ipO.js","./encounter_guidelines-legacy-Bcz_Mw7r.js","./GuidelineEngine-legacy-KsvQuFdF.js","./HisStandardForm-legacy-a9YJRGaH.js"],(function(e,t){"use strict";var i,a,r,l,o,n,s,d,u,h,p,v,c,b,T;return{setters:[e=>{i=e._},e=>{a=e.bQ,r=e.d,l=e.I,o=e.ad,n=e.ae,s=e.aj,d=e.dQ,u=e.aN,h=e.aa,p=e.af,v=e.a,c=e.c,b=e.w,T=e.b},null,null,null],execute:function(){class t extends a{para;gravida;nextGravida;constructor(e,t){super(e,82,t),this.para=0,this.gravida=0,this.nextGravida=0}async initData(){this.para=await this.getFirstValueNumber("Parity")||0,this.gravida=await this.getFirstValueNumber("Gravida")||0,this.nextGravida=this.gravida>0?this.gravida+1:0}}const y=r({components:{IonPage:l},mixins:[i],data:()=>({service:{},delieveryOptionData:{},abortionOptionData:{}}),watch:{ready:{async handler(e){e&&(this.service=new t(this.patientID,this.providerID),await this.service.initData(),this.fields=this.getFields())},immediate:!0}},methods:{async onFinish(e,t){const i=await this.resolveObs(t);await this.service.createEncounter(),await this.service.saveObservationList(i),this.nextTask()},buildAbortionFields(){return[{label:"Year of abortion",value:"",required:!0,field:{id:"year",helpText:"Year of abortion",type:o.TT_NUMBER,computedValue:e=>this.service.buildValueNumber("Year of abortion",e.value),validation:e=>this.validateSeries([()=>n.required(e),()=>{const[t]=this.patient.getBirthdate().split("-"),[i]=this.service.getDate().split("-");return n.rangeOf(e,t,i)}])}},{label:"Place of abortion",value:"",required:!0,field:{id:"place_of_abortion",helpText:"Place of abortion",type:o.TT_SELECT,computedValue:e=>this.service.buildValueText("Place of birth",e.value),validation:e=>this.validateSeries([()=>n.required(e)]),options:()=>this.mapStrToOptions(["Health facility","In transit","TBA","Home","Other"])}},{label:"Type of abortion",value:"",required:!0,field:{id:"type_of_abortion",helpText:"Type of abortion",type:o.TT_SELECT,computedValue:e=>this.service.buildValueCoded("Type of Abortion",e.value),validation:e=>this.validateSeries([()=>n.required(e)]),options:()=>this.mapStrToOptions(["Complete abortion","Incomplete abortion"])}},{label:"Procedure done",value:"",required:!0,field:{id:"procedure_done",helpText:"Procedure done",type:o.TT_SELECT,validation:e=>this.validateSeries([()=>n.required(e)]),computedValue:e=>this.service.buildValueText("Procedure done",e.value),options:()=>this.mapStrToOptions(["Manual Vacuum Aspiration (MVA)","Evacuation","None"])}},{label:"Gestation (weeks)",value:"",required:!0,field:{id:"gestation_weeks",helpText:"Gestation (weeks)",type:o.TT_NUMBER,computedValue:e=>this.service.buildValueNumber("Gestation",e.value),validation:e=>this.validateSeries([()=>n.required(e),()=>n.rangeOf(e,0,28)])}}]},buildBirthDelieveryFields(){return[{label:"Year of birth",value:"",required:!0,field:{id:"year",helpText:"Year of birth",type:o.TT_NUMBER,computedValue:e=>this.service.buildValueNumber("Year of Birth",e.value),validation:e=>this.validateSeries([()=>n.required(e),()=>{const[t]=this.patient.getBirthdate().split("-"),[i]=this.service.getDate().split("-");return n.rangeOf(e,t,i)}])}},{label:"Place of birth",value:"",required:!0,field:{id:"place_of_birth",helpText:"Place of birth",type:o.TT_SELECT,computedValue:e=>this.service.buildValueText("Place of birth",e.value),validation:e=>n.required(e),options:()=>this.mapStrToOptions(["Health facility","In transit","TBA","Home"])}},{label:"Gestation (weeks)",value:"",required:!0,field:{id:"gestation_weeks",helpText:"Gestation (weeks)",type:o.TT_NUMBER,computedValue:e=>this.service.buildValueNumber("Gestation",e.value),validation:e=>this.validateSeries([()=>n.required(e),()=>n.rangeOf(e,24,42)])}},{label:"Method of delivery",value:"",required:!0,field:{id:"method_of_delivery",helpText:"Method of delivery",type:o.TT_SELECT,computedValue:e=>this.service.buildValueText("Method of delivery",e.value),validation:e=>n.required(e),options:()=>this.mapStrToOptions(["Spontaneous Vertex","Caesarean Section","Vacuum extraction delivery","Breech","Forceps","Others"])}},{label:"Condition at birth",value:"",required:!0,field:{id:"condition_at_birth",helpText:"Condition at birth",type:o.TT_SELECT,computedValue:e=>this.service.buildValueText("Condition at Birth",e.value),onValueUpdate:(e,t)=>{t.forEach((t=>{"Alive now"===t.label&&(t.required="Alive"===e.value,t.disabled="Alive"!=e.value)}))},validation:e=>n.required(e),options:()=>this.mapStrToOptions(["Alive","Macerated Still Birth (MSB)","Fresh Still Birth (FSB)"])}},{label:"Birth weight",value:"",required:!0,field:{id:"birth_weight",helpText:"Birth weight",type:o.TT_TEXT,computedValue:e=>this.service.buildValueText("Birth weight",e.value),validation:e=>this.validateSeries([()=>n.required(e),()=>"Unknown"==e.value||`${e.value}`.match(/^\d{1,3}\.\d{1,5}$/)?null:[`Invalid weight ${e.value}. Don't forget decimal point`],()=>["N/A","Unknown"].includes(`${e.value}`)?null:n.rangeOf(e,1,5)]),config:{customKeyboard:[[["1","2","3"],["4","5","6"],["7","8","9"],["","0","."]],[["Unknown","Delete"]]],onUnknownEstimateField:()=>({id:"birth_weight_estimate",helpText:"Birth weight estimate",type:o.TT_SELECT,validation:e=>n.required(e),options:()=>this.mapOptions(["Normal","Big baby","Small baby"])}),noChars:!1}}},{label:"Alive now",value:"",disabled:!0,required:!1,field:{id:"alive_now",helpText:"Alive now",type:o.TT_SELECT,computedValue:e=>this.service.buildValueCoded("Alive",e.value),onValueUpdate:(e,t)=>{t.forEach((t=>{"Age at death"===t.label&&(t.required="No"===e.value,t.disabled="Yes"===e.value)}))},validation:e=>this.validateSeries([()=>n.required(e)]),options:()=>this.yesNoOptions()}},{label:"Age at death",value:"",disabled:!0,required:!1,field:{id:"age_at_death",helpText:"Age at death",type:o.TT_AGE_INPUT,computedValue:e=>this.service.buildValueText("Age at Death",e.value),validation:e=>this.validateSeries([()=>n.required(e)])}}]},constructOptionData(e,t,i){const a=parseInt(`${t}`),r={...e};Object.keys(r).forEach((e=>{parseInt(e)+1>a&&delete r[e]}));for(let l=0;l<a;++l)r[l]||(r[l]=i);return r},getFields(){return[{id:"gravida",helpText:"Gravida",type:o.TT_NUMBER,defaultValue:()=>this.service.nextGravida>0?this.service.nextGravida:null,beforeNext:async e=>{const t=parseInt(`${e.value}`);return t<=1&&(this.abortionOptionData={},this.delieveryOptionData={}),!(t>9&&!(await s("The value is greater than maximum 9. Are you sure about this value?")))},computedValue:e=>this.service.buildValueNumber("Gravida",e.value),validation:e=>this.validateSeries([()=>n.required(e),()=>n.rangeOf(e,this.service.nextGravida||1,19)])},{id:"para",helpText:"Para",type:o.TT_NUMBER,beforeNext:(e,t)=>{this.delieveryOptionData=this.constructOptionData(this.delieveryOptionData,e.value,{});const i=parseInt(`${t.gravida.value}`)-parseInt(`${e.value}`)-1;return this.abortionOptionData=this.constructOptionData(this.abortionOptionData,i,this.buildAbortionFields()),!0},condition:e=>e.gravida.value>1,computedValue:e=>this.service.buildValueNumber("Parity",e.value),validation:(e,t)=>this.validateSeries([()=>n.required(e),()=>n.rangeOf(e,this.service.para,t.gravida.value-1)])},{id:"known_pregnancies",helpText:"Pregnancies with available information",type:o.TT_ANC_PREGNANCY_INPUT_CONFIG,onValue:e=>(e.forEach(((e,t)=>{e.isChecked?this.delieveryOptionData[t]=this.constructOptionData(this.delieveryOptionData[t],e.value,this.buildBirthDelieveryFields()):this.delieveryOptionData[t]={}})),!0),condition:e=>e.gravida.value>1&&e.para.value>0,options:e=>Object.keys(this.delieveryOptionData).map((t=>{const i=parseInt(t)+1;return{label:`${i} <sup>${d(i)}</sup>`,value:Object.keys(this.delieveryOptionData[t]).length||1,isChecked:!(e.known_pregnancies||[]).length||!u.isEmpty(this.delieveryOptionData[t])}})),config:{hiddenFooterBtns:["Clear"],pregnancyCount:e=>e.para.value}},(()=>({id:"pregnancy_details",helpText:"Pregnancy details",type:o.TT_ANC_PREGNANCY_DETAILS_INPUT,condition:e=>{const t=parseInt(`${e.gravida.value}`)-parseInt(`${e.para.value}`)-1;return e.gravida.value>1&&(t>=1||e.known_pregnancies.some((e=>e.isChecked)))},validation:e=>this.validateSeries([()=>n.required(e),()=>e.map((e=>e.other.data)).flat(2).every((e=>!("boolean"==typeof e.required&&e.required&&!`${e.value}`.length)))?null:["Pregnancy details incomplete"]]),config:{hiddenFooterBtns:["Clear"]},onValue:e=>{e.forEach((e=>{switch(e.other.type){case"delieveryOptionData":this.delieveryOptionData[e.other.index]=e.other.data;break;case"abortionOptionData":this.abortionOptionData[e.other.index]=e.other.data[0]}}))},computedValue:e=>{return(t=e,t.map((e=>e.other.data)).flat(2).filter((e=>!(e.required&&!`${e.value}`.length||!e.required))).map((e=>"function"==typeof e.field?.computedValue?e.field?.computedValue(e.value):void 0))).filter((e=>e));var t},options:()=>{const e=[];return Object.keys(this.delieveryOptionData).forEach((t=>{if(u.isEmpty(this.delieveryOptionData[t]))return;const i=parseInt(t)+1,a={label:`${i} <sup>${d(i)}</sup> delivery`,value:-1,other:{type:"delieveryOptionData",index:t,data:[],rowTitles:[]}};Object.keys(this.delieveryOptionData[t]).forEach((e=>{const i=parseInt(e)+1;a.other.rowTitles.push(`${i}<sup>${d(i)}</sup> born in ${a.label} pregnancy`),a.other.data.push(this.delieveryOptionData[t][e])})),e.push(a)})),Object.keys(this.abortionOptionData).forEach((t=>{const i=parseInt(t)+1;e.push({label:`${i} <sup>${d(i)}</sup> abortion`,value:-1,other:{type:"abortionOptionData",index:t,data:[this.abortionOptionData[t]]}})})),e}}))(),{id:"previous_complications",helpText:"Previous complications",type:o.TT_MULTI_SELECT_GRID,condition:e=>e.gravida.value>1,validation:e=>this.validateSeries([()=>n.required(e),()=>e.map((e=>""===e.value)).some(Boolean)?["Please complete Complication selection!!"]:null]),computedValue:e=>e.filter((e=>""!=e.value)).map((e=>this.service.buildValueCoded(e.label,e.value))),config:{hiddenFooterBtns:["Clear"]},options:()=>[{label:"Episiotomy",value:"",other:{options:this.yesNoOptions()}},{label:"Hemorrhage",value:"",other:{options:this.mapStrToOptions(["No","APH","PPH"])}},{label:"Pre-eclampsia",value:"",other:{onClick:(e,t)=>{t.forEach((t=>{"Eclampsia"===t.label&&(t.other.visible="Yes"===e.value)}))},options:this.yesNoOptions()}},{label:"Eclampsia",value:"",other:{visible:!1,options:this.yesNoOptions()}}]}]}}});e("default",h(y,[["render",function(e,t,i,a,r,l){const o=p("his-standard-form"),n=p("ion-page");return v(),c(n,null,{default:b((()=>[T(o,{fields:e.fields,skipSummary:!0,onFinishAction:e.onFinish,cancelDestinationPath:e.cancelDestination},null,8,["fields","onFinishAction","cancelDestinationPath"])])),_:1})}]]))}}}));
