import{d as p,r as d,bW as u,bY as m,e3 as i,an as f,ao as _,a as v,w as E,e as T,f as s,m as b,b as h}from"./index-qFt4YszW.js";import{H as D}from"./HisStandardForm-B3LOSMqB.js";import{u as C}from"./useEncounter-Bj5eamVf.js";import{r as I}from"./commons-B4jZtVaM.js";import"./isEmpty-1LErKKNT.js";import"./encounter_guidelines-CLmFwnI6.js";import"./GuidelineEngine-D6V1_Znr.js";const P=p({__name:"Examination",setup(w){const n=d([]),e=new u(-1,m.EXAMINATION),{goToNextTask:r,patientDashboardUrl:c}=C((t,a)=>{e.patientID=a,e.providerID=t,n.value=[{id:"diagnosisType",helpText:"Method of Diagnosis:",type:_.TT_SELECT,validation:o=>f.required(o),computedValue:o=>({concept_id:i("PROCEDURE_TYPE"),value_coded:i("".concat(o.value)),obs_datetime:e.date}),options:()=>[{value:"LAB_ORDER",label:"Lab Order"},{value:"CLINICAL",label:"Clinical"}]}]});async function l(t,a){await e.createEncounter(),await e.saveObservationList(await I(a)),r()}return(t,a)=>(h(),v(s(b),null,{default:E(()=>[T(D,{cancelDestinationPath:s(c),onFinishAction:l,fields:n.value,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{P as default};
