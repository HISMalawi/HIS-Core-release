import{H as f}from"./HisStandardForm-CB4MLGeB.js";import{bg as S,d as w,K as _,F as b,V as g,W as s,t as r,n as v,q as h,o as y,c as x,w as C,b as T,cu as c,I as D}from"./index-Bb5e7Gwm.js";import{u as P}from"./useEncounter-tqDkgM7d.js";import"./isEmpty-D2Qe2Chp.js";import"./encounter_guidelines-VYVjdqQ1.js";import"./GuidelineEngine-D6V1_Znr.js";class A extends S{constructor(i,a){super(i,42,a)}}const B=w({__name:"AdmitPatient",setup(l){const i=_([]);let a;const{goToNextTask:u,patientDashboardUrl:d}=P((e,o)=>{a=new A(o,e),i.value.push(p())});async function m(e,o){const t=await Promise.all([o.internal_sections]);await a.createEncounter(),await a.saveObservationList(t),u()}function p(){return{id:"internal_sections",helpText:"Select Ward/internal section",type:b.TT_SELECT,validation:e=>g.required(e),computedValue:e=>a.buildValueText("Admit to ward",e.label),options:()=>s.getInternalSections(),config:{showKeyboard:!0,footerBtns:[{name:"Add Section",slot:"end",color:"success",onClick:async(e,o,t)=>{if(typeof t.filter!="string"||t.filter.length<3)return r("Please enter a valid section name");if(t.filtered.some(n=>n.label.toLowerCase()===t.filter.toLowerCase()))return r("Section already existing");if(await v("Do you want to add internal section?")){const n=await s.createInternalSection(t.filter.toUpperCase());n?(t.filter=n.name,t.listData=[{label:n.name,value:n.id},...t.listData]):h("Unable to add ".concat(t.filter))}}}]}}}return(e,o)=>(y(),x(c(D),null,{default:C(()=>[T(f,{cancelDestinationPath:c(d),fields:i.value,onFinishAction:m,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{B as default};
