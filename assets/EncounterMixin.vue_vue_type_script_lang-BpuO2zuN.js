import{d as v,as as p,aN as c,bn as u,bk as f,az as d,bo as g,bl as h,bQ as m,cX as b,O,ah as I,ae as T}from"./index-CyYd6aWW.js";import{F as o,E as N}from"./encounter_guidelines-Cq7m6ibV.js";import{m as y}from"./GuidelineEngine-D6V1_Znr.js";import{H as E}from"./HisStandardForm-CuX9K_Ib.js";const P=v({components:{HisStandardForm:E},data:()=>({offlineID:null,patient:{},fields:[],patientID:"",providerID:-1,providers:[],encounterStartTime:null,facts:{npid:"",givenName:"",familyName:"",age:-1,gender:"",birthDate:"",birthEstimated:!1,sessionDate:"",apiDate:"",isEnrolledInProgam:!1,encounterName:"N/A",providers:[],isBdeMode:!1,outcome:"",outcomeStartDate:"",village:"",district:"",currentTA:""},formLabel:"",ready:!1}),created(){this.$route.params.patient_id&&(this.offlineID=this.$route.params.patient_id,this.patientID=parseInt("".concat(this.$route.params.patient_id)),this.goOffline()?this.initOfflineData():p.get("ACTIVE_PATIENT",{patientID:this.patientID}).then(t=>{this.patient=t,c.isEmpty(this.patient)||u().cachePatient(this.patient),this.setEncounterFacts().then(()=>{this.checkEncounterGuidelines().then(()=>{this.ready=!0,this.setStartTime()}).catch(e=>console.log(e))}).catch(()=>{this.goOffline()&&this.initOfflineData()})}))},computed:{cancelDestination(){return this.patientDashboardUrl()}},methods:{setStartTime(){this.encounterStartTime=new Date().getTime()},goOffline(){return!f.value||d.value},isOnline(){return f.value},isOfflineMode(){return d.value},initOfflineData(){var s,a,i;const t=u().findByID(this.offlineID),e=(s=t==null?void 0:t.personParams)==null?void 0:s.person;e&&(this.facts.birthDate=e.birthdate,this.facts.age=g(h.getSessionDate()).diff(this.facts.birthDate,"years"),this.facts.birthEstimated=((a=t==null?void 0:t.personParams)==null?void 0:a.person.birthdate_estimated)||!1,this.facts.npid=(i=t==null?void 0:t.personParams)==null?void 0:i.npid,this.facts.givenName=e.given_name,this.facts.familyName=e.family_name,this.facts.district=e.current_district,this.facts.village=e.current_village,this.facts.currentTA=e.current_traditional_authority,this.facts.gender=e.gender,this.ready=!0,this.setStartTime())},async saveFormEncounterAndProceed(t={}){let e="Pending",s=!1,a=null;const n=(new Date().getTime()-this.encounterStartTime)/1e3/60;try{const l=await m.buildValueText("Device",b()),D=await m.buildValueNumber("Review Time",n);a=[...await this.resolveObs(t.computedData),l,D],u().saveObsOffline({observations:a,id:this.offlineID,uploadStatus:e,encounterName:this.$route.name,encounterTypeID:t.encounterTypeID,meta:t.formData,labOrders:t.labOrders,created:s},s),u().synchronizeRecord(this.offlineID),t.skipNextTask||this.nextOfflineFlow()}catch(l){return console.error("".concat(l)),O("Unable to resolve observations")}},runflowState(t,e=null){const s={};if(s[o.SET_PROVIDER]=a=>{const[i]=a.split(" "),r=c.find(this.providers,{username:i});return r&&(this.providerID=r.person_id),o.CONTINUE},s[o.CHANGE_SESSION_DATE]=()=>(this.$router.push("/session/date?patient_dashboard_redirection_id=".concat(this.patientID)),o.EXIT),s[o.CHANGE_PATIENT_OUTCOME]=()=>(this.$router.push("/patient/programs/".concat(this.patientID)),o.EXIT),s[o.GO_TO_PATIENT_DASHBOARD]=()=>(this.gotoPatientDashboard(),o.EXIT),t in s)return s[t](e)},async checkEncounterGuidelines(){var e,s,a,i;const t=y(this.facts,N);for(const r in t){const n=t[r];if((e=n==null?void 0:n.actions)!=null&&e.alert&&this.runflowState(await((s=n==null?void 0:n.actions)==null?void 0:s.alert(this.facts)))===o.EXIT)return;if((a=n==null?void 0:n.actions)!=null&&a.selection){const l=await((i=n==null?void 0:n.actions)==null?void 0:i.selection(this.facts));this.runflowState(l.flowState,l.value)}}},async setEncounterFacts(){try{const t=await p.get("PATIENT_PROGRAM",{patientID:this.patientID});this.facts.isEnrolledInProgam=t.programID===h.getProgramID(),this.facts.outcome=t.outcome,this.facts.outcomeStartDate=t.startDate}catch(t){console.error(t),I("".concat(t))}if(this.facts.npid=this.patient.getNationalID(),this.facts.givenName=this.patient.getGivenName(),this.facts.familyName=this.patient.getFamilyName(),this.facts.currentTA=this.patient.getCurrentTA(),this.facts.district=this.patient.getCurrentDistrict(),this.facts.village=this.patient.getCurrentVillage(),this.facts.sessionDate=h.getSessionDate(),this.facts.apiDate=h.getCachedApiDate(),this.facts.isBdeMode=h.isBDE(),this.facts.birthDate=this.patient.getBirthdate(),this.facts.age=this.patient.getAge(),this.facts.encounterName=this.$route.name?this.$route.name.toString().toUpperCase():"N/A",h.isBDE()){this.providers=await p.get("PROVIDERS");const t=c.find(this.providers,s=>s.user_id==h.getUserID());this.providers=this.providers.sort((s,a)=>{const i=s.username.toUpperCase(),r=a.username.toUpperCase();return i<r?-1:i>r?1:0});const e=t?[t,...this.providers]:this.providers;this.facts.providers=c.uniq(e.map(s=>{var i,r;let a="".concat(s.username);if(!c.isEmpty((i=s==null?void 0:s.person)==null?void 0:i.names)){const[n]=((r=s.person)==null?void 0:r.names)||[];a+=" (".concat(n.given_name," ").concat(n.family_name,")")}return a}))}},toOption(t,e={}){return{label:t,value:t,other:e}},mapStrToOptions(t){return t.map(e=>typeof e=="string"||typeof e=="number"?{label:e,value:e}:e)},patientDashboardUrl(){return"/patient/dashboard/".concat(this.$route.params.patient_id)},gotoPatientDashboard(){return this.$router.push({path:this.patientDashboardUrl()})},nextOfflineFlow(){const t=u().nextPatientWorkflowActivity(this.patientID);return!t||!t.patientUrl?this.$router.push("/patient/dashboard/".concat(this.patientID)):this.$router.push("".concat(t.patientUrl,"/").concat(this.patientID))},async nextTask(){try{const t=this.offlineID||this.patientID;await T(t,this.$router,this.$route)}catch(t){console.error("Workflow error "+t),this.gotoPatientDashboard()}},getOptions(t,e){return t.map(s=>{const a=c.find(e,{label:s});return{label:s,value:a?a.value:"",other:{values:this.yesNoOptions()}}})},yesNoOptions(){return[{label:"Yes",value:"Yes"},{label:"No",value:"No"}]},toYesNoOption(t,e={}){return{label:t,value:"",other:{...e,values:this.yesNoOptions()}}},mapOptions(t){return t.map(e=>({label:e,value:e}))},toConditionalOptions(t){const e=[];for(const s of t){if(typeof s[1]=="boolean"){s[1]&&e.push(this.toOption(s[0]));continue}e.push(this.toOption(s[0]))}return e},yesNoUnknownOptions(){return[{label:"Yes",value:"Yes"},{label:"No",value:"No"},{label:"Unknown",value:"Unknown"}]},resolveObs(t,e=""){const s=Object.values(t).filter(a=>a&&(a.tag===e||e==="")).reduce((a,i)=>{const r=i.obs?i.obs:i;return Array.isArray(r)?a=a.concat(r):typeof r=="function"?a.push(r()):a.push(r),a},[]);return Promise.all(s)},inArray(t,e){try{return t.filter(s=>e(s)).length>0}catch(s){return!1}},validateSeries(t){try{for(const e in t){const s=t[e]();if(s)return s}}catch(e){return[e]}}}});export{P as _};
