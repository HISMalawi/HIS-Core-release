import{bS as l,d,r as m,ad as f,ae as v,a as _,c as b,u as S,W as h,R as T}from"./index-DxMuvVt8.js";import{H as x}from"./HisStandardForm-DZm4XR0H.js";import{u as y}from"./useEncounter-lcMM7dIM.js";import{m as R}from"./commons-C1lg5KFk.js";import"./isEmpty-BtPnaiKI.js";import"./encounter_guidelines-BGVHGEbE.js";import"./GuidelineEngine-D6V1_Znr.js";class g extends l{constructor(e,n){super(e,184,n)}}const q=d({__name:"CxCaReception",setup(r){let e;const n=m([]),{patientDashboardUrl:o,goToNextTask:s}=y(async(t,a)=>{e=new g(a,t),n.value=c()});async function i(t){if(!await e.createEncounter())return h("Unable to create encounter");const u=t.reason_for_visit,p=await e.buildValueCoded("Reason for visit",u.value);await e.saveObs(p),T("Observations and encounter created!"),s()}function c(){return[{id:"reason_for_visit",helpText:"Reason for visit",type:f.TT_SELECT,validation:t=>v.required(t),options:()=>R(["Initial screening","Postponed treatment","One year subsequent check-up after treatment","Subsequent screening","Problem visit after treatment","Referral"])}]}return(t,a)=>(_(),b(x,{fields:n.value,onFinishAction:i,skipSummary:!0,cancelDestinationPath:S(o)},null,8,["fields","cancelDestinationPath"]))}});export{q as default};
