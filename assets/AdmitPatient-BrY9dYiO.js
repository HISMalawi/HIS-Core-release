import{H as f}from"./HisStandardForm-BPNPJCrM.js";import{bU as S,d as w,r as _,an as b,ao as v,aB as s,l as r,as as g,v as h,a as y,b as x,w as C,e as T,i as l,q as D}from"./index-CJleCCtM.js";import{u as P}from"./useEncounter-BYi6HXkG.js";import"./isEmpty-Dwdx9lIX.js";import"./encounter_guidelines-CfQXyRxl.js";import"./GuidelineEngine-D6V1_Znr.js";class A extends S{constructor(i,a){super(i,42,a)}}const U=w({__name:"AdmitPatient",setup(c){const i=_([]);let a;const{goToNextTask:u,patientDashboardUrl:d}=P((t,o)=>{a=new A(o,t),i.value.push(p())});async function m(t,o){const e=await Promise.all([o.internal_sections]);await a.createEncounter(),await a.saveObservationList(e),u()}function p(){return{id:"internal_sections",helpText:"Select Ward/internal section",type:b.TT_SELECT,validation:t=>v.required(t),computedValue:t=>a.buildValueText("Admit to ward",t.label),options:()=>s.getInternalSections(),config:{showKeyboard:!0,footerBtns:[{name:"Add Section",slot:"end",color:"success",onClick:async(t,o,e)=>{if(typeof e.filter!="string"||e.filter.length<3)return r("Please enter a valid section name");if(e.filtered.some(n=>n.label.toLowerCase()===e.filter.toLowerCase()))return r("Section already existing");if(await g("Do you want to add internal section?")){const n=await s.createInternalSection(e.filter.toUpperCase());n?(e.filter=n.name,e.listData=[{label:n.name,value:n.id},...e.listData]):h("Unable to add ".concat(e.filter))}}}]}}}return(t,o)=>(y(),x(l(D),null,{default:C(()=>[T(f,{cancelDestinationPath:l(d),fields:i.value,onFinishAction:m,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{U as default};
