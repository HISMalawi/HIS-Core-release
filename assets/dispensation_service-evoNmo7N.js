var D=Object.defineProperty;var p=(a,t,r)=>t in a?D(a,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):a[t]=r;var u=(a,t,r)=>(p(a,typeof t!="symbol"?t+"":t,r),r);import{S as h,ab as l,b5 as o,cn as m}from"./index-CEHwIYqs.js";import{D as g}from"./drug_order_service-C6I-GDWA.js";class y extends h{constructor(){super()}static async fetchAvailableDrugStock(t){const r=await this.getJson("pharmacy/items",{drug_id:t});if(!l.isEmpty(r))return r.map(e=>({quantity:e.current_quantity,packSize:e.pack_size}))}}const d={11:[30],21:[25],22:[60],24:[30,60,90,100],30:[90],39:[60],73:[120],74:[60],76:[1e3],297:[30,60,90],576:[30,60,90],613:[60],731:[60],732:[60],733:[60],734:[30],735:[30],736:[60],738:[60],931:[12,30,60],932:[30],954:[60],963:[30,60,90],968:[60],969:[30],971:[30,60,90],976:[60],977:[30],982:[30],983:[30,90],1039:[30,60,90],1043:[60],1044:[30],1056:[24],1216:[3,6,8,12]};class S extends o{constructor(r,e){super(r,54,e);u(this,"drugHistory");u(this,"currentDrugOrder");u(this,"useDrugManagement");this.drugHistory=[],this.currentDrugOrder=[],this.useDrugManagement=!1}setIsDrugManagementEnabled(r){this.useDrugManagement=r}async loadDrugManagementEnabled(){this.useDrugManagement=await m.drugManagementEnabled()}getDrugHistory(){return this.drugHistory}getCurrentOrder(){return this.currentDrugOrder}buildDispensations(r,e,s){const c=[];for(let n=0;n<s;n++)c.push({drug_order_id:r,date:this.date,quantity:e/s});return c}saveDispensations(r){return o.postJson("/dispensations",{dispensations:r,program_id:o.getProgramID()})}async voidOrder(r){return o.void("/dispensations/".concat(r),{})}async loadDrugHistory(){try{this.drugHistory=await g.getDrugOrderHistory(this.patientID)||[]}catch(r){console.warn(r)}}async loadCurrentDrugOrder(){if(this.currentDrugOrder=await g.getDrugOrders(this.patientID)||[],!!this.useDrugManagement)for(const r of this.currentDrugOrder)r.stocks=await y.fetchAvailableDrugStock(r.drug.drug_id)}getDrugPackSizes(r){return r in d?d[r]:[30,60,90]}calcCompletePack(r,e){const s=r.barcodes.sort((n,i)=>n.tabs-i.tabs);if(s.length==0||e==0)return e;for(const n in s){const{tabs:i}=s[n];if(parseInt(i)>=e)return i}return parseInt(s[s.length-1].tabs)}}export{S as D};
