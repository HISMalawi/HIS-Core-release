import{F as g}from"./dynamic-import-helper-Bsjrd6Ro.js";import{H as p}from"./HisStandardForm-CmiKCQno.js";import{d as f,aJ as b,ab as o,t as u,T as v,R as H,V as m,a$ as w,aI as T,ad as F,n as B,cv as d,_ as W,r as y,o as A,c as P}from"./index-ukYYv03_.js";import{V as h}from"./vitals_service-DzJIxXTl.js";import{_ as V}from"./EncounterMixin.vue_vue_type_script_lang-hKvxDXOC.js";import"./TouchScreenForm-C0lsuVE6.js";import"./ToolbarMediumCard-BzOm1RiU.js";import"./Transformers-BPPLlH12.js";import"./ViewPort-DXU7_cLE.js";import"./encounter_guidelines-DEFE9wN1.js";import"./GuidelineEngine-D6V1_Znr.js";const _=f({mixins:[V],components:{HisStandardForm:p},data:()=>({app:b.getActiveApp(),activeField:"",age:null,gender:null,hasBPinfo:!1,finalHeightValue:null,recentHeight:null,recentHeightObsID:-1,HTNEnabled:!1,optionWhiteList:[],hasHTNObs:!1,vitals:{},weightForHeight:{},medianWeightandHeight:{},canEditHeight:!1,patientAgeAtPrevRecordedHeight:-1}),watch:{ready:{handler(t){t&&this.init()},immediate:!0}},methods:{init(){this.vitals=new h(this.patientID,this.providerID),this.age=this.patient.getAge(),this.gender=this.patient.getGender(),this.fields=this.getFields()},getOptions(){let t="";this.recentHeight&&(this.age>18||this.patientAgeAtPrevRecordedHeight>=18)&&(t=this.recentHeight||"");const e=[{label:"Weight",value:"",other:{modifier:"KG",icon:"weight",required:!0}},{label:"Height",value:"".concat(t),other:{modifier:"CM",icon:"height",recentHeight:this.recentHeight,visible:this.canEditHeight,required:this.canEditHeight}},{label:"BP",value:"",other:{modifier:"mmHG",icon:"bp"}},{label:"Temp",value:"",other:{modifier:"Â°C",icon:"temp"}},{label:"SP02",value:"",other:{modifier:"%",icon:"spo2"}},{label:"Pulse",value:"",other:{modifier:"BPM",icon:"pulse-rate"}},{label:"Age",value:this.age,other:{modifier:"Years old",icon:"",visible:!1}}];return o.isEmpty(this.optionWhiteList)?e:e.filter(i=>this.optionWhiteList.includes(i.label)).map(i=>(i.other.required=!0,i))},canCheckWeightHeight(){return o.isEmpty(this.optionWhiteList)||this.optionWhiteList.includes("Height")&&this.optionWhiteList.includes("Weight")},canCheckBp(){return o.isEmpty(this.optionWhiteList)||this.optionWhiteList.includes("BP")},async onFinish(t){if(!await this.vitals.createEncounter())return u("Unable to create treatment encounter");const i=await this.buildObs(t);if(!await this.vitals.saveObservationList(i))return u("Unable to save patient observations");v("Observations and encounter created!"),this.nextTask()},async buildObs(t){const e=await this.mapObs(this.sanitizeVitals(t.vitals).filter(i=>i.label!=="BP").map(i=>(i.label==="Height"&&i.other.visible&&this.finalHeightValue&&(i.value=this.finalHeightValue),i)));if(this.HTNEnabled&&!this.hasHTNObs&&t.on_htn_medication){const i=await this.vitals.buildValueText("Treatment status",t.on_htn_medication.value);e.push(i)}return e},splitBP(t){const e=[];return t.forEach(i=>{if(i.label==="BP"){const s="".concat(i.value).split("/"),a=s[0],n=s[1];e.push({label:"Systolic",value:a}),e.push({label:"Diastolic",value:n})}}),e},getBMI(t){const e=this.getVal(t,"Weight"),i=this.getVal(t,"Height"),s=[];if(this.age<=14){const a=(e/parseFloat(this.medianWeightandHeight.weight)*100).toFixed(0),n=(i/parseFloat(this.medianWeightandHeight.height)*100).toFixed(0),r=(i%Math.floor(i)<.5?0:.5)+Math.floor(i),l=this.weightForHeight[r.toFixed(1)],c=(e/l*100).toFixed(0);isNaN(parseFloat(c))||s.push({label:"Weight for height percent of median",value:c}),s.push({label:"Weight for age percent of median",value:a}),s.push({label:"Height for age percent of median",value:n})}else{const a=d.calculateBMI(e,i);s.push({label:"BMI",value:a})}return s},getVal(t,e){const i=t.filter(s=>s.label===e);return i[0].value===""?0:parseFloat("".concat(i[0].value))},async mapObs(t){const e=t.map(async i=>await this.vitals.buildValueNumber(i.label,i.value));return Promise.all(e)},validateVitals(t){const e=this.checkRequiredVitals(t);if(e.length>0)return e.map(s=>["".concat(s.label," can not be empty")]);const i=this.sanitizeVitals(t);return this.vitals.validateAll(i)},sanitizeVitals(t){let e=t.filter(i=>i.label==="Height"&&i.other.required==!1?!1:i.value!==""&&i.label!=="Age");return this.canCheckBp()&&(e=e.concat(this.splitBP(e))),this.canCheckWeightHeight()&&(e=e.concat(this.getBMI(t))),e},checkRequiredVitals(t){return t.filter(e=>e.value===""&&e.other.required===!0)},getFields(){return[{id:"on_htn_medication",helpText:"Already taking drugs for blood pressure?",type:g.TT_SELECT,init:async()=>{var t;return((t=this.app)==null?void 0:t.applicationName)==="ART"&&(this.HTNEnabled=await H.get("IS_ART_HTN_ENABLED"),this.HTNEnabled&&await h.getAll(this.patientID,"Treatment status").then(e=>{this.hasHTNObs=e&&e.length>0})),!0},validation:t=>m.required(t),condition:()=>this.HTNEnabled&&!this.hasHTNObs,options:()=>[{label:"Yes",value:"BP Drugs started"},{label:"No",value:"Not on BP Drugs"}]},{id:"vitals",helpText:"Vitals entry",type:g.TT_VITALS_ENTRY,init:async()=>{const t=this.$route.query.vital_options;if(t&&(this.optionWhiteList=t.split(",")),this.canCheckWeightHeight()){const e=await this.patient.getRecentHeightObs();o.isEmpty(e)?this.canEditHeight=!0:(this.patientAgeAtPrevRecordedHeight=w(e.obs_datetime).diff(this.patient.getBirthdate(),"year"),this.recentHeight=e.value_numeric,this.recentHeightObsID=e.obs_id,this.canEditHeight=this.patientAgeAtPrevRecordedHeight<18||this.age<18),this.age<=14&&(this.medianWeightandHeight=await this.patient.getMedianWeightHeight(),this.weightForHeight=await T.getWeightForHeightValues())}return!0},validation:t=>this.validateVitals(t),beforeNext:async t=>{const e=o.find(t,{label:"Height"});if(e&&this.recentHeight&&e.other.visible){const i=parseInt("".concat(e.value||0)),s=parseInt("".concat(this.recentHeight||0));if(i<s){const a="Use ".concat(s," CM"),n="Use ".concat(i," CM");await F('Previous Height "'.concat(s,' CM"'),'Current Height "'.concat(i,' CM"'),'Inconsistent Height Reading (Height can not be lower than previous height of " '.concat(this.recentHeight,' "CM. Please SELECT the correct height.)'),[{name:a,slot:"start",color:"success"},{name:n,slot:"end",color:"danger"}])===n&&this.recentHeightObsID?await B("Do you want to void height observation for ".concat(s))&&await h.voidObs(this.recentHeightObsID):this.finalHeightValue=s}}return!0},config:{hiddenFooterBtns:["Clear"],onUpdateAlertStatus:async t=>{const e=o.find(t,{label:"Weight"}),i=o.find(t,{label:"Height"});if(!(e&&i))return;const s=parseFloat(e.value),a=parseFloat(i.value);if(s<=0||a<=0)return{label:"BMI",value:"N/A",color:"",status:""};const n=await d.getBMI(s,a,this.gender,this.age);return{label:"BMI",value:n.index,color:n.color,status:n.result}},onChangeOption:t=>{if(!t.value&&t.other.required)throw"Value for ".concat(t.label," is required");if(t.value){const e=this.vitals.validator(t);if(e&&e.length)throw e}}},options:()=>this.getOptions()}]}}});function E(t,e,i,s,a,n){const r=y("his-standard-form");return A(),P(r,{fields:t.fields,activeField:t.activeField,onOnskip:e[0]||(e[0]=l=>t.activeField=""),onFinishAction:t.onFinish,skipSummary:!0,cancelDestinationPath:t.cancelDestination},null,8,["fields","activeField","onFinishAction","cancelDestinationPath"])}const x=W(_,[["render",E]]);export{x as default};
