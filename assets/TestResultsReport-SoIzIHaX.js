import{L as c}from"./lab_report_service-Hol06Aa6.js";import{_ as g}from"./ReportMixin.vue_vue_type_script_lang-XAcjLpwM.js";import{R as f}from"./TableReportTemplate-7x-Wf1XS.js";import{d as T,aq as e,ab as d,dk as h,a8 as v,ad as R,u as b,v as _}from"./index-LyP1z09P.js";import"./BasicReportTemplate-sA2vucmk.js";import"./Export-8d5rspLX.js";import"./Pagination-hZp0slGq.js";import"./HisStandardForm-DTr2fl7A.js";import"./ReportErrors-GzsxNicS.js";const y=T({mixins:[g],components:{ReportTemplate:f},data:()=>({title:"Lab test result(s)",rows:[],cohort:[],reportType:"",reportReady:!1,columns:[],patientLevelColumns:[[e.thTxt("ARV#"),e.thTxt("Gender"),e.thTxt("Birthdate"),e.thTxt("Ordered"),e.thTxt("Specimen"),e.thTxt("Test"),e.thTxt("Result"),e.thTxt("Released")]],disaggregatedColumns:[e.thTxt("Age group"),e.thTxt("Gender")]}),created(){this.report=new c,this.fields=this.getFormFields()},methods:{async onPeriod({type:s,tests:r}){this.reportReady=!0,this.rows=[],this.period=this.report.getDateIntervalPeriod(),this.reportType=s.value,this.reportType==="disaggregated"?this.setDisaggregatedRows(r):this.reportType==="patient_level"&&this.setPatientLevelRows(r)},getFormFields(){return[...this.getDateDurationFields(),{id:"tests",helpText:"Available test(s) results",type:d.TT_MULTIPLE_SELECT,options:async(s,r,t)=>{this.report.setStartDate(t.start_date),this.report.setEndDate(t.end_date);const o=await this.report.getLabResultsReport(),a=this.buildAvailableTests(o);return this.buildAvailableTestOptions(a)}},{id:"type",helpText:"Select report type",type:d.TT_SELECT,options:()=>[{label:"Disaggregated",value:"disaggregated"},{label:"Patient level",value:"patient_level"}]}]},buildAvailableTests(s){const r={};return this.sortByArvNumber(s).forEach(t=>{t.measures.forEach(o=>{o.name in r||(r[o.name]=[]),r[o.name].push({id:t.patient_id,arv:t.arv_number,gender:t.gender,ageGroup:t.age_group,birthdate:this.toDate(t.birthdate),ordered:this.toDate(t.order_date),specimen:t.test,test:o.name,result:"".concat(o.modifier," ").concat(o.value),released:this.toDate(t.result_date)})})}),r},buildAvailableTestOptions(s){const r=[];for(const t in s){const o=s[t];r.push({label:t,value:o.length,other:o})}return r},setDisaggregatedRows(s){const r=[],t=[];this.columns=[this.disaggregatedColumns.concat(s.map(o=>e.thTxt(o.label)))];for(const o in h){const a=h[o],p=[e.td(a),e.td("M")],i=[e.td(a),e.td("F")];s.forEach(({other:m})=>{const l=u=>m.filter(n=>n.gender===u&&n.ageGroup===a).map(n=>n.id);p.push(this.drill(l("M"))),i.push(this.drill(l("F")))}),r.push(p),t.push(i),this.rows=[...t,...r]}},setPatientLevelRows(s){this.columns=this.patientLevelColumns,s.forEach(({other:r})=>{r.forEach(t=>{this.rows.push([this.tdARV(t.arv),e.td(t.gender),e.tdDate(t.birthdate),e.tdDate(t.ordered),e.td(t.specimen),e.td(t.test),e.td(t.result),e.tdDate(t.released)])})})}}});function w(s,r,t,o,a,p){const i=R("report-template");return b(),_(i,{title:s.title,period:s.period,rows:s.rows,fields:s.fields,columns:s.columns,canExportCsv:!0,canExportPDf:!0,reportReady:s.reportReady,onReportConfiguration:s.onPeriod},null,8,["title","period","rows","fields","columns","reportReady","onReportConfiguration"])}const S=v(y,[["render",w]]);export{S as default};
