import{d as N,r as S,bW as f,bY as A,an as s,ao as c,e6 as b,be as g,e3 as o,c3 as I,a as h,w as R,e as F,f as E,m as P,b as w,n as x,bi as y,e4 as W}from"./index-DrAzzURJ.js";import{H as C}from"./HisStandardForm-BuN2ARUl.js";import{u as Y}from"./useEncounter-DkJDyHxN.js";import{r as B}from"./commons-C0KTHr4m.js";import"./isEmpty-DpsHgz2w.js";import"./encounter_guidelines-wbooCIhg.js";import"./GuidelineEngine-D6V1_Znr.js";const H=N({__name:"Reception",setup(D){const p=S([]),t=new f(-1,A.TB_RECEPTION),{goToNextTask:T,patientDashboardUrl:_}=Y((i,r,a)=>{t.patientID=r,t.providerID=i;const n=()=>{let e={};return{id:"treatForIpt",helpText:"Enroll in TPT program?",type:c.TT_SELECT,requireNext:!1,init:async()=>(e=await g.getProgramInformation(r),!0),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}],validation:d=>s.required(d),condition:()=>!e.tb_positive&&a.getAge()>=0&&a.getAge()<b}},l=()=>({id:"catchmentArea",helpText:"Patient living within catchment area?",type:c.TT_SELECT,requireNext:!1,Validation:e=>s.required(e),computedValue:e=>({concept_id:o("LIVES_NEAR"),value_coded:o("".concat(e.value)),obs_datetime:t.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}]}),u=()=>({id:"livesNearTB",helpText:"Patient living near a TB registration centre?",type:c.TT_SELECT,requireNext:!1,computedValue:e=>({concept_id:o("TRANSFERRED_OUT_EXTERN"),value_coded:o("".concat(e.value)),obs_datetime:t.date}),options:()=>[{value:"YES_ANSWER",label:"Yes"},{value:"NO_ANSWER",label:"No"}],validation:e=>s.required(e),condition:e=>e.catchmentArea.value==="NO_ANSWER"}),v=()=>({id:"locationId",type:c.TT_SELECT,helpText:"Select TB Registration Centre:",computedValue:e=>({concept_id:o("FACILITY_NAME"),value_text:e.label,obs_datetime:t.date}),options:(e,d="")=>I(d),config:{showKeyboard:!0,isFilterDataViaApi:!0},validation:e=>s.required(e),condition:e=>e.livesNearTB.value==="YES_ANSWER",requireNext:!1});p.value=[n(),l(),u(),v()]});async function m(i,r){var n,l;if(((n=i.treatForIpt)==null?void 0:n.value)==="NO_ANSWER")return x.push(_.value);await t.createEncounter(),await t.saveObservationList(await B(r));const a=new y(t.patientID);a.setStateDate(t.date);try{await a.enrollProgram()}catch(u){console.warn("".concat(u))}((l=i.treatForIpt)==null?void 0:l.value)==="YES_ANSWER"&&a.setStateId(W.TPT),a.stateId!=-1&&await a.updateState(),T()}return(i,r)=>(w(),h(E(P),null,{default:R(()=>[F(C,{cancelDestinationPath:E(_),onFinishAction:m,fields:p.value,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{H as default};
