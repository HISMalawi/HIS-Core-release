import{H as h}from"./HisStandardForm-D4x6GRNw.js";import{P as n}from"./patient_diagnosis_service-CVnnmXY-.js";import{bT as v,d as E,r,ai as l,aj as w,aP as c,a as L,c as C,u as D,S as F,ao as x}from"./index-DUHy09-D.js";import{u as P}from"./useEncounter-fu9GEntY.js";import{u as V}from"./useLabResultsManager-DPWwAbNk.js";import{r as g}from"./commons-BaXeoV8t.js";import"./isEmpty-DIE1IIn6.js";import"./encounter_guidelines-BSirIoFm.js";import"./GuidelineEngine-D6V1_Znr.js";import"./lab_order_service-CLK-f4GK.js";class I extends v{constructor(s,i){super(s,105,i)}}const j=E({__name:"Diagnosis",setup(y){let s,i;const u=r("No"),d=r([]),m=r(Math.random()),{patientDashboardUrl:b,goToNextTask:_}=P(async(a,e)=>{s=new I(e,a),i=new n(e,a);const{getLabFields:t}=V(e,a,m);d.value=[...t(!0),...S()]});async function T(a,e){await i.createEncounter();const t=await g({...e,obs_datetime:F.getSessionDate()},"diagnosis");await i.saveObservationList(t);const o=await g({...e},"notes");c.isEmpty(o)||(await s.createEncounter(),await s.saveObservationList(o)),_()}function p(a){return c.isEmpty(a)?[]:a.map(e=>({label:e.name,value:e.name,other:e.concept_id,isChecked:!1})).sort((e,t)=>e.label<t.label?-1:e.label>t.label?1:0)}async function f(a){return a.find(t=>t.label==="Malaria")?u.value==="Positive"?!0:await x("Patient has ".concat(u.value," malaria test result. Do you want to continue?")):!0}function S(){return[{id:"primary_diagnosis",helpText:"Select primary diagnosis",type:l.TT_INFINITE_SCROLL_MULTIPLE_SELECT,validation:a=>w.required(a),options:async(a,e="",t=1,o=10)=>p(await n.getDiagnosis(e,t,o)),beforeNext:async a=>await f(a),computedValue:a=>({tag:"diagnosis",obs:a.map(({other:e})=>i.buildValueCodedFromConceptId("Primary diagnosis",e))}),summaryMapValue:({value:a})=>({value:a,label:"Primary diagnosis"}),config:{isFilterDataViaApi:!0,showKeyboard:!0}},{id:"secondary_diagnosis",helpText:"Select secondary diagnosis",type:l.TT_INFINITE_SCROLL_MULTIPLE_SELECT,options:async(a,e="",t=1,o=10)=>p(await n.getDiagnosis(e,t,o)),beforeNext:async a=>await f(a),computedValue:a=>!c.isEmpty(a)&&{tag:"diagnosis",obs:a.map(({other:e})=>i.buildValueCodedFromConceptId("Secondary diagnosis",e))},summaryMapValue:({value:a})=>({value:a,label:"Secondary diagnosis"}),config:{showKeyboard:!0,isFilterDataViaApi:!0}},{id:"clinical_notes",helpText:"Clinical notes",type:l.TT_TEXT,computedValue:a=>a&&{tag:"notes",obs:s.buildValueText("Clinical notes construct",a.value)}}]}return(a,e)=>(L(),C(h,{key:m.value,cancelDestinationPath:D(b),fields:d.value,onFinishAction:T},null,8,["cancelDestinationPath","fields"]))}});export{j as default};
