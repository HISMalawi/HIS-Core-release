import{b5 as d,ab as c,H as u}from"./index-BCTN_bnC.js";import{D as i}from"./drug_order_service-DUHTU9In.js";const r={"Once a day (OD)":1,"Twice a day (BD)":2,"Three a day (TDS)":3,"Four times a day (QID)":4,"Five times a day (5X/D)":5,"Six times a day (Q4HRS)":6,"In the morning (QAM)":.5,"Once a week (QWK)":.14,"Once a month":.03,"Twice a month":.071};class _ extends d{constructor(e,t){super(e,25,t)}vaccinationDrugObj(){return{drug_inventory_id:609,dose:.5,equivalent_daily_dose:.5,frequency:"Once a day (od)",start_date:this.date,auto_expire_date:this.date,instructions:"Once a day",units:"ml"}}async updateVaccinationOrder(){const e=await this.dispenseVaccinationDrug();if(!c.isEmpty(e)){const t=e[0].order_id;return i.updateDispensationOrders([{order_id:t,quantity:1}])}throw"Unable to dispense"}dispenseVaccinationDrug(){return this.createOrders([this.vaccinationDrugObj()])}createOrders(e){return i.create({drug_orders:e,encounter_id:this.getEncounterID()})}async submitTreatment(e){await this.createEncounter();const t=await this.createOrders(e.map(a=>this.buildDrugOrderObj(a)));await new d(this.patientID,54,this.providerID).createEncounter(),e.forEach(a=>{const n=r[a.frequency]*a.duration;t.forEach(o=>{o.drug_inventory_id===a.id&&(o.quantity=n)})}),await i.updateDispensationOrders(t)}buildDrugOrderObj(e){const t=new Date(this.date),s=t.setDate(t.getDate()+parseInt("".concat(e.duration))),a=e.dose||r[e.frequency],n=parseFloat(a)*r[e.frequency];return{drug_inventory_id:e.id,dose:a,equivalent_daily_dose:n,frequency:e.frequency,start_date:this.date,auto_expire_date:u.toStandardHisFormat(new Date(s)),instructions:e.drug_name+":"+e.dose+" "+e.units+" "+e.frequency+"days",units:e.units}}}export{_ as A,r as D};
