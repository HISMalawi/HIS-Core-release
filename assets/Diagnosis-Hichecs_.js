import{H as h}from"./HisStandardForm-BJZg4csl.js";import{P as n}from"./patient_diagnosis_service-D3kkckpT.js";import{bU as E,d as S,r,a9 as l,aa as w,aV as c,u as L,v as C,y as D,aj as F,ad as V}from"./index-BMVUUxuO.js";import{u as x}from"./useEncounter-CyzDcDi4.js";import{u as I}from"./useLabResultsManager-Cny1XIGy.js";import{r as f}from"./commons-U1Sk2Oce.js";import"./isEmpty-DO_V95XA.js";import"./encounter_guidelines-BpuRwq-s.js";import"./GuidelineEngine-D6V1_Znr.js";import"./lab_order_service-iE3cYcyi.js";class P extends E{constructor(s,i){super(s,105,i)}}const j=S({__name:"Diagnosis",setup(g){let s,i;const u=r("No"),d=r([]),m=r(Math.random()),{patientDashboardUrl:b,goToNextTask:_}=x(async(a,e)=>{s=new P(e,a),i=new n(e,a);const{getLabFields:t}=I(e,a,m);d.value=[...t(!0),...v()]});async function T(a,e){await i.createEncounter();const t=await f({...e,obs_datetime:F.getSessionDate()},"diagnosis");await i.saveObservationList(t);const o=await f({...e},"notes");c.isEmpty(o)||(await s.createEncounter(),await s.saveObservationList(o)),_()}function p(a){return c.isEmpty(a)?[]:a.map(e=>({label:e.name,value:e.name,other:e.concept_id,isChecked:!1})).sort((e,t)=>e.label<t.label?-1:e.label>t.label?1:0)}async function y(a){return a.find(t=>t.label==="Malaria")?u.value==="Positive"?!0:await V("Patient has ".concat(u.value," malaria test result. Do you want to continue?")):!0}function v(){return[{id:"primary_diagnosis",helpText:"Select primary diagnosis",type:l.TT_INFINITE_SCROLL_MULTIPLE_SELECT,validation:a=>w.required(a),options:async(a,e="",t=1,o=10)=>p(await n.getDiagnosis(e,t,o)),beforeNext:async a=>await y(a),computedValue:a=>({tag:"diagnosis",obs:a.map(({other:e})=>i.buildValueCodedFromConceptId("Primary diagnosis",e))}),summaryMapValue:({value:a})=>({value:a,label:"Primary diagnosis"}),config:{isFilterDataViaApi:!0,showKeyboard:!0}},{id:"secondary_diagnosis",helpText:"Select secondary diagnosis",type:l.TT_INFINITE_SCROLL_MULTIPLE_SELECT,options:async(a,e="",t=1,o=10)=>p(await n.getDiagnosis(e,t,o)),beforeNext:async a=>await y(a),computedValue:a=>!c.isEmpty(a)&&{tag:"diagnosis",obs:a.map(({other:e})=>i.buildValueCodedFromConceptId("Secondary diagnosis",e))},summaryMapValue:({value:a})=>({value:a,label:"Secondary diagnosis"}),config:{showKeyboard:!0,isFilterDataViaApi:!0}},{id:"clinical_notes",helpText:"Clinical notes",type:l.TT_TEXT,computedValue:a=>a&&{tag:"notes",obs:s.buildValueText("Clinical notes construct",a.value)}}]}return(a,e)=>(L(),C(h,{key:m.value,cancelDestinationPath:D(b),fields:d.value,onFinishAction:T},null,8,["cancelDestinationPath","fields"]))}});export{j as default};
