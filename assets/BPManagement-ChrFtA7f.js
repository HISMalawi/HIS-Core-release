import{d as Y,al as M,S as L,R as j,Q as q,U as W,aT as J,_ as K,a3 as Q,df as Z,dk as X,$ as x,a4 as tt,a5 as et,W as at,a1 as st,ao as i,bk as _,ag as v,aj as nt,az as P,O as h,bq as b,bf as w,bp as ot,aq as it,aJ as rt,aM as lt,bs as ct,K as ut,a6 as dt,v as u,w as a,ab as s,u as r,x as n,G as T,Z as k,B as C,H as m,z as d,C as pt,E as ht}from"./index-ZHjf-rL0.js";import{_ as mt}from"./EncounterMixin.vue_vue_type_script_lang-D_tD9mOm.js";import{R as ft}from"./RiskFactorModal-RRAydpYL.js";import{B as D}from"./htn_service-0JQdhKW8.js";import{V as gt}from"./vitals_service-BUOf88rN.js";import"./encounter_guidelines-BZZ6VwqE.js";import"./GuidelineEngine-D6V1_Znr.js";import"./HisStandardForm-DV91SVN0.js";const f={background:"#444444"},bt=Y({mixins:[mt],components:{DataTable:M,IonTitle:L,IonToolbar:j,IonHeader:q,IonContent:W,IonGrid:J,IonRow:K,IonButton:Q,IonRadioGroup:Z,IonRadio:X,IonCol:x,IonFooter:tt,IonPage:et,IonItem:at,IonLabel:st},data:()=>({htn:{},hasARVNumber:!0,suggestedNumber:"",columns:[[i.thTxt("Date",{style:f}),i.thTxt("Systolic",{style:f}),i.thTxt("Diastolic",{style:f}),i.thTxt("BP Drugs",{style:f}),i.thTxt("Action / Note",{style:f})]],bpGradeColorMap:{"N/A":"#ffffff",normal:"#ffffff","grade 1":"#FFC3CE","grade 2":"#F20056","grade 3":"#FF3333"},rows:[],riskFactors:[],action:null,trail:[],date:null,patientOnBPDrugs:!1,patientFirstVisit:!1,normatensive:!1,patientHasHyperTensionObs:!1,currentDrugs:[],items:[],isEnrolledInHTN:!1,isAliveOnHTN:!1,HTNProgramID:20,aliveState:160,refer:!1}),watch:{ready:{async handler(t){if(!t)return;await(await _.create({message:"Please wait...",backdropDismiss:!1})).present(),this.htn=new D(this.patientID,this.providerID),this.trail=await this.htn.getBPTrail(),this.rows=this.formatBpTrailRows(this.trail),this.normatensive=D.isBpNormotensive(this.trail),this.riskFactors=await this.getRiskFactors(),this.date=v.toStandardHisDisplayFormat(nt.getSessionDate()),await this.isTransfered(),await this.hasHyperTenstion(),await this.getTreatmentStatus(),await this.getProgramStatus(),_.dismiss(),this.patientFirstVisit&&this.patientOnBPDrugs&&await this.alertTransferIn(),this.getItems()},immediate:!0}},computed:{totalRiskFactors(){return this.riskFactors.filter(t=>t.value==="Yes").length},showClinicianButton(){return!(P.isClinician()&&P.isDoctor())}},methods:{async onFinish(){var t,e;if(this.action||this.refer){if(!await this.htn.createEncounter())return h("Unable to create encounter");if(this.refer){if(!await this.htn.saveValueCodedObs("Refer patient to clinician","Yes"))return h("Unable to create Obs");this.gotoPatientDashboard()}else{if(!await this.htn.saveValueTextObs("Plan",this.action.label))return h("Unable to create Obs");const c={state:this.action.value};if(await this.htn.enrollPatient(c),typeof((e=(t=this.action)==null?void 0:t.other)==null?void 0:e.action)=="function")return this.action.other.action();this.nextTask()}}else h("Please select an action")},referPatient(){this.refer=!0,this.onFinish()},goToDiagnosis(){return this.$router.push({path:"/art/encounters/hypertension_diagnosis/".concat(this.patientID)})},async hasHyperTenstion(){const t=await b.getFirstValueCoded(this.patientID,"Patient has hypertension");this.patientHasHyperTensionObs=!!"".concat(t).match(/yes|no/i)},async isTransfered(){const t=await b.getFirstValueCoded(this.patientID,"Transferred");this.patientFirstVisit=!t},async getTreatmentStatus(){const t=await b.getFirstValueText(this.patientID,"Treatment status");this.patientOnBPDrugs=!!(t&&t.match(/BP Drugs started/i))},async getProgramStatus(){const t=await w.getPatientPrograms(this.patientID);this.isEnrolledInHTN=t.filter(e=>e.program.name==="HYPERTENSION PROGRAM").length>0,this.isEnrolledInHTN&&await this.programState()},async programState(){const t=await w.getPatientStates(this.patientID,this.HTNProgramID);this.isAliveOnHTN=t.filter(e=>e.name==="Alive").length>0},async getRiskFactors(){const e=ot.getConceptsByCategory("risk factors").map(async o=>{const l=await b.getFirstValueCoded(this.patientID,o.name);return{concept:o.name,value:l}});return Promise.all(e)},formatBpTrailRows(t){return Object.keys(t).map(e=>{const o=v.toStandardHisDisplayFormat(e);this.currentDrugs=this.currentDrugs.concat(t[e].drugs);const c={background:(()=>{const I=D.getBpGrade(parseInt(t[e].sbp),parseInt(t[e].dbp));return this.bpGradeColorMap[I]})()};return[i.tdDate(o,{style:c}),i.td(t[e].sbp,{style:c}),i.td(t[e].dbp,{style:c}),i.td(t[e].drugs.join(", "),{style:c}),i.td(t[e].note,{style:c})]})},async showRiskFactors(){const t=await it.create({component:ft,backdropDismiss:!1,cssClass:"large-modal",componentProps:{factors:this.riskFactors}});t.present();const{data:e}=await t.onDidDismiss();rt.isEmpty(e)||(this.riskFactors=e.map(o=>{const l=o.isChecked===!0?"Yes":"No";return{concept:o.concept,value:l}}))},async alertTransferIn(){await lt("Transfer in","Does the patient want to transfer in for HTN management?","",[{name:"Yes",slot:"end",color:"success"},{name:"No",slot:"start",color:"danger"}])==="Yes"?(await this.enrollInHTN(),await this.setHtnTransferred("Yes"),this.patientFirstVisit=!1,await this.getItems()):(await this.setHtnTransferred("No"),this.nextTask())},async enrollInHTN(){try{const t=new ct(this.patientID);t.setProgramId(this.HTNProgramID),t.setStateDate(w.getSessionDate()),t.setStateId(this.aliveState),await t.enrollProgram(),await t.updateState(),this.isEnrolledInHTN=!0,ut("Patient is now enrolled in HTN")}catch(t){console.error(t),h("".concat(t))}},async setHtnTransferred(t){const e=new gt(this.patientID,this.providerID);await e.createEncounter()?await e.saveValueCodedObs("Transferred",t)||h("Unable to create observation Transferred for patient"):h("Unable to create patient transfer encounter")},async getItems(){this.currentDrugs.length>0?this.items=[{label:"Did not take prescribed drugs",value:"on treatment",other:{action:()=>this.$router.push("/art/encounters/bp_adherence/".concat(this.patientID))}},{label:"Continue drugs",value:"on treatment",other:{action:()=>this.$router.push("/art/encounters/bp_adherence/".concat(this.patientID))}},{label:"Review drugs",value:"on treatment",other:{action:()=>this.$router.push("/art/encounters/bp_adherence/".concat(this.patientID,"?review=true"))}}]:(this.items=[{label:"Lifestyle advice given",value:"Lifestyle changes only"},{label:"Not yet stable on ART",value:"Symptomatic but not in treatment"},{label:"Patient declining BP drugs ",value:"Symptomatic but not in treatment"}],this.normatensive&&this.items.push({label:"Return to annual screening",value:"Alive"}),this.items.push({label:"Start anti hypertensives",value:"On treatment",other:{action:()=>this.$router.push("/art/encounters/bp_prescription/".concat(this.patientID))}}))}}}),yt={key:0,style:{color:"green"}},wt={slot:"end"};function Tt(t,e,o,l,c,I){const H=s("ion-title"),p=s("ion-button"),y=s("ion-toolbar"),F=s("ion-header"),S=s("data-table"),N=s("ion-content"),R=s("ion-label"),B=s("ion-radio"),O=s("ion-item"),V=s("ion-col"),E=s("ion-row"),$=s("ion-grid"),A=s("ion-radio-group"),z=s("ion-footer"),G=s("ion-page");return r(),u(G,null,{default:a(()=>[n(F,null,{default:a(()=>[n(y,null,{default:a(()=>[n(H,null,{default:a(()=>[T("span",null,"BP management screening on "+k(t.date),1),t.patientOnBPDrugs?(r(),C("small",yt," (Patient already on BP drugs)")):m("",!0)]),_:1}),T("span",wt,[t.totalRiskFactors>0?(r(),u(p,{key:0,color:"danger",onClick:t.showRiskFactors},{default:a(()=>[d("View/Edit risk factors "+k(t.totalRiskFactors),1)]),_:1},8,["onClick"])):m("",!0),t.totalRiskFactors===0?(r(),u(p,{key:1,onClick:t.showRiskFactors},{default:a(()=>e[1]||(e[1]=[d("add riskfactors")])),_:1},8,["onClick"])):m("",!0)])]),_:1})]),_:1}),n(N,null,{default:a(()=>[n(S,{config:{showIndex:!1},columns:t.columns,rows:t.rows},null,8,["columns","rows"])]),_:1}),n(z,null,{default:a(()=>[n(y,null,{default:a(()=>[e[2]||(e[2]=T("h1",{style:{"text-align":"center"}},"Actions",-1)),n(A,{modelValue:t.action,"onUpdate:modelValue":e[0]||(e[0]=g=>t.action=g)},{default:a(()=>[n($,null,{default:a(()=>[n(E,null,{default:a(()=>[(r(!0),C(ht,null,pt(t.items,(g,U)=>(r(),u(V,{size:"4",key:U},{default:a(()=>[n(O,null,{default:a(()=>[n(R,{style:{"font-size":"1.0rem","font-weight":"bold"}},{default:a(()=>[d(k(g.label),1)]),_:2},1024),n(B,{value:g},null,8,["value"])]),_:2},1024)]),_:2},1024))),128))]),_:1})]),_:1})]),_:1},8,["modelValue"])]),_:1}),n(y,{color:"dark"},{default:a(()=>[n(p,{size:"large",color:"danger",slot:"start",onClick:t.gotoPatientDashboard},{default:a(()=>e[3]||(e[3]=[d(" cancel ")])),_:1},8,["onClick"]),t.showClinicianButton?(r(),u(p,{key:0,size:"large",color:"danger",slot:"start",onClick:t.referPatient},{default:a(()=>e[4]||(e[4]=[d(" Refer to clinician ")])),_:1},8,["onClick"])):m("",!0),t.patientHasHyperTensionObs?m("",!0):(r(),u(p,{key:1,size:"large",slot:"end",onClick:t.goToDiagnosis},{default:a(()=>e[5]||(e[5]=[d(" Hypertension Diagnosis ")])),_:1},8,["onClick"])),t.patientHasHyperTensionObs&&!t.isEnrolledInHTN?(r(),u(p,{key:2,size:"large",slot:"end",onClick:t.enrollInHTN},{default:a(()=>e[6]||(e[6]=[d(" Enroll in HTN ")])),_:1},8,["onClick"])):m("",!0),t.patientHasHyperTensionObs?(r(),u(p,{key:3,size:"large",color:"success",slot:"end",onClick:t.onFinish},{default:a(()=>e[7]||(e[7]=[d(" Finish ")])),_:1},8,["onClick"])):m("",!0)]),_:1})]),_:1})]),_:1})}const Ft=dt(bt,[["render",Tt]]);export{Ft as default};
