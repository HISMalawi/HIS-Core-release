import{d as p,r as d,bI as u,dP as m,ab as f,ac as _,u as v,v as E,w as T,x as b,y as n,a5 as h}from"./index-DrPQ21-i.js";import{H as D}from"./HisStandardForm-rh8Trs2q.js";import{u as I}from"./useEncounter-DKfF-d5Z.js";import{g as s}from"./util-CyjuS_4X.js";import{r as C}from"./commons-BNWLqk9R.js";import"./isEmpty-BSlM0y0K.js";import"./encounter_guidelines-D8L0Wl1z.js";import"./GuidelineEngine-D6V1_Znr.js";const k=p({__name:"Examination",setup(x){const i=d([]),e=new u(-1,m.EXAMINATION),{goToNextTask:r,patientDashboardUrl:c}=I((t,a)=>{e.patientID=a,e.providerID=t,i.value=[{id:"diagnosisType",helpText:"Method of Diagnosis:",type:f.TT_SELECT,validation:o=>_.required(o),computedValue:o=>({concept_id:s("PROCEDURE_TYPE"),value_coded:s("".concat(o.value)),obs_datetime:e.date}),options:()=>[{value:"LAB_ORDER",label:"Lab Order"},{value:"CLINICAL",label:"Clinical"}]}]});async function l(t,a){await e.createEncounter(),await e.saveObservationList(await C(a)),r()}return(t,a)=>(v(),E(n(h),null,{default:T(()=>[b(D,{cancelDestinationPath:n(c),onFinishAction:l,fields:i.value,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{k as default};
