import{d as m,K as o,dN as g,M as v,bR as b,ct as u,N as D,o as _,c as h,w as R,b as c,cD as d,cm as w,I as C,t as P,q as x}from"./index-BFVcutZq.js";import{v as O}from"./TableView-CvEqt4DX.js";import{D as S}from"./ReportDateSelectionPrompt-JDliGFTi.js";import"./fuse-YdZE3OCN.js";import"./HisKeyboard-kCuG2DTL.js";const A=m({__name:"ClinicOutcomes",setup(G){const t=o([]),n=o(""),r=o(!1),a=new g,f=v(()=>[[{label:"Age Group",ref:"age_group"},{label:"Gender",ref:"gender"},{label:"Alive",ref:"alive"},{label:"Died",ref:"gender",value:e=>b(e.gender)},{label:"Referred Within",ref:"birthdate",value:e=>u(e.birthdate)},{label:"Transferred Out",ref:"order_date",value:e=>u(e.order_date)}]]),s=async()=>{if(!(a.startDate&&a.endDate))return P("Start date and end date required!");r.value=!0,t.value=[];try{t.value=await a.getOutcomesReport()}catch(e){x("Unable to generate report!")}r.value=!1},l=()=>S({onFinish:(e,i,p)=>{n.value="Period (".concat(p,")"),a.startDate=e,a.endDate=i,s()}});return D(()=>l()),(e,i)=>(_(),h(d(C),null,{default:R(()=>[c(d(w),{"is-open":r.value,message:"Please wait..."},null,8,["is-open"]),c(O,{title:"Clinic Outcomes Report",subtitle:n.value,columns:f.value,columnData:t.value,rowsPerPage:15,onConfigure:l,onRefresh:()=>s(),"report-prefix":"Clinic"},null,8,["subtitle","columns","columnData","onRefresh"])]),_:1}))}});export{A as default};
