import{d as g,T as u,ah as p,aV as c,aS as f,$ as m,aW as v,aT as l,bk as d,ck as T,t as b,q as I,p as O}from"./index-BFVcutZq.js";import{F as o,E as y}from"./encounter_guidelines-fEzG7yyD.js";import{m as E}from"./GuidelineEngine-D6V1_Znr.js";import{H as N}from"./HisStandardForm-DO3sZVdL.js";const w=g({components:{HisStandardForm:N},data:()=>({offlineID:null,patient:{},fields:[],patientID:"",providerID:-1,providers:[],encounterStartTime:null,facts:{npid:"",givenName:"",familyName:"",age:-1,gender:"",birthDate:"",birthEstimated:!1,sessionDate:"",apiDate:"",isEnrolledInProgam:!1,encounterName:"N/A",providers:[],isBdeMode:!1,outcome:"",outcomeStartDate:"",village:"",district:"",currentTA:""},formLabel:"",ready:!1}),created(){this.$route.params.patient_id&&(this.offlineID=this.$route.params.patient_id,this.patientID=parseInt("".concat(this.$route.params.patient_id)),this.goOffline()?this.initOfflineData():u.get("ACTIVE_PATIENT",{patientID:this.patientID}).then(t=>{this.patient=t,p.isEmpty(this.patient)||c().cachePatient(this.patient),this.setEncounterFacts().then(()=>{this.checkEncounterGuidelines().then(()=>{this.ready=!0,this.setStartTime()}).catch(e=>console.log(e))}).catch(()=>{this.goOffline()&&this.initOfflineData()})}))},computed:{cancelDestination(){return this.patientDashboardUrl()}},methods:{setStartTime(){this.encounterStartTime=new Date().getTime()},goOffline(){return!f.value||m.value},isOnline(){return f.value},isOfflineMode(){return m.value},initOfflineData(){var s,a,i;const t=c().findByID(this.offlineID),e=(s=t==null?void 0:t.personParams)==null?void 0:s.person;e&&(this.facts.birthDate=e.birthdate,this.facts.age=v(l.getSessionDate()).diff(this.facts.birthDate,"years"),this.facts.birthEstimated=((a=t==null?void 0:t.personParams)==null?void 0:a.person.birthdate_estimated)||!1,this.facts.npid=(i=t==null?void 0:t.personParams)==null?void 0:i.npid,this.facts.givenName=e.given_name,this.facts.familyName=e.family_name,this.facts.district=e.current_district,this.facts.village=e.current_village,this.facts.currentTA=e.current_traditional_authority,this.facts.gender=e.gender,this.ready=!0,this.setStartTime())},async saveFormEncounterAndProceed(t={}){let e="Pending",s=!1,a=null;const r=(new Date().getTime()-this.encounterStartTime)/1e3/60;try{const h=await d.buildValueText("Device",T()),D=await d.buildValueNumber("Review Time",r);a=[...await this.resolveObs(t.computedData),h,D],c().saveObsOffline({observations:a,id:this.offlineID,uploadStatus:e,encounterName:this.$route.name,encounterTypeID:t.encounterTypeID,meta:t.formData,labOrders:t.labOrders,created:s},s),c().synchronizeRecord(this.offlineID),t.skipNextTask||this.nextOfflineFlow()}catch(h){return console.error("".concat(h)),b("Unable to resolve observations")}},runflowState(t,e=null){const s={};if(s[o.SET_PROVIDER]=a=>{const[i]=a.split(" "),n=p.find(this.providers,{username:i});return n&&(this.providerID=n.person_id),o.CONTINUE},s[o.CHANGE_SESSION_DATE]=()=>(this.$router.push("/session/date?patient_dashboard_redirection_id=".concat(this.patientID)),o.EXIT),s[o.CHANGE_PATIENT_OUTCOME]=()=>(this.$router.push("/patient/programs/".concat(this.patientID)),o.EXIT),s[o.GO_TO_PATIENT_DASHBOARD]=()=>(this.gotoPatientDashboard(),o.EXIT),t in s)return s[t](e)},async checkEncounterGuidelines(){var e,s,a,i;const t=E(this.facts,y);for(const n in t){const r=t[n];if((e=r==null?void 0:r.actions)!=null&&e.alert&&this.runflowState(await((s=r==null?void 0:r.actions)==null?void 0:s.alert(this.facts)))===o.EXIT)return;if((a=r==null?void 0:r.actions)!=null&&a.selection){const h=await((i=r==null?void 0:r.actions)==null?void 0:i.selection(this.facts));this.runflowState(h.flowState,h.value)}}},async setEncounterFacts(){try{const t=await u.get("PATIENT_PROGRAM",{patientID:this.patientID});this.facts.isEnrolledInProgam=t.programID===l.getProgramID(),this.facts.outcome=t.outcome,this.facts.outcomeStartDate=t.startDate}catch(t){console.error(t),I("".concat(t))}this.facts.npid=this.patient.getNationalID(),this.facts.givenName=this.patient.getGivenName(),this.facts.familyName=this.patient.getFamilyName(),this.facts.currentTA=this.patient.getCurrentTA(),this.facts.district=this.patient.getCurrentDistrict(),this.facts.village=this.patient.getCurrentVillage(),this.facts.sessionDate=l.getSessionDate(),this.facts.apiDate=l.getCachedApiDate(),this.facts.isBdeMode=l.isBDE(),this.facts.birthDate=this.patient.getBirthdate(),this.facts.age=this.patient.getAge(),this.facts.encounterName=this.$route.name?this.$route.name.toString().toUpperCase():"N/A",l.isBDE()&&(this.providers=await u.get("PROVIDERS"),this.facts.providers=this.providers.sort((t,e)=>{const s=t.username.toUpperCase(),a=e.username.toUpperCase();return s<a?-1:s>a?1:0}).map(t=>{var s,a;let e="".concat(t.username);if(!p.isEmpty((s=t==null?void 0:t.person)==null?void 0:s.names)){const[i]=((a=t.person)==null?void 0:a.names)||[];e+=" (".concat(i.given_name," ").concat(i.family_name,")")}return e}))},toOption(t,e={}){return{label:t,value:t,other:e}},mapStrToOptions(t){return t.map(e=>typeof e=="string"||typeof e=="number"?{label:e,value:e}:e)},patientDashboardUrl(){return"/patient/dashboard/".concat(this.$route.params.patient_id)},gotoPatientDashboard(){return this.$router.push({path:this.patientDashboardUrl()})},nextOfflineFlow(){const t=c().nextPatientWorkflowActivity(this.patientID);return!t||!t.patientUrl?this.$router.push("/patient/dashboard/".concat(this.patientID)):this.$router.push("".concat(t.patientUrl,"/").concat(this.patientID))},async nextTask(){try{const t=this.offlineID||this.patientID;await O(t,this.$router,this.$route)}catch(t){console.error("Workflow error "+t),this.gotoPatientDashboard()}},yesNoOptions(){return[{label:"Yes",value:"Yes"},{label:"No",value:"No"}]},toYesNoOption(t,e={}){return{label:t,value:"",other:{...e,values:this.yesNoOptions()}}},mapOptions(t){return t.map(e=>({label:e,value:e}))},toConditionalOptions(t){const e=[];for(const s of t){if(typeof s[1]=="boolean"){s[1]&&e.push(this.toOption(s[0]));continue}e.push(this.toOption(s[0]))}return e},yesNoUnknownOptions(){return[{label:"Yes",value:"Yes"},{label:"No",value:"No"},{label:"Unknown",value:"Unknown"}]},resolveObs(t,e=""){const s=Object.values(t).filter(a=>a&&(a.tag===e||e==="")).reduce((a,i)=>{const n=i.obs?i.obs:i;return Array.isArray(n)?a=a.concat(n):typeof n=="function"?a.push(n()):a.push(n),a},[]);return Promise.all(s)},inArray(t,e){try{return t.filter(s=>e(s)).length>0}catch(s){return!1}},validateSeries(t){try{for(const e in t){const s=t[e]();if(s)return s}}catch(e){return[e]}}}});export{w as _};
