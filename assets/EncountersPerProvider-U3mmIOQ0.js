import{d as x,r as u,o as _,D as h,a as C,b as k,w as y,e as b,f as d,v as j,x as E,m as O,z as p,q as V,y as F}from"./index-DrAzzURJ.js";import{v as D}from"./TableView-BsrlHHo8.js";import{D as S}from"./data_verification_service-CCjVcuDX.js";import"./Export-CbpvcCGj.js";import"./index-CKDW3HWh.js";const z=x({__name:"EncountersPerProvider",setup(q){const f=u([]),m=u(""),l=u(!1),r=new S,P=[[{label:"#",ref:"index"},{label:"User",ref:"provider"},{label:"Count",ref:"count"},{label:"Percentage",ref:"percentage"},{label:"View",ref:"drilldown",toValue:()=>"View",tdClick:async e=>{e.refData.length&&(await p.create({component:D,backdropDismiss:!1,cssClass:"large-modal",componentProps:{title:e.data.provider,columns:[[{label:"#",ref:"index"},{label:"Encounter name",ref:"name"},{label:"Total done",ref:"total"}]],rowsPerPage:100,columnData:e.refData,onFinish:()=>p.getTop().then(t=>t&&p.dismiss())}})).present()}}]],g=async()=>{if(!(r.startDate&&r.endDate))return V("Start date and end date required!");l.value=!0;try{const e=await r.getEncounterPerProvider(),t=Object.values(e).reduce((n,a)=>n+Object.values(a).reduce((i,o)=>i+o,0),0);f.value=Object.keys(e).reduce((n,a,i)=>{const o=Object.values(e[a]).reduce((c,s)=>c+s,0);return[...n,{index:i+1,provider:a,count:o,percentage:(o/t*100).toFixed(2)+"%",drilldown:Object.keys(e[a]).reduce((c,s,w)=>[...c,{index:w+1,name:s,total:e[a][s]}],[])}]},[])}catch(e){console.error(e),F("Unable to generate report!")}l.value=!1},v=()=>h({onFinish:(e,t,n)=>{m.value=n,r.startDate=e,r.endDate=t,g()}});return _(()=>v()),(e,t)=>(k(),C(d(O),null,{default:y(()=>[b(d(j),{"is-open":l.value,message:"Please wait.."},null,8,["is-open"]),b(D,{"icon-url":d(E)("reports.png"),title:"Encounters per Provider","report-prefix":"Clinic",subtitle:m.value,columns:P,columnData:f.value,rowsPerPage:100,onConfigure:v,onRefresh:g},null,8,["icon-url","subtitle","columnData"])]),_:1}))}});export{z as default};
