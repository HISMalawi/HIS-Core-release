import{bU as h,d as k,r as d,bq as o,an as P,ao as D,a as y,b as O,i as T,l as i,k as x}from"./index-CJleCCtM.js";import{H as E}from"./HisStandardForm-BPNPJCrM.js";import{u as F}from"./useEncounter-BYi6HXkG.js";import"./isEmpty-Dwdx9lIX.js";import"./encounter_guidelines-CfQXyRxl.js";import"./GuidelineEngine-D6V1_Znr.js";class U extends h{constructor(e,n){super(e,184,n)}}const V=k({__name:"CxCaOutcome",setup(p){let e,n;const c=d([]),l=d([]),u=o.getProgramID(),f=o.getLocationName(),v=o.getSessionDate(),{patientDashboardUrl:_,goToNextTask:b}=F(async(t,r)=>{n=r,e=new U(r,t),o.getProgramWorkflows(u).then(a=>{l.value=a}),c.value=g()});async function w(t){if(!await e.createEncounter())return i("Unable to create encounter");const a=t.select_referral_outcome.value,m=l.value.flatMap(s=>s.states).find(s=>s.concept.concept_names.some(S=>S.name===a));if(!m)return i("Unable to find workflow state for outcome: ".concat(a));if(!await o.createState(n,u,{state:m.program_workflow_state_id,location_id:f,date:v}))return i("Unable to update state");const C=await e.buildValueCoded("Outcome",a);await e.saveObservationList([C]),x("Observations and encounter created!"),b()}function g(){return[{id:"select_referral_outcome",helpText:"Referral outcome",type:P.TT_SELECT,validation:t=>D.required(t),options:()=>[{label:"Continue follow-up",value:"Continue follow-up"},{label:"No Dysplasia/Cancer",value:"No Dysplasia/Cancer"},{label:"Palliative Care",value:"Palliative Care"},{label:"Patient died",value:"Patient died"}]}]}return(t,r)=>(y(),O(E,{fields:c.value,onFinishAction:w,skipSummary:!0,cancelDestinationPath:T(_)},null,8,["fields","cancelDestinationPath"]))}});export{V as default};
