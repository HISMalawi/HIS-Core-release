import{F as d}from"./dynamic-import-helper-BkBZiFw5.js";import{H as p}from"./HisStandardForm-CaDwl-hA.js";import{V as c}from"./vitals_service-DdmMFpgE.js";import{d as f,aJ as v,ab as o,t as g,T as b,a$ as H,aI as m,ad as F,n as w,cv as u,_ as W,r as B,o as y,c as P}from"./index-BCTN_bnC.js";import{_ as V}from"./EncounterMixin.vue_vue_type_script_lang-Bfd5amPg.js";import"./TouchScreenForm-TKB9q3ZD.js";import"./ToolbarMediumCard-O_J6wu7C.js";import"./Transformers-BPPLlH12.js";import"./ViewPort-BCxYiILf.js";import"./encounter_guidelines-DZpIPlYY.js";import"./GuidelineEngine-D6V1_Znr.js";const A=f({mixins:[V],components:{HisStandardForm:p},data:()=>({app:v.getActiveApp(),activeField:"",age:null,gender:null,hasBPinfo:!1,finalHeightValue:null,recentHeight:null,recentHeightObsID:-1,HTNEnabled:!1,optionWhiteList:[],hasHTNObs:!1,vitals:{},weightForHeight:{},medianWeightandHeight:{},canEditHeight:!1,patientAgeAtPrevRecordedHeight:-1}),watch:{ready:{handler(e){e&&this.init()},immediate:!0}},methods:{init(){this.vitals=new c(this.patientID,this.providerID),this.age=this.patient.getAge(),this.gender=this.patient.getGender(),this.fields=this.getFields()},getOptions(){let e="";this.recentHeight&&(this.age>18||this.patientAgeAtPrevRecordedHeight>=18)&&(e=this.recentHeight||"");const t=[{label:"Weight",value:"",other:{modifier:"KG",icon:"weight",required:!0}},{label:"Height",value:"".concat(e),other:{modifier:"CM",icon:"height",recentHeight:this.recentHeight,visible:this.canEditHeight,required:this.canEditHeight}},{label:"BP",value:"",other:{modifier:"mmHG",icon:"bp"}},{label:"Temp",value:"",other:{modifier:"Â°C",icon:"temp"}},{label:"SP02",value:"",other:{modifier:"%",icon:"spo2"}},{label:"Pulse",value:"",other:{modifier:"BPM",icon:"pulse-rate"}},{label:"Age",value:this.age,other:{modifier:"Years old",icon:"",visible:!1}}];return o.isEmpty(this.optionWhiteList)?t:t.filter(i=>this.optionWhiteList.includes(i.label)).map(i=>(i.other.required=!0,i))},canCheckWeightHeight(){return o.isEmpty(this.optionWhiteList)||this.optionWhiteList.includes("Height")&&this.optionWhiteList.includes("Weight")},canCheckBp(){return o.isEmpty(this.optionWhiteList)||this.optionWhiteList.includes("BP")},async onFinish(e){if(!await this.vitals.createEncounter())return g("Unable to create treatment encounter");const i=await this.buildObs(e);if(!await this.vitals.saveObservationList(i))return g("Unable to save patient observations");b("Observations and encounter created!"),this.nextTask()},async buildObs(e){const t=await this.mapObs(this.sanitizeVitals(e.vitals).filter(i=>i.label!=="BP").map(i=>(i.label==="Height"&&i.other.visible&&this.finalHeightValue&&(i.value=this.finalHeightValue),i)));if(this.HTNEnabled&&!this.hasHTNObs&&e.on_htn_medication){const i=await this.vitals.buildValueText("Treatment status",e.on_htn_medication.value);t.push(i)}return t},splitBP(e){const t=[];return e.forEach(i=>{if(i.label==="BP"){const s="".concat(i.value).split("/"),a=s[0],n=s[1];t.push({label:"Systolic",value:a}),t.push({label:"Diastolic",value:n})}}),t},getBMI(e){const t=this.getVal(e,"Weight"),i=this.getVal(e,"Height"),s=[];if(this.age<=14){const a=(t/parseFloat(this.medianWeightandHeight.weight)*100).toFixed(0),n=(i/parseFloat(this.medianWeightandHeight.height)*100).toFixed(0),r=(i%Math.floor(i)<.5?0:.5)+Math.floor(i),h=this.weightForHeight[r.toFixed(1)],l=(t/h*100).toFixed(0);isNaN(parseFloat(l))||s.push({label:"Weight for height percent of median",value:l}),s.push({label:"Weight for age percent of median",value:a}),s.push({label:"Height for age percent of median",value:n})}else{const a=u.calculateBMI(t,i);s.push({label:"BMI",value:a})}return s},getVal(e,t){const i=e.filter(s=>s.label===t);return i[0].value===""?0:parseFloat("".concat(i[0].value))},async mapObs(e){const t=e.map(async i=>await this.vitals.buildValueNumber(i.label,i.value));return Promise.all(t)},validateVitals(e){const t=this.checkRequiredVitals(e);if(t.length>0)return t.map(s=>["".concat(s.label," can not be empty")]);const i=this.sanitizeVitals(e);return this.vitals.validateAll(i)},sanitizeVitals(e){let t=e.filter(i=>i.label==="Height"&&i.other.required==!1?!1:i.value!==""&&i.label!=="Age");return this.canCheckBp()&&(t=t.concat(this.splitBP(t))),this.canCheckWeightHeight()&&(t=t.concat(this.getBMI(e))),t},checkRequiredVitals(e){return e.filter(t=>t.value===""&&t.other.required===!0)},getFields(){return[{id:"vitals",helpText:"Vitals entry",type:d.TT_VITALS_ENTRY,init:async()=>{const e=this.$route.query.vital_options;if(e&&(this.optionWhiteList=e.split(",")),this.canCheckWeightHeight()){const t=await this.patient.getRecentHeightObs();o.isEmpty(t)?this.canEditHeight=!0:(this.patientAgeAtPrevRecordedHeight=H(t.obs_datetime).diff(this.patient.getBirthdate(),"year"),this.recentHeight=t.value_numeric,this.recentHeightObsID=t.obs_id,this.canEditHeight=this.patientAgeAtPrevRecordedHeight<18||this.age<18),this.age<=14&&(this.medianWeightandHeight=await this.patient.getMedianWeightHeight(),this.weightForHeight=await m.getWeightForHeightValues())}return!0},validation:e=>this.validateVitals(e),beforeNext:async e=>{const t=o.find(e,{label:"Height"});if(t&&this.recentHeight&&t.other.visible){const i=parseInt("".concat(t.value||0)),s=parseInt("".concat(this.recentHeight||0));if(i<s){const a="Use ".concat(s," CM"),n="Use ".concat(i," CM");await F('Previous Height "'.concat(s,' CM"'),'Current Height "'.concat(i,' CM"'),'Inconsistent Height Reading (Height can not be lower than previous height of " '.concat(this.recentHeight,' "CM. Please SELECT the correct height.)'),[{name:a,slot:"start",color:"success"},{name:n,slot:"end",color:"danger"}])===n&&this.recentHeightObsID?await w("Do you want to void height observation for ".concat(s))&&await c.voidObs(this.recentHeightObsID):this.finalHeightValue=s}}return!0},config:{hiddenFooterBtns:["Clear"],onUpdateAlertStatus:async e=>{const t=o.find(e,{label:"Weight"}),i=o.find(e,{label:"Height"});if(!(t&&i))return;const s=parseFloat(t.value),a=parseFloat(i.value);if(s<=0||a<=0)return{label:"BMI",value:"N/A",color:"",status:""};const n=await u.getBMI(s,a,this.gender,this.age);return{label:"BMI",value:n.index,color:n.color,status:n.result}},onChangeOption:e=>{if(!e.value&&e.other.required)throw"Value for ".concat(e.label," is required");if(e.value){const t=this.vitals.validator(e);if(t&&t.length)throw t}}},options:()=>this.getOptions()}]}}});function O(e,t,i,s,a,n){const r=B("his-standard-form");return y(),P(r,{fields:e.fields,activeField:e.activeField,onOnskip:t[0]||(t[0]=h=>e.activeField=""),onFinishAction:e.onFinish,skipSummary:!0,cancelDestinationPath:e.cancelDestination},null,8,["fields","activeField","onFinishAction","cancelDestinationPath"])}const q=W(A,[["render",O]]);export{q as default};
