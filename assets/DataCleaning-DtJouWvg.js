import{D as l,C as r}from"./data_cleaning_report_service-7lUYvCwT.js";import{_ as f}from"./ReportMixin.vue_vue_type_script_lang-kdNyBZie.js";import{R as g}from"./TableReportTemplate-eWqURQFa.js";import{d as w,f as T,ai as v,aj as R,aX as c,av as t,aP as b,dA as d,m as u,cq as m,S as p,af as x,c as S,w as C,ak as D,a as I,b as A}from"./index-4ZhJu3VE.js";import{v as E}from"./TableView-al7pPq3G.js";import"./BasicReportTemplate-jpe-tfW1.js";import"./Export--AC_4hfU.js";import"./index-CoZ4oawq.js";import"./Pagination-BcBM_ePe.js";import"./HisStandardForm-K1lIrz3_.js";import"./ReportErrors-COHlHjQG.js";const k=w({mixins:[f],components:{ReportTemplate:g,IonPage:T},data:()=>({title:"Data cleaning report",rows:[],columns:[]}),created(){this.fields=[{id:"indicator",helpText:"Select indicator",type:v.TT_SELECT,requireNext:!1,validation:a=>R.required(a),options:()=>this.getIndicatorOptions()},...c({id:"start_date",helpText:"Start",required:!0,condition:a=>!a.indicator.other.skipDateSelection,minDate:()=>"2001-01-01",maxDate:()=>p.getSessionDate(),estimation:{allowUnknown:!1},computeValue:a=>a}),...c({id:"end_date",helpText:"End",required:!0,condition:a=>!a.indicator.other.skipDateSelection,minDate:(a,e)=>e.start_date,maxDate:()=>p.getSessionDate(),estimation:{allowUnknown:!1},computeValue:a=>a})]},methods:{async onPeriod(a,e){this.rows=[],this.title=a.indicator.label;const s=a.indicator;this.columns=s.other.columns,await s.other.setRows(a,e)},masterCardBtn(a){return t.tdBtn("View",()=>this.$router.push("/art/mastercard/".concat(a)))},getDefaultIndicatorColumns(a=[]){return[[t.thTxt("ARV Number"),t.thTxt("Patient Id"),t.thTxt("First Name"),t.thTxt("Last Name"),t.thTxt("Gender"),t.thTxt("Date of birth"),...a,t.thTxt("Action")]]},async setDefaultIndicatorRows(a,e,s,i=null){this.report=new l,this.report.setStartDate(e),this.report.setEndDate(s),this.period=this.report.getDateIntervalPeriod();const o=this.sortByArvNumber(await this.report.getCleaningToolReport(a)||[],"arv_number");b.isEmpty(o)||o.forEach(n=>{const h=typeof i=="function"?i(n):[];this.rows.push([t.td(n.arv_number),t.td(n.patient_id),t.td(n.given_name),t.td(n.family_name),t.td(this.formatGender(n.gender)),t.tdDate(n.birthdate),...h,this.masterCardBtn(n.patient_id)])})},getIndicatorOptions(){return[{label:"DOB > Date enrolled",value:r.DobMoreThanEnrolledDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(r.DobMoreThanEnrolledDate,e.start_date,e.end_date)}},{label:"Date enrolled < Earliest start date",value:r.DateEnrolledLessThanEarliestStartDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Earliest start date"),t.thTxt("Date enrolled")]),setRows:(a,e)=>this.setDefaultIndicatorRows(r.DateEnrolledLessThanEarliestStartDate,e.start_date,e.end_date,s=>[t.tdDate(s.earliest_start_date),t.tdDate(s.date_enrolled)])}},{label:"Encounters after Death",value:r.ClientsWithEncountersAfterDeath,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(r.ClientsWithEncountersAfterDeath,e.start_date,e.end_date)}},{label:"Incomplete visits",value:"Incomplete visits",other:{skipDateSelection:!1,columns:[[t.thTxt("ARV#"),t.thTxt("NHID"),t.thTxt("First name"),t.thTxt("Last name"),t.thTxt("Gender"),t.thTxt("Birthdate"),t.thTxt("Date(s)"),t.thTxt("Action")]],setRows:async(a,e)=>{this.report=new l,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod();const s=await this.report.getIncompleteVisits();for(const i in s){const o=s[i];this.rows.push([t.td(o.arv_number),t.td(o.national_id),t.td(o.given_name),t.td(o.family_name),t.td(this.formatGender(o.gender)),t.tdDate(o.birthdate),t.td(o.dates.map(n=>this.toDate(n)).join("<br/>")),this.masterCardBtn(parseInt(i.toString()))])}}}},{label:"Enrolled on ART before birth",value:"Enrolled on ART before birth",other:{skipDateSelection:!0,columns:[[t.thTxt("ARV number"),t.thTxt("Name"),t.thTxt("Earliest start date"),t.thTxt("Date enrolled"),t.thTxt("Gender"),t.thTxt("Birth Date"),t.thTxt("Action")]],setRows:async()=>{try{this.report=new l,(await this.report.getEnrolledOnArtBeforeBirth()).forEach(e=>{this.rows.push([t.td(e.identifier),t.td(e.name),t.tdDate(e.earliest_start_date),t.tdDate(e.date_enrolled),t.td(this.formatGender(e.gender)),t.tdDate(e.birthdate),this.masterCardBtn(e.patient_id)])})}catch(a){if(!(a instanceof d))throw a}}}},{label:"Missing VL Results",value:"Missing VL Results",other:{columns:[[t.thTxt("ARV number"),t.thTxt("First name"),t.thTxt("Last name"),t.thTxt("Gender"),t.thTxt("Accession number"),t.thTxt("Order date"),t.thTxt("Action")]],setRows:async(a,e)=>{try{this.report=new l,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod(),(await this.report.getCleaningToolReport(r.MissingVlResults)).forEach(i=>{this.rows.push([t.td(i.arv_number),t.td(i.given_name),t.td(i.family_name),t.td(this.formatGender(i.gender)),t.td(i.accession_number),t.tdDate(i.order_date),this.masterCardBtn(i.patient_id)])})}catch(s){if(!(s instanceof d))throw s}}}},{label:"Male patients with female observations",value:r.MalesWithFemaleObs,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Visit date")]),setRows:(a,e)=>this.setDefaultIndicatorRows(r.MalesWithFemaleObs,e.start_date,e.end_date,s=>[(()=>{const i="".concat(s.visit_date).split(",");return i.length<=1?t.tdDate(s.visit_date):t.tdLink("".concat(i.length," visits dates"),async()=>{(await u.create({component:E,backdropDismiss:!1,cssClass:"large-modal",componentProps:{title:"".concat(i.length," visit dates"),columns:[[{label:"ARV",ref:"arv_number"},{label:"Given name",ref:"given_name"},{label:"Family name",ref:"family_name"},{label:"Visit date",ref:"visit_date"}]],columnData:i.map(o=>({...s,visit_date:m(o)})),onFinish:()=>u.dismiss()}})).present()})})()])}},{label:"Missing important demographics elements",value:r.MissingDemographics,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(r.MissingDemographics,e.start_date,e.end_date)}},{label:"Missing start reason",value:r.MissingStartReasons,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(r.MissingStartReasons,e.start_date,e.end_date)}},{label:"Missing ART start date",value:r.MissingArtStartDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(r.MissingArtStartDate,e.start_date,e.end_date)}},{label:"Multiple start reasons",value:r.MultipleStartReasons,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Reasons"),t.thTxt("Visits")]),setRows:(a,e)=>this.setDefaultIndicatorRows(r.MultipleStartReasons,e.start_date,e.end_date,s=>[t.td("".concat(s.reasons).split(",").join("<p/>")),t.td(s.visits.split(",").map(i=>m(i)).join("<p/>"))])}},{label:"Patients with Pre-ART / Unknown outcome",value:r.PreArtOrUnknownOutcomes,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns(),setRows:(a,e)=>this.setDefaultIndicatorRows(r.PreArtOrUnknownOutcomes,e.start_date,e.end_date)}},{label:"Prescriptions without dispensations",value:r.PrescriptionWithoutDispensation,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Visit Date")]),setRows:(a,e)=>this.setDefaultIndicatorRows(r.PrescriptionWithoutDispensation,e.start_date,e.end_date,s=>[t.tdDate(s.visit_date)])}},{label:"Different pregnancy value on same date",value:r.DifferentPregnancyValueOnSameDate,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Visit Date")]),setRows:(a,e)=>this.setDefaultIndicatorRows(r.DifferentPregnancyValueOnSameDate,e.start_date,e.end_date,s=>[t.tdDate(s.visit_date)])}},{label:"Active Clients with Adverse Outcomes",value:r.ActiveClientsWithAdverseOutcomes,other:{skipDateSelection:!1,columns:[[t.thTxt("ARV number"),t.thTxt("Filling Number"),t.thTxt("Outcome"),t.thTxt("Outcome Date"),t.thTxt("Last Dispensation Date"),t.thTxt("Action")]],setRows:async(a,e)=>{try{this.report=new l,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod(),(await this.report.getCleaningToolReport(r.ActiveClientsWithAdverseOutcomes)).forEach(i=>{this.rows.push([t.td(i.arv_number),t.td(i.filling_number),t.td(i.outcome),t.td(this.toDate(i.outcome_date)),t.td(this.toDate(i.dispensation_visit_date)),this.masterCardBtn(i.patient_id)])})}catch(s){if(!(s instanceof d))throw s}}}},{label:"DOB >= ART Start Date",value:r.StartDateBeforeDob,other:{skipDateSelection:!1,columns:this.getDefaultIndicatorColumns([t.thTxt("Earliest Start Date")]),setRows:(a,e)=>this.setDefaultIndicatorRows(r.StartDateBeforeDob,e.start_date,e.end_date,s=>[t.tdDate(s.art_start_date)])}},{label:"Clients on ART without HIV Program",value:r.ClientsOnArtWithoutHivProgram,other:{columns:[[t.thTxt("#"),t.thTxt("ART Number"),t.thTxt("Date of Birth (DOB)"),t.thTxt("ART Start Date"),t.thTxt("Last ART Dispensation"),t.thTxt("Action")]],setRows:async(a,e)=>{try{this.report=new l,this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod(),(await this.report.getCleaningToolReport(r.ClientsOnArtWithoutHivProgram)).forEach((i,o)=>{this.rows.push([t.td(o+1),t.td(i.arv_number),t.tdDate(i.birthdate),t.tdDate(i.art_start_date),t.tdDate(i.last_art_dispensation),t.tdBtn("Fix",()=>this.$router.push("/patient/programs/".concat(i.patient_id)))])})}catch(s){if(!(s instanceof d))throw s}}}}]}}});function y(a,e,s,i,o,n){const h=D("report-template"),_=D("ion-page");return I(),S(_,null,{default:C(()=>[A(h,{title:a.title,period:a.period,rows:a.rows,fields:a.fields,columns:a.columns,showFilters:!0,onReportConfiguration:a.onPeriod},null,8,["title","period","rows","fields","columns","onReportConfiguration"])]),_:1})}const q=x(k,[["render",y]]);export{q as default};
