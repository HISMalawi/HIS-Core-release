import{d as T,bQ as w,r as E,ad as o,bC as m,aj as x,ci as p,ae as l,bY as P,a as V,c as F,u as S}from"./index-CMZASHAR.js";import{H as C}from"./HisStandardForm-BCjM4-bc.js";import{u as q}from"./useEncounter-CsCeua2V.js";import{r as I}from"./commons-Bp7XBfaW.js";import{A as O}from"./adherence_service-COV1K1AL.js";import"./isEmpty-DjKeGqZh.js";import"./encounter_guidelines-CJXpBOk4.js";import"./GuidelineEngine-D6V1_Znr.js";import"./htn_service-B9DGYTze.js";const K=T({__name:"EmergencySupply",setup(L){const a=new w(-1,25),s=E([]),{patientDashboardUrl:f,goToPatientDashboard:g}=q((d,n)=>{a.patientID=n,a.providerID=d;const i=new O(a.patientID,a.providerID);function _(e){return"".concat(e).match(/qod/i)?"QOD":"".concat(e).match(/weekly/i)?"QW":e}function y(e){return i.calculateExpected(e.quantity,e.equivalent_daily_dose,e.order.start_date,_(e.frequency))}function v(){return{id:"date_of_emergency_refill",helpText:"Date of emergency refill",type:o.TT_FULL_DATE,init:async()=>(await i.loadPreviousDrugs(),!0),beforeNext:async e=>{var r,u,c;const t=(c=(u=(r=i.getLastDrugs())==null?void 0:r[0])==null?void 0:u.order)==null?void 0:c.start_date;return t&&m(e.value).isBefore(t)?x("Date entered is less than last known dispensation of ".concat(p(t))):!0},validation:e=>l.validateSeries([()=>l.required(e),()=>{if(m(e.value).isAfter(a.date))return["Date entered is after current date of ".concat(p(a.date))]}]),computedValue:e=>a.buildValueDate("Prescription refill date",e.value)}}function D(){return{id:"facility",type:o.TT_SELECT,helpText:"Facility where emergency refill was collected",validation:e=>l.required(e),options:(e,t="")=>P(t),computedValue:e=>a.buildValueText("Health facility name",e.label),config:{showKeyboard:!0,isFilterDataViaApi:!0}}}function b(){return{id:"drug",helpText:"Emmergency Supply Drugs",type:o.TT_DRUG_RETROSPECTIVE_INPUT,init:async()=>(await i.loadPreviousDrugs(),!0),options:e=>e.drug.length?e.drug:i.getLastDrugs().map(t=>({label:t.drug.name,value:t.drug.concept_id,other:{givenAmount:"",remainingAmount:"",drug:t}})),computedValue:(e,t)=>e.map(async r=>{const u=i.calculateAdherence(r.other.drug.quantity,r.other.remainingAmount,y(r.other.drug));return{...await i.buildValueCoded("Medications dispensed",r.value),child:[await i.buildPillCountObs(r.other.drug.order_id,r.other.remainingAmount),await i.buildAdherenceObs(r.other.drug.order_id,r.other.drug.drug_id,u,t.date_of_emergency_refill.value),await i.buildValueNumber("Amount of drug dispensed",r.other.givenAmount)]}}),validation:e=>{if(e.every(t=>t.other.givenAmount===""||t.other.remainingAmount===""))return["Please enter drug details for all drugs"]}}}function A(){return{id:"next_appointment",helpText:"Appointment date",type:o.TT_DATE_PICKER,computedValue:e=>a.buildValueDate("Appointment date",e),validation:e=>l.required(e)}}s.value=[v(),D(),b(),A()]});async function h(d,n){await a.createEncounter(),await a.saveObservationList(await I(n)),g()}return(d,n)=>(V(),F(C,{fields:s.value,onFinishAction:h,skipSummary:!0,cancelDestinationPath:S(f)},null,8,["fields","cancelDestinationPath"]))}});export{K as default};
