import{d as p,K as d,bg as u,dj as m,F as f,V as _,o as v,c as E,w as T,b,cu as n,I as h}from"./index-BRM9VIxF.js";import{H as D}from"./HisStandardForm-IKQjpnfg.js";import{u as I}from"./useEncounter-BCD_2aPy.js";import{g as s}from"./util-CyjuS_4X.js";import{r as C}from"./commons-6n-XULSz.js";import"./isEmpty-voE6vqu8.js";import"./encounter_guidelines-Codu4SxN.js";import"./GuidelineEngine-D6V1_Znr.js";const P=p({__name:"Examination",setup(g){const i=d([]),e=new u(-1,m.EXAMINATION),{goToNextTask:r,patientDashboardUrl:c}=I((t,a)=>{e.patientID=a,e.providerID=t,i.value=[{id:"diagnosisType",helpText:"Method of Diagnosis:",type:f.TT_SELECT,validation:o=>_.required(o),computedValue:o=>({concept_id:s("PROCEDURE_TYPE"),value_coded:s("".concat(o.value)),obs_datetime:e.date}),options:()=>[{value:"LAB_ORDER",label:"Lab Order"},{value:"CLINICAL",label:"Clinical"}]}]});async function l(t,a){await e.createEncounter(),await e.saveObservationList(await C(a)),r()}return(t,a)=>(v(),E(n(h),null,{default:T(()=>[b(D,{cancelDestinationPath:n(c),onFinishAction:l,fields:i.value,skipSummary:!0},null,8,["cancelDestinationPath","fields"])]),_:1}))}});export{P as default};
