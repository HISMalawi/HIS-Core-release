System.register(["./index-legacy-B-IGLekl.js","./encounter_guidelines-legacy-By_-ThMW.js","./GuidelineEngine-legacy-KsvQuFdF.js","./HisStandardForm-legacy-zrsmj5en.js"],(function(t,e){"use strict";var i,s,a,n,r,o,h,c,l,u,p,f,d,m,D,g,v;return{setters:[t=>{i=t.d,s=t.as,a=t.aN,n=t.bn,r=t.bk,o=t.az,h=t.bo,c=t.bl,l=t.bQ,u=t.cX,p=t.O,f=t.ah,d=t.ae},t=>{m=t.F,D=t.E},t=>{g=t.m},t=>{v=t.H}],execute:function(){t("_",i({components:{HisStandardForm:v},data:()=>({offlineID:null,patient:{},fields:[],patientID:"",providerID:-1,providers:[],encounterStartTime:null,facts:{npid:"",givenName:"",familyName:"",age:-1,gender:"",birthDate:"",birthEstimated:!1,sessionDate:"",apiDate:"",isEnrolledInProgam:!1,encounterName:"N/A",providers:[],isBdeMode:!1,outcome:"",outcomeStartDate:"",village:"",district:"",currentTA:""},formLabel:"",ready:!1}),created(){this.$route.params.patient_id&&(this.offlineID=this.$route.params.patient_id,this.patientID=parseInt(`${this.$route.params.patient_id}`),this.goOffline()?this.initOfflineData():s.get("ACTIVE_PATIENT",{patientID:this.patientID}).then((t=>{this.patient=t,a.isEmpty(this.patient)||n().cachePatient(this.patient),this.setEncounterFacts().then((()=>{this.checkEncounterGuidelines().then((()=>{this.ready=!0,this.setStartTime()})).catch((t=>console.log(t)))})).catch((()=>{this.goOffline()&&this.initOfflineData()}))})))},computed:{cancelDestination(){return this.patientDashboardUrl()}},methods:{setStartTime(){this.encounterStartTime=(new Date).getTime()},goOffline:()=>!r.value||o.value,isOnline:()=>r.value,isOfflineMode:()=>o.value,initOfflineData(){const t=n().findByID(this.offlineID),e=t?.personParams?.person;e&&(this.facts.birthDate=e.birthdate,this.facts.age=h(c.getSessionDate()).diff(this.facts.birthDate,"years"),this.facts.birthEstimated=t?.personParams?.person.birthdate_estimated||!1,this.facts.npid=t?.personParams?.npid,this.facts.givenName=e.given_name,this.facts.familyName=e.family_name,this.facts.district=e.current_district,this.facts.village=e.current_village,this.facts.currentTA=e.current_traditional_authority,this.facts.gender=e.gender,this.ready=!0,this.setStartTime())},async saveFormEncounterAndProceed(t={}){let e=!1,i=null;const s=((new Date).getTime()-this.encounterStartTime)/1e3/60;try{const a=await l.buildValueText("Device",u()),r=await l.buildValueNumber("Review Time",s);i=[...await this.resolveObs(t.computedData),a,r],n().saveObsOffline({observations:i,id:this.offlineID,uploadStatus:"Pending",encounterName:this.$route.name,encounterTypeID:t.encounterTypeID,meta:t.formData,labOrders:t.labOrders,created:e},e),n().synchronizeRecord(this.offlineID),t.skipNextTask||this.nextOfflineFlow()}catch(a){return console.error(`${a}`),p("Unable to resolve observations")}},runflowState(t,e=null){const i={};if(i[m.SET_PROVIDER]=t=>{const[e]=t.split(" "),i=a.find(this.providers,{username:e});return i&&(this.providerID=i.person_id),m.CONTINUE},i[m.CHANGE_SESSION_DATE]=()=>(this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`),m.EXIT),i[m.CHANGE_PATIENT_OUTCOME]=()=>(this.$router.push(`/patient/programs/${this.patientID}`),m.EXIT),i[m.GO_TO_PATIENT_DASHBOARD]=()=>(this.gotoPatientDashboard(),m.EXIT),t in i)return i[t](e)},async checkEncounterGuidelines(){const t=g(this.facts,D);for(const e in t){const i=t[e];if(i?.actions?.alert&&this.runflowState(await(i?.actions?.alert(this.facts)))===m.EXIT)return;if(i?.actions?.selection){const t=await(i?.actions?.selection(this.facts));this.runflowState(t.flowState,t.value)}}},async setEncounterFacts(){try{const t=await s.get("PATIENT_PROGRAM",{patientID:this.patientID});this.facts.isEnrolledInProgam=t.programID===c.getProgramID(),this.facts.outcome=t.outcome,this.facts.outcomeStartDate=t.startDate}catch(t){console.error(t),f(`${t}`)}if(this.facts.npid=this.patient.getNationalID(),this.facts.givenName=this.patient.getGivenName(),this.facts.familyName=this.patient.getFamilyName(),this.facts.currentTA=this.patient.getCurrentTA(),this.facts.district=this.patient.getCurrentDistrict(),this.facts.village=this.patient.getCurrentVillage(),this.facts.sessionDate=c.getSessionDate(),this.facts.apiDate=c.getCachedApiDate(),this.facts.isBdeMode=c.isBDE(),this.facts.birthDate=this.patient.getBirthdate(),this.facts.age=this.patient.getAge(),this.facts.encounterName=this.$route.name?this.$route.name.toString().toUpperCase():"N/A",c.isBDE()){this.providers=await s.get("PROVIDERS");const t=a.find(this.providers,(t=>t.user_id==c.getUserID()));this.providers=this.providers.sort(((t,e)=>{const i=t.username.toUpperCase(),s=e.username.toUpperCase();return i<s?-1:i>s?1:0}));const e=t?[t,...this.providers]:this.providers;this.facts.providers=a.uniq(e.map((t=>{let e=`${t.username}`;if(!a.isEmpty(t?.person?.names)){const[i]=t.person?.names||[];e+=` (${i.given_name} ${i.family_name})`}return e})))}},toOption:(t,e={})=>({label:t,value:t,other:e}),mapStrToOptions:t=>t.map((t=>"string"==typeof t||"number"==typeof t?{label:t,value:t}:t)),patientDashboardUrl(){return`/patient/dashboard/${this.$route.params.patient_id}`},gotoPatientDashboard(){return this.$router.push({path:this.patientDashboardUrl()})},nextOfflineFlow(){const t=n().nextPatientWorkflowActivity(this.patientID);return t&&t.patientUrl?this.$router.push(`${t.patientUrl}/${this.patientID}`):this.$router.push(`/patient/dashboard/${this.patientID}`)},async nextTask(){try{const t=this.offlineID||this.patientID;await d(t,this.$router,this.$route)}catch(t){console.error("Workflow error "+t),this.gotoPatientDashboard()}},getOptions(t,e){return t.map((t=>{const i=a.find(e,{label:t});return{label:t,value:i?i.value:"",other:{values:this.yesNoOptions()}}}))},yesNoOptions:()=>[{label:"Yes",value:"Yes"},{label:"No",value:"No"}],toYesNoOption(t,e={}){return{label:t,value:"",other:{...e,values:this.yesNoOptions()}}},mapOptions:t=>t.map((t=>({label:t,value:t}))),toConditionalOptions(t){const e=[];for(const i of t)("boolean"!=typeof i[1]||i[1])&&e.push(this.toOption(i[0]));return e},yesNoUnknownOptions:()=>[{label:"Yes",value:"Yes"},{label:"No",value:"No"},{label:"Unknown",value:"Unknown"}],resolveObs(t,e=""){const i=Object.values(t).filter((t=>t&&(t.tag===e||""===e))).reduce(((t,e)=>{const i=e.obs?e.obs:e;return Array.isArray(i)?t=t.concat(i):"function"==typeof i?t.push(i()):t.push(i),t}),[]);return Promise.all(i)},inArray(t,e){try{return t.filter((t=>e(t))).length>0}catch(i){return!1}},validateSeries(t){try{for(const e in t){const i=t[e]();if(i)return i}}catch(e){return[e]}}}}))}}}));
