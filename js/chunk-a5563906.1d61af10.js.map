{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/views/EncounterMixin.vue","webpack:///./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/apps/ANC/Views/Encounters/LabResults.vue"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","isEnrolledInProgam","formLabel","ready","watch","handler","route","params","patient_id","toUpperCase","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","nextTask","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","formFields","_","ANC_GLOBAL_PROP","recencyEssayActivated","GlobalPropertyService","isProp","RECENCY_ESSAY_ACTIVATED","IonPage","mixins","EncounterMixinVue","arvNumber","hivStatus","artStatus","arvStartDate","riskOfPreclampsia","service","this","AncLabResultService","loadSubsequentVisit","loadArtStatus","ANC_PROP","getFields","createEncounter","saveObservationList","printLabResults","id","helpText","FieldType","TT_SUMMARY","isHivPositive","getHivStatus","getArtStatus","getArvStartDate","getArvNumber","TT_MULTIPLE_YES_NO","isPregnancyTestDone","f","lab_results","isPrengnacyTestDone","concept","validation","Validation","computedValue","buildValueCoded","TT_SELECT","generateDateFields","minDate","maxDate","getDate","estimation","allowUnknown","prev_hiv_test_result","computeValue","date","buildValueDate","TT_TEXT","buildValueText","on_art","recency_essay","TT_MULTIPLE_SELECT","onValueUpdate","listData","l","isChecked","async","hivPos","urine","isAtRiskOfPreEclampsia","ok","alertConfirmation","header","cancelBtnLabel","confirmBtnLabel","config","footerBtns","onClickComponentEvents","refreshOptions","o","onClick","exitsForm","available_test_results","hiv_status","on_art_1","TT_NUMBER","rangeOf","buildValueNumber","buildOptionsOnce","available_urine_tests"],"mappings":"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","file":"js/chunk-a5563906.1d61af10.js","sourcesContent":["import { GlobalPropertyService } from \"@/services/global_property_service\"\n\nexport enum ANC_GLOBAL_PROP {\n    RECENCY_ESSAY_ACTIVATED = 'recency_essay_activated'\n}\n\nfunction recencyEssayActivated() {\n    return GlobalPropertyService.isProp(`${ANC_GLOBAL_PROP.RECENCY_ESSAY_ACTIVATED}=Yes`)\n}\n\nexport default {\n    recencyEssayActivated\n}","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncLabResultService } from \"@/apps/ANC/Services/anc_lab_result_service\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { ObsValue } from '@/services/observation_service'\nimport { generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper'\nimport HisDate from \"@/utils/Date\"\nimport ANC_PROP from \"@/apps/ANC/anc_global_props\"\nimport { alertConfirmation } from '@/utils/Alerts'\nimport { find } from 'lodash'\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    arvNumber: '' as string,\n    hivStatus: '' as string,\n    artStatus: '' as string,\n    arvStartDate: '' as string,\n    recencyEssayActivated: false as boolean,\n    riskOfPreclampsia: null as boolean | null,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n            this.service = new AncLabResultService(this.patientID, this.providerID)\n            await this.service.loadSubsequentVisit()\n            await this.service.loadArtStatus()\n            this.recencyEssayActivated = await ANC_PROP.recencyEssayActivated()\n            this.formFields = this.getFields()\n        } \n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData)\n      await this.service.createEncounter()\n      await this.service.saveObservationList(obs as ObsValue[])\n      await this.service.printLabResults()\n      this.nextTask()\n    },\n    getFields(): Field[] {\n        return [\n            {\n                id: 'art_summary',\n                helpText: 'ART Summary',\n                type: FieldType.TT_SUMMARY,\n                condition: () => this.service.isHivPositive(),\n                options: () => {\n                    return [\n                        {\n                            label: 'HIV Status', \n                            value: `\n                                <b style=\"color:${this.service.isHivPositive() ? 'red': 'green'}\">\n                                    ${this.service.getHivStatus()}\n                                </b>\n                            `\n                        },\n                        {\n                            label: 'On Art', value: this.service.getArtStatus() || 'N/A'\n                        },\n                        {\n                            label: 'Art Start date', value: HisDate.toStandardHisDisplayFormat(this.service.getArvStartDate()) || 'N/A'\n                        },\n                        {\n                            label: 'ARV Number', value: this.service.getArvNumber() || 'N/A'\n                        }\n                    ]\n                }\n            },\n            {\n                id: 'lab_results',\n                helpText: 'Lab Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: () => !this.service.isPregnancyTestDone && !this.hivStatus,\n                options: (f: any) => {\n                    if (f.lab_results) {\n                        return f.lab_results\n                    }\n                    const options: Option[] = []\n                    if (!this.service.isPrengnacyTestDone) {\n                        options.push(this.toYesNoOption('Pregnancy test done', { concept: 'B-HCG'}))\n                    }\n                    if (!this.service.hivStatus) {\n                        options.push(this.toYesNoOption('Previous HIV test done', { concept: 'Previous HIV test done'}))\n                    }\n                    return options\n                },\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option[]) => v.map(d => this.service.buildValueCoded(d.other.concept, d.value))\n            },\n            {\n                id: 'prev_hiv_test_result',\n                helpText: 'Previous HIV test results',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => this.inArray(\n                    f.lab_results, (v: Option) => v.label === 'Previous HIV test done' && v.value === 'Yes'), \n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive',\n                        'Inconclusive',\n                        'Unknown'\n                    ])\n                },\n                computedValue: (v: Option) => this.service.buildValueCoded('Previous HIV Test Results', v.value)\n            },\n            ...generateDateFields({\n                id: 'prev_hiv_test_date',\n                helpText: 'Previous HIV test',\n                required: true,\n                minDate: () => this.patient.getBirthdate(),\n                maxDate: () => this.service.getDate(),\n                estimation: {\n                    allowUnknown: false\n                },\n                condition: (f: any) => f.prev_hiv_test_result?.value ? true : false,\n                computeValue: (date: string) => this.service.buildValueDate('Previous HIV Test Date', date)\n            }),\n            {\n                id: 'on_art',\n                helpText: 'Patient on ART',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('On Art', v.value),\n                condition: (f: any) => f.prev_hiv_test_result.value === 'Positive',\n                options: () => this.yesNoOptions()\n            },\n            {\n                id: 'arv_number',\n                helpText: 'ARV Number',\n                type: FieldType.TT_TEXT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueText('Art number', v.value),\n                condition: (f: any) => f.on_art.value === 'Yes'\n            },\n            {\n                id: 'recency_essay',\n                helpText: 'Rapid Recency Essay - Asante Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: (f: any) => f.prev_hiv_test_result.value === 'Positive' && this.recencyEssayActivated,\n                computedValue: (v: Option[]) => v ? v.map(d => this.service.buildValueCoded(d.label, d.value)) : null,\n                options: (f: any) => {\n                    if (f.recency_essay) return f.recency_essay\n                    return [\n                        this.toYesNoOption('Line 1. Control Line Present'),\n                        this.toYesNoOption('Line 2. Positive Verification Line Present'),\n                        this.toYesNoOption('Line 3. Long-Term Line Present')\n                    ]\n                }\n            },\n            {\n                id: 'available_test_results',\n                helpText: 'Available Lab Tests',\n                type: FieldType.TT_MULTIPLE_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option[]) => {\n                    if (find(v, { label: 'None'})) {\n                        return this.service.buildValueCoded('Lab test done', 'No')\n                    }\n                    return null\n                },\n                onValueUpdate(listData: Option[], value: Option) {\n                    return listData.map(l => {\n                        if (value.value === 'None' && l.value !='None') {\n                            l.isChecked = false\n                        }\n                        if (value.value != 'None' && value.isChecked && l.value === 'None') {\n                            l.isChecked = false\n                        }\n                        return l\n                    })\n                },\n                options: async (f: any) => {\n                    const options: Option[] = []\n                    const hivPos = !this.service.isHivPositive() ? f.prev_hiv_test_result?.value === 'Positive' : true\n                    if (!hivPos) {\n                        options.push(this.toOption('HIV'))\n                    }\n                    options.push(this.toOption('HB'))\n                    options.push(this.toOption('Syphilis'))\n                    options.push(this.toOption('Malaria'))\n                    options.push(this.toOption('Blood Group'))\n                    const urine: Option = {\n                        label: 'Urine',\n                        value: 'Urine',\n                        isChecked: false\n                    }\n                    if (this.riskOfPreclampsia === null) {\n                        this.riskOfPreclampsia = await this.service.isAtRiskOfPreEclampsia()\n                        if (this.riskOfPreclampsia) {\n                            const ok: boolean = await alertConfirmation(\n                                'Select urine test to conduct urine protein test', {\n                                header: 'Client is at risk of pre-eclampsia.',\n                                cancelBtnLabel: 'Remind later',\n                                confirmBtnLabel: 'Select Urine Test'\n                            })\n                            urine.isChecked = ok\n                        }\n                    }\n                    return [...options, urine, this.toOption('None')]\n                },\n                config: {\n                    footerBtns: [\n                        {\n                            name: \"None\",\n                            slot: \"end\",\n                            onClickComponentEvents: {\n                                refreshOptions: (_: any, listData: Option[]) => {\n                                    return listData.map(o => {\n                                        o.isChecked = o.label === 'None'\n                                        return o\n                                    })\n                                }\n                            },\n                            onClick: () => 'None'\n                        }\n                    ]\n                },\n                exitsForm: (f: any) => find(f.available_test_results, {label: 'None'}),\n            },\n            {\n                id: 'hiv_status',\n                helpText: 'HIV Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('HIV'),\n                computedValue: (v: Option) => this.service.buildValueCoded('HIV status', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive',\n                        'Inconclusive'\n                    ])\n                }\n            },\n            {\n                id: 'on_art_1',\n                helpText: 'Patient on ART',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.hiv_status.value === 'Positive',\n                computedValue: (v: Option) => this.service.buildValueCoded('On Art', v.value),\n                options: () => this.yesNoOptions()\n            },\n            {\n                id: 'arv_number_1',\n                helpText: 'ARV Number',\n                type: FieldType.TT_TEXT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueText('Art number', v.value),\n                condition: (f: any) => f.on_art_1.value === 'Yes'\n            },\n            {\n                id: 'recency_essay_1',\n                helpText: 'Rapid Recency Essay - Asante Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: (f: any) => f.hiv_status.value === 'Positive' && this.recencyEssayActivated,\n                computedValue: (v: Option[]) => v ? v.map(d => this.service.buildValueCoded(d.label, d.value)) : null,                \n                options: () => {\n                    return [\n                        this.toYesNoOption('Line 1. Control Line Present'),\n                        this.toYesNoOption('Line 2. Positive Verification Line Present'),\n                        this.toYesNoOption('Line 3. Long-term Line Present')\n                    ]\n                }\n            },\n            {\n                id: 'hb_result',\n                helpText: 'HB Test Result (g/dl)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 2, 16)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('HB Test Result', v.value),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('HB'),\n            },\n            {\n                id: 'syphilis',\n                helpText: 'Syphilis Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('Syphilis Test Result', v.value),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Syphilis'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive'\n                    ])\n                }\n            },\n            {\n                id: 'malaria',\n                helpText: 'Malaria Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Malaria'),\n                computedValue: (v: Option) => this.service.buildValueCoded('Malaria Test Result', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive'\n                    ])\n                }\n            },\n            {\n                id: 'blood_group',\n                helpText: 'Blood Group Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Blood Group'),\n                computedValue: (v: Option) => this.service.buildValueText('Blood group', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"A+\",\n                        \"A-\",\n                        \"B+\",\n                        \"B-\",\n                        \"AB+\",\n                        \"AB-\",\n                        \"O+\",\n                        \"O-\"\n                    ])\n                }\n            },\n            {\n                id: 'available_urine_tests',\n                helpText: 'Available Urine Tests Results',\n                type: FieldType.TT_MULTIPLE_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Urine'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Protein\",\n                        \"Glucose\",\n                        \"WBC\",\n                        \"RBC\",\n                        \"Nitrate\"\n                    ])\n                },\n                config: {\n                    buildOptionsOnce: true\n                }\n            },\n            {\n                id: 'protein',\n                helpText: 'Urine Protein Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Protein'),\n                computedValue: (v: Option) => this.service.buildValueText('Urine protein', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Negative\",\n                        \"(+)\",\n                        \"+\",\n                        \"++\",\n                        \"+++\",\n                        \"++++\",\n                    ])\n                }\n            },\n            {\n                id: 'glucose',\n                helpText: 'Glucose Test Result (mg/dl)',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Glucose'),\n                computedValue: (v: Option) => this.service.buildValueText('Blood glucose', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Normal\",\n                        \"+\",\n                        \"++\",\n                        \"+++\"\n                    ])\n                }\n            },\n            {\n                id: 'wbc',\n                helpText: 'White Blood Cells Test Result (cmm)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 1000000)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('White blood cells', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('WBC'),\n            },\n            {\n                id: 'rbc',\n                helpText: 'Red Blood Cells Test Result (cmm)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 1000000)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('Red blood cells', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('RBC'),\n            },\n            {\n                id: 'nitrate',\n                helpText: 'Nitrate Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('Urine Nitrate Test', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Nitrate'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Negative\",\n                        \"Trace\",\n                        \"Positive\"\n                    ])\n                }\n            }\n        ]\n    }\n  }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./LabResults.vue?vue&type=template&id=43205c6e&ts=true\"\nimport script from \"./LabResults.vue?vue&type=script&lang=ts\"\nexport * from \"./LabResults.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}