{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/Pmtct.vue?f1f4","webpack:///./src/apps/ANC/Services/anc_art_followup_service.ts","webpack:///./src/apps/ANC/Views/Encounters/Pmtct.vue","webpack:///./src/apps/ANC/Views/Encounters/Pmtct.vue?d965","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","formFields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","AncArtFollowupService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","getFields","immediate","methods","c","createEncounter","saveObservationList","resolveObs","nextTask","id","helpText","type","FieldType","TT_YES_NO","computedValue","v","buildValueCoded","match","validation","Validation","required","options","label","values","value","TT_SELECT","condition","f","pmct","buildValueText","mapStrToOptions","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","getPlatformName","durationObs","buildValueNumber","computedData","saveObsOffline","observations","uploadStatus","encounterTypeID","meta","formData","labOrders","synchronizeRecord","skipNextTask","nextOfflineFlow","error","toastWarning","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","toastDanger","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","toOption","other","items","i","path","task","nextPatientWorkflowActivity","patientUrl","yesNoOptions","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-8f3cd08c.49a99827.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class AncArtFollowupService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 10, providerID)\n    }\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { AncArtFollowupService } from \"@/apps/ANC/Services/anc_art_followup_service\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any,\n    formFields: [] as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new AncArtFollowupService(this.patientID, this.providerID)\n          this.formFields = this.getFields()\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, c: any) {\n      await this.service.createEncounter()\n      await this.service.saveObservationList((await this.resolveObs(c)))\n      this.nextTask()\n    },\n    getFields() {\n      return [\n        {\n          id: 'pmct',\n          helpText: 'PMTCT',\n          type: FieldType.TT_YES_NO,\n          computedValue: (v: string) => this.service.buildValueCoded(\n            'PMTCT', v.match(/true/i) ? 'Yes' : 'No'\n          ),\n          validation: (v: Option) => Validation.required(v),\n          options: () => [\n            {\n              label: 'Proceed to PMTCT',\n              values: [\n                {\n                  label: \"yes\",\n                  value: \"true\"\n                },\n                {\n                  label: \"no\",\n                  value: \"false\"\n                }\n              ]\n            }\n          ] as any\n        },\n        {\n          id: 'reason_for_not_starting_art',\n          helpText: 'Reason for not starting ART',\n          type: FieldType.TT_SELECT,\n          condition: (f: any) => f.pmct === 'false',\n          validation: (v: Option) => Validation.required(v),\n          computedValue: (v: Option) => this.service.buildValueText(\n            'Reason for exiting care',  v.value\n          ),\n          options: () => this.mapStrToOptions([\n            'Already on ART at another facility',\n            'To be done in another room',\n            'Not willing'\n          ])\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Pmtct.vue?vue&type=template&id=94505c30&ts=true\"\nimport script from \"./Pmtct.vue?vue&type=script&lang=ts\"\nexport * from \"./Pmtct.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n                Offline().saveObsOffline({\n                    observations: obs,\n                    id: this.offlineID,\n                    uploadStatus: status,\n                    encounterName: this.$route.name,\n                    encounterTypeID: params.encounterTypeID,\n                    meta: params.formData,\n                    labOrders: params.labOrders,\n                    created\n                }, created)\n                Offline().synchronizeRecord(this.offlineID)\n                if (!params.skipNextTask) this.nextOfflineFlow()\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            // if (!this.isOfflineMode()) {\n            //     try {\n            //         const enc = new AppEncounterService(\n            //             this.patientID,\n            //             params.encounterTypeID, \n            //             this.providerID\n            //         )\n            //         if ((await enc.createEncounter())) {\n            //             if ((await enc.saveObservationList(obs as ObsValue[]))) {\n            //                 status = 'Success'\n            //             }\n            //         }\n            //         if (typeof params.callback === 'function') {\n            //             await params.callback(enc)\n            //         }\n            //         created = true\n            //     } catch (e) {\n            //         created = false\n            //         if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n            //             status = 'NetworkError'\n            //         } else {\n            //             status = 'Exception'\n            //             console.error(`Exception while saving an encounter: ${e}`)\n            //         }\n            //     }\n            //     if (status === 'Exception') {\n            //         return toastDanger(\"An error has occured!\")\n            //     }\n            // }\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextOfflineFlow() {\n            const task = Offline().nextPatientWorkflowActivity(this.patientID)\n            if (!task || !task.patientUrl) return this.$router.push(`/patient/dashboard/${this.patientID}`)\n            return this.$router.push(`${task.patientUrl}/${this.patientID}`) \n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}