{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/SurgicalHistory.vue?88a6","webpack:///./src/apps/ANC/Services/anc_surgical_history_service.ts","webpack:///./src/apps/ANC/Views/Encounters/SurgicalHistory.vue","webpack:///./src/apps/ANC/Views/Encounters/SurgicalHistory.vue?db8b","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","formFields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","AncSurgicalHistoryService","patientID","providerID","ConceptService","getConceptsByCategory","sort","a","b","name","AppEncounterService","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","getFields","immediate","methods","computedData","resolveObs","obs","anc","createEncounter","saveObservationList","nextTask","surgeryOptions","onMap","surgicalHistoryOptions","map","h","label","value","isChecked","id","helpText","type","FieldType","TT_MULTIPLE_SELECT","validation","v","Validation","required","onValueUpdate","list","option","i","noneIndex","findIndex","computedValue","find","buildValueText","buildValueCoded","options","config","footerBtns","onClickComponentEvents","refreshOptions","onClick","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","patient","facts","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","split","username","provider","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","usernameA","usernameB","p","isEmpty","person","names","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","path","yesNoOptions","toYesNoOption","values","mapOptions","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","formData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-159e38ab.69b160ab.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { ConceptService } from \"@/services/concept_service\";\n\nexport class AncSurgicalHistoryService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 83, providerID)\n    }\n\n    static surgicalHistoryOptions() {\n        return ConceptService.getConceptsByCategory('anc_surgical_history')\n            .sort((a, b) => a.name > b.name ? 1 : -1)\n    }\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncSurgicalHistoryService} from \"@/apps/ANC/Services/anc_surgical_history_service\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { find, findIndex } from 'lodash'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) this.formFields = this.getFields()\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData)\n      const anc = new AncSurgicalHistoryService(this.patientID, this.providerID)\n      await anc.createEncounter()\n      await anc.saveObservationList(obs as ObsValue[])\n      this.nextTask()\n    },\n    surgeryOptions(onMap: (v: Option) => Option) {\n      return [\n        ...AncSurgicalHistoryService.surgicalHistoryOptions(), \n        { name: 'None'}\n      ].map(h =>(onMap({\n          label: h.name,\n          value: 'Yes',\n          isChecked: false\n      })))\n    },\n    getFields() {\n      return [\n        {\n          id: 'history',\n          helpText: 'Previous Surgical Procedure(s) Done',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          validation: (v: Option[]) => Validation.required(v),\n          onValueUpdate: (list: Option[], option: Option) => {\n            if (option.label === 'None' && option.isChecked) {\n                return list.map(i => {\n                    if (i.label != \"None\") i.isChecked = false;\n                    return i\n                })\n            } else if (option.label != 'None' && option.isChecked){\n                const noneIndex = findIndex(list, { label: \"None\" });\n                list[noneIndex].isChecked = false; \n            }\n            return list\n          },\n          computedValue: (v: Option[]) => {\n            if (find(v, { label: 'None' })) {\n              return AncSurgicalHistoryService.buildValueText('Procedure done', 'None')\n            }\n            return v.map(i => AncSurgicalHistoryService.buildValueCoded(i.label, `${i.value}`))\n          },\n          options: () => this.surgeryOptions(i => i),\n          config: {\n            footerBtns: [\n              {\n                \"name\": \"None\",\n                \"slot\": \"end\",\n                onClickComponentEvents: {\n                  refreshOptions: () => this.surgeryOptions(i => {\n                    i.isChecked = i.label === 'None'\n                    return i\n                  })\n                },\n                onClick: () => \"None\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./SurgicalHistory.vue?vue&type=template&id=487f2895&ts=true\"\nimport script from \"./SurgicalHistory.vue?vue&type=script&lang=ts\"\nexport * from \"./SurgicalHistory.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}