{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/guidelines/staging_guidelines.ts","webpack:///./src/apps/ART/services/staging_service.ts","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue?d80f","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","isEnrolledInProgam","formLabel","ready","watch","handler","route","params","patient_id","this","toUpperCase","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","nextTask","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","ADULT_WHO_STAGE_CRITERIA","concept","stage","reasonForArt","reason","CHILD_WHO_STAGE_CRITERIA","CONTRADICTING_STAGE_DEFINITIONS_ALERTS","alertConfirmation","bmi","confirmBtnLabel","cancelBtnLabel","selectedCondition","keepAsymptomatic","selectedConditions","stageThreeConditions","stageFourConditions","stageTwoConditions","RECOMMENDED_CHILD_STAGING_CONDITIONS","isChecked","show","weightPercentile","disabled","RECOMMENDED_ADULT_STAGING_CONDITIONS","CHILD_ART_ELIGIBILITY","ageInMonths","age","pshdConditions","ConceptService","getConceptsByCategory","pshdCondition","testType","cd4","cd4Modifier","modifier","date","ADULT_ART_ELIGIBILITY","severeSymp","found","total","symp","gender","breastFeeding","answer","pregnant","StagingCategory","StagingService","AppEncounterService","constructor","super","confirmatoryTest","isAdult","isPedaid","setAge","getFacilities","LocationService","getConfirmatoryTestType","cd4CountIsValid","match","getAlertGuidelines","getWhoStageGuidelines","getProgramEligibilityGuidelines","getRecommendedConditionGuidelines","getStagingConditions","category","getStagingCategoryByNum","buildWhoStageObs","buildValueCoded","buildWhoCriteriaObs","buildReasonForArtObs","stageNumber","ADULT_STAGE_1","PEDAID_STAGE_1","ADULT_STAGE_2","PEDAID_STAGE_2","ADULT_STAGE_3","PEDAID_STAGE_3","ADULT_STAGE_4","PEDAID_STAGE_4","test","getFirstValueCoded","mixins","EncounterMixinVue","staging","showStagingWeightChart","canShowStagingFields","bmiObj","stagingFacts","isChildBearing","stageOneConditions","whoStage","getID","getAge","loadHivConfirmatoryTestType","getBMI","isMale","getAgeInMonths","calculateWeightPercentile","computedValues","encounter","createEncounter","stagingObservations","derivedObservations","saveObservationList","ok","updateStagingFacts","curIndex","buildStagingOptions","previouslySelected","conceptFinding","concept_id","setWhoStage","setReasonForArt","notAsymptomatic","f","stageOneC","stage_1_conditions","asymptomatics","hasTransferLater","has_transfer_letter","hasStaging","getStagingSummaryField","helpText","id","FieldType","TT_ART_STAGING_SUMMARY","onload","config","hiddenFooterBtns","isANCclient","getSuspendedProgram","getStagingFields","TT_MULTIPLE_YES_NO","validation","Validation","anyEmpty","summaryMapValue","computedValue","factID","pregnancy_status","TT_WEIGHT_CHART","getWeightHistory","x","y","TT_MULTIPLE_SELECT","onValue","onStagingCondition","unload","onConditionFalse","val","TT_SELECT","TT_TEXT","charAt","count","substring","buildValueNumber","s","isCd4","customKeyboard","CD4_COUNT_PAD_LO","cd4_available","generateDateFields","minDate","maxDate","getDate","estimation","allowUnknown","computeValue","isEstimate","buildValueDate","defaultValue","getLocationName","buildValueText","_","showKeyboard","isFilterDataViaApi","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-089a5b7a.14c0f64b.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { ConceptService } from \"@/services/concept_service\"\nimport { alertConfirmation } from \"@/utils/Alerts\"\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\n\nexport const ADULT_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Adults with stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV ADULT'\n        }\n    },\n    'Adults with stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Adults with stage 2 conditions': {\n        concept: 'WHO STAGE II ADULT',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2,\n        }\n    },\n    'Adults with stage 1 conditions': {\n        concept: 'WHO STAGE I ADULT',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CHILD_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Children with stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV PEDS'\n        }\n    },\n    'For children with stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Children with stage 2 conditions': {\n        concept: 'WHO STAGE II PEDS',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2\n        }\n    },\n    'Children with stage 1 conditions': {\n        concept: 'WHO STAGE I PEDS',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CONTRADICTING_STAGE_DEFINITIONS_ALERTS: Record<string, GuideLineInterface> = {\n    \"Warn if Severe weight loss is selected when actual patient BMI is acceptable\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => await alertConfirmation(`Patient's BMI of ${facts.bmi} greater than 18.5, do you wish to proceed?`, {\n                confirmBtnLabel: 'Yes, keep severe weightloss',\n                cancelBtnLabel: 'No, cancel'\n            }),\n        },\n        conditions: {\n            selectedCondition (condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi:(bmi: number) => bmi > 18.5\n        }\n    },\n    \"Warn for contradicting stage defining conditions\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => {\n                const keepAsymptomatic = await alertConfirmation('CONTRADICTING STAGE DEFINING CONDITIONS', {\n                    confirmBtnLabel: \"Keep Asymptomatic\",\n                    cancelBtnLabel: 'Keep other(s)'\n                })\n                if(keepAsymptomatic) {\n                    facts.stage = 1\n                    facts.selectedConditions = []\n                    facts.stageThreeConditions = []\n                    facts.stageFourConditions = []\n                    facts.stageTwoConditions = []\n                    return true\n                }\n                return false\n            },\n        },\n        conditions: {\n            selectedCondition(condition: string){\n                return condition === 'Asymptomatic HIV infection'\n            },\n            stage: (stage: number) => stage >= 2\n        }\n    },\n}\n\nexport const RECOMMENDED_CHILD_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'For children whose current weight percentile is less than 70' : {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has a low weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile < 70\n            }\n        }\n    },\n    'Enable Moderate unexplained malnutrition for children whose weight for height is 70-79%': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile >= 70 && weightPercentile <= 79\n            }\n        }\n    },\n    'Disable moderate weight loss when Severe unexplained weight loss is chosen': {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss/manutrition was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)')\n            }\n        }\n    }\n}\n\nexport const RECOMMENDED_ADULT_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'Adults with a BMI less than 16': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Adult has a low BMI of ${facts.bmi}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi: (bmi: number) => bmi < 16\n        }\n    },\n    'Adults whose BMI is between 16 and 18': {\n        priority: 3,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'warning',\n            show: 'onChecked',\n            info: (facts: any) => `BMI of ${facts.bmi} is between 16 and 18`,\n        },\n        conditions: {\n            selectedCondition: (condition: string) => condition === 'Moderate weight loss less than or equal to 10 percent, unexplained',\n            bmi: (bmi: number) => bmi >= 16.0 && bmi <= 18.5\n        }\n    },\n    \"Disable Moderate weight loss if severe weightloss is selected\": {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate weight loss less than or equal to 10 percent, unexplained'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained')\n            }\n        }\n    }\n}\n\nexport const CHILD_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 2,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'Children under twelve months who tested positive on Rapid test and have presumed severe HIV': {\n        concept: 'PRESUMED SEVERE HIV',\n        priority: 3,\n        conditions: {\n            ageInMonths(age: number){\n                return age < 12 \n            },\n            selectedConditions: (conditions: Array<string>) => {\n                const pshdConditions = ConceptService.getConceptsByCategory('pshd_condition')\n                for (const pshdCondition in pshdConditions) {\n                    if (conditions.includes(pshdCondition)) return true\n                }\n                return false\n            },\n            testType(testType: string){\n                return testType === 'HIV rapid test'\n            },\n        }\n    },\n    \"Children under twelve who tested positive via HIV DNA Polymerase Chain Reaction test\": {\n        concept: 'HIV DNA polymerase chain reaction',\n        priority: 4,\n        conditions: {\n            ageInMonths: (age: number) => age < 12,\n            testType: (testType: string) => testType === \"HIV DNA polymerase chain reaction\",\n        }\n    },\n    \"Children who are less than 24 months\": {\n        concept: 'HIV infected',\n        priority: 5,\n        conditions: {\n            ageInMonths: (age: number) => age < 24\n        }\n    },\n    \"Children between 24 and 56 months who have stage 2 or 1 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 750',\n        priority: 6,\n        conditions: {\n            ageInMonths(age: number) {\n                return age >= 24 && age <= 56\n            },\n            cd4(cd4: number) {\n                return cd4 <= 750\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children with CD4 count less than 500 and have stage 1 and stage 2 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 7,\n        conditions: {\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string){\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children over the date 2014-04-01 who are more than five years old and have cd4 count less than 500\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 9,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            age(age: number) {\n                return age > 5\n            },\n            cd4(cd4: number) {\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    \"Children over date 2014-04-01 and less than Five years old\": {\n        concept: 'HIV infected',\n        priority: 10,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            age(age: number) {\n                return age <= 5\n            }\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 11,\n        conditions: {\n            stage: (stage: number) => stage <= 2\n        }\n    }\n}\n\nexport const ADULT_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has HIV wasting syndrome identified in stage 3': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            selectedConditions: (conditions: Array<string>) => {\n                const severeSymp = ConceptService.getConceptsByCategory('severe_hiv_wasting_syndrome')\n                const found = severeSymp.reduce((total, symp) => conditions.includes(symp.name) ? total + 1 : 0, 0)\n                return found >= 2\n            }\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'CD4 less than 350 for adults before 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 4,\n        conditions: {\n            date(date: string) {\n                return date < '2014-04-01'\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 250 for adults after 2014': {\n        concept: 'cd4 less than or equal to 250',\n        priority: 4,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            cd4(cd4: number) {\n                return cd4 <= 250\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 350 for adults after 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 5,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 500 for adults after 2014': {\n        concept: 'cd4 less than or equal to 500',\n        priority: 6,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 8,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 7,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 9,\n        conditions: {\n            stage: (stage: number) => stage <= 2,\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { LocationService } from \"@/services/location_service\"\nimport {\n    RECOMMENDED_ADULT_STAGING_CONDITIONS,\n    CHILD_ART_ELIGIBILITY,\n    ADULT_ART_ELIGIBILITY,\n    ADULT_WHO_STAGE_CRITERIA,\n    CHILD_WHO_STAGE_CRITERIA,\n    CONTRADICTING_STAGE_DEFINITIONS_ALERTS,\n    RECOMMENDED_CHILD_STAGING_CONDITIONS\n} from \"@/apps/ART/guidelines/staging_guidelines\"\n\n/**\n * Enable for filtering staging categories in ConceptName Dictionary\n */\nenum StagingCategory {\n    ADULT_STAGE_4 = 'stage_4_conditions_adults',\n    ADULT_STAGE_3 = 'stage_3_conditions_adults',\n    ADULT_STAGE_2 = 'stage_2_conditions_adults',\n    ADULT_STAGE_1 = 'stage_1_conditions_adults',\n    PEDAID_STAGE_4 = 'stage_4_conditions_pedaids',\n    PEDAID_STAGE_3 = 'stage_3_conditions_pedaids',\n    PEDAID_STAGE_2 = 'stage_2_conditions_pedaids',\n    PEDAID_STAGE_1 = 'stage_1_conditions_pedaids'\n}\n\nexport class StagingService extends AppEncounterService {\n    age: number\n    confirmatoryTest: string | null;\n    constructor(patientID: number, age: number, providerID: number) {\n        super(patientID, 52, providerID) //TODO: Use encounter type reference name\n        this.age = age\n        this.confirmatoryTest = null\n    }\n\n    isAdult() { return this.age >= 15 }\n\n    isPedaid() { return this.age <= 14 }\n\n    setAge(age: number) {\n        this.age = age\n    }\n\n    getFacilities (filter='') { return LocationService.getFacilities({name: filter}) }\n    \n    getConfirmatoryTestType() { return this.confirmatoryTest }\n\n    cd4CountIsValid(value: string) {\n        try {\n            return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n        }catch(e) {\n            return false\n        }\n    }\n\n    getAlertGuidelines() {\n        return CONTRADICTING_STAGE_DEFINITIONS_ALERTS\n    }\n\n    getWhoStageGuidelines() {\n        return this.isAdult() ? ADULT_WHO_STAGE_CRITERIA : CHILD_WHO_STAGE_CRITERIA\n    }\n\n    getProgramEligibilityGuidelines() {\n        return this.isAdult() ? ADULT_ART_ELIGIBILITY: CHILD_ART_ELIGIBILITY\n    }\n\n    getRecommendedConditionGuidelines() {\n        return this.isAdult() ? RECOMMENDED_ADULT_STAGING_CONDITIONS: RECOMMENDED_CHILD_STAGING_CONDITIONS\n    }\n\n    getStagingConditions(stage: number) {\n        const category = this.getStagingCategoryByNum(stage)\n        return AppEncounterService.getConceptsByCategory(category)\n    }\n\n    buildWhoStageObs(stage: string) {\n        return this.buildValueCoded('Who stage', stage)\n    }\n    \n    buildWhoCriteriaObs(condition: string) {\n        return this.buildValueCoded('Who stages criteria present', condition)\n    }\n\n    buildReasonForArtObs(reason: string) {\n        return this.buildValueCoded('Reason for ART eligibility', reason)\n    }\n\n    private getStagingCategoryByNum(stageNumber: number) {\n        switch(stageNumber) {\n            case 1:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_1 : StagingCategory.PEDAID_STAGE_1\n            case 2:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_2 : StagingCategory.PEDAID_STAGE_2\n            case 3:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_3 : StagingCategory.PEDAID_STAGE_3\n            case 4:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_4 : StagingCategory.PEDAID_STAGE_4\n            default: \n                return ''\n        }\n    }\n\n    async loadHivConfirmatoryTestType() {\n        const test = await AppEncounterService.getFirstValueCoded(\n            this.patientID, 'Confirmatory hiv test type'\n        )\n        if (test) this.confirmatoryTest = test\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { StagingService } from \"@/apps/ART/services/staging_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport {\n    getFacilities\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        staging: {} as any,\n        showStagingWeightChart: true,\n        canShowStagingFields: true as boolean,\n        bmiObj: {} as any, \n        stagingFacts : {\n            age: -1 as number,\n            bmi: -1 as number,\n            gender: '' as 'M' | 'F',\n            stage: -1 as number,\n            cd4: -1 as number,\n            date: '' as string,\n            isChildBearing: false as boolean,\n            stageOneConditions: [] as Array<string>,\n            stageTwoConditions: [] as Array<string>,\n            stageThreeConditions: [] as Array<string>,\n            stageFourConditions: [] as Array<string>,\n            reasonForArt: '' as string,\n            testType: '' as string,\n            pregnant: '' as 'Yes' | 'No',\n            breastFeeding: '' as 'Yes' | 'No',\n            selectedCondition: '' as string,\n            selectedConditions: [] as Array<string>,\n            weightPercentile: -1 as number,\n            ageInMonths: -1 as number,\n            cd4Modifier: '' as string,\n            whoStage: '' as string\n        }\n    }),\n    watch: {\n        ready : {\n            handler(v) {\n                if (v) {\n                    this.staging = new StagingService(this.patient.getID(), this.patient.getAge(), this.providerID)\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async initStaging(patient: any) {\n            await this.staging.loadHivConfirmatoryTestType()\n            this.bmiObj = await patient.getBMI()\n            this.stagingFacts.age = patient.getAge()\n            this.stagingFacts.bmi = this.bmiObj['index']\n            this.stagingFacts.date = StagingService.getSessionDate()\n            this.stagingFacts.gender = patient.isMale() ? 'M' : 'F' \n            this.stagingFacts.testType = this.staging.getConfirmatoryTestType()\n            this.stagingFacts.ageInMonths = patient.getAgeInMonths()\n            this.stagingFacts.isChildBearing = patient.isChildBearing()\n\n            if (this.staging.isPedaid()) {\n                this.stagingFacts.weightPercentile = await patient.calculateWeightPercentile()\n            }\n        },\n        async submitStaging(computedValues: any) {\n            const encounter = await this.staging.createEncounter()\n\n            if (!encounter) throw 'Unable to create staging encounter'\n\n            const stagingObservations = await this.resolveObs(computedValues, 'staging')\n            const derivedObservations = await Promise.all([\n                this.buildReasonForArtObs(), this.buildWhoStageObs()\n            ])\n\n            const obs = await this.staging.saveObservationList([\n                ...stagingObservations, ...derivedObservations\n            ])\n\n            if (!obs) throw 'Unable to save patient observations'\n        },\n        async onStagingCondition({ label }: Option) {\n            this.stagingFacts.selectedCondition = label\n \n            const guidelines =  this.staging.getAlertGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n            if (isEmpty(findings)) \n                return true\n\n            if (findings[0]?.actions && findings[0]?.actions.alert) {\n                const ok = await findings[0]?.actions.alert(this.stagingFacts)\n                return ok ? true : false\n            }\n            return true\n        },\n        getFacilities(filter='') {\n            return getFacilities(filter)\n        },\n        updateStagingFacts() {\n            const conditions = [\n                this.stagingFacts.stageOneConditions,\n                this.stagingFacts.stageTwoConditions,\n                this.stagingFacts.stageThreeConditions,\n                this.stagingFacts.stageFourConditions, \n            ]\n            this.stagingFacts.stage = conditions.reduce(\n                (stage, conditions: string[], curIndex) =>\n                    isEmpty(conditions) ? stage : curIndex + 1\n                , 0)\n            this.stagingFacts.selectedConditions = conditions.reduce(\n                (accum, cur) => accum.concat(cur), []\n            )\n        },\n        buildReasonForArtObs() {\n            return this.staging.buildReasonForArtObs(this.stagingFacts.reasonForArt)\n        },\n        buildWhoStageObs() {\n            return this.staging.buildWhoStageObs(this.stagingFacts.whoStage)\n        },\n        buildStagingOptions(stage: number, previouslySelected=[] as Array<string>) {\n            const guidelines = this.staging.getRecommendedConditionGuidelines()\n\n            return this.staging.getStagingConditions(stage).map((concept: any) => {\n                let disabled = false\n                let description: unknown\n                let isChecked = previouslySelected.includes(concept.name)\n                this.stagingFacts.selectedCondition = concept.name\n\n                const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n                if (!isEmpty(findings)) {\n                    const conceptFinding = findings[0] //get the first item only\n                    if (conceptFinding?.actions?.isChecked) {\n                        isChecked = true\n                    }\n                    if (conceptFinding?.actions?.disabled) {\n                        disabled = true\n                    }\n                    description = conceptFinding.description\n                }\n                return {\n                    label: concept.name,\n                    value: concept.concept_id,\n                    isChecked,\n                    disabled,\n                    description\n                }\n            })\n        },\n        setWhoStage() {\n            const guidelines = this.staging.getWhoStageGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.whoStage = findings[0]?.concept || ''\n        },\n        setReasonForArt() {\n            const guidelines = this.staging.getProgramEligibilityGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.reasonForArt = findings[0]?.concept || ''\n        },\n        notAsymptomatic(f: any) {\n            const stageOneC = f.stage_1_conditions\n            if (stageOneC) {\n                const asymptomatics = stageOneC.filter((i: Option) => {\n                    return i.label.match(/asymptomatic/i) && i.isChecked\n                })\n                return isEmpty(asymptomatics)\n            }\n            return true\n        },\n        hasTransferLater(f: Record<string, any>): boolean {\n            if ('has_transfer_letter' in f) {\n                return f.has_transfer_letter && f.has_transfer_letter.value === 'Yes'\n            }\n            return false\n        },\n        hasStaging(f: Record<string, any>) {\n            // For components that have Optional staging\n            if (this.hasTransferLater(f)) {\n                return true\n            }\n            return this.canShowStagingFields\n        },\n        getStagingSummaryField(helpText=\"Summary\" as string) {\n            return {\n                id: 'summary',\n                helpText,\n                type: FieldType.TT_ART_STAGING_SUMMARY,\n                condition: (f: any) => this.hasStaging(f),\n                onload: () => {\n                    this.setReasonForArt()\n                    this.setWhoStage()\n                },\n                options: () => [\n                    { \n                        label: 'WHO Stage', \n                        value: this.stagingFacts.whoStage,\n                        other: {\n                            type: 'title-section'\n                        }\n                    },\n                    { \n                        label: 'Condition on starting ART', \n                        value: this.stagingFacts.reasonForArt,\n                        other: {\n                            type: 'title-section'\n                        } \n                    },\n                    ...this.stagingFacts.selectedConditions.map((i: string) => ({ label: i, value: i }))\n                ],\n                config: {\n                    title: 'Selected stage defining conditions',\n                    hiddenFooterBtns: [\n                        'Clear'\n                    ]\n                }\n            }\n        },\n        isANCclient() {\n            return StagingService.getSuspendedProgram() === 'ANC'\n        },\n        getStagingFields(): Array<Field> {\n            return [\n                {\n                    id: 'pregnancy_status',\n                    helpText: 'Pregnant / Breastfeeding',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    validation: (v: any) => Validation.anyEmpty(v),\n                    summaryMapValue: (d: Option) => ({ \n                        label: d.label, \n                        value: d.value \n                    }),\n                    computedValue: (data: Array<Option>, f: Record<string, any>) => {\n                        let obs = []\n                        // For ANC clients, mark pregnancy status as 'Yes' always!!\n                        // The assumption here is also that the pregnancy option is not available for selection\n                        if (this.isANCclient() && !this.hasTransferLater(f)) {\n                            this.stagingFacts['pregnant'] = 'Yes' \n                            obs.push(this.staging.buildValueCoded('Is patient pregnant', 'Yes'))\n                        }\n                        obs = obs.concat(data.map(d => {\n                            const  { value, other } = d\n\n                            const factID: 'pregnant' | 'breastFeeding' = other.factID\n\n                            this.stagingFacts[factID] = `${value}`.match(/Yes/i) ? 'Yes' : 'No'\n\n                            return this.staging.buildValueCoded(other.concept, value)\n                        }))\n                        return {\n                            obs,\n                            tag: 'staging'\n                        }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.pregnancy_status)) {\n                            return f.pregnancy_status\n                        } else {\n                            const options = []\n                            // Hide pregnancy option for ANC clients who are not transferr in\n                            if (!this.isANCclient() || this.hasTransferLater(f)) {\n                                options.push({\n                                    label: 'Pregnant?',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                        concept: 'Is patient pregnant',\n                                        factID: 'pregnant'\n                                    }\n                                })\n                            }\n                            options.push({\n                                label: 'Breastfeeding?',\n                                value: '',\n                                other: {\n                                    values: this.yesNoOptions(),\n                                    concept: 'Is patient breast feeding',\n                                    factID: 'breastFeeding'\n                                }\n                            })\n                            return options\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.stagingFacts.isChildBearing,\n                },\n                {\n                    id: 'patient_weight_chart',\n                    helpText: 'Weight history',\n                    type: FieldType.TT_WEIGHT_CHART,\n                    options: async () => {\n                        let values = await this.patient.getWeightHistory()\n                        values = values.map((d: any) => ({ \n                            x: HisDate.toStandardHisDisplayFormat(d.date), \n                            y: d.weight\n                        }))\n                        return [\n                            {\n                                label: \"Weight for patient\",\n                                value: \"Weight trail\",\n                                other: {\n                                    values,\n                                    age: this.patient.getAge(),\n                                    bmi: this.bmiObj\n                                }\n                            }\n                        ]\n                    },\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.showStagingWeightChart\n                },\n                {\n                    id: 'stage_4_conditions',\n                    helpText: 'Stage 4 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(4, this.stagingFacts.stageFourConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageFourConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageFourConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_3_conditions',\n                    helpText: 'Stage 3 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(3, this.stagingFacts.stageThreeConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageThreeConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageThreeConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_2_conditions',\n                    helpText: 'Stage 2 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(2, this.stagingFacts.stageTwoConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Option[]) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageTwoConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageTwoConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_1_conditions',\n                    helpText: 'Stage 1 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (val: any) => {\n                        if (isEmpty(val) && isEmpty(this.stagingFacts.selectedConditions))\n                            return ['Please provide atleast one staging condition']\n                    },\n                    options: () => this.buildStagingOptions(1, this.stagingFacts.stageOneConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        const data = d.map(i => i.label)\n                        this.stagingFacts.stageOneConditions = data\n                        this.updateStagingFacts()\n                        return {\n                            tag: 'staging',\n                            obs: data.map(i => this.staging.buildWhoCriteriaObs(i))\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f),\n                },\n                {\n                    id: 'cd4_available',\n                    helpText: 'Recent CD4 count results available?',\n                    type: FieldType.TT_SELECT,\n                    condition: (f: any) => this.hasStaging(f),\n                    validation: (val: any) => Validation.required(val),\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'cd4_count',\n                    helpText: 'CD4 Count',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (d: Option) => {\n                        const value = d.value.toString()\n                        const modifier = value.charAt(0)\n                        const count = parseInt(value.substring(1))\n                        return {\n                            tag: 'staging',\n                            modifier,\n                            count,\n                            obs: this.staging.buildValueNumber(\n                                'CD4 count', count, modifier\n                            )\n                        }\n                    },\n                    unload: (d: any, s: any, f: any, computedData: any) => {\n                        const { count, modifier } = computedData['cd4_count']\n                        this.stagingFacts.cd4 = count\n                        this.stagingFacts.cd4Modifier = modifier\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.cd4 = -1\n                        this.stagingFacts.cd4Modifier = ''\n                    },\n                    validation: (val: any) => {\n                        const isCd4 = () => this.staging.cd4CountIsValid(val.value)\n                        return this.validateSeries([\n                            () => Validation.required(val),\n                            () => !isCd4() ? ['Please start with either modifier first: >, <, or ='] : null\n                        ])\n                    },\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Unknown', 'Delete']\n                            ]\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                },\n                ...generateDateFields({\n                    id: 'cd4_result_date',\n                    helpText: 'Cd4 Results',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) =>  this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        return {\n                            date,\n                            tag: 'staging',\n                            isEstimate,\n                            obs: this.staging.buildValueDate('Cd4 count datetime', date) \n                        }\n                    }\n                }, this.staging.getDate()),\n                {\n                    id: 'location',\n                    helpText: 'CD4 Location',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: () => StagingService.getLocationName(),\n                    computedValue: ({ label }: Option) => ({\n                        tag: 'staging',\n                        obs: this.staging.buildValueText('Cd4 count location', label)\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    options: (_, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                }\n            ]\n        }\n    }\n})\n","import script from \"./StagingMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./StagingMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}