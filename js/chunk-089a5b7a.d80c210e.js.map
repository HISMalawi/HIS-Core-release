{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?83cf","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?0184","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/guidelines/staging_guidelines.ts","webpack:///./src/apps/ART/services/staging_service.ts","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue?2b2f","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","id","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","ADULT_WHO_STAGE_CRITERIA","concept","stage","reasonForArt","reason","CHILD_WHO_STAGE_CRITERIA","CONTRADICTING_STAGE_DEFINITIONS_ALERTS","alertConfirmation","bmi","confirmBtnLabel","cancelBtnLabel","selectedCondition","keepAsymptomatic","selectedConditions","stageThreeConditions","stageFourConditions","stageTwoConditions","RECOMMENDED_CHILD_STAGING_CONDITIONS","isChecked","show","weightPercentile","disabled","RECOMMENDED_ADULT_STAGING_CONDITIONS","CHILD_ART_ELIGIBILITY","ageInMonths","pshdConditions","ConceptService","getConceptsByCategory","pshdCondition","testType","cd4Date","date","cd4","cd4Modifier","modifier","breastFeeding","answer","pregnant","ADULT_ART_ELIGIBILITY","severeSymp","found","total","symp","StagingCategory","StagingService","constructor","super","confirmatoryTest","isAdult","isPedaid","setAge","getFacilities","LocationService","getConfirmatoryTestType","cd4CountIsValid","match","getAlertGuidelines","getWhoStageGuidelines","getProgramEligibilityGuidelines","getRecommendedConditionGuidelines","getStagingConditions","category","getStagingCategoryByNum","buildWhoStageObs","buildValueCoded","buildWhoCriteriaObs","buildReasonForArtObs","stageNumber","ADULT_STAGE_1","PEDAID_STAGE_1","ADULT_STAGE_2","PEDAID_STAGE_2","ADULT_STAGE_3","PEDAID_STAGE_3","ADULT_STAGE_4","PEDAID_STAGE_4","getFirstValueCoded","mixins","EncounterMixinVue","staging","showStagingWeightChart","canShowStagingFields","bmiObj","stagingFacts","isChildBearing","stageOneConditions","whoStage","watch","handler","v","getID","immediate","loadHivConfirmatoryTestType","getBMI","isMale","getAgeInMonths","calculateWeightPercentile","computedValues","encounter","stagingObservations","derivedObservations","ok","updateStagingFacts","curIndex","buildStagingOptions","previouslySelected","conceptFinding","concept_id","setWhoStage","setReasonForArt","notAsymptomatic","f","stageOneC","stage_1_conditions","asymptomatics","hasTransferLater","has_transfer_letter","hasStaging","getStagingSummaryField","helpText","FieldType","TT_ART_STAGING_SUMMARY","onload","config","hiddenFooterBtns","isANCclient","getSuspendedProgram","getStagingFields","TT_MULTIPLE_YES_NO","validation","Validation","anyEmpty","summaryMapValue","computedValue","factID","pregnancy_status","TT_WEIGHT_CHART","getWeightHistory","x","y","TT_MULTIPLE_SELECT","onValue","onStagingCondition","unload","onConditionFalse","val","TT_SELECT","TT_TEXT","charAt","count","substring","s","isCd4","customKeyboard","CD4_COUNT_PAD_LO","cd4_available","generateDateFields","minDate","maxDate","getDate","estimation","allowUnknown","computeValue","isEstimate","buildValueDate","defaultValue","getLocationName","_","showKeyboard","isFilterDataViaApi","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-089a5b7a.d80c210e.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/brian/projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { ConceptService } from \"@/services/concept_service\"\nimport { alertConfirmation } from \"@/utils/Alerts\"\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\n\nexport const ADULT_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Adults with stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV ADULT'\n        }\n    },\n    'Adults with stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Adults with stage 2 conditions': {\n        concept: 'WHO STAGE II ADULT',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2,\n        }\n    },\n    'Adults with stage 1 conditions': {\n        concept: 'WHO STAGE I ADULT',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CHILD_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Children with stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV PEDS'\n        }\n    },\n    'For children with stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Children with stage 2 conditions': {\n        concept: 'WHO STAGE II PEDS',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2\n        }\n    },\n    'Children with stage 1 conditions': {\n        concept: 'WHO STAGE I PEDS',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CONTRADICTING_STAGE_DEFINITIONS_ALERTS: Record<string, GuideLineInterface> = {\n    \"Warn if Severe weight loss is selected when actual patient BMI is acceptable\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => await alertConfirmation(`Patient's BMI of ${facts.bmi} greater than 18.5, do you wish to proceed?`, {\n                confirmBtnLabel: 'Yes, keep severe weightloss',\n                cancelBtnLabel: 'No, cancel'\n            }),\n        },\n        conditions: {\n            selectedCondition (condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi:(bmi: number) => bmi > 18.5\n        }\n    },\n    \"Warn for contradicting stage defining conditions\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => {\n                const keepAsymptomatic = await alertConfirmation('CONTRADICTING STAGE DEFINING CONDITIONS', {\n                    confirmBtnLabel: \"Keep Asymptomatic\",\n                    cancelBtnLabel: 'Keep other(s)'\n                })\n                if(keepAsymptomatic) {\n                    facts.stage = 1\n                    facts.selectedConditions = []\n                    facts.stageThreeConditions = []\n                    facts.stageFourConditions = []\n                    facts.stageTwoConditions = []\n                    return true\n                }\n                return false\n            },\n        },\n        conditions: {\n            selectedCondition(condition: string){\n                return condition === 'Asymptomatic HIV infection'\n            },\n            stage: (stage: number) => stage >= 2\n        }\n    },\n}\n\nexport const RECOMMENDED_CHILD_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'For children whose current weight percentile is less than 70' : {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has a low weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile < 70\n            }\n        }\n    },\n    'Enable Moderate unexplained malnutrition for children whose weight for height is 70-79%': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile >= 70 && weightPercentile <= 79\n            }\n        }\n    },\n    'Disable moderate weight loss when Severe unexplained weight loss is chosen': {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss/manutrition was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)')\n            }\n        }\n    }\n}\n\nexport const RECOMMENDED_ADULT_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'Adults with a BMI less than 16': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Adult has a low BMI of ${facts.bmi}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi: (bmi: number) => bmi < 16\n        }\n    },\n    'Adults whose BMI is between 16 and 18': {\n        priority: 3,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'warning',\n            show: 'onChecked',\n            info: (facts: any) => `BMI of ${facts.bmi} is between 16 and 18`,\n        },\n        conditions: {\n            selectedCondition: (condition: string) => condition === 'Moderate weight loss less than or equal to 10 percent, unexplained',\n            bmi: (bmi: number) => bmi >= 16.0 && bmi <= 18.5\n        }\n    },\n    \"Disable Moderate weight loss if severe weightloss is selected\": {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate weight loss less than or equal to 10 percent, unexplained'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained')\n            }\n        }\n    }\n}\n\nexport const CHILD_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 2,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'Children under twelve months who tested positive on Rapid test and have presumed severe HIV': {\n        concept: 'PRESUMED SEVERE HIV',\n        priority: 3,\n        conditions: {\n            ageInMonths(age: number){\n                return age < 12 \n            },\n            selectedConditions: (conditions: Array<string>) => {\n                const pshdConditions = ConceptService.getConceptsByCategory('pshd_condition')\n                for (const pshdCondition in pshdConditions) {\n                    if (conditions.includes(pshdCondition)) return true\n                }\n                return false\n            },\n            testType(testType: string){\n                return testType === 'HIV rapid test'\n            },\n        }\n    },\n    \"Children under twelve who tested positive via HIV DNA Polymerase Chain Reaction test\": {\n        concept: 'HIV DNA polymerase chain reaction',\n        priority: 4,\n        conditions: {\n            ageInMonths: (age: number) => age < 12,\n            testType: (testType: string) => testType === \"HIV DNA polymerase chain reaction\",\n        }\n    },\n    \"Children who are less than 24 months\": {\n        concept: 'HIV infected',\n        priority: 5,\n        conditions: {\n            ageInMonths: (age: number) => age < 24\n        }\n    },\n    \"Children between 24 and 56 months who have stage 2 or 1 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 750',\n        priority: 6,\n        conditions: {\n            ageInMonths(age: number) {\n                return age >= 24 && age <= 56\n            },\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 750\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children with CD4 count less than 500 and have stage 1 and stage 2 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 7,\n        conditions: {\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4Modifier(modifier: string){\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children over the date 2014-04-01 who are more than five years old and have cd4 count less than 500\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 9,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            age(age: number) {\n                return age > 5\n            },\n            cd4(cd4: number) {\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    \"Children over date 2014-04-01 and less than Five years old\": {\n        concept: 'HIV infected',\n        priority: 10,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            age(age: number) {\n                return age <= 5\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 11,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 12,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 13,\n        conditions: {\n            stage: (stage: number) => stage <= 2\n        }\n    }\n}\n\nexport const ADULT_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has HIV wasting syndrome identified in stage 3': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            selectedConditions: (conditions: Array<string>) => {\n                const severeSymp = ConceptService.getConceptsByCategory('severe_hiv_wasting_syndrome')\n                const found = severeSymp.reduce((total, symp) => conditions.includes(symp.name) ? total + 1 : 0, 0)\n                return found >= 2\n            }\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'CD4 less than 350 for adults before 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 4,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 250 for adults after 2014': {\n        concept: 'cd4 less than or equal to 250',\n        priority: 4,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 250\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 350 for adults after 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 5,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 500 for adults after 2014': {\n        concept: 'cd4 less than or equal to 500',\n        priority: 6,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 8,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 7,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 9,\n        conditions: {\n            stage: (stage: number) => stage <= 2,\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { LocationService } from \"@/services/location_service\"\nimport {\n    RECOMMENDED_ADULT_STAGING_CONDITIONS,\n    CHILD_ART_ELIGIBILITY,\n    ADULT_ART_ELIGIBILITY,\n    ADULT_WHO_STAGE_CRITERIA,\n    CHILD_WHO_STAGE_CRITERIA,\n    CONTRADICTING_STAGE_DEFINITIONS_ALERTS,\n    RECOMMENDED_CHILD_STAGING_CONDITIONS\n} from \"@/apps/ART/guidelines/staging_guidelines\"\n\n/**\n * Enable for filtering staging categories in ConceptName Dictionary\n */\nenum StagingCategory {\n    ADULT_STAGE_4 = 'stage_4_conditions_adults',\n    ADULT_STAGE_3 = 'stage_3_conditions_adults',\n    ADULT_STAGE_2 = 'stage_2_conditions_adults',\n    ADULT_STAGE_1 = 'stage_1_conditions_adults',\n    PEDAID_STAGE_4 = 'stage_4_conditions_pedaids',\n    PEDAID_STAGE_3 = 'stage_3_conditions_pedaids',\n    PEDAID_STAGE_2 = 'stage_2_conditions_pedaids',\n    PEDAID_STAGE_1 = 'stage_1_conditions_pedaids'\n}\n\nexport class StagingService extends AppEncounterService {\n    age: number\n    confirmatoryTest: string | null;\n    constructor(patientID: number, age: number, providerID: number) {\n        super(patientID, 52, providerID) //TODO: Use encounter type reference name\n        this.age = age\n        this.confirmatoryTest = null\n    }\n\n    isAdult() { return this.age >= 15 }\n\n    isPedaid() { return this.age <= 14 }\n\n    setAge(age: number) {\n        this.age = age\n    }\n\n    getFacilities (filter='') { return LocationService.getFacilities({name: filter}) }\n    \n    getConfirmatoryTestType() { return this.confirmatoryTest }\n\n    cd4CountIsValid(value: string) {\n        try {\n            return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n        }catch(e) {\n            return false\n        }\n    }\n\n    getAlertGuidelines() {\n        return CONTRADICTING_STAGE_DEFINITIONS_ALERTS\n    }\n\n    getWhoStageGuidelines() {\n        return this.isAdult() ? ADULT_WHO_STAGE_CRITERIA : CHILD_WHO_STAGE_CRITERIA\n    }\n\n    getProgramEligibilityGuidelines() {\n        return this.isAdult() ? ADULT_ART_ELIGIBILITY: CHILD_ART_ELIGIBILITY\n    }\n\n    getRecommendedConditionGuidelines() {\n        return this.isAdult() ? RECOMMENDED_ADULT_STAGING_CONDITIONS: RECOMMENDED_CHILD_STAGING_CONDITIONS\n    }\n\n    getStagingConditions(stage: number) {\n        const category = this.getStagingCategoryByNum(stage)\n        return AppEncounterService.getConceptsByCategory(category)\n    }\n\n    buildWhoStageObs(stage: string) {\n        return this.buildValueCoded('Who stage', stage)\n    }\n    \n    buildWhoCriteriaObs(condition: string) {\n        return this.buildValueCoded('Who stages criteria present', condition)\n    }\n\n    buildReasonForArtObs(reason: string) {\n        return this.buildValueCoded('Reason for ART eligibility', reason)\n    }\n\n    private getStagingCategoryByNum(stageNumber: number) {\n        switch(stageNumber) {\n            case 1:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_1 : StagingCategory.PEDAID_STAGE_1\n            case 2:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_2 : StagingCategory.PEDAID_STAGE_2\n            case 3:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_3 : StagingCategory.PEDAID_STAGE_3\n            case 4:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_4 : StagingCategory.PEDAID_STAGE_4\n            default: \n                return ''\n        }\n    }\n\n    async loadHivConfirmatoryTestType() {\n        const test = await AppEncounterService.getFirstValueCoded(\n            this.patientID, 'Confirmatory hiv test type'\n        )\n        if (test) this.confirmatoryTest = test\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { StagingService } from \"@/apps/ART/services/staging_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport {\n    getFacilities\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        staging: {} as any,\n        showStagingWeightChart: true,\n        canShowStagingFields: true as boolean,\n        bmiObj: {} as any, \n        stagingFacts : {\n            age: -1 as number,\n            bmi: -1 as number,\n            gender: '' as 'M' | 'F',\n            stage: -1 as number,\n            cd4: -1 as number,\n            cd4Date: '' as string,\n            date: '' as string,\n            isChildBearing: false as boolean,\n            stageOneConditions: [] as Array<string>,\n            stageTwoConditions: [] as Array<string>,\n            stageThreeConditions: [] as Array<string>,\n            stageFourConditions: [] as Array<string>,\n            reasonForArt: '' as string,\n            testType: '' as string,\n            pregnant: '' as 'Yes' | 'No',\n            breastFeeding: '' as 'Yes' | 'No',\n            selectedCondition: '' as string,\n            selectedConditions: [] as Array<string>,\n            weightPercentile: -1 as number,\n            ageInMonths: -1 as number,\n            cd4Modifier: '' as string,\n            whoStage: '' as string\n        }\n    }),\n    watch: {\n        ready : {\n            handler(v) {\n                if (v) {\n                    this.staging = new StagingService(this.patient.getID(), this.patient.getAge(), this.providerID)\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async initStaging(patient: any) {\n            await this.staging.loadHivConfirmatoryTestType()\n            this.bmiObj = await patient.getBMI()\n            this.stagingFacts.age = patient.getAge()\n            this.stagingFacts.bmi = this.bmiObj['index']\n            this.stagingFacts.date = StagingService.getSessionDate()\n            this.stagingFacts.gender = patient.isMale() ? 'M' : 'F' \n            this.stagingFacts.testType = this.staging.getConfirmatoryTestType()\n            this.stagingFacts.ageInMonths = patient.getAgeInMonths()\n            this.stagingFacts.isChildBearing = patient.isChildBearing()\n\n            if (this.staging.isPedaid()) {\n                this.stagingFacts.weightPercentile = await patient.calculateWeightPercentile()\n            }\n        },\n        async submitStaging(computedValues: any) {\n            const encounter = await this.staging.createEncounter()\n\n            if (!encounter) throw 'Unable to create staging encounter'\n\n            const stagingObservations = await this.resolveObs(computedValues, 'staging')\n            const derivedObservations = await Promise.all([\n                this.buildReasonForArtObs(), this.buildWhoStageObs()\n            ])\n\n            const obs = await this.staging.saveObservationList([\n                ...stagingObservations, ...derivedObservations\n            ])\n\n            if (!obs) throw 'Unable to save patient observations'\n        },\n        async onStagingCondition({ label }: Option) {\n            this.stagingFacts.selectedCondition = label\n \n            const guidelines =  this.staging.getAlertGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n            if (isEmpty(findings)) \n                return true\n\n            if (findings[0]?.actions && findings[0]?.actions.alert) {\n                const ok = await findings[0]?.actions.alert(this.stagingFacts)\n                return ok ? true : false\n            }\n            return true\n        },\n        getFacilities(filter='') {\n            return getFacilities(filter)\n        },\n        updateStagingFacts() {\n            const conditions = [\n                this.stagingFacts.stageOneConditions,\n                this.stagingFacts.stageTwoConditions,\n                this.stagingFacts.stageThreeConditions,\n                this.stagingFacts.stageFourConditions, \n            ]\n            this.stagingFacts.stage = conditions.reduce(\n                (stage, conditions: string[], curIndex) =>\n                    isEmpty(conditions) ? stage : curIndex + 1\n                , 0)\n            this.stagingFacts.selectedConditions = conditions.reduce(\n                (accum, cur) => accum.concat(cur), []\n            )\n        },\n        buildReasonForArtObs() {\n            return this.staging.buildReasonForArtObs(this.stagingFacts.reasonForArt)\n        },\n        buildWhoStageObs() {\n            return this.staging.buildWhoStageObs(this.stagingFacts.whoStage)\n        },\n        buildStagingOptions(stage: number, previouslySelected=[] as Array<string>) {\n            const guidelines = this.staging.getRecommendedConditionGuidelines()\n\n            return this.staging.getStagingConditions(stage).map((concept: any) => {\n                let disabled = false\n                let description: unknown\n                let isChecked = previouslySelected.includes(concept.name)\n                this.stagingFacts.selectedCondition = concept.name\n\n                const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n                if (!isEmpty(findings)) {\n                    const conceptFinding = findings[0] //get the first item only\n                    if (conceptFinding?.actions?.isChecked) {\n                        isChecked = true\n                    }\n                    if (conceptFinding?.actions?.disabled) {\n                        disabled = true\n                    }\n                    description = conceptFinding.description\n                }\n                return {\n                    label: concept.name,\n                    value: concept.concept_id,\n                    isChecked,\n                    disabled,\n                    description\n                }\n            })\n        },\n        setWhoStage() {\n            const guidelines = this.staging.getWhoStageGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.whoStage = findings[0]?.concept || ''\n        },\n        setReasonForArt() {\n            const guidelines = this.staging.getProgramEligibilityGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.reasonForArt = findings[0]?.concept || ''\n        },\n        notAsymptomatic(f: any) {\n            const stageOneC = f.stage_1_conditions\n            if (stageOneC) {\n                const asymptomatics = stageOneC.filter((i: Option) => {\n                    return i.label.match(/asymptomatic/i) && i.isChecked\n                })\n                return isEmpty(asymptomatics)\n            }\n            return true\n        },\n        hasTransferLater(f: Record<string, any>): boolean {\n            if ('has_transfer_letter' in f) {\n                return f.has_transfer_letter && f.has_transfer_letter.value === 'Yes'\n            }\n            return false\n        },\n        hasStaging(f: Record<string, any>) {\n            // For components that have Optional staging\n            if (this.hasTransferLater(f)) {\n                return true\n            }\n            return this.canShowStagingFields\n        },\n        getStagingSummaryField(helpText=\"Summary\" as string) {\n            return {\n                id: 'summary',\n                helpText,\n                type: FieldType.TT_ART_STAGING_SUMMARY,\n                condition: (f: any) => this.hasStaging(f),\n                onload: () => {\n                    this.setReasonForArt()\n                    this.setWhoStage()\n                },\n                options: () => [\n                    { \n                        label: 'WHO Stage', \n                        value: this.stagingFacts.whoStage,\n                        other: {\n                            type: 'title-section'\n                        }\n                    },\n                    { \n                        label: 'Condition on starting ART', \n                        value: this.stagingFacts.reasonForArt,\n                        other: {\n                            type: 'title-section'\n                        } \n                    },\n                    ...this.stagingFacts.selectedConditions.map((i: string) => ({ label: i, value: i }))\n                ],\n                config: {\n                    title: 'Selected stage defining conditions',\n                    hiddenFooterBtns: [\n                        'Clear'\n                    ]\n                }\n            }\n        },\n        isANCclient() {\n            return StagingService.getSuspendedProgram() === 'ANC'\n        },\n        getStagingFields(): Array<Field> {\n            return [\n                {\n                    id: 'pregnancy_status',\n                    helpText: 'Pregnant / Breastfeeding',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    validation: (v: any) => Validation.anyEmpty(v),\n                    summaryMapValue: (d: Option) => ({ \n                        label: d.label, \n                        value: d.value \n                    }),\n                    computedValue: (data: Array<Option>, f: Record<string, any>) => {\n                        let obs = []\n                        // For ANC clients, mark pregnancy status as 'Yes' always!!\n                        // The assumption here is also that the pregnancy option is not available for selection\n                        if (this.isANCclient() && !this.hasTransferLater(f)) {\n                            this.stagingFacts['pregnant'] = 'Yes' \n                            obs.push(this.staging.buildValueCoded('Is patient pregnant', 'Yes'))\n                        }\n                        obs = obs.concat(data.map(d => {\n                            const  { value, other } = d\n\n                            const factID: 'pregnant' | 'breastFeeding' = other.factID\n\n                            this.stagingFacts[factID] = `${value}`.match(/Yes/i) ? 'Yes' : 'No'\n\n                            return this.staging.buildValueCoded(other.concept, value)\n                        }))\n                        return {\n                            obs,\n                            tag: 'staging'\n                        }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.pregnancy_status)) {\n                            return f.pregnancy_status\n                        } else {\n                            const options = []\n                            // Hide pregnancy option for ANC clients who are not transferr in\n                            if (!this.isANCclient() || this.hasTransferLater(f)) {\n                                options.push({\n                                    label: 'Pregnant?',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                        concept: 'Is patient pregnant',\n                                        factID: 'pregnant'\n                                    }\n                                })\n                            }\n                            options.push({\n                                label: 'Breastfeeding?',\n                                value: '',\n                                other: {\n                                    values: this.yesNoOptions(),\n                                    concept: 'Is patient breast feeding',\n                                    factID: 'breastFeeding'\n                                }\n                            })\n                            return options\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.stagingFacts.isChildBearing,\n                },\n                {\n                    id: 'patient_weight_chart',\n                    helpText: 'Weight history',\n                    type: FieldType.TT_WEIGHT_CHART,\n                    options: async () => {\n                        let values = await this.patient.getWeightHistory()\n                        values = values.map((d: any) => ({ \n                            x: HisDate.toStandardHisDisplayFormat(d.date), \n                            y: d.weight\n                        }))\n                        return [\n                            {\n                                label: \"Weight for patient\",\n                                value: \"Weight trail\",\n                                other: {\n                                    values,\n                                    age: this.patient.getAge(),\n                                    bmi: this.bmiObj\n                                }\n                            }\n                        ]\n                    },\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.showStagingWeightChart\n                },\n                {\n                    id: 'stage_4_conditions',\n                    helpText: 'Stage 4 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(4, this.stagingFacts.stageFourConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageFourConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageFourConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_3_conditions',\n                    helpText: 'Stage 3 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(3, this.stagingFacts.stageThreeConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageThreeConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageThreeConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_2_conditions',\n                    helpText: 'Stage 2 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(2, this.stagingFacts.stageTwoConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Option[]) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageTwoConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageTwoConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_1_conditions',\n                    helpText: 'Stage 1 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (val: any) => {\n                        if (isEmpty(val) && isEmpty(this.stagingFacts.selectedConditions))\n                            return ['Please provide atleast one staging condition']\n                    },\n                    options: () => this.buildStagingOptions(1, this.stagingFacts.stageOneConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        const data = d.map(i => i.label)\n                        this.stagingFacts.stageOneConditions = data\n                        this.updateStagingFacts()\n                        return {\n                            tag: 'staging',\n                            obs: data.map(i => this.staging.buildWhoCriteriaObs(i))\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f),\n                },\n                {\n                    id: 'cd4_available',\n                    helpText: 'Recent CD4 count results available?',\n                    type: FieldType.TT_SELECT,\n                    condition: (f: any) => this.hasStaging(f),\n                    validation: (val: any) => Validation.required(val),\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'cd4_count',\n                    helpText: 'CD4 Count',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (d: Option) => {\n                        const value = d.value.toString()\n                        const modifier = value.charAt(0)\n                        const count = parseInt(value.substring(1))\n                        return {\n                            tag: 'staging',\n                            modifier,\n                            count,\n                            obs: this.staging.buildValueNumber(\n                                'CD4 count', count, modifier\n                            )\n                        }\n                    },\n                    unload: (d: any, s: any, f: any, computedData: any) => {\n                        const { count, modifier } = computedData['cd4_count']\n                        this.stagingFacts.cd4 = count\n                        this.stagingFacts.cd4Modifier = modifier\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.cd4 = -1\n                        this.stagingFacts.cd4Modifier = ''\n                    },\n                    validation: (val: any) => {\n                        const isCd4 = () => this.staging.cd4CountIsValid(val.value)\n                        return this.validateSeries([\n                            () => Validation.required(val),\n                            () => !isCd4() ? ['Please start with either modifier first: >, <, or ='] : null\n                        ])\n                    },\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Unknown', 'Delete']\n                            ]\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                },\n                ...generateDateFields({\n                    id: 'cd4_result_date',\n                    helpText: 'Cd4 Results',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) =>  this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        this.stagingFacts.cd4Date = date\n                        return {\n                            date,\n                            tag: 'staging',\n                            isEstimate,\n                            obs: this.staging.buildValueDate('Cd4 count datetime', date) \n                        }\n                    }\n                }, this.staging.getDate()),\n                {\n                    id: 'location',\n                    helpText: 'CD4 Location',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: () => StagingService.getLocationName(),\n                    computedValue: ({ label }: Option) => ({\n                        tag: 'staging',\n                        obs: this.staging.buildValueText('Cd4 count location', label)\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    options: (_, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                }\n            ]\n        }\n    }\n})\n","import script from \"./StagingMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./StagingMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}