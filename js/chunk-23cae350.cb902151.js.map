{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaScreeningResult.vue?16ca","webpack:///./src/apps/CxCa/services/CxCaScreeningResultService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaScreeningResult.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaScreeningResult.vue?de6a","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","isEnrolledInProgam","formLabel","ready","watch","handler","route","params","patient_id","this","toUpperCase","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","nextTask","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","ScreeningResultService","AppEncounterService","constructor","super","mixins","EncounterMixinVue","screeningResult","currentMethod","getTreatmentOptions","getFields","encounter","createEncounter","toastWarning","treatment_option","buildValueText","vals","keys","forEach","element","saveObservationList","toastSuccess","getFacilities","getFirstValueCoded","getOptions","method","match","id","helpText","FieldType","TT_SELECT","validation","val","Validation","computedValue","buildValueCoded","results_available","screening_result","offer_via","_","config","showKeyboard","isFilterDataViaApi","facilities","LocationService","f","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-23cae350.cb902151.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ScreeningResultService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 186, providerID) //TODO: Use encounter type reference name'\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport {ScreeningResultService} from \"@/apps/CxCa/services/CxCaScreeningResultService\"\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    screeningResult: {} as any,\n    obs: [] as any,\n    currentMethod: ''\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.screeningResult = new ScreeningResultService(\n          this.patientID,\n          this.providerID\n        );\n        this.currentMethod = await this.getTreatmentOptions(); \n        this.fields = this.getFields();\n        \n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computed: any) {\n      const encounter = await this.screeningResult.createEncounter();\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      if(formData.treatment_option && formData.treatment_option.value === \"Referral\") {\n        this.obs.push(this.screeningResult.buildValueText('Referral location', formData['location'].label))\n      }\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...this.obs, ...vals]);\n      await this.screeningResult.saveObservationList(data);\n      toastSuccess(\"Observations and encounter created!\");\n      this.nextTask();\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    async getTreatmentOptions() {\n      return await this.screeningResult.getFirstValueCoded('CxCa screening method');\n    },\n    getOptions(method: string) {\n      if(!method) {\n        \n        toastWarning(\"No screening methods have been selected\");\n        this.gotoPatientDashboard();\n\n      }\n      if(method.match(/via/i)){\n        return [\"VIA Negative\",\"VIA Positive\",\"Suspect Cancer\"];\n      }else if(method.match(/smear/i)){\n        return [\"PAP Smear Normal\",\"PAP Smear Abnormal\"];\n      }else if(method.match(/HPV DNA/i)){\n        return [\"HPV positive\",\"HPV negative\"];\n      }else if(method.match(/Speculum/i)){\n        return [\"Visible Lesion\",\"No visible Lesion\", \"Suspect Cancer\", \"Other Gynae\"];\n      }\n      return []\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"results_available\",\n          helpText: \"Screening result available\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Screening results available', value.value)\n          })\n        },\n        {\n          id: \"screening_result\",\n          helpText: \"Screening Result\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.mapOptions([...this.getOptions(this.currentMethod)]),\n          condition(formData: any) {\n            return formData.results_available.value === \"Yes\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Screening results', value.value)\n          })\n        },\n        {\n          id: \"gynae_options\",\n          helpText: \"Other Gynae treatment\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"STI\",\n              \"Cervicitis\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.screening_result.value === \"Other Gynae\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Screening results', value.value)\n          })\n        },\n        {\n          id: \"offer_via\",\n          helpText: \"Offer VIA\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          condition(formData: any) {\n            return formData.screening_result.value === \"HPV positive\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Patient went for VIA?', value.value)\n          })\n        },\n        {\n          id: \"via_screening_results\",\n          helpText: \"VIA screening results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"VIA negative\",\n              \"VIA positive\",\n              \"Suspect cancer\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.offer_via.value === \"Yes\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('VIA Results', value.value)\n          })\n        },\n        {\n          id: \"reason_for_not_offering_via\",\n          helpText: \"Reason for NOT offering VIA\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Client NOT ready\",\n              \"Treatment not available\",\n              \"Other conditions\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.offer_via.value === \"No\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Other reason for not seeking services', value.value)\n          })\n        },\n        {\n          id: \"treatment_option\",\n          helpText: \"Enter treatment option\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Same day treatment\",\n              \"Postponed treatment\",\n              \"Referral\",\n            ]);\n          },\n          condition(formData: any) {\n            return !['VIA Negative', 'No visible Lesion', 'PAP Smear Abnormal', 'HPV negative'].includes(formData.screening_result.value);\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Directly observed treatment option', value.value)\n          })\n        },\n        {\n          id: \"postponed_reason\",\n          helpText: \"Select reason for postponing treatment\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Client not ready\",\n              \"Treatment not available\",\n              \"Other conditions\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.treatment_option.value === \"Postponed treatment\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Postponed reason', value.value)\n          })\n        },\n        {\n          id: \"referral_rreason\",\n          helpText: \"Referral reason\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Further Investigation and Management\",\n              \"Large Lesion (Greater than 75 percent)\",\n              \"Unable to treat client\",\n              \"Suspect Cancer\",\n              \"Treatment not available\",\n              \"Other conditions\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.treatment_option.value === \"Referral\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Referral reason', value.value)\n          })\n        },\n        {\n          id: \"location\",\n          helpText: \"Location reffered from\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (_: any, filter = \"\") => this.getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n          condition(formData: any) {\n            return formData.treatment_option.value === \"Referral\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueText('Referral location', value.label)\n          })\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaScreeningResult.vue?vue&type=template&id=3be0a10a&ts=true\"\nimport script from \"./CxCaScreeningResult.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaScreeningResult.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}