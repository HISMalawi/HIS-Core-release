{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?64fb","webpack:///./src/apps/CxCa/services/CxCaAssessmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?da0d"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","AssessmentService","patientID","providerID","AppEncounterService","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","assessment","obs","showHIVQuestions","offerCxCa","watch","patient","handler","setOfferCxCa","getFields","deep","methods","formData","computed","createEncounter","encounter","toastWarning","vals","Object","keys","forEach","element","push","Promise","all","saveObservationList","toastSuccess","nextTask","getFirstValueCoded","buildValueCoded","enterPreviousCxCaData","everHadCxCa","ever_had_cxca","value","resultsAvailable","results_available","getFacilities","filter","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","label","computedValue","condition","generateDateFields","hiv_status","match","minDate","getBirthdate","maxDate","getDate","estimation","allowUnknown","computeValue","date","isEstimate","tag","buildValueDate","this","reason_for_visit","yesNoOptions","_","config","showKeyboard","isFilterDataViaApi","buildValueText","offer_CxCa","__exports__"],"mappings":"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","file":"js/chunk-2d226508.2ea21a2c.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class AssessmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 181, providerID) //TODO: Use encounter type reference name'\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { AssessmentService } from \"@/apps/CxCa/services/CxCaAssessmentService\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    assessment: {} as any,\n    obs: [] as any,\n    showHIVQuestions: true,\n    offerCxCa: false,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.assessment = new AssessmentService(\n          this.patientID,\n          this.providerID\n        );\n        await this.setOfferCxCa();\n        this.fields = await this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computed: any) {\n      \n      const encounter = await this.assessment.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...this.obs, ...vals]);\n\n      const obs = await this.assessment.saveObservationList(data);\n\n      if (!obs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      this.nextTask();\n    },\n    async setOfferCxCa() {\n      const data = await this.assessment.getFirstValueCoded(\"Offer CxCa\");\n      this.offerCxCa = data && data === \"Yes\";\n      if (!this.offerCxCa) {\n        this.obs.push(this.assessment.buildValueCoded(\"Ever had CxCa\", \"No\"));\n      }\n      return true;\n    },\n    enterPreviousCxCaData(formData: any) {\n      const everHadCxCa = formData.ever_had_cxca.value === \"Yes\";\n      const resultsAvailable = formData.results_available.value === \"Yes\";\n      return everHadCxCa && resultsAvailable;\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"reason_for_visit\",\n          helpText: \"Reason for visit\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Initial screening\",\n              value: \"Initial screening\",\n            },\n            {\n              label: \"Postponed treatmment\",\n              value: \"Postponed treatment\",\n            },\n            {\n              label: \"One year subsequent check-up after treatment\",\n              value: \"One year subsequent check-up after treatment\",\n            },\n            {\n              label: \"Subsequent screening\",\n              value: \"Subsequent screening\",\n            },\n            {\n              label: \"Problem visit after treatment\",\n              value: \"Problem visit after treatment\",\n            },\n            {\n              label: \"Referral\",\n              value: \"Referral\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for visit\", value.value)\n          })\n        },\n        {\n          id: \"hiv_status\",\n          helpText: \"HIV status\",\n          type: FieldType.TT_SELECT,\n          condition: () => this.showHIVQuestions,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Positive on ART\",\n              value: \"Positive on ART\",\n            },\n            {\n              label: \"Positive Not on ART\",\n              value: \"Positive Not on ART\",\n            },\n            {\n              label: \"Negative\",\n              value: \"Negative\",\n            },\n            {\n              label: \"Never tested\",\n              value: \"Never tested\",\n            },\n            {\n              label: \"Prefers Not to disclose\",\n              value: \"Undisclosed\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"HIV status\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"hiv_test_date\",\n            helpText: \"HIV test result date\",\n            required: true,\n            condition: (formData: any) =>\n              formData.hiv_status.value.match(/Negative|ART/i),\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            estimation: {\n              allowUnknown: false,\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"HIV test date\", date),\n              };\n            },\n          },\n          this.assessment.getDate()\n        ),\n        {\n          id: \"ever_had_cxca\",\n          helpText: \"Ever had CxCa screening\",\n          type: FieldType.TT_SELECT,\n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\",\n          options: () => this.yesNoOptions(),\n          validation: (val: any) => Validation.required(val),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Ever had CxCa\", value.value)\n          })\n        },\n        {\n          id: \"results_available\",\n          helpText: \"Results available?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          \n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\" && formData.ever_had_cxca.value !== \"No\",\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa test results\", value.value)\n          })\n        },\n        {\n          id: \"location\",\n          helpText: \"CxCa screening location\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (_: any, filter = \"\") => this.getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueText(\"Previous CxCa location\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"cxca_date\",\n            helpText: \"Previous CxCa test\",\n            required: true,\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            estimation: {\n              allowUnknown: false,\n            },\n            condition: (formData: any) => this.enterPreviousCxCaData(formData),\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"cxca test date\", date),\n              };\n            },\n          },\n          this.assessment.getDate()\n        ),\n        {\n          id: \"previous_screening_method\",\n          helpText: \"Previous screening method\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Previous CxCa screening method\", value.value)\n          })\n        },\n        {\n          id: \"offer_CxCa\",\n          helpText: \"Offer CxCa screening today\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Offer CxCa\", value.value)\n          })\n        },\n        {\n          id: \"screening_method\",\n          helpText: \"Screening method being offered\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"Yes\",\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa screening method\", value.value)\n          }),\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa screening\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"No\",\n          options: () => [\n            {\n              label: \"Client preferred counselling\",\n              value: \"Preferred counseling\",\n            },\n            {\n              label: \"Not applicable\",\n              value: \"Not applicable\",\n            },\n            {\n              label: \"Provider not available\",\n              value: \"Provider NOT available\",\n            },\n            {\n              label: \"Services not available\",\n              value: \"Services NOT available\",\n            },\n            {\n              label: \"Chemotherapy\",\n              value: \"Chemotherapy\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for NOT offering CxCa\", value.value)\n          }),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTest.vue?vue&type=template&id=00646839&ts=true\"\nimport script from \"./CxCaTest.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTest.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}