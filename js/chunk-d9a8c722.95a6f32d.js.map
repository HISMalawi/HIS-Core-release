{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/views/EncounterMixin.vue","webpack:///./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue"],"names":["RadiologyExaminationService","AppEncounterService","constructor","patientID","providerID","id","getJson","getPatientExaminations","createOrder","params","postJson","printExamination","accessionNumber","service","PrintoutService","printLbl","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","facts","ready","watch","handler","route","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","onFinishAction","onFinish","cancelDestinationPath","_","RadiologyInternalSectionService","Service","mixins","EncounterMixinVue","IonPage","examinationOptions","defaultExternalLocation","detailedExaminationOptions","listOfRadiologyTestsField","examinationField","detailedExaminationField","referralTypeField","internalReferralField","externalReferralField","payingField","paymentTypeField","receiptField","paymentAmountField","invoiceField","invoiceAmountField","getListOfRadiologyTests","concept_id","validateAmount","val","match","computedValues","createEncounter","saveObservationList","v","order","res","getEncounterID","accession_number","tests","selectedTest","helpText","type","FieldType","TT_SELECT","validation","Validation","required","computedValue","buildValueCoded","encounterID","beforeNext","async","getTestsOptions","selectedExamID","f","list_of_radiology_test","buildValueText","field","PersonFieldHelper","getFacilityLocationField","init","RADIOLOGY_GLOBAL_PROP","defaultReferralLocation","defaultValue","referral_type","referralSections","getInternalSections","s","config","showKeyboard","footerBtns","onClick","c","toastWarning","filtered","some","toLowerCase","alertConfirmation","createInternalSection","listData","paying","TT_TEXT","payment_type","TT_NUMBER","receipt_number","buildValueNumber","invoice_number","isCondition","ignored","undefined","prop","includes","every","Boolean","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info","GlobalPropertyService","DEFAULT_REFERRAL_LOCATION"],"mappings":"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","file":"js/chunk-d9a8c722.95a6f32d.js","sourcesContent":["import { GlobalPropertyService } from \"@/services/global_property_service\"\n\nexport enum RADIOLOGY_GLOBAL_PROP {\n    DEFAULT_REFERRAL_LOCATION = 'default.referral.location'\n}\n\nexport default {\n    defaultReferralLocation: () => GlobalPropertyService.get(RADIOLOGY_GLOBAL_PROP.DEFAULT_REFERRAL_LOCATION)\n}","\nimport { defineComponent } from 'vue'\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RadiologyExaminationService } from \"@/apps/RADIOLOGY/services/radiology_examination_service\";\nimport { RadiologyInternalSectionService } from \"@/apps/RADIOLOGY/services/radiology_internal_sections_service\";\nimport { isEmpty } from 'lodash';\nimport { alertConfirmation, toastDanger, toastWarning } from '@/utils/Alerts';\nimport PersonFieldHelper from '@/utils/HisFormHelpers/PersonFieldHelper';\nimport RADIOLOGY_GLOBAL_PROP from \"@/apps/RADIOLOGY/radiology_global_props\"\n;\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    components: {\n        IonPage,\n        HisStandardForm\n    },\n    data: () => ({\n        service: {} as any,\n        examinationOptions: [] as any,\n        defaultExternalLocation: '' as string,\n        detailedExaminationOptions: [] as any\n    }),\n    watch: {\n        ready: {\n            handler(ready: any) {\n                if (ready) {\n                    this.service = new RadiologyExaminationService(this.patientID, this.providerID)\n                    this.fields.push(this.listOfRadiologyTestsField())\n                    this.fields.push(this.examinationField())\n                    this.fields.push(this.detailedExaminationField())\n                    this.fields.push(this.referralTypeField())\n                    this.fields.push(this.internalReferralField())\n                    this.fields.push(this.externalReferralField())\n                    this.fields.push(this.payingField())\n                    this.fields.push(this.paymentTypeField())\n                    this.fields.push(this.receiptField())\n                    this.fields.push(this.paymentAmountField())\n                    this.fields.push(this.invoiceField())\n                    this.fields.push(this.invoiceAmountField())\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async getTestsOptions(id: string | number) {\n            return (await RadiologyExaminationService.getListOfRadiologyTests(id))\n                .map((e: any) => ({\n                    label: e.name,\n                    value: e.concept_id\n                }))\n        },\n        validateAmount(val: string) {\n            return val.match(/([0-9]+\\\\.[0-9])|Unknown$/i)\n                ? ['You must enter a decimal number']\n                : null\n        },\n        async onFinish(_: any, computedValues: any) {\n            await this.service.createEncounter()\n            await this.service.saveObservationList((await this.resolveObs(computedValues)))\n            for(const v of Object.values(computedValues) as any) {\n                if (typeof v.order === 'function') {\n                    const res = await this.service.createOrder(v.order(this.service.getEncounterID()))\n                    if (typeof res === 'object' && res.accession_number) {\n                        this.service.printExamination(res.accession_number)\n                    }\n                }\n            }\n            this.gotoPatientDashboard()\n        },\n        listOfRadiologyTestsField(): Field {\n            let tests = [] as any;\n            let selectedTest = -1 as number;\n            return {\n                id: \"list_of_radiology_test\",\n                helpText: \"Please select the type of examination\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('RADIOLOGY TEST', v.value),\n                        order: (encounterID: number) => {\n                            const data: any = {\n                                'encounter_id': encounterID,\n                                'concept_id': v.value\n                            } \n                            if (this.providerID != -1) {\n                                data['provider_id'] = this.providerID\n                            }\n                            return data\n                        }\n                    }\n                },\n                beforeNext: async (v: Option) => {\n                    if (selectedTest != v.value) {\n                        selectedTest = v.value as number\n                        this.examinationOptions = await this.getTestsOptions(v.value)\n                    }\n                    return true\n                },\n                options: async () => {\n                    if (isEmpty(tests)) {\n                        tests = await this.getTestsOptions('LIST OF RADIOLOGY TESTS')\n                    }\n                    return tests\n                }\n            }\n        },\n        examinationField() {\n            let selectedExamID = -1\n            return {\n                id: \"examination\",\n                helpText: \"Please select the examination\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('Examination', v.value)\n                    }\n                },\n                condition: () => !isEmpty(this.examinationOptions),\n                beforeNext: async (v: Option, f: any) => {\n                    if (selectedExamID != f.list_of_radiology_test.value) {\n                        selectedExamID = v.value as number\n                        this.detailedExaminationOptions = await this.getTestsOptions(selectedExamID)\n                    }\n                    return true\n                },\n                options:() => this.examinationOptions\n            }\n        },\n        detailedExaminationField() {\n            return {\n                id: \"detailed_examination\",\n                helpText: \"Please select the detailed examination\",\n                type: FieldType.TT_SELECT,\n                condition: () => !isEmpty(this.detailedExaminationOptions),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('Detailed examination', v.value),\n                    }\n                },\n            validation: (v: Option) => Validation.required(v),\n                options: () => this.detailedExaminationOptions\n            }\n        },\n        referralTypeField() {\n            return {\n                id: 'referral_type',\n                helpText: 'Please select the referral type',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('Source of referral', v.label)\n                    }\n                },\n                options: () => {\n                    return this.mapStrToOptions([\n                        'External', \n                        'Internal'\n                    ])\n                }\n            }\n        },\n        externalReferralField() {\n            const field: Field = PersonFieldHelper.getFacilityLocationField()\n            field.id = 'external_referral'\n            field.init = async () => {\n                this.defaultExternalLocation = await RADIOLOGY_GLOBAL_PROP.defaultReferralLocation()\n                return true\n            }\n            field.defaultValue = () => this.defaultExternalLocation\n            field.condition = (f: any) => f.referral_type.value === 'External'\n            field.computedValue = (v: Option) => {\n                return {\n                    obs: this.service.buildValueText('REFERRED FROM', v.label)\n                }\n            }\n            return field\n        },\n        internalReferralField() {\n            let referralSections = [] as Option[]\n            return {\n                id: \"referred_by\",\n                helpText: \"Referred from\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.referral_type.value === 'Internal',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('REFERRED FROM', v.label)\n                    }\n                },\n                options: async () => {\n                    if (isEmpty(referralSections)) {\n                        referralSections = (await RadiologyInternalSectionService.getInternalSections())\n                            .map((s: any) => ({\n                                value: s.id,\n                                label: `${s?.name}`.toUpperCase()\n                            }))\n                    }\n                    return referralSections\n                },\n                config: {\n                    showKeyboard: true,\n                    footerBtns: [\n                        {\n                            name: 'Add Referral',\n                            slot: 'end',\n                            color: 'success',\n                            onClick: async (f: any, c: any, field: any) => {\n                                if (typeof field.filter != 'string' || field.filter.length < 3) {\n                                    return toastWarning(`Please enter a valid name`)\n                                }\n                                if (field.filtered.some((i: Option) => i.label.toLowerCase() === field.filter.toLowerCase())) {\n                                    return toastWarning(`Can't add already existing referral location`)\n                                }\n                                if ((await alertConfirmation(`Do you want to add referral location?`))) {\n                                    const data = await RadiologyInternalSectionService.createInternalSection(field.filter.toUpperCase())\n                                    if (data) {\n                                        field.filter = data.name\n                                        field.listData = [{label: data.name, value: data.id}, ...field.listData]\n                                    } else {\n                                        toastDanger(`Unable to add ${field.filter}`)\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        },\n        payingField() {\n            return {\n                id: \"paying\",\n                helpText: \"Is this a paying patient?\",\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('PAYING', v.value) \n                    }\n                },\n                validation: (v: Option) => Validation.required(v),\n                options: () => {\n                    return this.yesNoOptions()\n                }\n            }\n        },\n        paymentTypeField() {\n            return {\n                id: \"payment_type\",\n                helpText: \"Select payment method\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.paying.value === 'Yes',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('PAYMENT TYPE', v.value)\n                    }\n                },\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Cash',\n                        'Invoice'\n                    ])\n                }\n            }\n        },\n        receiptField() {\n            return  {\n                id: \"receipt_number\",\n                helpText: \"Enter receipt number\",\n                type: FieldType.TT_TEXT,\n                condition: (f: any) => f.payment_type.value === 'Cash',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('RECEIPT NUMBER', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        },\n        invoiceField() {\n            return {\n                id: \"invoice_number\",\n                helpText: \"Enter invoice number\",\n                type: FieldType.TT_TEXT,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('INVOICE NUMBER', v.value)\n                    }\n                },\n                condition: (f: any) => f.payment_type.value === 'Invoice',\n                validation: (v: Option) => Validation.required(v)\n            }\n        },\n        paymentAmountField() {\n            return {\n                id: \"payment_amount\",\n                helpText: \"Enter payment amount\",\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.receipt_number.value,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueNumber('PAYMENT AMOUNT', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        },\n        invoiceAmountField() {\n            return {\n                id: \"invoice_amount\",\n                helpText: \"Enter invoice amount\",\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.invoice_number.value,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueNumber('INVOICE AMOUNT', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { render } from \"./RadiologyExaminations.vue?vue&type=template&id=1427137a&ts=true\"\nimport script from \"./RadiologyExaminations.vue?vue&type=script&lang=ts\"\nexport * from \"./RadiologyExaminations.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}