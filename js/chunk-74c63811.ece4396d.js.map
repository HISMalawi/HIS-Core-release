{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/LabActivities.vue?3d92","webpack:///./src/apps/ART/views/encounters/LabActivities.vue","webpack:///./src/apps/ART/views/encounters/LabActivities.vue?4393","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onOnFinish","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","fieldContext","watch","ready","handler","this","getFields","methods","nextTask","id","helpText","type","FieldType","TT_LAB_ORDERS","onload","options","OrderService","getOrdersIncludingGivenResultStatus","patientID","orders","VLOrders","formatLabs","label","value","other","values","config","printOrder","orderID","PatientPrintoutService","printLabOrderLbl","hiddenFooterBtns","footerBtns","name","size","slot","color","visible","onClick","isEmpty","launchOrderSelection","visibleOnStateChange","state","index","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","flowState","SET_PROVIDER","isBdeMode","isBDE","patient","providerID","facts","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","patientDashboardUrl","runflowState","states","split","username","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","finding","status","program","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","person","names","latestName","given_name","family_name","toOption","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","mapOptions","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","required","formData","computedData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-74c63811.ece4396d.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onOnFinish: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onOnFinish\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { isEmpty } from \"lodash\";\nimport { OrderService } from \"@/services/order_service\";\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    fields: [] as any,\n    fieldContext: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.fields = this.getFields() \n        }\n      }\n    }\n  },\n  methods: {\n    onFinish() {\n        this.nextTask()\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"patient_lab_orders\",\n          helpText: \"Lab orders\",\n          type: FieldType.TT_LAB_ORDERS,\n          onload: (fieldContext: any) => {\n            this.fieldContext = fieldContext\n          },\n          options: async () => {\n            const orders: any = await OrderService.getOrdersIncludingGivenResultStatus(this.patientID);\n            const VLOrders = OrderService.formatLabs(orders);\n            return [\n              {\n                label: \"Lab orders\",\n                value: \"order trail\",\n                other: {\n                  values: VLOrders,\n                }\n              }\n            ]\n          },\n          config: {\n            printOrder: (orderID: number) => {\n              return new PatientPrintoutService(this.patientID).printLabOrderLbl(orderID)\n            },\n            hiddenFooterBtns: [\"Clear\"],\n            footerBtns: [\n              {\n                name: \"Order\",\n                size: \"large\",\n                slot: \"end\",\n                color: \"primary\",\n                visible: true,\n                onClick: async () => {\n                  if (!isEmpty(this.fieldContext)) {\n                    await this.fieldContext.launchOrderSelection()\n                  }\n                },\n                visibleOnStateChange: (state: Record<string, any>) => {\n                  return state.index === 0;\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n});\n","import { render } from \"./LabActivities.vue?vue&type=template&id=129272ea&ts=true\"\nimport script from \"./LabActivities.vue?vue&type=script&lang=ts\"\nexport * from \"./LabActivities.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}