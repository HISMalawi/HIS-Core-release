{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/services/person_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","this","$emit","i","__exports__","mapToOption","listOptions","map","item","label","value","resolvePerson","computedForm","attr","values","isPlainObject","person","getGivenNameField","id","helpText","FieldType","TT_TEXT","computedValue","val","validation","Validation","isName","options","form","given_name","PersonService","searchGivenName","names","getFamilyNameField","family_name","searchFamilyName","getGenderField","TT_SELECT","getDobConfig","summaryLabel","minDate","HisDate","estimateDateFromAge","maxDate","getSessionDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","date","isEstimate","birthdate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","dynamicHelpText","f","home_region","match","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","slot","color","onClick","c","field","filter","length","toastWarning","isEmpty","filtered","alertConfirmation","ok","LocationService","createAddress","address","toUpperCase","getHomeTaField","config","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","defaultComputedOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","getCurrentDistrictField","current_region","getCurrentTAfield","current_district","getCurrentVillageField","current_traditional_authority","getCellNumberField","split","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","condition","v","getFacilityLocationField","_","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","Array","isArray","person_attributes","reduce","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","person_id","gender","birthdate_estimated","getPersonAttributeOptions","patient","Patientservice","prop","getPatientInfoString","getID","getNationalID","other","npid","show","Service","getProgramName","getYearField","showUnknown","primaryFunctions","push","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","getDefaultDate","datePart","defaultValue","year","month","day","d","toStandardHisDisplayFormat","validateMinMax","computed","min","Date","max","generateDateFields","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","datePartCondition","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","unload","toString","StandardValidations","isNaN","minYear","getYear","summaryMapValue","ref","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","every","ageEstimateRegex","dayjs","subtract","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD","postJson","putJson","getProgramID","personId","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","tag","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-625971b9.008e6956.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Gender',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => ([\n                {\n                    label: 'Female',\n                    value: 'F'\n                },\n                { \n                    label: 'Male',\n                    value: 'M'\n                }\n            ])\n        }\n    },\n    getDobConfig(): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: 'Birth',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'Home District',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            dynamicHelpText: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return 'Home Country'\n                }\n                return 'Home District'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'Home TA',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Home Village',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Current Region',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'Current District'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value)\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'Current TA',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Current Village',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Gender\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: Function;\n    required?: boolean;\n    defaultValue?: Function;\n    beforeNext?: Function;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: Function;\n    appearInSummary?: Function;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","import { Person } from \"@/interfaces/person\"\nimport { Service } from \"./service\"\n\nexport interface NewPerson {\n    person_id?: number;\n    given_name: string;\n    family_name: string;\n    gender: string;\n    birthdate: string;\n    birthdate_estimated: boolean;\n    home_district: string;\n    home_traditional_authority: string;\n    home_village: string;\n    current_district: string;\n    current_traditional_authority: string;\n    current_village: string;\n    landmark: string;\n    cell_phone_number: string;\n    occupation: string;\n    facility_name: string;\n    patient_type?: string;\n    relationship?: string;\n}\n\nexport class PersonService extends Service{\n    person: Person | NewPerson\n    constructor(person: NewPerson | Person){\n        super()\n        this.person = person\n    }\n\n    create() { return Service.postJson('/people', this.person) }\n\n    update(id: number) { return Service.putJson(`people/${id}`, {\n        ...this.person, 'program_id': Service.getProgramID()\n    })}\n\n    static searchFamilyName(name: string) {\n        return super.getJson('/search/family_name', {'search_string': name})\n    }\n\n    static searchGivenName(name: string) {\n        return super.getJson('/search/given_name', {'search_string': name})\n    }\n\n    static async getPersonFullName(personId: string | number) {\n        const names = await super.getJson(`/people/${personId}/names`)\n        return names && names.length ? names[0].given_name + ' ' + names[0].family_name : ''\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n"],"sourceRoot":""}