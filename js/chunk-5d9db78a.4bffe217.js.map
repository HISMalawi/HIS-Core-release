{"version":3,"sources":["webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/ANC/Services/anc_treatment_service.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ANC/Views/Encounters/TTV.vue?71e4","webpack:///./src/apps/ANC/Services/anc_dispensing_service.ts","webpack:///./src/apps/ANC/Views/Encounters/TTV.vue","webpack:///./src/apps/ANC/Views/Encounters/TTV.vue?e9c0"],"names":["DrugOrderService","Service","constructor","super","orders","this","postJson","getProgramID","dispensations","map","order","getSessionDate","patientID","getJson","pageSize","drugID","date","params","patientId","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","providerID","facts","age","gender","isEnrolledInProgam","formLabel","ready","created","$route","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","isOnline","isOfflineMode","getOfflinePerson","person","birthdate","dayjs","ProgramService","diff","saveObsOffline","encounterTypeID","formdata","obs","labOrders","status","observations","id","uploadStatus","meta","resolveObs","computedData","enc","AppEncounterService","createEncounter","saveObservationList","callback","test","error","Error","formData","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","toastDanger","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","DRUG_FREQUENCIES","AncTreatmentService","ttvDrugObj","dispensed","dispenseTTV","orderID","order_id","updateDispensationOrders","createOrders","getEncounterID","drugs","o","buildDrugOrderObj","dispensation","forEach","quantity","frequency","duration","drug_inventory_id","drug","Date","expiryDate","setDate","getDate","dose","dailyEquivalentDose","parseFloat","toStandardHisFormat","drug_name","units","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","formFields","_","AncDispensationService","saveNoDispensationObs","saveValueTextObs","IonPage","mixins","EncounterMixinVue","service","watch","handler","getFields","immediate","f","helpText","FieldType","TT_YES_NO","validation","computedValue","match","updateTTvOrder"],"mappings":"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","file":"js/chunk-5d9db78a.4bffe217.js","sourcesContent":["import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const { getOfflinePerson } = Offline()\n            const person = getOfflinePerson(this.offlineID)\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        saveObsOffline(encounterTypeID: number, formdata: any, obs: any, labOrders=undefined as any, status='Pending') {\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: encounterTypeID,\n                meta: formdata,\n                labOrders\n            })\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            try {\n                const enc = new AppEncounterService(\n                    this.patientID,\n                    params.encounterTypeID, \n                    this.providerID\n                )\n                if ((await enc.createEncounter())) {\n                    if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                        status = 'Success'\n                    }\n                }\n                if (typeof params.callback === 'function') {\n                    await params.callback(enc)\n                }\n            } catch (e) {\n                if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                    status = 'NetworkError'\n                } else {\n                    status = 'Exception'\n                }\n                console.error(`${e}`)\n            }\n            if (status === 'Exception') {\n                throw new Error('Unable to proceed!')\n            }\n            this.saveObsOffline(\n                params.encounterTypeID, \n                params.formData,\n                obs,\n                params.labOrders,\n                status\n            )\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { find, isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface AncTreatmentDrugObject {\n    'id': number;\n    'drug_name': string;\n    'dose': string;\n    'duration': number;\n    'frequency': string;\n    'units': string;\n}\n\nexport const DRUG_FREQUENCIES: Record<string, number> = { \n    'Once a day (OD)' : 1,\n    'Twice a day (BD)': 2,\n    'Three a day (TDS)': 3,\n    'Four times a day (QID)' : 4,\n    'Five times a day (5X/D)' : 5,\n    'Six times a day (Q4HRS)' : 6,\n    'In the morning (QAM)' : 0.5,\n    'Once a week (QWK)' : 0.14,\n    'Once a month' : 0.03,\n    'Twice a month' : 0.071\n}\n\nexport class AncTreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 25, providerID)\n    }\n\n    ttvDrugObj() {\n        return {\n            'drug_inventory_id': 609,\n            'dose': 0.5,\n            'equivalent_daily_dose': 0.5,\n            'frequency': \"Once a day (od)\",\n            'start_date': this.date,\n            'auto_expire_date': this.date,\n            'instructions': \"Once a day\",\n            'units': \"ml\"\n        }\n    }\n\n    async updateTTvOrder() {\n        const dispensed = await this.dispenseTTV()\n        if (!isEmpty(dispensed)) {\n            const orderID = dispensed[0].order_id\n            return DrugOrderService.updateDispensationOrders([{'order_id': orderID, 'quantity' : 1}])\n        }\n        throw 'Unable to dispense'\n    }\n\n    dispenseTTV() {\n        return this.createOrders([this.ttvDrugObj()])\n    }\n\n    createOrders(orders: any) {\n        return DrugOrderService.create({\n            'drug_orders': orders,\n            'encounter_id': this.getEncounterID(),\n        })\n    }\n\n    async submitTreatment(drugs: AncTreatmentDrugObject[]) {\n        await this.createEncounter()\n        const orders = await this.createOrders(drugs.map(o => this.buildDrugOrderObj(o)))\n        const dispensation = new AppEncounterService(this.patientID, 54, this.providerID)\n        await dispensation.createEncounter()\n        drugs.forEach(o => {\n            const quantity: number = DRUG_FREQUENCIES[o.frequency] * o.duration\n            orders.forEach((order: any) => { \n                if (order.drug_inventory_id === o.id) {\n                    order.quantity = quantity\n                }\n            })\n        })\n        await DrugOrderService.updateDispensationOrders(orders)\n    }\n\n    buildDrugOrderObj(drug: AncTreatmentDrugObject) {\n        const startDate = new Date(this.date)\n        const expiryDate = startDate.setDate(startDate.getDate() + parseInt(`${drug.duration}`))\n        const dose: any = drug.dose || DRUG_FREQUENCIES[drug.frequency]\n        const dailyEquivalentDose =  parseFloat(dose) * DRUG_FREQUENCIES[drug.frequency] \n        return {\n            'drug_inventory_id': drug.id,\n            'dose': dose,\n            'equivalent_daily_dose': dailyEquivalentDose,\n            'frequency': drug.frequency,\n            'start_date': this.date,\n            'auto_expire_date': HisDate.toStandardHisFormat(new Date(expiryDate)),\n            'instructions': drug.drug_name + ':' + drug.dose + ' ' + drug.units + ' ' + drug.frequency + 'days',\n            'units': drug.units\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\n\nexport class AncDispensationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 54, providerID)\n    }\n\n    saveNoDispensationObs() {\n        return this.saveValueTextObs(\n            'Tetanus toxoid vaccine', 'Not dispensed'\n        )\n    }\n\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncDispensationService} from \"@/apps/ANC/Services/anc_dispensing_service\"\nimport { AncTreatmentService } from \"@/apps/ANC/Services/anc_treatment_service\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.formFields = this.getFields()\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      await computedData['prescription'].action()\n      this.nextTask()\n    },\n    getFields() {\n      return [\n        {\n          id: 'prescription',\n          helpText: 'Prescription',\n          type: FieldType.TT_YES_NO,\n          validation: (v: string) => !v ?  ['Value is required'] : null,\n          computedValue: (v: string) => {\n            if (v.match(/true/i)) {\n              return {\n                action: async () => {\n                  const service = new AncTreatmentService(this.patientID, this.providerID)\n                  await service.createEncounter()\n                  await service.updateTTvOrder()\n                }\n              }\n            }\n            return {\n              action: async () => {\n                const service = new AncDispensationService(this.patientID, this.providerID)\n                await service.createEncounter()\n                await service.saveNoDispensationObs()\n              }\n            }\n          },\n          options: () => ([\n            {\n              label: 'TTV has been given today',\n              values: [\n                {\n                  label: \"yes\",\n                  value: \"true\"\n                },\n                {\n                  label: \"no\",\n                  value: \"false\"\n                }\n              ]\n            }\n          ])\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./TTV.vue?vue&type=template&id=4420df94&ts=true\"\nimport script from \"./TTV.vue?vue&type=script&lang=ts\"\nexport * from \"./TTV.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}