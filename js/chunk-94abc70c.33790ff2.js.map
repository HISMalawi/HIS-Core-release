{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/encounters/Vitals.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","activeField","onOnskip","$event","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","app","HisApp","getActiveApp","age","gender","hasBPinfo","finalHeightValue","recentHeight","recentHeightObsID","HTNEnabled","optionWhiteList","hasHTNObs","vitals","weightForHeight","medianWeightandHeight","canEditHeight","watch","ready","handler","this","init","immediate","methods","VitalsService","patientID","providerID","patient","getAge","getGender","getFields","getOptions","options","label","value","other","modifier","icon","required","visible","isEmpty","filter","o","includes","map","canCheckWeightHeight","canCheckBp","formData","encounter","createEncounter","toastWarning","obs","buildObs","observations","saveObservationList","toastSuccess","nextTask","mapObs","sanitizeVitals","element","e","on_htn_medication","buildValueText","push","splitBP","p","forEach","split","bpSystolic","bpDiastolic","getBMI","weight","getVal","height","currentWeightPercentile","parseFloat","toFixed","currentHeightPercentile","currentHeightRounded","Math","floor","medianWeightHeight","weightForHeightPercentile","isNaN","BMI","BMIService","calculateBMI","val","key","j","async","buildValueNumber","Promise","all","validateVitals","l","checkRequiredVitals","length","v","validateAll","concat","id","helpText","type","FieldType","TT_SELECT","applicationName","Store","get","getAll","then","validation","Validation","condition","TT_VITALS_ENTRY","$route","query","vital_options","lastHeight","getRecentHeightObs","patientAgeAtPrevRecordedHeight","dayjs","diff","getBirthdate","getMedianWeightHeight","ProgramService","getWeightForHeightValues","beforeNext","heightOption","find","enteredHeight","parseInt","prevHeight","prevHeightBtnTxt","newHeightBtnTxt","action","infoActionSheet","name","slot","color","alertConfirmation","voidObs","config","hiddenFooterBtns","onUpdateAlertStatus","weightOption","params","status","index","result","onChangeOption","activeItem","errs","validator","__exports__","AppEncounterService","constructor","super","isNotEmptyandNumber","vital","match","isNotEmptyandFloat","checkMinMax","min","max","isArray","mergeErrors","errors","holder","isValidBPReading","isValidBP","values","emptyErrors","minErrors"],"mappings":"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","file":"js/chunk-94abc70c.33790ff2.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onOnskip: _cache[1] || (_cache[1] = $event => (_ctx.activeField = '')),\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { VitalsService } from \"@/apps/ART/services/vitals_service\";\nimport { alertConfirmation, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { BMIService } from \"@/services/bmi_service\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { find, isEmpty } from \"lodash\";\nimport HisApp from \"@/apps/app_lib\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport dayjs from \"dayjs\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    app: HisApp.getActiveApp() as any,\n    activeField: \"\",\n    age: null as any,\n    gender: null as any,\n    hasBPinfo: false,\n    finalHeightValue: null as number | null,\n    recentHeight: null,\n    recentHeightObsID: -1,\n    HTNEnabled: false,\n    optionWhiteList: [] as string[],\n    hasHTNObs: false,\n    vitals: {} as any,\n    weightForHeight: {} as any,\n    medianWeightandHeight: {} as any,\n    canEditHeight: false as boolean\n  }),\n  watch: {\n    ready: {\n      handler(ready) {\n        if (ready) this.init()\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    init() {\n      this.vitals = new VitalsService(this.patientID, this.providerID);\n      this.age = this.patient.getAge();\n      this.gender = this.patient.getGender();\n      this.fields = this.getFields();\n    },\n    getOptions() {\n      const recentHeight = this.recentHeight && this.age > 18 ? this.recentHeight : \"\";\n      const options = [\n        {\n          label: \"Weight\",\n          value: \"\",\n          other: {\n            modifier: \"KG\",\n            icon: \"weight\",\n            required: true,\n          },\n        },\n        {\n          label: \"Height\",\n          value: `${recentHeight}`,\n          other: {\n            modifier: \"CM\",\n            icon: \"height\",\n            recentHeight: this.recentHeight,\n            visible: this.canEditHeight,\n            required: this.canEditHeight\n          },\n        },\n        { label: \"BP\", value: \"\", other: { modifier: \"mmHG\", icon: \"bp\" } },\n        {\n          label: \"Temp\",\n          value: \"\",\n          other: { modifier: \"°C\", icon: \"temp\" },\n        },\n        {\n          label: \"SP02\",\n          value: \"\",\n          other: { modifier: \"%\", icon: \"spo2\" },\n        },\n        {\n          label: \"Pulse\",\n          value: \"\",\n          other: { modifier: \"BPM\", icon: \"pulse-rate\" },\n        },\n        {\n          label: \"Age\",\n          value: this.age,\n          other: { modifier: \"Years old\", icon: \"\", visible: false },\n        }\n      ]\n\n      if (!isEmpty(this.optionWhiteList)) {\n        return options.filter((o: any) => this.optionWhiteList.includes(o.label))\n          .map((o: any) => {\n            o.other.required = true\n            return o\n          })\n      }\n      return options\n    },\n    canCheckWeightHeight() {\n      return isEmpty(this.optionWhiteList) || this.optionWhiteList.includes('Height') \n        && this.optionWhiteList.includes('Weight')\n    },\n    canCheckBp() {\n      return isEmpty(this.optionWhiteList) || this.optionWhiteList.includes('BP')\n    },\n    async onFinish(formData: any) {\n      const encounter = await this.vitals.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create treatment encounter\");\n\n      const obs = await this.buildObs(formData);\n      const observations = await this.vitals.saveObservationList(obs);\n\n      if (!observations) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      this.nextTask();\n    },\n    async buildObs(formData: any) {\n      const observations: any = await this.mapObs(\n        this.sanitizeVitals(formData.vitals).filter(\n          (element) => element.label !== \"BP\"\n        ).map((e: any) => {\n          if (e.label === 'Height' && e.other.visible && this.finalHeightValue) {\n            e.value = this.finalHeightValue\n          }\n          return e\n        })\n      );\n      if (this.HTNEnabled && !this.hasHTNObs && formData.on_htn_medication) {\n        const obs = await this.vitals.buildValueText(\n          \"Treatment status\",\n          formData.on_htn_medication.value\n        );\n        observations.push(obs);\n      }\n      return observations;\n    },\n    splitBP(formData: Option[]) {\n      const p: Option[] = [];\n      formData.forEach((element) => {\n        if (element.label === \"BP\") {\n          const value = `${element.value}`.split(\"/\");\n          const bpSystolic = value[0];\n          const bpDiastolic = value[1];\n\n          p.push({ label: \"Systolic\", value: bpSystolic });\n          p.push({ label: \"Diastolic\", value: bpDiastolic });\n        }\n      });\n      return p;\n    },\n    getBMI(formData: Option[]) {\n      const weight = this.getVal(formData, \"Weight\");\n      const height = this.getVal(formData, \"Height\");\n      const obs: any = [];\n      if (this.age <= 14) {\n        const currentWeightPercentile = (\n          (weight / parseFloat(this.medianWeightandHeight[\"weight\"])) *\n          100\n        ).toFixed(0);\n        const currentHeightPercentile = (\n          (height / parseFloat(this.medianWeightandHeight[\"height\"])) *\n          100\n        ).toFixed(0);\n        const currentHeightRounded =\n          (height % Math.floor(height) < 0.5 ? 0 : 0.5) + Math.floor(height);\n        const medianWeightHeight =\n          this.weightForHeight[currentHeightRounded.toFixed(1)];\n        const weightForHeightPercentile = (\n          (weight / medianWeightHeight) *\n          100\n        ).toFixed(0);\n        if(!isNaN(parseFloat(weightForHeightPercentile))) {\n          obs.push({\n            label: \"Weight for height percent of median\",\n            value: weightForHeightPercentile,\n          });\n        }\n        obs.push({\n          label: \"Weight for age percent of median\",\n          value: currentWeightPercentile,\n        });\n        obs.push({\n          label: \"Height for age percent of median\",\n          value: currentHeightPercentile,\n        });\n      } else {\n        const BMI = BMIService.calculateBMI(weight, height);\n        obs.push({ label: \"BMI\", value: BMI });\n      }\n      return obs;\n    },\n    getVal(formData: Option[], val: string): number {\n      const value = formData.filter((key: any) => key.label === val);\n      return value[0].value === \"\" ? 0 : parseFloat(`${value[0].value}`);\n    },\n    async mapObs(vitals: any) {\n      const j = vitals.map(async (element: any) => {\n        const obs = await this.vitals.buildValueNumber(\n          element.label,\n          element.value\n        );\n        return obs;\n      });\n      return Promise.all(j);\n    },\n    validateVitals(vitals: any) {\n      const l = this.checkRequiredVitals(vitals);\n      if (l.length > 0) {\n        return l.map((val) => {\n          return [`${val.label} can not be empty`];\n        });\n      }\n      const v = this.sanitizeVitals(vitals);\n      return this.vitals.validateAll(v);\n    },\n    sanitizeVitals(vitals: Array<Option>) {\n      let p = vitals.filter((element) => {\n        if (element.label === \"Height\" && element.other.required == false) {\n          return false;\n        }\n        return element.value !== \"\" && element.label !== \"Age\";\n      })\n      if (this.canCheckBp()) {\n        p = p.concat(this.splitBP(p))\n      }\n      if (this.canCheckWeightHeight()){\n        p = p.concat(this.getBMI(vitals))\n      }\n      return p\n    },\n    checkRequiredVitals(vitals: Array<Option>) {\n      return vitals.filter((element) => {\n        return element.value === \"\" && element.other.required === true;\n      });\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"on_htn_medication\",\n          helpText: \"Already taking drugs for blood pressure?\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            if (this.app?.applicationName === 'ART') {\n              this.HTNEnabled = await Store.get('IS_ART_HTN_ENABLED')\n              if (this.HTNEnabled) {\n                await VitalsService.getAll(this.patientID, \"Treatment status\").then(\n                  (data: any) => {\n                    this.hasHTNObs = data && data.length > 0;\n                  }\n                )\n              }\n            }\n            return true\n          },\n          validation: (val: any) => Validation.required(val),\n          condition: () => {\n            return this.HTNEnabled && !this.hasHTNObs;\n          },\n          options: () => [\n            {\n              label: \"Yes\",\n              value: \"BP Drugs started\",\n            },\n            {\n              label: \"No\",\n              value: \"Not on BP Drugs\",\n            },\n          ],\n        },\n        {\n          id: \"vitals\",\n          helpText: \"Vitals entry\",\n          type: FieldType.TT_VITALS_ENTRY,\n          init: async () => {\n            const optionWhiteList = this.$route.query.vital_options as string\n            if (optionWhiteList) this.optionWhiteList = optionWhiteList.split(',')\n            if (this.canCheckWeightHeight()) {\n              const lastHeight = await this.patient.getRecentHeightObs();\n              if (!isEmpty(lastHeight)) {\n                const patientAgeAtPrevRecordedHeight = dayjs(lastHeight['obs_datetime'])\n                  .diff(this.patient.getBirthdate(), 'year')\n                this.recentHeight = lastHeight['value_numeric'];\n                this.recentHeightObsID = lastHeight['obs_id'];\n                /**\n                 * For a scenario where a patient's height was last updated when they were a minor\n                 * and they return as an adult, provide an option to update their height.\n                 */\n                this.canEditHeight = patientAgeAtPrevRecordedHeight < 18 || this.age < 18\n              } else {\n                this.canEditHeight = true\n              }\n              if (this.age <= 14) {\n                this.medianWeightandHeight = await this.patient.getMedianWeightHeight();\n                this.weightForHeight = await ProgramService.getWeightForHeightValues();\n              }\n            }\n            return true\n          },\n          validation: (value: any) => this.validateVitals(value),\n          beforeNext: async (val: Option[]) => {\n            const heightOption = find(val, { label: \"Height\" });\n            if (heightOption && this.recentHeight && heightOption.other.visible) {\n              const enteredHeight = parseInt(`${heightOption.value || 0}`);\n              const prevHeight = parseInt(`${this.recentHeight || 0}`);\n\n              /** Warn if inconsistent height is detected */\n              if (enteredHeight < prevHeight) {\n                const prevHeightBtnTxt = `Use ${prevHeight} CM`\n                const newHeightBtnTxt = `Use ${enteredHeight} CM`\n                const action = await infoActionSheet(\n                  `Previous Height \"${prevHeight} CM\"`,\n                  `Current Height \"${enteredHeight} CM\"`,\n                  `Inconsistent Height Reading (Height can not be lower than previous height of \" ${this.recentHeight} \"CM. Please SELECT the correct height.)`,\n                  [\n                    {\n                      name: prevHeightBtnTxt,\n                      slot: 'start',\n                      color: 'success'\n                    },\n                    {\n                      name: newHeightBtnTxt,\n                      slot: 'end',\n                      color: 'danger'\n                    }\n                  ]\n                )\n                if (action === newHeightBtnTxt && this.recentHeightObsID) {\n                  if ((await alertConfirmation(\n                    `Do you want to void height observation for ${prevHeight}`\n                  ))) {\n                    await VitalsService.voidObs(this.recentHeightObsID)\n                  }\n                } else {\n                  this.finalHeightValue = prevHeight\n                }\n              }\n            }\n            return true\n          },\n          config: {\n            hiddenFooterBtns : [\n              'Clear'\n            ],\n            onUpdateAlertStatus: async (params: Option[]) => {\n              const weightOption = find(params, { label: 'Weight'})\n              const heightOption = find(params, { label: 'Height'})\n\n              if (!(weightOption && heightOption)) return\n\n              const weight = parseFloat(weightOption.value as string)\n              const height = parseFloat(heightOption.value as string)\n\n              if (weight <= 0 || height <=0) return { \n                label: 'BMI',\n                value: 'N/A',\n                color: '', \n                status: ''\n              }\n\n              const BMI = await BMIService.getBMI(weight, height, this.gender, this.age);\n\n              return {\n                label: 'BMI',\n                value: BMI.index,\n                color: BMI.color, \n                status: BMI.result\n              }\n            },\n            onChangeOption: (activeItem: any) => {\n              if (!activeItem.value && activeItem.other.required) {\n                throw `Value for ${activeItem.label} is required`\n              }else if (activeItem.value) {\n                const errs = this.vitals.validator(activeItem)\n                if(errs && errs.length) throw errs\n              }\n            }\n          },\n          options: () => this.getOptions(),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./Vitals.vue?vue&type=template&id=1f7554f1&ts=true\"\nimport script from \"./Vitals.vue?vue&type=script&lang=ts\"\nexport * from \"./Vitals.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { isArray } from \"lodash\";\nimport { Option } from '@/components/Forms/FieldInterface';\nexport class VitalsService extends AppEncounterService{\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 6, providerID);\n  }\n  isNotEmptyandNumber(vital: Option) {\n    return `${vital.value}`.match(/^-?\\d+\\.?\\d*$/) ? null : [`Invalid entry for ${vital.label}`]\n  }\n  isNotEmptyandFloat(vital: Option) {\n    return `${vital.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/) \n      ? null \n      : [`Invalid entry for ${vital.label}. Don't forget to add a decimal. e.g. 56.2 ${vital.other.modifier}`]\n  }\n  checkMinMax(val: Option, min: number, max: number) {\n    const p = [];\n    if (parseFloat(`${val.value}`) < min) {\n      p.push([`${val.label} entered is less than minimum ${min} ${val?.other?.modifier || ''}`])\n    }\n    if (parseFloat(`${val.value}`) > max) {\n      p.push([`${val.label} entered is greater than maximum ${max} ${val?.other?.modifier || ''}`])\n    }\n    return p.length > 0 ? p : null;\n  }\n  validateAll(vitals: Option[]) {\n    const p: any = [];\n    vitals.map((vital: any) => {\n      const j = this.validator(vital);\n      return isArray(j) ? p.push(j) : null\n    })\n    return p.length > 0 ? p : null;\n  }\n\n  mergeErrors(errors: any[]) {\n    const holder: any = [];\n    errors.forEach(element => {\n      if (isArray(element)) {\n        holder.push(element)\n      }\n    });\n    return holder.length > 0 ? holder : null\n  }\n  isValidBPReading(vital: any) {\n    const p = [];\n    const isValidBP =  `${vital.value}`.match(/^\\d{1,3}\\/\\d{1,3}$/g) ? null : ['Invalid BP reading']\n    p.push(isValidBP);\n    if(isValidBP == null) {\n      const value = `${vital.value}`.split('/');\n      \n      const bpSystolic = {\n        label: 'Systolic',\n        value: value[0]\n      };\n      const bpDiastolic = {\n        label: 'Diastolic',\n        value: value[1]\n      };\n      p.push(this.checkMinMax(bpDiastolic, 30, 200))\n      p.push(this.checkMinMax(bpSystolic, 40, 250))\n    }\n    return this.mergeErrors(p)\n  }\n  validator(vital: Option) {\n    const values = [\n      {\n        name: \"Weight\",\n        validator: (val: Option) => {\n          const emptyErrors = this.isNotEmptyandFloat(val);\n          const minErrors = this.checkMinMax(val, 2.0, 250.0);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      },\n      {\n        name: \"Height\",\n        validator: (val: Option) => {\n          const errors = []\n          errors.push(this.isNotEmptyandNumber(val))\n          errors.push(this.checkMinMax(val, 40, 220))\n          return this.mergeErrors(errors); \n        },\n      }, {\n        name: \"BP\",\n        validator: (val: any) => {\n          return this.isValidBPReading(val)\n        },\n      }, {\n        name: \"Temp\",\n        validator: (val: any) => {\n          const emptyErrors = this.isNotEmptyandNumber(val);\n          const minErrors = this.checkMinMax(val, 30, 42);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      }, {\n        name: \"SP02\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 40, 100);\n          return this.mergeErrors([minErrors]); \n        },\n      }, {\n        name: \"Pulse\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 50, 120);\n          return this.mergeErrors([minErrors]); \n        },\n      }\n    ]\n    const v = values.filter(element => {\n      return element.name === vital.label;\n    });\n    if (v.length > 0) {\n      return v[0].validator(vital);\n    }\n    return null\n  }\n}"],"sourceRoot":""}