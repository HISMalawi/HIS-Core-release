{"version":3,"sources":["webpack:///./src/apps/HTS/services/hts_items_given.ts","webpack:///./src/apps/HTS/views/encounters/HtsItemsGivenToClient.vue?be4b","webpack:///./src/apps/HTS/views/encounters/HtsItemsGivenToClient.vue","webpack:///./src/apps/HTS/views/encounters/HtsItemsGivenToClient.vue?a27a","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts"],"names":["HtsItemsGivenService","AppEncounterService","constructor","patientID","providerID","super","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","itemsGivenToClientField","itemsGivenHiddenField","selfTestsGivenToClientField","hivTestKitDetailsField","immediate","methods","computedData","createEncounter","saveObservationList","resolveObs","nextTask","getSelfKitCount","f","items_given_to_client","Array","isArray","find","label","value","id","helpText","type","FieldType","TT_ADHERENCE_INPUT","isRequired","appearInSummary","beforeNext","async","v","every","d","alertConfirmation","validation","maxSelfKits","some","test","options","isEmpty","items_given_to_client_selection","config","noFloat","titles","TT_HIDDEN","summaryMapValue","defaultValue","filter","finalComputedValue","obs","map","buildValueNumber","parseInt","buildValueCoded","SESSION_KIT_NAMES","SESSION_KIT_ID","kitHistory","JSON","parse","sessionStorage","getItem","kitOptions","getSessionKitValue","TT_INPUT_ARRAY","columns","other","incomplete","x","condition","setItem","stringify","kitName","kitLot","kitExpiry","parentObs","childObs","l","child","Promise","all","test_kit","kitNameOption","buildValueText","onclick","val","keyboard","TT_TEXT","uniqBy","kitLotNoOption","numericKeypad","kitExpiryDateOption","buildValueDate","TT_FULL_DATE","Date","date","toDate","someIncomplete","count","length","userOptionField","rows","index","i","listData","otherRows","push","selectionList","selection","forEach","r","selfOptionDefaultValue","selfOptionDisabledValue","disabled","otherOptionDefaultValue","otherOptionDisabledValue","title","preset","size","genderOptionField","patient","getGender","ageOptionField","getAge","age","toastWarning","strictNumbers","customKeyboard","approachOptionField","kits","generateRows","from","self_test_kits","slice","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","facts","isEnrolledInProgam","route","params","patient_id","toUpperCase","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","username","split","provider","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","p","person","names","latestName","given_name","family_name","toOption","mapStrToOptions","items","path","loadingController","create","backdropDismiss","message","present","getTop","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","reduce","accum","cur","concat","inArray","arr","expression","validateSeries","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","formData","$emit","isCondition","ignored","undefined","prop","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","description","text","info"],"mappings":"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","file":"js/chunk-2cfff014.4fc448d6.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsItemsGivenService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 196, providerID)\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Items Given\",\n        fields: _ctx.fields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { HtsItemsGivenService } from \"../../services/hts_items_given\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport keyboard, { numericKeypad, selectionList } from \"@/utils/PopupKeyboard\";\nimport { find, isEmpty, uniqBy } from \"lodash\";\nimport { alertConfirmation, toastWarning } from \"@/utils/Alerts\";\nimport { toDate } from \"@/utils/Strs\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsItemsGivenService,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsItemsGivenService(\n            this.patientID,\n            this.providerID\n          );\n          this.fields = [\n            this.itemsGivenToClientField(),\n            this.itemsGivenHiddenField(),\n            this.selfTestsGivenToClientField(),\n            this.hivTestKitDetailsField(),\n          ];\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      await this.service.createEncounter();\n      await this.service.saveObservationList(\n        (await this.resolveObs(computedData)) as any\n      );\n      this.nextTask();\n    },\n    getSelfKitCount(f: Record<string, any>) {\n      if (f.items_given_to_client && Array.isArray(f.items_given_to_client)) {\n        return find(f.items_given_to_client, { label: \"Self-Test Kit\" })?.value;\n      }\n      return 0;\n    },\n    itemsGivenToClientField(): Field {\n      return {\n        id: \"items_given_to_client_selection\",\n        helpText: \"Items given to the client\",\n        type: FieldType.TT_ADHERENCE_INPUT,\n        isRequired: () => true,\n        appearInSummary: () => false,\n        beforeNext: async (v: Option[]) => {\n          if (v.every((d) => d.value <= 0)) {\n            if (\n              !(await alertConfirmation(\n                \"Do you want to proceed client without items given?\"\n              ))\n            ) {\n              return false;\n            }\n          }\n          return true;\n        },\n        validation: (v: Option[]) => {\n          const maxSelfKits = 4;\n          if (\n            v.some((d) => /self-test/i.test(d.label) && d.value > maxSelfKits)\n          ) {\n            return [\n              `Cannot distribute more than ${maxSelfKits} Self-test kits. Please adjust the number accordingly`,\n            ];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          if (!isEmpty(f.items_given_to_client_selection)) {\n            return f.items_given_to_client_selection;\n          }\n          return [\n            { label: \"Self-Test Kit\", value: \"\" },\n            { label: \"Male condoms\", value: \"\" },\n            { label: \"Female condoms\", value: \"\" },\n            { label: \"FRS\", value: \"\" },\n          ] as Option[];\n        },\n        config: {\n          noFloat: true,\n          titles: {\n            label: \"Item\",\n            value: \"Quantity\",\n          },\n        },\n      };\n    },\n    itemsGivenHiddenField(): Field {\n      return {\n        id: \"items_given_to_client\",\n        helpText: \"Items given\",\n        type: FieldType.TT_HIDDEN,\n        summaryMapValue: (v: Option) => {\n          return {\n            label: `${v.label} given`,\n            value: v.value,\n          };\n        },\n        defaultValue: (f: Record<string, Option[]>) => {\n          if (f.items_given_to_client_selection.every((d) => d.value <= 0)) {\n            return {\n              label: \"No items\",\n              value: \"Yes\",\n            };\n          }\n          return f.items_given_to_client_selection.filter((d) => d.value > 0);\n        },\n        finalComputedValue: (v: Option[] | Option) => {\n          if (Array.isArray(v)) {\n            return {\n              obs: v.map((d: Option) =>\n                this.service.buildValueNumber(d.label, parseInt(`${d.value}`))\n              ),\n            };\n          }\n          return {\n            obs: this.service.buildValueCoded(\"None\", \"Yes\"),\n          };\n        },\n      };\n    },\n    hivTestKitDetailsField(): Field {\n      const SESSION_KIT_NAMES = \"htsSelfKitNames\";\n      const SESSION_KIT_ID = \"htsSelfTestKitData\";\n      const kitHistory = JSON.parse(\n        sessionStorage.getItem(SESSION_KIT_ID) || \"{}\"\n      );\n      let kitOptions: Option[] | [] = JSON.parse(\n        sessionStorage.getItem(SESSION_KIT_NAMES) || \"[]\"\n      );\n      const getSessionKitValue = (id: string) => kitHistory[id] || \"\";\n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v?.other?.fields,\n        validation: (v: Option[]) => {\n          const incomplete = v\n            .map((d: Option) => d.other.fields)\n            .some((d: Option[]) => d.some((x: Option) => x.value === \"\"));\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        condition: (f: any) =>\n          f.items_given_to_client_selection.some(\n            (v: Option) => /Self/i.test(v.label) && v.value != \"\"\n          ),\n        finalComputedValue: (v: Option[]) => {\n          const data = v.map((d) => d.other.fields);\n          // Cache stuff in session storage taking advantage when creating computed values\n          sessionStorage.setItem(SESSION_KIT_NAMES, JSON.stringify(kitOptions));\n          sessionStorage.setItem(\n            SESSION_KIT_ID,\n            JSON.stringify({\n              kitName: find(data[0], { label: \"Kit Name\" })?.value,\n              kitLot: find(data[0], { label: \"Kit Lot No.\" })?.value,\n              kitExpiry: find(data[0], { label: \"Kit Expiry Date\" })?.value,\n            })\n          );\n          return {\n            obs: data.map(async (options: Option[]) => {\n              const [parentObs, ...childObs] = options\n                .filter((l: Option) => typeof l.other.obs === \"function\")\n                .map((d: Option) => d.other.obs(d));\n              return {\n                ...(await parentObs),\n                child: await Promise.all(childObs),\n              };\n            }),\n          };\n        },\n        options: (f: any) => {\n          if (f.test_kit != null) return f.test_kit;\n          const kitNameOption = () => ({\n            label: \"Kit Name\",\n            value: getSessionKitValue(\"kitName\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueText(\"Kit name\", v.value as string),\n              onclick: (val: Option) => {\n                keyboard(\n                  {\n                    id: \"name\",\n                    helpText: \"Kit Name\",\n                    type: FieldType.TT_TEXT,\n                    isRequired: () => true,\n                    options: () => kitOptions,\n                  },\n                  (v: Option) => {\n                    val.value = v.value;\n                    kitOptions = uniqBy([v, ...kitOptions], \"label\");\n                  }\n                );\n              },\n            },\n          });\n          const kitLotNoOption = () => ({\n            label: \"Kit Lot No.\",\n            value: getSessionKitValue(\"kitLot\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueNumber(\n                  \"Kit lot number\",\n                  v.value as number\n                ),\n              onclick: (val: Option) => {\n                numericKeypad((v: number) => (val.value = v));\n              },\n            },\n          });\n          const kitExpiryDateOption = () => ({\n            label: \"Kit Expiry Date\",\n            value: getSessionKitValue(\"kitExpiry\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueDate(\n                  \"kit expiry date\",\n                  v.value as string\n                ),\n              onclick: (val: Option) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(this.service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(this.service.date),\n                        ];\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => (val.value = v.value)\n                );\n              },\n            },\n          });\n          return [\n            {\n              label: \"\",\n              value: \"\",\n              other: {\n                fields: [\n                  kitNameOption(),\n                  kitLotNoOption(),\n                  kitExpiryDateOption(),\n                ],\n              },\n            },\n          ];\n        },\n      };\n    },\n    selfTestsGivenToClientField(): Field {\n      return {\n        id: \"self_test_kits\",\n        helpText: \"Self-test kit users\",\n        type: FieldType.TT_INPUT_ARRAY,\n        isRequired: () => true,\n        condition: (f: any) =>\n          f.items_given_to_client.some(\n            (d: Option) => /self-test/i.test(d.label) && d.value > 0\n          ),\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d.value));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        summaryMapValue: (v: Option) => v.other.fields,\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 4;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        config: {\n          columns: [\n            { label: \"End-User\" },\n            { label: \"Gender\" },\n            { label: \"Age\" },\n            { label: \"Approach\" },\n          ],\n        },\n        options: (f: any) => {\n          const userOptionField = () => ({\n            label: \"User\",\n            value: \"\",\n            other: {\n              obs: (v: string) =>\n                this.service.buildValueCoded(\"Self-test end user\", v),\n              onclick: (\n                val: Option,\n                rows: Option[],\n                index: number,\n                i: number,\n                listData: Option[]\n              ) => {\n                const otherRows = listData.filter((_: any, i) => i != index);\n                const options = [];\n                if (!/Self/.test(JSON.stringify(otherRows)))\n                  options.push(\"Self\");\n                selectionList(\n                  [...options, \"Sexual partner\", \"Other\"],\n                  (selection: string) => {\n                    if (selection === \"Self\")\n                      rows.forEach((r) => {\n                        typeof r.other.selfOptionDefaultValue === \"function\"\n                          ? (r.value = r.other.selfOptionDefaultValue())\n                          : (r.value = \"\");\n                        typeof r.other.selfOptionDisabledValue === \"function\"\n                          ? (r.disabled = r.other.selfOptionDisabledValue())\n                          : (r.disabled = false);\n                      });\n                    else\n                      rows.forEach((r) => {\n                        typeof r.other.otherOptionDefaultValue === \"function\"\n                          ? (r.value = r.other.otherOptionDefaultValue())\n                          : (r.value = \"\");\n                        typeof r.other.otherOptionDisabledValue === \"function\"\n                          ? (r.disabled = r.other.otherOptionDisabledValue())\n                          : (r.disabled = false);\n                      });\n                    val.value = selection;\n                  },\n                  {\n                    title: \"Select End-User\",\n                    preset: val != null ? val.value : \"\",\n                    size: \"small-modal\",\n                  }\n                );\n              },\n            },\n          });\n          const genderOptionField = () => ({\n            label: \"Gender\",\n            value: \"\",\n            other: {\n              selfOptionDefaultValue: () =>\n                this.patient.getGender() === \"M\" ? \"Male\" : \"Female\",\n              selfOptionDisabledValue: () => true,\n              otherOptionDefaultValue: () => \"\",\n              otherOptionDisabledValue: () => false,\n              obs: (v: string) =>\n                this.service.buildValueCoded(\"Gender of contact\", v),\n              onclick: (val: Option) => {\n                selectionList(\n                  [\"Female\", \"Male\"],\n                  (selection: string) => (val.value = selection),\n                  {\n                    title: \"Select gender\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const ageOptionField = () => ({\n            label: \"Age\",\n            value: \"\",\n            other: {\n              selfOptionDefaultValue: () => `${this.patient.getAge()}`,\n              selfOptionDisabledValue: () => true,\n              otherOptionDefaultValue: () => \"\",\n              otherOptionDisabledValue: () => false,\n              obs: (v: string) => {\n                if (/unk/i.test(`${v}`)) {\n                  return this.service.buildValueCoded('Age of contact', 'Unknown')\n                } else {\n                  return this.service.buildValueNumber(\"Age of contact\", parseInt(v))\n                }\n              },\n              onclick: (val: Option) => {\n                numericKeypad((age: number | string) => {\n                  if (!/unk/i.test(`${age}`) && parseInt(`${age}`) >= 125) {\n                    val.value =''\n                    return toastWarning(`Age exceeds maximum human life expectancy of 124 years`)\n                  }\n                  val.value = age\n                }, {\n                  title: 'Age',\n                  preset: ' ',\n                  strictNumbers: false,\n                  customKeyboard: [\n                    ['1', '2', '3'],\n                    ['4', '5', '6'],\n                    ['7', '8', '9'],\n                    ['Unk', '0', 'Del'],\n                    ['', 'Done', '']\n                  ]\n                });\n              },\n            },\n          });\n          const approachOptionField = () => ({\n            label: \"Approach\",\n            value: \"\",\n            other: {\n              otherOptionDefaultValue: () => \"Un-assisted\",\n              otherOptionDisabledValue: () => true,\n              selfOptionDefaultValue: () => \"\",\n              selfOptionDisabledValue: () => false,\n              obs: (v: string) =>\n                this.service.buildValueCoded(\"Self-test approach\", v),\n              onclick: (val: Option) => {\n                selectionList(\n                  [\"Directly-assisted\", \"Un-assisted\"],\n                  (v: string) => (val.value = v),\n                  {\n                    title: \"Select approach\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const kits = this.getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"item\",\n                value: \"N/A\",\n                other: {\n                  fields: [\n                    userOptionField(),\n                    genderOptionField(),\n                    ageOptionField(),\n                    approachOptionField(),\n                  ],\n                },\n              };\n            });\n          if (Array.isArray(f.self_test_kits)) {\n            if (this.getSelfKitCount(f) < f.self_test_kits.length) {\n              return f.self_test_kits.slice(0, this.getSelfKitCount(f));\n            } else if (this.getSelfKitCount(f) > f.self_test_kits.length) {\n              return [\n                ...f.self_test_kits,\n                ...generateRows(\n                  this.getSelfKitCount(f) - f.self_test_kits.length\n                ),\n              ];\n            } else {\n              return f.self_test_kits;\n            }\n          }\n          return generateRows();\n        },\n      };\n    },\n  },\n});\n","import { render } from \"./HtsItemsGivenToClient.vue?vue&type=template&id=8187c030&ts=true\"\nimport script from \"./HtsItemsGivenToClient.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsItemsGivenToClient.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}