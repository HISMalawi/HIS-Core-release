{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/Obsteric.vue?a098","webpack:///./src/apps/ANC/Services/anc_obsteric_service.ts","webpack:///./src/apps/ANC/Views/Encounters/Obsteric.vue","webpack:///./src/apps/ANC/Views/Encounters/Obsteric.vue?bd6b","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?83cf","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?0184","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","AncObstericService","AppEncounterService","constructor","patientID","providerID","super","this","para","gravida","nextGravida","getFirstValueNumber","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","initData","getFields","immediate","methods","computedData","obs","resolveObs","createEncounter","saveObservationList","nextTask","id","helpText","type","FieldType","TT_NUMBER","defaultValue","beforeNext","async","parseInt","v","value","alertConfirmation","computedValue","buildValueNumber","validation","validateSeries","Validation","required","rangeOf","condition","f","TT_ANC_PREGNANCY_INPUT_CONFIG","config","hiddenFooterBtns","pregnancyCount","TT_ANC_PREGNANCY_DETAILS_INPUT","abortionCount","known_pregnancies","some","p","isChecked","inArray","i","label","filter","d","other","map","options","knownAbortions","num","push","getNumberOrdinal","field","minY","patient","getBirthdate","split","maxY","getDate","TT_SELECT","buildValueText","mapStrToOptions","buildValueCoded","successfulPregnancyData","rowTitles","onValueUpdate","rowItems","forEach","disabled","TT_TEXT","match","includes","customKeyboard","onUnknownEstimateField","mapOptions","noChars","yesNoOptions","TT_AGE_INPUT","TT_MULTI_SELECT_GRID","hasMissingValues","Boolean","onClick","option","listData","l","visible","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","created","$route","params","patient_id","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","patientDashboardUrl","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","error","toastWarning","enc","encounterTypeID","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","runflowState","state","states","username","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","names","latestName","given_name","family_name","toOption","items","path","toYesNoOption","values","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","reduce","accum","cur","Array","isArray","concat","Promise","all","arr","expression","length","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","String","$emit","isCondition","ignored","undefined","prop","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info"],"mappings":"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","file":"js/chunk-0d68fded.3321288f.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class AncObstericService extends AppEncounterService {\n    para: number;\n    gravida: number;\n    nextGravida: number;\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 82, providerID)\n        this.para = 0\n        this.gravida = 0\n        this.nextGravida = 0\n    }\n\n    async initData() {\n        this.para = (await this.getFirstValueNumber('Parity')) || 0\n        this.gravida = (await this.getFirstValueNumber('Gravida')) || 0\n        this.nextGravida = this.gravida > 0 ? this.gravida + 1 : 0\n    }\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncObstericService } from \"@/apps/ANC/Services/anc_obsteric_service\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { ObsValue } from '@/services/observation_service'\nimport { alertConfirmation } from '@/utils/Alerts'\nimport { getNumberOrdinal } from \"@/utils/Strs\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n            this.service = new AncObstericService(this.patientID, this.providerID)\n\t\t\tawait this.service.initData()\n            this.fields = this.getFields()\n        } \n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData)\n      await this.service.createEncounter()\n      await this.service.saveObservationList(obs as ObsValue[])\n      this.nextTask()\n    },\n    getFields(): Field[] {\n        return [\n            {\n                id: 'gravida',\n                helpText: 'Gravida',\n                type: FieldType.TT_NUMBER,\n\t\t\t\tdefaultValue: () => this.service.nextGravida > 0 ? this.service.nextGravida : null,\n                beforeNext: async (v: Option) => {\n                    if (parseInt(`${v.value}`) > 9) {\n                        if (!(await alertConfirmation(\n\t\t\t\t\t\t\t'The value is greater than maximum 9. Are you sure about this value?'\n\t\t\t\t\t\t\t))) {\n                            return false\n                        }\n                    }\n                    return true\n                },\n                computedValue: (v: Option) => this.service.buildValueNumber('Gravida', v.value),\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, this.service.nextGravida || 1, 19)\n                ])\n            },\n            {\n                id: 'para',\n                helpText: 'Para',\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.gravida.value > 1,\n                computedValue: (v: Option) => this.service.buildValueNumber('Parity', v.value), \n                validation: (v: Option, f: any) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, this.service.para, f.gravida.value - 1)\n                ])\n            },\n            {\n                id: 'known_pregnancies',\n                helpText: 'Pregnancies with available information',\n                type: FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n                condition: (f: any) => f.gravida.value > 1 && f.para.value > 0,\n                config: {\n\t\t\t\t\thiddenFooterBtns: ['Clear'],\n\t\t\t\t\tpregnancyCount: (f: any) => f.para.value\n                }\n            },\n            {\n\t\t\t\tid: 'pregnancy_details',\n\t\t\t\thelpText: 'Pregnancy details',\n\t\t\t\ttype: FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n\t\t\t\tcondition: (f: any) => {\n\t\t\t\t\tconst abortionCount = (parseInt(`${f.gravida.value}`) - parseInt(`${f.para.value}`)) - 1\n\t\t\t\t\treturn f.gravida.value > 1 && (abortionCount >= 1 || f.known_pregnancies.some(\n\t\t\t\t\t\t(p: Option) => p.isChecked\n\t\t\t\t\t))\n\t\t\t\t},\n\t\t\t\tvalidation: (v: Option[]) => this.validateSeries([\n\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t() => this.inArray(v, (i: Option) => i.label === '_INCOMPLETE_RECORD_ERROR_')\n\t\t\t\t\t\t? ['Pregnancy details incomplete!!']\n\t\t\t\t\t\t: null\n\t\t\t\t]),\n\t\t\t\tconfig: {\n\t\t\t\t\thiddenFooterBtns: ['Clear']\n\t\t\t\t},\n\t\t\t\tcomputedValue: (v: Option[]) => v.filter(d => d?.other?.obs || false).map((d: Option) => d.other.obs),\n\t\t\t\toptions: (f: any) => {\n\t\t\t\t\tconst abortionCount = (parseInt(`${f.gravida.value}`) - parseInt(`${f.para.value}`)) - 1\n\t\t\t\t\tconst knownAbortions: Option[] = []\n\t\t\t\t\tfor(let i=0; i < abortionCount; ++i) {\n\t\t\t\t\t\tconst num = i + 1\n\t\t\t\t\t\tknownAbortions.push({\n\t\t\t\t\t\t\tlabel: `<span style=\"color:red;\">${num}<sup>${getNumberOrdinal(num)}</sup> Abortion</span>`,\n\t\t\t\t\t\t\tvalue: -1,\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Year of abortion',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'year',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Year of abortion',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_NUMBER,\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueNumber('Year of abortion', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst [minY] = this.patient.getBirthdate().split('-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst [maxY] = this.service.getDate().split('-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Validation.rangeOf(v, minY, maxY)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Place of abortion',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'place_of_abortion',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Place of abortion',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// concept taken as is from old anc system\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Place of birth', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Health facility\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"In transit\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"TBA\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Home\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Other\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Type of abortion',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'type_of_abortion',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Type of abortion',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueCoded('Type of Abortion', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Complete abortion\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Incomplete abortion\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Procedure done',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'procedure_done',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Procedure done',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Procedure done', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Manual Vacuum Aspiration (MVA)\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Evacuation\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"None\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Gestation (weeks)',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'gestation_weeks',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Gestation (weeks)',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_NUMBER,\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueNumber('Gestation', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.rangeOf(v, 0, 28)\n\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tconst successfulPregnancyData = (f.known_pregnancies || []).filter((p: Option) => p.isChecked).map((p: Option) => {\n\t\t\t\t\t\tconst data: any = []\n\t\t\t\t\t\tconst rowTitles = []\n\t\t\t\t\t\tfor(let i=0; i < p.value; ++i) {\n\t\t\t\t\t\t\trowTitles.push(`${i+1}<sup>${getNumberOrdinal(i+1)}</sup> born in ${p.label} pregnancy`)\n\t\t\t\t\t\t\tdata.push([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Year of birth',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'year',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Year of birth',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_NUMBER,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueNumber('Year of Birth', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst [minY] = this.patient.getBirthdate().split('-')\n\t\t\t\t\t\t\t\t\t\t\t\tconst [maxY] = this.service.getDate().split('-')\n\t\t\t\t\t\t\t\t\t\t\t\treturn Validation.rangeOf(v, minY, maxY) \n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Place of birth',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'place_of_birth',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Place of birth',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Place of birth', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => Validation.required(v), \n\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\"Health facility\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"In transit\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"TBA\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Home\"\n\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Gestation (weeks)',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'gestation_weeks',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Gestation (weeks)',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_NUMBER,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueNumber('Gestation', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.rangeOf(v, 24, 42)\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Method of delivery',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'method_of_delivery',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Method of delivery',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Method of delivery', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\"Spontaneous Vertex\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Caesarean Section\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Vacuum extraction delivery\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Breech\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Forceps\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Others\"\n\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Condition at birth',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'condition_at_birth',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Condition at birth',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Condition at Birth', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tonValueUpdate: (v: Option, rowItems: any) => {\n\t\t\t\t\t\t\t\t\t\t\trowItems.forEach((i: any) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (i.label === 'Alive now') {\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.required = v.value === 'Alive'\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.disabled = v.value != 'Alive'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\"Alive\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Macerated Still Birth (MSB)\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Fresh Still Birth (FSB)\"\n\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Birth weight',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'birth_weight',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Birth weight',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_TEXT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Birth weight', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (v.value != 'Unknown' && !(`${v.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/))) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn [`Invalid weight ${v.value}. Don't forget decimal point`]\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t() => !['N/A', 'Unknown'].includes(`${v.value}`) \n\t\t\t\t\t\t\t\t\t\t\t\t? Validation.rangeOf(v, 1, 5) \n\t\t\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\tconfig: {\n\t\t\t\t\t\t\t\t\t\t\tcustomKeyboard: [\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t['1', '2', '3'],\n\t\t\t\t\t\t\t\t\t\t\t\t\t['4', '5', '6'],\n\t\t\t\t\t\t\t\t\t\t\t\t\t['7', '8', '9'],\n\t\t\t\t\t\t\t\t\t\t\t\t\t['', '0', '.']\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t['Unknown', 'Delete']\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\tonUnknownEstimateField: () => { \n\t\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: 'birth_weight_estimate',\n\t\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Birth weight estimate',\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.mapOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Normal',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Big baby',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Small baby'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tnoChars: false\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Alive now',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\tdisabled: true,\n\t\t\t\t\t\t\t\t\trequired: false,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'alive_now',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Alive now',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueCoded('Alive', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tonValueUpdate: (v: Option, rowItems: any) => {\n\t\t\t\t\t\t\t\t\t\t\trowItems.forEach((i: any) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (i.label === 'Age at death') {\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.required = v.value === 'No'\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.disabled = v.value === 'Yes'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.yesNoOptions()\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Age at death',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\tdisabled: true,\n\t\t\t\t\t\t\t\t\trequired: false,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'age_at_death',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Age at death',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_AGE_INPUT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Age at Death', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp.label = `${p.label} delivery`\n\t\t\t\t\t\tp.other = { data, rowTitles }\n\t\t\t\t\t\treturn p\n\t\t\t\t\t})\n\t\t\t\t\treturn [...successfulPregnancyData, ...knownAbortions] as Option[]\n\t\t\t\t}\n            },\n\t\t\t{\n\t\t\t\tid: 'previous_complications',\n\t\t\t\thelpText: 'Previous complications',\n\t\t\t\ttype: FieldType.TT_MULTI_SELECT_GRID,\n\t\t\t\tcondition: (f: any) => f.gravida.value > 1,\n\t\t\t\tvalidation: (v: Option[]) => this.validateSeries([\n\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t() => {\n\t\t\t\t\t\tconst hasMissingValues = v.map(v => v.value==='').some(Boolean)\n\t\t\t\t\t\treturn hasMissingValues \n\t\t\t\t\t\t\t? ['Please complete Complication selection!!'] \n\t\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t]),\n\t\t\t\tcomputedValue: (v: Option[]) => {\n\t\t\t\t\treturn v.filter(d => d.value != '')\n\t\t\t\t\t\t.map(d => this.service.buildValueCoded(d.label, d.value))\n\t\t\t\t},\n\t\t\t\tconfig: {\n\t\t\t\t\thiddenFooterBtns: ['Clear']\n\t\t\t\t},\n\t\t\t\toptions: () => {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t{ \n\t\t\t\t\t\t\tlabel: 'Episiotomy', \n\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\toptions: this.yesNoOptions()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ \n\t\t\t\t\t\t\tlabel: 'Hemorrhage', \n\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\toptions: this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t'No',\n\t\t\t\t\t\t\t\t\t'APH',\n\t\t\t\t\t\t\t\t\t'PPH'\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ \n\t\t\t\t\t\t\tlabel: 'Pre-eclampsia', \n\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\tonClick: (option: Option, listData: Option[]) => {\n\t\t\t\t\t\t\t\t\tlistData.forEach(l => {\n\t\t\t\t\t\t\t\t\t\tif (l.label === 'Eclampsia') {\n\t\t\t\t\t\t\t\t\t\t\tl.other.visible = option.value === 'Yes'\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toptions: this.yesNoOptions()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Eclampsia',\n\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\tvisible: false,\n\t\t\t\t\t\t\t\toptions: this.yesNoOptions()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n        ]\n    }\n  }\n})\n","import { render } from \"./Obsteric.vue?vue&type=template&id=20b9633a&ts=true\"\nimport script from \"./Obsteric.vue?vue&type=script&lang=ts\"\nexport * from \"./Obsteric.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/brian/projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            try {\n                obs = await this.resolveObs(params.computedData)\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/brian/projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}