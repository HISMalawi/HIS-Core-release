{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/Appointment.vue?f5d9","webpack:///./src/apps/ART/views/encounters/Appointment.vue","webpack:///./src/apps/ART/views/encounters/Appointment.vue?61e8","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/apps/ART/services/appointment_service.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","appointment","watch","ready","handler","this","AppointmentService","patientID","providerID","getAppointmentField","immediate","methods","_","computedData","createEncounter","resolveObs","saveObservationList","printer","PatientPrintoutService","appsThatDoNotPrint","includes","App","getActiveApp","applicationName","printVisitSummaryLbl","nextTask","d","date","HisDate","toStandardHisDisplayFormat","exists","strOne","strTwo","RegExp","test","clinicDays","clinicHolidays","appointmentLimit","nextAppointment","drugRunoutDate","dateAppointments","weekDays","id","helpText","type","FieldType","TT_DATE_PICKER","init","getNextAppointment","res","appointment_date","drugs_run_out_date","console","warn","delayPromise","alertConfirmation","gotoPatientDashboard","ART_GLOBAL_PROP","limitRes","parseInt","onValue","undefined","getDailiyAppointments","Array","isArray","length","header","cancelBtnLabel","confirmBtnLabel","isEmpty","patient","getAge","adultClinicDays","peadsClinicDays","dayjs","day","validation","val","Validation","required","defaultValue","computedValue","buildValueDate","config","hiddenFooterBtns","minDate","maxDate","supValue","infoItems","label","value","__exports__","FlowState","dformat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","flowState","SET_PROVIDER","isBdeMode","isBDE","facts","route","params","patient_id","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","split","username","provider","find","person_id","$router","push","EXIT","findings","matchToGuidelines","index","finding","status","program","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","person","names","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","obs","tag","Object","filter","reduce","accum","cur","concat","Promise","all","inArray","arr","expression","e","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","formData","$emit","programID","AppEncounterService","getProgramID","getJson","paginate","isCondition","ignored","prop","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-15eccd71.a0d1b00a.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { alertConfirmation } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue';\nimport {AppointmentService} from '@/apps/ART/services/appointment_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport App from \"@/apps/app_lib\"\nimport { isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\nimport ART_GLOBAL_PROP from \"@/apps/ART/art_global_props\"\nimport dayjs from \"dayjs\";\nimport { delayPromise } from \"@/utils/Timers\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    appointment: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.appointment = new AppointmentService(this.patientID, this.providerID)\n          this.fields = [\n            this.getAppointmentField()\n          ]\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      await this.appointment.createEncounter()\n      await this.appointment.saveObservationList(\n        (await this.resolveObs(computedData))\n      )\n      const printer = new PatientPrintoutService(this.patientID);\n      // TODO: remove the program checks here\n      const appsThatDoNotPrint = ['CxCa', 'ANC']\n      if(!appsThatDoNotPrint.includes(`${App.getActiveApp()?.applicationName}`)) {\n        await printer.printVisitSummaryLbl();\n      }\n      this.nextTask()\n    },\n    getAppointmentField(): Field {\n      const d = (date: string) => HisDate.toStandardHisDisplayFormat(date)\n      const exists = (strOne: string, strTwo: string) => new RegExp(strOne, 'i').test(`${strTwo}`)\n      let clinicDays = ''\n      let clinicHolidays = ''\n      let appointmentLimit = -1\n      let nextAppointment = this.appointment.date\n      let drugRunoutDate: string | null = null\n      const dateAppointments: Record<string, number> = {}\n      const weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n      return {\n        id: \"set_appointment\",\n        helpText: \"Appointments booking\",\n        type: FieldType.TT_DATE_PICKER,\n        init: async () => {\n          try {\n            const res = await this.appointment.getNextAppointment()\n            nextAppointment = res.appointment_date\n            drugRunoutDate = res.drugs_run_out_date\n          } catch(e) {\n            console.warn(e)\n            await delayPromise(400)\n            if (!(await alertConfirmation('Next appointment/drug-runout date is not available, do you want to proceed anyway?'))) {\n              this.gotoPatientDashboard()\n              return true\n            }\n          }\n          const limitRes = (await ART_GLOBAL_PROP.appointmentLimit());\n          appointmentLimit = limitRes ? parseInt(limitRes) : 0\n          return true\n        },\n        onValue: async (date: string) => {\n          if (dateAppointments[date] === undefined) {\n            const res = await AppointmentService.getDailiyAppointments(date)\n            dateAppointments[date] = Array.isArray(res) ? res.length : 0\n          }\n          if (appointmentLimit >= 1 && dateAppointments[date] >= appointmentLimit) {\n            if((await alertConfirmation(\n              `${dateAppointments[date]} clients were booked on ${d(date)}`, \n              {\n                header: `APPOINTMENT LIMIT (${appointmentLimit}) REACHED`,\n                cancelBtnLabel: \"Proceed\",\n                confirmBtnLabel: \"New date\"\n              }\n            ))) return false;\n          }\n          // Check clinic holidays\n          if (isEmpty(clinicHolidays)) {\n            clinicHolidays = await ART_GLOBAL_PROP.clinicHolidays()\n          }\n          if(exists(date, clinicHolidays)) {\n            if (!(await alertConfirmation(`${d(date)} is a clinic holiday, do you want to set an appointment?`))) \n              return false;\n          }\n          //Check clinic days\n          if (isEmpty(clinicDays)) {\n            clinicDays = this.patient.getAge() >= 18\n              ? (await ART_GLOBAL_PROP.adultClinicDays())\n              : (await ART_GLOBAL_PROP.peadsClinicDays())\n          }\n          if(!exists(weekDays[dayjs(date).day()], clinicDays)){\n            if(!(await alertConfirmation(`${d(date)} is not a clinic day. Do you want to proceed with this date?`))) \n              return false;\n          }\n          return true\n        },\n        validation: (val: any) => Validation.required(val),\n        defaultValue: () => nextAppointment,\n        computedValue: (date: string) => {\n          return [\n            this.appointment.buildValueDate('Appointment date', date),\n            this.appointment.buildValueDate('Estimated date', nextAppointment)\n          ]\n        },\n        config: {\n          hiddenFooterBtns: [\n            'Clear'\n          ],\n          minDate: () => this.appointment.date,\n          maxDate: () => drugRunoutDate,\n          supValue: (date: string) => `${dateAppointments[date]}`,\n          infoItems: (date: string) => {\n            return [\n              { \n                label: 'Medication Run out Date',\n                value: drugRunoutDate ? d(drugRunoutDate) : 'Not available'\n              },\n              {\n                label: 'User set appointment date',\n                value: d(date)\n              },\n              {\n                label: 'Appointments',\n                value: dateAppointments[date]\n              },\n              {\n                label: 'Appointment limit (per/day)',\n                value: appointmentLimit\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n});\n","import { render } from \"./Appointment.vue?vue&type=template&id=746dc022&ts=true\"\nimport script from \"./Appointment.vue?vue&type=script&lang=ts\"\nexport * from \"./Appointment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class AppointmentService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 7, providerID);\n  }\n\n  async getNextAppointment() {\n    const programID = AppEncounterService.getProgramID();\n    return AppEncounterService.getJson(`/programs/${programID}/patients/${this.patientID}/next_appointment_date`, {date: this.date})\n  }\n  static async getDailiyAppointments(date: any) {\n    const programID = AppEncounterService.getProgramID();\n    return AppEncounterService.getJson(`/programs/${programID}/booked_appointments`, {date: date, paginate: false})\n  }\n\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}