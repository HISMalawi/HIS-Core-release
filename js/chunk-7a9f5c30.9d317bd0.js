(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-7a9f5c30"],{"2ef6":function(e,t,r){"use strict";r.d(t,"a",(function(){return n}));var a=r("ade3"),i=r("5969"),s=r("ad8d");class n extends i["a"]{constructor(){super(),Object(a["a"])(this,"gender",void 0),Object(a["a"])(this,"ageGroup",void 0),Object(a["a"])(this,"initialize",void 0),Object(a["a"])(this,"rebuildOutcome",void 0),this.gender="",this.ageGroup=s["a"][0],this.initialize=!0,this.rebuildOutcome=!0}async init(){this.initialize=!0;const e=await this.getCohort();return!(!e||"created"!==e.temp_disaggregated)&&(this.initialize=!1,!0)}setAgeGroup(e){this.ageGroup=e}setInitialization(e){this.initialize=e}setRebuildOutcome(e){this.rebuildOutcome=e}setGender(e){this.gender=e}getGender(){return this.gender}getCohort(){return this.getReport("cohort_disaggregated",{age_group:""+this.ageGroup,rebuild_outcome:""+this.rebuildOutcome,initialize:""+this.initialize})}getTxIpt(){return this.getReport("clients_given_ipt",{gender:this.gender,age_group:""+this.ageGroup})}getTxCurrTB(){return this.getReport("screened_for_tb",{gender:this.gender,age_group:""+this.ageGroup})}getRegimenDistribution(){return this.getReport("disaggregated_regimen_distribution",{gender:""+this.gender,age_group:""+this.ageGroup})}}},b31c:function(e,t,r){"use strict";r.d(t,"a",(function(){return o}));var a,i=r("ade3"),s=(r("13d5"),r("14d9"),r("2ef0")),n=r("5969");(function(e){e["MOH_CACHE"]="mohCache"})(a||(a={}));class o extends n["a"]{constructor(){super(),Object(i["a"])(this,"regenerate",void 0),this.regenerate=!1}cohortUrl(){return`programs/${this.programID}/reports/cohort`}setRegenerate(e){this.regenerate=e}getCohortDrillDown(e){return n["a"].getJson("cohort_report_drill_down",{id:e,date:this.date,program_id:this.programID})}requestCohort(e){return n["a"].ajxGet(this.cohortUrl(),e)}qaurterRequestParams(){return{name:this.quarter,regenerate:this.regenerate}}datePeriodRequestParams(){return{name:`Cohort-${this.startDate}-${this.endDate}`,start_date:this.startDate,end_date:this.endDate,regenerate:this.regenerate}}getCachedCohortValues(){const e=sessionStorage.getItem(a.MOH_CACHE);if(e){const t=JSON.parse(e);if(t.start_date===this.startDate&&t.end_date===this.endDate||t.quarter===this.quarter)return t.data}}cacheCohort(e){sessionStorage.setItem(a.MOH_CACHE,JSON.stringify({start_date:this.startDate,end_date:this.endDate,quarter:this.quarter,data:e}))}validateIndicators(e,t){const r=this.getCachedCohortValues();if(r){const a=Object.keys(e).reduce((t,a)=>{const i=Object(s["find"])(r,{name:a}),n=e[a],o=i?i.contents:null,h=n.param,d=n.check(parseInt(o),h);return d&&t.push(n.error(o,h)),t},[]);return t(a)}return-1}}},c753:function(e,t,r){"use strict";r.r(t);var a=r("7a23");function i(e,t,r,i,s,n){const o=Object(a["resolveComponent"])("report-template"),h=Object(a["resolveComponent"])("ion-page");return Object(a["openBlock"])(),Object(a["createBlock"])(h,null,{default:Object(a["withCtx"])(()=>[Object(a["createVNode"])(o,{title:e.title,period:e.period,rows:e.rows,fields:e.fields,columns:e.columns,reportPrefix:"PEPFAR",config:{showIndex:!0},validationErrors:e.errors,showValidationStatus:e.canValidate,hasServerSideCaching:!0,headerInfoList:e.headerList,onReportConfiguration:e.onPeriod},null,8,["title","period","rows","fields","columns","validationErrors","showValidationStatus","headerInfoList","onReportConfiguration"])]),_:1})}r("13d5"),r("14d9");var s=r("44e3"),n=r("4ba2"),o=r("9ceb"),h=r("2ef0"),d=r("d867"),l=r("ad8d"),g=r("b5e4"),c=r("b31c"),u=r("2ef6"),m=r("87e7"),p=Object(a["defineComponent"])({mixins:[s["a"]],components:{ReportTemplate:n["a"],IonPage:d["D"]},data:()=>({title:"PEPFAR Disaggregated Report",headerList:[],errors:[],columns:[[o["a"].thTxt("Age group"),o["a"].thTxt("Gender"),o["a"].thNum("Tx new (new on ART)"),o["a"].thNum("TX curr (receiving ART)"),o["a"].thNum("TX curr (received IPT)"),o["a"].thNum("TX curr (screened for TB)"),...m["b"].map(e=>o["a"].thNum(e)),o["a"].thNum("Unknown"),o["a"].thNum("Total (regimen)")]],rowDataRefs:["txNew","txCurr","txGivenIpt","txScreenTB",...m["b"],"N/A","regimenTotals"],dataRefLabels:{txNew:"Tx new (new on ART)",txCurr:"Tx curr (receiving ART)",txGivenIpt:"TX curr (received IPT)",txScreenTB:"TX curr (screened for TB)","N/A":"Unknown",regimenTotals:"Regimen Totals"},aggregations:[],mohCohort:{},maleFemaleAgeGroupData:{},canValidate:!1,sortIndexes:{},initiated:!1}),created(){this.fields=this.getDateDurationFields()},computed:{rows(){return Object.keys(this.sortIndexes).sort((e,t)=>parseInt(e)-parseInt(t)).reduce((e,t)=>e.concat(this.sortIndexes[t]),[])}},watch:{async canValidate(e){e&&await this.validateReport()}},methods:{async onPeriod(e,t,r=!0){this.errors=[],this.maleFemaleAgeGroupData={},this.sortIndexes={},this.aggregations=[],this.canValidate=!1,this.report=new u["a"],this.mohCohort=new c["a"],this.report.setQuarter("pepfar"),this.report.setStartDate(t.start_date),this.report.setEndDate(t.end_date),this.mohCohort.setStartDate(t.start_date),this.mohCohort.setEndDate(t.end_date),this.period=this.report.getDateIntervalPeriod(),this.report.setRebuildOutcome(!this.initiated||r);const a=await this.report.init();if(!a)return Object(g["e"])("Unable to initialise report");await this.setTableRows(),this.setHeaderInfoList(),this.canValidate=!0,this.initiated=!0},getTotals(e){return this.aggregations.filter(t=>e(t)).reduce((e,t)=>e.concat(t.data),[])},addAggregation(e,t,r=[]){this.aggregations.push({col:e,gender:t,data:r})},async getRegimenRows(e,t){let r=[];const a=[],i=await this.report.getRegimenDistribution(),s=[...m["b"],"N/A"];return s.forEach(s=>{i[s]&&(r=r.concat(i[s])),a.push(this.drill(i[s],`Regimen ${s} | ${e} | ${t}`)),this.addAggregation(s,t,i[s])}),a.push(this.drill(r,`Regimen Totals | ${e} | ${t}`)),this.addAggregation("regimenTotals",t,r),a},setHeaderInfoList(){const e=this.getTotals(e=>"txCurr"===e.col&&e.gender.match(/male|female/i));this.headerList=[{label:"Total Alive and on ART",value:e.length,other:{onclick:()=>this.runTableDrill(e,"Total Alive and on ART")}}]},async setTableRows(){await this.setFemaleRows(1),await this.setMaleRows(2),await this.setTotalMalesRow(3),await this.setFemalePregnantRows(4),await this.setFemaleBreastFeedingRows(6),await this.setFemaleNotPregnantRows(5)},getColumnLabel(e){return e in this.dataRefLabels?this.dataRefLabels[e]:e},async getValue(e,t,r){let a=[];switch(e){case"tx_given_ipt":a=await this.report.getTxIpt();break;case"tx_screened_for_tb":a=await this.report.getTxCurrTB();break;default:a=t in r?r[t][e]:[];break}return a},setTotalMalesRow(e){const t=(e,t)=>{const r=this.aggregations.filter(t=>"Male"===t.gender&&t.col===e).reduce((e,t)=>e.concat(t.data),[]);return this.drill(r,t)},r=this.rowDataRefs.map(e=>t(e,this.getColumnLabel(e)+" | All Male"));this.sortIndexes[e]=[[o["a"].td("All"),o["a"].td("Male"),...r]]},setFemaleNotPregnantRows(e){const t=(e,t)=>this.aggregations.filter(e=>e.gender.match(/fp|fbf/i)&&e.col===t).reduce((e,t)=>e.concat(t.data||[]),[]).includes(e),r=(e,r)=>{const a=this.aggregations.filter(t=>"Female"===t.gender&&t.col===e).reduce((r,a)=>r.concat(a.data.filter(r=>!t(r,e))),[]);return this.drill(a,r)},a=this.rowDataRefs.map(e=>r(e,this.getColumnLabel(e)+" | FNP"));this.sortIndexes[e]=[[o["a"].td("All"),o["a"].td("FNP"),...a]]},setFemaleRows(e){return this.report.setGender("female"),this.setRows(e,"F",l["a"],"Female")},setMaleRows(e){return this.report.setGender("male"),this.setRows(e,"M",l["a"],"Male")},setFemalePregnantRows(e){return this.report.setGender("pregnant"),this.setRows(e,"F",["All"],"FP","Pregnant")},setFemaleBreastFeedingRows(e){return this.report.setGender("breastfeeding"),this.setRows(e,"F",["All"],"FBf","Breastfeeding")},async setRows(e,t,r,a,i=""){for(const s in r){let n=[],d=[],l=[],g=[];const c=i||r[s];if(this.report.setAgeGroup(c),!(c in this.maleFemaleAgeGroupData)){const e=await this.report.getCohort();this.report.setRebuildOutcome(!1),this.maleFemaleAgeGroupData[c]=Object(h["isEmpty"])(e)?{}:e[c]}if(!Object(h["isEmpty"])(this.maleFemaleAgeGroupData[c])){const e=e=>this.getValue(e,t,this.maleFemaleAgeGroupData[c]);n=await e("tx_new"),d=await e("tx_curr"),l=await e("tx_given_ipt"),g=await e("tx_screened_for_tb"),this.addAggregation("txNew",a,n),this.addAggregation("txCurr",a,d),this.addAggregation("txGivenIpt",a,l),this.addAggregation("txScreenTB",a,g)}this.sortIndexes[e]||(this.sortIndexes[e]=[]),this.sortIndexes[e].push([o["a"].td(r[s]),o["a"].td(this.formatGender(a)),this.drill(n,`Tx new (new on ART) | ${c} | ${a}`),this.drill(d,`Tx curr (receiving ART) | ${c} | ${a}`),this.drill(l,`TX curr (received IPT) | ${c} | ${a}`),this.drill(g,`TX curr (screened for TB) | ${c} | ${a}`),...await this.getRegimenRows(c,a)])}},validateReport(){const e={initiated_on_art_first_time:{param:this.getTotals(e=>"txNew"===e.col&&e.gender.match(/male|female/i)).length,check:(e,t)=>e!=t,error:(e,t)=>`\n                        MOH cohort initiated on ART first time <b>(${e})</b> is not matching Tx New <b>(${t})</b>\n                    `},initial_pregnant_females_all_ages:{param:this.getTotals(e=>"txNew"===e.col&&"FP"===e.gender).length,check:(e,t)=>e!=t,error:(e,t)=>`\n                        MOH cohort initial pregnant females all ages \n                        <b>(${e})</b> is not matching with TX new Pregnant women <b>${t}</b>\n                    `},males_initiated_on_art_first_time:{param:this.getTotals(e=>"txNew"===e.col&&"Male"===e.gender).length,check:(e,t)=>e!=t,error:(e,t)=>`\n                        MoH Cohort males initiated on ART first time <b>(${e})</b>\n                        is not matching with TX new All male <b>(${t})</b>\n                    `}},t=this.mohCohort.validateIndicators(e,e=>this.errors=e);-1===t&&(this.errors=["Report not validated. Run the MoH cohort report for similar reporting period and then run this report"])}}}),w=r("6b0d"),f=r.n(w);const b=f()(p,[["render",i]]);t["default"]=b}}]);
//# sourceMappingURL=chunk-7a9f5c30.9d317bd0.js.map