{"version":3,"sources":["webpack:///./src/apps/ART/views/reports/pepfar/ScCurrReport.vue?c6d8","webpack:///./src/apps/ART/views/reports/pepfar/ScCurrReport.vue","webpack:///./src/apps/ART/views/reports/pepfar/ScCurrReport.vue?a0d9","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/utils/ReportDateSelectionPrompt.ts","webpack:///./src/components/DataViews/DrillTableModal.vue?e567","webpack:///./src/components/DataViews/DrillTableModal.vue","webpack:///./src/components/DataViews/DrillTableModal.vue?7a9b","webpack:///./src/apps/ART/services/reports/stock_report_service.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_loading","_resolveComponent","_component_v2Datatable","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","isLoading","message","title","subtitle","period","columns","columnData","reportData","rowsPerPage","onConfigure","configure","onRefresh","generate","reportPrefix","_","defineComponent","components","IonPage","IonLoading","v2Datatable","setup","ref","report","StockReportService","label","value","data","toNumString","units","tdClick","async","modalController","create","component","DrillTable","cssClass","componentProps","val","category","onRows","_val$data","granular_spec","map","drug_name","present","startDate","endDate","toastWarning","getScCurrReport","index","e","toastDanger","DateSelection","onFinish","sDate","eDate","periodstr","onMounted","length","__exports__","SYMBOLS_CONFIG","SYMBOLS","NUMBERS_ONLY","NUMBER_PAD_LO","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","MONTHLY_DAYS_LO","A_TO_Z","ALPHABETICAL_LO","QWERTY","QWERTY_LO","KEY_BTN_NAV","btn","keyboard","DatePeriodInputType","HtsReportPreference","ReportPreferences","reactive","datePeriodInputType","localStorage","getItem","PERIOD_INPUT_TYPE","MULTI_FIELD_DATE","params","MultiStepPopupForm","generateDateFields","id","helpText","required","minDate","maxDate","Service","getSessionDate","condition","estimation","allowUnknown","computeValue","date","c","start_date","proxyID","type","FieldType","TT_FULL_DATE","validation","v","Date","toDate","computedValue","SINGLE_DATE_INPUT_FIELD","defaultValue","f","TT_DATE_PICKER","CALENDAR_FIELD","StandardValidations","config","infoItems","end_date","persistInfoItems","console","log","dismiss","_hoisted_1","key","_hoisted_2","_component_ion_title","_component_ion_toolbar","_component_ion_header","_component_his_basic_table","_component_text_skeloton","_component_ion_content","_component_ion_button","_component_ion_footer","_createElementBlock","_Fragment","_createTextVNode","_toDisplayString","ready","rows","color","onClick","closeModal","slot","HisBasicTable","IonHeader","IonToolbar","IonContent","IonFooter","IonButton","TextSkeloton","props","String","Object","Function","watch","func","this","immediate","deep","methods","ArtReportService","constructor","super","_defineProperty","stock","getReport","paginate","getStockReport","getJson","getStockCardReport","programID","loadTrail","getTrailDetails","drugId","transactionType","getDiscrepancyReport","groupStock","pharmacyData","pack_size","current_quantity","parseFloat","dispensed_quantity","values","drug","currentQuantity","Math","trunc","drugName","quantintyDispensed","quantityIsTabs","EstimationFieldType","getYearField","name","showUnknown","primaryFunctions","push","appearInSummary","TT_TEXT","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","getDefaultDate","form","field","datePart","year","month","day","split","d","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","min","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","unload","toString","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","dayjs","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD"],"mappings":"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","file":"js/chunk-1f2c6e68.19baee21.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_loading = _resolveComponent(\"ion-loading\")!\n  const _component_v2Datatable = _resolveComponent(\"v2Datatable\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_loading, {\n        \"is-open\": _ctx.isLoading,\n        message: \"Please wait...\"\n      }, null, 8, [\"is-open\"]),\n      _createVNode(_component_v2Datatable, {\n        title: \"Sc Curr\",\n        subtitle: _ctx.period,\n        columns: _ctx.columns,\n        columnData: _ctx.reportData,\n        rowsPerPage: 20,\n        onConfigure: _ctx.configure,\n        onRefresh: () => _ctx.generate(),\n        reportPrefix: \"PEPFAR\"\n      }, null, 8, [\"subtitle\", \"columns\", \"columnData\", \"onConfigure\", \"onRefresh\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { IonPage, IonLoading, modalController } from \"@ionic/vue\"\nimport { defineComponent, onMounted, ref } from 'vue'\nimport  v2Datatable from \"@/components/DataViews/tables/v2PocDatatable/TableView.vue\"\nimport { StockReportService } from \"@/apps/ART/services/reports/stock_report_service\"\nimport { v2ColumnInterface } from '@/components/DataViews/tables/v2PocDatatable/types';\nimport { DateSelection } from '@/utils/ReportDateSelectionPrompt';\nimport { toastDanger, toastWarning } from '@/utils/Alerts';\nimport DrillTable from \"@/components/DataViews/DrillTableModal.vue\"\nimport { toNumString } from \"@/utils/Strs\";\n\nexport default defineComponent({\n    components: { \n        IonPage,\n        IonLoading,\n        v2Datatable\n    },\n    setup() {\n        const reportData = ref([])\n        const period = ref('')\n        const isLoading = ref(false)\n        const report = new StockReportService()\n        const columns: Array<v2ColumnInterface[]> = [\n            [\n                {\n                    label: \"#\",\n                    ref: \"index\"\n                },\n                {\n                    label: \"ARV drug category\",\n                    ref: 'category'\n                },\n                {\n                    label: \"# of bottles (units) remaining\",\n                    ref: 'units',\n                    value: (data: any) => toNumString(data.units),\n                    tdClick: async (val: any) => {\n                        (await modalController.create({\n                            component: DrillTable,\n                            cssClass: 'custom-modal',\n                            componentProps: {\n                                title: val.data.category,\n                                columns: ['Drug', 'Quantity'],\n                                onRows: () => (val.data?.granular_spec||[]).map((data: any) => {\n                                    return [data.drug_name, toNumString(data.units)]\n                                })\n                            }\n                        })).present()\n                    }\n                }\n            ]\n        ]\n\n        /**\n         * Generates report by start date and end date\n         */\n         const generate = async () => {\n            if (!(report.startDate && report.endDate))  {\n                return toastWarning('Start date and end date required!')\n            }\n            isLoading.value = true\n            reportData.value = []\n            try {\n                reportData.value = (await report.getScCurrReport()).map((\n                    data: any, index: number) => ({...data, index: index+1})\n                )\n            } catch (e) {\n                toastDanger(\"Unable to generate report!\")\n            }\n            isLoading.value = false\n        }\n\n        /**\n         * Loads a dialogue to allow users to configure start and end date\n         */\n         const configure = () => DateSelection({\n            onFinish: (sDate: string, eDate: string, periodstr: string) => {\n                period.value = `Period (${periodstr})`\n                report.startDate = sDate\n                report.endDate = eDate\n                generate()\n            }\n        })\n\n        /**\n         * Initialization code when the report is empty!\n        */\n        onMounted(() => !reportData.value.length && configure())\n\n        return {\n            reportData,\n            isLoading,\n            configure,\n            generate,\n            columns,\n            period\n        }\n    }\n})\n","import { render } from \"./ScCurrReport.vue?vue&type=template&id=0a3261c4&ts=true\"\nimport script from \"./ScCurrReport.vue?vue&type=script&lang=ts\"\nexport * from \"./ScCurrReport.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Service } from \"@/services/service\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { toDate } from \"@/utils/Strs\"\nimport { MultiStepPopupForm } from \"@/utils/PopupKeyboard\"\nimport { toastDanger } from \"@/utils/Alerts\"\nimport { modalController } from \"@ionic/vue\"\nimport { reactive } from \"vue\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\n\nexport enum DatePeriodInputType {\n    MULTI_FIELD_DATE = 'Multipage date fields',\n    CALENDAR_FIELD = 'Calendar',\n    SINGLE_DATE_INPUT_FIELD = 'Single page date'\n}\n\nexport enum HtsReportPreference {\n    PERIOD_INPUT_TYPE = 'hts_report_date_period_type'\n}\n\nexport const ReportPreferences = reactive({\n    datePeriodInputType: localStorage.getItem(HtsReportPreference.PERIOD_INPUT_TYPE) || DatePeriodInputType.MULTI_FIELD_DATE\n} as any)\n\nexport function DateSelectionPreference() {\n    MultiStepPopupForm([\n        {\n            id: 'date_field_type',\n            helpText: 'Date input preference',\n            type: FieldType.TT_SELECT,\n            defaultValue: () => ReportPreferences.datePeriodInputType,\n            options: () => {\n                return [\n                    { label: 'Calendar', value: DatePeriodInputType.CALENDAR_FIELD },\n                    { label: 'Single page date', value: DatePeriodInputType.SINGLE_DATE_INPUT_FIELD},\n                    { label: 'Multipage date fields', value: DatePeriodInputType.MULTI_FIELD_DATE },\n                ]\n            }\n        }\n    ],\n    (f: any) => {\n        ReportPreferences.datePeriodInputType = f.date_field_type.value\n        localStorage.setItem(HtsReportPreference.PERIOD_INPUT_TYPE, ReportPreferences.datePeriodInputType)\n        modalController.dismiss()\n    })\n}\n\nexport function DateSelection(params: any) {\n    MultiStepPopupForm([\n        ...generateDateFields({\n            id: 'start_date',\n            helpText: 'Start',\n            required: true,\n            minDate: () => params?.minDate || '',\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date \n        }),\n        ...generateDateFields({\n            id: 'end_date',\n            helpText: 'End',\n            required: true,\n            minDate: (_: any, c: any) => c.start_date,\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date\n        }),\n        {\n            id: 'alt_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_FULL_DATE,\n            validation: (v: Option) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (params.minDate && new Date(v.value) < new Date(params.minDate)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(params.minDate)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.value,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'alt_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_FULL_DATE,\n            defaultValue: (f: any) => f.start_date.value,\n            validation: (v: Option, f: any) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (f.start_date.value && new Date(v.value) < new Date(f.start_date.value)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(f.start_date.value)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.label,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'calendar_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_DATE_PICKER,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            validation: (v: Option) => StandardValidations.required(v),\n            config: {\n                minDate: () => params.minDate || null,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(date) || '-' },\n                        { label: 'End Date', value: toDate(f.end_date) || '-'}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        },\n        {\n            id: 'calendar_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_DATE_PICKER,\n            validation: (v: Option) => StandardValidations.required(v),\n            defaultValue: (f: any) => f.start_date.value,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            config: {\n                minDate: (f: any) => f.start_date.value,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(f.start_date) || '-' },\n                        { label: 'End Date', value: toDate(date)}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        }\n    ], \n    async (f: any, c: any) => {\n        console.log(c)\n        modalController.dismiss()\n        try {\n            const period = `${toDate(c.start_date)} to ${toDate(c.end_date)}`\n            params.onFinish(c.start_date, c.end_date, period)\n        } catch (e) {\n            toastDanger(\"An error has occurred\")\n        }\n    })\n}","import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment } from \"vue\"\n\nconst _hoisted_1 = { key: 0 }\nconst _hoisted_2 = { key: 1 }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_his_basic_table = _resolveComponent(\"his-basic-table\")!\n  const _component_text_skeloton = _resolveComponent(\"text-skeloton\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(_toDisplayString(_ctx.title), 1)\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, null, {\n      default: _withCtx(() => [\n        (_ctx.ready)\n          ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n              _createVNode(_component_his_basic_table, {\n                columns: _ctx.columns,\n                rows: _ctx.rows\n              }, null, 8, [\"columns\", \"rows\"])\n            ]))\n          : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n              _createVNode(_component_text_skeloton)\n            ]))\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              color: \"danger\",\n              onClick: _ctx.closeModal,\n              slot: \"end\"\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Close \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\"])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport { defineComponent, PropType } from \"vue\";\nimport HisBasicTable from \"./HisBasicTable.vue\";\nimport { modalController } from \"@ionic/vue\";\nimport TextSkeloton from \"@/components/TextSkeleton.vue\"\nimport {\n  IonHeader, \n  IonToolbar, \n  IonContent, \n  IonFooter, \n  IonButton\n} from \"@ionic/vue\"\nexport default defineComponent({\n  components: { \n    HisBasicTable,\n    IonHeader, \n    IonToolbar, \n    IonContent, \n    IonFooter, \n    IonButton,\n    TextSkeloton\n  },\n  props: {\n    title: {\n      type: String,\n      required: true,\n    },\n    columns: {\n      type: Object as PropType<string[]>,\n      required: true,\n    },\n    onRows: {\n      type: Function,\n      required: true,\n    },\n  },\n  data: () => ({\n    rows: [] as Array<any>,\n    ready: false,\n  }),\n  watch: {\n    onRows: {\n      async handler(func: Function) {\n        if (func) {\n          this.rows = await func();\n          this.ready = true;\n        }\n      },\n      immediate: true,\n      deep: true,\n    },\n  },\n  methods: {\n    async closeModal() {\n      await modalController.dismiss({});\n    },\n  },\n});\n","import { render } from \"./DrillTableModal.vue?vue&type=template&id=0cd2f14a&ts=true\"\nimport script from \"./DrillTableModal.vue?vue&type=script&lang=ts\"\nexport * from \"./DrillTableModal.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { ArtReportService } from \"./art_report_service\";\n\nexport class StockReportService extends ArtReportService {\n    stock: Array<any>;\n    constructor() {\n        super()\n        this.stock = []\n    }   \n\n    async loadStock() {\n        this.stock = await this.getReport(`pharmacy/items`, { paginate: false })\n        // this.stock = await ArtReportService.getJson()\n    }\n    \n    getStockReport() {\n        return ArtReportService.getJson(`pharmacy/stock_report`, { paginate: false })\n    }\n\n    getStockCardReport() {\n        return this.getReport(`programs/${this.programID}/reports/stock_card`);\n    }\n\n    loadTrail() {\n        return this.getReport('pharmacy/audit_trail/grouped')\n    }\n\n    getTrailDetails(date: string, drugId: number, transactionType: string) {\n        return this.getReport('pharmacy/audit_trail', {\n            'transaction_date': date,\n            'drug_id': drugId,\n            'transaction_reason': transactionType\n        })\n    }\n\n    getScCurrReport() {\n        return this.getReport('programs/1/reports/sc_curr')\n    }\n\n    getDiscrepancyReport () {\n        return this.getReport(`programs/${this.programID}/reports/discrepancy_report`);\n    }\n\n    /**Code adapted from BHT-Core Art system */\n    groupStock() {\n        const pharmacyData: any = {};\n        for (const index in this.stock) {\n            const data = this.stock[index]\n            const drugId = data[\"drug_id\"];\n\n            if (!pharmacyData[drugId]) {\n                pharmacyData[drugId] = {\n                    'current_quantity': 0,\n                    'dispensed_quantity': 0,\n                    'pack_size': data.pack_size,\n                    'drug_name': data[\"drug_name\"] === null ? data[\"drug_legacy_name\"] : data[\"drug_name\"]\n                }\n            }\n\n            if (data.current_quantity === 0) continue;\n\n            pharmacyData[drugId][\"current_quantity\"] += parseFloat(data.current_quantity);\n            if (data.dispensed_quantity){\n                pharmacyData[drugId][\"dispensed_quantity\"] += parseFloat(data.dispensed_quantity);\n            }\n        }\n        return Object.values(pharmacyData).map((drug: any) => {\n            let currentQuantity: any = '0'\n            if(drug.pack_size == null) {\n                currentQuantity  = drug.current_quantity + '(tabs)';\n            }else {\n                currentQuantity = Math.trunc(drug.current_quantity / drug.pack_size);\n            }\n            return {\n                drugName: drug.drug_name,\n                quantintyDispensed: drug.dispensed_quantity,\n                currentQuantity,\n                quantityIsTabs: drug.pack_size === null,\n            }\n        })\n    }\n}\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])"],"sourceRoot":""}