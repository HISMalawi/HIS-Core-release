{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/ARVNumber.vue?aa66","webpack:///./src/apps/ART/views/encounters/ARVNumber.vue","webpack:///./src/apps/ART/views/encounters/ARVNumber.vue?0de6","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/services/identifier_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","patientHasARVNumber","currentArvNumber","prependValue","watch","ready","handler","arvNumber","patient","getArvNumber","a","split","replace","ProgramService","getNextSuggestedARVNumber","suggestedNumber","arv_number","getFields","immediate","methods","formData","newArvNumber","value","$router","back","IdentifierService","arvNumberExists","exists","toastWarning","updateARVNumber","createArvNumber","id","helpText","type","FieldType","TT_TEXT","validation","val","Validation","required","defaultValue","config","initialKb","artApp","HisApp","getActiveApp","programPatientIdentifiers","arvType","prefix","footerBtns","name","slot","color","onClick","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","flowState","SET_PROVIDER","isBdeMode","isBDE","patientID","providerID","facts","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","username","provider","find","person_id","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","computedData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","identifierType","Service","getJson","identifier"],"mappings":"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","file":"js/chunk-444bebfd.e651b218.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { toastWarning } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport HisApp from \"@/apps/app_lib\"\nimport { IdentifierService } from \"@/services/identifier_service\";\nimport { ProgramService } from \"@/services/program_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    patientHasARVNumber: false,\n    currentArvNumber: \"\" as any,\n    prependValue: \"\" as any,\n  }),\n  watch: {\n    ready: {\n      async handler(ready: any) {\n        if (!ready) return\n        const arvNumber = this.patient.getArvNumber()\n        if(arvNumber !== \"Unknown\") {\n          const a = arvNumber.split('-')\n          this.currentArvNumber = a[2].replace(/^\\D+|\\s/g, \"\")\n          this.prependValue = `${a[0]}-${a[1]}-`\n          this.patientHasARVNumber = true\n        } else {\n          const suggestedNumber =  await ProgramService.getNextSuggestedARVNumber();\n          this.currentArvNumber = suggestedNumber.arv_number.replace(/^\\D+|\\s/g, \"\");\n        }\n        this.fields = this.getFields();\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      const newArvNumber = formData['arv_number'].value\n      if(newArvNumber === this.patient.getArvNumber()) return this.$router.back()\n      const exists = await IdentifierService.arvNumberExists(newArvNumber)\n      if(exists) toastWarning(\"ARV number already exists\", 5000)\n      else {\n        try {\n          if(this.patientHasARVNumber) \n            await this.patient.updateARVNumber(newArvNumber)\n          else await this.patient.createArvNumber(newArvNumber)\n          this.$router.back()\n        } catch (error) {\n          toastWarning(error)\n        }\n      }   \n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"arv_number\",\n          helpText: \"Update ARV Number\",\n          type: FieldType.TT_TEXT,\n          validation: (val: any) => Validation.required(val),\n          defaultValue: () => this.currentArvNumber,\n          config: {\n            initialKb: '0-9',\n            prependValue: () => {\n              if(this.prependValue) return this.prependValue\n              const artApp = HisApp.getActiveApp()\n              if (artApp && artApp.programPatientIdentifiers) {\n                const arvType = artApp.programPatientIdentifiers['ARV Number']\n                return arvType.prefix()\n              }\n              return ''\n            },\n            footerBtns: [\n              {\n                name: \"Void ARV Number\",\n                slot: \"end\",\n                color: 'danger',\n                onClick: async (formData: any) => {\n                  await this.patient.updateARVNumber(\"Unknown\")\n                  this.$router.back()\n                }\n              }\n            ]\n          },\n        }\n      ]\n    }\n  }\n});\n","import { render } from \"./ARVNumber.vue?vue&type=template&id=4ab459be&ts=true\"\nimport script from \"./ARVNumber.vue?vue&type=script&lang=ts\"\nexport * from \"./ARVNumber.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Service } from \"./service\";\nimport ART from \"@/apps/ART/app\"\n\nexport interface DuplicateIdentifiersInterface {\n    count: number;\n    identifier: string;\n}\n\nexport class IdentifierService extends Service {\n    identifierType: number\n    constructor() {\n        super()\n        this.identifierType = -1\n    }\n \n    static getIdentifierTypes() {\n        return super.getJson('types/patient_identifiers')\n    }\n\n    static async arvNumberExists(arvNumber: string): Promise<boolean> {\n        const data = await super.getJson(`programs/${super.getProgramID()}/lookup_arv_number/${arvNumber}`)\n        return data.exists\n    }\n\n    getIdentifierType() {\n        return this.identifierType\n    }\n\n    setIdentifierType(type: number) {\n        this.identifierType = type\n    }\n\n    getDuplicateIndentifiers(): Promise<DuplicateIdentifiersInterface[]> {\n        return Service.getJson(`search/identifiers/duplicates`, {\n            'type_id': this.identifierType\n        })\n    }\n\n    getPatientsByIdentifier(identifier: string) {\n        return Service.getJson(`search/patients/by_identifier`,{\n            'type_id': this.identifierType,\n            'identifier': identifier\n        })\n    }\n}\n"],"sourceRoot":""}