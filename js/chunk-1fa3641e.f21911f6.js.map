{"version":3,"sources":["webpack:///./src/apps/ART/services/reports/art_report_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/apps/ART/views/reports/inconsistencies/DataCleaningVerification.vue?1c7b","webpack:///./src/apps/ART/views/reports/inconsistencies/DataCleaningVerification.vue","webpack:///./src/apps/ART/views/reports/inconsistencies/DataCleaningVerification.vue?84b3","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/services/person_service.ts","webpack:///./src/apps/ART/services/reports/data_cleaning_report_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["ArtReportService","Service","constructor","super","this","endDate","startDate","quarter","date","getSessionDate","programID","getProgramID","getDateIntervalPeriod","HisDate","toStandardHisDisplayFormat","setStartDate","setEndDate","setQuarter","getReport","url","params","getJson","buildRequest","config","payload","year","daysInMonth","m","dayjs","startMonth","endMonth","qtr","start","end","qtrBounds","getQuarterBounds","getFullYear","Date","qtrName","name","maxQuarters","qtrs","currDate","currYear","curYr","getMonth","getDate","currentQtr","getQtrByDate","i","push","buildQtrObj","FlowState","dformat","d","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","isEnrolledInProgam","formLabel","ready","watch","handler","route","patient_id","toUpperCase","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","ProgramService","e","console","error","toastDanger","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","path","loadingController","create","backdropDismiss","message","present","nextTask","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","mapToOption","listOptions","item","resolvePerson","computedForm","attr","isPlainObject","getGivenNameField","id","helpText","FieldType","TT_TEXT","computedValue","val","validation","Validation","isName","form","PersonService","searchGivenName","getFamilyNameField","searchFamilyName","getGenderField","customOptions","TT_SELECT","getDobConfig","includeHelpText","summaryLabel","minDate","estimateDateFromAge","maxDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","isEstimate","birthdate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","dynamicHelpText","f","home_region","match","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","onClick","c","field","toastWarning","filtered","ok","alertConfirmation","address","LocationService","createAddress","getHomeTaField","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","defaultComputedOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","test","home_village","onClickComponentEvents","setValue","getCurrentDistrictField","current_region","getCurrentTAfield","current_district","getCurrentVillageField","current_traditional_authority","getCellNumberField","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","getFacilityLocationField","_","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","gender","birthdate_estimated","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","getNationalID","npid","show","getProgramName","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","mixins","EncounterMixinVue","IonPage","created","TT_FULL_DATE","PersonHelper","DataCleaningReportService","saveDataCleaningVerification","back","isCondition","ignored","undefined","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","postJson","update","putJson","personId","CtIndicator","getCleaningToolReport","indicator","getEnrolledOnArtBeforeBirth","getIncompleteVisits","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-1fa3641e.f21911f6.js","sourcesContent":["import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\nimport dayjs from \"dayjs\";\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\nexport class ArtReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    quarter: string\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.quarter = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n    setQuarter(quarter: string) {\n        this.quarter = quarter\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': this.programID}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        if (this.quarter) {\n            payload['quarter'] = this.quarter\n        }\n        return { ...payload, ...config }\n    }\n\n    static getQuarterBounds(year: number) {\n        const daysInMonth = (m: string) => dayjs(`${year}-${m}-01`).daysInMonth()\n        const startMonth = (m: string) => `${year}-${m}-01 00:00`\n        const endMonth = (m: string) => `${year}-${m}-${daysInMonth(m)} 00:00`\n\n        return {\n            'Q1': {\n                qtr: 1,\n                start: startMonth('01'),\n                end: endMonth('03')\n            },\n            'Q2': {\n                qtr: 2,\n                start: startMonth('04'),\n                end: endMonth('06')\n            },\n            'Q3': {\n                qtr: 3,\n                start: startMonth('07'),\n                end: endMonth('09')\n            },\n            'Q4': {\n                qtr: 4,\n                start: startMonth('10'),\n                end: endMonth('12')\n            }\n        }\n    }\n\n    static getQtrByDate(date: Date) {\n        const qtrBounds: any = this.getQuarterBounds(date.getFullYear())\n        for(const qtr in qtrBounds) {\n            const { start, end } = qtrBounds[qtr]\n            if (date >= new Date(start) && date <= new Date(end)) {\n                return qtrBounds[qtr]\n            }\n        }\n        return null\n    }\n\n    static buildQtrObj(qtrName: string, year: number): QuarterInterface {\n        const qtrBounds: any = this.getQuarterBounds(year)\n        const { start, end } = qtrBounds[qtrName]\n        return {\n            start,\n            end,\n            name: `${qtrName} ${year}`,\n        }\n    }\n\n    static getReportQuarters(maxQuarters=5) {\n        const qtrs: QuarterInterface[] = [];\n        let currDate = new Date();\n        let currYear = currDate.getFullYear();\n        const curYr = currYear\n        \n        currDate = new Date(`${curYr}-${currDate.getMonth() + 1}-${currDate.getDate()} 00:00`);\n        const currentQtr = this.getQtrByDate(currDate);\n        let qtr = currentQtr.qtr;\n        let i = 0;\n\n        if (qtr === 4) qtrs.push(this.buildQtrObj('Q1', currYear + 1))\n\n        while (i < maxQuarters) {\n          // Add following quarter\n          if (i === 0 && qtr < 4) qtrs.push(this.buildQtrObj(`Q${qtr + 1}`, currYear))\n\n          qtrs.push(this.buildQtrObj(`Q${qtr}`, currYear))\n          qtr = qtr > 0 ? (qtr -= 1) : qtr;\n          currYear = qtr == 0 ? currYear - 1 : currYear;\n          qtr =  qtr == 0 ? ( qtr += 4) : qtr;\n          i++;\n        }\n        return qtrs;\n    }\n}\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            dynamicHelpText: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Current Region of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'Current District of Residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'Current TA of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Current Village of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        skipSummary: true,\n        cancelDestinationPath: \"/\"\n      }, null, 8, [\"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport { DataCleaningReportService, DataCleaningVerificationData } from \"@/apps/ART/services/reports/data_cleaning_report_service\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { IonPage } from \"@ionic/vue\";\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { Option } from \"@/components/Forms/FieldInterface\";\nimport PersonHelper from \"@/utils/HisFormHelpers/PersonFieldHelper\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { IonPage },\n  created() {\n    this.fields = [\n        {\n            id: \"data_cleaning_datetime\",\n            helpText: \"Date data cleaning done\",\n            type: FieldType.TT_FULL_DATE,\n            computedValue: (v: Option) => v.value,\n            validation: (v: Option) => Validation.required(v)\n        },\n        (() => {\n            const field = PersonHelper.getGivenNameField()\n            field.helpText = \"Verifier's First name\"\n            field.proxyID = 'supervisors'\n            return field\n        })(),\n        (() => {\n            const field = PersonHelper.getFamilyNameField()\n            field.helpText = \"Verifier's Last name\"\n            field.proxyID = 'supervisors'\n            field.computedValue = (v: Option, f: any) => [`${f.given_name.value} ${v.value}`]\n            return field\n        })()\n    ]\n  },\n  methods: {\n    async onFinish(_: any, data: DataCleaningVerificationData) {\n        const ok = await new DataCleaningReportService().saveDataCleaningVerification(data)\n        if (ok) this.$router.back()\n    }\n  }\n})\n","import { render } from \"./DataCleaningVerification.vue?vue&type=template&id=4ea1f6f2&ts=true\"\nimport script from \"./DataCleaningVerification.vue?vue&type=script&lang=ts\"\nexport * from \"./DataCleaningVerification.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Person } from \"@/interfaces/person\"\nimport { Service } from \"./service\"\n\nexport interface NewPerson {\n    person_id?: number;\n    given_name: string;\n    family_name: string;\n    gender: string;\n    birthdate: string;\n    birthdate_estimated: boolean;\n    home_district: string;\n    home_traditional_authority: string;\n    home_village: string;\n    current_district: string;\n    current_traditional_authority: string;\n    current_village: string;\n    landmark: string;\n    cell_phone_number: string;\n    occupation: string;\n    facility_name: string;\n    patient_type?: string;\n    relationship?: string;\n}\n\nexport class PersonService extends Service{\n    person: Person | NewPerson\n    constructor(person: NewPerson | Person){\n        super()\n        this.person = person\n    }\n\n    create() { return Service.postJson('/people', this.person) }\n\n    update(id: number) { return Service.putJson(`people/${id}`, {\n        ...this.person, 'program_id': Service.getProgramID()\n    })}\n\n    static searchFamilyName(name: string) {\n        return super.getJson('/search/family_name', {'search_string': name})\n    }\n\n    static searchGivenName(name: string) {\n        return super.getJson('/search/given_name', {'search_string': name})\n    }\n\n    static async getPersonFullName(personId: string | number) {\n        const names = await super.getJson(`/people/${personId}/names`)\n        return names && names.length ? names[0].given_name + ' ' + names[0].family_name : ''\n    }\n}\n","import { ArtReportService } from \"./art_report_service\";\n\nexport enum CtIndicator {\n    DobMoreThanEnrolledDate = 'DOB MORE THAN DATE ENROLLED',\n    ClientsWithEncountersAfterDeath = 'CLIENTS WITH ENCOUNTERS AFTER DECLARED DEAD',\n    DobMoreThanDateEnrolled = 'DOB MORE THAN DATE ENROLLED',\n    DateEnrolledLessThanEarliestStartDate = 'DATE ENROLLED LESS THAN EARLIEST START DATE',\n    MalesWithFemaleObs = 'MALE CLIENTS WITH FEMALE OBS',\n    PrescriptionWithoutDispensation = 'PRESCRIPTION WITHOUT DISPENSATION',\n    MissingDemographics = 'MISSING DEMOGRAPHICS',\n    MissingStartReasons = 'MISSING START REASONS',\n    MultipleStartReasons = 'MULTIPLE START REASONS',\n    PreArtOrUnknownOutcomes ='PRE ART OR UNKNOWN OUTCOMES',\n}\n\nexport interface DataCleaningVerificationData {\n    'data_cleaning_datetime': string;\n    'supervisors': string[];\n}\n\nexport class DataCleaningReportService extends ArtReportService {\n    constructor() {\n        super()\n    }\n    \n    saveDataCleaningVerification(data: DataCleaningVerificationData) {\n        return ArtReportService.postJson('data_cleaning_confirmation', data)\n    }\n\n    getCleaningToolReport(indicator: CtIndicator) {\n        return this.getReport('art_data_cleaning_tools', { \n            'report_name' : indicator \n        })\n    }\n\n    getEnrolledOnArtBeforeBirth() {\n        return ArtReportService.getJson('enrolled_on_art_before_birth')\n    }\n\n    getIncompleteVisits() {\n        return this.getReport('incomplete_visits', {\n            'tool_name': 'INCOMPLETE VISITS'\n        })\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}