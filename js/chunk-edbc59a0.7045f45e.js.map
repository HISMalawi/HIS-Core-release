{"version":3,"sources":["webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/HTS/views/encounters/HtsReferralAppointment.vue?40f1","webpack:///./src/apps/HTS/services/hts_referral_appointment_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsReferralAppointment.vue","webpack:///./src/apps/HTS/views/encounters/HtsReferralAppointment.vue?f36a","webpack:///./src/composables/storage.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","this","$emit","i","__exports__","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","formLabel","patientDashboardUrl","_","HtsReferralAppointmentService","AppEncounterService","constructor","patientID","providerID","super","nextAppointment","getJson","programID","date","IonPage","HisStandardForm","setup","ref","service","pregnancyRetest","visitID","htsClient","getEncounter","saveEncounter","toOption","StartHtsEncounter","onInitVisit","value","referralField","referralLocationField","appointmentDataField","id","helpText","FieldType","TT_SELECT","isRequired","finalComputedValue","label","obs","buildValueText","defaultValue","getLocationName","condition","f","re_test","options","filter","getFacilities","config","footerBtns","slot","onClickComponentEvents","setValue","onClick","showKeyboard","isFilterDataViaApi","calculateNextAppointmentDate","test","appointmentDays","14","28","365","keys","reduce","choosenDate","day","some","dayjs","add","format","STANDARD_DATE_FORMAT","reasonForRetest","TT_TEXT_BANNER","init","async","hivStatus","riskCategory","pregnancyStatus","testingEncounter","Offline","isOfflineMode","getFirstValueCoded","gender","pregnancyEncounter","console","log","v","buildValueCoded","maxDate","nextAppointmentDate","TT_DATE_PICKER","e","referral_location","d","buildValueDate","minDate","infoItems","toDate","hiddenFooterBtns","encounterName","encounterTypeID","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","Promise","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","get","onerror","error","filters","openCursor","cursor","filteredData","continue","put","delete","item","entries","every","isInteger","toLower","includes","offlineStorage","facilities","isEmpty","LocationService","trim","map","facility","location_id","other","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-edbc59a0.7045f45e.js","sourcesContent":["import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Appointment\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.patientDashboardUrl()\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsReferralAppointmentService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 7, providerID)\n    }\n\n    nextAppointment() {\n        return AppEncounterService.getJson(`/programs/${this.programID}/patients/${this.patientID}/next_appointment_date`, {date: this.date})\n    }\n}\n","\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent, ref } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { IonPage } from \"@ionic/vue\"\nimport { HtsReferralAppointmentService } from \"@/apps/HTS/services/hts_referral_appointment_service\"\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport dayjs from 'dayjs'\nimport { toDate } from '@/utils/Strs'\nimport { Offline } from \"@/composables/offline\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { StartHtsEncounter } from \"@/apps/HTS/composables/HtsFormEncounter\";\nimport { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\n\nexport default defineComponent({\n  components: { IonPage, HisStandardForm },\n  setup() {\n    const fields = ref<Field[]>([])\n    const service = new HtsReferralAppointmentService(-1)\n    const pregnancyRetest = ref(false)\n    const { \n      visitID,\n      htsClient,\n      getEncounter,\n      patientDashboardUrl,\n      saveEncounter, \n      toOption\n    } = StartHtsEncounter({\n      onInitVisit: () => {\n        fields.value = [\n          referralField(),\n          referralLocationField(),\n          appointmentDataField()\n        ]\n      }\n    })\n\n    function referralLocationField(): Field {\n      return {\n        id: 'referral_location',\n        helpText: 'Intended site for retesting',\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: ({ label }: Option) => ({\n          obs: service.buildValueText('Referral location', label)\n        }),\n        defaultValue: () => HtsReferralAppointmentService.getLocationName(),\n        condition: (f: any) => f.re_test.value != 'Not done',\n        options: (_: any, filter = '') => getFacilities(filter),\n        config: {\n          footerBtns: [\n            {\n              name: \"Here\",\n              slot: \"end\",\n              onClickComponentEvents: {\n                setValue: () => HtsReferralAppointmentService.getLocationName()\n              },\n              onClick: () => null\n            }\n          ],\n          showKeyboard: true,\n          isFilterDataViaApi: true\n        }\n      }\n    }\n\n    function calculateNextAppointmentDate() {\n      const test = getEncounter('Testing')\n      if (!test) return service.date\n      const appointmentDays: Record<number, boolean[]> = {\n        14: [\n          test['HIV status'] === 'Positive Initial Professional',\n          test['HIV status'] === 'Inconclusive'\n        ],\n        28: [\n          (/negative/i.test(test['HIV status']) &&\n          /High risk event in last 3 months|not done/i.test(test['client risk category'])),\n        ],\n        365: [\n          (/negative/i.test(test['HIV status']) &&\n          /On-going risk/i.test(test['client risk category'])),\n        ]\n      }\n      return Object.keys(appointmentDays).reduce((choosenDate: any, day: any) => {\n        if (!choosenDate && appointmentDays[day].some(Boolean)) {\n          return dayjs(service.date).add(day, 'days').format(STANDARD_DATE_FORMAT)\n        }\n        return choosenDate\n      }, '')\n    }\n\n    function referralField(): Field {\n      let reasonForRetest: any = null\n      return {\n        id: \"re_test\",\n        helpText: 'Referral for Re-Testing',\n        type: FieldType.TT_TEXT_BANNER,\n        init: async () => {\n          let hivStatus = ''\n          let riskCategory = ''\n          let pregnancyStatus = ''\n          const service = new HtsReferralAppointmentService(visitID.value as any)\n          const testingEncounter = getEncounter('Testing')\n\n          if (testingEncounter) {\n            hivStatus = testingEncounter['HIV status'] || 'N/A'\n            riskCategory = testingEncounter['client risk category'] || 'N/A'\n          } else if (!Offline().isOfflineMode.value) {\n            riskCategory = (await service.getFirstValueCoded(\"client risk category\")) || 'N/A'\n            hivStatus = (await service.getFirstValueCoded(\"HIV Status\")) || 'N/A'\n          }\n\n          if (htsClient.gender === 'F') {\n            const pregnancyEncounter = getEncounter('PREGNANCY STATUS')\n            if (pregnancyEncounter) {\n              pregnancyStatus = pregnancyEncounter['Pregnancy status']\n            } else if (!Offline().isOfflineMode.value) {\n              pregnancyStatus = (await service.getFirstValueCoded(\"Pregnancy status\")) || 'N/A'\n            }\n          }\n\n          if (/Negative/i.test(hivStatus) && pregnancyStatus === \"BREASTFEEDING\") {\n            pregnancyRetest.value = true\n            reasonForRetest = { label: \"Book a Re-Test for Female Breastfeeding Client\", value: 'Re-test'}\n          } else if (/Negative/i.test(hivStatus) && pregnancyStatus == 'Pregnant woman') {\n            pregnancyRetest.value = true\n            reasonForRetest = {label: \"Book a Re-Test for Female Pregnant Client\", value: 'Re-test'}\n          } else if (/Positive Initial Professional/i.test(hivStatus)) {\n            reasonForRetest = { label: \"Confirmatory test is needed for Positive result\", value: 'Confirmatory HIV test' }\n          } else if (/high risk|High risk event|on-going/i.test(`${riskCategory}`)) {\n            reasonForRetest = { label: `Retesting is required due to \"${riskCategory}\"`, value: 'Re-test' }\n          } else {\n            reasonForRetest = { label: 'No re-test required', value: 'Not done' }\n          }\n          return true\n        },\n        defaultValue: () => {\n          console.log(reasonForRetest.value)\n          return toOption(reasonForRetest.value)\n        },\n        condition: () => reasonForRetest != null,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: service.buildValueCoded('Referral for Re-Testing', v.value)\n          }\n        },\n        options: () => {\n          return [\n            toOption(reasonForRetest.label)\n          ]\n        }\n      }\n    }\n\n    function appointmentDataField(): Field {\n      let maxDate = ''\n      let nextAppointmentDate = ''\n      return {\n        id: \"set_appointment\",\n        helpText: \"Select Appointment Date for Re-testing\",\n        type: FieldType.TT_DATE_PICKER,\n        init: async () => {\n          nextAppointmentDate = service.date\n          if (pregnancyRetest.value) {\n            maxDate = dayjs(nextAppointmentDate).add(365, 'day').format('YYYY-MM-DD')\n          } else {\n            try {\n              nextAppointmentDate = calculateNextAppointmentDate()\n              maxDate = dayjs(nextAppointmentDate).add(15, 'day').format('YYYY-MM-DD')\n            } catch (e) {\n              // Returns 404 not appointment date is available\n            }\n          }\n          return true\n        },\n        isRequired: () => true,\n        condition: (f: any) => f.referral_location.value,\n        defaultValue: () => nextAppointmentDate,\n        finalComputedValue: (d: Option) => {\n          return {\n            obs: service.buildValueDate('Appointment date', `${d.value}`)\n          }\n        },\n        config: {\n          minDate: () => nextAppointmentDate,\n          maxDate: () => maxDate,\n          infoItems: (date: string) => {\n            return [\n              {\n                label: 'System set appointment',\n                value: toDate(nextAppointmentDate)\n              },\n              {\n                label: 'User set appointment',\n                value: toDate(date)\n              }\n            ]\n          },\n          hiddenFooterBtns: [\n            'Clear'\n          ]\n        }\n      }\n    }\n\n    function onFinish(_: any, computedData: any) {\n      saveEncounter({\n        encounterName: \"APPOINTMENT\",\n        encounterTypeID: service.encounterTypeID,\n        computedData\n      })\n    }\n\n    return {\n      patientDashboardUrl,\n      onFinish,\n      fields\n    }\n  }\n})\n","import { render } from \"./HtsReferralAppointment.vue?vue&type=template&id=06028894&ts=true\"\nimport script from \"./HtsReferralAppointment.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsReferralAppointment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}