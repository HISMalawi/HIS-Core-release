{"version":3,"sources":["webpack:///./src/views/Example.vue?50bb","webpack:///./src/components/FormElements/Presets/MonthOptions.ts","webpack:///./src/views/Example.vue","webpack:///./src/views/Example.vue?2b40"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","activeField","onOnFinish","onFinish","label","value","defineComponent","components","HisStandardForm","data","selfIndex","created","this","getFields","methods","formData","console","log","testResultsFields","id","helpText","type","FieldType","TT_MULTIPLE_YES_NO","onValueUpdate","l","results","testOne","testTwo","testThree","testOneRepeat","testOneIsPositive","testTwoIsPositive","forEach","r","disable","test","disabled","hasValue","some","d","options","other","values","TT_INPUT_ARRAY","isRequired","condition","f","config","columns","usefontBold","hidden_field","Array","from","length","_","cellIndex","onclick","val","rows","selectionList","v","title","size","numericKeypad","TT_DISPENSATION_INPUT","toolbarInfo","TT_TEXT","beforeNext","confirmation","confirm","TT_MULTIPLE_SELECT","showKeyboard","listData","isChecked","map","i","noneIndex","findIndex","disableIndex","validation","description","color","text","show","footerBtns","name","visible","slot","visibleOnStateChange","state","index","onClick","alert","TT_WEIGHT_CHART","labels","hiddenFooterBtns","TT_NUMBER","TT_SELECT","requireNext","MonthOptions","TT_MONTHLY_DAYS","conditional_data","fdata","__exports__"],"mappings":"uIAEM,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,OAAQV,EAAKU,OACbC,YAAaX,EAAKW,YAClBC,WAAYZ,EAAKa,UAChB,KAAM,EAAG,CAAC,SAAU,cAAe,e,4BCTxB,GACZ,CACIC,MAAO,MACPC,MAAO,GAEX,CACID,MAAO,MACPC,MAAO,GAEX,CACID,MAAO,MACPC,MAAO,GAEX,CACID,MAAO,MACPC,MAAO,GAEX,CACID,MAAO,MACPC,MAAO,GAEX,CACID,MAAO,MACPC,MAAO,GAEX,CACID,MAAO,MACPC,MAAO,GAEX,CACID,MAAO,MACPC,MAAO,GAEX,CACID,MAAO,MACPC,MAAO,GAEX,CACID,MAAO,MACPC,MAAO,IAEX,CACID,MAAO,MACPC,MAAO,IAEX,CACID,MAAO,MACPC,MAAO,K,wBCtCAC,+BAAgB,CAC7BC,WAAY,CAAEC,wBACdC,KAAMA,KAAA,CACJC,UAAW,KACXT,YAAa,GACbD,OAAQ,KAEVW,UACEC,KAAKZ,OAASY,KAAKC,aAErBC,QAAS,CACPX,SAASY,GACPC,QAAQC,IAAIF,IAEdG,oBACE,MAAO,CACLC,GAAI,eACJC,SAAU,eACVC,KAAMC,OAAUC,mBAChBC,cAAgBC,IACd,MAAMC,EAAoB,IAAID,GACxBE,EAAU,wBACVC,EAAU,uBACVC,EAAY,uBACZC,EAAgB,oBACtB,IAAIC,GAAoB,EACpBC,GAAoB,EACxBN,EAAQO,QAAQC,IACd,OAAOA,EAAE9B,OACP,KAAKuB,EACHI,EAAgC,aAAZG,EAAE7B,MACtB,MACF,KAAKuB,EACHI,EAAgC,aAAZE,EAAE7B,MACtB,SAGN,MAAM8B,EAAUA,CAACC,EAAcC,KAC7BX,EAAQO,QAAQC,IACVA,EAAE9B,QAAUgC,IACdF,EAAEG,SAAWA,EACTA,IAAUH,EAAE7B,MAAQ,QAIxBiC,EAAYF,GAAiBX,EAAEc,KAAKC,GAAKA,EAAEpC,QAAUgC,GAAmB,IAAXI,EAAEnC,OACrE,OAAI0B,GACFI,EAAQP,GAAS,GAOfG,GAAqBC,GACvBG,EAAQN,GAAW,GACnBM,EAAQL,GAAe,GAChBJ,IAELK,IAAsBC,GAAqBM,EAASV,KACtDO,EAAQL,GAAe,GACvBK,EAAQN,GAAW,IAEdH,KAdLS,EAAQP,GAAS,GACjBO,EAAQN,GAAW,GACnBM,EAAQL,GAAe,GAChBJ,IAaXe,QAASA,IACA,CACL,CACErC,MAAO,wBACPC,MAAO,GACPqC,MAAO,CACHC,OAAQ,CACN,CAAEvC,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,WAAYC,MAAO,eAIpC,CACED,MAAO,uBACPC,MAAO,GACPgC,UAAU,EACVK,MAAO,CACHC,OAAQ,CACN,CAAEvC,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,WAAYC,MAAO,eAIpC,CACED,MAAO,oBACPC,MAAO,GACPgC,UAAU,EACVK,MAAO,CACHC,OAAQ,CACN,CAAEvC,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,WAAYC,MAAO,eAIpC,CACED,MAAO,uBACPC,MAAO,GACPgC,UAAU,EACVK,MAAO,CACHC,OAAQ,CACN,CAAEvC,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,WAAYC,MAAO,eAIpC,CACED,MAAO,kBACPC,MAAO,GACPqC,MAAO,CACHC,OAAQ,CACN,CAAEvC,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,WAAYC,MAAO,eAIpC,CACED,MAAO,mBACPC,MAAO,GACPqC,MAAO,CACHC,OAAQ,CACN,CAAEvC,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,WAAYC,MAAO,kBAQ5CQ,YACE,MAAO,CACL,CACEM,GAAI,WACJC,SAAU,kBACVC,KAAMC,OAAUsB,eAChBC,WAAYA,KAAM,EAClBC,UAAYC,IAAW,EACvBC,OAAQ,CACNC,QAAS,CACP,CAAE7C,MAAO,YACT,CAAEA,MAAO,eACT,CAAEA,MAAO,qBAGbqC,QAASA,IACA,CACL,CACErC,MAAO,SACPC,MAAO,GACPqC,MAAO,CACL1C,OAAQ,CACN,CACEI,MAAO,WACPC,MAAO,GACPqC,MAAO,CACLQ,aAAa,IAGjB,CACE9C,MAAO,cACPC,MAAO,KAET,CACED,MAAO,kBACPC,MAAO,kBAKf,CACED,MAAO,SACPC,MAAO,GACPqC,MAAO,CACL1C,OAAQ,CACN,CACEI,MAAO,WACPC,MAAO,GACPqC,MAAO,CACLQ,aAAa,IAGjB,CACE9C,MAAO,cACPC,MAAO,KAET,CACED,MAAO,kBACPC,MAAO,kBAKf,CACED,MAAO,SACPC,MAAO,GACPqC,MAAO,CACL1C,OAAQ,CACN,CACEI,MAAO,WACPC,MAAO,GACPqC,MAAO,CACLQ,aAAa,IAGjB,CACE9C,MAAO,cACPC,MAAO,KAET,CACED,MAAO,kBACPC,MAAO,kBAKf,CACED,MAAO,SACPC,MAAO,GACPqC,MAAO,CACL1C,OAAQ,CACN,CACEI,MAAO,WACPC,MAAO,GACPqC,MAAO,CACLQ,aAAa,IAGjB,CACE9C,MAAO,cACPC,MAAO,KAET,CACED,MAAO,kBACPC,MAAO,oBAQrBO,KAAKM,oBACL,CACEC,GAAI,eACJC,SAAU,eACVC,KAAMC,OAAUsB,eAChBI,OAAQ,CACNC,QAAS,CACP,CACE7C,MAAO,YAET,CACEA,MAAO,UAET,CACEA,MAAO,OAET,CACEA,MAAO,cAIbyC,WAAYA,KAAM,EAClBJ,QAAUM,GACJA,EAAEI,aAAqBJ,EAAEI,aACtBC,MAAMC,KAAK,CAACC,OAAQ,GAAI,CAACC,EAAGC,KAC1B,CACLpD,MAAO,OACPC,MAAO,MACPqC,MAAO,CACL1C,OAAQ,CACN,CACEI,MAAO,SAAWoD,EAAY,GAC9BnD,MAAO,GACPqC,MAAO,CACLe,QAASA,CAACC,EAAaC,KACrBC,eAAc,CACZ,OACA,iBACA,SAEDC,GAAcH,EAAIrD,MAAQwD,EAAG,CAC5BC,MAAO,WACPC,KAAM,mBA8Cd,CACE3D,MAAO,SACPC,MAAO,GACPqC,MAAO,CACLe,QAAUC,IACRE,eAAc,CACZ,SACA,QAEDC,GAAcH,EAAIrD,MAAQwD,EAAG,CAC5BC,MAAO,WACPC,KAAM,mBAmBd,CACE3D,MAAO,MACPC,MAAO,GACPqC,MAAO,CACLe,QAAUC,IACRM,eAAeH,GAAcH,EAAIrD,MAAQwD,MAY/C,CACEzD,MAAO,WACPC,MAAO,GACPqC,MAAO,CACLe,QAAUC,IACRE,eAAc,CACZ,oBACA,eAEDC,GAAcH,EAAIrD,MAAQwD,EAAG,CAC5BC,MAAO,WACPC,KAAM,yBAyB1B,CACE5C,GAAI,WACJC,SAAU,eACVC,KAAMC,OAAU2C,sBAChBjB,OAAQ,CACNkB,YAAa,CACX,CAAE9D,MAAO,OAAQC,MAAO,gBACxB,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,gBAAiBC,MAAO,iBAGrCoC,QAASA,IAAM,CACb,CACErC,MAAO,sBACPC,MAAO,EACPqC,MAAO,CACL,gBAAmB,KAGvB,CACEtC,MAAO,wBACPC,MAAO,EACPqC,MAAO,CACL,gBAAmB,KAGvB,CACEtC,MAAO,sBACPC,MAAO,EACPqC,MAAO,CACL,gBAAmB,KAGvB,CACEtC,MAAO,oCACPC,MAAO,EACPqC,MAAO,CACL,gBAAmB,OAK3B,CACEvB,GAAI,cACJC,SAAU,aACVC,KAAMC,OAAU6C,QAChBtB,WAAYA,KAAM,EAClBuB,WAAYA,KACV,MAAMC,EAAeC,QAAQ,2BAC7B,OAAOD,IAGX,CACElD,GAAI,gCACJC,SAAU,8BACVC,KAAMC,OAAUiD,mBAChBvB,OAAQ,CACNwB,cAAc,GAEhBhD,cAAeA,CAACiD,EAAyBpE,KACvC,GAAIA,EAAMqE,WAA6B,SAAhBrE,EAAMD,MAC3B,OAAOqE,EAASE,IAAIC,IACH,QAAXA,EAAExE,QACJwE,EAAEF,WAAY,GACTE,IAEJ,GAAmB,QAAfvE,EAAMD,OAAmBC,EAAMqE,UAAW,CACnD,MAAMG,EAAYC,uBAAUL,EAAU,CAACrE,MAAO,SAC9CqE,EAASI,GAAWH,WAAY,EAGlC,GAAIrE,EAAMqE,WAA6B,YAAhBrE,EAAMD,MAAqB,CAChD,MAAM2E,EAAeD,uBAAUL,EAAU,CAACrE,MAAO,YACjDqE,EAASM,GAAc1C,UAAW,EAEpC,GAAIhC,EAAMqE,WAA6B,WAAhBrE,EAAMD,MAAoB,CAC/C,MAAM2E,EAAeD,uBAAUL,EAAU,CAACrE,MAAO,YACjDqE,EAASM,GAAc1C,UAAW,EAEpC,OAAOoC,GAETO,WAAW3E,GACT,OAAQA,EAAgC,KAAxB,CAAC,sBAEnBoC,QAAQA,IAAM,CACZ,CACErC,MAAO,MACPC,MAAO,MACP4E,YAAa,CACXC,MAAO,SACPC,KAAM,yBAGV,CACE/E,MAAO,gCACPC,MAAO,eAET,CACED,MAAO,MACPC,MAAO,MACP4E,YAAa,CACXC,MAAO,UACPC,KAAM,4CAGV,CACE/E,MAAO,SACPC,MAAO,UACP4E,YAAa,CACXC,MAAO,YACPC,KAAM,6BACNC,KAAM,cAGV,CACEhF,MAAO,UACPC,MAAO,WAET,CACED,MAAO,OACPC,MAAO,UAIb,CACEc,GAAI,aACJC,SAAU,oBACVC,KAAMC,OAAU6C,QAChBa,WAAW3E,GACT,OAAQA,EAAgC,KAAxB,CAAC,uBAGrB,CACEc,GAAI,aACJC,SAAU,qBACVC,KAAMC,OAAU6C,QAChBnB,OAAQ,CACNqC,WAAY,CACV,CACEC,KAAM,OACNJ,MAAO,SACPnB,KAAM,QACNwB,SAAS,EACTC,KAAM,GACNC,qBAAuBC,GACE,IAAhBA,EAAMC,MAEfC,QAASA,KACPC,MAAM,6BAGV,CACEP,KAAM,mBACNJ,MAAO,UACPnB,KAAM,QACNwB,SAAS,EACTC,KAAM,MACNC,qBAAuBC,GACE,IAAhBA,EAAMC,MAEfC,QAASA,KACPC,MAAM,mCAMhB,CACE1E,GAAI,gBACJC,SAAU,gBACVC,KAAMC,OAAUwE,gBAChBrD,QAASA,IAAO,CAAC,CACfrC,MAAO,iBACPC,MAAO,GACPqC,MAAO,CACLqD,OAAQ,CAAC,SAAU,UAAW,SAC9BpD,OAAQ,CAAC,GAAI,GAAI,GAAI,QAI3B,CACExB,GAAI,oBACJC,SAAU,mCACVC,KAAMC,OAAU6C,QAChBnB,OAAQ,CACNgD,iBAAkB,CAChB,QACA,YAIN,CACE7E,GAAI,kBACJC,SAAU,qCACVC,KAAMC,OAAU6C,QAChBnB,OAAQ,CACNqC,WAAY,CACV,CACEC,KAAM,aACNJ,MAAO,QACPnB,KAAM,QACNwB,SAAS,EACTC,KAAM,MACNC,qBAAuBC,GACE,IAAhBA,EAAMC,MAEfC,QAASA,KACPhF,KAAKX,YAAc,uBAM7B,CACEkB,GAAI,OACJC,SAAU,gBACVC,KAAMC,OAAU2E,WAElB,CACE9E,GAAI,QACJC,SAAU,iBACVC,KAAMC,OAAU4E,UAChBC,aAAa,EACb1D,QAASA,IAAM2D,EACfpD,OAAQ,CACNwB,cAAc,IAGlB,CACErD,GAAI,MACJC,SAAU,eACVC,KAAMC,OAAU+E,iBAElB,CACElF,GAAI,kBACJC,SAAU,yBACVC,KAAMC,OAAUiD,mBAChBvB,OAAQ,CACNwB,cAAc,GAEhBQ,WAAW3E,GACT,OAAQA,EAAgC,KAAxB,CAAC,sBAEnBoC,QAAQA,IAAM,CACZ,CACErC,MAAO,MACPC,MAAO,MACP4E,YAAa,CACXC,MAAO,SACPC,KAAM,yBAGV,CACE/E,MAAO,gCACPC,MAAO,cACPqE,WAAW,GAEb,CACEtE,MAAO,MACPC,MAAO,MACP4E,YAAa,CACXC,MAAO,UACPC,KAAM,4CAGV,CACE/E,MAAO,MACPC,MAAO,MACP4E,YAAa,CACXC,MAAO,YACPC,KAAM,6BACNC,KAAM,cAGV,CACEhF,MAAO,MACPC,MAAO,SAIb,CACEc,GAAI,mBACJC,SAAU,sCACVC,KAAMC,OAAU4E,UAChBC,aAAa,EACbnB,WAAW3E,GACT,OAAQA,EAAgC,KAAxB,CAAC,sBAEnBoC,QAASA,IAAM,CACb,CACErC,MAAO,aACPC,MAAO,cAET,CACED,MAAO,aACPC,MAAO,gBAIb,CACEc,GAAI,qBACJC,SAAU,gBACVC,KAAMC,OAAU4E,UAChBlB,WAAW3E,GACT,OAAQA,EAAgC,KAAxB,CAAC,sBAEnByC,UAAU/B,GACR,MAA2C,eAApCA,EAASuF,iBAAiBjG,OAEnCoC,QAASA,IAAM,CACb,CACErC,MAAO,WACPC,MAAO,cAIb,CACEc,GAAI,qBACJC,SAAU,gBACVC,KAAMC,OAAU4E,UAChBlB,WAAW3E,GACT,OAAQA,EAAgC,KAAxB,CAAC,sBAEnByC,UAAU/B,GACR,MAA2C,eAApCA,EAASuF,iBAAiBjG,OAEnCoC,QAASA,IAAK,CACZ,CACErC,MAAO,WACPC,MAAO,cAIb,CACEc,GAAI,wBACJC,SAAU,4BACVC,KAAMC,OAAU4E,UAChBC,aAAa,EACbnB,WAAW3E,GACT,OAAQA,EAAgC,KAAxB,CAAC,sBAEnBoC,QAASA,IAAK,CACZ,CACErC,MAAO,OACPC,MAAO,QAET,CACED,MAAO,OACPC,MAAO,UAIb,CACEc,GAAI,gBACJC,SAAU,oCACVC,KAAMC,OAAU4E,UAChBzD,QAAU8D,IACRvF,QAAQC,IAAIsF,GACL,KAGX,CACEpF,GAAI,YACJC,SAAU,gCACVC,KAAMC,OAAU4E,UAChBlB,WAAW3E,GACT,OAAQA,EAAgC,KAAxB,CAAC,sBAEnBoC,QAASA,IAAK,CACZ,CACErC,MAAO,MACPC,MAAO,OAET,CACED,MAAO,OACPC,MAAO,e,qBC5xBrB,MAAMmG,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASnH,KAErD","file":"js/chunk-2d22ca72.b2d0be9b.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"fields\", \"activeField\", \"onOnFinish\"]))\n}","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport MonthOptions from \"@/components/FormElements/Presets/MonthOptions\"\nimport { find, findIndex } from \"lodash\"\nimport keyboard, { numericKeypad, selectionList } from \"@/utils/PopupKeyboard\"\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    selfIndex: null as null | number,\n    activeField: '',\n    fields: [] as Array<Field>\n  }),\n  created() {\n    this.fields = this.getFields()\n  },\n  methods: {\n    onFinish(formData: any) {\n      console.log(formData)\n    },\n    testResultsFields(): Field {\n      return {\n        id: \"test_results\",\n        helpText: \"Test results\",\n        type: FieldType.TT_MULTIPLE_YES_NO,\n        onValueUpdate: (l: Option[]) => {\n          const results: Option[] = [...l]\n          const testOne = 'HIV Test 1 (Determin)'\n          const testTwo = 'HIV Test 2( Unigold)'\n          const testThree = 'HIV Test 3 (Bioline)'\n          const testOneRepeat = 'HIV Test 1 Repeat'\n          let testOneIsPositive = false\n          let testTwoIsPositive = false\n          results.forEach(r => {\n            switch(r.label) {\n              case testOne:\n                testOneIsPositive = r.value === 'Positive'\n                break;\n              case testTwo:\n                testTwoIsPositive = r.value === 'Positive'\n                break;\n            }\n          })\n          const disable = (test: string, disabled: boolean) => {\n            results.forEach(r => {\n              if (r.label === test) {\n                r.disabled = disabled\n                if (disabled) r.value = ''\n              }\n            })\n          }\n          const hasValue = (test: string) => l.some(d => d.label === test && d.value != '')\n          if (testOneIsPositive) {\n            disable(testTwo, false)\n          } else {\n            disable(testTwo, true)\n            disable(testThree, true)\n            disable(testOneRepeat, true)\n            return results\n          }\n          if (testOneIsPositive && testTwoIsPositive) {\n            disable(testThree, false)\n            disable(testOneRepeat, true)\n            return results\n          }\n          if (testOneIsPositive && !testTwoIsPositive && hasValue(testTwo)) {\n            disable(testOneRepeat, false)\n            disable(testThree, true)\n          }\n          return results\n        },\n        options: () => {\n          return [\n            {\n              label: 'HIV Test 1 (Determin)',\n              value: '',\n              other: {\n                  values: [\n                    { label: 'Positive', value: 'Positive' },\n                    { label: 'Negative', value: 'Negative'}\n                  ]\n              }\n            },\n            {\n              label: 'HIV Test 2( Unigold)',\n              value: '',\n              disabled: true,\n              other: {\n                  values: [\n                    { label: 'Positive', value: 'Positive' },\n                    { label: 'Negative', value: 'Negative'}\n                  ]\n              }\n            },\n            {\n              label: 'HIV Test 1 Repeat',\n              value: '',\n              disabled: true,\n              other: {\n                  values: [\n                    { label: 'Positive', value: 'Positive' },\n                    { label: 'Negative', value: 'Negative'}\n                  ]\n              }\n            },\n            {\n              label: 'HIV Test 3 (Bioline)',\n              value: '',\n              disabled: true,\n              other: {\n                  values: [\n                    { label: 'Positive', value: 'Positive' },\n                    { label: 'Negative', value: 'Negative'}\n                  ]\n              }\n            },\n            {\n              label: 'Syphilis result',\n              value: '',\n              other: {\n                  values: [\n                    { label: 'Positive', value: 'Positive' },\n                    { label: 'Negative', value: 'Negative'}\n                  ]\n              }\n            },\n            {\n              label: 'Hepatitis result',\n              value: '',\n              other: {\n                  values: [\n                    { label: 'Positive', value: 'Positive' },\n                    { label: 'Negative', value: 'Negative'}\n                  ]\n              }\n            }\n          ]\n        }\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: 'test_kit',\n          helpText: 'Kit information',\n          type: FieldType.TT_INPUT_ARRAY,\n          isRequired: () => true,\n          condition: (f: any) => true,\n          config: {\n            columns: [\n              { label: 'Kit Name'},\n              { label: 'Kit Lot No.'},\n              { label: 'Kit Expiry Date'}\n            ]\n          },\n          options: () => {\n            return [\n              {\n                label: 'Item A',\n                value: '',\n                other: {\n                  fields: [\n                    {\n                      label: 'Kit Name',\n                      value: '',\n                      other: {\n                        usefontBold: true,\n                      }\n                    },\n                    {\n                      label: 'Kit Lot No.',\n                      value: '1'\n                    },\n                    {\n                      label: 'Kit Expiry Date',\n                      value: '12/May/1994'\n                    }\n                  ]\n                }\n              },\n              {\n                label: 'Item A',\n                value: '',\n                other: {\n                  fields: [\n                    {\n                      label: 'Kit Name',\n                      value: '',\n                      other: {\n                        usefontBold: true,\n                      }\n                    },\n                    {\n                      label: 'Kit Lot No.',\n                      value: '1'\n                    },\n                    {\n                      label: 'Kit Expiry Date',\n                      value: '12/May/1994'\n                    }\n                  ]\n                }\n              },\n              {\n                label: 'Item A',\n                value: '',\n                other: {\n                  fields: [\n                    {\n                      label: 'Kit Name',\n                      value: '',\n                      other: {\n                        usefontBold: true,\n                      }\n                    },\n                    {\n                      label: 'Kit Lot No.',\n                      value: '1'\n                    },\n                    {\n                      label: 'Kit Expiry Date',\n                      value: '12/May/1994'\n                    }\n                  ]\n                }\n              },\n              {\n                label: 'Item A',\n                value: '',\n                other: {\n                  fields: [\n                    {\n                      label: 'Kit Name',\n                      value: '',\n                      other: {\n                        usefontBold: true,\n                      }\n                    },\n                    {\n                      label: 'Kit Lot No.',\n                      value: '1'\n                    },\n                    {\n                      label: 'Kit Expiry Date',\n                      value: '12/May/1994'\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        },\n        this.testResultsFields(),\n        {\n          id: \"hidden_field\",\n          helpText: 'Hidden Field',\n          type: FieldType.TT_INPUT_ARRAY,\n          config: {\n            columns: [\n              {\n                label: 'End-User'\n              },\n              {\n                label: 'Gender'\n              },\n              {\n                label: 'Age'\n              },\n              {\n                label: 'Approach'\n              }\n            ]\n          },\n          isRequired: () => true,\n          options: (f: any) => {\n            if (f.hidden_field) return f.hidden_field\n            return Array.from({length: 4}, (_, cellIndex) => {\n              return {\n                label: 'item',\n                value: 'N/A',\n                other: {\n                  fields: [\n                    {\n                      label: 'User ' + (cellIndex + 1),\n                      value: '',\n                      other: {\n                        onclick: (val: Option, rows: any) => {\n                          selectionList([\n                            'Self',\n                            'Sexual partner',\n                            'Other'\n                          ], \n                          (v: string) => val.value = v, {\n                            title: 'Approach',\n                            size: 'small-modal' \n                          })\n                          // keyboard({\n                          //   id: 'end_user',\n                          //   helpText: 'Select End-User',\n                          //   type: FieldType.TT_SELECT,\n                          //   options: () => {\n                          //     return [\n                          //       { label: 'Self', value: 'Self', disabled: (this.selfIndex != null ? this.selfIndex != cellIndex : false) },\n                          //       { label: 'Sexual partner', value: 'Sexual Partner' },\n                          //       { label: 'Other', value: 'Other' }\n                          //     ]\n                          //   }\n                          // }, \n                          // (v: Option) => {\n                          //   if (!v) {\n                          //     if (this.selfIndex === cellIndex) {\n                          //       this.selfIndex = null\n                          //       rows.forEach((d: any) => {\n                          //         d.value = ''\n                          //         d.disabled = false\n                          //       })\n                          //     }\n                          //     val.value = ''\n                          //     return\n                          //   }\n                          //   if (this.selfIndex === cellIndex && v.value != 'Self') {\n                          //     this.selfIndex = null\n                          //     rows.forEach((d: any) => {\n                          //       d.value = ''\n                          //       d.disabled = false\n                          //     })\n                          //   } else if (v.value === 'Self') {\n                          //     this.selfIndex = cellIndex\n                          //     rows.forEach((d: any, index: number) => {\n                          //       if (index > 0) {\n                          //         d.value = 'N/A'\n                          //         d.disabled = true\n                          //       }\n                          //     })\n                          //   }\n                          //   val.value = v.value\n                          // })\n                        }\n                      }\n                    },\n                    {\n                      label: 'Gender',\n                      value: '',\n                      other: {\n                        onclick: (val: Option) => {\n                          selectionList([\n                            'Female',\n                            'Male'\n                          ], \n                          (v: string) => val.value = v, {\n                            title: 'Approach',\n                            size: 'small-modal' \n                          })\n                          // keyboard({\n                          //   id: 'gender',\n                          //   helpText: 'Select Gender',\n                          //   type: FieldType.TT_SELECT,\n                          //   options: () => {\n                          //     return [\n                          //       { label: 'Male', value: 'Male' },\n                          //       { label: 'Female', value: 'Female' }\n                          //     ]\n                          //   }\n                          // }, \n                          // (v: Option) => {\n                          //   val.value = v ? v.value : ''\n                          // })\n                        }\n                      }\n                    },\n                    {\n                      label: 'Age',\n                      value: '',\n                      other: {\n                        onclick: (val: Option) => {\n                          numericKeypad((v: number) => val.value = v)\n                          // keyboard({\n                          //   id: 'age',\n                          //   helpText: 'Enter recepient age',\n                          //   type: FieldType.TT_NUMBER\n                          // }, \n                          // (v: Option) => {\n                          //   val.value = v ? v.value : ''\n                          // })\n                        }\n                      }\n                    },\n                    {\n                      label: 'Approach',\n                      value: '',\n                      other: {\n                        onclick: (val: Option) => {\n                          selectionList([\n                            'Directly-assisted',\n                            'Un-assisted'\n                          ], \n                          (v: string) => val.value = v, {\n                            title: 'Approach',\n                            size: 'small-modal' \n                          })\n                          // keyboard({\n                          //   id: 'approach',\n                          //   helpText: 'Select approach',\n                          //   type: FieldType.TT_SELECT,\n                          //   options: () => {\n                          //     return [\n                          //       { label: 'Directly-assisted', value: 'Directly-assisted' },\n                          //       { label: 'Un-assisted', value: 'Un-assisted' }\n                          //     ]\n                          //   }\n                          // }, \n                          // (v: Option) => {\n                          //   val.value = v ? v.value : ''\n                          // })\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            })\n          }\n        },\n        {\n          id: 'dispense',\n          helpText: 'Dispensation',\n          type: FieldType.TT_DISPENSATION_INPUT,\n          config: {\n            toolbarInfo: [\n              { label: 'Name', value: 'Test patient' },\n              { label: 'Gender', value: 'Female' },\n              { label: 'Date Of Birth', value: '12/May/1994' }\n            ]\n          },\n          options: () => [\n            {\n              label: 'TDF300/3TC300/DTG50',\n              value: 0,\n              other: {\n                'amounted_needed': 30\n              }\n            },\n            {\n              label: 'Cotrimoxazole (960mg)',\n              value: 0,\n              other: {\n                'amounted_needed': 30\n              }\n            },\n            {\n              label: 'Rifapentine (150mg)',\n              value: 0,\n              other: {\n                'amounted_needed': 30\n              }\n            },\n            {\n              label: 'INH or H (Isoniazid 100mg tablet)',\n              value: 0,\n              other: {\n                'amounted_needed': 30\n              }\n            }\n          ]\n        },\n        {\n          id: 'hello_world',\n          helpText: 'BeforeNext',\n          type: FieldType.TT_TEXT,\n          isRequired: () => true,\n          beforeNext: () => {\n            const confirmation = confirm('Do you want to continue')\n            return confirmation\n          }\n        },\n        {\n          id: \"onvalue_hooks_multiple_select\",\n          helpText: \"Dynamically toggling values\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          config: {\n            showKeyboard: false\n          },\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            if (value.isChecked && value.label === 'None') {\n              return listData.map(i => {\n                if (i.label != 'None') \n                  i.isChecked = false\n                return i\n              })\n            } else if (value.label != 'None' && value.isChecked) {\n              const noneIndex = findIndex(listData, {label: 'None'})\n              listData[noneIndex].isChecked = false\n            }\n\n            if (value.isChecked && value.label === 'Disable') {\n              const disableIndex = findIndex(listData, {label: 'Disable'})\n              listData[disableIndex].disabled = true\n            }\n            if (value.isChecked && value.label === 'Enable') {\n              const disableIndex = findIndex(listData, {label: 'Disable'})\n              listData[disableIndex].disabled = false\n            }\n            return listData\n          },\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          },\n          options:()=> ([\n            {\n              label: \"Foo\",\n              value: \"Foo\",\n              description: {\n                color: 'danger',\n                text: 'Optional description'\n              }\n            },\n            {\n              label: \"This is prechecked by default\",\n              value: \"pre_checked\",\n            },\n            {\n              label: \"Bar\",\n              value: \"Bar\",\n              description: {\n                color: 'warning',\n                text: 'This has discription of different color'\n              }\n            },\n            {\n              label: \"Enable\",\n              value: \"enabled\",\n              description: {\n                color: 'secondary',\n                text: 'I only appear when checked',\n                show: 'onChecked'\n              }\n            },\n            {\n              label: \"Disable\",\n              value: \"disable\",\n            },\n            {\n              label: \"None\",\n              value: \"None\",\n            }\n          ]),\n        },\n        {\n          id: \"name_field\",\n          helpText: \"What is your name\",\n          type: FieldType.TT_TEXT,\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          }\n        },\n        {\n          id: \"custom_btn\",\n          helpText: \"Show custom button\",\n          type: FieldType.TT_TEXT,\n          config: {\n            footerBtns: [\n              {\n                name: 'Void',\n                color: 'danger',\n                size: 'large',\n                visible: false,\n                slot: '',\n                visibleOnStateChange: (state: any) => {\n                  return state.index === 1\n                },\n                onClick: () => {\n                  alert('Record has been voided!')\n                }\n              },\n              {\n                name: 'Custom Something',\n                color: 'primary',\n                size: 'large',\n                visible: false,\n                slot: 'end',\n                visibleOnStateChange: (state: any) => {\n                  return state.index === 1\n                },\n                onClick: () => {\n                  alert('YaY! Custom Button Clicked')\n                }\n              },\n            ]\n          }\n        },\n        {\n          id: \"patient_chart\",\n          helpText: \"Patient Chart\",\n          type: FieldType.TT_WEIGHT_CHART,\n          options: () => ([{\n            label: 'Patient weight',\n            value: 54,\n            other: {\n              labels: ['10 Jan', '11 June', '8 Aug'],\n              values: [65, 38, 89, 57]\n            }\n          }])\n        },\n        {\n          id: 'hide_default_btns',\n          helpText: 'Default buttons have been hidden',\n          type: FieldType.TT_TEXT,\n          config: {\n            hiddenFooterBtns: [\n              'Clear',\n              'Cancel'\n            ]\n          }\n        },\n        {\n          id: 'skip_next_field',\n          helpText: 'Skip Next Field with custom button',\n          type: FieldType.TT_TEXT,\n          config: {\n            footerBtns: [\n              {\n                name: 'Skip Dates',\n                color: 'light',\n                size: 'large',\n                visible: false,\n                slot: 'end',\n                visibleOnStateChange: (state: any) => {\n                  return state.index === 3\n                },\n                onClick: () => {\n                  this.activeField = 'multiple_select'\n                }\n              }\n            ]\n          }\n        },\n        {\n          id: \"year\",\n          helpText: \"Year of birth\",\n          type: FieldType.TT_NUMBER\n        },\n        {\n          id: \"month\",\n          helpText: \"Month of birth\",\n          type: FieldType.TT_SELECT,\n          requireNext: false,\n          options: () => MonthOptions,\n          config: {\n            showKeyboard: false\n          }\n        },\n        {\n          id: \"day\",\n          helpText: \"Day of birth\",\n          type: FieldType.TT_MONTHLY_DAYS\n        },\n        {\n          id: \"multiple_select\",\n          helpText: \"Select Multiple values\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          config: {\n            showKeyboard: false\n          },\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          },\n          options:()=> ([\n            {\n              label: \"Foo\",\n              value: \"Foo\",\n              description: {\n                color: 'danger',\n                text: 'Optional description'\n              }\n            },\n            {\n              label: \"This is prechecked by default\",\n              value: \"pre_checked\",\n              isChecked: true\n            },\n            {\n              label: \"Bar\",\n              value: \"Bar\",\n              description: {\n                color: 'warning',\n                text: 'This has discription of different color'\n              }\n            },\n            {\n              label: \"Baz\",\n              value: \"Baz\",\n              description: {\n                color: 'secondary',\n                text: 'I only appear when checked',\n                show: 'onChecked'\n              }\n            },\n            {\n              label: \"Bar\",\n              value: \"Bar\",\n            }\n          ]),\n        },\n        {\n          id: \"conditional_data\",\n          helpText: \"Conditionally display next question\",\n          type: FieldType.TT_SELECT,\n          requireNext: false,\n          validation(value: any): null | Array<string>{\n            return !value ? [\"Value is required\"] : null;\n          },\n          options: ()=> ([\n            {\n              label: \"Show Games\",\n              value: \"Show Games\",\n            },\n            {\n              label: \"Show Music\",\n              value: \"Show Music\",\n            },\n          ]),\n        },\n        {\n          id: \"music_presentation\",\n          helpText: \"Showing Music\",\n          type: FieldType.TT_SELECT,\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          },\n          condition(formData: any) {\n            return formData.conditional_data.value === \"Show Music\";\n          },\n          options: ()=> ([\n            {\n              label: \"No Music\",\n              value: \"No Music\",\n            },\n          ]),\n        },\n        {\n          id: \"games_presentation\",\n          helpText: \"Showing Games\",\n          type: FieldType.TT_SELECT,\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          },\n          condition(formData: any) {\n            return formData.conditional_data.value === \"Show Games\";\n          },\n          options: ()=>([\n            {\n              label: \"No Games\",\n              value: \"No Games\",\n            },\n          ]),\n        },\n        {\n          id: \"does_not_require_next\",\n          helpText: \"Click on value to proceed\",\n          type: FieldType.TT_SELECT,\n          requireNext: false,\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          },\n          options: ()=>([\n            {\n              label: \"Duke\",\n              value: \"Duke\",\n            },\n            {\n              label: \"Dork\",\n              value: \"Dork\",\n            },\n          ]),\n        },\n        {\n          id: \"option_params\",\n          helpText: \"Console.log Prop sent via options\",\n          type: FieldType.TT_SELECT, \n          options: (fdata: any) => {\n            console.log(fdata)\n            return []\n          }\n        },\n        {\n          id: \"validated\",\n          helpText: \"Value is Required before next\",\n          type: FieldType.TT_SELECT,\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          },\n          options: ()=>([\n            {\n              label: \"Fur\",\n              value: \"Fur\",\n            },\n            {\n              label: \"Fume\",\n              value: \"Fame\",\n            },\n          ]),\n        },\n      ]\n    }\n  }\n});\n","import { render } from \"./Example.vue?vue&type=template&id=65d07b9e&ts=true\"\nimport script from \"./Example.vue?vue&type=script&lang=ts\"\nexport * from \"./Example.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}