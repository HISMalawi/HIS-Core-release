{"version":3,"sources":["webpack:///./src/views/ProgramManagement.vue?08a2","webpack:///./src/views/ProgramManagement.vue","webpack:///./src/views/ProgramManagement.vue?d944","webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/utils/ActionSheetHelpers/VoidReason.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","key","hisFormKey","activeField","fieldComponent","skipSummary","fields","onOnIndex","$event","onOnFinish","onFinish","defineComponent","components","HisStandardForm","data","patient","patientProgram","activeProgram","programSelectionFieldContext","watch","field","this","handler","params","patient_id","PatientProgramService","getProgramSelectionField","getProgramEnrollmentField","getProgramOutcomeDateFields","getProgramStateField","getTransferOutFacilityFields","getStateOutcomeDateFields","deep","immediate","methods","f","onEnrollProgram","onProgramState","Store","invalidate","patientPrograms","getPrograms","programs","map","p","label","program","name","value","program_id","other","programStates","patient_states","s","startDate","HisDate","toStandardHisDisplayFormat","start_date","endDate","end_date","actions","getStateActions","allPrograms","hasPrograms","listData","ProgramService","getAllPrograms","disabled","find","programWorkflows","getProgramWorkflows","getProgramId","workflows","isEmpty","states","program_workflow_state_id","color","action","pg","sIndex","onVoidState","patient_state_id","push","printTransferout","onUpdateState","toastWarning","updateState","transfer_out_state","transferOutEncounter","toastSuccess","toastDanger","programId","enrollProgram","state","stateIndex","popVoidReason","reason","setStateId","voidState","splice","onVoidProgram","patientProgramId","getPatientProgramId","voidProgram","fieldContext","programIndex","findIndex","setPatientProgramId","setProgramId","console","error","generateDateFields","id","helpText","condition","program_state","required","minDate","getProgramDate","maxDate","getSessionDate","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","computeValue","date","setStateDate","type","FieldType","TT_SELECT","validation","val","Validation","options","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","unload","estimateDateFromAge","setProgramDate","btnVisibilityCondition","form","program_selection","TT_PROGRAM_SELECTION","onload","context","onValue","patient_program_id","toStandardHisFormat","date_enrolled","hiddenFooterBtns","footerBtns","slot","visible","default","onClick","__exports__","DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","callback","size","optionsActionSheet","role","modal","selection","_resolveDynamicComponent","formType","cancelDestinationPath","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","Object","formData","computedData","$emit","i","getYearField","showUnknown","primaryFunctions","appearInSummary","TT_TEXT","customKeyboard","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","parseInt","getDefaultDate","datePart","defaultValue","split","year","month","day","d","validateMinMax","computed","min","Date","max","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","v","toString","c","StandardValidations","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","computedValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","every","ageEstimateRegex","dayjs","Service","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","LocationService","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","tag","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-c78071a2.776a2637.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    key: _ctx.hisFormKey,\n    activeField: _ctx.fieldComponent,\n    skipSummary: true,\n    fields: _ctx.fields,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"activeField\", \"fields\", \"onOnFinish\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, toastSuccess, toastDanger } from \"@/utils/Alerts\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { EstimationFieldType, generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { ProgramService } from \"@/services/program_service\"\nimport { PatientProgramService } from \"@/services/patient_program_service\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { find, findIndex, isEmpty } from 'lodash'\nimport HisDate from \"@/utils/Date\"\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\"\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        hisFormKey: 0 as number,\n        patient: {} as any,\n        patientProgram: {} as any,\n        fields: [] as Array<Field>,\n        fieldComponent: '' as string,\n        activeField: '' as string,\n        activeProgram: {} as any,\n        programSelectionFieldContext: {} as any\n    }),\n    watch: {\n        fieldComponent(field: string){\n            if (field) {\n                this.activeField = field\n            }\n        },\n        activeField(field: string) {\n            if (field === 'program_selection') {\n                // Recent hisFormKey to re-render everything\n                this.hisFormKey += 1\n            }\n        },\n        '$route': {\n            async handler({params}: any) {\n                if (params && params.patient_id) {\n                    this.patient = params.patient_id\n                    this.patientProgram = new PatientProgramService(this.patient)\n                    this.fields = [\n                        this.getProgramSelectionField(),\n                        this.getProgramEnrollmentField(),\n                        ...this.getProgramOutcomeDateFields(),\n                        this.getProgramStateField(),\n                        this.getTransferOutFacilityFields(),\n                        ...this.getStateOutcomeDateFields()\n                    ]\n                }\n            },\n            deep: true,\n            immediate: true\n        }\n    },\n    methods: {\n        async onFinish(f: any) {\n            switch(this.activeField) {\n                case 'program_enrollment':\n                    await this.onEnrollProgram()\n                    break;\n                case 'program_state':\n                    await this.onProgramState(f)\n                    break;\n            }\n            Store.invalidate('PATIENT_PROGRAM')\n        },\n        async patientPrograms() {\n            const programs = await this.patientProgram.getPrograms()\n            return programs.map((p: any) => ({\n                label: p.program.name,\n                value: p.program.program_id,\n                other: {\n                    ...p,\n                    programStates: p.patient_states.map((s: any) =>{\n                        return {\n                            name: s.name,\n                            startDate: HisDate.toStandardHisDisplayFormat(s.start_date),\n                            endDate: s.end_date ? HisDate.toStandardHisDisplayFormat(s.end_date): 'N/A',\n                            actions: this.getStateActions(s)\n                        }\n                    }) \n                }\n            }))\n        },\n        async allPrograms() {\n            const hasPrograms = this.programSelectionFieldContext.listData\n            const programs = await ProgramService.getAllPrograms()\n            // Build programs while excluding already existing ones\n            return programs.map((p: any) => ({\n                label: p.name,\n                value: p.program_id,\n                disabled: find(hasPrograms, { value: p.program_id }),\n                other: { ...p }\n            }))\n        },\n        async programWorkflows() {\n            const workflows = await ProgramService.getProgramWorkflows(this.patientProgram.getProgramId())\n            if (!isEmpty(workflows)) {\n                return workflows[0].states.map((s: any) => ({\n                    label: s.name, \n                    value: s.program_workflow_state_id,\n                    other: { ...s }\n                }))\n            }\n        },\n        getStateActions(s: any) {\n            const actions = [\n                {\n                    name: 'Void',\n                    color: 'danger',\n                    action: async (pg: any, sIndex: number) => {\n                        await this.onVoidState(s.patient_state_id, pg, sIndex)\n                    } \n                }\n            ]\n            if (s.name === 'Patient transferred out') {\n                actions.push({\n                    name: 'Print',\n                    color: 'primary',\n                    action: async () => await this.patientProgram.printTransferout(s.start_date)\n                })\n            }\n            return actions\n        },\n        onUpdateState() {\n            if (this.patientProgram.getProgramId() === -1) {\n                return toastWarning('Please select a program')\n            }\n            this.fieldComponent = 'program_state'\n        },\n        async onProgramState(f: any) {\n            try {\n                await this.patientProgram.updateState()\n                this.fieldComponent = 'program_selection'\n                if (f.transfer_out_state) {\n                    await this.patientProgram.transferOutEncounter(f.transfer_out_state.other)\n                } \n                toastSuccess('State has been updated')\n            } catch(e) {\n                toastDanger(e)\n            }\n        },\n        async onEnrollProgram() {\n            const programId = this.patientProgram.getProgramId()\n            if (programId === -1) {\n                return toastWarning('Please select a program')\n            }\n            try {\n                this.activeProgram = await this.patientProgram.enrollProgram()\n                this.fieldComponent = 'program_state'\n                toastSuccess('Patient has been enrolled!')\n            }catch(e) {\n                this.activeProgram = {}\n                toastDanger(e)\n            }\n        },\n        async onVoidState(state: any, activeProgram: any, stateIndex: number) {\n            await popVoidReason(async (reason: string) => {\n                try {\n                    this.patientProgram.setStateId(state)\n                    await this.patientProgram.voidState(reason)\n                    this.patientProgram.setStateId(-1)\n                    activeProgram.other.programStates.splice(stateIndex, 1)\n                    toastSuccess('State has been voided')\n                }catch(e) {\n                  toastDanger(e)\n                }\n            })\n        },\n        async onVoidProgram() {\n            const patientProgramId = this.patientProgram.getPatientProgramId()\n            if (patientProgramId === -1) {\n                return toastWarning('Please select a program')\n            }\n            await popVoidReason(async (reason: string) => {\n                try {\n                    await this.patientProgram.voidProgram(reason)\n                    const fieldContext = this.programSelectionFieldContext\n                    const programIndex = findIndex(fieldContext.listData, { value: this.patientProgram.getProgramId() })\n                    fieldContext.listData.splice(programIndex, 1)\n                    fieldContext.activeProgram = {}\n                    this.patientProgram.setPatientProgramId(-1)\n                    this.patientProgram.setProgramId(-1)\n                    toastSuccess('Program removed')\n                } catch(e) {\n                    console.error(e)\n                    toastDanger(e)\n                }\n            })\n        },\n        getStateOutcomeDateFields(): Array<Field> {\n            return generateDateFields({\n                id: 'state_outcome_date',\n                helpText: 'State',\n                condition: (f: any) => f.program_state,\n                required: true,\n                minDate: () => this.patientProgram.getProgramDate(),\n                maxDate: () => ProgramService.getSessionDate(),\n                estimation: {\n                    allowUnknown: true,\n                    estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                },\n                computeValue: (date: string) => this.patientProgram.setStateDate(date)\n            }, this.patientProgram.getProgramDate() || ProgramService.getSessionDate())\n        },\n        getTransferOutFacilityFields(): Field {\n            return {\n                id: \"transfer_out_state\",\n                helpText: 'Please Select facility name',\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                condition: (f: any) => f.program_state.label === 'Patient transferred out',\n                options: (_: any, filter='') => getFacilities(filter),\n                config: {\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            }\n        },\n        getProgramStateField(): Field {\n            return {\n                id: \"program_state\",\n                helpText: \"State\",\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                options: () => this.programWorkflows(),\n                condition: () => this.activeField === 'program_state',\n                unload: (val: Option) => this.patientProgram.setStateId(val.value)\n            }\n        },\n        getProgramEnrollmentField(): Field {\n            return {\n                id: \"program_enrollment\",\n                helpText: \"Please select a programme\",\n                type: FieldType.TT_SELECT,\n                condition: () => this.activeField === 'program_enrollment',\n                unload: (val: Option) => this.patientProgram.setProgramId(val.value),\n                options: () => this.allPrograms(),\n                validation: (val: any) => Validation.required(val),\n                config: {\n                    showKeyboard: true\n                }\n            }\n        },\n        getProgramOutcomeDateFields(): Array<Field> {\n            return generateDateFields({\n                id: 'program_outcome_date',\n                helpText: 'Outcome',\n                required: true,\n                minDate: () => HisDate.estimateDateFromAge(100),\n                maxDate: () => ProgramService.getSessionDate(),\n                condition: () => this.activeField === 'program_enrollment',\n                estimation: {\n                    allowUnknown: true,\n                    estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                },\n                computeValue: (date: string) => this.patientProgram.setProgramDate(date)\n            }, ProgramService.getSessionDate())\n        },\n        getProgramSelectionField(): Field {\n            const btnVisibilityCondition = (form: any) => {\n                return !isEmpty(form.program_selection)\n            }\n            return {\n                id: 'program_selection',\n                helpText: 'Programs',\n                type: FieldType.TT_PROGRAM_SELECTION,\n                onload: (context: any) => {\n                    this.activeField = 'program_selection'\n                    this.programSelectionFieldContext = context\n                },\n                onValue: (val: Option) => {\n                    if (val) {\n                        this.activeProgram = val.other\n                        this.patientProgram.setProgramId(val.value)\n                        this.patientProgram.setPatientProgramId(val.other.patient_program_id)\n                        this.patientProgram.setProgramDate(\n                            HisDate.toStandardHisFormat(val.other.date_enrolled)\n                        )\n                    }\n                    return true\n                },\n                validation: (val: any) => Validation.required(val),\n                options: () => this.patientPrograms(),\n                config: {\n                    onVoidState: this.onVoidState,\n                    hiddenFooterBtns: [\n                        'Back',\n                        'Next',\n                        'Clear'\n                    ],\n                    footerBtns: [\n                        {\n                            name: 'Void Program',\n                            slot: 'end',\n                            color: 'danger',\n                            state: {\n                                visible: {\n                                    default: (_: any, form: any) => btnVisibilityCondition(form),\n                                    onValue: (_: any, form: any) => btnVisibilityCondition(form)\n                                }\n                            },\n                            onClick:  async () => {\n                                await this.onVoidProgram()\n                            }\n                        },\n                        {\n                            name: 'Update state',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: (_: any, form: any) => btnVisibilityCondition(form),\n                                    onValue: (_: any, form: any) => btnVisibilityCondition(form)\n                                }\n                            },\n                            onClick: async () => {\n                                await this.onUpdateState()\n                            }\n                        },\n                        {\n                            name: 'Enroll',\n                            color: 'success',\n                            slot: 'end',\n                            onClick: () => {\n                                this.fieldComponent = 'program_enrollment'\n                            }\n                        }\n                    ] \n                }\n            }\n        }\n    }\n})\n","import { render } from \"./ProgramManagement.vue?vue&type=template&id=6fcecaab&ts=true\"\nimport script from \"./ProgramManagement.vue?vue&type=script&lang=ts\"\nexport * from \"./ProgramManagement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { optionsActionSheet } from '@/utils/ActionSheets'\n\nexport default async function popVoidReason(callback: Function, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: Function;\n    required?: boolean;\n    defaultValue?: Function;\n    beforeNext?: Function;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: Function;\n    appearInSummary?: Function;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n"],"sourceRoot":""}