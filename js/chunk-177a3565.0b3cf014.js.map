{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/apps/ART/services/consultation_service.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/views/encounters/hypertension_diagnosis.vue?bd9d","webpack:///./src/apps/ART/views/encounters/hypertension_diagnosis.vue","webpack:///./src/apps/ART/views/encounters/hypertension_diagnosis.vue?5d33"],"names":["DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","ConsultationService","patientID","providerID","AppEncounterService","getJson","this","ObservationService","getFirstObs","obs","value_text","match","obsInValidPeriod","getProgramID","date","getFirstValueCoded","id","req","isEmpty","lastScreened","duration","dayjs","diff","getFirstValueText","secondCheck","isTL","value_coded","tlObs","fpObs","drugs","uniqueDrugs","forEach","drug","drug_inventory_id","label","values","familyPlanningLogic","selected","map","data","value","isChecked","disabled","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","patient","fields","facts","ready","watch","handler","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","split","username","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","person","names","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","mapOptions","options","option","yesNoUnknownOptions","resolveObs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","EstimationFieldType","getYearField","showUnknown","primaryFunctions","helpText","appearInSummary","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","getDefaultDate","form","field","datePart","defaultValue","year","month","day","validateMinMax","minDate","min","Date","maxDate","max","generateDateFields","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","v","validation","c","StandardValidations","isNaN","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","val","computeValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","estimationFieldType","every","ageEstimateRegex","Service","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD","isCondition","ignored","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","mixins","EncounterMixinVue","consultation","getFields","createEncounter","saveObservationList","back","Validation","buildValueCoded","has_hypertension","buildValueDate"],"mappings":"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","file":"js/chunk-177a3565.0b3cf014.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { ObservationService } from \"@/services/observation_service\";\nimport dayjs from \"dayjs\";\nimport { isEmpty } from \"lodash\";\nimport { DrugOrderService } from \"@/services/drug_order_service\"\n\nexport class ConsultationService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 53, providerID);\n  }\n  getFamilyPlanningMethods() {\n    return [\n      \"ORAL CONTRACEPTIVE PILLS\",\n      \"DEPO-PROVERA\",\n      \"INTRAUTERINE CONTRACEPTION\",\n      \"CONTRACEPTIVE IMPLANT\",\n      \"MALE CONDOMS\",\n      \"FEMALE CONDOMS\",\n      \"TUBAL LIGATION\",\n      \"NONE\",\n    ];\n  }\n\n  async getTptTreatmentStatus() {\n    return AppEncounterService.getJson(`/patients/${this.patientID}/tpt_status`)\n  }\n\n  async patientHitMenopause() {\n    const obs = await ObservationService.getFirstObs(\n      this.patientID, 'Why does the woman not use birth control', \n    )\n    return obs && typeof obs?.value_text === 'string'\n      ? (obs.value_text.match(/menopause/i) ? true : false)\n      && AppEncounterService.obsInValidPeriod(obs)\n      : false\n  }\n\n  async hasTreatmentHistoryObs() {\n    const obs = await ObservationService.getFirstObs(this.patientID, 'Previous TB treatment history')\n    return obs && AppEncounterService.obsInValidPeriod(obs)\n  }\n\n  getDrugSideEffects() {\n    return AppEncounterService.getJson(`programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/medication_side_effects`, { \n      date: this.date \n    })\n  }\n\n  getClient() {\n    return AppEncounterService.getFirstValueCoded(this.patientID, 'Patient present');\n  }\n\n  async clientDueForCxCa() {\n    const req: any = await AppEncounterService.getJson(`last_cxca_screening_details`, {\n      id: this.patientID, date: this.date\n    })\n    if (!isEmpty(req)) {\n      const lastScreened = req['date_screened']\n      const duration = dayjs(this.date).diff(lastScreened, 'years')\n      return duration >= 1\n    }\n    return true\n  }\nasync clientHasHadAHysterectomy() {\n    const req: any = await AppEncounterService.getFirstValueCoded(this.patientID, 'Reason for NOT offering CxCa'); \n    if(req === \"Hysterectomy\") {\n      return true\n    }\n    const secondCheck: any = await AppEncounterService.getFirstValueText(this.patientID, 'Treatment'); \n    if(secondCheck === \"Hysterectomy\") {\n      return true\n    }\n    return false\n  }\n  async getTLObs() {\n    const isTL = ((obs: any) => obs && obs.value_coded === 'Tubal ligation' && AppEncounterService.obsInValidPeriod(obs))\n    const tlObs = await AppEncounterService.getFirstObs(this.patientID, 'Family planning')\n    if (isTL(tlObs)) {\n      return isTL(tlObs)\n    } else  {\n      const fpObs = await AppEncounterService.getFirstObs(this.patientID, 'Method of family planning')\n      return isTL(fpObs)\n    }\n  }\n  async getPreviousDrugs() {\n\n    const drugs = await AppEncounterService.getJson(\n      `patients/${this.patientID}/drugs_received`\n    )\n\n    if (!drugs) return\n\n    const uniqueDrugs = {} as any\n    drugs.forEach((drug: DrugInterface) => {\n      uniqueDrugs[drug.drug_inventory_id] = drug;\n    })\n    return uniqueDrugs;\n  }\n  familyPlanningMethods(label: string, values: any[]) {\n    const familyPlanningLogic: any = {\n      \"ORAL CONTRACEPTIVE PILLS\": {\n        \"DEPO-PROVERA\": 'N', \"INTRAUTERINE CONTRACEPTION\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"DEPO-PROVERA\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"INTRAUTERINE CONTRACEPTION\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"INTRAUTERINE CONTRACEPTION\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"CONTRACEPTIVE IMPLANT\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"MALE CONDOMS\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'Y', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'Y',\n        'CONTRACEPTIVE IMPLANT': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'Y', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'Y'\n      },\n      \"FEMALE CONDOMS\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'Y', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'Y',\n        'CONTRACEPTIVE IMPLANT': 'Y', 'MALE CONDOMS': 'Y', 'RYTHM METHOD': 'Y', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'Y'\n      },\n      \"RYTHM METHOD\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'CONTRACEPTIVE IMPLANT': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"TUBAL LIGATION\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'N', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'N', 'RYTHM METHOD': 'N',\n        'VASECTOMY': 'N',\n      },\n      \"VASECTOMY\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'Y', 'RYTHM METHOD': 'N',\n        'TUBAL LIGATION': 'N'\n      },\n      \"NONE\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'N', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'N', 'RYTHM METHOD': 'N',\n        'TUBAL LIGATION': 'N'\n      }\n    }\n    const selected = familyPlanningLogic[label];\n    return values.map(data => {\n      if (selected[data.label] === \"N\") {\n        return {\n          label: data.label,\n          value: data.value,\n          isChecked: false,\n          disabled: true,\n        }\n      }\n      else {\n        return {\n          label: data.label,\n          value: data.value,\n          isChecked: data.isChecked,\n          disabled: false,\n        }\n      }\n\n    })\n  }\n\n}","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: Function;\n    required?: boolean;\n    defaultValue?: Function;\n    beforeNext?: Function;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: Function;\n    appearInSummary?: Function;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    skipSummary: true,\n    onFinishAction: _ctx.onFinish\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { ConsultationService } from \"@/apps/ART/services/consultation_service\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport { ObservationService } from \"@/services/observation_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    consultation: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready)  {\n          this.consultation = new ConsultationService(this.patientID, this.providerID)\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      await this.consultation.createEncounter();\n      const obs = await this.resolveObs(computedData)\n      await this.consultation.saveObservationList(obs)\n      this.$router.back()\n    },\n    getFields(): Field[] {\n      return [\n        {\n          id: \"has_hypertension\",\n          helpText: \"Does the patient have hypertension\",\n          type: FieldType.TT_SELECT,\n          options: () => this.yesNoOptions(),\n          validation: (val: any) => Validation.required(val),\n          computedValue: (v: Option) => ObservationService.buildValueCoded(\"Patient has hypertension\", `${v.value}`),\n        },\n        ...generateDateFields(\n          {\n            condition: (f: any) => f.has_hypertension.value === 'Yes',\n            id: \"hypertension_diagnosis\",\n            helpText: \"Date the patient was diagnosed with hypertension\",\n            required: true,\n            estimation: {\n              allowUnknown: false\n            },\n            computeValue: (date: string) =>  ObservationService.buildValueDate(\"Hypertension diagnosis date\", date)\n          },\n          ConsultationService.getSessionDate()\n        )\n      ]\n    }\n  }\n})\n","import { render } from \"./hypertension_diagnosis.vue?vue&type=template&id=2396c654&ts=true\"\nimport script from \"./hypertension_diagnosis.vue?vue&type=script&lang=ts\"\nexport * from \"./hypertension_diagnosis.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}