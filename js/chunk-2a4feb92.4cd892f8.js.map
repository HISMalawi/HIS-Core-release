{"version":3,"sources":["webpack:///./src/apps/ART/services/lab_order_service.ts","webpack:///./src/apps/HTS/views/encounters/HTSDBsOrder.vue?b9dd","webpack:///./src/apps/HTS/services/hts_dbs_order.ts","webpack:///./src/apps/HTS/views/encounters/HTSDBsOrder.vue","webpack:///./src/apps/HTS/views/encounters/HTSDBsOrder.vue?8078","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts"],"names":["LabOrderService","AppEncounterService","constructor","patientID","providerID","super","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","HtsDbsOrder","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","isDBSsampleCollected","dbsSpecimenID","immediate","methods","f","computedData","createEncounter","saveObservationList","resolveObs","dbs_sample_collection","createDBSOrder","dbs_specimen_id","nextTask","specimenID","order","encounter","orders","OrderService","buildLabOrders","concept_id","getCachedConceptID","specimenConcept","getConceptID","accessionNumber","reason","saveOrdersArray","encounter_id","id","helpText","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","obs","buildValueCoded","options","label","value","values","yesNoOptions","TT_BARCODE","requireNext","condition","test","buildValueText","config","hiddenFooterBtns","validation","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","patient","facts","isEnrolledInProgam","route","params","patient_id","toUpperCase","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","dismiss","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","formData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-2a4feb92.4cd892f8.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\nexport class LabOrderService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 57, providerID);\n  }\n}","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"DBS Order\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsDbsOrder extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 199, providerID)\n    }\n}\n","\n  import EncounterMixinVue from \"@/views/EncounterMixin.vue\";\n  import { FieldType } from \"@/components/Forms/BaseFormElements\";\n  import { defineComponent } from \"vue\";\n  import { IonPage } from \"@ionic/vue\";\n  import { Field, Option } from \"@/components/Forms/FieldInterface\";\n  import { LabOrderService } from \"@/apps/ART/services/lab_order_service\";\n  import { OrderService } from \"@/services/order_service\";\n  import { HtsDbsOrder } from \"../../services/hts_dbs_order\";\n  \n  export default defineComponent({\n    components: { IonPage },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n      service: {} as HtsDbsOrder,\n    }),\n    watch: {\n      ready: {\n        handler(ready: boolean) {\n          if (ready) {\n            this.service = new HtsDbsOrder(\n              this.patientID,\n              this.providerID\n            );\n            this.fields = [\n              this.isDBSsampleCollected(),\n              this.dbsSpecimenID()\n            ];\n          }\n        },\n        immediate: true,\n      },\n    },\n    methods: {\n      async onFinish(f: any, computedData: any) {\n        await this.service.createEncounter()\n        await this.service.saveObservationList(\n          (await this.resolveObs(computedData))\n        )\n        if (f.dbs_sample_collection === 'Yes') {\n          await this.createDBSOrder(f.dbs_specimen_id)\n        }\n        this.nextTask();\n      },\n      async createDBSOrder(specimenID: string) {\n        const order = new LabOrderService(this.patientID, this.providerID)\n        const encounter = await order.createEncounter()\n        if (encounter) {\n          const orders = OrderService.buildLabOrders(encounter, [\n            {\n              concept_id: HtsDbsOrder.getCachedConceptID('HIV viral load'),\n              specimenConcept: await(HtsDbsOrder.getConceptID(\"DBS (Free drop to DBS card)\")),\n              accessionNumber: specimenID,\n              reason: 'Routine',\n            }\n          ])\n          await OrderService.saveOrdersArray(encounter?.encounter_id, orders)\n        }\n      },\n      isDBSsampleCollected(): Field {\n        return {\n          id: \"dbs_sample_collection\",\n          helpText: \"DBS Sample\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          finalComputedValue: (v: any) => {\n            return {\n              obs: this.service.buildValueCoded(\"Is DBS Sample Collected\", v),\n            };\n          },\n          options: () => {\n            return [\n              {\n                label: \"Is DBS Sample Collected?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        };\n      },\n      dbsSpecimenID(): Field {\n        return {\n          id: \"dbs_specimen_id\",\n          helpText: \"DBS Specimen ID\",\n          type: FieldType.TT_BARCODE,\n          requireNext: false,\n          condition: (f: any) => /yes/i.test(`${f.dbs_sample_collection}`),\n          finalComputedValue: (v: Option) => {\n            return {\n              obs: this.service.buildValueText(\"DBS Specimen ID\", `${v}`),\n            };\n          },\n          config: {\n            hiddenFooterBtns: [\n              'Clear'\n            ]\n          },\n          validation: (v: Option) => {\n            // Match 2 letters at the beginning of the string, then check the next sequence for 5 digits\n            if (!/^[A-Z]{2}[0-9]{5}$/i.test(`${v}`)) {\n              return [\n                `Invalid DBS Specimen ID \"${v}\". Expected format of 2 Letters and 5 Digits`,\n              ];\n            }\n            return null;\n          },\n          isRequired: () => true,\n        };\n      },\n    },\n  });\n  ","import { render } from \"./HTSDBsOrder.vue?vue&type=template&id=22b514ac&ts=true\"\nimport script from \"./HTSDBsOrder.vue?vue&type=script&lang=ts\"\nexport * from \"./HTSDBsOrder.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}