{"version":3,"sources":["webpack:///./src/apps/HTS/services/hts_circumcision_service.ts","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/HTS/views/encounters/HtsReferral.vue?5e0a","webpack:///./src/apps/HTS/services/hts_referral_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsReferral.vue","webpack:///./src/apps/HTS/views/encounters/HtsReferral.vue?05e0"],"names":["HtsCircumcisionService","AppEncounterService","constructor","patientID","providerID","super","getRecentCircumcisionStatus","this","getFirstValueCoded","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","$emit","i","__exports__","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","formLabel","patientDashboardUrl","_","HtsReferralService","IonPage","HisStandardForm","setup","service","ref","isHivPositive","visitID","getEncounter","saveEncounter","htsClient","StartHtsEncounter","onInitVisit","value","referralServicesField","commentsField","encounterTypeID","encounterName","getObs","concept","recommendCircumcision","knownSTIs","id","helpText","FieldType","TT_MULTIPLE_SELECT","isRequired","init","async","age","gender","circumcisionEncounter","_circumcisionEncounte","test","meta","hts_male_circumcised","Offline","isOfflineMode","circumcision","status","every","testingEncounter","_testingEncounter$met","_testingEncounter$met2","test_results","forEach","res","label","push","hiv_result","sti","includes","finalComputedValue","v","obs","map","d","buildValueText","onValueUpdate","listData","l","isChecked","options","f","opt","selected","services","some","length","description","text","convertArrayToString","disabled","config","footerBtns","slot","onClickComponentEvents","refreshOptions","o","onClick","TT_NOTE"],"mappings":"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","file":"js/chunk-a235e810.8a1d482e.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsCircumcisionService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 158, providerID)\n    }\n\n    getRecentCircumcisionStatus() {\n        return this.getFirstValueCoded('Circumcision status')\n    }\n}\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Referral\",\n        skipSummary: true,\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.patientDashboardUrl()\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsReferralService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 114, providerID)\n    }\n}\n","\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent, ref } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { IonPage } from \"@ionic/vue\"\nimport { HtsReferralService } from \"@/apps/HTS/services/hts_referral_service\"\nimport { HtsCircumcisionService } from '../../services/hts_circumcision_service'\nimport { Offline } from '@/composables/offline'\nimport { convertArrayToString } from '@/utils/Strs'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { StartHtsEncounter } from \"@/apps/HTS/composables/HtsFormEncounter\";\n\nexport default defineComponent({\n  components: { IonPage, HisStandardForm },\n  setup() {\n    const service = new HtsReferralService(-1)\n    const fields = ref<Field[]>([])\n    const isHivPositive = ref(false)\n    const {\n      visitID,\n      getEncounter,\n      saveEncounter, \n      patientDashboardUrl,\n      htsClient \n    } = StartHtsEncounter({\n      onInitVisit: () => {\n        fields.value = [\n          referralServicesField(),\n          commentsField()\n        ]\n      }\n    })\n\n    function onFinish(_: any, computedData: any) {\n      saveEncounter({\n        encounterTypeID: service.encounterTypeID,\n        encounterName: \"REFERRAL\",\n        computedData\n      })\n    }\n\n    function getObs(concept: string) {\n      return HtsReferralService.getFirstValueCoded(visitID.value as any, concept)\n    }\n\n    function referralServicesField(): Field {\n        let recommendCircumcision = false\n        const knownSTIs: string[] = []\n        return {\n          id: \"services\",\n          helpText: 'Refer Client to other Services?',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          isRequired: () => true,\n          init: async () => {\n            const age = htsClient.age\n            if (htsClient.gender === 'M') {\n              const circumcisionEncounter = getEncounter('CIRCUMCISION')\n              if (circumcisionEncounter) {\n                recommendCircumcision = /no/i.test(circumcisionEncounter.meta?.hts_male_circumcised)\n                  && age > 14 && age < 64\n              } else if(!Offline().isOfflineMode.value) {\n                const circumcision = new HtsCircumcisionService(visitID.value as any)\n                const status = (await circumcision.getRecentCircumcisionStatus())\n                recommendCircumcision = [status === 'No', age > 14 && age < 64].every(Boolean)\n              }\n            }\n            const testingEncounter = getEncounter('Testing')\n            if (testingEncounter) {\n              (testingEncounter.meta?.test_results||[]).forEach((res: Option) => {\n                if (/syphilis|Hepatitis/i.test(res.label) && res.value === 'Positive') {\n                  knownSTIs.push(res.label)\n                }\n              })\n              isHivPositive.value = /positive/i.test(`${testingEncounter?.meta?.hiv_result?.label}`)\n            } else if (!Offline().isOfflineMode.value) {\n              for(const sti of [\"Syphilis Test Result\", \"Hepatitis B Test Result\"]) {\n                if ((await getObs(sti)) === 'Positive') knownSTIs.push(sti)\n              }\n              isHivPositive.value = ['Positive', 'Positive Initial Professional'].includes((await getObs('HIV status')))\n            }\n            return true\n          },\n          finalComputedValue: (v: Option[]) => {\n            return {\n              obs: v.map(d => service.buildValueText('Referrals ordered', `${d.value}`))\n            }\n          },\n          onValueUpdate(listData: Option[], value: Option) {\n            return listData.map(l => {\n              if (value.value === 'None' && l.value != 'None') {\n                l.isChecked = false\n              }\n              if (value.value != 'None' && value.isChecked && l.value === 'None') {\n                l.isChecked = false\n              }\n              return l\n            })\n          },\n          options: (f: any) => {\n            const options: any = []\n            const opt = (v: string, options = {} as any) => {\n              const selected = f.services ? f.services.some((d: Option) => d.value === v) : false\n              return { label: v, value: v, isChecked: selected, ...options }\n            }\n            options.push(opt('STI', knownSTIs.length ? {\n              description: {\n                text: `Client tested positive for ${convertArrayToString(knownSTIs)}. Please recommend this option if client has not started yet`\n              }\n            } : {}))\n            options.push(opt('TB'))\n            if (htsClient.gender === 'M') {\n              options.push(opt('VMMC', recommendCircumcision ? {\n                description: {\n                  text: 'Client is not circumcised, please recommend this option'\n                }\n              } : {}))\n            }\n            options.push(opt('PrEP ', isHivPositive.value ? {\n              disabled: isHivPositive.value,\n              description: {\n                text: 'Client is HIV positive, cannot refer for PrEP'\n              }\n            } : {}))\n            options.push(opt('PEP ', isHivPositive.value ? {\n              disabled: isHivPositive.value,\n              description: {\n                text: 'Client is HIV positive, cannot refer for PEP'\n              }\n            } : {}))\n            options.push(opt('Other'))\n            options.push(opt('None'))\n            return options\n          },\n          config: {\n            footerBtns: [\n              {\n                name: \"None\",\n                slot: \"end\",\n                onClickComponentEvents: {\n                  refreshOptions: (_: any, listData: Option[]) => {\n                    return listData.map(o => {\n                      o.isChecked = o.label === 'None'\n                      return o\n                    })\n                  }\n                },\n                onClick: () => 'None'\n              }\n            ]\n          }\n        }\n      }\n\n    function commentsField(): Field {\n      return {\n        id: 'comment',\n        helpText: 'Comments (Optional)',\n        type: FieldType.TT_NOTE,\n        finalComputedValue: (v: Option | null) => {\n          if (v && !/^\\s*$/gi.test(`${v.value}`)) {\n            return {\n              obs: service.buildValueText('Comments', `${v.value}`)\n            }\n          }\n          return null\n        }\n      }\n    }\n  \n    return {\n      patientDashboardUrl,\n      onFinish,\n      fields\n    }\n  }\n})\n","import { render } from \"./HtsReferral.vue?vue&type=template&id=0040b85e&ts=true\"\nimport script from \"./HtsReferral.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsReferral.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}