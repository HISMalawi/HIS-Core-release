{"version":3,"sources":["webpack:///./src/apps/ART/services/htn_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ART/views/encounters/Adherence.vue?99ca","webpack:///./src/apps/ART/views/encounters/Adherence.vue","webpack:///./src/apps/ART/views/encounters/Adherence.vue?e98d","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/services/adherence_service.ts","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue?7f4b"],"names":["HTN_SESSION_KEY","BPManagementService","AppEncounterService","constructor","patientID","providerID","super","sbp","dbp","bpTrail","firstRecentGrade","secondRecentGrade","Object","values","sort","a","b","date","map","bp","this","getBpGrade","getSystolicBp","ObservationService","getFirstValueNumber","getDiastolicBp","query","getFirstValueCoded","getJson","drugID","pills","postJson","state","getDrugs","HCZ","drugs","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","adherence","notes","Enalapril","remaining","Amlodipine","Atenolol","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","id","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","usernameA","usernameB","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","_component_his_standard_form","_resolveComponent","onSubmit","mixins","AdherenceMixinVue","watch","getAdherenceFields","immediate","saveAdherence","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","AdherenceService","_defineProperty","lastDrugs","lastReceiptDate","optimiseHangingPills","setDate","getDate","toStandardHisFormat","receiptDate","drug","order","start_date","htnDrugs","htnDrugReferences","drug_id","lastPillCounts","getPreviousDrugPillCount","quantity","getReceiptDate","getLastDrugs","receivedDrugsBefore","buildPillCountObs","orderId","pillCount","drugId","concept","getConceptID","isAdherenceGood","calculateAdherence","given","expected","Math","round","calculateExpected","equivalentDailyDose","frequency","timeUnit","daysGone","calcTimeElapsed","parseFloat","date1","calculateUnaccountedOrMissed","actual","exp","EncounterMixinVue","drugObs","askReasonForPoorAdherence","calculationAgreementObs","buildAdherenceReport","lastVisit","daysElapsed","timeElapse","rowColors","indexes","class","cellColors","columns","rows","forEach","formatFrequency","expectedPills","calcPillsExpected","pillsBrought","adherenceStatus","unAccountedDoses","equivalent_daily_dose","row","match","checkDrugsBefore","helpText","FieldType","TT_ADHERENCE_INPUT","init","loadPreviousDrugs","validation","val","Validation","empty","unload","buildAdherenceObs","order_id","fdata","pills_brought","TT_TABLE_VIEWER","config","hiddenFooterBtns","TT_SELECT","buildValueCoded"],"mappings":"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","file":"js/chunk-2799cd62.3e938b50.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ObservationService } from \"@/services/observation_service\"\n\nexport enum HTN_SESSION_KEY {\n  Prescription = \"htnPrescription\"\n}\n\nexport class BPManagementService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n      super(patientID, 48, providerID) //TODO: Use encounter type reference name'\n    }\n\n    static getBpGrade(sbp: number, dbp: number) {\n      if ((sbp < 140) && (dbp < 90)) {\n        return \"normal\"\n      }\n      else if ((sbp >= 140 && sbp < 160) || (dbp >= 100 && dbp < 110)) {\n        return \"grade 1\"\n      }\n      else if ((sbp >= 180 && dbp > 110) || sbp >= 180) {\n        return \"grade 3\"\n      }\n      else if ((sbp >= 160 && sbp < 180) || (dbp >= 110)) {\n        return \"grade 2\"\n      }\n      return 'N/A'\n    }\n\n    /**\n     * BP is normointensive if two most recent consecutive tests are normal\n     * @param bpTrail \n     * @returns\n    */\n    static isBpNormotensive(bpTrail: any) {\n      const [ firstRecentGrade, secondRecentGrade ] = Object.values(bpTrail)\n        .sort((a: any, b: any) => a.date < b.date ? 1 : 0)\n        .map((bp: any) => this.getBpGrade(bp.sbp, bp.dbp))\n      return firstRecentGrade === 'normal' && secondRecentGrade === 'normal'\n    }\n\n    getSystolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Systolic blood pressure')\n    }\n\n    getDiastolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Diastolic blood pressure')\n    }\n\n    async onBpDrugs() {\n      const query = await ObservationService.getFirstValueCoded(this.patientID, 'Treatment status')\n      return query ? query === 'Yes' : false\n    }\n  \n    async getBPTrail() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/bp_trail`);\n    }\n    async getCurrentDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/current_bp_drugs`);\n    }\n    async getLastDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/last_bp_drugs_dispensation`);\n    }\n    async getAdherence(drugID: number, pills: number) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/remaining_bp_drugs`, {\n        'drug_id': drugID,\n        pills: pills\n      });\n    }\n    async enrollPatient(state: any) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/update_or_create_htn_state`, state);\n    }\n    static htnDrugReferences() {\n      return [\n        { \n          'drug_id': 275,\n          'drug_name': \"HCZ (25mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 942,\n          'drug_name': \"Enalapril (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 943,\n          'drug_name': \"Enalapril (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 558,\n          'drug_name': \"Amlodipine (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 559,\n          'drug_name': \"Amlodipine (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 117,\n          'drug_name': \"Atenolol (50mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 11,\n          'drug_name': \"Atenolol(100mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        }\n      ]\n    }\n    getDrugs() {\n        return {\n        HCZ: {\n          drugs: [\n            {\n              drugName: \"HCZ (25mg tablet)\",\n              drugID: 275,\n              amount: '25mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Enalapril: {\n          drugs: [\n            {\n              drugName: \"Enalapril (5mg tablet)\",\n              drugID: 942,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Enalapril (10mg tablet)\",\n              drugID: 943,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Amlodipine: {\n          drugs: [\n            {\n              drugName: \"Amlodipine (5mg tablet)\",\n              drugID: 558,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Amlodipine (10mg tablet)\",\n              drugID: 559,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Atenolol: {\n          drugs: [\n            {\n              drugName: \"Atenolol (50mg tablet)\",\n              drugID: 117,\n              amount: '50mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Atenolol(100mg tablet)\",\n              drugID: 11,\n              amount: '100mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n      }\n    }\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from 'vue'\nimport AdherenceMixinVue from './AdherenceMixin.vue'\nexport default defineComponent({\n    mixins: [AdherenceMixinVue],\n    watch: {\n        ready: {\n            async handler(ready: any) {\n                if (ready) {\n                    this.fields = this.getAdherenceFields()\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async onSubmit() {\n            await this.saveAdherence()\n            this.nextTask()\n        }\n    }\n})\n","import { render } from \"./Adherence.vue?vue&type=template&id=071c48e6&ts=true\"\nimport script from \"./Adherence.vue?vue&type=script&lang=ts\"\nexport * from \"./Adherence.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { DrugInterface } from \"@/interfaces/Drug\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { BPManagementService } from \"./htn_service\"\nimport dayjs from \"dayjs\"\n\nexport class AdherenceService extends AppEncounterService {\n    lastDrugs: Array<DrugInterface>\n    lastReceiptDate: string\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 68, providerID) //TODO: Use encounter type reference name\n        this.lastDrugs = []\n        this.lastReceiptDate = ''\n    }\n\n    async loadPreviousDrugs(optimiseHangingPills=false) {\n        const date = new Date(this.date)\n        date.setDate(date.getDate() - 1) // we don't want current date to count\n        const d = (date: string | Date) => HisDate.toStandardHisFormat(date)\n        const drugs = await AppEncounterService.getJson(\n            `patients/${this.patientID}/drugs_received`, { date: d(date) }\n        )\n        if (!isEmpty(drugs)) {\n            this.lastReceiptDate = drugs.reduce((receiptDate: string | null,  drug: any) => {\n                return !receiptDate || (new Date(d(drug.order.start_date)) > new Date(receiptDate))\n                    ?  d(drug.order.start_date)\n                    : receiptDate\n            }, null)\n            const htnDrugs = BPManagementService.htnDrugReferences().map((d: any) => d.drug_id)\n            this.lastDrugs = drugs.filter((drug: DrugInterface) => \n                !htnDrugs.includes(drug.drug['drug_id']) && d(drug.order.start_date) === this.lastReceiptDate\n            )\n            if (optimiseHangingPills) {\n                const lastPillCounts: Record<number, number> = (await this.getPreviousDrugPillCount()) || {}\n                this.lastDrugs = this.lastDrugs.map((d: DrugInterface) => {\n                    if (lastPillCounts[d.drug.drug_id] && d.quantity) {\n                        d.quantity += lastPillCounts[d.drug.drug_id]\n                    }\n                    return d\n                })\n            }\n        }\n    }\n\n    getReceiptDate() { return this.lastReceiptDate }\n\n    getLastDrugs() { return this.lastDrugs }\n\n    receivedDrugsBefore() { return !isEmpty(this.lastDrugs) }\n\n    buildPillCountObs(orderId: number, pillCount: number) {\n        return this.buildValueNumber('Number of tablets brought to clinic', pillCount, null, orderId)\n    }\n    \n    getPreviousDrugPillCount() {\n        return AppEncounterService.getJson('last_drugs_pill_count', {\n            'patient_id': this.patientID,\n            'program_id': this.programID,\n            'date': this.lastReceiptDate\n        })\n    }\n\n    async buildAdherenceObs(orderId: number, drugId: number, adherence: number) {\n        const concept = await AppEncounterService.getConceptID('Drug adherence', true)\n        return {\n            'concept_id': concept,\n            'value_numeric': adherence,\n            'value_drug': drugId,\n            'value_modifier': '%',\n            'order_id': orderId,\n            'person_id': this.patientID,\n            'obs_datetime': AppEncounterService.getSessionDate()\n        }\n    }\n\n    isAdherenceGood(adherence: number) {\n        return adherence >= 95 && adherence <= 105\n    }\n\n    calculateAdherence(given: number, pills: number, expected: number) {\n        return Math.round(100 * (given - pills) / (given - expected));\n    }\n\n    calculateExpected(\n        given: number, \n        equivalentDailyDose: number, \n        startDate: string, \n        frequency: 'QOD' | 'QW'\n    ) {\n        const timeUnit = frequency === 'QW' ? 'week' : 'day'\n        const daysGone = this.calcTimeElapsed(startDate, timeUnit);\n        return (given - (daysGone * parseFloat(equivalentDailyDose.toString())));\n    }\n\n    calcTimeElapsed(date1: string, timeUnit: 'week' | 'day') {\n        // Consider this example: 2022-01-28 to 2022-01-01 diff is supposed to give us a difference of 28 days. \n        // However, dayjs calculates it as a difference of 27 days. Adding a one to correct this issue for a better calculation\n        return dayjs(HisDate.toStandardHisFormat(this.date)).diff(HisDate.toStandardHisFormat(date1), timeUnit) + 1\n    }\n\n    calculateUnaccountedOrMissed(expected: string, actual: string) {\n        const exp = (parseFloat(expected) - parseFloat(actual));\n        return (exp < 0 ? ((exp * -1) + ' missed') : (exp + ' unacc'));\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning } from \"@/utils/Alerts\"\nimport { AdherenceService } from \"@/apps/ART/services/adherence_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from 'lodash'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        adherence: {} as any,\n        drugObs: [] as any,\n        askReasonForPoorAdherence: false,\n        calculationAgreementObs: [] as any,\n    }),\n    methods: {\n        async saveAdherence() {\n            await this.adherence.createEncounter()\n            const data = await Promise.all([...this.drugObs, ...this.calculationAgreementObs])\n            const obs = await this.adherence.saveObservationList(data)\n\n            if (!obs) return toastWarning('Unable to save patient observations')\n        },\n        buildAdherenceReport(data: any) {\n            const lastVisit = this.adherence.getReceiptDate()\n            const daysElapsed = this.adherence.calcTimeElapsed(lastVisit, 'day')\n            const timeElapse = ` Last visit: ${HisDate.toStandardHisDisplayFormat(lastVisit)} \n                (${daysElapsed} Days Elapsed)`\n            const rowColors = [{ indexes: [0, 3, 6], class: 'adherence-col-bg' }]\n            const cellColors: any = []\n            const columns = [timeElapse]\n            const rows = [\n                ['Prescription'],\n                ['Tabs given'],\n                ['Tabs per'],\n                ['Tabs remaining'],\n                ['Expected'],\n                ['Actual (counted)'],\n                ['Adherence'],\n                ['Doses missed/ Unaccounted for'],\n                ['Doses consumed'],\n                ['Art Adherence']\n            ]        \n            data.forEach((order: any, index: number) => {\n                const frequency = this.formatFrequency(order.frequency)\n                const expectedPills = this.calcPillsExpected(order)\n                const adherence = this.adherence.calculateAdherence(\n                    order.quantity, order.pillsBrought, expectedPills\n                )\n                const adherenceStatus = this.adherence.isAdherenceGood(adherence) \n                    ? 'Good adherence' \n                    : 'Explore problem'\n                const unAccountedDoses = this.adherence.calculateUnaccountedOrMissed(\n                    expectedPills, order.pillsBrought\n                )\n                columns.push(order.drug.name)\n                rows[0].push('')\n                rows[1].push(order.quantity)\n                rows[2].push(`${order.equivalent_daily_dose} <b>${frequency}</b>`)\n                rows[3].push('')\n                rows[4].push(expectedPills < 0 ? 0 : expectedPills)\n                rows[5].push(order.pillsBrought)\n                rows[6].push('')\n                rows[7].push(unAccountedDoses)\n                rows[8].push(`${adherence}%`)\n                rows[9].push(adherenceStatus)\n\n                cellColors.push({ \n                    index: index+1,\n                    row: 9, \n                    class: adherenceStatus.match(/good/i) ? 'adherence-txt-good' : 'adherence-txt-bad' \n                })\n            })\n            return [\n                { \n                    label: 'Selected Medication', \n                    value:'Table', \n                    other: { columns, rows, rowColors, cellColors }\n                }      \n            ]\n        },\n        formatFrequency(frequency: string) {\n            return `${frequency}`.match(/qod/i) \n                    ? 'QOD'\n                    : `${frequency}`.match(/weekly/i) \n                    ? 'QW'\n                    : frequency\n        },\n        calcPillsExpected(d: any) {\n            return this.adherence.calculateExpected(\n                d.quantity, \n                d.equivalent_daily_dose, \n                d.order.start_date,\n                this.formatFrequency(d.frequency) as 'QOD' | 'QW'\n            )\n        },\n        getAdherenceFields(checkDrugsBefore=false): Array<Field> {\n            return [\n                {\n                    id: 'pills_brought',\n                    helpText: 'Pills remaining (brought to clinic)',\n                    type: FieldType.TT_ADHERENCE_INPUT,\n                    init: async () => {\n                        this.adherence = new AdherenceService(this.patientID, this.providerID)\n                        await this.adherence.loadPreviousDrugs((await Store.get('ASK_HANGING_PILLS')))\n                        return true\n                    },\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    validation: (val: any) => {\n                        if (Validation.required(val)) return ['No drugs available']\n\n                        const empty = val.map((i: Option) => i.value === '')\n                        \n                        return  empty.some(Boolean) ? ['Some values are missing'] : null\n                    },\n                    unload: async (data: any) => {\n                        this.drugObs = []\n                        data.forEach(async(val: Option) => {\n                            const {drug, order } = val.other\n                            const data = { ...val.other, pillsBrought: val.value }\n                            const adherence = this.adherence.calculateAdherence(\n                                data.quantity, data.pillsBrought, this.calcPillsExpected(data)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildAdherenceObs(order.order_id, drug.drug_id, adherence)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildPillCountObs(order.order_id, val.value)\n                            )\n\n                            if (!this.askReasonForPoorAdherence) {\n                                this.askReasonForPoorAdherence = !this.adherence.isAdherenceGood(data)\n                            }\n                        })\n                    },\n                    options: (fdata: any) => {\n                        if (!isEmpty(fdata.pills_brought)) {\n                            return fdata.pills_brought\n                        }\n                        return this.adherence.getLastDrugs().map((data: any) => ({\n                            label: data.drug.name,\n                            value: '',\n                            other: {\n                                ...data\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: \"adherence_report\",\n                    helpText: \"ART adherence\",\n                    type: FieldType.TT_TABLE_VIEWER,\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    options: (d: any) => this.buildAdherenceReport(\n                        d.pills_brought.map((i: Option) => ({ \n                            ...i.other, pillsBrought: i.value\n                        }))\n                    ),\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    }\n                },\n                {\n                    id: \"agree_with_calculation\",\n                    helpText: \"Agree with adherence calculation\",\n                    type: FieldType.TT_SELECT,\n                    condition: () => this.askReasonForPoorAdherence,\n                    validation: (val: Option) => Validation.required(val),\n                    unload: ({ value }: Option) => {\n                        this.calculationAgreementObs = [ this.adherence.buildValueCoded(\n                            'Reason for poor treatment adherence', value\n                        )]\n                    },\n                    options: () => [\n                        { label: 'Yes', value: 'Yes' },\n                        { label: 'No', value: 'No' }\n                    ]\n                }\n            ]\n        }\n    }\n})\n","import script from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}