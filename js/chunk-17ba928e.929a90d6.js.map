{"version":3,"sources":["webpack:///./src/apps/ART/views/ARTStock/movement.vue?faab","webpack:///./src/services/DHA_code_service.ts","webpack:///./src/apps/ART/views/ARTStock/movement.vue","webpack:///./src/apps/ART/views/ARTStock/movement.vue?cf3b","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?0184","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","activeField","onFinishAction","onFinish","skipSummary","DHAVerificationService","constructor","this","BASE30_DIGITS","split","forEach","digit","decimalValue","BASE30_DIGITS_INDEX","convertFromDecimal","number","toBase","result","Math","floor","digits","toString","map","Number","parseInt","parity","length","sum","position","checksum","isValidDHACode","code","decimalCode","convertToDecimal","computedCheckDigit","calculateLuhnCheckDigit","exception","console","error","undefined","slice","defineComponent","components","HisStandardForm","data","drugs","selectedDrugs","barcode","stockService","methods","formData","enter_batches","errors","index","d","value","packSize","StockService","getPackSize","drug_id","total","tins","extras","res","authorization","quantity","date","reason","reasons","task","relocation_location","f","relocateItems","id","push","getShortName","disposeItems","e","BadRequestError","isEmpty","concat","log","toastSuccess","$router","toastDanger","join","getFields","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","label","notTheSame","getLocationName","condition","_","filter","getFacilities","computedValue","config","showKeyboard","isFilterDataViaApi","dynamicHelpText","TT_FULL_DATE","TT_MULTIPLE_SELECT","requireNext","async","checked","items","getItems","i","isChecked","c","item","dayjs","isBefore","delivery_date","unload","TT_BATCH_MOVEMENT","beforeNext","currentFieldContext","drugsToStr","b","partialEntries","drug","entries","every","Boolean","partialDrugs","toastWarning","TT_TEXT","customKeyboard","CHARACTERS_AND_NUMBERS_LO","v","validateSeries","dha","toUpperCase","formdata","getReasons","TT_TABLE_VIEWER","buildResults","hiddenFooterBtns","isRelocation","columns","rows","j","HisDate","toStandardHisDisplayFormat","expiry_date","other","prepDrugs","element","batchNumber","drugID","expiry","tabs","selectAll","listData","l","formatDrugs","mapVal","vals","batch_number","created","__exports__","_resolveDynamicComponent","formType","cancelDestinationPath","onOnFinish","onOnIndex","onIndex","name","TouchScreenForm","emits","props","Function","default","String","Object","computedData","$emit","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"uIAEM,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,OAAQV,EAAKU,OACbC,YAAaX,EAAKW,YAClBC,eAAgBZ,EAAKa,SACrBC,aAAa,GACZ,KAAM,EAAG,CAAC,SAAU,cAAe,mB,0ECTlC,MAAOC,EAKZC,cAAA,0CAHsB,IAAS,4CAK9BC,KAAKC,cAAgB,iCAAiCC,MAAM,IAC5DF,KAAKC,cAAcE,QAAQ,CAACC,EAAYC,IAAsBL,KAAKM,oBAAoBF,GAASC,GAIjGE,mBAAmBC,EAAaC,EAAS,IACxC,GAAIA,EAAS,GAAKA,EAAS,GAAI,KAAO,yBAEtC,IAAIC,EAAS,GAEb,MAAOF,EAAS,EACfE,EAASV,KAAKC,cAAcO,EAASC,GAAUC,EAC/CF,EAASG,KAAKC,MAAMJ,EAASC,GAG9B,OAAOC,EAER,+BAA+BF,GAC9B,MAAMK,EAASL,EAAOM,WAAWZ,MAAM,IAAIa,IAAKX,GAAkBY,OAAOC,SAASb,EAAO,KACnFc,EAASL,EAAOM,OAAS,EAE/B,IAAIC,EAAM,EAEVP,EAAOV,QAAQ,CAACC,EAAYiB,KACvBA,EAAW,IAAMH,IAAQd,GAAS,GAClCA,EAAQ,IAAGA,GAAS,GAExBgB,GAAOhB,IAGR,MAAMkB,EAAWF,EAAM,GACvB,OAAoB,IAAbE,EAAiB,EAAI,GAAKA,EAQlCC,eAAeC,GACd,IACC,MAAMC,EAAczB,KAAK0B,iBAAiBF,GAAMV,WAE1Ca,GADaX,OAAOC,SAASQ,EAAY,GAAI,IACxB3B,EAAuB8B,wBAA2D,GAAnCZ,OAAOC,SAASQ,EAAa,MACvG,OAA8B,IAAvBE,EACN,MAAOE,GAER,OADAC,QAAQC,MAAMF,IACP,GAGTH,iBAAiBlB,GAChB,GAAqB,GAAjBA,EAAOW,OAAa,OAAO,EAE/B,MAAMd,EAAeL,KAAKM,oBAAoBE,EAAO,IAErD,QAAqBwB,IAAjB3B,GAA+C,OAAjBA,EACjC,KAAO,6CAER,OAAOA,EAAe,KAAOG,EAAOW,OAAS,GAAKnB,KAAK0B,iBAAiBlB,EAAOyB,MAAM,K,iGClDxEC,+BAAgB,CAC7BC,WAAY,CAAEC,wBACdC,KAAM,KAAM,CACV3C,YAAa,GACbD,OAAQ,GACR6C,MAAO,GACPC,cAAe,GACfC,QAAS,GACTC,aAAc,KAGhBC,QAAS,CACP,eAAeC,GACb,MAAMN,EAAOM,EAASC,cACtB,IAAIC,EAAmB,GACvB,IAAK,IAAIC,EAAQ,EAAGA,EAAQT,EAAKlB,OAAQ2B,IAAS,CAChD,MAAMC,EAAIV,EAAKS,GAAOE,MAChBC,EAAWC,OAAaC,YAAYJ,EAAEK,SACtCC,EAAQJ,EAAWF,EAAEO,KACrBC,EAAS,GACTC,EAAM,CACV,kBAAqBb,EAASc,cAAcT,MAC5CU,SAAUL,EACVM,KAAMhB,EAASgB,KAAKX,MACpBY,OAAQjB,EAASkB,QAAQb,OAE3B,IACE,GAA4B,gBAAxBL,EAASmB,KAAKd,MAAyB,CACzCO,EAAO,eAAiBZ,EAASoB,oBAAoBf,MACrD,MAAMgB,QAAUhE,KAAKyC,aAAawB,cAAclB,EAAEmB,GAAI,IACjDV,KACAD,IAEAS,GACHnB,EAAOsB,KACL,4BAA8BjB,OAAakB,aAAarB,EAAEK,cAGzD,CACL,MAAMY,QAAUhE,KAAKyC,aAAa4B,aAAatB,EAAEmB,GAAI,IAChDV,KACAD,IAEAS,GACHnB,EAAOsB,KACL,4BAA8BjB,OAAakB,aAAarB,EAAEK,WAIhE,MAAOkB,GACHA,aAAaC,SAAoBC,qBAAQF,EAAEzB,QAC7CA,EAASA,EAAO4B,OAAOH,EAAEzB,QAEzBA,EAAOsB,KAAK,GAAGG,GAEjBxC,QAAQ4C,IAAIJ,IAGM,IAAlBzB,EAAO1B,QACTwD,eAAa,2BACb3E,KAAK4E,QAAQT,KAAK,MAElBU,eAAY,GAAGhC,EAAOiC,KAAK,OAG/BC,YACE,MAAO,CACL,CACEb,GAAI,OACJc,SAAU,cACVC,KAAMC,OAAUC,UAChBC,WAAaC,GAAaC,OAAWC,SAASF,GAC9CG,QAAS,IAAM,CACb,CACEC,MAAO,cACPzC,MAAO,eAET,CACEyC,MAAO,WACPzC,MAAO,cAIb,CACEkB,GAAI,sBACJc,SAAU,cACVC,KAAMC,OAAUC,UAChBC,WAAaC,GAAgBC,OAAWC,SAASF,IAAQC,OAAWI,WAAWL,EAAII,MAAO,GAAGvC,OAAayC,mBAC1GC,UAAYP,GAAgC,gBAAnBA,EAAIvB,KAAKd,MAClCwC,QAAS,CAACK,EAAQC,EAAS,KAAOC,eAAcD,GAChDE,cAAgBX,GAAgBA,EAAII,MACpCQ,OAAQ,CACNC,cAAc,EACdC,oBAAoB,IAGxB,CACEjC,GAAI,OACJkC,gBAAkBpC,GAAM,WAAWA,EAAEF,KAAK2B,MAC1CT,SAAU,WACVC,KAAMC,OAAUmB,aAChBjB,WAAaC,GAAaC,OAAWC,SAASF,IAEhD,CACEnB,GAAI,eACJc,SAAU,eACVC,KAAMC,OAAUoB,mBAChBC,aAAa,EACbnB,WAAaC,GAAaC,OAAWC,SAASF,GAC9CG,QAASgB,MAAOxC,EAAQyC,KACtB,MAAMC,QAAwB1G,KAAK2G,WACnC,OAAOD,EAAM3F,IAAK6F,IAChBA,EAAEC,UAAYJ,EAAQX,OAAOgB,GAAKA,EAAErB,QAAUmB,EAAEnB,OAAOtE,QAAU,EAC1DyF,IACNd,OAAOiB,IAAUC,IAAMhD,EAAEL,KAAKX,OAAOiE,SAASF,EAAK/D,MAAMkE,iBAE9DC,OAAS9B,GAAcrF,KAAKuC,cAAgB8C,GAE9C,CACEnB,GAAI,gBACJc,SAAU,cACVC,KAAMC,OAAUkC,kBAChBC,WAAY,CAACxB,EAAQ7B,EAAQ8C,GAASQ,0BACpC,MAAMC,EAAcjF,GAAeA,EAAMvB,IAAI,CAACyG,EAAQZ,IAAc,GAAGY,EAAE/B,OAASX,KAAK,OACjF2C,EAAiBH,EAAoBhF,MAAMwD,OAAQ4B,GACvDA,EAAKC,QAAQ5G,IAAKgC,IAAaA,EAAEO,MAAOsE,MAAMC,UAEhD,IAAKrD,qBAAQiD,GAAiB,CAC5B,MAAMK,EAAeP,EAAWE,GAEhC,OADAM,eAAa,+CAA+CD,IACrD,EAET,OAAO,GAETtC,QAAS,IAAMxF,KAAKuC,cACpB6C,WAAaC,GAAaC,OAAWC,SAASF,IAEhD,CACEnB,GAAI,gBACJc,SAAU,2BACVC,KAAMC,OAAU8C,QAChB/B,OAAQ,CACNgC,eAAgB,CAACC,OAA2B,CAAC,CAAC,aAEhD9C,WAAa+C,GAAc7C,OAAW8C,eAAe,CACnD,IAAM9C,OAAWC,SAAS4C,GAC1B,KACE,MAAMnF,EAAQmF,EAAEnF,MACVqF,EAAM,IAAIvI,EAChB,OAAQuI,EAAI9G,eAAeyB,EAAMsF,eAE7B,KADA,CAAC,kCAKX,CACEpE,GAAI,UACJc,SAAU,gBACVC,KAAMC,OAAUC,UAChBC,WAAaC,GAAaC,OAAWC,SAASF,GAC9CG,QAAU+C,GAAkBvI,KAAKwI,WAAWD,IAE9C,CACErE,GAAI,UACJc,SAAU,UACVC,KAAMC,OAAUuD,gBAChBjD,QAAUzC,GAAW/C,KAAK0I,aAAa3F,GACvCkD,OAAQ,CACN0C,iBAAkB,CAAC,aAK3BD,aAAa/F,GACX,MAAMiG,EAAuC,gBAAxBjG,EAASmB,KAAKd,MAC7B6F,EAAU,CACd,OACA,aACA,cACA,sBAGED,GAAcC,EAAQ1E,KAAK,cAE/B,MAAM2E,EAAOnG,EAASC,cAAc7B,IAAKgI,IACvC,MAAMhG,EAAIgG,EAAE/F,MACNX,EAAO,CACXa,OAAakB,aAAarB,EAAEK,SAC5BL,EAAEO,KACF0F,OAAQC,2BAA2BlG,EAAEmG,aACrCvG,EAASc,cAAcT,MAAMsF,eAG/B,OADIM,GAAcvG,EAAK8B,KAAKxB,EAASoB,oBAAoB0B,OAClDpD,IAET,MAAO,CACL,CACEoD,MAAO,gBACPzC,MAAO,QACPmG,MAAO,CAAEN,UAASC,WAIxBM,UAAUb,GACR,MAAM7B,EAAe,GACflE,EAAUxC,KAAKwC,QAerB,OAdA+F,EAAS3F,cAAcI,MAAM7C,QAASkJ,IACpC3C,EAAMvC,KAAK,CACT,aAAgBkF,EAAQC,YACxB,MAAS,CACP,CACE,QAAW9G,EACX,QAAW6G,EAAQE,OACnB,YAAeF,EAAQG,OACvB,SAAYvI,SAASoI,EAAQI,MAAQxI,SAASoI,EAAQ/F,MACtD,cAAiBiF,EAAS5E,KAAKX,YAKhC0D,GAETgD,UAAUC,GACR,OAAOA,EAAS5I,IAAK6I,IACnBA,EAAE/C,WAAY,EACP+C,KAGX,iBACE,MAAM5F,QAAUhE,KAAKyC,aAAakE,WAClC,OAAO3G,KAAK6J,YAAY7F,IAE1B8F,OAAOC,GACL,OAAOA,EAAKhJ,IAAKsB,IACR,CAAEoD,MAAOpD,EAAMW,MAAOX,MAGjCmG,WAAWD,GACT,MAA4B,gBAAxBA,EAASzE,KAAKd,MACThD,KAAK8J,OAAO,CACjB,0CACA,kBAGK9J,KAAK8J,OAAO,CAAC,UAAW,UAAW,aAAc,SAAU,aAGtED,YAAY7F,GACV,OAAOA,EAAEjD,IAAK2G,IACL,CACLjC,MAAO,GAAGvC,OAAakB,aACrBsD,EAAKtE,aACDF,OAAaC,YACjBuE,EAAKtE,0BACY4F,OAAQC,2BACzBvB,EAAKwB,mCAEExB,EAAKsC,4BAEdhH,MAAO0E,OAKfuC,UACEjK,KAAKyC,aAAe,IAAIS,OACxBlD,KAAKP,OAASO,KAAK+E,e,qBCrRvB,MAAMmF,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASpL,KAErD,gB,kDCLT,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQG,yBAAcC,yBAAa2K,qCAAyBpL,EAAKqL,UAAW,CAC1E3K,OAAQV,EAAKU,OACbI,YAAad,EAAKc,YAClBH,YAAaX,EAAKW,YAClB2K,sBAAuBtL,EAAKsL,sBAC5BC,WAAYvL,EAAKa,SACjBA,SAAUb,EAAKY,eACf4K,UAAWxL,EAAKyL,SACf,KAAM,GAAI,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN5FtI,+BAAgB,CAC3BuI,KAAM,kBACNtI,WAAY,CAAEuI,wBACdC,MAAO,CACH,WACA,WAEJtI,KAAM,KAAM,CACR+H,SAAU,sBAEdQ,MAAO,CACHjL,eAAgB,CACZsF,KAAM4F,UAEVhL,YAAa,CACToF,KAAM4C,QACNiD,SAAS,GAEbpL,YAAa,CACTuF,KAAM8F,QAEVtL,OAAQ,CACJwF,KAAM+F,OACNzF,UAAU,GAEd8E,sBAAuB,CACnBpF,KAAM8F,OACNxF,UAAU,IAGlB7C,QAAS,CACL9C,SAAS+C,EAAesI,GACpBjL,KAAKkL,MAAM,WAAYvI,EAAUsI,IAErCT,QAAQ5D,GACJ5G,KAAKkL,MAAM,UAAWtE,O,qBCnClC,MAAMsD,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASpL,KAErD,U,kCCPf,4SAIO0H,eAAeT,EAAcD,EAAO,IACvC,MAAMqF,QAAmBC,OAAgBrF,cAAc,CAAC0E,KAAM3E,IAC9D,OAAOqF,EAAWrF,OAAQ9B,IAAYQ,qBAAQR,IAAsB,IAAhBA,EAAEyG,KAAKY,QACtDtK,IAAKuK,IAAa,CACf7F,MAAO6F,EAASb,KAChBzH,MAAOsI,EAASC,YAChBpC,MAAOmC,KAIZ9E,eAAegF,EAAiB1F,EAAO,IAC1C,MAAMqF,QAAmBC,OAAgBK,QAAQ,CAAC,YAAe3F,IACjE,OAAOqF,EAAWpK,IAAKuK,IAAa,CAC5B7F,MAAO6F,EACPtI,MAAOsI,KAIZ9E,eAAekF,EAAiB5F,EAAO,IAC1C,MAAM6F,QAAcP,OAAgBrF,cAAc,CAC9C0E,KAAM3E,EACN8F,IAAK,4BAGT,OAAOD,EAAM5K,IAAK8K,IAAS,CACvBpG,MAAOoG,EAAKpB,KACZzH,MAAO6I,EAAKpB,KACZtB,MAAO0C,KAIRrF,eAAesF,IAClB,MAAMC,QAAgBX,OAAgBU,uBACtC,OAAOC,EAAQhL,IAAKiL,IAAW,CAC3BvG,MAAOuG,EAAOvB,KACdzH,MAAOgJ,EAAOvB,KACdtB,MAAO6C,KAIRxF,eAAeyF,IAClB,MAAMC,QAAgBd,OAAgBa,aACtC,OAAOC,EAAQnL,IAAKoL,IAAW,CAC3B1G,MAAO0G,EAAO1B,KACdzH,MAAOmJ,EAAOC,UACdjD,MAAOgD,KAIR3F,eAAe6F,EAAaC,GAC/B,MAAMC,QAAkBnB,OAAgBiB,aAAaC,GACrD,OAAOC,EAAUxL,IAAKyL,IAAa,CAC/B/G,MAAO+G,EAAS/B,KAChBzH,MAAOwJ,EAASC,YAChBtD,MAAOqD,KAIRhG,eAAekG,EAA0BC,EAAoBlC,EAAK,IACrE,MAAMmC,QAAYxB,OAAgBsB,0BAA0BC,EAAYlC,GACxE,OAAOmC,EAAI7L,IAAK8L,IAAO,CACnBpH,MAAOoH,EAAGpC,KACVzH,MAAO6J,EAAGC,yBACV3D,MAAO0D,KAIRrG,eAAeuG,EAAYC,EAAgCvC,EAAK,IACnE,MAAMwC,QAAiB7B,OAAgB2B,YAAYC,EAAwBvC,GAC3E,OAAOwC,EAASlM,IAAKmM,IAAY,CAC7BzH,MAAOyH,EAAQzC,KACfzH,MAAOkK,EAAQC,WACfhE,MAAO+D","file":"js/chunk-17ba928e.929a90d6.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\"]))\n}","\nexport class DHAVerificationService {\n\n\tBASE30_DIGITS_INDEX = {} as any;\n\tBASE30_DIGITS: any;\n\t// static BASE30_DIGITS: any;\n\tconstructor() {\n\n\t\tthis.BASE30_DIGITS = '0123456789ABCDEFGHJKLMNPRTVWXY'.split('');\n\t\tthis.BASE30_DIGITS.forEach((digit: any, decimalValue: any) => this.BASE30_DIGITS_INDEX[digit] = decimalValue);\n\t}\n\n\t//   BASE30_DIGITS.forEach((digit, decimalValue) => BASE30_DIGITS_INDEX[digit] = decimalValue);\n\tconvertFromDecimal(number: any, toBase = 30) {\n\t\tif (toBase < 2 || toBase > 30) throw (\"Invalid base ${toBase}\");\n\n\t\tlet result = '';\n\n\t\twhile (number > 0) {\n\t\t\tresult = this.BASE30_DIGITS[number % toBase] + result;\n\t\t\tnumber = Math.floor(number / toBase);\n\t\t}\n\n\t\treturn result;\n\t}\n\tstatic calculateLuhnCheckDigit(number: any) {\n\t\tconst digits = number.toString().split('').map((digit: string) => Number.parseInt(digit, 10));\n\t\tconst parity = digits.length % 2;\n\n\t\tlet sum = 0;\n\n\t\tdigits.forEach((digit: any, position: any) => {\n\t\t\tif (position % 2 === parity) digit *= 2;\n\t\t\tif (digit > 9) digit -= 9;\n\n\t\t\tsum += digit;\n\t\t});\n\n\t\tconst checksum = sum % 10;\n\t\treturn checksum === 0 ? 0 : 10 - checksum;\n\t}\n\n\t/**\n\t * @param code {String}\n\t *\n\t * @returns {Boolean}\n\t */\n\tisValidDHACode(code: any) {\n\t\ttry {\n\t\t\tconst decimalCode = this.convertToDecimal(code).toString();\n\t\t\tconst checkDigit = Number.parseInt(decimalCode[0], 10);\n\t\t\tconst computedCheckDigit = DHAVerificationService.calculateLuhnCheckDigit(Number.parseInt(decimalCode, 10) * 10);\n\t\t\treturn computedCheckDigit === 0;\n\t\t} catch (exception) {\n\t\t\tconsole.error(exception);\n\t\t\treturn false;\n\t\t}\n\t}\n\tconvertToDecimal(number: any): any {\n\t\tif (number.length == 0) return 0;\n\n\t\tconst decimalValue = this.BASE30_DIGITS_INDEX[number[0]];\n\n\t\tif (decimalValue === undefined || decimalValue === null)\n\t\t\tthrow (\"Invalid base ${fromBase} number: ${number}\");\n\n\t\treturn decimalValue * 30 ** (number.length - 1) + this.convertToDecimal(number.slice(1));\n\t}\n\n\t//   return {isValidDHACode};\n}\n// const DHACodes = (() => {\n\n//   /**\n//    * Converts any number in the DHA base 30 character set to a decimal value.\n//    * \n//    * @param number {String}\n//    * @param fromBase {Number}\n//    *\n//    * @returns Number\n//    */\n\n\n//   /**\n//    * Convert any decimal value to any base within DHA's base 30 character set.\n//    * \n//    * @param number {Number}\n//    * @param toBase {Number}\n//    *\n//    * @returns {String}\n//    */\n\n\n//   /**\n//    * Returns the Luhn checksum for given number.\n//    * \n//    * @param number {Number}\n//    * @returns {Number}\n//    */\n\n// })();\n","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { CHARACTERS_AND_NUMBERS_LO } from \"@/components/Keyboard/KbLayouts\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { DHAVerificationService } from \"@/services/DHA_code_service\"\nimport HisDate from \"@/utils/Date\";\nimport { StockService } from \"./stock_service\";\nimport { toastWarning, toastDanger, toastSuccess } from \"@/utils/Alerts\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { BadRequestError } from  \"@/services/service\"\nimport { isEmpty } from \"lodash\";\nimport dayjs from \"dayjs\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any,\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      const data = formData.enter_batches;\n      let errors: string[] = [];\n      for (let index = 0; index < data.length; index++) {\n        const d = data[index].value;\n        const packSize = StockService.getPackSize(d.drug_id);\n        const total = packSize * d.tins;\n        const extras = {} as any;\n        const res = {\n          'reallocation_code': formData.authorization.value,\n          quantity: total,\n          date: formData.date.value,\n          reason: formData.reasons.value,\n        };\n        try {\n          if (formData.task.value === \"Relocations\") {\n            extras[\"location_id\"] = formData.relocation_location.value;\n            const f = await this.stockService.relocateItems(d.id, {\n              ...res,\n              ...extras,\n            });\n            if (!f) {\n              errors.push(\n                \"Could not save record for\" + StockService.getShortName(d.drug_id)\n              );\n            }\n          } else {\n            const f = await this.stockService.disposeItems(d.id, {\n              ...res,\n              ...extras,\n            });\n            if (!f) {\n              errors.push(\n                \"Could not save record for\" + StockService.getShortName(d.drug_id)\n              );\n            }\n          }\n        } catch (e) {\n          if (e instanceof BadRequestError && !isEmpty(e.errors)) {\n            errors = errors.concat(e.errors)\n          } else {\n            errors.push(`${e}`)\n          }\n          console.log(e)\n        }\n      }\n      if (errors.length === 0) {\n        toastSuccess(\"Stock succesfully moved\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(`${errors.join(',')}`);\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"task\",\n          helpText: \"Select task\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Relocations\",\n              value: \"Relocations\",\n            },\n            {\n              label: \"Disposal\",\n              value: \"Disposal\",\n            },\n          ],\n        },\n        {\n          id: \"relocation_location\",\n          helpText: \"Destination\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val) || Validation.notTheSame(val.label, `${StockService.getLocationName()}`),\n          condition: (val: any) => val.task.value === \"Relocations\" ,\n          options: (_: any, filter = \"\") => getFacilities(filter),\n          computedValue: (val: Option) => val.label,\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n        },\n        {\n          id: \"date\",\n          dynamicHelpText: (f) => `Date of ${f.task.label}`,\n          helpText: \"Set date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: any) => Validation.required(val),\n        },\n        {\n          id: \"select drugs\",\n          helpText: \"Select drugs\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          requireNext: true,\n          validation: (val: any) => Validation.required(val),\n          options: async (f: any, checked: Option[]) => {\n            const items: Option[] = await this.getItems()\n            return items.map((i: any) => {\n              i.isChecked = checked.filter(c => c.label === i.label).length >= 1 \n              return i\n            }).filter(item => !(dayjs(f.date.value).isBefore(item.value.delivery_date)))\n          },\n          unload: (val: any) => (this.selectedDrugs = val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_MOVEMENT,\n          beforeNext: (_: any, f: any, c: any, {currentFieldContext}: any) => {\n            const drugsToStr = (drugs: any) => drugs.map((b: any, i: number) => `${b.label}`).join(' & ')\n            const partialEntries = currentFieldContext.drugs.filter((drug: any) =>\n              drug.entries.map((d: any) => !(d.tins)).every(Boolean)\n            )\n            if (!isEmpty(partialEntries)) {\n              const partialDrugs = drugsToStr(partialEntries)\n              toastWarning(`Please fix partial batch entries for drugs: ${partialDrugs}`)\n              return false\n            }\n            return true\n          },\n          options: () => this.selectedDrugs,\n          validation: (val: any) => Validation.required(val),\n        },\n        {\n          id: \"authorization\",\n          helpText: \"Enter authorization code\",\n          type: FieldType.TT_TEXT,\n          config: {\n            customKeyboard: [CHARACTERS_AND_NUMBERS_LO, [['Delete']]]\n          },\n          validation: (v: Option) => Validation.validateSeries([\n            () => Validation.required(v),\n            () => {\n              const value = v.value as string\n              const dha = new DHAVerificationService()\n              return !dha.isValidDHACode(value.toUpperCase())\n                ? ['Invalid authorization code']\n                : null\n            }\n          ]), \n        },\n        {\n          id: \"reasons\",\n          helpText: \"Select reason\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (formdata: any) => this.getReasons(formdata),\n        },\n        {\n          id: \"summary\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(formData: any) {\n      const isRelocation = formData.task.value === 'Relocations'\n      const columns = [\n        \"Drug\",\n        \"Total Tins\",\n        \"Expiry date\",\n        \"Authorization code\",\n      ];\n\n      if (isRelocation) columns.push('Relocation')\n\n      const rows = formData.enter_batches.map((j: any) => {\n        const d = j.value;\n        const data = [\n          StockService.getShortName(d.drug_id),\n          d.tins,\n          HisDate.toStandardHisDisplayFormat(d.expiry_date),\n          formData.authorization.value.toUpperCase()\n        ]\n        if (isRelocation) data.push(formData.relocation_location.label)\n        return data\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    prepDrugs(formdata: any) {\n      const items: any[] = [];\n      const barcode = this.barcode;\n      formdata.enter_batches.value.forEach((element: any) => {\n        items.push({\n          'batch_number': element.batchNumber,\n          'items': [\n            {\n              'barcode': barcode,\n              'drug_id': element.drugID,\n              'expiry_date': element.expiry,\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\n              'delivery_date': formdata.date.value,\n            },\n          ],\n        });\n      });\n      return items;\n    },\n    selectAll(listData: Array<Option>) {\n      return listData.map((l) => {\n        l.isChecked = true;\n        return l;\n      });\n    },\n    async getItems() {\n      const f = await this.stockService.getItems();\n      return this.formatDrugs(f);\n    },\n    mapVal(vals: string[]) {\n      return vals.map((data) => {\n        return { label: data, value: data };\n      });\n    },\n    getReasons(formdata: any): any {\n      if (formdata.task.value === \"Relocations\") {\n        return this.mapVal([\n          \"Transfer to another facility/relocation\",\n          \"For trainings\",\n        ]);\n      } else {\n        return this.mapVal([\"Expired\", \"Damaged\", \"Phased out\", \"Banned\", \"Missing\"]);\n      }\n    },\n    formatDrugs(f: any) {\n      return f.map((drug: any) => {\n        return {\n          label: `${StockService.getShortName(\n            drug.drug_id\n          )} (${StockService.getPackSize(\n            drug.drug_id\n          )}) Expiry date: ${HisDate.toStandardHisDisplayFormat(\n            drug.expiry_date\n          )} \n          Batch (${drug.batch_number})\n          `,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n  },\n});\n","import { render } from \"./movement.vue?vue&type=template&id=240d6a87&ts=true\"\nimport script from \"./movement.vue?vue&type=script&lang=ts\"\nexport * from \"./movement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/brian/projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/brian/projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}