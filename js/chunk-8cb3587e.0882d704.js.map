{"version":3,"sources":["webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/apps/HTS/views/encounters/CompleteClientRegistration.vue?c98e","webpack:///./src/apps/HTS/views/encounters/CompleteClientRegistration.vue","webpack:///./src/apps/HTS/views/encounters/CompleteClientRegistration.vue?46fd","webpack:///./src/composables/storage.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","this","$emit","i","__exports__","mapToOption","listOptions","map","item","label","value","resolvePerson","computedForm","attr","values","isPlainObject","person","getGivenNameField","id","helpText","FieldType","TT_TEXT","computedValue","val","validation","Validation","isName","options","async","form","given_name","names","PersonService","searchGivenName","getFamilyNameField","family_name","searchFamilyName","getGenderField","customOptions","TT_SELECT","isEmpty","getDobConfig","includeHelpText","summaryLabel","minDate","HisDate","estimateDateFromAge","maxDate","getSessionDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","date","isEstimate","birthdate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","summaryMapValue","v","f","_f$home_region","test","home_region","dynamicHelpText","_f$home_region2","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","slot","color","onClick","c","field","filter","length","toastWarning","filtered","ok","alertConfirmation","address","LocationService","createAddress","toUpperCase","getHomeTaField","config","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","getCurrentDistrictField","_f$home_region3","current_region","match","getCurrentTAfield","_f$current_region","current_district","getCurrentVillageField","_f$current_region2","current_traditional_authority","getCellNumberField","number","split","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","condition","getFacilityLocationField","_","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","Array","isArray","person_attributes","reduce","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","person_id","gender","birthdate_estimated","getPersonAttributeOptions","patient","Patientservice","prop","getPatientInfoString","getID","getNationalID","other","patientID","npid","show","Service","getProgramName","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","formLabel","patientDashboardUrl","IonPage","HisStandardForm","setup","ref","htsClient","StartHtsEncounter","visitData","visitID","nextTask","onInitVisit","toLowerCase","PersonField","generateDateFields","current_village","_visitData$value","Offline","saveOffline","personParams","synchronizeRecord","then","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","Promise","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","constructor","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","get","onerror","error","filters","openCursor","cursor","filteredData","continue","put","delete","entries","every","isInteger","toLower","includes","offlineStorage","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-8cb3587e.0882d704.js","sourcesContent":["import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Region of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'District of current residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'District of current residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'TA of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Village of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Additional client information\",\n        cancelDestinationPath: _ctx.patientDashboardUrl(),\n        \"on-finish-action\": _ctx.onFinish,\n        fields: _ctx.fields\n      }, null, 8, [\"cancelDestinationPath\", \"on-finish-action\", \"fields\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent, ref } from \"vue\";\nimport { IonPage } from \"@ionic/vue\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport { Offline } from '@/composables/offline'\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { StartHtsEncounter } from \"@/apps/HTS/composables/HtsFormEncounter\";\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\n\nexport default defineComponent({\n    components: {\n        IonPage,\n        HisStandardForm\n    },\n    setup() {\n        const fields = ref<Field[]>([])\n        const { htsClient } = StartHtsEncounter()\n        const {\n            visitData,\n            visitID,\n            nextTask,\n            patientDashboardUrl\n        } = StartHtsEncounter({\n            onInitVisit: async () => {\n                if (`${htsClient.givenName} ${htsClient.familyName}`.toLowerCase() != 'unknown unknown') {\n                    return toastWarning(\"Client already registered\")\n                }\n                fields.value = [\n                    PersonField.getGivenNameField(),\n                    PersonField.getFamilyNameField(),\n                    ...generateDateFields(PersonField.getDobConfig()),\n                    PersonField.getHomeRegionField(),\n                    PersonField.getHomeDistrictField(),\n                    PersonField.getHomeTaField(),\n                    PersonField.getHomeVillageField(),\n                    {\n                        ...PersonField.getCurrentRegionField(),\n                        summaryMapValue: (v: Option, f: any, computedData: any) => {\n                            if (/use home/i.test(`${v.value}`)) {\n                                const person = computedData.person\n                                return [\n                                    { label: 'Current region', value: person?.current_region },\n                                    { label: 'Current District/Country', value: person?.current_district },\n                                    { label: 'Current Traditional Authority', value: person?.current_traditional_authority },\n                                    { label: 'Current village', value: person?.current_village}\n                                ]\n                            }\n                            return { label: 'Current Region', value: v.label }\n                        } \n                    },\n                    {\n                        ...PersonField.getCurrentDistrictField(),\n                        condition: (form: any) => !form.current_region.label.match(/foreign|use home/i)\n                    },\n                    {\n                        ...PersonField.getCurrentTAfield(),\n                        condition: (form: any) => !form.current_region.label.match(/foreign|use home/i)\n                    },\n                    {\n                        ...PersonField.getCurrentVillageField(),\n                        condition: (form: any) => !form.current_region.label.match(/foreign|use home/i)\n                    },\n                    ...PersonField.getLandmarkFields(),\n                    PersonField.getCellNumberField()\n                ]\n            }\n        })\n\n        async function onFinish(_: any, computedData: any) {\n            Offline().saveOffline({\n                id: visitID.value,\n                label: \"HTS Full Client Registration\",\n                personParams: {\n                    npid: htsClient.npid,\n                    person: {\n                        ...(visitData.value?.personParams?.person||{}),\n                        ...PersonField.resolvePerson(computedData),\n                    }\n                }\n            })\n            nextTask()\n            Offline().synchronizeRecord(visitID.value).then((data: any) => Offline().saveOffline(data))\n        }\n\n        return {\n            patientDashboardUrl,\n            onFinish,\n            fields\n        }\n    }\n})\n","import { render } from \"./CompleteClientRegistration.vue?vue&type=template&id=cbac112e&ts=true\"\nimport script from \"./CompleteClientRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./CompleteClientRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}