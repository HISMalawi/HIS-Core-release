{"version":3,"sources":["webpack:///./src/apps/LOS/views/Reports/TestResultsReport.vue?a41d","webpack:///./src/apps/LOS/views/Reports/TestResultsReport.vue","webpack:///./src/apps/LOS/views/Reports/TestResultsReport.vue?1f19"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_openBlock","_createBlock","title","period","rows","fields","columns","canExportCsv","canExportPDf","reportReady","onReportConfiguration","onPeriod","defineComponent","mixins","ReportMixin","components","ReportTemplate","data","cohort","reportType","patientLevelColumns","table","thTxt","disaggregatedColumns","created","this","report","LabReportService","getFormFields","methods","type","tests","getDateIntervalPeriod","value","setDisaggregatedRows","setPatientLevelRows","getDateDurationFields","id","helpText","FieldType","TT_MULTIPLE_SELECT","options","async","_","x","config","setStartDate","start_date","setEndDate","end_date","getLabResultsReport","availableTests","buildAvailableTests","buildAvailableTestOptions","TT_SELECT","label","results","sortByArvNumber","forEach","result","measures","measure","name","push","patient_id","arv","arv_number","gender","ageGroup","age_group","birthdate","toDate","ordered","order_date","specimen","test","modifier","released","result_date","length","other","males","females","concat","map","i","ageGroupIndex","AGE_GROUPS","group","maleRow","td","femaleRow","filterByGender","filter","drill","d","tdARV","tdDate","__exports__"],"mappings":"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","file":"js/chunk-2d226ccc.c52205df.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_report_template = _resolveComponent(\"report-template\")!\n\n  return (_openBlock(), _createBlock(_component_report_template, {\n    title: _ctx.title,\n    period: _ctx.period,\n    rows: _ctx.rows,\n    fields: _ctx.fields,\n    columns: _ctx.columns,\n    canExportCsv: true,\n    canExportPDf: true,\n    reportReady: _ctx.reportReady,\n    onReportConfiguration: _ctx.onPeriod\n  }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"reportReady\", \"onReportConfiguration\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { LabReportService } from \"@/apps/ART/services/reports/lab_report_service\"\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport { AGE_GROUPS } from \"@/apps/ART/services/reports/patient_report_service\"\nimport { FieldType } from '@/components/Forms/BaseFormElements'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { Option } from '@/components/Forms/FieldInterface'\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\n\nexport default defineComponent({\n    mixins: [ReportMixin],\n    components: { ReportTemplate },\n    data: () => ({\n        title: 'Lab test result(s)',\n        rows: [] as Array<any>,\n        cohort: [] as Array<any>,\n        reportType: '' as string,\n        reportReady: false as boolean,\n        columns: [] as Array<any>,\n        patientLevelColumns:[ \n            [\n                table.thTxt('ARV#'), \n                table.thTxt('Gender'), \n                table.thTxt('Birthdate'), \n                table.thTxt('Ordered'), \n                table.thTxt('Specimen'), \n                table.thTxt('Test'), \n                table.thTxt('Result'), \n                table.thTxt('Released')\n            ]\n        ],\n        disaggregatedColumns: [\n            table.thTxt('Age group'), \n            table.thTxt('Gender')\n        ]\n    }),\n    created() {\n        this.report = new LabReportService()\n        this.fields = this.getFormFields()\n    },\n    methods: {\n        async onPeriod({type, tests}: any) {\n            this.reportReady = true\n            this.rows = []\n            this.period = this.report.getDateIntervalPeriod()\n            this.reportType = type.value\n            if (this.reportType === 'disaggregated') {\n                this.setDisaggregatedRows(tests)\n            } else if (this.reportType === 'patient_level') {\n                this.setPatientLevelRows(tests)\n            }\n        },\n        getFormFields(): Array<Field> {\n            return [\n                ...this.getDateDurationFields(),\n                {\n                    id: 'tests',\n                    helpText: 'Available test(s) results',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: async (_: any, x: any, config: any) => {\n                        this.report.setStartDate(config.start_date)\n                        this.report.setEndDate(config.end_date)\n                        const data = await this.report.getLabResultsReport()\n                        const availableTests = this.buildAvailableTests(data)\n                        return this.buildAvailableTestOptions(availableTests)\n                    } \n                },\n                {\n                    id: 'type',\n                    helpText: 'Select report type',\n                    type: FieldType.TT_SELECT,\n                    options: () => [\n                        {\n                            label: 'Disaggregated',\n                            value: 'disaggregated',\n                        },\n                        {\n                            label: 'Patient level',\n                            value: 'patient_level',\n                        }\n                    ]\n                }\n            ]\n        },\n        buildAvailableTests(results: any) {\n            const tests: Record<string, any> = {}\n            this.sortByArvNumber(results).forEach((result: any) => {\n                result.measures.forEach((measure: any) => {\n                    if (!(measure.name in tests)) {\n                        tests[measure.name] = []\n                    }\n                    tests[measure.name].push({\n                        id: result.patient_id,\n                        arv: result.arv_number,\n                        gender: result.gender,\n                        ageGroup: result.age_group,\n                        birthdate: this.toDate(result.birthdate),\n                        ordered: this.toDate(result.order_date),\n                        specimen: result.test,\n                        test:  measure.name,\n                        result: `${measure.modifier} ${measure.value}`,\n                        released: this.toDate(result.result_date)\n                    })\n                })\n            })\n            return tests\n        },\n        buildAvailableTestOptions(availableTests: Record<string, any>) {\n            const options: Array<Option> = []\n            for(const test in availableTests) {\n                const result = availableTests[test]\n                options.push({\n                    label: test,\n                    value: result.length,\n                    other: result\n                })\n            }\n            return options\n        },\n        setDisaggregatedRows(results: Array<Option>) {\n            const males = []\n            const females = []\n            this.columns = [this.disaggregatedColumns.concat(results.map((i: any) => table.thTxt(i.label)))]\n            for(const ageGroupIndex in AGE_GROUPS) {\n                const group = AGE_GROUPS[ageGroupIndex]\n                const maleRow: any = [table.td(group), table.td('M')]\n                const femaleRow: any = [table.td(group), table.td('F')]\n                results.forEach(({other}: Option) => {\n                    const filterByGender = (gender: 'F' | 'M') => {\n                        return other.filter((i: any) => i.gender === gender && i.ageGroup === group)\n                                    .map((i: any) => i.id)\n                    }\n                    maleRow.push(this.drill(filterByGender('M')))\n                    femaleRow.push(this.drill(filterByGender('F')))\n                })\n                males.push(maleRow)\n                females.push(femaleRow)\n                this.rows = [...females, ...males]\n            }\n        },\n        setPatientLevelRows(results: Array<Option>) {\n            this.columns = this.patientLevelColumns\n            results.forEach(({other}: Option)  => {\n                other.forEach((d: any) => {\n                    this.rows.push([\n                        this.tdARV(d.arv),\n                        table.td(d.gender),\n                        table.tdDate(d.birthdate),\n                        table.tdDate(d.ordered),\n                        table.td(d.specimen),\n                        table.td(d.test),\n                        table.td(d.result),\n                        table.tdDate(d.released)\n                    ])\n                })\n            })\n        }\n    }\n})\n","import { render } from \"./TestResultsReport.vue?vue&type=template&id=d8742962&ts=true\"\nimport script from \"./TestResultsReport.vue?vue&type=script&lang=ts\"\nexport * from \"./TestResultsReport.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}