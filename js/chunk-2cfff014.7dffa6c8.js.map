{"version":3,"sources":["webpack:///./src/apps/HTS/services/hts_items_given.ts","webpack:///./src/apps/HTS/views/encounters/HtsItemsGivenToClient.vue?7452","webpack:///./src/apps/HTS/views/encounters/HtsItemsGivenToClient.vue","webpack:///./src/apps/HTS/views/encounters/HtsItemsGivenToClient.vue?a27a","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts"],"names":["HtsItemsGivenService","AppEncounterService","constructor","patientID","providerID","super","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","itemsGivenToClientField","itemsGivenHiddenField","selfTestsGivenToClientField","hivTestKitDetailsField","immediate","methods","concept","ObservationService","getFirstValueCoded","computedData","createEncounter","saveObservationList","resolveObs","nextTask","getSelfKitCount","f","items_given_to_client","Array","isArray","label","value","id","helpText","type","FieldType","TT_ADHERENCE_INPUT","isRequired","appearInSummary","beforeNext","async","v","every","d","alertConfirmation","validation","maxSelfKits","maxMaleCondoms","maxFemaleCondoms","maxFRS","some","test","toLowerCase","options","isEmpty","items_given_to_client_selection","config","noFloat","titles","TT_HIDDEN","summaryMapValue","defaultValue","filter","finalComputedValue","obs","map","buildValueNumber","parseInt","buildValueCoded","kitInformationUpdated","SESSION_KIT_NAMES","SESSION_KIT_ID","kitHistory","JSON","parse","sessionStorage","getItem","kitOptions","getSessionKitValue","TT_INPUT_ARRAY","columns","other","incomplete","x","condition","setItem","stringify","kitName","find","kitLot","kitExpiry","parentObs","childObs","l","child","Promise","all","test_kit","kitNameOption","buildValueText","onclick","val","r","index","t","listData","keyboard","TT_TEXT","uniqBy","forEach","i","kitLotNoOption","kitExpiryDateOption","buildValueDate","TT_FULL_DATE","Date","date","toDate","monthsFromNow","dayjs","diff","kits","generateRows","count","from","length","slice","el","estimate","someIncomplete","broadcast","rows","channel","newValue","oldValue","col","broadcastlistener","update","disabled","userOptionField","HIVStatus","push","selectionList","selection","title","preset","size","genderOptionField","patient","getGender","ageOptionField","getAge","age","buildNumericEstimate","numericKeypad","isEstimate","toastWarning","toggleButton","strictNumbers","approachOptionField","resultOptionField","self_test_kits","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","facts","isEnrolledInProgam","route","params","patient_id","toUpperCase","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","username","split","provider","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","p","person","names","latestName","given_name","family_name","toOption","mapStrToOptions","items","path","loadingController","create","backdropDismiss","message","present","getTop","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","reduce","accum","cur","concat","inArray","arr","expression","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","formData","$emit","isCondition","ignored","undefined","prop","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","description","text","info"],"mappings":"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","file":"js/chunk-2cfff014.7dffa6c8.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsItemsGivenService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 196, providerID)\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Items Given\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { HtsItemsGivenService } from \"../../services/hts_items_given\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport keyboard, { numericKeypad, selectionList } from \"@/utils/PopupKeyboard\";\nimport { find, isEmpty, uniqBy } from \"lodash\";\nimport { alertConfirmation, toastWarning } from \"@/utils/Alerts\";\nimport { toDate } from \"@/utils/Strs\";\nimport dayjs from \"dayjs\";\nimport { ObservationService } from '@/services/observation_service';\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsItemsGivenService,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsItemsGivenService(\n            this.patientID,\n            this.providerID\n          );\n          this.fields = [\n            this.itemsGivenToClientField(),\n            this.itemsGivenHiddenField(),\n            this.selfTestsGivenToClientField(),\n            this.hivTestKitDetailsField(),\n          ];\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    async obs(concept: string) { return await ObservationService.getFirstValueCoded(this.patientID, concept) || 'Unknown'},\n    async onFinish(_: any, computedData: any) {\n      await this.service.createEncounter();\n      await this.service.saveObservationList(\n        (await this.resolveObs(computedData)) as any\n      );\n      this.nextTask();\n    },\n    getSelfKitCount(f: Record<string, any>) {\n      if (f.items_given_to_client && Array.isArray(f.items_given_to_client)) {\n        return find(f.items_given_to_client, { label: \"Self-Test Kit\" })?.value || 0;\n      }\n      return 0;\n    },\n    itemsGivenToClientField(): Field {\n      return {\n        id: \"items_given_to_client_selection\",\n        helpText: \"Items given to the client\",\n        type: FieldType.TT_ADHERENCE_INPUT,\n        isRequired: () => true,\n        appearInSummary: () => false,\n        beforeNext: async (v: Option[]) => {\n          if (v.every((d) => d.value <= 0)) {\n            if (\n              !(await alertConfirmation(\n                \"Do you want to proceed client without items given?\"\n              ))\n            ) {\n              return false;\n            }\n          }\n          return true;\n        },\n        validation: (v: Option[]) => {\n          const maxSelfKits = 3;\n          const maxMaleCondoms = 30;\n          const maxFemaleCondoms = 30;\n          const maxFRS = 5;\n          if (\n            v.some((d) => /self-test/i.test(d.label) && d.value > maxSelfKits)\n          ) {\n            return [\n              `Cannot distribute more than ${maxSelfKits} Self-test kits. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => /male condoms/i.test(d.label.toLowerCase()) && d.value > maxMaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxMaleCondoms} Male Condoms. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => /female condoms/i.test(d.label.toLowerCase()) && d.value > maxFemaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFemaleCondoms} Female Condoms. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => /frs/i.test(d.label.toLowerCase()) && d.value > maxFRS)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFRS} FRS. Please adjust the number accordingly`,\n            ];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          if (!isEmpty(f.items_given_to_client_selection)) {\n            return f.items_given_to_client_selection;\n          }\n          return [\n            { label: \"Self-Test Kit\", value: \"\" },\n            { label: \"Male condoms\", value: \"\" },\n            { label: \"Female condoms\", value: \"\" },\n            { label: \"FRS\", value: \"\" },\n          ] as Option[];\n        },\n        config: {\n          noFloat: true,\n          titles: {\n            label: \"Item\",\n            value: \"Quantity\",\n          },\n        },\n      };\n    },\n    itemsGivenHiddenField(): Field {\n      return {\n        id: \"items_given_to_client\",\n        helpText: \"Items given\",\n        type: FieldType.TT_HIDDEN,\n        summaryMapValue: (v: Option) => {\n          return {\n            label: `${v.label} given`,\n            value: v.value,\n          };\n        },\n        defaultValue: (f: Record<string, Option[]>) => {\n          if (f.items_given_to_client_selection.every((d) => d.value <= 0)) {\n            return {\n              label: \"No items\",\n              value: \"Yes\",\n            };\n          }\n          return f.items_given_to_client_selection.filter((d) => d.value > 0);\n        },\n        finalComputedValue: (v: Option[] | Option) => {\n          if (Array.isArray(v)) {\n            return {\n              obs: v.map((d: Option) =>\n                this.service.buildValueNumber(d.label, parseInt(`${d.value}`))\n              ),\n            };\n          }\n          return {\n            obs: this.service.buildValueCoded(\"None\", \"Yes\"),\n          };\n        },\n      };\n    },\n    hivTestKitDetailsField(): Field {\n      let kitInformationUpdated = false\n      const SESSION_KIT_NAMES = \"htsSelfKitNames\";\n      const SESSION_KIT_ID = \"htsSelfTestKitData\";\n      let kitHistory: any = JSON.parse(\n        sessionStorage.getItem(SESSION_KIT_ID) || \"{}\"\n      );\n      let kitOptions: Option[] | [] = JSON.parse(\n        sessionStorage.getItem(SESSION_KIT_NAMES) || \"[]\"\n      );\n      const getSessionKitValue = (id: string) => kitHistory[id] || \"\";\n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v?.other?.fields,\n        validation: (v: Option[]) => {\n          const incomplete = v\n            .map((d: Option) => d.other.fields)\n            .some((d: Option[]) => d.some((x: Option) => x.value === \"\"));\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        condition: (f: any) => this.getSelfKitCount(f) >= 1,\n        beforeNext: async () => {\n          if (!kitInformationUpdated && !isEmpty(kitHistory)) {\n            if (!(await alertConfirmation('Are you sure you want to proceed without updating testkits?'))) {\n              return false\n            }\n          }\n          return true\n        },\n        finalComputedValue: (v: Option[]) => {\n          const data = v.map((d) => d.other.fields);\n          // Cache stuff in session storage taking advantage when creating computed values\n          sessionStorage.setItem(SESSION_KIT_NAMES, JSON.stringify(kitOptions));\n          sessionStorage.setItem(\n            SESSION_KIT_ID,\n            JSON.stringify({\n              kitName: find(data[0], { label: \"Kit Name\" })?.value,\n              kitLot: find(data[0], { label: \"Kit Lot No.\" })?.value,\n              kitExpiry: find(data[0], { label: \"Kit Expiry Date\" })?.value,\n            })\n          );\n          return {\n            obs: data.map(async (options: Option[]) => {\n              const [parentObs, ...childObs] = options\n                .filter((l: Option) => typeof l.other.obs === \"function\")\n                .map((d: Option) => d.other.obs(d));\n              return {\n                ...(await parentObs),\n                child: await Promise.all(childObs),\n              };\n            }),\n          };\n        },\n        options: async (f: any) => {\n          if (f.test_kit != null) return f.test_kit;\n          const kitNameOption = () => ({\n            label: \"Kit Name\",\n            value: getSessionKitValue(\"kitName\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueText(\"Kit name\", v.value as string),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"name\",\n                    helpText: \"Kit Name\",\n                    type: FieldType.TT_TEXT,\n                    isRequired: () => true,\n                    options: () => kitOptions,\n                  },\n                  (v: Option) => {\n                    val.value = v.value;\n                    kitOptions = uniqBy([v, ...kitOptions], \"label\");\n                    kitInformationUpdated = true\n                    // Use first row's Lot number to update other Lot numbers which are empty\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/name/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          });\n          const kitLotNoOption = () => ({\n            label: \"Kit Lot No.\",\n            value: getSessionKitValue(\"kitLot\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueNumber(\n                  \"Kit lot number\",\n                  v.value as number\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard({\n                  id: 'lot',\n                  helpText: 'Enter Lot Number',\n                  type: FieldType.TT_TEXT,\n                  isRequired: () => true\n                }, \n                (v: Option) => {\n                  val.value = v.value\n                  kitInformationUpdated = true\n                  // Use first row's Lot number to update other Lot numbers which are empty\n                  if (index === 0) {\n                    listData.forEach((i: Option) => {\n                      i.other.fields.forEach((d: Option) => {\n                        if (/lot/i.test(d.label) && d.value === '') {\n                          d.value = val.value\n                        }\n                      })\n                    })\n                  }\n                })\n              },\n            },\n          });\n          const kitExpiryDateOption = () => ({\n            label: \"Kit Expiry Date\",\n            value: getSessionKitValue(\"kitExpiry\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueDate(\n                  \"kit expiry date\",\n                  v.value as string\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(this.service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(this.service.date),\n                        ];\n                      }\n                      const monthsFromNow = dayjs(v.label).diff(this.service.date, \"month\")\n                      if (monthsFromNow <= 2) {\n                        return [\"It's not advisable to use a test kit that will expire in less than 2 months\"]\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => {\n                    val.value = v.value\n                    kitInformationUpdated = true\n                    // Use first row's expiry date to update other expiry dates\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/expiry/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          })\n          const kits = this.getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"\",\n                value: \"\",\n                other: {\n                  fields: [\n                   kitNameOption(),\n                   kitLotNoOption(),\n                   kitExpiryDateOption(),\n                  ],\n                },\n              };\n            });\n            if (Array.isArray(f.test_kit)) {\n              if (kits < f.test_kit.length) {\n                return f.test_kit.slice(0, kits);\n              } else if (kits > f.test_kit.length) {\n                return [\n                  ...f.test_kit,\n                  ...generateRows(\n                    kits - f.test_kit.length\n                  ),\n                ];\n              } else {\n                return f.test_kit;\n              }\n          }\n          return generateRows();\n        },\n      };\n    },\n    selfTestsGivenToClientField(): Field {\n      return {\n        id: \"self_test_kits\",\n        helpText: \"Self-test kit users\",\n        type: FieldType.TT_INPUT_ARRAY,\n        isRequired: () => true,\n        condition: (f: any) =>\n          f.items_given_to_client.some(\n            (d: Option) => /self-test/i.test(d.label) && d.value > 0\n          ),\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d.value, d));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        summaryMapValue: (v: Option) => v.other.fields.map((d: Option) => {\n          const el = {...d}\n          if (el.label === 'Age' && el?.other?.estimate) {\n            el.value = `${el.value} (Estimated)`\n          }\n          return el\n        }),\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 4;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        config: {\n          columns: [\n            { label: \"End-User\" },\n            { label: \"Sex\" },\n            { label: \"Age\" },\n            { label: \"Approach\" },\n            { label: \"Result\" },\n          ],\n        },\n        options: (f: any) => {\n          const broadcast = (rows: Option[], channel: string, newValue: string|number, oldValue: string|number) => {\n            rows.forEach(col => {\n              if (typeof col?.other?.broadcastlistener === \"function\") {\n                const update = col.other.broadcastlistener(channel, newValue, oldValue)\n                if (update) {\n                  col.value = update.value\n                  col.disabled = update.disabled\n                }\n              }\n            })\n          }\n          const userOptionField = () => ({\n            label: \"User\",\n            value: \"\",\n            other: {\n              obs: (v: string) =>\n                this.service.buildValueCoded(\"Self-test end user\", v),\n              onclick: async (\n                val: Option,\n                rows: Option[],\n                index: number,\n                i: number,\n                listData: Option[]\n              ) => {\n                const options = [];\n                if (!/Self/.test(JSON.stringify(listData.filter((_: any, i) => i != index)))) {\n                  const HIVStatus = await this.obs(\"HIV status\")\n                  if(!/positive/.test(HIVStatus.toLowerCase())) options.push(\"Self\");\n                }\n                selectionList(\n                  [...options, \"Sexual partner\", \"Other\"],\n                  (selection: string) => {\n                    broadcast(rows, 'User', selection, val.value)\n                    val.value = selection;\n                  },\n                  {\n                    title: \"Select End-User\",\n                    preset: val != null ? val.value : \"\",\n                    size: \"small-modal\",\n                  }\n                );\n              },\n            },\n          });\n          const genderOptionField = () => ({\n            label: \"Sex\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string, oldValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { \n                      value: this.patient.getGender() === 'M' ? \"Male\" : \"Female\", \n                      disabled: true \n                    }\n                  }\n                  if (oldValue === 'Self') {\n                    return { value: '', disabled: false }\n                  }\n                }\n              },\n              obs: (v: string) => this.service.buildValueCoded(\"Gender of contact\", v),\n              onclick: (val: Option) => {\n                selectionList(\n                  [\"Female\", \"Male\"],\n                  (selection: string) => (val.value = selection),\n                  {\n                    title: \"Select gender\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const ageOptionField = () => ({\n            label: \"Age\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { value: `${this.patient.getAge()}`, disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string, d: Option) => {\n                const age = parseInt(v)\n                if (d?.other?.estimate) {\n                  return this.service.buildNumericEstimate('Age of contact', age)\n                } else {\n                  return this.service.buildValueNumber(\"Age of contact\", age)\n                }\n              },\n              onclick: (val: Option) => {\n                numericKeypad((age: number | string, isEstimate: boolean | undefined) => {\n                  if (age && parseInt(`${age}`) >= 125) {\n                    val.value =''\n                    return toastWarning(`Age exceeds maximum human life expectancy of 124 years`)\n                  }\n                  val.value = age\n                  val.other.estimate = isEstimate\n                }, \n                {\n                  title: 'Age',\n                  preset: ' ',\n                  toggleButton: \"Age is estimated?\",\n                  noFloat: true,\n                  strictNumbers: true\n                });\n              },\n            },\n          });\n          const approachOptionField = () => ({\n            label: \"Approach\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue != 'Self') {\n                    return { value: \"Un-assisted\", disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string) => this.service.buildValueCoded(\"Self-test approach\", v),\n              onclick: (val: Option, rows: Option[]) => {\n                selectionList(\n                  [\"Directly-assisted\", \"Un-assisted\"],\n                  (v: string) => {\n                    broadcast(rows, 'Approach', v, val.value)\n                    val.value = v\n                  },\n                  {\n                    title: \"Select approach\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const resultOptionField = () => ({\n            label: \"Result\",\n            value: \"N/A\",\n            other: {\n              obs: (v: string) => {\n                if (v && !/n\\/a/i.test(`${v}`)) {\n                  return this.service.buildValueCoded('Test 1', v)\n                }\n              },\n              onclick: (val: Option, rows: Option[]) => {\n                selectionList([\n                  'Negative',\n                  'Positive',\n                  'N/A'\n                ], \n                (selection: string) => {\n                  broadcast(rows, 'Result', selection, val.value)\n                  val.value = selection\n                }, {\n                  title: 'Directly-assisted HIV Result'\n                })\n              }\n            }\n          })\n          const kits = this.getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"item\",\n                value: \"N/A\",\n                other: {\n                  fields: [\n                    userOptionField(),\n                    genderOptionField(),\n                    ageOptionField(),\n                    approachOptionField(),\n                    resultOptionField()\n                  ],\n                },\n              };\n            });\n          if (Array.isArray(f.self_test_kits)) {\n            if (this.getSelfKitCount(f) < f.self_test_kits.length) {\n              return f.self_test_kits.slice(0, this.getSelfKitCount(f));\n            } else if (this.getSelfKitCount(f) > f.self_test_kits.length) {\n              return [\n                ...f.self_test_kits,\n                ...generateRows(\n                  this.getSelfKitCount(f) - f.self_test_kits.length\n                ),\n              ];\n            } else {\n              return f.self_test_kits;\n            }\n          }\n          return generateRows();\n        },\n      };\n    },\n  },\n});\n","import { render } from \"./HtsItemsGivenToClient.vue?vue&type=template&id=d9aa005c&ts=true\"\nimport script from \"./HtsItemsGivenToClient.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsItemsGivenToClient.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}