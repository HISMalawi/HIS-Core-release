{"version":3,"sources":["webpack:///./src/views/Confirmation.vue?92f5","webpack:///./src/views/Confirmation.vue?6c9d","webpack:///./src/guidelines/confirmation_page_guidelines.ts","webpack:///./src/apps/ANC/Services/anc_pregnancy_status_service.ts","webpack:///./src/views/Confirmation.vue","webpack:///./src/views/Confirmation.vue?8307","webpack:///./src/utils/ActionSheetHelpers/VoidReason.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["_withId","_withScopeId","_pushScopeId","_hoisted_1","class","_hoisted_2","_hoisted_3","_createTextVNode","_hoisted_4","_hoisted_5","_createVNode","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_popScopeId","TargetEvent","FlowState","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_col","_resolveComponent","_component_ion_row","_component_ion_toolbar","_component_ion_header","_component_confirmation_card","_component_ion_content","_component_ion_button","_component_ion_spinner","_component_ion_footer","_component_ion_page","_openBlock","_createBlock","default","translucent","_toDisplayString","demographics","patientName","birthdate","gender","_","ancestryDistrict","ancestryTA","ancestryVillage","currentDistrict","currentTA","currentVillage","_Fragment","_renderList","cards","card","index","key","title","label","items","values","isLoading","color","size","disabled","facts","patientFound","isAdmin","onClick","onVoid","anc","canInitiateNewPregnancy","slot","onInitiateNewAncPregnancy","_createCommentVNode","isReady","nextTask","name","CONFIRMATION_PAGE_GUIDELINES","weight","targetEvent","ONLOAD","actions","alert","infoActionSheet","action","SEARCH_BY_NAME","GO_HOME","conditions","globalProperties","ddeEnabled","yes","tableActionSheet","invalidDemographics","GO_BACK","hasInvalidDemographics","scannedNpid","dde","voidedNpids","cols","rows","VIEW_MERGE_AUDIT_FOR_NPID","localNpidDiff","remoteNpidDiff","CREATE_NPID_WITH_REMOTE_DIFF","ASSIGN_NPID","currentNpid","npid","isUnknownOrEmpty","npidHasOverFiveDuplicates","isTrue","RESOLVE_DUPLICATE_NPIDS","npidHasDuplicates","ON_CONTINUE","CONTINUE","FORCE_EXIT","currentOutcome","outcome","patientType","contextualBtn","ADD_AS_DRUG_REFILL","ADD_AS_EXTERNAL_CONSULTATION","ADD_AS_NEW_PATIENT","programName","type","includes","ENROLL","EXIT","enrolledInProgram","enrolled","ACTIVATE_FN","identifiers","useFilingNumbers","UPDATE_DMG","patientIsComplete","isFound","diffRows","diffRowColors","UPDATE_LOCAL_DDE_DIFFS","REFRESH_DDE_DEMOGRAPHICS","hasDemographicConflict","PRINT_NPID","match","RegExp","hasInvalidNpid","userRoles","roles","hasHighViralLoad","isHigh","lmpMonths","INITIATE_ANC_PREGNANCY","currentPregnancyIsOverdue","g","toLowerCase","AncPregnancyStatusService","patientID","providerID","ProgramService","getProgramInformation","this","info","date_of_lnmp","lmp","dayjs","today","date","diff","getLmpInMonths","createEncounter","saveValueCodedObs","AppEncounterService","defineComponent","components","IonContent","IonHeader","IonFooter","IonPage","IonToolbar","IonSpinner","IonRow","IonCol","IonButton","ConfirmationCard","defineAsyncComponent","data","app","program","patient","localPatient","ddeInstance","useDDE","programInfo","programs","localDiffs","givenName","familyName","landmark","phoneNumber","created","initCards","HisApp","getActiveApp","mounted","updateCards","PatientDemographicsExchangeService","setGlobalPropertyFacts","then","query","$route","isEmpty","person_id","patient_barcode","findAndSetPatient","computed","HisDate","toStandardHisDisplayFormat","UserService","methods","i","confirmationSummary","cardItems","keys","Object","cardData","catch","e","console","error","c","val","init","asyncValue","value","staticValue","length","setViralLoadStatus","OrderService","getOrders","getID","orders","vlOrders","getViralLoadOrders","isHighViralLoadResult","tests","result","id","req","searchNpid","Patientservice","findByID","findByNpid","handleSearchResults","toastDanger","results","IncompleteEntityError","entity","BadRequestError","Array","isArray","errors","msg","entities","setInvalidParametersFacts","Store","set","setPatientFacts","factPromises","push","setProgramFacts","setDDEFacts","setAncFacts","getNationalID","validateNpid","Promise","all","setVoidedNpidFacts","onEvent","getDocID","errorExceptions","map","entries","join","reloadPatient","undefined","getFullName","getGivenName","getFamilyName","getAttribute","getGender","getBirthdate","getHomeDistrict","getHomeTA","getHomeVillage","getCurrentDistrict","getCurrentTA","getCurrentVillage","getIdentifiers","get","applicationName","pregnancyIsOverdue","buildDDEDiffs","diffs","comparisons","refs","ref","diffIndexes","indexes","k","local","remote","rowColors","PatientProgramService","getProgram","isValueEmpty","getUserRoles","r","role","ObservationService","getFirstValueCoded","getLocalAndRemoteDiffs","localAndRemoteDiffs","formatDiffValuesByType","warn","findVoidedIdentifier","d","p","$router","assignNpid","modalController","dismiss","toastWarning","callback","findings","matchToGuidelines","finding","state","runFlowState","alertConfirmation","initiateNewAncPregnancy","createNewPregnancyStatus","states","back","enrollProgram","printNpid","delayPromise","createNPID","toastSuccess","alreadyAssigned","reassignNpid","res","PatientPrintoutService","printNidLbl","refreshDemographics","createPatientType","updateLocalDifferences","PatientTypeService","savePatientType","popVoidReason","reason","voidPatient","__exports__","optionsActionSheet","modal","selection","isCondition","ignored","prop","every","Boolean","sortByPriority","sort","a","b","priority","sortByWeight","guidelines","target","sortBy","matches","guidelineIndex","targetValidations","some","description","text"],"mappings":"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","file":"js/chunk-4434c4fe.ee6292b4.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Confirmation.vue?vue&type=style&index=0&id=0492b742&scoped=true&lang=css\"","import { toDisplayString as _toDisplayString, createVNode as _createVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, withScopeId as _withScopeId, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\nconst _withId = /*#__PURE__*/_withScopeId(\"data-v-0492b742\")\n\n_pushScopeId(\"data-v-0492b742\")\nconst _hoisted_1 = { class: \"tool-bar-medium-card\" }\nconst _hoisted_2 = { class: \"his-sm-text\" }\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\"Patient Name: \")\nconst _hoisted_4 = /*#__PURE__*/_createTextVNode()\nconst _hoisted_5 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_6 = { class: \"his-sm-text\" }\nconst _hoisted_7 = /*#__PURE__*/_createTextVNode(\"Birthdate: \")\nconst _hoisted_8 = /*#__PURE__*/_createTextVNode()\nconst _hoisted_9 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_10 = { class: \"his-sm-text\" }\nconst _hoisted_11 = /*#__PURE__*/_createTextVNode(\"Gender: \")\nconst _hoisted_12 = { class: \"tool-bar-medium-card\" }\nconst _hoisted_13 = { class: \"his-sm-text\" }\nconst _hoisted_14 = /*#__PURE__*/_createTextVNode(\"Ancestry district: \")\nconst _hoisted_15 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_16 = { class: \"his-sm-text\" }\nconst _hoisted_17 = /*#__PURE__*/_createTextVNode(\"Ancestry TA: \")\nconst _hoisted_18 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_19 = { class: \"his-sm-text\" }\nconst _hoisted_20 = /*#__PURE__*/_createTextVNode(\"Ancestry village: \")\nconst _hoisted_21 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_22 = { class: \"tool-bar-medium-card\" }\nconst _hoisted_23 = { class: \"his-sm-text\" }\nconst _hoisted_24 = /*#__PURE__*/_createTextVNode(\"Current District:\")\nconst _hoisted_25 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_26 = { class: \"his-sm-text\" }\nconst _hoisted_27 = /*#__PURE__*/_createTextVNode(\"Current TA: \")\nconst _hoisted_28 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_29 = { class: \"his-sm-text\" }\nconst _hoisted_30 = /*#__PURE__*/_createTextVNode(\"Current Village: \")\nconst _hoisted_31 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_32 = /*#__PURE__*/_createTextVNode(\" Cancel \")\nconst _hoisted_33 = /*#__PURE__*/_createTextVNode(\"Void Client\")\nconst _hoisted_34 = /*#__PURE__*/_createTextVNode(\" New Pregnancy \")\nconst _hoisted_35 = /*#__PURE__*/_createTextVNode(\" Continue \")\n_popScopeId()\n\nexport const render = /*#__PURE__*/_withId(function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ion_col = _resolveComponent(\"ion-col\")\n  const _component_ion_row = _resolveComponent(\"ion-row\")\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")\n  const _component_ion_header = _resolveComponent(\"ion-header\")\n  const _component_confirmation_card = _resolveComponent(\"confirmation-card\")\n  const _component_ion_content = _resolveComponent(\"ion-content\")\n  const _component_ion_button = _resolveComponent(\"ion-button\")\n  const _component_ion_spinner = _resolveComponent(\"ion-spinner\")\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withId(() => [\n      _createVNode(_component_ion_header, { translucent: true }, {\n        default: _withId(() => [\n          _createVNode(_component_ion_toolbar, null, {\n            default: _withId(() => [\n              _createVNode(_component_ion_row, null, {\n                default: _withId(() => [\n                  _createVNode(_component_ion_col, null, {\n                    default: _withId(() => [\n                      _createVNode(\"div\", _hoisted_1, [\n                        _createVNode(\"span\", _hoisted_2, [\n                          _hoisted_3,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.patientName), 1)\n                        ]),\n                        _hoisted_4,\n                        _hoisted_5,\n                        _createVNode(\"span\", _hoisted_6, [\n                          _hoisted_7,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.birthdate), 1)\n                        ]),\n                        _hoisted_8,\n                        _hoisted_9,\n                        _createVNode(\"span\", _hoisted_10, [\n                          _hoisted_11,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.gender), 1)\n                        ])\n                      ])\n                    ]),\n                    _: 1\n                  }),\n                  _createVNode(_component_ion_col, null, {\n                    default: _withId(() => [\n                      _createVNode(\"div\", _hoisted_12, [\n                        _createVNode(\"span\", _hoisted_13, [\n                          _hoisted_14,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.ancestryDistrict), 1)\n                        ]),\n                        _hoisted_15,\n                        _createVNode(\"span\", _hoisted_16, [\n                          _hoisted_17,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.ancestryTA), 1)\n                        ]),\n                        _hoisted_18,\n                        _createVNode(\"span\", _hoisted_19, [\n                          _hoisted_20,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.ancestryVillage), 1)\n                        ]),\n                        _hoisted_21\n                      ])\n                    ]),\n                    _: 1\n                  }),\n                  _createVNode(_component_ion_col, null, {\n                    default: _withId(() => [\n                      _createVNode(\"div\", _hoisted_22, [\n                        _createVNode(\"span\", _hoisted_23, [\n                          _hoisted_24,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.currentDistrict), 1),\n                          _hoisted_25\n                        ]),\n                        _createVNode(\"span\", _hoisted_26, [\n                          _hoisted_27,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.currentTA), 1),\n                          _hoisted_28\n                        ]),\n                        _createVNode(\"span\", _hoisted_29, [\n                          _hoisted_30,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.currentVillage), 1),\n                          _hoisted_31\n                        ])\n                      ])\n                    ]),\n                    _: 1\n                  })\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_content, null, {\n        default: _withId(() => [\n          _createVNode(_component_ion_row, null, {\n            default: _withId(() => [\n              (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.cards, (card, index) => {\n                return (_openBlock(), _createBlock(_component_ion_col, {\n                  \"size-md\": \"4\",\n                  \"size-sm\": \"12\",\n                  key: index\n                }, {\n                  default: _withId(() => [\n                    _createVNode(_component_confirmation_card, {\n                      key: `card-${index}`,\n                      title: card.label,\n                      items: card.values,\n                      isLoading: card.isLoading\n                    }, null, 8, [\"title\", \"items\", \"isLoading\"])\n                  ]),\n                  _: 2\n                }, 1024))\n              }), 128 /* KEYED_FRAGMENT */))\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_footer, null, {\n        default: _withId(() => [\n          _createVNode(_component_ion_toolbar, { color: \"dark\" }, {\n            default: _withId(() => [\n              _createVNode(_component_ion_button, {\n                color: \"danger\",\n                size: \"large\",\n                \"router-link\": \"/\"\n              }, {\n                default: _withId(() => [\n                  _hoisted_32\n                ]),\n                _: 1\n              }),\n              _createVNode(_component_ion_button, {\n                disabled: !(_ctx.facts.patientFound && _ctx.isAdmin),\n                color: \"danger left\",\n                size: \"large\",\n                onClick: _ctx.onVoid\n              }, {\n                default: _withId(() => [\n                  _hoisted_33\n                ]),\n                _: 1\n              }, 8, [\"disabled\", \"onClick\"]),\n              (_ctx.facts.anc.canInitiateNewPregnancy)\n                ? (_openBlock(), _createBlock(_component_ion_button, {\n                    key: 0,\n                    slot: \"end\",\n                    size: \"large\",\n                    onClick: _ctx.onInitiateNewAncPregnancy\n                  }, {\n                    default: _withId(() => [\n                      _hoisted_34\n                    ]),\n                    _: 1\n                  }, 8, [\"onClick\"]))\n                : _createCommentVNode(\"\", true),\n              _createVNode(_component_ion_button, {\n                disabled: !_ctx.facts.patientFound || _ctx.facts.patientFound && !_ctx.isReady,\n                slot: \"end\",\n                color: \"success\",\n                size: \"large\",\n                onClick: _ctx.nextTask\n              }, {\n                default: _withId(() => [\n                  (!_ctx.isReady)\n                    ? (_openBlock(), _createBlock(_component_ion_spinner, {\n                        key: 0,\n                        name: \"crescent\"\n                      }))\n                    : _createCommentVNode(\"\", true),\n                  _hoisted_35\n                ]),\n                _: 1\n              }, 8, [\"disabled\", \"onClick\"])\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }))\n})","/**\n * This guideline will manage popup reminders or actions\n * that are brought to a user's attention pertaining to \n * a Patient's state.\n*/\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\nimport { infoActionSheet, tableActionSheet } from \"@/utils/ActionSheets\"\nimport { isUnknownOrEmpty } from '@/utils/Strs';\n\nexport enum TargetEvent {\n    ON_CONTINUE = 'oncontinue',\n    ONLOAD = 'onload'\n}\nexport enum FlowState {\n    FORCE_EXIT = 'forceExit',\n    GO_HOME = 'gotoHome',\n    GO_BACK = 'goBack',\n    CONTINUE = 'continue',\n    ENROLL = 'enroll',\n    EXIT = 'exit',\n    ACTIVATE_FN = 'activateFn',\n    ASSIGN_NPID = 'assignNpid',\n    UPDATE_DMG = 'updateDemographics',\n    PRINT_NPID = 'printNPID',\n    CREATE_NPID_WITH_REMOTE_DIFF = 'createNpiDWithRemote',\n    REFRESH_DDE_DEMOGRAPHICS = 'refreshDemographicsDDE',\n    UPDATE_LOCAL_DDE_DIFFS = 'updateLocalDiffs',\n    RESOLVE_DUPLICATE_NPIDS = 'resolveDuplicateNpids',\n    ADD_AS_DRUG_REFILL = 'addAsDrugRefill',\n    ADD_AS_NEW_PATIENT = 'addAsNewPatient',\n    ADD_AS_EXTERNAL_CONSULTATION = 'addAsExternalConsultation',\n    INITIATE_ANC_PREGNANCY = 'initiateNewAncPregnancy',\n    VIEW_MERGE_AUDIT_FOR_NPID = 'viewMergeAuditForNpid',\n    SEARCH_BY_NAME = 'searchByName',\n}\n\nexport const CONFIRMATION_PAGE_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"[DDE NOT ENABLED] Do not proceed if patient is not found in the system\" : {\n        weight: 98,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    ' 0 Search results',\n                    'Patient has not been found',\n                    'Choose how to proceed',\n                    [\n                        { \n                            name: 'Close', \n                            slot: 'start', \n                            color: 'primary',\n                        },\n                        {\n                            name: 'Search by name',\n                            slot: 'end',\n                            color: 'success'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Search by name' \n                    ? FlowState.SEARCH_BY_NAME\n                    : FlowState.GO_HOME\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === false\n            },\n            patientFound(yes: boolean) {\n                return yes === false\n            }\n        }\n    },\n    \"[DDE ENABLED] Show invalid attributes for a patient whose remote\": {\n        weight: 78,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async (facts: any) => {\n                await tableActionSheet(\n                    `DDE Entity Error`,\n                    'Remote patient has invalid attributes',\n                    [ 'Attribute', 'Errors' ],\n                    facts.demographics.invalidDemographics,\n                    [\n                        { \n                            name: 'Close', \n                            slot: 'start', \n                            color: 'danger',\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.GO_BACK\n            }\n        },\n        conditions: {\n            demographics({hasInvalidDemographics}: any) {\n                return hasInvalidDemographics === true\n            }\n        }\n    },\n    \"[DDE ENABLED] Do not proceed if NPID is not found and Provide history of voided NPIDS\" : {\n        weight: 98,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await tableActionSheet(\n                    `Voided patients with ID ${facts.scannedNpid}`,\n                    'NPID was not found. Please review available patient with similar ID',\n                    facts.dde.voidedNpids.cols,\n                    facts.dde.voidedNpids.rows,\n                    [\n                        { \n                            name: 'Close', \n                            slot: 'start', \n                            color: 'primary',\n                        },\n                        {\n                            name: 'Merge history',\n                            slot: 'end',\n                            color: 'primary'\n                        },\n                        {\n                            name: 'Search by name',\n                            slot: 'end',\n                            color: 'success'\n                        }\n                        \n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Merge history' \n                    ?  FlowState.VIEW_MERGE_AUDIT_FOR_NPID \n                    : action === 'Search by name' \n                    ? FlowState.SEARCH_BY_NAME\n                    : FlowState.GO_HOME\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            },\n            patientFound(yes: boolean) {\n                return yes === false\n            }\n        }\n    },\n    \"[DDE NOT ENABLED] Notify the user to proceed with Remote NPID if local NPID does not match remote\": {\n        weight: 77,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({dde}: any) => {\n                await infoActionSheet(\n                    'Missing Local NPID',\n                    `Local NPID of \"${dde.localNpidDiff}\" does not match remote \"${dde.remoteNpidDiff}\"`,\n                    `Proceed to Fix issue`,\n                    [\n                        { \n                            name: 'Resolve issue', \n                            slot: 'start', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.CREATE_NPID_WITH_REMOTE_DIFF\n            }\n        },\n        conditions: {\n            dde({localNpidDiff, remoteNpidDiff}: any) {\n                return localNpidDiff != remoteNpidDiff\n            },\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            }\n        }\n    },\n    \"Warn if patient is missing National ID and assign them one\": {\n        weight: 75,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                await infoActionSheet(\n                    'Missing National ID',\n                    'Patient was found BUT has no National ID',\n                    'The system is going to assign the patient with a new ID',\n                    [\n                        { \n                            name: 'OK', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.ASSIGN_NPID\n            }\n        },\n        conditions: {\n            currentNpid: (npid: string) => isUnknownOrEmpty(npid)\n        }\n    },\n    \"Detect NPID over 5 duplicates and prompt the user to resolve them\" : {\n        weight: 76,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({ scannedNpid }: any) => {\n                const action = await infoActionSheet(\n                    'More than 5 duplicates found',\n                    `There are more than 5 duplicates for this NPID (${scannedNpid}). Please search by name and gender`,\n                    `Choose how to proceed`,\n                    [\n                        { \n                            name: 'Close', \n                            slot: 'start', \n                            color: 'danger',\n                        },\n                        { \n                            name: 'Search by name', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Search by name' ? FlowState.SEARCH_BY_NAME : FlowState.GO_HOME\n            }\n        },\n        conditions: {\n            npidHasOverFiveDuplicates(isTrue: boolean) {\n                return isTrue\n            }\n        }\n    },\n    \"Detect NPID duplicates and prompt the user to resolve them\" : {\n        weight: 99,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({ scannedNpid }: any) => {\n                await infoActionSheet(\n                    'DUPLICATE NPID',\n                    `NPID ${scannedNpid} is currently assigned to multiple patients`,\n                    'Proceed to resolve the issue',\n                    [\n                        { \n                            name: 'Resolve Duplicate NPIDs', \n                            slot: 'start', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.RESOLVE_DUPLICATE_NPIDS\n            }\n        },\n        conditions: {\n            npidHasDuplicates(isTrue: boolean) {\n                return isTrue\n            }\n        }\n    },\n    \"Warn before proceeding if patient is deceased based on current Patient state\": {\n        weight: 50,\n        targetEvent: TargetEvent.ON_CONTINUE,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Deceased Patient',\n                    'Patient outcome is Died!',\n                    'Do you want to continue?',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'danger'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'success'\n                        }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Yes' ? FlowState.CONTINUE : FlowState.FORCE_EXIT\n            }\n        },\n        conditions: { \n            currentOutcome: (outcome: string) => outcome === 'Patient died' \n        }\n    },\n    \"Warn before proceeding if patient stopped treatment based on current Patient state\": {\n        weight: 49,\n        targetEvent: TargetEvent.ON_CONTINUE,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Stopped Treatment',\n                    'Patient outcome is Stopped Treatment ',\n                    'Do you want to continue?',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'danger'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'success'\n                        }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Yes' ? FlowState.CONTINUE : FlowState.FORCE_EXIT\n            }\n        },\n        conditions: {\n            currentOutcome: (outcome: string) => outcome === 'Treatment stopped'\n        }\n    },\n    \"[ART patient visit purpose] Select purpose of visit if patient is Transferred out or Drug refill\": {\n        weight: 70,\n        targetEvent: TargetEvent.ON_CONTINUE,\n        actions: {\n            alert: async ({patientType, currentOutcome}: any) => {\n                let contextualBtn: any = []\n                if (patientType === 'External consultation' || currentOutcome === 'Patient transferred out') { \n                    contextualBtn = [\n                        {\n                            name: 'Drug refill', \n                            slot: 'start', \n                            color: 'primary'\n                        },\n                        { \n                            name: 'New Patient',\n                            slot: 'end',\n                            color: 'primary'\n                        }\n                    ]\n                }  \n                if (patientType === 'Drug Refill') {\n                    contextualBtn = [\n                        { \n                            name: 'External Consultation',\n                            slot: 'start', \n                            color: 'primary'\n                        },\n                        { \n                            name: 'New Patient',\n                            slot: 'end',\n                            color: 'primary'\n                        }\n                    ]\n                }\n                if (patientType === 'New patient') {\n                    contextualBtn = [\n                        { \n                            name: 'External Consultation',\n                            slot: 'start', \n                            color: 'primary'\n                        },\n                        {\n                            name: 'Drug refill', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ] \n                }\n                const action = await infoActionSheet(\n                    'Purpose of visit',\n                    `Patient type: ${patientType} | State: ${currentOutcome}`,\n                    'Please select purspose of the visit',\n                    [\n                        ...contextualBtn,\n                        {\n                            name: 'Continue',\n                            slot: 'end',\n                            color: 'success'\n                        }\n                    ]\n                )\n                switch(action) { \n                    case 'Drug refill':\n                        return FlowState.ADD_AS_DRUG_REFILL\n                    case 'External Consultation':\n                        return FlowState.ADD_AS_EXTERNAL_CONSULTATION\n                    case 'New Patient':\n                        return FlowState.ADD_AS_NEW_PATIENT\n                    default: \n                        return FlowState.CONTINUE\n                }\n            }\n        },\n        conditions: {\n            programName: (name: string) => name === 'ART',\n            patientType: (type: string, { currentOutcome }: any) => {\n                return ['Drug Refill', 'External consultation'].includes(type) ||\n                    currentOutcome === 'Patient transferred out'\n            }\n        }\n    },\n    \"Prompt patient enrollment in current programme if not enrolled\" : {\n        weight: 30,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Programme Enrollment',\n                    'Patient is not enrolled in current programme, do you want to enroll?',\n                    '',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ]\n                )\n                return action === 'Yes' ? FlowState.ENROLL : FlowState.EXIT\n            }\n        },\n        conditions: {\n            enrolledInProgram: (enrolled: boolean) => enrolled === false\n        }\n    },\n    \"(ART Filing numbers) Prompt dormant filing number reactivation if patient has a dormant filing number\": {\n        weight: 25,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Filing Numbers',\n                    'Activate dormant #?',\n                    '',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ]\n                )\n                return action === 'Yes' ? FlowState.ACTIVATE_FN : FlowState.EXIT\n            }\n        },\n        conditions: {\n            programName: (programName: string) => programName === 'ART',\n            identifiers: (identifiers: string[]) => identifiers.includes('Archived filing number'),\n            currentOutcome: (outcome: string) => ![\n                'Treatment stopped', \n                'Patient transferred out', \n                'Patient died'\n            ].includes(outcome),\n            globalProperties({useFilingNumbers}: Record<string, boolean>) {\n                return useFilingNumbers\n            }\n        }\n    },\n    \"[DDE OFF] Prompt the user to update patient demographics when data is incomplete\": {\n        weight: 92,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Demographics',\n                    'Patient data is incomplete',\n                    'Do you want to review and update now?',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Yes' ? FlowState.UPDATE_DMG : FlowState.EXIT\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === false\n            },\n            demographics: ({patientIsComplete}: any) => {\n                return patientIsComplete === false\n            },\n            patientFound: (isFound: boolean) => {\n                return isFound === true\n            }\n        }\n    },\n    \"[DDE] Alert When remote Patient demographics dont match Local Demographics \": {\n        weight: 93,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({dde}: any) => {\n                const action = await tableActionSheet(\n                    'Demographics Mismatch',\n                    'Local Demographics do not match Remote Demographics',\n                    ['Attributes', 'Local', 'Remote'],\n                    dde.diffRows,\n                    [\n                        { \n                            name: 'Use Local',\n                            slot: 'start', \n                            color: 'primary'\n                        },\n                        { \n                            name: 'Use Remote', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ], \n                    'his-danger-color',\n                    dde.diffRowColors\n                )\n                return action === 'Use Local' \n                    ? FlowState.UPDATE_LOCAL_DDE_DIFFS\n                    : FlowState.REFRESH_DDE_DEMOGRAPHICS\n            }\n        },\n        conditions: {\n            dde({hasDemographicConflict}: any) {\n                return hasDemographicConflict\n            }\n        }\n    },\n    \"[DDE] Alert to print newer NPID when the scanned NPID doesnt match active NPID\": {\n        weight: 69,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({ currentNpid }: any) => {\n                await infoActionSheet(\n                    '[DDE] NATIONAL ID',\n                    `Patient has a newer National Identifier ${currentNpid}`,\n                    'Print and proceed',\n                    [\n                        { \n                            name: 'Print', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ])\n                return FlowState.PRINT_NPID\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            },\n            scannedNpid(scannedNpid: string, {currentNpid}: any) {\n                return !scannedNpid.match(new RegExp(currentNpid, 'i'))\n            }\n        }\n    },\n    \"assign newer NPID when the current one is invalid\": {\n        weight: 68,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({ currentNpid }: any) => {\n                await infoActionSheet(\n                    'NATIONAL ID',\n                    `Current NPID ${currentNpid} is invalid`,\n                    'Reasign and Print',\n                    [\n                        { \n                            name: 'Reassign', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ]\n                )\n                return FlowState.ASSIGN_NPID\n            }\n        },\n        conditions: {\n            demographics: ({patientIsComplete}: any) => {\n                return patientIsComplete === true\n            },\n            patientFound: (isFound: boolean) => {\n                return isFound === true\n            },\n            hasInvalidNpid(isTrue: boolean) {\n                return isTrue\n            }\n        }\n    },\n    \"[DDE ON] Warn program managers when Patient has incomplete demographics. Dont force them to update though\": {\n        weight: 91,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Demographics',\n                    'Patient data is incomplete data',\n                    'Do you want to review and update now?',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Yes' ? FlowState.UPDATE_DMG : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            },\n            demographics: ({patientIsComplete}: any) => {\n                return patientIsComplete === false\n            },\n            patientFound: (isFound: boolean) => {\n                return isFound === true\n            },\n            userRoles(roles: string[]) {\n                return roles.includes(\"Program Manager\") === true\n            }\n        }\n    },\n    \"[DDE ON] Force Users to update Incomplete Patient demographics\": {\n        weight: 92,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Patient Demographics',\n                    'Demographic data is incomplete',\n                    'Continue to update',\n                    [\n                        { \n                            name: 'Update', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'Cancel', \n                            slot: 'start', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Cancel' ? FlowState.GO_HOME : FlowState.UPDATE_DMG\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            },\n            demographics: ({patientIsComplete}: any) => {\n                return patientIsComplete === false\n            },\n            userRoles: (roles: string[]) => {\n                return roles.includes('Program Manager') === false\n            }\n        }\n    },\n    \"Warn the user when patient has high viral load\": {\n        weight: 45,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                await infoActionSheet(\n                    'High Viral Load',\n                    'Patient has a high viral load, please take immediate action!',\n                    '',\n                    [\n                        { \n                            name: 'OK',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            hasHighViralLoad: (isHigh: boolean)  => isHigh === true\n        }\n    },\n    \"[ANC] Warn last LMP is more than 8 months ago and ask to initiate new pregnancy\": {\n        weight: 32,\n        targetEvent: TargetEvent.ON_CONTINUE,\n        actions: {\n            alert: async ({anc}: any) => {\n                const action = await infoActionSheet(\n                    'Pregancy overdue',\n                    `Last menstrual period was ${anc.lmpMonths} months ago!`,\n                    'Would you like to initiate new pregnancy?',\n                    [\n                        { \n                            name: 'Yes',  \n                            slot: 'end', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Yes' \n                    ? FlowState.INITIATE_ANC_PREGNANCY \n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            programName: (name: string) => name === 'ANC',\n            anc: (anc: any)  => anc.currentPregnancyIsOverdue === true\n        }        \n    },\n    \"[ANC] Exit if client is NOT ELIGIBLE for ANC\": {\n        weight: 89,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Client not eligible for ANC',\n                    `This program is for women eligible for ANC only`,\n                    'If this is a mistake, please update client Demographics or Exit',\n                    [\n                        { \n                            name: 'EXIT',\n                            slot: 'end', \n                            color: 'success'\n                        },\n                        { \n                            name: 'EDIT DEMOGRAPHICS',\n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'EXIT' ? FlowState.GO_HOME : FlowState.UPDATE_DMG\n            }\n        },\n        conditions: {\n            demographics: ({gender}: any) => {\n                const g = gender.toLowerCase()\n                return g === 'm' || g === 'male'\n            },\n            programName: (name: string) => {\n                return name === 'ANC'\n            } \n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { ProgramService } from \"@/services/program_service\";\nimport dayjs from \"dayjs\";\n\nexport class AncPregnancyStatusService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 111, providerID)\n    }\n\n    async getLmpInMonths() {\n        const info = await ProgramService.getProgramInformation(this.patientID)\n        if (info.date_of_lnmp) {\n            const lmp = dayjs(info.date_of_lnmp)\n            const today = dayjs(this.date)\n            return today.diff(lmp, 'months')\n        }\n        return -1\n    }\n\n    async pregnancyIsOverdue() {\n        return (await this.getLmpInMonths()) > 9\n    }\n\n    async canInitiateNewPregnancy() {\n        return (await this.getLmpInMonths()) >= 7\n    }\n\n    async createNewPregnancyStatus() { \n        await this.createEncounter()\n        return this.saveValueCodedObs('Pregnancy status', 'New')\n    }\n}\n","\nimport { isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\nimport HisApp from \"@/apps/app_lib\"\nimport { defineAsyncComponent, defineComponent } from \"vue\";\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { UserService } from \"@/services/user_service\";\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport { Patientservice } from \"@/services/patient_service\";\nimport { PatientProgramService } from \"@/services/patient_program_service\"\nimport { alertConfirmation, toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\"\nimport { Patient } from \"@/interfaces/patient\"\nimport {\n  IonContent,\n  IonHeader,\n  IonFooter,\n  IonPage,\n  IonToolbar,\n  IonRow,\n  IonCol,\n  IonSpinner,\n  IonButton,\n  modalController\n} from \"@ionic/vue\";\nimport {\n  FlowState, \n  TargetEvent,\n  CONFIRMATION_PAGE_GUIDELINES\n} from \"@/guidelines/confirmation_page_guidelines\"\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport { PatientDemographicsExchangeService } from \"@/services/patient_demographics_exchange_service\"\nimport { IncompleteEntityError, BadRequestError } from \"@/services/service\"\nimport { OrderService } from \"@/services/order_service\";\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { ObservationService } from \"@/services/observation_service\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport { AncPregnancyStatusService } from \"@/apps/ANC/Services/anc_pregnancy_status_service\"\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\";\nimport { isUnknownOrEmpty, isValueEmpty } from \"@/utils/Strs\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  name: \"Patient Confirmation\",\n  components: {\n    IonContent,\n    IonHeader,\n    IonFooter,\n    IonPage,\n    IonToolbar,\n    IonSpinner,\n    IonRow,\n    IonCol,\n    IonButton,\n    ConfirmationCard: defineAsyncComponent(()=>import(\"@/components/Cards/PatientConfirmationCards.vue\")),\n  },\n  data: () => ({\n    app: {} as any,\n    program: {} as any,\n    patient: {} as any,\n    localPatient: {} as any, // Patient found without dde\n    ddeInstance: {} as any,\n    useDDE: false as boolean,\n    programInfo: {} as any,\n    isReady: false as boolean,\n    cards: [] as any[],\n    facts: {\n      hasHighViralLoad: false as boolean,\n      patientFound: false as boolean,\n      npidHasDuplicates: false as boolean,\n      npidHasOverFiveDuplicates: false as boolean,\n      userRoles: [] as string[],\n      scannedNpid: '' as string,\n      currentNpid: '' as string,\n      hasInvalidNpid: false as boolean,\n      enrolledInProgram: false as boolean,\n      programName: 'N/A' as string,\n      currentOutcome: '' as string,\n      programs: [] as string[],\n      identifiers: [] as string[],\n      patientType: 'N/A' as string,\n      anc: {\n        lmpMonths: -1,\n        canInitiateNewPregnancy: false,\n        currentPregnancyIsOverdue: false\n      },\n      dde: {\n        localNpidDiff: '',\n        remoteNpidDiff: '',\n        voidedNpids: {\n         cols: [] as string[],\n         rows: [] as any\n        },\n        hasDemographicConflict: false,\n        localDiffs: {},\n        diffRows: [],\n        diffRowColors: [] as Array<{indexes: number[]; class: string}>\n      } as any,\n      demographics: {\n        patientIsComplete: false as boolean,\n        hasInvalidDemographics: false as boolean,\n        invalidDemographics: [] as string[],\n        givenName: '' as string,\n        familyName: '' as string,\n        patientName: '' as string,\n        landmark: '' as string,\n        phoneNumber: '' as string,\n        currentDistrict: '' as string,\n        currentTA: '' as string,\n        currentVillage: '' as string,\n        ancestryDistrict: '' as string,\n        ancestryTA: '' as string,\n        ancestryVillage: '' as string,\n        gender: '' as string,\n        birthdate: '' as string,\n      } as any,\n      globalProperties: {\n        useFilingNumbers: false,\n        ddeEnabled: false\n      } as any\n    }\n  }),\n  created() {\n    this.initCards()\n    this.app = HisApp.getActiveApp() || {}\n  },\n  mounted() {\n    if (this.app) {\n      this.updateCards()\n      this.ddeInstance = new PatientDemographicsExchangeService()\n      this.setGlobalPropertyFacts().then(() => {\n        const query = this.$route.query\n        if (!isEmpty(query) && (query.person_id || query.patient_barcode)) {\n          this.findAndSetPatient(query.person_id as any, query.patient_barcode as any)\n        }\n      })\n    }\n  },\n  computed: {\n    demographics(): any {\n      return this.facts.demographics\n    },\n    birthdate(): string {\n      return HisDate.toStandardHisDisplayFormat(\n        this.facts.demographics.birthdate\n      )\n    },\n    isAdmin() {\n      return UserService.isAdmin()\n    }\n  },\n  methods: {\n    initCards() {\n      for(let i=0; i < 6; i++) {\n        this.cards[i] = {\n          label: '-',\n          isLoading: true,\n          values: []\n        }\n      }\n    },\n    async updateCards() {\n      if (typeof this.app.confirmationSummary === 'function') {\n        const cardItems: any = this.app.confirmationSummary(\n          this.patient, this.program, this.facts\n        )\n        const keys: any = Object.keys(cardItems)\n        for(let i = 0; i < this.cards.length; i++) {\n          const cardData = keys[i] ? cardItems[keys[i]]() : []\n          this.cards[i] = {\n            label: keys[i] || '-',\n            isLoading: false,\n            values: cardData\n          }\n          if (typeof cardData === 'object' && cardData.then) {\n            this.cards[i].isLoading = true\n            if (!isEmpty(this.patient)) {\n              cardData.then((data: any) => {\n                this.cards[i].isLoading = false\n                this.cards[i].values = data\n              }).catch((e: any) => {\n                this.cards[i].isLoading = false\n                console.error(`${e}`)\n              })\n            }\n          } else {\n            // Render static label value pairs\n            for (let c=0; c < cardData.length; ++c) {\n              const val = cardData[c]\n              this.cards[i].values[c] = val\n              if (!isEmpty(this.patient)) {\n                if (typeof val.init === 'function') {\n                  await val.init()\n                }\n                if (typeof val.asyncValue === 'function') {\n                  val.asyncValue().then((val: any) => {\n                    this.cards[i].values[c].value = val\n                  }).catch((e: any) => {\n                    this.cards[i].values[c].value = '_ERROR_'  \n                    console.error(`${e}`)\n                  })\n                } else if (typeof val.staticValue === 'function') {\n                  this.cards[i].values[c].value = val.staticValue()\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async setViralLoadStatus() {\n      const orders = await OrderService.getOrders(this.patient.getID())      \n      if(!isEmpty(orders)){\n        const vlOrders = OrderService.getViralLoadOrders(orders)\n        if(!isEmpty(vlOrders)){\n          this.facts.hasHighViralLoad = OrderService.isHighViralLoadResult(vlOrders[0].tests[0].result[0])\n        }\n      }      \n    },\n    /**\n     * Resolve patient by either patient ID or NpID.\n     * Note: \n     *  - DDE Service only supports NPID search.\n    */\n    async findAndSetPatient(id: number | undefined, npid: string | undefined) {\n      let req = null\n      this.isReady = false\n      this.localPatient = {} // Patient found without using DDE\n      if (!this.facts.scannedNpid) {\n        this.facts.scannedNpid = npid || ''\n      }\n      if (this.useDDE && npid) {\n        req = this.ddeInstance.searchNpid(npid)\n      } else if (id) {\n        req = Patientservice.findByID(id)\n      } else {\n        req = Patientservice.findByNpid(npid as string)\n      }\n      this.handleSearchResults(req)\n        .then(() => this.isReady = true)\n        .catch((e) => toastDanger(`${e}`, 300000))\n    },\n    /**\n     * Handle search result promises and handle entity related errors.\n     * This is also an entrypoint to initialise Ui Data and facts\n     */\n    async handleSearchResults(patient: Promise<Patient | Patient[]>) {\n      let results: Patient[] | Patient = []\n      try {\n        results = await patient as Patient[] | Patient\n      } catch (e) {\n        // [DDE] A person might have missing attributes such as home_village, \n        // or home_ta.\n        if (e instanceof IncompleteEntityError && !isEmpty(e.entity)) {\n          results = e.entity\n        } else if (e instanceof BadRequestError && Array.isArray(e.errors)) {\n          const [msg, ...entities] = e.errors\n          if (typeof msg === 'string' && msg === \"Invalid parameter(s)\") {\n            this.setInvalidParametersFacts(entities)\n          }\n        } else {\n          toastDanger(`${e}`, 300000)\n        }\n      }\n\n      // Use local patient if available if DDE never found them\n      if (isEmpty(results) && !isEmpty(this.localPatient)) results = this.localPatient\n      \n      if(Array.isArray(results) && results.length > 1){\n        this.facts.npidHasDuplicates = results.length <= 5\n        this.facts.npidHasOverFiveDuplicates = results.length > 5\n      } else {\n        this.facts.patientFound = !isEmpty(results)\n      }\n\n      if (this.facts.patientFound) {\n        this.patient = new Patientservice(\n          Array.isArray(results)\n            ? results[0]\n            : results\n          )\n        this.updateCards()\n        Store.set('ACTIVE_PATIENT', this.patient)\n        this.setPatientFacts()\n        const factPromises = []\n        factPromises.push(this.setProgramFacts())\n        if (this.useDDE) {\n          factPromises.push(this.setDDEFacts())\n        } \n        if (this.facts.programName === 'ANC') {\n          factPromises.push(this.setAncFacts())\n        }\n        if (this.facts.programName === 'ART') {\n          factPromises.push(this.setViralLoadStatus())\n        }\n        this.facts.currentNpid = this.patient.getNationalID()\n        factPromises.push(this.validateNpid())\n        await Promise.all(factPromises)\n      } else {\n        // [DDE] a user might scan a deleted npid but might have a newer one.\n        // The function below checks for newer version\n        if (this.facts.scannedNpid) this.setVoidedNpidFacts(this.facts.scannedNpid)\n      }\n      this.onEvent(TargetEvent.ONLOAD)\n        .then(() => this.isReady = true)\n        .catch(e => { toastDanger(`${e}`, 300000); this.isReady = true })\n    },\n    async validateNpid () {\n      if(this.useDDE){\n        this.facts.hasInvalidNpid = !this.patient.getDocID() || (\n          this.patient.getDocID() && isUnknownOrEmpty(this.patient.getNationalID())\n        )\n      } else {\n        const results = await Patientservice.findByNpid(this.facts.currentNpid, {\"page_size\": 2})\n        this.facts.hasInvalidNpid = Array.isArray(results) && results.length > 1\n      }\n    },\n    /**\n     * DDE sometimes sends 400 bad request which contains\n     * a list of invalid demographic attributes \n     */\n    setInvalidParametersFacts(errorExceptions: any) {\n      this.facts.demographics.hasInvalidDemographics = true\n      // Create a turple of attribute and error pairs\n      this.facts.demographics.invalidDemographics =\n        errorExceptions.map((e: any) => {\n          const data = Object.entries(e)\n          const entity = data[0][0]\n          const errors = data[0][1] as string[]\n          return [entity, errors.join(', ')]\n        })      \n    },\n    /**\n     * Reloads patient facts and information.\n     * Note: Use this when you know the patient is loaded\n     */\n    reloadPatient() {\n      return this.findAndSetPatient(this.patient.getID(), undefined)\n    },\n    /**\n     * Facts are used by the Guideline Engine to crosscheck \n     * conditions to execute. The more the data the better\n     * the decision support. These facts are also presented \n     * on the User interface\n    */\n    setPatientFacts() {\n      this.facts.demographics.patientIsComplete = this.patient.patientIsComplete()\n      this.facts.demographics.patientName = this.patient.getFullName()\n      this.facts.demographics.givenName = this.patient.getGivenName()\n      this.facts.demographics.familyName = this.patient.getFamilyName()\n      this.facts.demographics.landmark = this.patient.getAttribute(19)\n      this.facts.demographics.phoneNumber = this.patient.getAttribute(12)\n      this.facts.demographics.gender = this.patient.getGender()\n      this.facts.demographics.birthdate = this.patient.getBirthdate()\n      this.facts.demographics.ancestryDistrict = this.patient.getHomeDistrict()\n      this.facts.demographics.ancestryTA = this.patient.getHomeTA()\n      this.facts.demographics.ancestryVillage = this.patient.getHomeVillage()\n      this.facts.demographics.currentDistrict = this.patient.getCurrentDistrict()\n      this.facts.demographics.currentTA = this.patient.getCurrentTA()\n      this.facts.demographics.currentVillage = this.patient.getCurrentVillage()\n      this.facts.identifiers = this.patient.getIdentifiers()\n        .map((id: any) => id.type.name)\n    },\n    async setGlobalPropertyFacts() {\n      this.facts.globalProperties.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n      this.useDDE = this.facts.globalProperties.ddeEnabled\n      if (this.app.applicationName === 'ART') {\n        this.facts.globalProperties.useFilingNumbers = await Store.get('IS_ART_FILING_NUMBER_ENABLED')\n      }\n    },\n    async setAncFacts() {\n      const anc = new AncPregnancyStatusService(this.patient.getID(), -1)\n      this.facts.anc.canInitiateNewPregnancy = await anc.canInitiateNewPregnancy()\n      this.facts.anc.currentPregnancyIsOverdue = await anc.pregnancyIsOverdue()\n      this.facts.anc.lmpMonths = await anc.getLmpInMonths()\n    },\n    buildDDEDiffs(diffs: any) {\n      const comparisons: Array<string[]> = []\n      const refs: any = {\n        givenName : { label: 'First Name', ref: 'given_name' },\n        familyName: { label: 'Last Name', ref: 'family_name'},\n        birthdate: { label: 'Birthdate', ref: 'birthdate'},\n        gender: { label: 'Gender', ref: 'gender' },\n        phoneNumber: {label: 'Phone number', ref: 'phone_number'},\n        ancestryDistrict: { label: 'Home District', ref: 'home_district'},\n        ancestryTA: { label: 'Home TA', ref: 'home_traditional_authority'},\n        ancestryVillage: { label: 'Home Village', ref: 'home_village'},\n        currentDistrict: { label: 'Current District', ref: 'current_district'},\n        currentTA: { label: 'Current TA', ref: 'current_traditional_authority'},\n        currentVillage: { label: 'Current Village', ref: 'current_village'}\n      }\n      let index = 0\n      const diffIndexes: any = { indexes: [], class: 'his-empty-set-color'}\n\n      for(const k in refs) {\n        let local = this.facts.demographics[k]\n        let remote = local\n\n        if (refs[k].ref in diffs) {\n          diffIndexes.indexes.push(index)\n          local = diffs[refs[k].ref].local\n          remote = diffs[refs[k].ref].remote\n        }\n\n        comparisons.push([\n          refs[k].label,\n          local,\n          remote\n        ])\n        ++index\n      }\n      return {comparisons, rowColors: [diffIndexes]}\n    },\n    async setProgramFacts() {\n      this.facts.programName = this.app.applicationName\n      try {\n        this.program = new PatientProgramService(this.patient.getID())\n        this.programInfo = await this.program.getProgram()\n        Store.set('PATIENT_PROGRAM', this.programInfo)\n        const { program, outcome }: any =  this.programInfo\n        this.facts.enrolledInProgram = !(isValueEmpty(program) || program.match(/n\\/a/i))\n        this.facts.currentOutcome = outcome\n        this.facts.userRoles = UserService.getUserRoles().map((r: any) => r.role)\n        this.facts.patientType = (await ObservationService.getFirstValueCoded(\n          this.patient.getID(), 'Type of patient')) || 'N/A'\n      } catch (e) {\n        console.error(`${e}`)\n      }\n    },\n    /**\n     * Set dde facts if service is enabled.\n     * Please Note that DDE has to be configured per Program in the backend.\n     * If a program isnt configured for DDE, it crashes by default hence \n     * exception handling is required\n     */\n    async setDDEFacts() {\n      try {\n        const localAndRemoteDiffs = (await this.ddeInstance.getLocalAndRemoteDiffs())?.diff\n        this.facts.dde.localDiffs = this.ddeInstance.formatDiffValuesByType(\n          localAndRemoteDiffs, 'local'\n        )\n        const { comparisons, rowColors } = this.buildDDEDiffs(localAndRemoteDiffs)\n        this.facts.dde.diffRows = comparisons\n        this.facts.dde.diffRowColors = rowColors\n        if (localAndRemoteDiffs.npid) {\n          const {local, remote} = localAndRemoteDiffs.npid\n          this.facts.dde.localNpidDiff = local\n          this.facts.dde.remoteNpidDiff = remote\n          delete localAndRemoteDiffs.npid\n        }\n        this.facts.dde.hasDemographicConflict = !isEmpty(localAndRemoteDiffs)\n      } catch (e) {\n        console.warn(e)\n      }\n    },\n    async setVoidedNpidFacts(npid: string) {\n      const cols = [\n        'Name', 'Birthdate', 'Gender', 'Ancestry Home', 'CurrentID', 'Action'\n      ]\n      let rows = []\n      const req = await this.ddeInstance.findVoidedIdentifier(npid)\n      if (req) {\n        rows = req.map((d: any) => {\n          const p = new Patientservice(d)\n          return [\n            p.getFullName(),\n            p.getBirthdate(),\n            p.getGender(),\n            p.getHomeTA(),\n            p.getNationalID(),\n            {\n              type: 'button',\n              name: 'Select',\n              action: async () => {\n                if (!p.patientIsComplete()) {\n                  return this.$router.push(`/patient/registration?edit_person=${p.getID()}`)\n                } else if (p.getNationalID().match(/unknown/i) || !p.getDocID()) {\n                  try {\n                    await p.assignNpid()\n                    await this.findAndSetPatient(p.getID(), undefined)\n                    return modalController.dismiss()\n                  } catch (e) {\n                    toastWarning('Failed to assign npid to patient with unknown npid.')\n                    return console.error(e)\n                  }\n                }\n                await modalController.dismiss()\n                await this.findAndSetPatient(undefined, p.getNationalID())\n              }\n            }\n          ]\n        })\n        this.facts.dde.voidedNpids.cols = cols\n        this.facts.dde.voidedNpids.rows = rows\n      }\n    },\n    /**\n     * Executes CONFIRMATION_PAGE GUIDELINES with given TargetEvent\n    */\n    async onEvent(targetEvent: TargetEvent, callback={}) {\n      const findings = matchToGuidelines(\n        this.facts, CONFIRMATION_PAGE_GUIDELINES, '', targetEvent, 'weight'\n      )\n      for(const index in findings) {\n        const finding = findings[index]\n        if (finding?.actions?.alert) {\n          const state = await finding?.actions?.alert(this.facts)\n          if ((await this.runFlowState(state))\n              === FlowState.FORCE_EXIT) {\n              return false \n            }\n        }\n      }\n      if (typeof callback === 'function') callback()\n    },\n    async onInitiateNewAncPregnancy() {\n      if ((await alertConfirmation('Are you sure you want to initiate new pregnancy?'))) {\n        if ((await this.initiateNewAncPregnancy())) {\n          this.facts.anc.canInitiateNewPregnancy = false\n          this.facts.anc.currentPregnancyIsOverdue = false\n          this.nextTask()\n        } else {\n          toastWarning('Unable to initiate new pregnancy')\n        }\n      }\n    },\n    initiateNewAncPregnancy() {\n      return new AncPregnancyStatusService(this.patient.getID(), -1).createNewPregnancyStatus()\n    },\n    /**\n     * Maps FlowStates defined in the Guideline to\n     * Functions definitions that are executed.\n     */\n    async runFlowState(state: FlowState) {\n      const states: Record<string, Function> = {}\n      states[FlowState.GO_HOME] = () => {\n          this.$router.push('/')\n          return FlowState.FORCE_EXIT\n      }\n      states[FlowState.GO_BACK] = () => {\n        this.$router.back()\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.ENROLL] = () => {\n        return this.program.enrollProgram()\n      }\n      states[FlowState.ACTIVATE_FN] = () => {\n        this.$router.push(`/art/filing_numbers/${this.patient.getID()}?assign=true`)\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.UPDATE_DMG] = () => {\n        this.$router.push(`/patient/registration?edit_person=${this.patient.getID()}`)\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.PRINT_NPID] = async () => {\n        await this.ddeInstance.printNpid(this.patient.getID())\n        await delayPromise(1800)\n        return FlowState.CONTINUE\n      }\n      states[FlowState.CREATE_NPID_WITH_REMOTE_DIFF] = async () => {\n        const npid = this.facts.dde.remoteNpidDiff\n        try {\n          if (npid && (await this.ddeInstance.createNPID(npid))) {\n            this.facts.scannedNpid = npid\n            this.facts.currentNpid = npid\n            this.facts.dde.localNpidDiff = npid\n            toastSuccess('Remote NPID successfully updated')\n            await delayPromise(300)\n            await this.ddeInstance.printNpid()\n            await this.findAndSetPatient(undefined, npid)\n            return FlowState.FORCE_EXIT\n          }\n        } catch (e) {\n          const alreadyAssigned = /Identifier already assigned to another patient/i\n          if (e instanceof BadRequestError && e.errors.join(',').match(alreadyAssigned)) {\n            const res = await this.ddeInstance.reassignNpid(this.patient.getDocID())\n            if (res) {\n              this.patient = new Patientservice(res)\n              toastSuccess('Patient has been reassigned NPID')\n              await delayPromise(300)\n              await this.ddeInstance.printNpid()\n              await this.findAndSetPatient(undefined, this.patient.getNationalID())\n              return FlowState.FORCE_EXIT\n            }\n          }\n          toastDanger(`Unable to assign NPID: ${e}`)\n        }\n      }\n      states[FlowState.ASSIGN_NPID] = async () => {\n        await this.patient.assignNpid()\n        await (new PatientPrintoutService(this.patient.getID())).printNidLbl()\n        await delayPromise(300)\n        await this.reloadPatient()\n        return FlowState.FORCE_EXIT\n      },\n      states[FlowState.INITIATE_ANC_PREGNANCY] = async () => {\n        await this.initiateNewAncPregnancy()\n        return FlowState.CONTINUE\n      }\n      states[FlowState.VIEW_MERGE_AUDIT_FOR_NPID] = () => {\n        this.$router.push(`/merge/rollback/${this.facts.scannedNpid}`)\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.RESOLVE_DUPLICATE_NPIDS] = () => {\n        this.$router.push(`/npid/duplicates/${this.facts.scannedNpid}`)\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.REFRESH_DDE_DEMOGRAPHICS] = async () => {\n        await this.ddeInstance.refreshDemographics()\n        await this.reloadPatient()\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.ADD_AS_DRUG_REFILL] = async () => {\n        await this.createPatientType('Drug Refill')\n        return FlowState.CONTINUE\n      }\n      states[FlowState.ADD_AS_NEW_PATIENT] = async () => {\n        await this.createPatientType('New patient')\n        return FlowState.CONTINUE\n      }\n      states[FlowState.ADD_AS_EXTERNAL_CONSULTATION] = async () => {\n        await this.createPatientType('External consultation')\n        return FlowState.CONTINUE\n      }\n      states[FlowState.SEARCH_BY_NAME] = () => {\n        this.$router.push('/patient/registration')\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.UPDATE_LOCAL_DDE_DIFFS] = async () => {\n        await this.ddeInstance.updateLocalDifferences(\n          this.facts.dde.localDiffs\n        )\n        await this.reloadPatient()\n        return FlowState.FORCE_EXIT\n      }\n      if (state in states) {\n        try {\n          return await states[state]()\n        }catch(e) {\n          toastDanger(`${e}`)\n        }\n      }\n      return state\n    },\n    async createPatientType(patientType: 'Drug Refill' | 'External consultation' | 'New patient') {\n      const type = new PatientTypeService(this.patient.getID(), -1)\n      await type.createEncounter()\n      await type.savePatientType(patientType)\n    },\n    async onVoid() {\n      popVoidReason(async (reason: string) => {\n        try {\n          await Patientservice.voidPatient(this.patient.getID(), reason)\n          this.$router.push('/')\n        } catch (e) {\n          toastDanger(`${e}`)\n        }\n      }, 'void-modal')\n    },\n    nextTask() {\n      this.onEvent(TargetEvent.ON_CONTINUE, () => {\n        nextTask(this.patient.getID(), this.$router)\n      })\n    }\n  }\n})\n","import { render } from \"./Confirmation.vue?vue&type=template&id=0492b742&scoped=true&ts=true\"\nimport script from \"./Confirmation.vue?vue&type=script&lang=ts\"\nexport * from \"./Confirmation.vue?vue&type=script&lang=ts\"\n\nimport \"./Confirmation.vue?vue&type=style&index=0&id=0492b742&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0492b742\"]])\n\nexport default __exports__","import { optionsActionSheet } from '@/utils/ActionSheets'\n\nexport default async function popVoidReason(callback: Function, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}