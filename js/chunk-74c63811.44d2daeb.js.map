{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/LabActivities.vue?9b59","webpack:///./src/apps/ART/views/encounters/LabActivities.vue","webpack:///./src/apps/ART/views/encounters/LabActivities.vue?9471","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?83cf","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?0184","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onOnFinish","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","fieldContext","watch","ready","handler","this","getFields","methods","nextTask","id","helpText","type","FieldType","TT_LAB_ORDERS","onload","options","async","orders","OrderService","getOrdersIncludingGivenResultStatus","patientID","VLOrders","formatLabs","label","value","other","values","config","printOrder","orderID","PatientPrintoutService","printLabOrderLbl","hiddenFooterBtns","footerBtns","name","size","slot","color","visible","onClick","isEmpty","launchOrderSelection","visibleOnStateChange","state","index","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","offlineID","patient","providerID","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","patientDashboardUrl","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","resolveObs","computedData","error","toastWarning","enc","AppEncounterService","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","runflowState","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-74c63811.44d2daeb.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onOnFinish: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onOnFinish\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { isEmpty } from \"lodash\";\nimport { OrderService } from \"@/services/order_service\";\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    fields: [] as any,\n    fieldContext: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.fields = this.getFields() \n        }\n      }\n    }\n  },\n  methods: {\n    onFinish() {\n        this.nextTask()\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"patient_lab_orders\",\n          helpText: \"Lab orders\",\n          type: FieldType.TT_LAB_ORDERS,\n          onload: (fieldContext: any) => {\n            this.fieldContext = fieldContext\n          },\n          options: async () => {\n            const orders: any = await OrderService.getOrdersIncludingGivenResultStatus(this.patientID);\n            const VLOrders = OrderService.formatLabs(orders);\n            return [\n              {\n                label: \"Lab orders\",\n                value: \"order trail\",\n                other: {\n                  values: VLOrders,\n                }\n              }\n            ]\n          },\n          config: {\n            printOrder: (orderID: number) => {\n              return new PatientPrintoutService(this.patientID).printLabOrderLbl(orderID)\n            },\n            hiddenFooterBtns: [\"Clear\"],\n            footerBtns: [\n              {\n                name: \"Order\",\n                size: \"large\",\n                slot: \"end\",\n                color: \"primary\",\n                visible: true,\n                onClick: async () => {\n                  if (!isEmpty(this.fieldContext)) {\n                    await this.fieldContext.launchOrderSelection()\n                  }\n                },\n                visibleOnStateChange: (state: Record<string, any>) => {\n                  return state.index === 0;\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n});\n","import { render } from \"./LabActivities.vue?vue&type=template&id=129272ea&ts=true\"\nimport script from \"./LabActivities.vue?vue&type=script&lang=ts\"\nexport * from \"./LabActivities.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/brian/projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            try {\n                obs = await this.resolveObs(params.computedData)\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/brian/projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}