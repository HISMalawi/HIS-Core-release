{"version":3,"sources":["webpack:///./src/views/LabResults.vue?3abf","webpack:///./src/services/patient_lab_result_service.ts","webpack:///./src/views/LabResults.vue","webpack:///./src/views/LabResults.vue?cee8","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","key","hisFormKey","fields","activeField","fieldComponent","skipSummary","onOnIndex","$event","onOnFinish","onFinish","PatientLabResultService","AppEncounterService","constructor","patientId","super","this","patientID","testTypeID","resultDate","testID","createLabResult","measures","postJson","encounterID","date","getTestID","getTestTypeID","setTestTypeID","test","setResultDate","setTestID","getTestsWithoutResults","OrderService","getOrders","status","getTestIndicators","getJson","defineComponent","components","HisStandardForm","data","labResult","patient","selectedTest","testOptions","testIndicators","watch","params","patient_id","initData","getFields","deep","immediate","methods","_","c","Object","values","filter","d","tag","map","value","result_date","createEncounter","Store","invalidate","Math","floor","random","toastSuccess","e","toastDanger","console","error","generateTestIndicatorsFields","reduce","acc","concat","buildTestIndicatorFields","indicatorId","indicatorName","specimen","testId","name","result","modifier","substring","length","isValidVLResult","isOk","alertConfirmation","cancelBtnLabel","confirmBtnLabel","alphaValueIsValid","match","numericValueIsValid","isMalariaResult","id","fieldIndex","condition","f","find","result_indicators","label","every","Boolean","beforeNext","v","validateVLresults","toString","computedValue","type","charAt","parseInt","t","indicator","helpText","FieldType","TT_SELECT","group","appearInSummary","validation","Validation","required","options","TT_TEXT","onValue","toastWarning","config","customKeyboard","orders","i","orderData","testIndex","tests","isEmpty","concept_id","indicators","push","other","accession","accession_number","orderDate","order_date","TT_TABLE_VIEWER","rows","HisDate","toStandardHisDisplayFormat","action","$nextTick","columns","val","overrideDefaultFooterBtns","nextBtn","onClick","$router","back","hiddenFooterBtns","generateDateFields","estimation","allowUnknown","minDate","toStandardHisFormat","maxDate","Service","getSessionDate","computeValue","TT_MULTIPLE_SELECT","__exports__","_resolveDynamicComponent","formType","cancelDestinationPath","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","default","String","formData","computedData","$emit"],"mappings":"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","file":"js/chunk-4621689b.5a95c20d.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    key: _ctx.hisFormKey,\n    fields: _ctx.fields,\n    activeField: _ctx.fieldComponent,\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"fields\", \"activeField\", \"onOnFinish\"]))\n}","import { OrderService } from '@/services/order_service'\nimport { AppEncounterService } from './app_encounter_service';\n\nexport class PatientLabResultService extends AppEncounterService {\n    patientID: number;\n    testTypeID: number;\n    resultDate: string;\n    testID: number;\n    constructor(patientId: number) {\n        super(patientId, 57)\n        this.patientID = patientId\n        this.testTypeID = -1\n        this.resultDate = ''\n        this.testID = -1\n    }\n\n    createLabResult(measures: Array<any>) {\n        return AppEncounterService.postJson(`lab/tests/${this.testID}/results`, {\n            'encounter_id': this.encounterID,\n            date: this.resultDate,\n            measures\n        })\n    }\n\n    getTestID() {\n        return this.testID\n    }\n\n    getTestTypeID() {\n        return this.testTypeID\n    }\n\n    setTestTypeID(test: number) {\n        this.testTypeID = test\n    }\n\n    setResultDate(date: string) {\n        this.resultDate = date\n    }\n\n    setTestID(test: number) {\n        this.testID = test\n    }   \n\n    getTestsWithoutResults() {\n        return OrderService.getOrders(this.patientID, {\n            status: 'drawn'\n        })\n    }\n\n    getTestIndicators() {\n      return OrderService.getJson(\n        `lab/test_result_indicators`, {\n        'test_type_id': this.testTypeID\n      })\n    }\n\n    \n}\n","\nimport { defineComponent } from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { PatientLabResultService } from \"@/services/patient_lab_result_service\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { toastWarning, toastDanger, toastSuccess, alertConfirmation } from \"@/utils/Alerts\"\nimport { find, isEmpty } from 'lodash';\nimport HisDate from \"@/utils/Date\"\nimport { Service } from \"@/services/service\"\nimport { OrderService } from '@/services/order_service';\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        fieldComponent: '' as string,\n        labResult: {} as any,\n        hisFormKey: 0 as number,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        selectedTest: {} as any,\n        testOptions: [] as Array<any>,\n        testIndicators: [] as Array<any>\n    }),\n    watch: {\n        '$route': {\n            async handler({params}: any) {\n                if (params && params.patient_id) {\n                    this.patient = params.patient_id\n                    this.labResult = new PatientLabResultService(this.patient)\n                    await this.initData()\n                    this.fields = this.getFields()\n                }\n            },\n            deep: true,\n            immediate: true\n        }\n    },\n    methods: {\n        async onFinish(_: any, c: any) {\n            try {\n                const measures = Object.values(c)\n                                    .filter((d: any) => d.tag === 'result_indicator' && d.measures)\n                                    .map((d: any) => d.measures)\n                this.labResult.setTestID(this.selectedTest.value)\n                this.labResult.setResultDate(c.result_date)\n                await this.labResult.createEncounter()\n                await this.labResult.createLabResult(measures)\n                Store.invalidate('PATIENT_LAB_ORDERS')\n                this.testOptions = []\n                this.selectedTest = {}\n                this.testIndicators = []\n                await this.initData()\n                this.hisFormKey = Math.floor(Math.random() * 5000)\n                toastSuccess('Lab result saved!')\n            }catch(e) {\n                toastDanger(`${e}`)\n                console.error(e)\n            }\n        },\n        generateTestIndicatorsFields() {\n          return this.testIndicators.reduce((acc: Field[], data: any) => {\n            return acc.concat(this.buildTestIndicatorFields(\n              data.indicatorId,\n              data.indicatorName,\n              data.specimen,\n              data.testId\n            ))\n          }, [] as Field[])\n        },\n        async validateVLresults(name: string, specimen: string, result: string){\n            if (name !== 'HIV viral load') return true\n            const modifier = result.substring(0, 1)\n            const value = result.substring(1, result.length)\n            if(OrderService.isValidVLResult(specimen, modifier, value)) return true\n            const isOk = await alertConfirmation(`Invalid results for ${specimen} HIV viral load`, {\n                cancelBtnLabel: \"Process result\",\n                confirmBtnLabel: \"Re-enter result\"\n            })\n            return !isOk\n        },\n        alphaValueIsValid(value: string) {\n            try {\n                return value.match(/^(>|<|=)(.*)/) ? true : false\n            }catch (e) {\n                return false\n            }\n        },\n        numericValueIsValid(value: string){\n            try {\n                return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n            }catch(e) {\n                return false\n            }\n        },\n        isMalariaResult(name: string) {\n            return name.match(/mrdt|malaria/i) ? true : false\n        },\n        buildTestIndicatorFields(id: number, name: string, specimen: string, test: number): Array<Field> {\n          const fieldIndex = id * test\n            const condition = (f: any) => [\n                this.selectedTest.value === test, \n                find(f.result_indicators, { label: name}) ? true : false\n            ].every(Boolean)\n            const beforeNext = (v: Option) => this.validateVLresults(name, specimen, v.value.toString())\n\n            const computedValue = (v: any, f: any) => {\n                if(v.value === 'Other' && name.match(/HIV viral load/i)) return {}\n                const type = this.isMalariaResult(name) ? 'text' : f[`type_${fieldIndex}`].value\n                const value = this.isMalariaResult(name) ? \"=\" + v.value : v.value.toString()\n                const modifier = value.charAt(0)\n                const result = type === 'numeric' ? parseInt(value.substring(1)) : value.substring(1)\n                const test = f[`result_indicators`].filter((t: any) => t.value === id)[0]\n                return {\n                    tag: 'result_indicator',\n                    measures: {\n                        indicator: {\n                            'concept_id': test.value\n                        },\n                        'value': result,\n                        'value_modifier': modifier,\n                        'value_type': type\n                    },\n                    result,\n                    modifier,\n                    test: test.label\n                }\n            }\n            return [\n                {\n                    id: `type_${fieldIndex}`,\n                    helpText: `Result type (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    condition: (f: any) => condition(f) && !this.isMalariaResult(name),\n                    appearInSummary: () => false,\n                    validation: (v: Option) => Validation.required(v),\n                    options: () => [\n                        {\n                            label: 'Numeric (numbers only)',\n                            value: 'numeric'\n                        },\n                        {\n                            label: 'Alphanumeric(text and numbers)',\n                            value: 'text'\n                        }\n                    ]\n                },\n                {\n                    id: `num_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    computedValue,\n                    beforeNext,\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.numericValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifer and numbers only. i.e =90 / >19 / < 750')\n                            return false\n                        }\n                        return true\n                    },\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'numeric',\n                    config: {\n                        customKeyboard: [\n                            [\n                                ['1', '2', '3'],\n                                ['4', '5', '6', '=', '<', '>'],\n                                ['7', '8', '9', '.'],\n                                ['',  '0', '']\n                            ],\n                            [\n                                [ 'Delete']\n                            ]\n                        ]\n                    }\n                },\n                {\n                    id: `alpha_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.alphaValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifier plus result (for example =LDL)')\n                            return false\n                        }\n                        return true\n                    },\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'text' && !name.match(/HIV viral load/i)\n                },\n                {\n                    id: `VL_alpha_${fieldIndex}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'text' && name.match(/HIV viral load/i),\n                    options: () => [\n                      {\n                        label: 'Collect Another Sample',\n                        value: '=Collect Another Sample'\n                      },\n                      {\n                        label: '<LDL',\n                        value: '<LDL'\n                      },\n                      {\n                        label: '=LDL',\n                        value: '=LDL'\n                      },\n                      {\n                        value: 'Other',\n                        label: 'Other'\n                      }\n                    ]\n                },\n                {\n                    id: `other_VL_alpha_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.alphaValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifier plus result (for example =LDL)')\n                            return false\n                        }\n                        return true\n                    },\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => {\n                      return condition(f) && \n                        f[`type_${fieldIndex}`].value === 'text' && \n                        name.match(/HIV viral load/i)\n                        && f[`VL_alpha_${fieldIndex}`].value === 'Other'\n                    }\n                },\n                {\n                    id: `malaria_result_${fieldIndex}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && this.isMalariaResult(name),\n                    options: () => {\n                        if(name.match(/mrdt/i)) {\n                            return [\n                                {\n                                    label: 'Positive',\n                                    value: 'positive'\n                                },\n                                {\n                                    label: 'Negative',\n                                    value: 'negative'\n                                }\n                            ]\n                        }\n                        return [\n                            {\n                                label: 'Parasites seen',\n                                value: 'parasites seen'\n                            },\n                            {\n                                label: 'No parasites seen',\n                                value: 'no parasites seen'\n                            }\n                        ]\n                    }\n                },\n            ]\n        },\n        async initData() {\n            const orders = await this.labResult.getTestsWithoutResults()\n            for(const i in orders) {\n                const orderData = orders[i]\n                for(const testIndex in orderData.tests) {\n                    const test = orderData.tests[testIndex]\n                    if (!isEmpty(test.result)) {\n                        continue\n                    }\n                    this.labResult.setTestTypeID(test.concept_id)\n                    const indicators = await this.labResult.getTestIndicators()\n                    const testIndicators = indicators.map((i: any) =>({\n                        testId: test.id,\n                        indicatorName: i.name,\n                        indicatorId: i.concept_id,\n                        specimen: orderData.specimen.name,\n                    }))\n                    this.testIndicators = [...this.testIndicators, ...testIndicators]\n                    this.testOptions.push({\n                        label: test.name,\n                        value: test.id,\n                        other: {\n                            accession: orderData.accession_number,\n                            specimen: orderData.specimen.name,\n                            test: test.name,\n                            orderDate: orderData.order_date,\n                            testIndicators\n                        }\n                    })\n                }\n            }\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                  id: 'test_type',\n                  helpText: 'Tests without results',\n                  type: FieldType.TT_TABLE_VIEWER,\n                  options: () => {\n                    const rows = this.testOptions.map((t: Option) => ([\n                        t.other.accession,\n                        t.other.specimen,\n                        t.other.test,\n                        HisDate.toStandardHisDisplayFormat(t.other.orderDate),\n                        {\n                            type: 'button',\n                            name: 'Select',\n                            action: () => {\n                                this.selectedTest = t\n                                this.$nextTick(() => this.fieldComponent = 'year_result_date')\n                            }\n                        }\n                    ]))\n                    return [{\n                        label: '',\n                        value: '',\n                        other: {\n                            rows,\n                            columns:[ 'Acession#', 'Specimen', 'Test', 'Order date']\n                        }\n                    }]\n                  },\n                  validation: (val: Option) => Validation.required(val),\n                  config: {\n                    overrideDefaultFooterBtns: {\n                        nextBtn: {\n                            name: 'Finish',\n                            onClick: () => this.$router.back()\n                        }\n                    },\n                    hiddenFooterBtns: [\n                        'Clear',\n                        'Cancel'\n                    ]\n                  }\n                },\n                ...generateDateFields({\n                    id: 'result_date',\n                    helpText: 'Result',\n                    required: true,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    minDate: () => HisDate.toStandardHisFormat(this.selectedTest.other.orderDate),\n                    maxDate: () => Service.getSessionDate(),\n                    computeValue: (date: string) => date\n                }),\n                {\n                    id: `result_indicators`,\n                    helpText: `Select test result indicators`,\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (v: Option) => Validation.required(v),\n                    options: () => {                       \n                        return this.selectedTest\n                                .other\n                                .testIndicators\n                                .map((i: any) => ({\n                                    label: i.indicatorName,\n                                    value: i.indicatorId\n                                }))\n                    },\n                },\n                ...this.generateTestIndicatorsFields(),\n                {\n                    id: 'entry_confirmation',\n                    helpText: 'Confirm entry',\n                    type: FieldType.TT_TABLE_VIEWER,\n                    options: (_: any, c: any) => {\n                        const rows = Object.values(c)\n                                           .filter((d: any) => \n                                                typeof d === 'object'\n                                                && d != null\n                                                && d.tag === 'result_indicator'\n                                            )\n                                           .map((d: any) => ([d.test, d.modifier, d.result ]))\n                        return [{\n                            label: '',\n                            value: '',\n                            other: {\n                                rows,\n                                columns:[ 'Test', 'Modifier', 'Result']\n                            }\n                        }]\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./LabResults.vue?vue&type=template&id=1dcfb960&ts=true\"\nimport script from \"./LabResults.vue?vue&type=script&lang=ts\"\nexport * from \"./LabResults.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}