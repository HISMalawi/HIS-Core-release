{"version":3,"sources":["webpack:///./src/apps/HTS/services/hts_circumcision_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/views/encounters/HtsReferral.vue?986d","webpack:///./src/apps/HTS/services/hts_referral_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsReferral.vue","webpack:///./src/apps/HTS/views/encounters/HtsReferral.vue?05e0"],"names":["HtsCircumcisionService","AppEncounterService","constructor","patientID","providerID","super","getRecentCircumcisionStatus","this","getFirstValueCoded","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","id","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","_","HtsReferralService","IonPage","mixins","EncounterMixinVue","service","isHivPositive","watch","handler","referralServicesField","commentsField","immediate","saveFormEncounterAndProceed","getObs","concept","serviceReferral","services","v","recommendCircumcision","knownSTIs","helpText","FieldType","TT_MULTIPLE_SELECT","isRequired","init","offlineData","observationParams","offlineObs","_obs$meta","hts_male_circumcised","forEach","_obs$meta2","_obs$meta3","test_results","res","hiv_result","circumcision","sti","finalComputedValue","onValueUpdate","listData","l","isChecked","f","opt","selected","convertArrayToString","disabled","config","footerBtns","onClickComponentEvents","refreshOptions","o","onClick","TT_NOTE"],"mappings":"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","file":"js/chunk-37c65eed.3f5487ab.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsCircumcisionService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 158, providerID)\n    }\n\n    getRecentCircumcisionStatus() {\n        return this.getFirstValueCoded('Circumcision status')\n    }\n}\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Referral\",\n        skipSummary: true,\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsReferralService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 114, providerID)\n    }\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { IonPage } from \"@ionic/vue\"\nimport { HtsReferralService } from \"@/apps/HTS/services/hts_referral_service\"\nimport { HtsCircumcisionService } from '../../services/hts_circumcision_service'\nimport { Offline } from '@/composables/offline'\nimport { ObservationOffline } from '@/interfaces/Sync'\nimport { convertArrayToString } from '@/utils/Strs'\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any,\n    isHivPositive: false as boolean\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsReferralService(this.patientID, this.providerID)\n          this.fields.push(this.referralServicesField())\n          this.fields.push(this.commentsField())\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    onFinish(formData: any, computedData: any) {\n      this.saveFormEncounterAndProceed({\n        encounterTypeID: this.service.encounterTypeID,\n        formData,\n        computedData,\n      })\n    },\n    getObs(concept: string) {\n      return HtsReferralService.getFirstValueCoded(this.patientID, concept)\n    },\n    serviceReferral(formData: any, service: string) {\n      return formData.services.some((v: Option) => v.value === service)\n    },\n    referralServicesField(): Field {\n      let recommendCircumcision = false\n      const knownSTIs: string[] = []\n      return {\n        id: \"services\",\n        helpText: 'Refer Client to other Services?',\n        type: FieldType.TT_MULTIPLE_SELECT,\n        isRequired: () => true,\n        init: async () => {\n          if (this.goOffline()) {\n            const offlineData = Offline().findByID(this.offlineID)\n            if (offlineData && Array.isArray(offlineData.observationParams)) {\n              const offlineObs = (offlineData.observationParams||[])\n              // Recommend circumcision if not circumcised\n              recommendCircumcision = offlineObs.some((obs: ObservationOffline) => {\n                return obs.encounterName === 'circumcision status' && \n                  /no/i.test(`${obs?.meta?.hts_male_circumcised}`) && \n                  this.facts.age > 14 && this.facts.age < 64\n              })\n              offlineObs.forEach((obs: ObservationOffline) => {\n                if (obs.encounterName === 'testing') {\n                  (obs?.meta?.test_results||[]).forEach((res: Option) => {\n                    if (/syphilis|Hepatitis/i.test(res.label) && res.value === 'Positive')\n                      knownSTIs.push(res.label)\n                  })\n                  this.isHivPositive = /positive/i.test(`${obs?.meta?.hiv_result?.label}`)\n                }\n              })\n              return true\n            }\n            return false\n          }\n          // Online mode recommendations\n          if (this.facts.gender === 'M') {\n            const circumcision = new HtsCircumcisionService(this.patientID, this.providerID)\n            const status = (await circumcision.getRecentCircumcisionStatus())\n            recommendCircumcision = [\n              status === 'No', this.facts.age > 14 && this.facts.age < 64\n            ].every(Boolean)\n          }\n          for(const sti of [\"Syphilis Test Result\", \"Hepatitis B Test Result\"]) {\n            if ((await this.getObs(sti)) === 'Positive')\n              knownSTIs.push(sti)\n          }\n          this.isHivPositive = ['Positive', 'Positive Initial Professional'].includes((await this.getObs('HIV status')))\n          return true\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v.map(d => this.service.buildValueText('Referrals ordered', d.value))\n          }\n        },\n        onValueUpdate(listData: Option[], value: Option) {\n          return listData.map(l => {\n            if (value.value === 'None' && l.value != 'None') {\n              l.isChecked = false\n            }\n            if (value.value != 'None' && value.isChecked && l.value === 'None') {\n              l.isChecked = false\n            }\n            return l\n          })\n        },\n        options: (f: any) => {\n          const options: any = []\n          const opt = (v: string, options = {} as any) => {\n            const selected = f.services ? f.services.some((d: Option) => d.value === v) : false\n            return { label: v, value: v, isChecked: selected, ...options }\n          }\n          options.push(opt('STI', knownSTIs.length ? {\n            description: {\n              text: `Client tested positive for ${convertArrayToString(knownSTIs)}. Please recommend this option if client has not started yet`\n            }\n          } : {}))\n          options.push(opt('TB'))\n          if (this.facts.gender === 'M') {\n            options.push(opt('VMMC', recommendCircumcision ? {\n              description: {\n                text: 'Client is not circumcised, please recommend this option'\n              }\n            } : {}))\n          }\n          options.push(opt('PrEP ', this.isHivPositive ? {\n            disabled: this.isHivPositive,\n            description: {\n              text: 'Client is HIV positive, cannot refer for PrEP'\n            }\n          } : {}))\n          options.push(opt('PEP ', this.isHivPositive ? {\n            disabled: this.isHivPositive,\n            description: {\n              text: 'Client is HIV positive, cannot refer for PEP'\n            }\n          } : {}))\n          options.push(opt('Other'))\n          options.push(opt('None'))\n          return options\n        },\n        config: {\n          footerBtns: [\n            {\n              name: \"None\",\n              slot: \"end\",\n              onClickComponentEvents: {\n                refreshOptions: (_: any, listData: Option[]) => {\n                  return listData.map(o => {\n                    o.isChecked = o.label === 'None'\n                    return o\n                  })\n                }\n              },\n              onClick: () => 'None'\n            }\n          ]\n        }\n      }\n    },\n    commentsField(): Field {\n      return {\n        id: 'comment',\n        helpText: 'Comments (Optional)',\n        type: FieldType.TT_NOTE,\n        finalComputedValue: (v: Option | null) => {\n          if (v && !/^\\s*$/gi.test(`${v.value}`)) {\n            return {\n              obs: this.service.buildValueText('Comments', v.value)\n            }\n          }\n          return null\n        }\n      }\n    }\n  }\n})\n","import { render } from \"./HtsReferral.vue?vue&type=template&id=5664edc4&ts=true\"\nimport script from \"./HtsReferral.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsReferral.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}