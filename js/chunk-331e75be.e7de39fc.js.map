{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsCode.vue?757c","webpack:///./src/apps/HTS/views/encounters/HtsCode.vue","webpack:///./src/apps/HTS/views/encounters/HtsCode.vue?04dc","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/HTS/services/hts_art_initiation_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","skipSummary","onFinishAction","nextTask","cancelDestinationPath","patientDashboardUrl","_","defineComponent","components","IonPage","HisStandardForm","setup","ref","service","HtsArtInitiationService","mapStrToOptions","StartHtsEncounter","onInitVisit","linkageCode","value","id","helpText","type","FieldType","TT_TEXT_BANNER","init","async","getHtsCode","options","__exports__","_resolveDynamicComponent","formType","activeField","onOnFinish","onFinish","onOnIndex","onIndex","name","TouchScreenForm","emits","data","props","Function","Boolean","String","Object","required","methods","formData","computedData","this","$emit","i","AppEncounterService","constructor","patientID","providerID","super","_defineProperty","PrintoutService","code","printoutService","printLbl","getFirstValueText","validLinkID","linkID","mapping","A","C","H","K","L","N","P","W","X","Y","regex","match","exec","bookNo","parseInt","pageNo","rowNo","checkDigit","length","toString","isNaN","hasOwnProperty"],"mappings":"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","file":"js/chunk-331e75be.e7de39fc.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"View HTS Code\",\n        fields: _ctx.fields,\n        skipSummary: true,\n        onFinishAction: _ctx.nextTask,\n        cancelDestinationPath: _ctx.patientDashboardUrl()\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent, ref } from \"vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { HtsArtInitiationService } from \"../../services/hts_art_initiation_service\";\nimport { StartHtsEncounter } from \"@/apps/HTS/composables/HtsFormEncounter\";\nimport { Field } from \"@/components/Forms/FieldInterface\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\n\nexport default defineComponent({\n  components: { IonPage, HisStandardForm },\n  setup() {\n    const fields = ref<Field[]>([])\n    const service = new HtsArtInitiationService(-1)\n    const { nextTask, mapStrToOptions, patientDashboardUrl } = StartHtsEncounter({\n      onInitVisit: () => {\n        let linkageCode = ''\n        fields.value = [\n           {\n            id: \"linkage_code\",\n            helpText: \"LINKAGE CODE\",\n            type: FieldType.TT_TEXT_BANNER,\n            init: async () => {\n              linkageCode = await service.getHtsCode();\n              return true;\n            },\n            options: () => mapStrToOptions([linkageCode]),\n          }\n        ]\n      }\n    })\n\n    return {\n      patientDashboardUrl,\n      nextTask,\n      fields\n    }\n  }\n});\n","import { render } from \"./HtsCode.vue?vue&type=template&id=4c01401a&ts=true\"\nimport script from \"./HtsCode.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsCode.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { PrintoutService } from '@/services/printout_service';\nimport Prop from \"@/apps/GLOBAL_APP/global_prop\";\nexport class HtsArtInitiationService extends AppEncounterService {\n  patientID: number\n  printoutService: PrintoutService = new PrintoutService()\n    \n  constructor(patientID: number, providerID = -1) {\n      super(patientID, 79, providerID);\n      this.patientID = patientID;\n  }\n\n  async printHtsLinkageId(code: string) {\n    await this.printoutService.printLbl(\n      `/patients/${this.patientID}/labels/print_hts_linkage_code/${code}`\n    );\n  }\n\n    async getHtsCode() {\n      return (await this.getFirstValueText('HTC serial number'))||'Un-assigned'\n    }\n  \n  validLinkID(linkID: string): Array<string> | null {\n    const mapping: { [key: string]: number } = {\n      A: 0,\n      C: 1,\n      H: 2,\n      K: 3,\n      L: 4,\n      N: 5,\n      P: 6,\n      W: 7,\n      X: 8,\n      Y: 9,\n    };\n\n    const regex = /^(\\d{1,4})-(\\d{1,3})-(\\d{1,2})-([A-CE-HK-NP-Y])$/;\n    const match = regex.exec(linkID);\n\n    if (!match) {\n      return [\"Invalid LinkID format\"]\n    }\n\n    const bookNo = parseInt(match[1], 10);\n    const pageNo = parseInt(match[2], 10);\n    const rowNo = parseInt(match[3], 10);\n    const checkDigit = match[4];\n\n    // book no and row no should not have leading zeros\n    if (match[1].length !== bookNo.toString().length || match[3].length !== rowNo.toString().length || match[2].length !== pageNo.toString().length) {\n      return [\"Invalid LinkID, book number and row number should not have leading zeros\"];\n    }\n\n    // Validate book number, page number, and row number\n    if (\n      isNaN(bookNo) ||\n      isNaN(pageNo) ||\n      isNaN(rowNo) ||\n      bookNo < 1 ||\n      bookNo > 9999 ||\n      pageNo < 1 ||\n      pageNo > 999 ||\n      rowNo < 1 ||\n      rowNo > 99\n    ) {\n      return [\"Invalid LinkID format on book, page, or row number\"];\n    }\n\n    // Validate check digit\n    // eslint-disable-next-line no-prototype-builtins\n    if (!mapping.hasOwnProperty(checkDigit)) {\n      return [\"Invalid check digit\"];\n    }\n\n    return null;\n  }\n}\n"],"sourceRoot":""}