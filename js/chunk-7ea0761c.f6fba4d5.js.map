{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsContact.vue?e25e","webpack:///./src/apps/HTS/services/hts_contact_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsContact.vue","webpack:///./src/apps/HTS/views/encounters/HtsContact.vue?aa4c","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/composables/storage.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","HtsContactService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","push","discussPartnerField","contactIndexPageField","immediate","methods","formData","computedData","saveFormEncounterAndProceed","encounterTypeID","buildDateObs","conceptName","date","isEstimate","obs","match","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","buildValueCoded","options","label","value","values","yesNoOptions","context","TT_TABLE_VIEWER","onload","c","condition","f","discuss_partner","validation","parseInt","async","_data","_data2","contact_index_page","rows","other","contacts","formFields","contactRegistrationWorflowForm","modal","MultiStepPopupForm","length","rowID","given_name","val","family_name","relation_to_contact","birth_date","name","color","action","KeyboardInput","TT_SUMMARY","Object","keys","filter","map","d","_find","valLabel","find","modalController","dismiss","alertConfirmation","splice","findIndex","r","child","resolveObs","onDidDismiss","columns","reduce","a","concat","config","footerBtns","slot","onClick","fdata","PersonField","getGivenNameField","getFamilyNameField","TT_SELECT","mapStrToOptions","age","HisDate","getAgeInYears","facts","birthDate","dob","getDobConfig","ageThreshold","computeValue","buildValueNumber","minDate","dayjs","add","format","maxDate","subtract","generateDateFields","gender","getGenderField","cell","getCellNumberField","contact_hiv_status","beforeNext","confirm","infoActionSheet","last_time_hiv_tested","ipv_status","contact_consent","TT_DATE_PICKER","defaultValue","toDate","infoItems","getCurrentRegionField","onClickComponentEvents","setValue","computedValue","getCurrentDistrictField","defaultComputedOutput","undefined","test","current_region","defaultOutput","toOption","district","getCurrentTAfield","currentTA","getCurrentVillageField","village","TT_NOTE","self_testkit_given","TT_TEXT","frs_given","contact_on_art","required","getDate","estimation","allowUnknown","trim","tag","__exports__","FlowState","dformat","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","encounterStartTime","npid","givenName","familyName","birthEstimated","isEnrolledInProgam","created","$route","params","patient_id","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","ProgramService","getSessionDate","diff","birthdate_estimated","current_district","current_village","current_traditional_authority","status","endTime","elapsedTime","minutes","userAgentObs","getPlatformName","durationObs","error","toastWarning","enc","createEncounter","saveObservationList","callback","toastDanger","saveObsOffline","observations","uploadStatus","meta","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","b","usernameA","usernameB","p","_p$person","names","_p$person2","latestName","items","i","path","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","accum","cur","Array","isArray","Promise","all","inArray","arr","expression","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","$emit","mapToOption","listOptions","item","resolvePerson","computedForm","attr","isPlainObject","Validation","isName","form","PersonService","searchGivenName","searchFamilyName","customOptions","includeHelpText","summaryLabel","estimateDateFromAge","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","summaryMapValue","_f$home_region","home_region","dynamicHelpText","_f$home_region2","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","field","filtered","ok","address","LocationService","createAddress","getHomeTaField","showKeyboard","isFilterDataViaApi","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","home_village","_f$home_region3","_f$current_region","_f$current_region2","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","getFacilityLocationField","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","homeDistrict","homeVillage","homeTA","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","show","Service","getProgramName","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","onerror","filters","openCursor","cursor","filteredData","continue","put","delete","entries","every","isInteger","toLower","includes","isCondition","ignored","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","offlineStorage","facilities","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-7ea0761c.f6fba4d5.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Contact tracing\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsContactService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 195, providerID)\n    }\n}\n","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport {\n  Field,\n  Option,\n} from \"@/components/Forms/FieldInterface\";\nimport { IonPage, modalController } from \"@ionic/vue\";\nimport { HtsContactService } from \"@/apps/HTS/services/hts_contact_service\";\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport {\n  generateDateFields,\n} from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport KeyboardInput, { MultiStepPopupForm } from \"@/utils/PopupKeyboard\";\nimport HisDate from \"@/utils/Date\";\nimport { alertConfirmation } from \"@/utils/Alerts\";\nimport { find } from \"lodash\";\nimport { toDate } from \"@/utils/Strs\";\nimport dayjs from 'dayjs';\nimport { infoActionSheet } from '@/utils/ActionSheets';\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsContactService(this.patientID, this.providerID);\n          this.fields.push(this.discussPartnerField());\n          this.fields.push(this.contactIndexPageField());\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    onFinish(formData: any, computedData: any) {\n      this.saveFormEncounterAndProceed({\n        encounterTypeID: this.service.encounterTypeID,\n        formData,\n        computedData,\n      })\n    },\n    buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n      let obs = {};\n      if (date.match(/unknown/i)) {\n        obs = this.service.buildValueText(conceptName, \"Unknown\");\n      } else if (isEstimate) {\n        obs = this.service.buildValueDateEstimated(conceptName, date);\n      } else {\n        obs = this.service.buildValueDate(conceptName, date);\n      }\n      return obs;\n    },\n    discussPartnerField(): Field {\n      return {\n        id: \"discuss_partner\",\n        helpText: \"Discuss Partner\",\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            obs: this.service.buildValueCoded(\"Consent Confirmation\", v),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Does the client consent to discuss contact?\",\n              value: \"\",\n              values: this.yesNoOptions(),\n            },\n          ];\n        },\n      };\n    },\n    contactIndexPageField(): Field {\n      let context: any = null;\n      return {\n        id: \"contact_index_page\",\n        helpText: \"Registered contacts\",\n        type: FieldType.TT_TABLE_VIEWER,\n        onload: (c: any) => (context = c),\n        condition: (f: any) => f.discuss_partner === \"Yes\",\n        isRequired: () => true,\n        validation: (v: Option[]) => {\n          if (parseInt(`${v[0].value}`) <= 0) {\n            return [\"Contact list is empty!!. Please register some\"];\n          }\n          return null;\n        },\n        options: async (f: any) => {\n          let data: any = {};\n          if (f.contact_index_page != null) {\n            data = f.contact_index_page[0] || {};\n          }\n          const rows: Array<any> = [...(data?.other?.rows || [])];\n          const contacts: Record<string, any> = {\n            ...(data?.other?.contacts || {}),\n          };\n          const formFields = this.contactRegistrationWorflowForm();\n          const modal = await MultiStepPopupForm(formFields, {\n            formLabel: `Contact Registration #${rows.length + 1}`,\n            onFinish: async (_: any, computedData: any) => {\n              const rowID = rows.length + 1;\n              rows.push([\n                rowID,\n                `${computedData.given_name.val} ${computedData.family_name.val}`,\n                computedData.relation_to_contact.val,\n                computedData.birth_date.val + \" years\",\n                {\n                  name: \"View\",\n                  type: \"button\",\n                  color: \"primary\",\n                  action: async () => {\n                    KeyboardInput(\n                      {\n                        id: \"summary_view\",\n                        helpText: \"More details\",\n                        type: FieldType.TT_SUMMARY,\n                        options: () => {\n                          return Object.keys(computedData)\n                            .filter((v: any) => computedData[v].val)\n                            .map((d: any) => {\n                              return {\n                                value: computedData[d].val,\n                                label:\n                                  computedData[d].valLabel ||\n                                  find(formFields, { id: d })?.helpText,\n                              };\n                            }) as Option[];\n                        },\n                      },\n                      () => modalController.dismiss()\n                    );\n                  },\n                },\n                {\n                  name: \"Remove\",\n                  type: \"button\",\n                  color: \"danger\",\n                  action: async () => {\n                    if (\n                      await alertConfirmation(\n                        \" Are you sure you want to remove contact?\"\n                      )\n                    ) {\n                      delete context.data[0].other.contacts[rowID];\n                      context.data[0].label = `${\n                        parseInt(`${context.data[0].label}`) - 1\n                      }`;\n                      context.data[0].value = parseInt(context.data[0].label);\n                      context.data[0].other.rows.splice(\n                        context.data[0].other.rows.findIndex(\n                          (r: any) => r[0] === rowID\n                        ),\n                        1\n                      );\n                    }\n                  },\n                },\n              ]);\n              contacts[rowID] = {\n                ...(await this.service.buildValueText(\n                  \"Patient contacts construct\",\n                  `${computedData.given_name.val} ${computedData.family_name.val}`\n                )),\n                child: await this.resolveObs(computedData),\n              };\n              modalController.dismiss();\n            },\n          });\n          await modal.onDidDismiss();\n          return [\n            {\n              label: `${rows.length}`,\n              value: `${rows.length}`,\n              other: {\n                columns: [\"ID\", \"Name\", \"Relation\", \"Age\"],\n                contacts,\n                rows,\n              },\n            },\n          ];\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: Object.values(v[0].other.contacts).reduce(\n              (a: any, c: any) => a.concat(c),\n              []\n            ),\n          };\n        },\n        config: {\n          footerBtns: [\n            {\n              name: \"Add New\",\n              slot: \"end\",\n              color: \"success\",\n              onClick: async () =>\n                (context.data = await context.options(context.fdata)),\n            },\n          ],\n        },\n      };\n    },\n    contactRegistrationWorflowForm(): Field[] {\n      return [\n        (() => {\n          const name = PersonField.getGivenNameField();\n          name.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\n                \"First name of contact\",\n                v.value\n              ),\n            };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getFamilyNameField();\n          name.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Last name of contact\", v.value),\n            };\n          };\n          return name;\n        })(),\n         {\n          id: \"relation_to_contact\",\n          helpText: \"Contact is a ___\",\n          type: FieldType.TT_SELECT,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\n                \"Relationships of contact\",\n                v.value as string\n              ),\n            };\n          },\n          isRequired: () => true,\n          options: () => {\n            return this.mapStrToOptions([\n              \"Sexual Partner\",\n              \"Biological Child\",\n              \"Biological Parent\",\n            ]);\n           },\n           validation: (v: Option) => {\n            const age = HisDate.getAgeInYears(this.facts.birthDate);\n             if (v.value === \"Biological Child\" && age < 13) {\n               return [\"Contact is too young to have a biological child\"];\n             }\n             if(v.value === \"Sexual Partner\" && age < 13) {\n               return [\"Contact is too young to have a sexual partner\"];\n             }\n             return null\n          },\n        },\n        ...(() => {\n          const dob = PersonField.getDobConfig(false);\n          const ageThreshold = 14;\n          dob.helpText = \"Contact Birth\";\n          dob.computeValue = (date: string) => {\n            const age = HisDate.getAgeInYears(date);\n            return {\n              valLabel: \"Age\",\n              val: age,\n              obs: this.service.buildValueNumber(\"Age of contact\", age),\n            };\n          };\n          dob.minDate = (f: any) => {\n            let minDate = \"\"\n            if (f.relation_to_contact.value === \"Biological Child\") {\n              minDate = dayjs(this.facts.birthDate).add(ageThreshold, \"year\").format(\"YYYY-MM-DD\");\n            }\n            return minDate\n          }\n          dob.maxDate = (f: any) => {\n            let maxDate = \"\"\n            if (f.relation_to_contact.value === \"Biological Parent\") {\n              maxDate = dayjs(this.facts.birthDate).subtract(ageThreshold, \"year\").format(\"YYYY-MM-DD\");\n            }\n            return maxDate\n          };\n          return generateDateFields(dob);\n        })(),\n        (() => {\n          const gender = PersonField.getGenderField([\n            { label: \"Male\", value: \"M\" },\n            { label: \"Female\", value: \"F\" },\n          ]);\n          gender.helpText = 'Sex of contact'\n          gender.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Gender of contact\", v.value),\n            };\n          };\n          return gender;\n        })(),\n        {\n          id: \"contact_pregnancy_status\",\n          helpText: \"Pregnancy status of contact\",\n          type: FieldType.TT_SELECT,\n          condition: (f: any) => {\n            return f.gender.value === \"F\";\n          },\n          options: () => [\n            { label: \"Non-Pregnant\", value: \"FNP\" },\n            { label: \"Pregnant\", value: \"FP\" },\n            { label: \"Breastfeeding\", value: \"FBf\" },\n            { label: \"Unknown\", value: \"Unknown\" },\n          ],\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Contact pregnancy status\", v.value),\n            };\n          }\n        },\n         (() => {\n          const cell: Field = PersonField.getCellNumberField();\n          cell.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Contact phone number\", v.value),\n            };\n          };\n          return cell;\n        })(),\n        {\n          id: \"contact_hiv_status\",\n          helpText: \"HIV Status of the contact\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\"Contact HIV tested\", v.value),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\"Positive\", \"Negative\", \"Unknown\"]);\n          },\n        },\n        {\n          id: \"last_time_hiv_tested\",\n          helpText: \"When was Contact's Last HIV Test\",\n          type: FieldType.TT_SELECT,\n          condition: (f: any) => f.contact_hiv_status.value && \n            f.contact_hiv_status.value == 'Negative',\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => {\n            return {\n              obs: this.service.buildValueText(\n                \"Contact HIV test date\",\n                `${v.value} ago`\n              ),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\n              \"A year or more ago\",\n              \"Less than a year ago\",\n            ]);\n          },\n          beforeNext: async (v: any) => {\n            if (v.value == \"Less than a year ago\") {\n              const confirm = await infoActionSheet(\n                'Last HIV test',\n                'Last HIV test',\n                'The case will be closed because the contact was recently tested and does not need to be followed up on.',\n                [\n                  {\n                    name: 'OK',\n                    slot: 'start',\n                    color: 'success'\n                  }\n                ],\n                'primary',\n                false\n              )\n              return confirm == 'OK' ? true : false\n            }\n            return true\n          }\n        },\n        {\n          id: \"ipv_status\",\n          helpText: \"IPV Status\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          condition: (f: any) => ('Negative' == f.contact_hiv_status.value && \n            'A year or more ago' == f.last_time_hiv_tested.value || \"Unknown\" == f.contact_hiv_status.value),\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"IPV Status\", v.value),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\"Risk\", \"No Risk\"]);\n          }\n        },\n        {\n          id: \"contact_consent\",\n          helpText: \"Consent to reach out to the contact\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => f.ipv_status.value === \"No Risk\",\n          finalComputedValue: (val: any) => {\n            return {\n              val,\n              obs: this.service.buildValueCoded(\n                \"Consent to contact the contact\",\n                val\n              ),\n            };\n          },\n          options: () => {\n            return [\n              {\n                label: \"Does the client consent to reach out to the contact?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"referral_type\",\n          helpText: \"Referral Type\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          condition: (f: any) => f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\"Referral type\", v.value),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\n              \"Provider referral\",\n              \"Contract referral\",\n              \"Dual referral\",\n            ]);\n          },\n        },\n        {\n          id: \"set_appointment\",\n          helpText: \"Appointment Date (Within 2 weeks)\",\n          type: FieldType.TT_DATE_PICKER,\n          isRequired: () => true,\n          defaultValue: () => this.service.date,\n          condition: (f: any) => f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          finalComputedValue: (val: any) => {\n            return {\n              val: toDate(val.value),\n              obs: this.service.buildValueDate(\n                \"Contact appointment date\",\n                val.value\n              ),\n            };\n          },\n          config: {\n            minDate: () => this.service.date,\n            maxDate: () => dayjs(this.service.date).add(15, \"day\").toDate(),\n            infoItems: (date: string) => {\n              return [\n                {\n                  label: \"User set appointment\",\n                  value: toDate(date),\n                },\n              ];\n            },\n          },\n        },\n        {\n          id: \"testing_location\",\n          helpText: \"Testing Location\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueText(\n              \"Contact Appointment location\",\n              v.value\n            ),\n          }),\n          options: () => {\n            return this.mapStrToOptions([\n              \"Facility\",\n              \"Home/Other Facility\"\n            ]);\n          },\n          condition: (f: any) => f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n        },\n        {\n          ...PersonField.getCurrentRegionField(),\n          helpText: \"Contact's Current Region of Residence\",\n          config: {\n            footerBtns: [\n              {\n                name: \"Same as index\",\n                slot: \"end\",\n                onClickComponentEvents: {\n                  setValue: () => 'Same as index'\n                },\n                onClick: () => \"Same as index\"\n              }\n            ]\n          },\n          condition: (f: any) => f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\"Contact current region\", v.label),\n          })\n        },\n        {\n          ...PersonField.getCurrentDistrictField(),\n          helpText: \"Contact's Current District of Residence\",\n          defaultComputedOutput: undefined,\n          condition: (f: any) => !/same as index/i.test(f.current_region.label) &&\n            f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          defaultOutput: (f: any) => {\n            if (/Same as index/i.test(f.current_region.label)) {\n              return this.toOption(this.facts.district)\n            }\n          },\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\n              \"Contact current district\",\n              v.label\n            ),\n          }),\n        },\n        {\n          ...PersonField.getCurrentTAfield(),\n          helpText: \"Contact's Current TA of Residence\",\n          defaultComputedOutput: undefined,\n          condition: (f: any) => !/foreign|same as index/i.test(`${f.current_region.label}`) && \n            f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          defaultOutput: (f: any) => {\n            if (/Same as index/i.test(f.current_region.label)) {\n              return this.toOption(this.facts.currentTA)\n            }\n          },\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\"Contact current TA\", v.label),\n          }),\n        },\n        {\n          ...PersonField.getCurrentVillageField(),\n          helpText: \"Contact's Current Village of Residence\",\n          defaultComputedOutput: undefined,\n          condition: (f: any) => !/foreign|same as index/i.test(`${f.current_region.label}`) &&\n            f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          defaultOutput: (f: any) => {\n            if (/Same as index/i.test(f.current_region.label)) {\n              return this.toOption(this.facts.village)\n            }\n          },\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\n              \"Contact current village\",\n              v.label\n            ),\n          }),\n        },\n        {\n          id: \"contact_address\",\n          helpText: \"Physical address\",\n          type: FieldType.TT_NOTE,\n          isRequired: () => true,\n          condition: (f: any) => f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          finalComputedValue: (v: Option) => ({\n            val: v.value,\n            obs: this.service.buildValueText(\n              \"Contact physical address\",\n              v.value\n            ),\n          }),\n        },\n        {\n          id: \"self_testkit_given\",\n          helpText: \"Contact Self Test Kit Given\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => {\n            return (\n              f.contact_consent === \"No\" ||\n              f.ipv_status.value === \"Risk\"\n            );\n          },\n          finalComputedValue: (v: any) => ({\n            obs: this.service.buildValueCoded(\"Self-Test kit given\", v),\n          }),\n          options: () => {\n            return [\n              {\n                label:\n                  \"Was a self test kit given to the Index for their contact?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"reason_for_not_giving_self_testkit\",\n          helpText: \"Reason for not providing a self test (Optional)\",\n          type: FieldType.TT_NOTE,\n          condition: (f: any) => f.self_testkit_given === \"No\",\n          finalComputedValue: (v: Option) => {\n            if (!v) return;\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\n                \"Reason for not giving self-test kit\",\n                v.value\n              ),\n            };\n          },\n        },\n        {\n          id: \"frs_given\",\n          helpText: \"FRS Given\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => false,\n          condition: (f: any) => {\n            return (\n              f.contact_consent === \"No\" ||\n              f.ipv_status.value === \"Risk\"\n            );\n          },\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueCoded(\"FRS given\", v),\n          }),\n          options: () => {\n            return [\n              {\n                label: \"Was FRS given to the Index client for their contact?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"reason_for_not_giving_frs\",\n          helpText: \"Reason for not providing FRS\",\n          type: FieldType.TT_TEXT,\n          isRequired: () => true,\n          condition: (f: any) => f.frs_given === \"No\",\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueText(\n              \"Reason for not giving FRS\",\n              v.value\n            ),\n          }),\n        },\n        {\n          id: \"contact_on_art\",\n          helpText: \"On ART\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => false,\n          condition: (f: any) =>\n            f.contact_hiv_status.value &&\n            f.contact_hiv_status.value === \"Positive\",\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueCoded(\n              \"Contact ever registered at ART clinic\",\n              v\n            ),\n          }),\n          options: () => {\n            return [\n              {\n                label: \"Is the Contact on ART?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"index_contact\",\n          helpText: \"Contact Indexing\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"No\",\n          options: () => {\n            return [\n              {\n                label: \"Do you want to convert the contact to an index client?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueCoded(\"Index patient\", v),\n          }),\n        },\n        {\n          id: \"art_start_location\",\n          helpText: \"Contact ART start location?\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => false,\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueText(\n              \"Contact location of ART initiation\",\n              v.value\n            ),\n          }),\n          options: () => {\n            return this.mapStrToOptions([\n              \"Same Health Facility\",\n              \"Other Health Facility\",\n              \"Unknown\"\n            ]);\n          },\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"Yes\",\n        },\n        ...generateDateFields(\n          {\n            id: \"date_started_art\",\n            helpText: \"Contact Art Start\",\n            required: false,\n            condition: (f: any) =>\n              f.contact_on_art && f.contact_on_art === \"Yes\",\n            minDate: () => this.facts.birthDate,\n            maxDate: () => this.service.getDate(),\n            estimation: {\n              allowUnknown: true\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                isEstimate,\n                obs: this.buildDateObs(\n                  \"Contact Date ART started\",\n                  date,\n                  isEstimate\n                ),\n              };\n            },\n          },\n          this.service.getDate()\n        ),\n        {\n          id: \"contact_art_number\",\n          helpText: \"Contact ART number\",\n          type: FieldType.TT_TEXT,\n          isRequired: () => false,\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"Yes\",\n          beforeNext: async (v: any) => {\n            if(v.value == null || v.value.trim() == \"\" || v.value == 'Unknown'){\n              await infoActionSheet(\n                \"Contact ART number\",\n                \"Contact ART status\",\n                \"Since  an ART number has not been submitted for this HIV+ contact. The case will remian open, until the ART number is added.\",\n                [\n                  {\n                    name: 'OK',\n                    slot: 'start',\n                    color: 'success'\n                  }\n                ],\n                'primary',\n                false\n              )\n            } else {\n              await infoActionSheet(\n                \"Contact ART number\",\n                \"Contact ART status\",\n                \"The contact is already on ART, therefore does not need follow up. This contact case will be closed.\",\n                [\n                  {\n                    name: 'OK',\n                    slot: 'start',\n                    color: 'success'\n                  }\n                ],\n                'primary',\n                false\n              )\n            }\n            return true\n          },\n          computedValue: (d: Option) => ({\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Contact ART number at previous location\",\n              d.value\n            ),\n          }),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./HtsContact.vue?vue&type=template&id=067b605b&ts=true\"\nimport script from \"./HtsContact.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsContact.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Region of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'District of current residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'District of current residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'TA of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Village of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}