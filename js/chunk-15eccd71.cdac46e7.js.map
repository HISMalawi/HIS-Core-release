{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/Appointment.vue?909f","webpack:///./src/apps/ART/views/encounters/Appointment.vue","webpack:///./src/apps/ART/views/encounters/Appointment.vue?a8e2","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/ART/services/appointment_service.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","appointment","watch","ready","handler","this","AppointmentService","patientID","providerID","getAppointmentField","immediate","methods","_","computedData","createEncounter","saveObservationList","resolveObs","printer","PatientPrintoutService","appsThatDoNotPrint","includes","App","getActiveApp","applicationName","printVisitSummaryLbl","nextTask","d","date","HisDate","toStandardHisDisplayFormat","exists","strOne","strTwo","RegExp","test","clinicDays","clinicHolidays","appointmentLimit","nextAppointment","drugRunoutDate","dateAppointments","weekDays","id","helpText","type","FieldType","TT_DATE_PICKER","init","async","res","getNextAppointment","appointment_date","drugs_run_out_date","e","console","warn","delayPromise","alertConfirmation","gotoPatientDashboard","limitRes","ART_GLOBAL_PROP","parseInt","onValue","undefined","getDailiyAppointments","Array","isArray","length","header","cancelBtnLabel","confirmBtnLabel","isEmpty","patient","getAge","adultClinicDays","peadsClinicDays","dayjs","day","validation","val","Validation","required","defaultValue","computedValue","buildValueDate","value","config","hiddenFooterBtns","minDate","maxDate","supValue","infoItems","label","__exports__","FlowState","dformat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","offlineID","facts","age","gender","isEnrolledInProgam","formLabel","created","$route","params","patient_id","goOffline","initOfflineData","Store","get","then","patientData","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","log","computed","patientDashboardUrl","isOnline","isOfflineMode","getOfflinePerson","person","birthdate","ProgramService","getSessionDate","diff","saveObsOffline","encounterTypeID","formdata","obs","labOrders","status","observations","uploadStatus","meta","enc","AppEncounterService","callback","error","Error","formData","skipNextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","findings","matchToGuidelines","index","finding","program","programID","getProgramID","toastDanger","getCachedApiDate","getBirthdate","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","concat","Promise","all","inArray","arr","expression","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","constructor","super","getJson","paginate","isCondition","ignored","prop","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-15eccd71.cdac46e7.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { alertConfirmation } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue';\nimport {AppointmentService} from '@/apps/ART/services/appointment_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport App from \"@/apps/app_lib\"\nimport { isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\nimport ART_GLOBAL_PROP from \"@/apps/ART/art_global_props\"\nimport dayjs from \"dayjs\";\nimport { delayPromise } from \"@/utils/Timers\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    appointment: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.appointment = new AppointmentService(this.patientID, this.providerID)\n          this.fields = [\n            this.getAppointmentField()\n          ]\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      await this.appointment.createEncounter()\n      await this.appointment.saveObservationList(\n        (await this.resolveObs(computedData))\n      )\n      const printer = new PatientPrintoutService(this.patientID);\n      // TODO: remove the program checks here\n      const appsThatDoNotPrint = ['CxCa', 'ANC']\n      if(!appsThatDoNotPrint.includes(`${App.getActiveApp()?.applicationName}`)) {\n        await printer.printVisitSummaryLbl();\n      }\n      this.nextTask()\n    },\n    getAppointmentField(): Field {\n      const d = (date: string) => HisDate.toStandardHisDisplayFormat(date)\n      const exists = (strOne: string, strTwo: string) => new RegExp(strOne, 'i').test(`${strTwo}`)\n      let clinicDays = ''\n      let clinicHolidays = ''\n      let appointmentLimit = -1\n      let nextAppointment = this.appointment.date\n      let drugRunoutDate: string | null = null\n      const dateAppointments: Record<string, number> = {}\n      const weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n      return {\n        id: \"set_appointment\",\n        helpText: \"Appointments booking\",\n        type: FieldType.TT_DATE_PICKER,\n        init: async () => {\n          try {\n            const res = await this.appointment.getNextAppointment()\n            nextAppointment = res.appointment_date\n            drugRunoutDate = res.drugs_run_out_date\n          } catch(e) {\n            console.warn(e)\n            await delayPromise(400)\n            if (!(await alertConfirmation('Next appointment/drug-runout date is not available, do you want to proceed anyway?'))) {\n              this.gotoPatientDashboard()\n              return true\n            }\n          }\n          const limitRes = (await ART_GLOBAL_PROP.appointmentLimit());\n          appointmentLimit = limitRes ? parseInt(limitRes) : 0\n          return true\n        },\n        onValue: async (date: string) => {\n          if (dateAppointments[date] === undefined) {\n            const res = await AppointmentService.getDailiyAppointments(date)\n            dateAppointments[date] = Array.isArray(res) ? res.length : 0\n          }\n          if (appointmentLimit >= 1 && dateAppointments[date] >= appointmentLimit) {\n            if((await alertConfirmation(\n              `${dateAppointments[date]} clients were booked on ${d(date)}`, \n              {\n                header: `APPOINTMENT LIMIT (${appointmentLimit}) REACHED`,\n                cancelBtnLabel: \"Proceed\",\n                confirmBtnLabel: \"New date\"\n              }\n            ))) return false;\n          }\n          // Check clinic holidays\n          if (isEmpty(clinicHolidays)) {\n            clinicHolidays = await ART_GLOBAL_PROP.clinicHolidays()\n          }\n          if(exists(date, clinicHolidays)) {\n            if (!(await alertConfirmation(`${d(date)} is a clinic holiday, do you want to set an appointment?`))) \n              return false;\n          }\n          //Check clinic days\n          if (isEmpty(clinicDays)) {\n            clinicDays = this.patient.getAge() >= 18\n              ? (await ART_GLOBAL_PROP.adultClinicDays())\n              : (await ART_GLOBAL_PROP.peadsClinicDays())\n          }\n          if(!exists(weekDays[dayjs(date).day()], clinicDays)){\n            if(!(await alertConfirmation(`${d(date)} is not a clinic day. Do you want to proceed with this date?`))) \n              return false;\n          }\n          return true\n        },\n        validation: (val: any) => Validation.required(val),\n        defaultValue: () => nextAppointment,\n        computedValue: (date: Option) => {\n          return [\n            this.appointment.buildValueDate('Appointment date', date.value),\n            this.appointment.buildValueDate('Estimated date', nextAppointment)\n          ]\n        },\n        config: {\n          hiddenFooterBtns: [\n            'Clear'\n          ],\n          minDate: () => this.appointment.date,\n          maxDate: () => drugRunoutDate,\n          supValue: (date: string) => `${dateAppointments[date]}`,\n          infoItems: (date: string) => {\n            return [\n              { \n                label: 'Medication Run out Date',\n                value: drugRunoutDate ? d(drugRunoutDate) : 'Not available'\n              },\n              {\n                label: 'User set appointment date',\n                value: d(date)\n              },\n              {\n                label: 'Appointments',\n                value: dateAppointments[date]\n              },\n              {\n                label: 'Appointment limit (per/day)',\n                value: appointmentLimit\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n});\n","import { render } from \"./Appointment.vue?vue&type=template&id=1bcf839c&ts=true\"\nimport script from \"./Appointment.vue?vue&type=script&lang=ts\"\nexport * from \"./Appointment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const { getOfflinePerson } = Offline()\n            const person = getOfflinePerson(this.offlineID)\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        saveObsOffline(encounterTypeID: number, formdata: any, obs: any, labOrders=undefined as any, status='Pending') {\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: encounterTypeID,\n                meta: formdata,\n                labOrders\n            })\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            try {\n                const enc = new AppEncounterService(\n                    this.patientID,\n                    params.encounterTypeID, \n                    this.providerID\n                )\n                if ((await enc.createEncounter())) {\n                    if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                        status = 'Success'\n                    }\n                }\n                if (typeof params.callback === 'function') {\n                    await params.callback(enc)\n                }\n            } catch (e) {\n                if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                    status = 'NetworkError'\n                } else {\n                    status = 'Exception'\n                }\n                console.error(`${e}`)\n            }\n            if (status === 'Exception') {\n                throw new Error('Unable to proceed!')\n            }\n            this.saveObsOffline(\n                params.encounterTypeID, \n                params.formData,\n                obs,\n                params.labOrders,\n                status\n            )\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class AppointmentService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 7, providerID);\n  }\n\n  async getNextAppointment() {\n    const programID = AppEncounterService.getProgramID();\n    return AppEncounterService.getJson(`/programs/${programID}/patients/${this.patientID}/next_appointment_date`, {date: this.date})\n  }\n  static async getDailiyAppointments(date: any) {\n    const programID = AppEncounterService.getProgramID();\n    return AppEncounterService.getJson(`/programs/${programID}/booked_appointments`, {date: date, paginate: false})\n  }\n\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}