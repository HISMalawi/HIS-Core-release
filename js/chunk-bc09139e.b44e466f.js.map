{"version":3,"sources":["webpack:///./src/apps/ART/services/stock_service.ts","webpack:///./src/apps/ART/services/dispensation_service.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/ART/views/encounters/Dispensing.vue?a29c","webpack:///./src/apps/ART/views/encounters/Dispensing.vue","webpack:///./src/apps/ART/views/encounters/Dispensing.vue?5336","webpack:///./src/utils/GuidelineEngine.ts"],"names":["StockService","Service","constructor","super","drugId","stock","this","getJson","length","reduce","accum","pharm","current_quantity","DRUG_PACK_SIZES","DispensationService","AppEncounterService","patientID","providerID","drugHistory","currentDrugOrder","useDrugManagement","setIsDrugManagementEnabled","isEnabled","ART_PROP","drugManagementEnabled","getDrugHistory","getCurrentOrder","buildDispensations","orderId","tabs","totalPacks","dispensations","i","push","date","quantity","saveDispensations","postJson","getProgramID","void","res","DrugOrderService","getDrugOrderHistory","e","console","warn","getDrugOrders","drugs","map","async","d","fetchAvailableDrugStock","drug","drug_id","Promise","all","getDrugPackSizes","calcCompletePack","units","drugOrderBarcodes","barcodes","sort","a","b","parseInt","completePack","orders","order","getSessionDate","pageSize","drugID","params","patientId","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","facts","age","gender","isEnrolledInProgam","formLabel","ready","created","$route","patient_id","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","log","computed","cancelDestination","patientDashboardUrl","methods","isOnline","isOfflineMode","getOfflinePerson","person","birthdate","dayjs","ProgramService","diff","saveObsOffline","encounterTypeID","formdata","obs","labOrders","status","observations","id","uploadStatus","meta","resolveObs","computedData","enc","createEncounter","saveObservationList","callback","test","error","Error","formData","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","toastDanger","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","usernameA","usernameB","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","path","loadingController","create","backdropDismiss","message","present","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","cur","Array","isArray","concat","inArray","arr","expression","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","_component_his_standard_form","_resolveComponent","mixins","EncounterMixinVue","dispensation","watch","handler","getFields","immediate","item","dispenses","forEach","packs","order_id","loadDrugHistory","dateA","Date","start_date","dateB","medication","amount","buildOrderOptions","available_stock","calculateCompletePack","getPackSizesRows","availableStock","packSize","Math","floor","parseFloat","amount_needed","isDoneDispensing","o","every","isOk","totalTabs","amountNeeded","percentageGiven","alertConfirmation","helpText","FieldType","TT_DISPENSATION_INPUT","init","loadCurrentDrugOrder","onValueUpdate","l","onValue","isBarcodeScanned","voided","voidOrder","isValidDispensation","dispensed","toastWarning","config","isDrugManagementEnabled","medicationHistory","buildMedicationHistory","toolbarInfo","getFullName","getGender","hiddenFooterBtns","isCondition","ignored","undefined","prop","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"gOAEM,MAAOA,UAAqBC,OAC9BC,cACIC,QAGJ,qCAAqCC,GACjC,MAAMC,QAAcC,KAAKC,QAAQ,iBAAkB,CAAE,QAAWH,IAChE,GAAIC,GAASA,EAAMG,OAAS,EACxB,OAAOH,EAAMI,OAAO,CAACC,EAAeC,IAAeD,EAAQC,EAAMC,iBAAkB,I,gBCLxF,MAAMC,EAAuC,CAChD,GAAM,CAAE,IACR,GAAM,CAAE,IACR,GAAM,CAAE,IACR,GAAM,CAAE,GAAI,GAAI,GAAI,KACpB,GAAM,CAAE,IACR,GAAM,CAAE,IACR,GAAM,CAAE,KACR,GAAM,CAAE,IACR,GAAM,CAAE,KACR,IAAO,CAAE,GAAI,GAAI,IACjB,IAAO,CAAE,GAAI,GAAI,IACjB,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,GAAI,GAAI,IACjB,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,GAAI,GAAI,IACjB,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,GAAG,GAAG,IACf,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,GAAI,IACb,KAAQ,CAAE,GAAG,GAAG,IAChB,KAAQ,CAAE,IACV,KAAQ,CAAE,IACV,KAAQ,CAAE,IACV,KAAQ,CAAC,EAAG,EAAG,KAGb,MAAOC,UAA4BC,OAIrCb,YAAYc,EAAmBC,GAC3Bd,MAAMa,EAAW,GAAIC,GAAW,yIAChCX,KAAKY,YAAc,GACnBZ,KAAKa,iBAAmB,GACxBb,KAAKc,mBAAoB,EAG7BC,2BAA2BC,GACvBhB,KAAKc,kBAAoBE,EAG7B,kCACIhB,KAAKc,wBAA0BG,OAASC,wBAG5CC,iBACI,OAAOnB,KAAKY,YAGhBQ,kBACI,OAAOpB,KAAKa,iBAGhBQ,mBAAmBC,EAAiBC,EAAcC,GAC9C,MAAMC,EAAgB,GACtB,IAAI,IAAIC,EAAE,EAAGA,EAAIF,EAAYE,IACzBD,EAAcE,KAAK,CACf,cAAiBL,EACjBM,KAAM5B,KAAK4B,KACXC,SAAWN,EAAOC,IAG1B,OAAOC,EAGXK,kBAAkBL,GACd,OAAOhB,OAAoBsB,SAAS,iBAAkB,CAClDN,gBACA,WAAchB,OAAoBuB,iBAI1C,gBAAgBV,GACZ,OAAOb,OAAoBwB,KAAK,kBAAkBX,EAAW,IAGjE,wBACI,IACI,MAAMY,QAAYC,OAAiBC,oBAAoBpC,KAAKU,WACxDwB,IAAKlC,KAAKY,YAAcsB,GAC9B,MAAOG,GACLC,QAAQC,KAAKF,IAIrB,6BACI,MAAMH,QAAYC,OAAiBK,cAAcxC,KAAKU,WACtD,GAAIwB,EAAK,CACL,GAAIlC,KAAKc,kBAAmB,CACxB,MAAM2B,EAAQP,EAAIQ,IAAIC,UAClBC,EAAE,yBAA2BlD,EAAamD,wBAAwBD,EAAEE,KAAKC,SAClEH,IAGX,YADA5C,KAAKa,uBAAyBmC,QAAQC,IAAIR,IAG9CzC,KAAKa,iBAAmBqB,GAIhCgB,iBAAiBpD,GACb,OAAIA,KAAUS,EACHA,EAAgBT,GAEpB,CAAC,GAAI,GAAI,IAIpBqD,iBAAiBL,EAAWM,GAExB,MAAMC,EAAoBP,EAAKQ,SAASC,KAAK,CAACC,EAAQC,IAAWD,EAAEjC,KAAOkC,EAAElC,MAC5E,GAAgC,GAA5B8B,EAAkBnD,QAAwB,GAATkD,EAAc,OAAOA,EAC1D,IAAK,MAAM1B,KAAK2B,EAAmB,CAC/B,MAAM,KAAE9B,GAAS8B,EAAkB3B,GACnC,GAAIgC,SAASnC,IAAS6B,EAAO,OAAO7B,EAExC,MAAMoC,EAAeD,SAASL,EAAkBA,EAAkBnD,OAAS,GAAGqB,MAC9E,OAAOoC,K,oCCrIf,kDAEM,MAAOxB,UAAyBxC,OAClCC,cACIC,QAGJ,cAAc+D,GACV,OAAO5D,KAAK+B,SAAS,cAAe6B,GAGxC,gCAAgCA,GAC5B,OAAO5D,KAAK+B,SAAS,gBAAiB,CAClC,WAAc/B,KAAKgC,eACnBP,cAAemC,EAAOlB,IAAKmB,IAAU,CACjC,KAAQ7D,KAAK8D,iBACb,cAAiBD,EAAM,YACvB,SAAYA,EAAM,iBAK9B,2BAA2BnD,GACvB,OAAOV,KAAKC,QAAQ,cAAe,CAAE,WAAcS,IAGvD,qBAAqBA,GACjB,OAAOV,KAAKC,QAAQ,cAAe,CAC/B,WAAcS,EACd,KAAQV,KAAK8D,iBACb,WAAc9D,KAAKgC,iBAI3B,wBAAwBtB,EAAmBqD,EAAS,KAChD,OAAO/D,KAAKC,QAAQ,cAAe,CAC/B,WAAcS,EACd,WAAcf,OAAQqC,eACtB,UAAa+B,IAIrB,4BAA4BrD,GACxB,OAAOV,KAAKC,QAAQ,YAAYS,wBAAiC,CAC7D,KAAQV,KAAK8D,iBACb,WAAc9D,KAAKgC,iBAI3B,sBAAsBtB,EAAmBsD,EAAgBpC,EAAK5B,KAAK8D,kBAC/D,MAAMG,EAAS,CAAE,QAAWD,EAAQ,KAAQpC,GAC5C,OAAO5B,KAAKC,QAAQ,YAAYD,KAAKgC,2BAA2BtB,eAAwBuD,GAG5F,yBAAyBC,EAAmBD,GACxC,OAAOjE,KAAKC,QAAQ,eAAgB,CAChC,WAAciE,EACd,WAAclE,KAAKgC,kBAChBiC,O,oECvDHE,E,yEAAZ,SAAYA,GACRA,iCACAA,+CACAA,uDACAA,6CACAA,yBACAA,kBANJ,CAAYA,MAAS,KAQrB,MAAMC,EAAWxB,GAAcyB,OAAQC,2BAA2B1B,GAErD2B,EAA2D,CACpE,qEAAsE,CAClEC,SAAU,EACVC,QAAS,CACLC,MAAO/B,OAASgC,uBACZ,MAAMC,QAAeC,eACjB,6BACA,mBAAmBT,EAAQO,GAC3B,qEACA,CACI,CAAEG,KAAM,SAAUC,KAAM,MAAOC,MAAO,WACtC,CAAEF,KAAM,iBAAkBC,KAAM,MAAOC,MAAO,WAC9C,CAAEF,KAAM,kBAAmBC,KAAM,MAAOC,MAAO,YAGvD,MAAkB,WAAXJ,EACDT,EAAUc,wBACC,mBAAXL,EACAT,EAAUe,uBACVf,EAAUgB,WAGxBC,WAAY,CACRC,QAAQA,GACJ,MAAmB,iBAAZA,GAEXV,iBAAiBW,GAAmB,YAAEC,IAClC,OAAOA,GAAeD,KAIlC,+DAAgE,CAC5Dd,SAAU,EACVC,QAAS,CACLC,MAAO/B,OAAS6C,YAAWD,kBACvB,MAAMX,QAAeC,eACjB,6BAA8B,GAC9B,gBAAgBT,EAAQmB,iCAA2CnB,EAAQoB,KAC3E,CACI,CAAEV,KAAM,SAAUC,KAAM,MAAOC,MAAO,UACtC,CAAEF,KAAM,sBAAuBC,KAAM,MAAOC,MAAO,aAG3D,MAAkB,wBAAXJ,EACDT,EAAUsB,oBACVtB,EAAUc,0BAGxBG,WAAY,CACRI,UAAUA,GAAmB,YAAED,IAC3B,OAAOA,EAAcC,KAIjC,oDAAqD,CACjDhB,SAAU,EACVC,QAAS,CACLiB,UAAW/C,OAASgD,YAAWC,gBAAeL,cAAaM,cACvD,MAAMC,QAAcC,eAChB,gCAAgCH,EAChC,QAAQxB,EAAQmB,iBAA2BnB,EAAQyB,KACnDF,EACA,CACI,CAAEb,KAAM,SAAUE,MAAO,SAAUD,KAAM,QAASiB,KAAM,WACxD,CAAElB,KAAM,UAAWC,KAAM,MAAOiB,KAAM,YAG9C,MAAwB,WAAjBF,EAAMlB,OACP,CAAEqB,OAAQ,EAAGC,UAAW/B,EAAUc,yBAClC,CAAEgB,MAAOH,EAAMJ,UAAWQ,UAAW/B,EAAUgC,gBAG7Df,WAAY,CACRgB,UAAUC,GACN,OAAOA,M,6GCvERC,+BAAgB,CAC3BC,WAAY,CAAEC,wBACdC,KAAM,KAAM,CACRC,UAAW,KACXC,QAAS,GACTC,OAAQ,GACRlG,UAAW,GACXC,YAAa,EACbgF,UAAW,GACXkB,MAAO,CACHC,KAAM,EACNC,OAAQ,GACRvB,UAAW,GACXD,YAAa,GACbM,QAAS,GACTmB,oBAAoB,EACpBpB,cAAe,MACfD,UAAW,GACXS,WAAW,EACXf,QAAS,GACTV,iBAAkB,IAEtBsC,UAAW,GACXC,OAAO,IAEXC,UACQnH,KAAKoH,OAAOnD,OAAOoD,aACnBrH,KAAK0G,UAAY1G,KAAKoH,OAAOnD,OAAOoD,WACpCrH,KAAKU,UAAYgD,SAAS,GAAG1D,KAAKoH,OAAOnD,OAAOoD,YAC5CrH,KAAKsH,YACLtH,KAAKuH,kBAELC,OAAMC,IAAI,iBAAkB,CAAE/G,UAAWV,KAAKU,YACzCgH,KAAKC,IACF3H,KAAK2G,QAAUgB,EACVC,qBAAQ5H,KAAK2G,UACdkB,iBAAUC,aAAa9H,KAAK2G,SAEhC3G,KAAK+H,oBAAoBL,KAAK,KAC1B1H,KAAKgI,2BAA2BN,KAAK,KACjC1H,KAAKkH,OAAQ,IACde,MAAO5F,GAAMC,QAAQ4F,IAAI7F,MAC7B4F,MAAM,KACDjI,KAAKsH,aACLtH,KAAKuH,wBAOjCY,SAAU,CACNC,oBAA8B,OAAOpI,KAAKqI,wBAE9CC,QAAS,CACLhB,YACI,OAAQiB,OAAStC,OAASuC,OAAcvC,OAE5CsC,WACI,OAAOA,OAAStC,OAEpBuC,gBACI,OAAOA,OAAcvC,OAEzBsB,kBACI,MAAM,iBAAEkB,GAAqBZ,iBACvBa,EAASD,EAAiBzI,KAAK0G,WAChCgC,IACL1I,KAAK6G,MAAMrB,UAAYkD,EAAOC,UAC9B3I,KAAK6G,MAAMC,IAAM8B,IAAMC,OAAe/E,kBAAkBgF,KACpD9I,KAAK6G,MAAMrB,UAAW,SAE1BxF,KAAK6G,MAAME,OAAS2B,EAAO3B,OAC3B/G,KAAKkH,OAAQ,IAEjB6B,eAAeC,EAAyBC,EAAeC,EAAUC,EAA4BC,EAAO,WAChGvB,iBAAUkB,eAAe,CACrBM,aAAcH,EACdI,GAAItJ,KAAK0G,UACT6C,aAAcH,EACdxD,cAAe5F,KAAKoH,OAAOtC,KAC3BkE,gBAAiBA,EACjBQ,KAAMP,EACNE,eAGR,kCAAkClF,EAAO,IACrC,MAAMiF,QAAYlJ,KAAKyJ,WAAWxF,EAAOyF,cACzC,IAAIN,EAAS,UACb,IACI,MAAMO,EAAM,IAAIlJ,OACZT,KAAKU,UACLuD,EAAO+E,gBACPhJ,KAAKW,kBAEEgJ,EAAIC,yBACAD,EAAIE,oBAAoBX,KAC/BE,EAAS,WAGc,oBAApBnF,EAAO6F,gBACR7F,EAAO6F,SAASH,GAE5B,MAAOtH,GAED+G,EADA,gCAAgCW,KAAK,GAAG1H,GAC/B,eAEA,YAEbC,QAAQ0H,MAAM,GAAG3H,GAErB,GAAe,cAAX+G,EACA,MAAM,IAAIa,MAAM,sBAEpBjK,KAAK+I,eACD9E,EAAO+E,gBACP/E,EAAOiG,SACPhB,EACAjF,EAAOkF,UACPC,GAECnF,EAAOkG,cAAcnK,KAAKoK,YAEnCC,aAAaC,EAAkBrG,EAAO,MAClC,MAAMsG,EAAc,GAmBpB,GAlBAA,EAAOpG,EAAUgC,cAAiBT,IAC9B,MAAQ8E,GAAa9E,EAAU+E,MAAM,KAC/BC,EAAWC,kBAAK3K,KAAK2F,UAAW,CAAE6E,aAExC,OADIE,IAAU1K,KAAKW,WAAa+J,EAASE,WAClCzG,EAAUgB,UAErBoF,EAAOpG,EAAUsB,qBAAuB,KACpCzF,KAAK6K,QAAQlJ,KAAK,kDAAkD3B,KAAKU,WAClEyD,EAAU2G,MAErBP,EAAOpG,EAAUe,wBAA0B,KACvClF,KAAK6K,QAAQlJ,KAAK,qBAAqB3B,KAAKU,WACrCyD,EAAU2G,MAErBP,EAAOpG,EAAUc,yBAA2B,KACxCjF,KAAK+K,uBACE5G,EAAU2G,MAEjBR,KAASC,EACT,OAAOA,EAAOD,GAAOrG,IAG7B,iCACI,MAAM+G,EAAWC,eAAkBjL,KAAK6G,MAAOtC,GAC/C,IAAI,MAAM2G,KAASF,EAAU,SACzB,MAAMG,EAAUH,EAASE,GACzB,GAAW,OAAPC,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAS1G,eAAO,OAAhB,EAAkBC,MAAO,OACzB,MAAM0E,EAASpJ,KAAKqK,mBAA2B,OAAPc,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAS1G,eAAO,WAAT,EAAP,EAAkBC,MAAM1E,KAAK6G,SACrE,GAAIuC,IAAWjF,EAAU2G,KAAM,OAEnC,GAAW,OAAPK,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAS1G,eAAO,OAAhB,EAAkBiB,UAAW,OAC7B,MAAMA,QAAyB,OAAPyF,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAS1G,eAAO,WAAT,EAAP,EAAkBiB,UAAU1F,KAAK6G,QACzD7G,KAAKqK,aAAa3E,EAAUQ,UAAWR,EAAUO,UAI7D,0BACI,IACI,MAAMmF,QAAgB5D,OAAMC,IAAI,kBAAmB,CAAE/G,UAAWV,KAAKU,YACrEV,KAAK6G,MAAMG,mBAAqBoE,EAAQC,YAAcxC,OAAe7G,eACrEhC,KAAK6G,MAAMxB,QAAU+F,EAAQ/F,QAC7BrF,KAAK6G,MAAMlC,iBAAmByG,EAAQ9F,UACxC,MAAOjD,GACLC,QAAQ0H,MAAM3H,GACdiJ,eAAY,GAAGjJ,GAEnBrC,KAAK6G,MAAMtB,YAAcsD,OAAe/E,iBACxC9D,KAAK6G,MAAMhB,QAAUgD,OAAe0C,mBACpCvL,KAAK6G,MAAMT,UAAYyC,OAAexC,QACtCrG,KAAK6G,MAAMrB,UAAYxF,KAAK2G,QAAQ6E,eACpCxL,KAAK6G,MAAMC,IAAM9G,KAAK2G,QAAQ8E,SAC9BzL,KAAK6G,MAAMjB,cAAgB5F,KAAKoH,OAAOtC,KACjC9E,KAAKoH,OAAOtC,KAAK4G,WAAWC,cAC5B,MACF9C,OAAexC,UACfrG,KAAK2F,gBAAkB6B,OAAMC,IAAI,aACjCzH,KAAK6G,MAAMlB,UAAY3F,KAAK2F,UACvBpC,KAAK,CAACC,EAAQC,KACX,MAAMmI,EAAYpI,EAAEgH,SAASmB,cACvBE,EAAYpI,EAAE+G,SAASmB,cAC7B,OAAOC,EAAYC,GAAa,EAAID,EAAYC,EAAa,EAAI,IAEpEnJ,IAAKoJ,IAAU,MACZ,IAAIhH,EAAO,GAAGgH,EAAEtB,SAChB,IAAK5C,qBAAS,OAADkE,QAAC,IAADA,GAAS,QAAR,EAADA,EAAGpD,cAAM,WAAR,EAAD,EAAWqD,OAAQ,OAC5B,MAAQC,IAAuB,QAAR,EAAAF,EAAEpD,cAAM,aAAR,EAAUqD,QAAS,GAC1CjH,GAAQ,KAAKkH,EAAWC,cAAcD,EAAWE,eAErD,OAAOpH,MAIvBqH,SAASC,EAAeC,EAAM,IAC1B,MAAO,CACHD,QACAnG,MAAOmG,EACPC,UAGRC,gBAAgBC,GACZ,OAAOA,EAAM7J,IAAIhB,GAAkB,kBAANA,GAA+B,kBAANA,EAC/C,CAAE0K,MAAO1K,EAAGuE,MAAOvE,GAAMA,IAGpC2G,sBACI,MAAO,sBAAsBrI,KAAKoH,OAAOnD,OAAOoD,YAEpD0D,uBACI,OAAO/K,KAAK6K,QAAQlJ,KAAK,CAAC6K,KAAMxM,KAAKqI,yBAEzC,wBACWoE,OAAkBC,OAAO,CAC5BC,iBAAiB,EACjBC,QAAS,0BACTC,UACJ,IACI,MAAMvD,EAAKtJ,KAAK0G,WAAa1G,KAAKU,gBAC5B0J,eAASd,EAAItJ,KAAK6K,QAAS7K,KAAKoH,QACxC,MAAO/E,GACLC,QAAQ0H,MAAM3H,GAElBoK,OAAkBK,SAASpF,KAAKqF,GAAKA,GAAKN,OAAkBO,YAEhEC,eACI,MAAO,CACH,CAAEb,MAAO,MAAOnG,MAAO,OACvB,CAAEmG,MAAO,KAAMnG,MAAO,QAG9BiH,cAAcd,EAAeC,EAAW,IACpC,MAAO,CACHD,QACAnG,MAAO,GACPoG,MAAO,IACAA,EACHc,OAAQnN,KAAKiN,kBAIzBG,WAAWC,GACP,OAAOA,EAAQ3K,IAAK4K,IACT,CAAElB,MAAOkB,EAAQrH,MAAOqH,MAGvCC,qBAAqBF,GACjB,MAAMG,EAAkB,GACxB,IAAI,MAAMF,KAAUD,GACS,mBAAdC,EAAO,IACVA,EAAO,KAGfE,EAAM7L,KAAK3B,KAAKmM,SAASmB,EAAO,KAEpC,OAAOE,GAEXC,sBACI,MAAO,CACH,CAAErB,MAAO,MAAOnG,MAAO,OACvB,CAAEmG,MAAO,KAAMnG,MAAO,MACtB,CAAEmG,MAAO,UAAWnG,MAAO,aAGnCwD,WAAWP,EAAUwE,EAAI,IACrB,MAAMP,EAAcQ,OAAOR,OAAOjE,GAC7B0E,OAAQhL,GAAWA,IAAMA,EAAE8K,MAAQA,GAAe,KAARA,IAC1CvN,OAAO,CAACC,EAAYyN,KACjB,MAAMpH,EAAOoH,EAAI3E,IAAM2E,EAAI3E,IAAM2E,EAQjC,OAPIC,MAAMC,QAAQtH,GACdrG,EAAQA,EAAM4N,OAAOvH,GACE,oBAATA,EACdrG,EAAMuB,KAAK8E,KAEXrG,EAAMuB,KAAK8E,GAERrG,GACJ,IACX,OAAO4C,QAAQC,IAAIkK,IAEvBc,QAAQC,EAAiBC,GACrB,IACI,OAAOD,EAAIN,OAAQlM,GAAWyM,EAAWzM,IAAIxB,OAAS,EACxD,MAAOmC,GACL,OAAO,IAGf+L,eAAehJ,GACX,IACI,IAAI,MAAM1D,KAAK0D,EAAY,CACvB,MAAMiJ,EAAYjJ,EAAW1D,KAE7B,GAAI2M,EAAW,OAAOA,GAE5B,MAAOhM,GACL,MAAO,CAACA,QCxTxB,MAAMiM,EAAc,EAEL,U,kDCHT,SAAUC,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQC,yBAAcC,yBAAaC,qCAAyBR,EAAKS,UAAW,CAC1ErI,OAAQ4H,EAAK5H,OACbsI,YAAaV,EAAKU,YAClBC,YAAaX,EAAKW,YAClBC,sBAAuBZ,EAAKY,sBAC5BC,WAAYb,EAAKc,SACjBA,SAAUd,EAAKe,eACfC,UAAWhB,EAAKiB,SACf,KAAM,GAAI,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN5FnJ,+BAAgB,CAC3BxB,KAAM,kBACNyB,WAAY,CAAEmJ,wBACdC,MAAO,CACH,WACA,WAEJlJ,KAAM,KAAM,CACRwI,SAAU,sBAEdW,MAAO,CACHL,eAAgB,CACZM,KAAMC,UAEVZ,YAAa,CACTW,KAAME,QACNC,SAAS,GAEbb,YAAa,CACTU,KAAMI,QAEVrJ,OAAQ,CACJiJ,KAAMlC,OACNuC,UAAU,GAEdd,sBAAuB,CACnBS,KAAMI,OACNC,UAAU,IAGlB5H,QAAS,CACLgH,SAASpF,EAAeR,GACpB1J,KAAKmQ,MAAM,WAAYjG,EAAUR,IAErC+F,QAAQ/N,GACJ1B,KAAKmQ,MAAM,UAAWzO,O,qBCnClC,MAAM4M,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD,U,2DCLT,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMuB,EAA+BC,8BAAkB,qBAEvD,OAAQvB,yBAAcC,yBAAaqB,EAA8B,CAC/DxJ,OAAQ4H,EAAK5H,OACbsI,aAAa,EACbE,sBAAuBZ,EAAKpG,mBAC3B,KAAM,EAAG,CAAC,SAAU,0B,kGCEV9B,+BAAgB,CAC3BgK,OAAQ,CAACC,QACT9J,KAAM,KAAM,CACR+J,aAAc,KAElBC,MAAO,CACHvJ,MAAO,CACHwJ,QAAQxJ,GACAA,IACAlH,KAAKwQ,aAAe,IAAIhQ,OAAoBR,KAAKU,UAAWV,KAAKW,YACjEX,KAAK4G,OAAS5G,KAAK2Q,cAG3BC,WAAW,IAGnBtI,QAAS,CACLxG,kBAAkB+O,GACd,OAAO7Q,KAAKwQ,aAAa1O,kBAAkB9B,KAAKqB,mBAAmBwP,KAEvExP,mBAAmBwP,GAAY,MAC3B,IAAKjJ,qBAAkB,QAAX,EAACiJ,EAAKxE,aAAK,aAAV,EAAYyE,WAAY,CACjC,IAAIA,EAAiB,GAOrB,OANAD,EAAKxE,MAAMyE,UAAUC,QAAQ,EAAExP,EAAMyP,MACjCF,EAAY,IAAIA,KACb9Q,KAAKwQ,aAAanP,mBACjBwP,EAAKxE,MAAM4E,SAAU1P,EAAMyP,MAG5BF,EAEX,OAAO9Q,KAAKwQ,aAAanP,mBACrBwP,EAAKxE,MAAM4E,SAAUvN,SAASmN,EAAK5K,MAAMyF,YAAa,IAG9D,+BAEI,aADM1L,KAAKwQ,aAAaU,kBACjBlR,KAAKwQ,aAAarP,iBACpBoC,KAAK,CAACC,EAAQC,KACX,MAAM0N,EAAa,IAAIC,KAAK5N,EAAEK,MAAMwN,YAC9BC,EAAa,IAAIF,KAAK3N,EAAEI,MAAMwN,YACpC,OAAOC,EAAQH,IAElBzO,IAAKE,IAAM,CACR2O,WAAY3O,EAAEE,KAAKgC,KACnBlD,KAAMyC,OAAQC,2BAA2B1B,EAAEiB,MAAMwN,YACjDG,OAAQ5O,EAAEf,aAGtB4P,oBACI,OAAOzR,KAAKwQ,aAAapP,kBAAkBsB,IAAKE,IAAM,CAClDwJ,MAAOxJ,EAAEE,KAAKgC,KACdmB,MAAOrD,EAAEf,UAAY,EACrBwK,MAAO,CACH,MAASzJ,EACT,QAAWA,EAAEE,KAAKC,QAClB,SAAYH,EAAEiB,MAAMoN,SACpB,gBAAmBrO,EAAE8O,iBAAmB,IACxC,cAAiB1R,KAAK2R,sBAAsB/O,GAC5C,WAAc5C,KAAK4R,iBAAiBhP,EAAEE,KAAKC,QAASH,EAAE8O,iBAAmB,QAIrFE,iBAAiB9R,EAAgB+R,GAC7B,MAAMb,EAAQhR,KAAKwQ,aAAatN,iBAAiBpD,GACjD,OAAOkR,EAAMtO,IAAKoP,IACd,MAAMd,EAAQa,EAAiB,EAAKE,KAAKC,MAAMH,EAAiBC,GAAa,IAC7E,MAAO,CAACA,EAAUd,EAAO,EAAG,MAGpCW,sBAAsB9N,GAClB,MAAMT,EAAQ6O,WAAWpO,EAAMqO,gBAAkBrO,EAAMhC,UAAY,GACnE,OAAGuB,GAAS,EAAU,EACfpD,KAAKwQ,aAAarN,iBAAiBU,EAAOT,IAErD+O,iBAAiBvO,GACb,OAAOA,EAAOlB,IAAI0P,GAAgB,GAAXA,EAAEnM,OAAYoM,MAAMtC,UAE/C,0BAA0BzC,GACtB,IAAIgF,GAAO,EACX,MAAMC,EAAY7O,SAAS4J,EAAOrH,MAAMyF,YAClC8G,EAAelF,EAAOjB,MAAM,iBAC5BoG,EAAmBF,EAAYC,EAAgB,IASrD,OAPIC,EAAkB,MAClBH,QAAaI,eAAkB,8EAG/BD,EAAkB,MAClBH,QAAaI,eAAkB,8EAE5BJ,GAEX3B,YACI,MAAO,CACH,CACIrH,GAAI,YACJqJ,SAAU,eACV9C,KAAM+C,OAAUC,sBAChBC,KAAMnQ,UACF3C,KAAKwQ,aAAazP,iCAAkCyG,OAAMC,IAAI,yCACxDzH,KAAKwQ,aAAauC,wBACjB,GAEXC,cAAerQ,MAAMjB,EAAWuR,KACZ,GAAZvR,EAAEuE,OAAejG,KAAKmS,iBAAiBc,GAChCjT,KAAK6K,QAAQlJ,KAAK,CAACmD,KAAM,iBAEpCpD,EAAE2K,MAAM,iBAAmB3K,EAAE2K,MAAM,kBAAoB3I,SAAShC,EAAEuE,MAAMyF,aAAe,GACpFhK,EAAE2K,MAAM,iBAAmB,IAAI3K,EAAE2K,MAAM,iBAAmB,SAEvDrM,KAAKwQ,aAAauC,uBAEjB/S,KAAKyR,qBAEhByB,QAASvQ,MAAOjB,EAAWyR,KACvB,IAAkB,IAAdzR,EAAEuE,MAAe,CACjB,MAAMmN,QAAepT,KAAKwQ,aAAa6C,UAAU3R,EAAE2K,MAAM4E,UACzD,OAAQmC,EAGZ,IAAKD,EAAkB,CACnB,MAAMG,QAA4BtT,KAAKsT,oBAAoB5R,GAE3D,IAAK4R,EAAqB,OAAO,EAGrC,MAAMC,QAAkBvT,KAAK8B,kBAAkBJ,GAE/C,QAAI6R,IAEJC,eAAa,gCAEN,IAEXC,OAAQ,CACJC,wBAAyB,IAAM1T,KAAKwQ,aAAa1P,kBACjD6S,kBAAmB,IAAM3T,KAAK4T,yBAC9BC,YAAa,CACT,CAAEzH,MAAO,OAAQnG,MAAOjG,KAAK2G,QAAQmN,eACrC,CAAE1H,MAAO,SAAUnG,MAAOjG,KAAK2G,QAAQoN,aACvC,CAAE3H,MAAO,gBAAiBnG,MAAO5B,OAAQC,2BACrCtE,KAAK2G,QAAQ6E,kBAGrBwI,iBAAkB,CACd,QACA,WAGR3G,QAAS,IAAMrN,KAAKyR,0B,qBC5JxC,MAAMnD,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD,gB,8ECsBf,SAAS0F,EAAYpN,EAA4BzB,GAC7C,MAAMkF,EAAQ,GACR4J,EAAU,EAAE,EAAG,GAAI,UAAMC,GAE/B,IAAI,MAAMC,KAAQhP,EAAY,CAC1B,KAAMgP,KAAQvN,GACV,SAEJ,MAAMZ,EAAQY,EAAMuN,GAChBF,EAAQG,SAASpO,GACjBqE,EAAM3I,MAAK,GAIf2I,EAAM3I,KAAKyD,EAAWgP,GAAMnO,EAAOY,IAEvC,OAAOyD,EAAM+H,MAAMtC,SAQvB,SAASuE,EAAetJ,GACpB,OAAOA,EAASzH,KAAK,CAACC,EAAGC,IAAOD,EAAEgB,UAAYf,EAAEe,UAAahB,EAAEgB,SAAWf,EAAEe,UAAY,EAAI,GAGhG,SAAS+P,EAAavJ,GAClB,OAAOA,EAASzH,KAAK,CAACC,EAAGC,IAAOD,EAAEgR,QAAU/Q,EAAE+Q,QAAWhR,EAAEgR,OAAS/Q,EAAE+Q,QAAU,EAAI,GAgBlF,SAAUvJ,EACZpE,EACA4N,EACAC,EAAO,GACPC,EAAY,GACZC,EAAO,YACP,MAAMC,EAAU,GAChB,IAAI,MAAMC,KAAkBL,EAAY,CACpC,MAAMhO,EAA2BgO,EAAWK,GACtCC,EAAoB,CACrBtO,EAAKiO,QAAUA,GAAUjO,EAAKiO,QAAUA,EACxCjO,EAAKkO,aAAeA,GACdlO,EAAKkO,aAAeA,GAG3BI,EAAkBC,KAAKjF,UAIvBkE,EAAYpN,EAAOJ,EAAKrB,cACxBqB,EAAKwO,MAAQH,EACTrO,EAAKyO,cACLzO,EAAKyO,YAAYC,KAAO1O,EAAKyO,YAAYE,KAAKvO,IAElDgO,EAAQlT,KAAK8E,IAGrB,MAAkB,aAAXmO,EAAwBN,EAAeO,GAAWN,EAAaM","file":"js/chunk-bc09139e.b44e466f.js","sourcesContent":["import { Service } from \"@/services/service\";\n\nexport class StockService extends Service {\n    constructor() {\n        super()\n    }\n\n    static async fetchAvailableDrugStock(drugId: number) {\n        const stock = await this.getJson('pharmacy/items', { 'drug_id': drugId })\n        if (stock && stock.length > 0) {\n            return stock.reduce((accum: number, pharm: any) => accum + pharm.current_quantity, 0);\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { StockService } from \"./stock_service\";\nimport ART_PROP from '@/apps/ART/art_global_props';\n// ripped from old ART system\nexport const DRUG_PACK_SIZES: Record<string, any> = {\n    '11': [ 30 ],\n    '21': [ 25 ],\n    '22': [ 60 ],\n    '24': [ 30, 60, 90, 100 ],\n    '30': [ 90 ],\n    '39': [ 60 ],\n    '73': [ 120 ],\n    '74': [ 60 ],\n    '76': [ 1000 ],\n    '297': [ 30, 60, 90 ],\n    '576': [ 30, 60, 90 ],\n    '613': [ 60 ],\n    '731': [ 60 ],\n    '732': [ 60 ],\n    '733': [ 60 ],\n    '734': [ 30 ],\n    '735': [ 30 ],\n    '736': [ 60 ],\n    '738': [ 60 ],\n    '931': [ 12, 30, 60 ],\n    '932': [ 30 ],\n    '954': [ 60 ],\n    '963': [ 30, 60, 90 ],\n    '968': [ 60 ],\n    '969': [ 30 ],\n    '971': [ 30,60,90 ],\n    '976': [ 60 ],\n    '977': [ 30 ],\n    '982': [ 30 ],\n    '983': [ 30, 90 ],\n    '1039': [ 30,60,90 ],\n    '1043': [ 60 ],\n    '1044': [ 30],\n    '1056': [ 24 ],\n    '1216': [3, 6, 12]\n}\n\nexport class DispensationService extends AppEncounterService {\n    drugHistory: Array<any>;\n    currentDrugOrder: Array<any>;\n    useDrugManagement: boolean; \n    constructor(patientID: number, providerID: number) {\n        super(patientID, 54, providerID)\n        this.drugHistory = []\n        this.currentDrugOrder = []\n        this.useDrugManagement = false\n    }\n\n    setIsDrugManagementEnabled(isEnabled: boolean) {\n        this.useDrugManagement = isEnabled\n    }\n\n    async loadDrugManagementEnabled() {\n        this.useDrugManagement = await ART_PROP.drugManagementEnabled()\n    }\n\n    getDrugHistory() {\n        return this.drugHistory\n    }\n\n    getCurrentOrder() {\n        return this.currentDrugOrder\n    }\n\n    buildDispensations(orderId: number, tabs: number, totalPacks: number) {\n        const dispensations = []\n        for(let i=0; i < totalPacks; i++) {\n            dispensations.push({\n                'drug_order_id': orderId,\n                date: this.date,\n                quantity: (tabs / totalPacks)\n            })\n        }\n        return dispensations\n    }\n\n    saveDispensations(dispensations: Array<any>) {\n        return AppEncounterService.postJson('/dispensations', { \n            dispensations, \n            'program_id': AppEncounterService.getProgramID()\n        })\n    }\n\n    async voidOrder(orderId: number) {\n        return AppEncounterService.void(`/dispensations/${orderId}`, {})\n    }\n\n    async loadDrugHistory() {\n        try {\n            const res = await DrugOrderService.getDrugOrderHistory(this.patientID)\n            if (res) this.drugHistory = res\n        } catch (e) {\n            console.warn(e)\n        }\n    }\n\n    async loadCurrentDrugOrder() {\n        const res = await DrugOrderService.getDrugOrders(this.patientID)\n        if (res) {\n            if (this.useDrugManagement) {\n                const drugs = res.map(async (d: any) => {\n                    d['available_stock'] = await StockService.fetchAvailableDrugStock(d.drug.drug_id)\n                    return d\n                })\n                this.currentDrugOrder = await Promise.all(drugs)\n                return\n            }\n            this.currentDrugOrder = res\n        }\n    }\n\n    getDrugPackSizes(drugId: number) {\n        if (drugId in DRUG_PACK_SIZES) {\n            return DRUG_PACK_SIZES[drugId]\n        }\n        return [30, 60, 90]\n    }\n\n    // Ripped from old ART system for backwards compatibility purposes\n    calcCompletePack(drug: any, units: number) {\n        //sorting in an ascending order by tabs\n        const drugOrderBarcodes = drug.barcodes.sort((a: any, b: any) => a.tabs - b.tabs); \n        if (drugOrderBarcodes.length == 0 || units == 0.0) return units;\n        for (const i in drugOrderBarcodes) {\n            const { tabs } = drugOrderBarcodes[i]\n            if (parseInt(tabs) >= units) return tabs;\n        }\n        const completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n        return completePack\n    }\n}\n","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const { getOfflinePerson } = Offline()\n            const person = getOfflinePerson(this.offlineID)\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        saveObsOffline(encounterTypeID: number, formdata: any, obs: any, labOrders=undefined as any, status='Pending') {\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: encounterTypeID,\n                meta: formdata,\n                labOrders\n            })\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            try {\n                const enc = new AppEncounterService(\n                    this.patientID,\n                    params.encounterTypeID, \n                    this.providerID\n                )\n                if ((await enc.createEncounter())) {\n                    if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                        status = 'Success'\n                    }\n                }\n                if (typeof params.callback === 'function') {\n                    await params.callback(enc)\n                }\n            } catch (e) {\n                if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                    status = 'NetworkError'\n                } else {\n                    status = 'Exception'\n                }\n                console.error(`${e}`)\n            }\n            if (status === 'Exception') {\n                throw new Error('Unable to proceed!')\n            }\n            this.saveObsOffline(\n                params.encounterTypeID, \n                params.formData,\n                obs,\n                params.labOrders,\n                status\n            )\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, alertConfirmation } from \"@/utils/Alerts\"\nimport { DispensationService } from \"@/apps/ART/services/dispensation_service\"\nimport {isEmpty } from 'lodash'\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport HisDate from \"@/utils/Date\"\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        dispensation: {} as any\n    }),\n    watch: {\n        ready: {\n            handler(ready: any){\n                if (ready) {\n                    this.dispensation = new DispensationService(this.patientID, this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        saveDispensations(item: Option) {\n            return this.dispensation.saveDispensations(this.buildDispensations(item))    \n        },\n        buildDispensations(item: Option) {\n            if (!isEmpty(item.other?.dispenses)) {\n                let dispenses: any = []\n                item.other.dispenses.forEach(([tabs, packs]: Array<number>) => {\n                    dispenses = [...dispenses, \n                    ...this.dispensation.buildDispensations(\n                        item.other.order_id, tabs, packs\n                    )]\n                })\n                return dispenses\n            }\n            return this.dispensation.buildDispensations(\n                item.other.order_id, parseInt(item.value.toString()), 1\n            )\n        },\n        async buildMedicationHistory() {\n            await this.dispensation.loadDrugHistory()\n            return this.dispensation.getDrugHistory()\n                .sort((a: any, b: any) => {\n                    const dateA: any = new Date(a.order.start_date)\n                    const dateB: any = new Date(b.order.start_date)\n                    return dateB - dateA\n                })\n                .map((d: any) => ({\n                    medication: d.drug.name,\n                    date: HisDate.toStandardHisDisplayFormat(d.order.start_date),\n                    amount: d.quantity\n                }))\n        },\n        buildOrderOptions() {\n            return this.dispensation.getCurrentOrder().map((d: any) => ({\n                label: d.drug.name,\n                value: d.quantity || 0,\n                other: {\n                    'order': d,\n                    'drug_id': d.drug.drug_id,\n                    'order_id': d.order.order_id,\n                    'available_stock': d.available_stock || '-',\n                    'amount_needed': this.calculateCompletePack(d),\n                    'pack_sizes': this.getPackSizesRows(d.drug.drug_id, d.available_stock || 0),\n                }\n            }))\n        },\n        getPackSizesRows(drugId: number, availableStock: number) {\n            const packs = this.dispensation.getDrugPackSizes(drugId)\n            return packs.map((packSize: number) => {\n                const packs = availableStock > 0 ? (Math.floor(availableStock / packSize)) : '-'\n                return [packSize, packs, 0, 0]\n            })\n        },\n        calculateCompletePack(order: any) {\n            const units = parseFloat(order.amount_needed) - (order.quantity || 0)\n            if(units <= 0) return 0\n            return this.dispensation.calcCompletePack(order, units)\n        },\n        isDoneDispensing(orders: Array<Option>) {\n            return orders.map(o => o.value != 0).every(Boolean)\n        },\n        async isValidDispensation(option: Option) {\n            let isOk = true\n            const totalTabs = parseInt(option.value.toString())\n            const amountNeeded = option.other['amount_needed']\n            const percentageGiven = (totalTabs / amountNeeded) * 100\n\n            if (percentageGiven > 110) {\n                isOk = await alertConfirmation('Are you sure you want to dispense over 110% of the prescribed pill count?')\n            }\n\n            if (percentageGiven < 100) {\n                isOk = await alertConfirmation('Are you sure you want to dispense less than 100% of the prescribe amount?')\n            }\n            return isOk\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                    id: 'dispenses',\n                    helpText: 'Dispensation',\n                    type: FieldType.TT_DISPENSATION_INPUT,\n                    init: async () => {\n                        this.dispensation.setIsDrugManagementEnabled((await Store.get('IS_ART_DRUG_MANAGEMENT_ENABLED')))\n                        await this.dispensation.loadCurrentDrugOrder()\n                        return true\n                    },\n                    onValueUpdate: async(i: Option, l: Array<Option>) => {\n                        if (i.value != -1 && this.isDoneDispensing(l)) {\n                            return this.$router.push({name: 'appointment'})\n                        }\n                        i.other['amount_needed'] = i.other['amount_needed'] - (parseInt(i.value.toString()) || 0)\n                        if(i.other['amount_needed'] < 0 ) i.other['amount_needed'] = 0\n                        \n                        await this.dispensation.loadCurrentDrugOrder()\n\n                        return this.buildOrderOptions()\n                    },\n                    onValue: async (i: Option, isBarcodeScanned: boolean) => {\n                        if (i.value  === -1) {\n                            const voided = await this.dispensation.voidOrder(i.other.order_id)\n                            return !voided\n                        }\n\n                        if (!isBarcodeScanned) {\n                            const isValidDispensation = await this.isValidDispensation(i)\n\n                            if (!isValidDispensation) return false\n                        }\n\n                        const dispensed = await this.saveDispensations(i)\n\n                        if (dispensed) return true\n\n                        toastWarning('Unable to save dispensation')\n\n                        return false\n                    },\n                    config: {\n                        isDrugManagementEnabled: () => this.dispensation.useDrugManagement,\n                        medicationHistory: () => this.buildMedicationHistory(),\n                        toolbarInfo: [\n                            { label: 'Name', value: this.patient.getFullName() },\n                            { label: 'Gender', value: this.patient.getGender() },\n                            { label: 'Date Of Birth', value: HisDate.toStandardHisDisplayFormat(\n                                this.patient.getBirthdate()\n                            )}\n                        ],\n                        hiddenFooterBtns: [ \n                            'Clear',\n                            'Finish'\n                        ]\n                    },\n                    options: () => this.buildOrderOptions()\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Dispensing.vue?vue&type=template&id=0051ed47&ts=true\"\nimport script from \"./Dispensing.vue?vue&type=script&lang=ts\"\nexport * from \"./Dispensing.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}