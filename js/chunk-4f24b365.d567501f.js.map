{"version":3,"sources":["webpack:///./src/apps/ART/services/stock_service.ts","webpack:///./src/apps/ART/services/dispensation_service.ts","webpack:///./src/apps/ART/views/encounters/Consultation.vue?e7b3","webpack:///./src/components/DataViews/VLReminderModal.vue?d648","webpack:///./src/components/DataViews/VLReminderModal.vue","webpack:///./src/components/DataViews/VLReminderModal.vue?a476","webpack:///./src/apps/ART/services/lab_service.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?7b39","webpack:///./src/components/DataViews/SideEffectsModal.vue","webpack:///./src/components/DataViews/SideEffectsModal.vue?d179","webpack:///./src/apps/ART/views/encounters/Consultation.vue","webpack:///./src/apps/ART/views/encounters/Consultation.vue?2e64","webpack:///./src/components/DataViews/VLReminderModal.vue?d9fa","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?2579","webpack:///./src/apps/ART/services/adherence_service.ts","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue?7f4b"],"names":["StockService","Service","constructor","super","drugId","stock","this","getJson","length","reduce","accum","pharm","current_quantity","DRUG_PACK_SIZES","DispensationService","AppEncounterService","patientID","providerID","_defineProperty","drugHistory","currentDrugOrder","useDrugManagement","setIsDrugManagementEnabled","isEnabled","ART_PROP","drugManagementEnabled","getDrugHistory","getCurrentOrder","buildDispensations","orderId","tabs","totalPacks","dispensations","i","push","date","quantity","saveDispensations","postJson","getProgramID","void","DrugOrderService","getDrugOrderHistory","e","console","warn","getDrugOrders","order","fetchAvailableDrugStock","drug","drug_id","getDrugPackSizes","calcCompletePack","units","drugOrderBarcodes","barcodes","sort","a","b","parseInt","completePack","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","_component_ion_title","_component_ion_toolbar","_component_ion_header","_component_ion_content","_component_ion_button","_component_ion_footer","_createElementBlock","_Fragment","_createVNode","default","_withCtx","_createTextVNode","_","style","overflowY","background","_createElementVNode","_toDisplayString","artStartDate","monthsOnART","lastOrder","currentRegimen","regimenStartDate","slot","color","size","onClick","$event","closeModal","defineComponent","name","props","VLData","type","Object","required","HisDate","toStandardHisDisplayFormat","earliest_start_date","period_on_art","last_order_date","current_regimen","date_started","methods","val","modalController","dismiss","data","content","components","IonHeader","IonToolbar","IonTitle","IonContent","IonFooter","IonButton","__exports__","ARTLabService","milestone","concept","getConceptID","coded","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","_hoisted_2","class","_hoisted_3","_hoisted_4","_hoisted_5","_component_ion_label","_component_ion_item","_component_ion_list","_component_ion_col","_component_ion_radio","_component_ion_radio_group","_component_ion_row","_component_ion_grid","height","_renderList","sides","index","key","selectSideEffect","detail","_normalizeStyle","activeIndex","label","modelValue","drugs","value","drug_inventory_id","_createCommentVNode","postSideEffects","disabled","allSelected","sideEffects","Array","computed","filter","side","mounted","extendedLabsEnabled","appActivities","specimens","reasons","IonLabel","IonList","IonItem","IonRadioGroup","IonRow","mixins","AdherenceMixinVue","HisStandardForm","currentWeight","weightTrail","customRegimens","labOrders","weightLossPercentageNum","lostTenPercentBodyWeight","CxCaEnabled","CxCaStartAge","CxCaMaxAge","DueForCxCa","currentlyPregnant","currentlyBreastfeeding","patientHitMenopause","hasPregnancyObsToday","autoSelect3HP","labOrderFieldContext","consultation","prescription","dispensation","completed3HP","hasTbHistoryObs","allergicToSulphur","TBSuspected","presentedTBSymptoms","askAdherence","lastDrugsReceived","sideEffectsHistory","onPermanentFPMethods","reasonForDecliningTPTObs","malawiSideEffectReasonObs","otherSideEffectReasonObs","wasTransferredIn","dateStartedArt","clientHadAHysterectomy","isNoneClientPatient","tptStatus","customDrugs","CxCaAppointDate","hasTbTreatmentDate","isEligibleForTpt","watch","ready","handler","ConsultationService","PrescriptionService","getFields","immediate","f","computedData","encounter","createEncounter","toastWarning","computedObs","resolveObs","secondaryObs","Promise","all","d","isEmpty","savedObs","saveObservationList","drugObs","saveAdherence","toastSuccess","refer_to_clinician","gotoPatientDashboard","nextTask","formData","drugFilters","tptHistory","routine_tb_therapy","RegimenService","getCustomIngridients","match","includes","map","other","receivedArvs","getFirstValueCoded","transferLetterObs","getFirstObs","toStandardHisFormat","obs_datetime","value_coded","getDate","dateStarted","getFirstValueDatetime","action","infoActionSheet","vals","ProgramService","getPatientVLInfo","eligibile","modal","create","component","VLReminderModal","backdropDismiss","cssClass","componentProps","present","onDidDismiss","launchOrderSelection","waitForVL","orderService","observations","buildDefferedOrder","canScreenCxCa","age","patient","getAge","isFemale","pregnancyEligible","isChildBearing","showCurrentContraceptionMethods","isPregnant","isANCclient","showNewContraceptionMethods","isOnTubalLigation","pregnant_breastfeeding","inArray","p","isBreastFeeding","current_fp_methods","listData","isChecked","infoAlert","noneIndex","findIndex","familyPlanningMethods","currentIndex","disablePrescriptions","buildMedicationOrders","options","o","buildValueCoded","priscribed","medications","declinedFPM","fp_methods","riskOfUnplannedPregnancy","reason_for_no_fpm","showOtherSideEffects","side_effects","hasTBSymptoms","tb_side_effects","isTBSuspect","toString","isAllergicToSulphur","attr","sideEffectReasons","getSideEffectsReasons","undefined","drugInducedConcept","ConceptService","getCachedConceptID","isOtherReason","reason","r","allYes","s","SideEffectsModalVue","getFPMethods","exclusionList","preChecked","getFamilyPlanningMethods","filtered","method","getOptions","preValues","preValue","find","values","yesNoOptions","getContraindications","contraIndications","getConceptsByCategory","getOtherContraindications","lastElement","pop","getTBSymptoms","getReasonsForNoCxcaOptions","c","runAppendOptionParams","prechecked","checkedOptions","_o$other","appendOptionParams","_o$other2","appendedOptions","option","didCompleted3HP","patientOnTpt","test","tpt","tptAutoSelectionMode","curOption","is3HPorTPT","ipt3HPConflict","checkedDrugs","item","noTpTPresent","every","Boolean","optionsActionSheet","role","buildValueText","selection","medicationOrderOptions","completedTpt","everTakenTpt","isCurrentlyBreastfeeding","disableOption","text","description","show","toOption","tb_treatment","completed","OrderService","formatLabs","Store","get","getSuspendedProgram","id","proxyID","helpText","FieldType","TT_MULTIPLE_SELECT","init","async","isGuardian","getClient","PatientTypeService","isDrugRefillPatient","Number","getRecentWeight","getTptTreatmentStatus","beforeNext","v","some","alertConfirmation","validation","Validation","computedValue","tag","obs","onValueUpdate","list","on3HPValueUpdate","cd","l","condition","exitsForm","generateDateFields","getTransferInStatus","getDateStartedArt","minDate","maxDate","computeValue","setDate","buildValueDate","estimation","allowUnknown","getARVs","config","showKeyboard","TT_NEXT_VISIT_INTERVAL_SELECTION","nextAppointment","intervals","setNextVisitInterval","calculateDateFromInterval","TT_DRUG_TRANSFER_IN","validateSeries","_i$other","pillsBrought","_d$other","_d$other2","_c$date_last_received","drugID","buildObs","drug_interval","child","date_last_received_arvs","previous_arvs_received","drugName","prevValue","qty","rmndr","_prevValue$other","TT_LAB_ORDERS","getVlLabData","unload","checkVLReminder","noGivenResults","result_given","enc","result","resultIds","encounterID","encounter_id","saveObs","resultID","onload","fieldContext","printOrder","orderID","PatientPrintoutService","printLabOrderLbl","hiddenFooterBtns","footerBtns","visible","isBreastfeeding","getTLObs","TT_MULTIPLE_YES_NO","anyEmpty","concat","TT_WEIGHT_CHART","getWeightHistory","getWeightLossPercentageFromTrail","bmi","getBMI","x","y","weight","TT_TEXT_BANNER","mapStrToOptions","disableFPMethods","checked","TT_SELECT","offer_contraceptives","cervicalCancerScreeningEnabled","start","end","cervicalCancerScreeningAgeBounds","clientDueForCxCa","clientHasHadAHysterectomy","ONE_MONTH","dateDiffInDays","appointment_date","offer_cxca","getBirthdate","getSessionDate","reason_for_no_cxca","isEstimate","buildValueDateEstimated","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","TT_DATA_TABLE","getDrugSideEffects","columns","table","thTxt","rows","keys","k","tdDate","td","drug_induced","cur","getPreviousDrugs","buildSideEffectObs","onValue","checkIfWeightLossIsControlled","onConditionFalse","TT_NOTE","other_side_effects","TT_YES_NO","startDate","tbPeriod","getFirstValueNumber","timeElapse","dayjs","diff","on_tb_treatment","tb_date_started_treatment_known","TT_NUMBER","isNumber","rangeOf","buildValueNumber","defaultValue","hasTreatmentHistoryObs","TT_ADHERENCE_INPUT","getTptDrugs","_drug$other","date_started_tpt","titles","getFacilities","isFilterDataViaApi","log","yesNoUnknownOptions","getAdherenceFields","UserService","isNurse","currentOptions","onClickComponentEvents","refreshOptions","btnEvent","btnOutput","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","AdherenceService","lastDrugs","lastReceiptDate","optimiseHangingPills","Date","receiptDate","start_date","htnDrugs","BPManagementService","htnDrugReferences","lastPillCounts","getPreviousDrugPillCount","getReceiptDate","getLastDrugs","receivedDrugsBefore","buildPillCountObs","pillCount","programID","adherence","isAdherenceGood","calculateAdherence","given","pills","expected","Math","round","calculateExpected","equivalentDailyDose","frequency","timeUnit","daysGone","calcTimeElapsed","parseFloat","date1","calculateUnaccountedOrMissed","actual","exp","EncounterMixinVue","askReasonForPoorAdherence","calculationAgreementObs","buildAdherenceReport","lastVisit","daysElapsed","rowColors","indexes","cellColors","forEach","formatFrequency","expectedPills","calcPillsExpected","adherenceStatus","unAccountedDoses","equivalent_daily_dose","row","checkDrugsBefore","loadPreviousDrugs","empty","buildAdherenceObs","order_id","fdata","pills_brought","TT_TABLE_VIEWER"],"mappings":"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","file":"js/chunk-4f24b365.d567501f.js","sourcesContent":["import { Service } from \"@/services/service\";\n\nexport class StockService extends Service {\n    constructor() {\n        super()\n    }\n\n    static async fetchAvailableDrugStock(drugId: number) {\n        const stock = await this.getJson('pharmacy/items', { 'drug_id': drugId })\n        if (stock && stock.length > 0) {\n            return stock.reduce((accum: number, pharm: any) => accum + pharm.current_quantity, 0);\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { StockService } from \"./stock_service\";\nimport ART_PROP from '@/apps/ART/art_global_props';\n// ripped from old ART system\nexport const DRUG_PACK_SIZES: Record<string, any> = {\n    '11': [ 30 ],\n    '21': [ 25 ],\n    '22': [ 60 ],\n    '24': [ 30, 60, 90, 100 ],\n    '30': [ 90 ],\n    '39': [ 60 ],\n    '73': [ 120 ],\n    '74': [ 60 ],\n    '76': [ 1000 ],\n    '297': [ 30, 60, 90 ],\n    '576': [ 30, 60, 90 ],\n    '613': [ 60 ],\n    '731': [ 60 ],\n    '732': [ 60 ],\n    '733': [ 60 ],\n    '734': [ 30 ],\n    '735': [ 30 ],\n    '736': [ 60 ],\n    '738': [ 60 ],\n    '931': [ 12, 30, 60 ],\n    '932': [ 30 ],\n    '954': [ 60 ],\n    '963': [ 30, 60, 90 ],\n    '968': [ 60 ],\n    '969': [ 30 ],\n    '971': [ 30,60,90 ],\n    '976': [ 60 ],\n    '977': [ 30 ],\n    '982': [ 30 ],\n    '983': [ 30, 90 ],\n    '1039': [ 30,60,90 ],\n    '1043': [ 60 ],\n    '1044': [ 30],\n    '1056': [ 24 ],\n    '1216': [3, 6, 8, 12]\n}\n\nexport class DispensationService extends AppEncounterService {\n    drugHistory: Array<any>;\n    currentDrugOrder: Array<any>;\n    useDrugManagement: boolean; \n    constructor(patientID: number, providerID: number) {\n        super(patientID, 54, providerID)\n        this.drugHistory = []\n        this.currentDrugOrder = []\n        this.useDrugManagement = false\n    }\n\n    setIsDrugManagementEnabled(isEnabled: boolean) {\n        this.useDrugManagement = isEnabled\n    }\n\n    async loadDrugManagementEnabled() {\n        this.useDrugManagement = await ART_PROP.drugManagementEnabled()\n    }\n\n    getDrugHistory() {\n        return this.drugHistory\n    }\n\n    getCurrentOrder() {\n        return this.currentDrugOrder\n    }\n\n    buildDispensations(orderId: number, tabs: number, totalPacks: number) {\n        const dispensations = []\n        for(let i=0; i < totalPacks; i++) {\n            dispensations.push({\n                'drug_order_id': orderId,\n                date: this.date,\n                quantity: (tabs / totalPacks)\n            })\n        }\n        return dispensations\n    }\n\n    saveDispensations(dispensations: Array<any>) {\n        return AppEncounterService.postJson('/dispensations', { \n            dispensations, \n            'program_id': AppEncounterService.getProgramID()\n        })\n    }\n\n    async voidOrder(orderId: number) {\n        return AppEncounterService.void(`/dispensations/${orderId}`, {})\n    }\n\n    async loadDrugHistory() {\n        try {\n            this.drugHistory = (await DrugOrderService.getDrugOrderHistory(this.patientID))||[]\n        } catch (e) {\n            console.warn(e)\n        }\n    }\n\n    async loadCurrentDrugOrder() {\n        this.currentDrugOrder = (await DrugOrderService.getDrugOrders(this.patientID))||[]\n        if (!this.useDrugManagement) return\n        for(const order of this.currentDrugOrder) {\n            order['available_stock'] = await StockService.fetchAvailableDrugStock(order.drug.drug_id)\n        }\n    }\n\n    getDrugPackSizes(drugId: number) {\n        if (drugId in DRUG_PACK_SIZES) {\n            return DRUG_PACK_SIZES[drugId]\n        }\n        return [30, 60, 90]\n    }\n\n    // Ripped from old ART system for backwards compatibility purposes\n    calcCompletePack(drug: any, units: number) {\n        //sorting in an ascending order by tabs\n        const drugOrderBarcodes = drug.barcodes.sort((a: any, b: any) => a.tabs - b.tabs); \n        if (drugOrderBarcodes.length == 0 || units == 0.0) return units;\n        for (const i in drugOrderBarcodes) {\n            const { tabs } = drugOrderBarcodes[i]\n            if (parseInt(tabs) >= units) return tabs;\n        }\n        const completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n        return completePack\n    }\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"VL milestone has been reached\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createElementVNode(\"p\", null, \"ART start date : \" + _toDisplayString(_ctx.artStartDate), 1),\n        _createElementVNode(\"p\", null, \"Months on ART: \" + _toDisplayString(_ctx.monthsOnART), 1),\n        _createElementVNode(\"p\", null, \"Last VL order date \" + _toDisplayString(_ctx.lastOrder), 1),\n        _createElementVNode(\"p\", null, \"Current regimen / start date: \" + _toDisplayString(_ctx.currentRegimen) + \" - \" + _toDisplayString(_ctx.regimenStartDate), 1)\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              slot: \"end\",\n              color: \"success\",\n              size: \"large\",\n              onClick: _cache[0] || (_cache[0] = ($event: any) => (_ctx.closeModal('order')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Order VL\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_button, {\n              slot: \"end\",\n              size: \"large\",\n              onClick: _cache[1] || (_cache[1] = ($event: any) => (_ctx.closeModal('wait')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Wait till next milestone\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_button, {\n              slot: \"start\",\n              color: \"danger\",\n              size: \"large\",\n              onClick: _cache[2] || (_cache[2] = ($event: any) => (_ctx.closeModal('later')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Remind me later \")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  modalController,\n  IonFooter\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport HisDate from \"@/utils/Date\";\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    VLData: {\n      type: Object as any,\n      required: true\n    },\n    \n  },\n  async created() {\n    this.artStartDate = HisDate.toStandardHisDisplayFormat(this.VLData.earliest_start_date);\n    this.monthsOnART = this.VLData.period_on_art;\n    this.lastOrder = this.VLData.last_order_date ? HisDate.toStandardHisDisplayFormat(this.VLData.last_order_date) : 'N/A';\n    this.currentRegimen = this.VLData.current_regimen.name ? this.VLData.current_regimen.name : 'Other';\n    this.regimenStartDate = HisDate.toStandardHisDisplayFormat(this.VLData.current_regimen.date_started);\n  },\n  methods: {\n   async closeModal(val: string) {\n    await modalController.dismiss(val);\n   } \n  },\n  data() {\n    return {\n      content: \"Content\",\n      artStartDate: \"\",\n      monthsOnART: \"\",\n      lastOrder: \"\",\n      currentRegimen: \"\",\n      regimenStartDate: \"\" \n    };\n  },\n  components: {\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonFooter,\n    IonButton,\n  },\n});\n","import { render } from \"./VLReminderModal.vue?vue&type=template&id=10a26cd2&scoped=true&ts=true\"\nimport script from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\nexport * from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\n\nimport \"./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-10a26cd2\"]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nexport class ARTLabService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 13, providerID);\n  }\n  async buildDefferedOrder(milestone: any) {\n    const concept = await AppEncounterService.getConceptID(\"HIV viral load\");\n    const coded = await AppEncounterService.getConceptID(\"Delayed milestones\");\n\n    return [\n      {\n        'concept_id': concept,\n        'value_text': \"Wait till next milestone\",\n        'value_coded': coded,\n        'value_numeric': milestone,\n      }]\n  }\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, createBlock as _createBlock, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-546674a2\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { style: {} }\nconst _hoisted_2 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"side-title\" }, \" Select reason \", -1))\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Current Medication\", -1))\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Previous Medication\", -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_label = _resolveComponent(\"ion-label\")!\n  const _component_ion_item = _resolveComponent(\"ion-item\")!\n  const _component_ion_list = _resolveComponent(\"ion-list\")!\n  const _component_ion_col = _resolveComponent(\"ion-col\")!\n  const _component_ion_radio = _resolveComponent(\"ion-radio\")!\n  const _component_ion_radio_group = _resolveComponent(\"ion-radio-group\")!\n  const _component_ion_row = _resolveComponent(\"ion-row\")!\n  const _component_ion_grid = _resolveComponent(\"ion-grid\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"Side effects suspected causes\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_grid, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_row, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_ion_col, { size: \"4\" }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_ion_list, { style: {overflowY: 'auto', height:'78vh'} }, {\n                      default: _withCtx(() => [\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.sides, (data, index) => {\n                          return (_openBlock(), _createBlock(_component_ion_item, {\n                            key: data,\n                            onClick: ($event: any) => (_ctx.selectSideEffect(index)),\n                            detail: true,\n                            style: _normalizeStyle(_ctx.activeIndex === index ? 'color: green': 'color: black')\n                          }, {\n                            default: _withCtx(() => [\n                              _createVNode(_component_ion_label, null, {\n                                default: _withCtx(() => [\n                                  _createTextVNode(_toDisplayString(data.label), 1)\n                                ]),\n                                _: 2\n                              }, 1024)\n                            ]),\n                            _: 2\n                          }, 1032, [\"onClick\", \"style\"]))\n                        }), 128))\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_ion_col, { style: {overflowY: 'auto', height:'78vh'} }, {\n                  default: _withCtx(() => [\n                    _createElementVNode(\"div\", _hoisted_1, [\n                      _createVNode(_component_ion_list, null, {\n                        default: _withCtx(() => [\n                          (_ctx.activeIndex !== null)\n                            ? (_openBlock(), _createBlock(_component_ion_radio_group, {\n                                key: 0,\n                                modelValue: _ctx.sides[_ctx.activeIndex]['reason'],\n                                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.sides[_ctx.activeIndex]['reason']) = $event))\n                              }, {\n                                default: _withCtx(() => [\n                                  _hoisted_2,\n                                  _hoisted_3,\n                                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs, (drug, i) => {\n                                    return (_openBlock(), _createBlock(_component_ion_item, { key: i }, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, null, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(_toDisplayString(drug.drug.name), 1)\n                                          ]),\n                                          _: 2\n                                        }, 1024),\n                                        _createVNode(_component_ion_radio, {\n                                          slot: \"start\",\n                                          value: drug.drug_inventory_id\n                                        }, null, 8, [\"value\"])\n                                      ]),\n                                      _: 2\n                                    }, 1024))\n                                  }), 128)),\n                                  _hoisted_4,\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withCtx(() => [\n                                          _createTextVNode(\"Other, not drug related\")\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"other\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  }),\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withCtx(() => [\n                                          _createTextVNode(\"Drug side effect\")\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"drug\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  })\n                                ]),\n                                _: 1\n                              }, 8, [\"modelValue\"]))\n                            : _createCommentVNode(\"\", true)\n                        ]),\n                        _: 1\n                      })\n                    ]),\n                    _hoisted_5\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.closeModal,\n              slot: \"end\",\n              color: \"danger\"\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Close \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\"]),\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.postSideEffects,\n              slot: \"end\",\n              disabled: !_ctx.allSelected\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Save \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\", \"disabled\"])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  IonLabel,\n  modalController,\n  IonList,\n  IonItem,\n  IonRadioGroup,\n  IonRow,\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { ActivityInterface } from \"@/apps/interfaces/AppInterface\"\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    sideEffects: {\n      type: Object as PropType<ActivityInterface[]>,\n      required: true\n    },\n    drugs: {\n      type: Array as any, \n      default: []\n    },\n  },\n  methods: {\n    closeModal() {\n      modalController.dismiss()\n    },\n    async postSideEffects() {\n      await modalController.dismiss(this.sides);\n    },\n    selectSideEffect(index: number) {\n      this.activeIndex = index;\n    },\n    \n  },\n  computed: {\n    allSelected(): any {\n      return this.sides.filter((side: any) => side['reason']).length === this.sides.length\n    }\n  },\n  mounted() {\n    this.sides = this.sideEffects;\n  },\n  data() {\n    return {\n      content: \"Content\",\n      extendedLabsEnabled: false as boolean,\n      appActivities: [] as Array<ActivityInterface>,\n      sides: [] as any,\n      specimens: [],\n      reasons: ['Routine', 'Targeted', 'Confirmatory', 'Stat', 'Repeat / Missing'],\n      activeIndex: null as any\n    };\n  },\n  components: {\n    IonButton,\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonLabel,\n    IonList,\n    IonItem,\n    IonRadioGroup,\n    IonRow,\n  },\n});\n","import { render } from \"./SideEffectsModal.vue?vue&type=template&id=546674a2&scoped=true&ts=true\"\nimport script from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\nexport * from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\n\nimport \"./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-546674a2\"]])\n\nexport default __exports__","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { FooterBtnEvent, Option } from \"@/components/Forms/FieldInterface\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { alertConfirmation, infoAlert, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport HisDate from \"@/utils/Date\";\nimport { findIndex, isEmpty, find } from \"lodash\";\nimport { ConsultationService } from \"@/apps/ART/services/consultation_service\";\nimport { UserService } from \"@/services/user_service\";\nimport { OrderService } from \"@/services/order_service\";\nimport { ConceptService } from \"@/services/concept_service\";\nimport AdherenceMixinVue from \"./AdherenceMixin.vue\";\nimport { modalController } from \"@ionic/vue\";\nimport VLReminderModal from \"@/components/DataViews/VLReminderModal.vue\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ARTLabService } from \"../../services/lab_service\";\nimport { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport SideEffectsModalVue from \"@/components/DataViews/SideEffectsModal.vue\";\nimport ART_PROP from \"@/apps/ART/art_global_props\";\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { PatientTypeService } from \"../../services/patient_type_service\";\nimport { PrescriptionService } from \"../../services/prescription_service\";\nimport { DispensationService } from \"../../services/dispensation_service\";\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport Store from \"@/composables/ApiStore\"\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { RegimenService } from \"@/services/regimen_service\";\nimport dayjs from \"dayjs\";\n\nexport default defineComponent({\n  mixins: [AdherenceMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    fields: [] as any,\n    currentWeight: -1 as any,\n    weightTrail: [] as any,\n    customRegimens: [] as any,\n    labOrders: [] as any,\n    weightLossPercentageNum: 0 as number,\n    lostTenPercentBodyWeight: false as boolean,\n    CxCaEnabled: false as boolean,\n    CxCaStartAge: -1 as number,\n    CxCaMaxAge: -1 as number,\n    DueForCxCa: false as boolean,\n    currentlyPregnant: false as boolean,\n    currentlyBreastfeeding: false,\n    patientHitMenopause: false as boolean,\n    hasPregnancyObsToday: false as boolean,\n    autoSelect3HP: false as boolean,\n    labOrderFieldContext: {} as any,\n    consultation: {} as any,\n    prescription: {} as any,\n    dispensation: {} as any,\n    completed3HP: false as boolean,\n    hasTbHistoryObs: false,\n    allergicToSulphur: false as boolean | null,\n    TBSuspected: false,\n    presentedTBSymptoms: false,\n    askAdherence: false as boolean,\n    lastDrugsReceived: [] as any,\n    sideEffectsHistory: {} as any,\n    onPermanentFPMethods: false,\n    reasonForDecliningTPTObs: {} as any,\n    malawiSideEffectReasonObs: [] as any,\n    otherSideEffectReasonObs: [] as any,\n    wasTransferredIn: false as boolean,\n    dateStartedArt: '' as string,\n    clientHadAHysterectomy: false as any,\n    isNoneClientPatient: false as boolean,\n    tptStatus: {} as Record<string, any>,\n    customDrugs: [] as any,\n    CxCaAppointDate: {} as any,\n    hasTbTreatmentDate: false as boolean,\n    isEligibleForTpt: false as boolean\n  }),\n  watch: {\n    ready: {\n      handler(value: boolean) {\n        if (value) {\n          this.consultation = new ConsultationService(this.patientID, this.providerID)\n          this.prescription = new PrescriptionService(this.patientID, this.providerID)\n          this.dispensation = new DispensationService(this.patientID, this.providerID)\n          this.fields = this.getFields();\n        }\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      const encounter = await this.consultation.createEncounter();  \n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n\n      const computedObs = await this.resolveObs(computedData, 'consultation')\n\n      const secondaryObs = (await Promise.all([\n        ...this.malawiSideEffectReasonObs,\n        ...this.otherSideEffectReasonObs,\n        this.reasonForDecliningTPTObs\n      ])).filter((d) => !isEmpty(d))\n\n      const savedObs = await this.consultation.saveObservationList([\n        ...computedObs, ...secondaryObs\n      ])\n\n      if (!isEmpty(this.drugObs) && !this.isNoneClientPatient) await this.saveAdherence();\n\n      if (!savedObs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      if (f.refer_to_clinician && f.refer_to_clinician.value ==='Yes') {\n        this.gotoPatientDashboard()\n        return\n      }\n      this.nextTask();\n    },\n    async getTptDrugs(formData: any){\n      const drugFilters: string[] = []\n      const tptHistory = formData.routine_tb_therapy.value\n      if (isEmpty(this.customDrugs)) {\n        this.customDrugs = await RegimenService.getCustomIngridients()\n      }\n      if(tptHistory.match(/ipt/i)) {\n        drugFilters.push(\"INH or H (Isoniazid 300mg tablet)\")\n      } else if(tptHistory.includes(\"3HP (RFP + INH)\")){\n        drugFilters.push('INH or H (Isoniazid 300mg tablet)')\n        drugFilters.push('Rifapentine (150mg)')\n      } else if(tptHistory.includes(\"INH 300 / RFP 300 (3HP)\")){\n        drugFilters.push(\"INH 300 / RFP 300 (3HP)\")\n      }\n      return !isEmpty(drugFilters) \n        ? this.customDrugs.filter((drug: any) => drugFilters.includes(drug.name))\n          .map((drug: any) => ({\n            label: drug.name,\n            value: '',\n            other: drug\n          }))\n        : []\n    },\n    async getTransferInStatus() {\n      const receivedArvs = await ConsultationService.getFirstValueCoded(\n        this.patientID, 'Ever received ART'\n      )\n      const transferLetterObs = await ConsultationService.getFirstObs(\n        this.patientID, 'Has transfer letter'\n      )\n      const date = transferLetterObs ? HisDate.toStandardHisFormat(transferLetterObs.obs_datetime) : ''\n      return receivedArvs \n        && receivedArvs.match(/yes/i) \n        && transferLetterObs \n        && `${transferLetterObs.value_coded}`.match(/yes/i)\n        && date === this.consultation.getDate()\n    },\n    async getDateStartedArt() {\n      const dateStarted = await ConsultationService.getFirstValueDatetime(this.patientID, 'Date ART started')\n      return dateStarted ? HisDate.toStandardHisFormat(dateStarted) : ''\n    },\n    async checkIfWeightLossIsControlled(val: any) {\n      if (this.lostTenPercentBodyWeight\n        && `${val.label}`.match(/malnutrition/i)\n        && `${val.value}`.match(/no/i)) {\n        const action = await infoActionSheet(\n          'Recommendation',\n          `Patient's weight has dropped by ${this.weightLossPercentageNum}% , is this controlled weight loss??`,\n          'Please verify',\n          [\n            { name: 'Confirm weight loss', slot: 'start', color: 'success'},\n            { name: 'Confirm controlled', slot: 'end', color: 'primary'}\n          ]\n        )\n        val.value = action === 'Confirm weight loss' ? 'Yes' : 'No'\n      }\n    },\n    async checkVLReminder() {\n      const vals = await ProgramService.getPatientVLInfo(this.patientID);\n      if (vals.eligibile === true) {\n        const modal = await modalController.create({\n          component: VLReminderModal,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { VLData: vals },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        switch (data) {\n          case \"order\":\n            await this.labOrderFieldContext.launchOrderSelection();\n            break;\n          case \"wait\":\n            await this.waitForVL();\n            break;\n          case \"later\":\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    async waitForVL(milestone: any = null) {\n      const orderService = new ARTLabService(this.patientID, this.providerID);\n      const encounter = await orderService.createEncounter();\n      const observations = await orderService.buildDefferedOrder(milestone);\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      await orderService.saveObservationList(observations);\n    },\n    canScreenCxCa() {\n      const age = this.patient.getAge()\n      return this.patient.isFemale()\n        && this.DueForCxCa\n        && this.CxCaEnabled \n        && age >= this.CxCaStartAge \n        && age <= this.CxCaMaxAge\n        && !this.clientHadAHysterectomy\n    },\n    pregnancyEligible() {\n      return this.patient.isChildBearing() && !this.onPermanentFPMethods\n    },\n    showCurrentContraceptionMethods(formData: any) {\n      return (this.pregnancyEligible()\n        && !this.patientHitMenopause \n        && !this.isPregnant(formData))\n        && !this.isANCclient()\n    },\n    showNewContraceptionMethods(formData: any) {\n      return (\n        this.pregnancyEligible() &&\n        !this.patientHitMenopause &&\n        !this.isPregnant(formData) &&\n        !this.isOnTubalLigation(formData)\n        && !this.isANCclient()\n      )\n    },\n    isPregnant(formData: any) {\n      if (formData.pregnant_breastfeeding) {\n        return this.inArray(formData.pregnant_breastfeeding, \n          p => p.label === 'Pregnant' && p.value === 'Yes'\n        )\n      }\n      return this.currentlyPregnant\n    },\n    isBreastFeeding(formData: any) {\n      if (formData.pregnant_breastfeeding) {\n        return this.inArray(formData.pregnant_breastfeeding, \n          p => p.label === 'Breastfeeding' && p.value === 'Yes'\n        )\n      }\n      return this.currentlyBreastfeeding\n    },\n    isOnTubalLigation(formData: any) {\n      return this.inArray(formData.current_fp_methods, d => d.value === \"TUBAL LIGATION\")\n    },\n    async disableFPMethods(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE\") {\n            i.isChecked = false;\n            i.disabled = false;\n          }\n          return i;\n        });\n      } else if (value.label != \"NONE\" && value.isChecked) {\n        if (value.label.match(/condom/gi)) infoAlert(\"Combine with other modern methods of family planning\") \n        const noneIndex = findIndex(listData, { label: \"NONE\" });\n        listData[noneIndex].isChecked = false;\n        const vals = this.consultation.familyPlanningMethods(\n          value.label,\n          listData\n        );\n        const currentIndex = findIndex(vals, { label: value.label });\n        vals[currentIndex].isChecked = true;\n        return vals;\n      } else {\n        return listData.map((i) => {\n          i.disabled = false;\n          return i;\n        });\n      }\n    },\n    disablePrescriptions(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE OF THE ABOVE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE OF THE ABOVE\") i.isChecked = false;\n          return i;\n        });\n      } else if (value.label != \"NONE OF THE ABOVE\" && value.isChecked) {\n        const noneIndex = findIndex(listData, { label: \"NONE OF THE ABOVE\" });\n        listData[noneIndex].isChecked = false;\n      }\n      return listData;\n    },\n    buildMedicationOrders(options: Option[]) {\n      if (this.inArray(options, o => o.label === \"NONE OF THE ABOVE\")) {\n        return this.consultation.buildValueCoded('Prescribe drugs', 'No')\n      }\n      const priscribed = this.consultation.buildValueCoded('Prescribe drugs', 'Yes')\n      const medications = options.map( o => this.consultation.buildValueCoded(\n        'Medication orders', o.label\n      ))\n      return [priscribed, ...medications]\n    },\n    declinedFPM(formData: any) {\n      return this.inArray(formData.fp_methods, d => d.value === \"NONE\")\n        && this.inArray(formData.current_fp_methods, d => d.value === \"NONE\")\n    },\n    riskOfUnplannedPregnancy(formData: any) {\n      return formData.reason_for_no_fpm.value === \"At risk of unplanned pregnancy\"\n    },\n    showOtherSideEffects(formData: any) {\n      return this.inArray(formData.side_effects, d => d.label === \"Other\" && d.value === \"Yes\")\n    },\n    hasTBSymptoms(formData: any) {\n      this.presentedTBSymptoms = this.inArray(formData.tb_side_effects, d => d.value === \"Yes\")\n      return this.presentedTBSymptoms\n    },\n    isTBSuspect(data: any){\n      this.TBSuspected = data.value.toString().match(/Yes|TB Suspected/i) ? true : false\n      return this.TBSuspected\n    },\n    isAllergicToSulphur (data: any) {\n      this.allergicToSulphur = data.value.match(/unknown/i) ? null : data.value.match(/yes/i) ? true : false\n      return this.allergicToSulphur\n    },\n    async buildSideEffectObs(data: Option[], attr: 'malawiSideEffectReasonObs' | 'otherSideEffectReasonObs'): Promise<boolean> {\n      const sideEffectReasons  = await this.getSideEffectsReasons(data)\n\n      this[attr] = [] //Clear this incase side effects no longer exist\n  \n      if (sideEffectReasons === undefined) return false\n\n      if (sideEffectReasons != -1) {\n        const drugInducedConcept = ConceptService.getCachedConceptID('Drug induced', true)\n        const isOtherReason = (reason: string) => `${reason}`.match(/other|drug/i) ? true : false\n        this[attr] = sideEffectReasons.map((r: any) => ({\n          'concept_id': drugInducedConcept,\n          'value_coded': ConceptService.getCachedConceptID(r.label, true),\n          'value_text': isOtherReason(r.reason) ? 'Past medication history' : null,\n          'value_drug': !isOtherReason(r.reason) ? r.reason : null //Reason is drug ID number if caused by specific drug\n        }))\n      }\n      return true\n    },\n    async getSideEffectsReasons(sideEffects: Option[]) {\n      const allYes = sideEffects.filter(s => !(`${s.label}`.match(/other/i)) && s.value==='Yes')\n      if (allYes.length > 0) {\n        const modal = await modalController.create({\n          component: SideEffectsModalVue,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { sideEffects: allYes, drugs: this.lastDrugsReceived },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        return data;\n      }\n      return -1\n    },\n    getFPMethods(exclusionList: string[] = [], preChecked: Array<Option>) {\n      const methods = this.consultation.getFamilyPlanningMethods();\n      const filtered = methods.filter(\n        (data: string) => !exclusionList.includes(data)\n      )\n      return filtered.map((method: any) => ({\n        label: method,\n        value: method,\n        isChecked: preChecked.map((i) => i.label).includes(method),\n      }))\n    },\n    getOptions(options: string[], preValues: Array<Option>) {\n      return options.map((data: any) => {\n        const preValue = find(preValues, { label: data });\n        return {\n          label: data,\n          value: preValue ? preValue.value : \"\",\n          other: {\n            values: this.yesNoOptions(),\n          },\n        };\n      });\n    },\n    getContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"contraindication\", true\n      ).map((data) => data.name);\n      return this.getOptions([...contraIndications, \"Other\"], preValues);\n    },\n    getOtherContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"side_effect\", true\n      ).map((data) => data.name);\n      /**\n       * HACK ALERT!!!\n       * Dont want to show Other (Specify) as a last element\n       */\n      const lastElement = contraIndications.pop()\n      return this.getOptions([...contraIndications, \"Other (Specify)\", `${lastElement}`], preValues)\n    },\n    getTBSymptoms(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"tb_symptom\", true\n      ).map((data) => data.name)\n      return this.getOptions([...contraIndications], preValues);\n    },\n    getReasonsForNoCxcaOptions() {\n      return ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n        .map((c: any) => ({\n          label: c.name,\n          value: c.name,\n          other: {\n            c\n          }\n        }))\n    },\n    runAppendOptionParams(options: Option[], prechecked: Option[]) {\n      const checkedOptions = prechecked.filter(o => o.isChecked).map(o => o.label)\n      return options.map(o => {\n        if (typeof o?.other?.appendOptionParams === 'function') {\n          const appendedOptions = o?.other?.appendOptionParams()\n          if (typeof appendedOptions === 'object')  {\n            const option: Option = {\n              label: o.label,\n              value: o.value,\n              other: o.other\n            }\n            if (appendedOptions.isChecked) {\n              option.isChecked = appendedOptions.isChecked\n              delete appendedOptions.isChecked\n            } else {\n              option.isChecked = checkedOptions.includes(o.label)\n            }\n            return { ...option, ...appendedOptions}\n          }\n        }\n        return o\n      })\n    },\n    /**\n     * Checks formdata and previous observation state if a patient completed 3HP\n     */\n    didCompleted3HP(formData: any) {\n      return !this.completed3HP \n        ? formData.routine_tb_therapy \n        && formData.routine_tb_therapy.value.match(/complete/i) ? true : false\n        : true\n    },\n    patientOnTpt(formData: any) {\n      if (formData.routine_tb_therapy != null) {\n        return /Currently/i.test(formData.routine_tb_therapy.value)\n      }\n      return this.tptStatus.tpt !== null && !this.completed3HP\n    },\n    /**\n     * Checks if 3HP can be auto selected based on FormData and \n     * if  it is enabled in global preferences\n     */\n    tptAutoSelectionMode(formData: any) {\n      return this.autoSelect3HP && !this.didCompleted3HP(formData)\n    },\n    /**\n     * Provides validations for TPT selections and value updates\n     */\n    async on3HPValueUpdate(listData: Option[], curOption: Option, formData: any) {\n      const is3HPorTPT = (i: Option) => i.label.match(/IPT|3HP/i) ? true : false\n\n      //Checks if IPT and 3HP are both selected and returns a boolean\n      const ipt3HPConflict: boolean = (() => {\n        const checkedDrugs = listData.reduce(\n        (checkedDrugs: string[], item: Option) => {\n          if (is3HPorTPT(item) \n            && !(item.label in checkedDrugs) \n            && item.isChecked) {\n            checkedDrugs.push(item.label)\n          }\n          return checkedDrugs\n        }, [])\n        return checkedDrugs.includes('IPT') \n          && (checkedDrugs.includes('3HP (RFP + INH)') \n          || checkedDrugs.includes('INH 300 / RFP 300 (3HP)'))\n      })()\n\n      // check if no tpt is present\n      const noTpTPresent = is3HPorTPT(curOption) \n        && listData.filter(i => is3HPorTPT(i)).map(i => !i.isChecked)\n          .every(Boolean)\n  \n      if (noTpTPresent && this.patientOnTpt(formData)) {\n        const modal = await optionsActionSheet(\n          'Reasons for declining TPT', \n          '',\n          [\n            'Patient declined',\n            'Side-effects (previous or current)',\n            'Stock-out',\n            'Starting TB treatment',\n            'Other'\n          ],\n          [\n            { name : 'Done', slot: 'start', role: 'action'}\n          ]\n        )\n        this.reasonForDecliningTPTObs = this.consultation.buildValueText(\n          'Other reason for not seeking services', modal.selection\n        )\n      } else {\n        this.reasonForDecliningTPTObs = {}\n      }\n\n      if (ipt3HPConflict) {\n        const action = await infoActionSheet(\n          \"IPT / 3HP conflict\",\n          \"IPT and 3HP can NOT be prescribed together\",\n          \"Please pick either one\",\n          [\n            { name: \"Prescribe 3HP\", slot: \"start\", color: \"primary\" },\n            { name: \"Prescribe IPT\", slot: \"end\", color: \"primary\" },\n          ]\n        )\n        return listData.map(i => {\n          if (is3HPorTPT(i)) {\n            i.isChecked =\n              action === 'Prescribe IPT' && i.label === 'IPT' || \n              action ==='Prescribe 3HP' && i.label === 'INH 300 / RFP 300 (3HP)'\n          }\n          return i\n        })\n      }\n      return listData.map(i => {\n        // By default, toggle between variants of 3HP. All of them cant be selected at once\n        if (curOption.label === '3HP (RFP + INH)' \n          && i.label === 'INH 300 / RFP 300 (3HP)'\n          && curOption.isChecked) {\n          i.isChecked = false\n        } else if (curOption.label === 'INH 300 / RFP 300 (3HP)' \n          && i.label === '3HP (RFP + INH)'\n          && curOption.isChecked ) {\n            i.isChecked = false\n        }\n        return i\n      })\n    },\n    medicationOrderOptions(formData: any, prechecked=[] as Option[]): Option[] {\n      this.isEligibleForTpt = false\n      const completedTpt = this.didCompleted3HP(formData)\n      const everTakenTpt = this.tptStatus.tpt !== null\n      const autoSelect3HP = this.tptAutoSelectionMode(formData)\n      const isCurrentlyBreastfeeding = this.isBreastFeeding(formData)\n\n      const disableOption = (text: string) => ({\n        disabled: true,\n        isChecked: false,\n        description: {\n          color: \"danger\",\n          show: \"always\",\n          text\n        }\n      })\n      return this.runAppendOptionParams([\n        this.toOption('ARVs', {\n          appendOptionParams: () => ({ \n            isChecked: autoSelect3HP && !this.TBSuspected\n          })\n        }),\n        this.toOption('CPT', {\n          appendOptionParams: () => {\n            if (autoSelect3HP && !this.TBSuspected \n              && !this.allergicToSulphur) {\n              return { isChecked : true }\n            }\n            return this.allergicToSulphur \n              ? disableOption('Allergic to CPT')\n              : { disabled: false }\n          }\n        }),\n        this.toOption('3HP (RFP + INH)', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentlyPregnant) return disableOption('Pregnant patient')\n            if (isCurrentlyBreastfeeding) return disableOption('Patient is breast feeding')\n            if (this.currentWeight < 20) return disableOption('Weight below regulation')\n            if (everTakenTpt && this.tptStatus.tpt !== '3HP (RFP + INH)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            this.isEligibleForTpt = true\n            if (this.tptStatus.tpt === '3HP (RFP + INH)' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('INH 300 / RFP 300 (3HP)', {\n          appendOptionParams: () => { \n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentlyPregnant) return disableOption('Pregnant patient')\n            if (isCurrentlyBreastfeeding) return disableOption('Patient is breast feeding')\n            if (this.currentWeight < 30) return disableOption('Weight below regulation') \n            if (everTakenTpt && this.tptStatus.tpt !== 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            this.isEligibleForTpt = true\n            if (this.tptStatus.tpt === 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) return { isChecked: true }\n            return { isChecked: autoSelect3HP }\n          }\n        }),\n        this.toOption('IPT', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentlyPregnant) return disableOption('Pregnant patient')\n            if (isCurrentlyBreastfeeding) return disableOption('Patient is breast feeding')\n            if (everTakenTpt && this.tptStatus.tpt !== 'IPT' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            this.isEligibleForTpt = true\n            if (this.tptStatus.tpt === 'IPT' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('NONE OF THE ABOVE')\n      ], prechecked)\n    },\n    async getVlLabData() {\n      return OrderService.formatLabs((await Store.get('GET_LAB_ORDERS_WITH_GIVEN_RESULT_STATUS', { patientID: this.patientID })));\n    },\n    isANCclient() {\n      return ProgramService.getSuspendedProgram() === 'ANC'\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"other_patient_prescription\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            const isGuardian = (await this.consultation.getClient()) === \"No\";\n            if (isGuardian) {\n              this.isNoneClientPatient = true\n            } else {\n              this.isNoneClientPatient = (await PatientTypeService.isDrugRefillPatient(this.patientID))\n                ? true : false\n            }\n            if (this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          beforeNext: async (v: Option[], f: any) => {\n            if (this.isEligibleForTpt && \n              !this.patientOnTpt(f) && \n              !v.some(d => /3hp|ipt/i.test(d.label))) {\n              if (!(await alertConfirmation(\"Are you sure you want to skip TPT prescription for eligible client?\"))) {\n                return false\n              }\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option[]) => ({ \n            tag: 'consultation',\n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, f: any) => {          \n            const list = this.disablePrescriptions(listData, value);\n            return this.on3HPValueUpdate(list, value, f)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, l: any) => {\n            return !isEmpty(l) ? l : this.medicationOrderOptions(formData)\n          },\n          condition: () => this.isNoneClientPatient,\n          exitsForm: () => true\n        },\n        /**\n        * DRUG TRANSFER IN INITIATION \n        */\n        ...generateDateFields({\n          id: 'date_last_received_arvs',\n          helpText: 'Last ARV Dispensation',\n          required: true,\n          init: async () => {\n            this.wasTransferredIn = (await this.getTransferInStatus()) || false\n            this.dateStartedArt = await this.getDateStartedArt()\n            return true\n          },\n          condition: () => this.wasTransferredIn,\n          minDate: () => this.dateStartedArt,\n          maxDate: () => this.consultation.getDate(),\n          computeValue: (date: string) => {\n            this.prescription.setDate(date)\n            return {\n              tag: 'consultation',\n              date,\n              obs: this.consultation.buildValueDate(\n                'Date drug received from previous facility', date\n              )\n            }\n          },\n          estimation: {\n            allowUnknown: false\n          }\n        }, this.consultation.getDate()),\n        {\n          id: 'previous_arvs_received',\n          helpText: 'Last ARV drugs dispensed',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          computedValue: (v: Option[]) => v.map(d => d.other),\n          validation: (v: Option[]) => Validation.required(v),\n          options: async () => {\n            if (!isEmpty(this.customRegimens)) return this.customRegimens\n            const p = new PrescriptionService(this.patientID, this.providerID)\n            this.customRegimens = (await p.getARVs())\n              .map((drug: any ) => ({\n                label: drug.name,\n                value: drug.drug_id,\n                other: { ...drug }\n              })) as Option[]\n            return this.customRegimens\n          },\n          config: {\n            showKeyboard: true\n          },\n          condition: () => this.wasTransferredIn\n        },\n        {\n          id: 'drug_interval',\n          helpText: 'Duration period for last received ARVs',\n          type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n          condition: () => this.wasTransferredIn,\n          validation: (val: Option) => Validation.required(val),\n          computedValue: (d: Option) => d.other.nextAppointment,\n          options: () => {\n            const intervals = [\n              { label: '2 weeks', value: 14 },\n              { label: '1 month', value: 28 },\n              { label: '2 months', value: 56 },\n              { label: '3 months', value: 84 },\n              { label: '4 months', value: 112 },\n              { label: '5 months', value: 140 },\n              { label: '6 months', value: 168 },\n              { label: '7 months', value: 196 },\n              { label: '8 months', value: 224 },\n              { label: '9 months', value: 252 },\n              { label: '10 months', value: 280 },\n              { label: '11 months', value: 308 },                        \n              { label: '12 months', value: 336 }\n            ]\n            return intervals.map(({label, value}: Option) => {\n              this.prescription.setNextVisitInterval(value)\n              const nextAppointment = this.prescription.calculateDateFromInterval()\n              return {\n                label,\n                value,\n                other: {\n                  label: 'Medication run-out date:',\n                  value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                  nextAppointment,\n                  other: {\n                    label: \"\",\n                    value: []\n                  }\n                }\n              }\n            })\n          }\n        },\n        {\n          id: 'arv_quantities',\n          helpText: 'Amount of drugs dispensed (From last ART Facility)',\n          type: FieldType.TT_DRUG_TRANSFER_IN,\n          validation: (v: Option[]) => this.validateSeries([\n            () => Validation.required(v),\n            () => v.map((i: Option) => i.value === '' || i?.other?.pillsBrought === '')\n              .some(Boolean) ? ['Some Drugs are missing values'] : null\n          ]),\n          computedValue: (v: Option[], f: any, c: any) => ({\n            tag: 'consultation',\n            obs:  v.map(async (d: any) => {\n              const drugID: number = d?.other?.drug?.drug_id || 0\n              return { \n                ...(await this.consultation.buildObs(\n                  'Drug received from previous facility', {\n                    'value_drug': drugID,\n                    'value_datetime': c?.drug_interval || null,\n                    'value_numeric': d?.value || 0\n                    }\n                )),\n                child: [(await this.consultation.buildObs(\n                  'Number of tablets brought to clinic', {\n                    'value_drug': drugID,\n                    'value_numeric': d?.other?.pillsBrought || -1,\n                    'value_datetime': c?.date_last_received_arvs?.date || null\n                  }\n              ))]}\n            })\n          }),\n          options: (_: any, c: any, listData: Option) => {\n            return c.previous_arvs_received\n              .map((d: any) => {\n                const drugName = d['alternative_drug_name'] || d['drug_name'] || d['name']\n                const prevValue = find(listData, { label: drugName })\n                let qty = ''\n                let rmndr = ''\n                if (prevValue) {\n                  qty = prevValue?.value\n                  rmndr = prevValue?.other?.pillsBrought\n                }\n                return {\n                  label: drugName,\n                  value: qty,\n                  other: {\n                    drug: d,\n                    pillsBrought: rmndr\n                  }\n                }\n              })\n          },\n          condition: () => this.wasTransferredIn\n        },\n        /**\n        * END OF DRUG TRANSFER IN\n        */\n        {\n          id: \"patient_lab_orders\",\n          helpText: \"Lab orders\",\n          type: FieldType.TT_LAB_ORDERS,\n          init: async () => {\n            this.labOrders = await this.getVlLabData()\n            return true\n          },\n          unload: async () => {\n            await this.checkVLReminder()\n            // Check if released results were given to the patient\n            const noGivenResults = this.labOrders.filter((r: any) => r.result_given === 'No')\n            if (noGivenResults.length && (await alertConfirmation('Result(s) Given to Client?'))) {\n              const enc = new AppEncounterService(this.patientID, -1, this.providerID)\n              // flatten array and save observations for results given\n              const obs = noGivenResults.reduce((all: any, result: any) => [\n                ...all, ...(result.resultIds.map(async (resultID: number) =>{\n                  enc.encounterID = result.encounter_id\n                  return enc.saveObs((await enc.buildObs(\"Result Given to Client\", {\n                      \"value_coded\": \"Yes\",\n                      \"obs_group_id\": resultID\n                    })))\n                })) \n              ], [])\n              await Promise.all(obs)\n            }\n            // refresh data\n            this.labOrders = await this.getVlLabData()\n          },\n          onload: (fieldContext: any) =>  this.labOrderFieldContext = fieldContext,\n          options: () => {\n            return [\n              {\n                label: \"Lab orders\",\n                value: \"order trail\",\n                other: {\n                  values: this.labOrders\n                }\n              }\n            ]\n          },\n          config: {\n            printOrder: (orderID: number) => {\n              return new PatientPrintoutService(this.patientID).printLabOrderLbl(orderID)\n            },\n            hiddenFooterBtns: [\"Clear\"],\n            footerBtns: [\n              {\n                name: \"Order\",\n                size: \"large\",\n                slot: \"end\",\n                color: \"primary\",\n                visible: true,\n                onClick: async () => {\n                  if (!isEmpty(this.labOrderFieldContext)) {\n                    await this.labOrderFieldContext.launchOrderSelection();\n                  }\n                }\n              }\n            ]\n          },\n        },\n        {\n          id: \"pregnant_breastfeeding\",\n          helpText: `Patient Pregnant or breastfeeding?`,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              if (this.patient.isChildBearing()) {\n                this.hasPregnancyObsToday = await this.patient.hasPregnancyObsToday()\n                this.currentlyPregnant = await this.patient.isPregnant()\n                this.currentlyBreastfeeding = await this.patient.isBreastfeeding();\n              }\n              this.onPermanentFPMethods = await this.consultation.getTLObs();\n            }\n            return true\n          },\n          condition: () => !this.hasPregnancyObsToday && this.pregnancyEligible(),\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded(d.other.concept, d.value)).concat(\n              this.isANCclient() ? [this.consultation.buildValueCoded('Is patient pregnant', 'Yes')] : []\n            ),\n          }),\n          options: (formData: any) => {\n            const options = []\n            // Because ANC clients are always Pregnant!\n            if (!this.isANCclient()) options.push({\n              label: \"Pregnant\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient pregnant\",\n              }\n            })\n\n            options.push({\n              label: \"Breastfeeding\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient breast feeding\",\n              }\n            })\n\n            return formData.pregnant_breastfeeding || options\n          }\n        },\n        {\n          id: \"patient_weight_chart\",\n          helpText: \"Patient weight chart\",\n          type: FieldType.TT_WEIGHT_CHART,\n          init: async () => {\n            this.weightTrail = await this.patient.getWeightHistory()\n            this.weightLossPercentageNum = this.patient.getWeightLossPercentageFromTrail(this.weightTrail)\n            this.lostTenPercentBodyWeight = this.weightLossPercentageNum >= 10\n            return true\n          },\n          options: async () => {\n            const bmi = await this.patient.getBMI();\n            const values = this.weightTrail;\n            return [\n              {\n                label: \"Weight for patient\",\n                value: \"Weight trail\",\n                other: {\n                  bmi,\n                  values: values.map((d: any) => ({\n                    x: HisDate.toStandardHisDisplayFormat(d.date),\n                    y: d.weight,\n                  })),\n                  age: this.patient.getAge(),\n                },\n              },\n            ];\n          },\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n        {\n          id: \"has_fp_methods\",\n          helpText: \"\",\n          type: FieldType.TT_TEXT_BANNER,\n          condition: () => this.onPermanentFPMethods,\n          options: () => this.mapStrToOptions([\n            \"Patient is on Tubal ligation method\"\n          ])\n        },\n        {\n          id: \"current_fp_methods\",\n          helpText: \"What method are you currently on?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.patientHitMenopause = await this.consultation.patientHitMenopause()\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded('Family planning method', d.value))\n          }),\n          condition: (formData: any) => this.showCurrentContraceptionMethods(formData),\n          options: (_: any, checked: Array<Option>) =>this.getFPMethods([], checked),\n        },\n        {\n          id: \"fp_methods\",\n          helpText: \"What method are you providing today?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          condition: (formData: any) => this.showNewContraceptionMethods(formData),\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map((d: Option) => this.consultation.buildValueCoded('Family planning, action to take', d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([], checked)\n        },\n        {\n          id: \"reason_for_no_fpm\",\n          helpText: \"Main reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.declinedFPM(formData),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Why does the woman not use birth control\", v.value) \n          }),\n          options: () => this.mapStrToOptions([\n            \"Not Sexually active\",\n            \"Patient want to get pregnant\",\n            \"Not needed for medical reasons\",\n            \"At risk of unplanned pregnancy\",\n            \"Menopause\"\n          ])\n        },\n        {\n          id: \"specific_reason_for_no_fpm\",\n          helpText: \"Specific reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Reason for not using contraceptives\", v.value)\n          }),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          options: () => this.mapStrToOptions([\n            \"Following wishes of spouse\",\n            \"Religious reasons\",\n            \"Afraid of side effects\",\n            \"Never though about it\",\n            \"Indifferent (does not mind getting pregnant)\"\n          ])\n        },\n        {\n          id: \"offer_contraceptives\",\n          helpText: \"Offer contraceptives\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          computedValue: (v: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Family planning, action to take\", v.value)\n          }),\n          options: () => [\n            { label: \"Accepted\", value: \"Yes\" },\n            { label: \"Declined\", value: \"No\" },\n            { label: \"Discuss with spouse\", value: \"Discuss with spouse\" },\n          ]\n        },\n        {\n          id: \"offered_intervention\",\n          helpText: \"Offered intervention\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => formData.offer_contraceptives.value === \"Accepted\",\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded(d.label, d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([\"NONE\"], checked),\n        },\n        {\n          id: \"offer_cxca\",\n          helpText: \"Refer client for CxCa screening\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.CxCaEnabled = await ART_PROP.cervicalCancerScreeningEnabled()\n              if (this.CxCaEnabled) {\n                const { start, end } = await ART_PROP.cervicalCancerScreeningAgeBounds()\n                this.CxCaMaxAge = end\n                this.CxCaStartAge = start\n                this.DueForCxCa = await this.consultation.clientDueForCxCa()\n                this.clientHadAHysterectomy =  await this.consultation.clientHasHadAHysterectomy();\n              }\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => this.canScreenCxCa() && !this.isPregnant(f),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded('Offer CxCa', v.value)\n          }),\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"cxca_reminder\",\n          helpText: \"CxCa Screening Reminder\",\n          type: FieldType.TT_TEXT_BANNER,\n          init: async () => {\n            if (this.CxCaEnabled && this.patient.isFemale()) {\n              this.CxCaAppointDate = await this.patient.nextAppointment(24)\n            }\n            return true;\n          },\n          condition: () => {\n            const ONE_MONTH = 30;\n            return ONE_MONTH < HisDate.dateDiffInDays(this.consultation.date, this.CxCaAppointDate)\n          },\n          options: () => this.mapStrToOptions([\n            `Patient is due for Cervical Cancer Screening on ${HisDate.toStandardHisDisplayFormat(this.CxCaAppointDate.appointment_date)}`\n          ])\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa\",\n          type: FieldType.TT_SELECT,\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => f.offer_cxca.value === 'No',\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Reason for NOT offering CxCa\", v.value)\n          }),\n          options: () => this.getReasonsForNoCxcaOptions(),\n        },\n        ...generateDateFields({\n          id: 'previous_cxca_test_date',\n          helpText: 'Previous CxCa test',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.reason_for_no_cxca.value === 'Not due for screening',\n          computeValue: (date: string, isEstimate: boolean) => {\n            if (isEstimate) {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDateEstimated('CxCa test date', date)\n              }\n            } else {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDate('CxCa test date', date) \n              }\n            }\n          },\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: 'previous_side_effects',\n          helpText: 'Side effects / Contraindications history',\n          type: FieldType.TT_DATA_TABLE,\n          init: async () => {\n            this.sideEffectsHistory = await this.consultation.getDrugSideEffects()\n            return true\n          },\n          config: {\n            columns: () => [\n              [\n                table.thTxt('Date'),\n                table.thTxt('Condition'),\n                table.thTxt('Drug induced'),\n                table.thTxt('Drug')\n              ]\n            ],\n            rows: () => {\n              return Object.keys(this.sideEffectsHistory)\n              .map((k: string) =>\n                Object.values(this.sideEffectsHistory[k])\n                .filter((d: any) => !isEmpty(d.name))\n                .map((d: any) => [\n                  table.tdDate(k),\n                  table.td(d.name),\n                  table.td(d.drug_induced ? 'Yes' : 'No'),\n                  table.td(d.drug)\n              ]))\n              .reduce((accum, cur) => accum.concat(cur), [])\n            }\n          }\n        },\n        {\n          id: \"side_effects\",\n          helpText: \"Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          init: async () => {\n            this.lastDrugsReceived = await this.consultation.getPreviousDrugs();\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Malawi ART side effects', d.label)),\n              child: [(await this.consultation.buildValueCoded(d.label, d.value))] \n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'malawiSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getContraindications(checked)\n        },\n        {\n          id: \"other_side_effects\",\n          helpText: \"Other Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          condition: (formData: any) => this.showOtherSideEffects(formData),\n          onConditionFalse: () => this.otherSideEffectReasonObs = [],\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.filter(d => d.label != 'Other (Specify)')\n              .map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Other side effect', d.label)),\n              child: [(await this.consultation.buildValueCoded(d.label, d.value))]\n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'otherSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getOtherContraindications(checked),\n        },\n        {\n          id: 'other_side_effect_specify',\n          helpText: \"Other Contraindications / Side effects (specify)\",\n          type: FieldType.TT_NOTE,\n          computedValue: async (v: Option) => ({\n            tag: 'consultation',\n            obs: {\n              ...(await this.consultation.buildValueCoded('Other side effect', 'Other (Specify)')),\n              child: [(await this.consultation.buildValueText('Other (Specify)', v.value ))]\n            }\n          }),\n          condition: (f: any) => this.inArray(\n            f.other_side_effects, d => d.label === \"Other (Specify)\" && d.value === 'Yes'\n          ),\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"on_tb_treatment\",\n          helpText: \"On TB Treatment?\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({ \n            tag: 'consultation', \n            obs: [ this.consultation.buildValueCoded(\"TB treatment\", data.value)].concat(this.isTBSuspect(data) \n              ? [this.consultation.buildValueCoded(\"TB Status\", \"Confirmed TB on treatment\")] \n              : []) \n          }),\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"tb_date_started_treatment_known\",\n          helpText: \"TB treatment history\",\n          type: FieldType.TT_YES_NO,\n          init: async () => {\n            // TODO: Account for TB interruptions in the future\n            this.hasTbTreatmentDate = false\n            const startDate = await ConsultationService.getFirstValueDatetime(\n              this.patientID, 'TB treatment start date'\n            )\n            const tbPeriod = await ConsultationService.getFirstValueNumber(\n              this.patientID, 'TB treatment period'\n            )\n            if (tbPeriod && startDate) {\n              const timeElapse = dayjs(this.consultation.date).diff(startDate, 'months')\n              this.hasTbTreatmentDate = timeElapse <= tbPeriod\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          condition: (f: any) => !this.hasTbTreatmentDate && f.on_tb_treatment.label === 'Yes',\n          options: () => {\n            return [\n              {\n                label: 'Date started treatment known?',\n                values: this.yesNoOptions()\n              }\n            ]\n          }\n        },\n        ...generateDateFields({\n          id: 'tb_start_date',\n          helpText: 'Enter start date for treatment?',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.tb_date_started_treatment_known === 'Yes',\n          computeValue: (date: string) => {\n            return {\n              tag: 'consultation',\n              obs: this.consultation.buildValueDate('TB treatment start date', date)\n            }\n          },\n          estimation: {\n            allowUnknown: false\n          }\n        }),\n        {\n          id: \"tb_treatment_period\",\n          helpText: \"Enter period (In months)\",\n          type: FieldType.TT_NUMBER,\n          validation: (v: Option) => Validation.validateSeries([\n            () => Validation.required(v),\n            () => Validation.isNumber(v),\n            () => Validation.rangeOf(v, 3, 9)\n          ]),\n          condition: (f: any) => f.tb_date_started_treatment_known === 'Yes',\n          computedValue: (v: Option) => {\n            return {\n              tag: 'consultation',\n              obs: this.consultation.buildValueNumber('TB treatment period', v.value)\n            }\n          }\n        },\n        {\n          id: \"tb_side_effects\",\n          helpText: \"TB Associated symptoms\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data)\n          ]), \n          condition: (formData: any) => formData.on_tb_treatment.value.match(/no/i),\n          options: (_: any, checked: Array<Option>) => this.getTBSymptoms(checked),\n          computedValue: (vals: Option[], formData: any) => ({\n            tag: 'consultation',\n            obs: vals.map(async (data: Option) => ({\n              ...(await this.consultation.buildValueCoded(\"Routine TB Screening\", data.label)),\n              child: [(await this.consultation.buildValueCoded(data.label, data.value))]\n            })).concat(this.hasTBSymptoms(formData) ? [] : [this.consultation.buildValueCoded(\"TB Status\", \"TB NOT suspected\")])\n          })\n        },\n        {\n          id: \"tb_status\",\n          helpText: \"TB Status\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.hasTBSymptoms(formData),\n          onConditionFalse: () => this.TBSuspected = false,\n          defaultValue: () => 'TB Suspected',\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"TB Status\", data.value)\n          }),\n          beforeNext: async (data: Option) => {\n            if (this.isTBSuspect(data)) {\n              const action = await infoActionSheet(\n                \"Lab Order\",\n                \"The patient is a TB suspect. Do you want to take lab orders?\",\n                \"\",\n                [\n                  { name: \"Order now\", slot: \"start\", color: \"success\" },\n                  { name: \"NOT now\", slot: \"end\", color: \"danger\" },\n                ]\n              )\n              if (action === 'Order now') this.labOrderFieldContext.launchOrderSelection([\n                'TB Microscopic Exam', \n                'GeneXpert', \n                'Culture & Sensitivity',\n                'TB Tests'\n              ])\n            }\n            return true\n          },\n          options: () => this.mapStrToOptions([\n            \"TB NOT suspected\",\n            \"TB Suspected\",\n            \"Confirmed TB Not on treatment\",\n          ])\n        },\n        {\n          id: \"routine_tb_therapy\",\n          helpText: \"TB preventive therapy (TPT) history\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            this.hasTbHistoryObs = await this.consultation.hasTreatmentHistoryObs()\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          condition: () => !this.hasTbHistoryObs,\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Previous TB treatment history\", data.value)\n          }),\n          options: (f: any) => {\n            let options: string[] = []\n            if(/no/i.test(f.on_tb_treatment.value)) {\n              options = [\n                \"Currently on IPT\",\n                \"Currently on 3HP (RFP + INH)\",\n                \"Currently on INH 300 / RFP 300 (3HP)\"\n              ]\n            }\n            options = options.concat([\n              \"Complete course of 3HP in the past (3 months RFP+INH)\",\n              \"Complete course of IPT in the past (min. 6 months of INH)\",\n              \"Aborted course of 3HP (RFP + INH) in the past\",\n              \"Aborted course of INH 300 / RFP 300 (3HP) in the past\",\n              \"Aborted course of IPT in the past\",\n              \"Never taken IPT or 3HP\"\n            ])\n            return this.mapStrToOptions(options)\n          }\n        },\n        ...generateDateFields({\n          id: 'date_started_tpt',\n          helpText: 'Started TPT Treatment',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          computeValue: (date: string) => date,\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: \"tpt_drugs_received\",\n          helpText: \"TPT Drugs Received\",\n          required: true,\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          type: FieldType.TT_ADHERENCE_INPUT,\n          options: (f: any) => this.getTptDrugs(f),\n          computedValue: (drugs: Option[], f: any, c: any) => ({\n            tag: 'consultation',\n            obs:  drugs.map(async (drug: any) => this.consultation.buildObs(\n              'TPT Drugs Received', \n              {\n                'value_drug': drug?.other?.drug_id || 0,\n                'value_datetime': c?.date_started_tpt || null,\n                'value_numeric': drug?.value || 0\n              }\n            ))\n          }),\n          config: {\n            titles: {\n              label: 'Drug name',\n              value: 'Tablets received'\n            }\n          }\n        },\n        {\n          id: 'tpt_tranfer_from',\n          helpText: 'Facility client is transferring in from',\n          type: FieldType.TT_SELECT,\n          computedValue: ({label}: Option) => ({\n            tag:'consultation',\n            obs: this.consultation.buildValueText(\n              'Location TPT last received', label\n            )\n          }),\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          options: (_: any, filter='') => getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true\n          }\n        },\n        {\n          id: \"allergic_to_sulphur\",\n          helpText: \"Allergic to Cotrimoxazole\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Allergic to sulphur\", data.value)\n          }),\n          beforeNext: (data: any) => {\n            this.isAllergicToSulphur(data);\n            console.log(this.allergicToSulphur)\n            return true;\n          },\n          options: () => this.yesNoUnknownOptions()\n        },\n        ...this.getAdherenceFields(true),\n        {\n          id: \"refer_to_clinician\",\n          helpText: \"Refer to clinician\",\n          type: FieldType.TT_SELECT,\n          condition: () => UserService.isNurse(),\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Refer to clinician\", data.value)\n          }),\n          options: () => this.yesNoOptions(),\n        },\n        {\n          id: \"medication_to_prescribe\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (!this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          beforeNext: async (v: Option[], f: any) => {\n            if (this.isEligibleForTpt &&\n                !this.patientOnTpt(f) &&\n                !v.some(d => /3hp|ipt/i.test(d.label))) {\n              if (!(await alertConfirmation(\"Are you sure you want to skip TPT prescription for eligible client?\"))) {\n                return false\n              }\n            }\n            return true\n          },\n          condition: (f: any) => !f.refer_to_clinician || `${f.refer_to_clinician.value}`.match(/no/i),\n          validation: (data: Option) => Validation.required(data),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation', \n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, formData: any) => {\n            const list =  this.disablePrescriptions(listData, value)\n            return this.on3HPValueUpdate(list, value, formData)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, currentOptions: any) => {\n            return this.medicationOrderOptions(formData, currentOptions)\n          },\n          config: {\n            footerBtns: [\n              {\n                name: \"Update allergic to CPT\",\n                onClickComponentEvents: {\n                  refreshOptions: (btnEvent: FooterBtnEvent, options: Option[], formData: any): Option[] => {\n                    this.allergicToSulphur = btnEvent.btnOutput === 'Allergic'\n                    return this.medicationOrderOptions(formData, options)\n                  }\n                },\n                onClick: () => {\n                  return infoActionSheet(\n                    \"Allergic to Cotrimoxazole update\",\n                    `Is the patient allergic to cotrimoxazole.`,\n                    \"\",\n                    [\n                      { name: \"Allergic\", slot: \"start\", color: \"success\" },\n                      { name: \"NOT Allergic\", slot: \"end\" },\n                    ]\n                  )\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Consultation.vue?vue&type=template&id=3d07250c&ts=true\"\nimport script from \"./Consultation.vue?vue&type=script&lang=ts\"\nexport * from \"./Consultation.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\"","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { DrugInterface } from \"@/interfaces/Drug\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { BPManagementService } from \"./htn_service\"\nimport dayjs from \"dayjs\"\n\nexport class AdherenceService extends AppEncounterService {\n    lastDrugs: Array<DrugInterface>\n    lastReceiptDate: string\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 68, providerID) //TODO: Use encounter type reference name\n        this.lastDrugs = []\n        this.lastReceiptDate = ''\n    }\n\n    async loadPreviousDrugs(optimiseHangingPills=false) {\n        const date = new Date(this.date)\n        date.setDate(date.getDate() - 1) // we don't want current date to count\n        const d = (date: string | Date) => HisDate.toStandardHisFormat(date)\n        const drugs = await AppEncounterService.getJson(\n            `patients/${this.patientID}/drugs_received`, { date: d(date) }\n        )\n        if (!isEmpty(drugs)) {\n            this.lastReceiptDate = drugs.reduce((receiptDate: string | null,  drug: any) => {\n                return !receiptDate || (new Date(d(drug.order.start_date)) > new Date(receiptDate))\n                    ?  d(drug.order.start_date)\n                    : receiptDate\n            }, null)\n            const htnDrugs = BPManagementService.htnDrugReferences().map((d: any) => d.drug_id)\n            this.lastDrugs = drugs.filter((drug: DrugInterface) => \n                !htnDrugs.includes(drug.drug['drug_id']) && d(drug.order.start_date) === this.lastReceiptDate\n            )\n            if (optimiseHangingPills) {\n                const lastPillCounts: Record<number, number> = (await this.getPreviousDrugPillCount()) || {}\n                this.lastDrugs = this.lastDrugs.map((d: DrugInterface) => {\n                    if (lastPillCounts[d.drug.drug_id] && d.quantity) {\n                        d.quantity += lastPillCounts[d.drug.drug_id]\n                    }\n                    return d\n                })\n            }\n        }\n    }\n\n    getReceiptDate() { return this.lastReceiptDate }\n\n    getLastDrugs() { return this.lastDrugs }\n\n    receivedDrugsBefore() { return !isEmpty(this.lastDrugs) }\n\n    buildPillCountObs(orderId: number, pillCount: number) {\n        return this.buildValueNumber('Number of tablets brought to clinic', pillCount, null, orderId)\n    }\n    \n    getPreviousDrugPillCount() {\n        return AppEncounterService.getJson('last_drugs_pill_count', {\n            'patient_id': this.patientID,\n            'program_id': this.programID,\n            'date': this.lastReceiptDate\n        })\n    }\n\n    async buildAdherenceObs(orderId: number, drugId: number, adherence: number) {\n        const concept = await AppEncounterService.getConceptID('Drug adherence', true)\n        return {\n            'concept_id': concept,\n            'value_numeric': adherence,\n            'value_drug': drugId,\n            'value_modifier': '%',\n            'order_id': orderId,\n            'person_id': this.patientID,\n            'obs_datetime': AppEncounterService.getSessionDate()\n        }\n    }\n\n    isAdherenceGood(adherence: number) {\n        return adherence >= 95 && adherence <= 105\n    }\n\n    calculateAdherence(given: number, pills: number, expected: number) {\n        return Math.round(100 * (given - pills) / (given - expected));\n    }\n\n    calculateExpected(\n        given: number, \n        equivalentDailyDose: number, \n        startDate: string, \n        frequency: 'QOD' | 'QW'\n    ) {\n        const timeUnit = frequency === 'QW' ? 'week' : 'day'\n        const daysGone = this.calcTimeElapsed(startDate, timeUnit);\n        return (given - (daysGone * parseFloat(equivalentDailyDose.toString())));\n    }\n\n    calcTimeElapsed(date1: string, timeUnit: 'week' | 'day') {\n        // Consider this example: 2022-01-28 to 2022-01-01 diff is supposed to give us a difference of 28 days. \n        // However, dayjs calculates it as a difference of 27 days. Adding a one to correct this issue for a better calculation\n        return dayjs(HisDate.toStandardHisFormat(this.date)).diff(HisDate.toStandardHisFormat(date1), timeUnit) + 1\n    }\n\n    calculateUnaccountedOrMissed(expected: string, actual: string) {\n        const exp = (parseFloat(expected) - parseFloat(actual));\n        return (exp < 0 ? ((exp * -1) + ' missed') : (exp + ' unacc'));\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning } from \"@/utils/Alerts\"\nimport { AdherenceService } from \"@/apps/ART/services/adherence_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from 'lodash'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        adherence: {} as any,\n        drugObs: [] as any,\n        askReasonForPoorAdherence: false,\n        calculationAgreementObs: [] as any,\n    }),\n    methods: {\n        async saveAdherence() {\n            await this.adherence.createEncounter()\n            const data = await Promise.all([...this.drugObs, ...this.calculationAgreementObs])\n            const obs = await this.adherence.saveObservationList(data)\n\n            if (!obs) return toastWarning('Unable to save patient observations')\n        },\n        buildAdherenceReport(data: any) {\n            const lastVisit = this.adherence.getReceiptDate()\n            const daysElapsed = this.adherence.calcTimeElapsed(lastVisit, 'day')\n            const timeElapse = ` Last visit: ${HisDate.toStandardHisDisplayFormat(lastVisit)} \n                (${daysElapsed} Days Elapsed)`\n            const rowColors = [{ indexes: [0, 3, 6], class: 'adherence-col-bg' }]\n            const cellColors: any = []\n            const columns = [timeElapse]\n            const rows = [\n                ['Prescription'],\n                ['Tabs given'],\n                ['Tabs per'],\n                ['Tabs remaining'],\n                ['Expected'],\n                ['Actual (counted)'],\n                ['Adherence'],\n                ['Doses missed/ Unaccounted for'],\n                ['Doses consumed'],\n                ['Art Adherence']\n            ]        \n            data.forEach((order: any, index: number) => {\n                const frequency = this.formatFrequency(order.frequency)\n                const expectedPills = this.calcPillsExpected(order)\n                const adherence = this.adherence.calculateAdherence(\n                    order.quantity, order.pillsBrought, expectedPills\n                )\n                const adherenceStatus = this.adherence.isAdherenceGood(adherence) \n                    ? 'Good adherence' \n                    : 'Explore problem'\n                const unAccountedDoses = this.adherence.calculateUnaccountedOrMissed(\n                    expectedPills, order.pillsBrought\n                )\n                columns.push(order.drug.name)\n                rows[0].push('')\n                rows[1].push(order.quantity)\n                rows[2].push(`${order.equivalent_daily_dose} <b>${frequency}</b>`)\n                rows[3].push('')\n                rows[4].push(expectedPills < 0 ? 0 : expectedPills)\n                rows[5].push(order.pillsBrought)\n                rows[6].push('')\n                rows[7].push(unAccountedDoses)\n                rows[8].push(`${adherence}%`)\n                rows[9].push(adherenceStatus)\n\n                cellColors.push({ \n                    index: index+1,\n                    row: 9, \n                    class: adherenceStatus.match(/good/i) ? 'adherence-txt-good' : 'adherence-txt-bad' \n                })\n            })\n            return [\n                { \n                    label: 'Selected Medication', \n                    value:'Table', \n                    other: { columns, rows, rowColors, cellColors }\n                }      \n            ]\n        },\n        formatFrequency(frequency: string) {\n            return `${frequency}`.match(/qod/i) \n                    ? 'QOD'\n                    : `${frequency}`.match(/weekly/i) \n                    ? 'QW'\n                    : frequency\n        },\n        calcPillsExpected(d: any) {\n            return this.adherence.calculateExpected(\n                d.quantity, \n                d.equivalent_daily_dose, \n                d.order.start_date,\n                this.formatFrequency(d.frequency) as 'QOD' | 'QW'\n            )\n        },\n        getAdherenceFields(checkDrugsBefore=false): Array<Field> {\n            return [\n                {\n                    id: 'pills_brought',\n                    helpText: 'Pills remaining (brought to clinic)',\n                    type: FieldType.TT_ADHERENCE_INPUT,\n                    init: async () => {\n                        this.adherence = new AdherenceService(this.patientID, this.providerID)\n                        await this.adherence.loadPreviousDrugs((await Store.get('ASK_HANGING_PILLS')))\n                        return true\n                    },\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    validation: (val: any) => {\n                        if (Validation.required(val)) return ['No drugs available']\n\n                        const empty = val.map((i: Option) => i.value === '')\n                        \n                        return  empty.some(Boolean) ? ['Some values are missing'] : null\n                    },\n                    unload: async (data: any) => {\n                        this.drugObs = []\n                        data.forEach(async(val: Option) => {\n                            const {drug, order } = val.other\n                            const data = { ...val.other, pillsBrought: val.value }\n                            const adherence = this.adherence.calculateAdherence(\n                                data.quantity, data.pillsBrought, this.calcPillsExpected(data)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildAdherenceObs(order.order_id, drug.drug_id, adherence)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildPillCountObs(order.order_id, val.value)\n                            )\n\n                            if (!this.askReasonForPoorAdherence) {\n                                this.askReasonForPoorAdherence = !this.adherence.isAdherenceGood(data)\n                            }\n                        })\n                    },\n                    options: (fdata: any) => {\n                        if (!isEmpty(fdata.pills_brought)) {\n                            return fdata.pills_brought\n                        }\n                        return this.adherence.getLastDrugs().map((data: any) => ({\n                            label: data.drug.name,\n                            value: '',\n                            other: {\n                                ...data\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: \"adherence_report\",\n                    helpText: \"ART adherence\",\n                    type: FieldType.TT_TABLE_VIEWER,\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    options: (d: any) => this.buildAdherenceReport(\n                        d.pills_brought.map((i: Option) => ({ \n                            ...i.other, pillsBrought: i.value\n                        }))\n                    ),\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    }\n                },\n                {\n                    id: \"agree_with_calculation\",\n                    helpText: \"Agree with adherence calculation\",\n                    type: FieldType.TT_SELECT,\n                    condition: () => this.askReasonForPoorAdherence,\n                    validation: (val: Option) => Validation.required(val),\n                    unload: ({ value }: Option) => {\n                        this.calculationAgreementObs = [ this.adherence.buildValueCoded(\n                            'Reason for poor treatment adherence', value\n                        )]\n                    },\n                    options: () => [\n                        { label: 'Yes', value: 'Yes' },\n                        { label: 'No', value: 'No' }\n                    ]\n                }\n            ]\n        }\n    }\n})\n","import script from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}