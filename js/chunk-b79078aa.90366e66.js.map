{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/encounters/Appointment.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","appointmentDate","medicationRunOutDate","appointment","app","App","getActiveApp","watch","ready","this","AppointmentService","patientID","providerID","init","immediate","methods","formData","computedData","encounter","createEncounter","toastWarning","appointmentObs","resolveObs","systemDateObs","buildValueDate","push","obs","saveObservationList","toastSuccess","printer","PatientPrintoutService","appsThatDoNotPrint","includes","applicationName","printVisitSummaryLbl","nextTask","appointments","getNextAppointment","appointment_date","drugs_run_out_date","getFields","e","gotoPatientDashboard","id","helpText","type","FieldType","TT_APPOINTMENTS_ENTRY","validation","val","Validation","required","computedValue","d","tag","value","config","patientAge","patient","getAge","hiddenFooterBtns","options","label","other","runOutDate","__exports__","AppEncounterService","constructor","super","programID","getProgramID","getJson","date","paginate"],"mappings":"yIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,MAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,OAAQV,EAAKU,OACbC,eAAgBX,EAAKY,SACrBC,aAAa,EACbC,sBAAuBd,EAAKe,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,0B,8GCG5BC,+BAAgB,CAC7BC,OAAQ,CAACC,QACTC,WAAY,CAAEC,wBACdC,KAAM,KAAM,CACVC,gBAAiB,GACjBC,qBAAsB,GACtBC,YAAa,GACbC,IAAKC,OAAIC,iBAGXC,MAAO,CACLC,MAAO,CACL,cAAcA,GACRA,IACFC,KAAKN,YAAc,IAAIO,OAAmBD,KAAKE,UAAWF,KAAKG,YAC/DH,KAAKI,SAGTC,WAAW,IAGfC,QAAS,CACP,eAAeC,EAAeC,GAC5B,MAAMC,QAAkBT,KAAKN,YAAYgB,kBAEzC,IAAKD,EAAW,OAAOE,eAAa,8BAEpC,MAAMC,QAAuBZ,KAAKa,WAAWL,EAAc,OACrDM,QAAsBd,KAAKN,YAAYqB,eAAe,iBAAkBf,KAAKR,iBACnFoB,EAAeI,KAAKF,GAEpB,MAAMG,QAAYjB,KAAKN,YAAYwB,oBAAoBN,GAEvD,IAAKK,EAAK,OAAON,eAAa,wBAE9BQ,eAAa,qBACb,MAAMC,EAAU,IAAIC,OAAuBrB,KAAKE,WAC1CoB,EAAqB,CAAC,OAAQ,OAChCA,EAAmBC,SAASvB,KAAKL,IAAI6B,wBACjCJ,EAAQK,uBAEhBzB,KAAK0B,YAEP,aACE,IACE,MAAMC,QAAqB3B,KAAKN,YAAYkC,qBAC5C5B,KAAKR,gBAAkBmC,EAAaE,iBACpC7B,KAAKP,qBAAuBkC,EAAaG,mBACzC9B,KAAKpB,OAASoB,KAAK+B,YACnB,MAAMC,GACNrB,eAAa,qCACbX,KAAKiC,yBAGTF,YACE,MAAO,CACL,CACEG,GAAI,kBACJC,SAAU,uBACVC,KAAMC,OAAUC,sBAChBC,WAAaC,GAAaC,OAAWC,SAASF,GAC9CG,cAAgBC,IACP,CACLC,IAAK,MACL5B,IAAKjB,KAAKN,YAAYqB,eAAe,mBAAoB6B,EAAEE,SAG/DC,OAAQ,CACNC,WAAYhD,KAAKiD,QAAQC,SACzBC,iBAAkB,CAChB,UAGJC,QAAS,IAAe,CAAC,CACvBC,MAAO,GACPP,MAAO,GACPQ,MAAO,CACNC,WAAavD,KAAKP,qBAClBD,gBAAiBQ,KAAKR,yB,qBCtFnC,MAAMgE,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASvF,KAErD,gB,oCCPf,kDAEM,MAAOgC,UAA2BwD,OACtCC,YAAYxD,EAAmBC,GAC7BwD,MAAMzD,EAAW,EAAGC,GAGE,2BACtB,MAAMyD,EAAYH,OAAoBI,eACtC,OAAOJ,OAAoBK,QAAQ,aAAaF,cAAsB5D,KAAKE,kCAAmC,CAAC6D,KAAM/D,KAAK+D,OAE1F,mCAACA,GACjC,MAAMH,EAAYH,OAAoBI,eACtC,OAAOJ,OAAoBK,QAAQ,aAAaF,wBAAiC,CAACG,KAAMA,EAAMC,UAAU","file":"js/chunk-b79078aa.90366e66.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { toastWarning, toastSuccess } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue';\nimport {AppointmentService} from '@/apps/ART/services/appointment_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport App from \"@/apps/app_lib\"\nimport { AppInterface } from \"@/apps/interfaces/AppInterface\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    appointmentDate: \"\" as any,\n    medicationRunOutDate: \"\" as any,\n    appointment: {} as any,\n    app: App.getActiveApp() as AppInterface,\n    \n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n          this.appointment = new AppointmentService(this.patientID, this.providerID)\n          this.init()\n        }\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computedData: any) {\n      const encounter = await this.appointment.createEncounter()\n\n      if (!encounter) return toastWarning('Unable to create encounter')\n\n      const appointmentObs = await this.resolveObs(computedData, 'obs');\n      const systemDateObs = await this.appointment.buildValueDate('Estimated date', this.appointmentDate);\n      appointmentObs.push(systemDateObs);\n\n      const obs = await this.appointment.saveObservationList(appointmentObs)\n\n      if (!obs) return toastWarning('Unable to create Obs')\n\n      toastSuccess('Encounter created')\n      const printer = new PatientPrintoutService(this.patientID);\n      const appsThatDoNotPrint = ['CxCa', 'ANC']\n      if(!appsThatDoNotPrint.includes(this.app.applicationName)) {\n        await printer.printVisitSummaryLbl();\n      }\n      this.nextTask()\n    },\n    async init() {\n      try {\n        const appointments = await this.appointment.getNextAppointment();\n        this.appointmentDate = appointments.appointment_date;\n        this.medicationRunOutDate = appointments.drugs_run_out_date; \n        this.fields = this.getFields();\n      } catch(e) {\n        toastWarning('Next appointment is not available')\n        this.gotoPatientDashboard()\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"set_appointment\",\n          helpText: \"Appointments booking\",\n          type: FieldType.TT_APPOINTMENTS_ENTRY,\n          validation: (val: any) => Validation.required(val),\n          computedValue: (d: Option) => {\n            return {\n              tag: 'obs',\n              obs: this.appointment.buildValueDate('Appointment date', d.value)\n            }\n          },\n          config: {\n            patientAge: this.patient.getAge(),\n            hiddenFooterBtns: [\n              'Clear'\n            ]\n          },\n          options: () =>  {return [{\n            label: \"\",\n            value: \"\",\n            other: {\n             runOutDate : this.medicationRunOutDate,\n             appointmentDate: this.appointmentDate\n            }\n          }]},\n        }\n      ]\n    }\n  }\n});\n","import { render } from \"./Appointment.vue?vue&type=template&id=c828e410&ts=true\"\nimport script from \"./Appointment.vue?vue&type=script&lang=ts\"\nexport * from \"./Appointment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class AppointmentService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 7, providerID);\n  }\n\n  async getNextAppointment() {\n    const programID = AppEncounterService.getProgramID();\n    return AppEncounterService.getJson(`/programs/${programID}/patients/${this.patientID}/next_appointment_date`, {date: this.date})\n  }\n  static async getDailiyAppointments(date: any) {\n    const programID = AppEncounterService.getProgramID();\n    return AppEncounterService.getJson(`/programs/${programID}/booked_appointments`, {date: date, paginate: false})\n  }\n\n}"],"sourceRoot":""}