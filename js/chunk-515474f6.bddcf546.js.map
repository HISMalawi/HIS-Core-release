{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue?26c6","webpack:///./src/apps/CxCa/services/CxCaTreatmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue?4c2f","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","TreatmentService","AppEncounterService","constructor","patientID","providerID","super","screeningResult","this","getFirstValueCoded","treatmentType","referralReason","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","reception","summaryData","watch","patient","getSummary","setReason","getFields","deep","methods","reason","showSampleCollected","reasons","includes","formData","computed","encounter","createEncounter","cxcaData","resolveObs","saveObservationList","toastWarning","programID","ProgramService","getProgramID","workflows","getProgramWorkflows","flows","forEach","w","states","f","conceptID","program_workflow_state_id","conceptName","concept","concept_names","name","stateValue","patient_outcome","value","concepid","ConceptService","getConceptID","state","getLocationName","date","getSessionDate","console","log","saveState","createState","nextTask","id","helpText","type","FieldType","TT_DATA_TABLE","config","rows","Object","keys","map","k","table","td","dataTableConfig","showIndex","TT_SELECT","validation","val","Validation","required","options","label","computedValue","obs","buildValueCoded","yesNoOptions","condition","are_figo_staging_results_available","mapOptions","are_histological_results_after_lletz_available","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","offlineID","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","computedData","saveObsOffline","observations","uploadStatus","encounterTypeID","meta","labOrders","synchronizeRecord","skipNextTask","nextOfflineFlow","error","runflowState","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","toastDanger","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","_p$person","names","_p$person2","latestName","toOption","other","mapStrToOptions","items","i","path","task","nextPatientWorkflowActivity","patientUrl","toYesNoOption","values","option","toConditionalOptions","final","yesNoUnknownOptions","tag","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","isCondition","ignored","undefined","prop","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-515474f6.bddcf546.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class TreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 182, providerID) //TODO: Use encounter type reference name'\n    }\n    async getSummary() {\n        const screeningResult = await this.getFirstValueCoded('Screening results');\n        const treatmentType = await this.getFirstValueCoded('Directly observed treatment option');\n        const referralReason = await this.getFirstValueCoded('Referral reason');\n        return {\n          'Screening Result': screeningResult,\n          'Treatment Type': treatmentType,\n          'Referral Reason': referralReason ? referralReason : \"N/A\"  \n        }\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { TreatmentService } from \"@/apps/CxCa/services/CxCaTreatmentService\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ProgramWorkflow } from \"@/interfaces/program_workflow\";\nimport table from \"@/components/DataViews/tables/ReportDataTable\";\nimport { Service } from \"@/services/service\";\nimport { ConceptService } from \"@/services/concept_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    reception: {} as any,\n    summaryData: {} as any,\n    referralReason: \"\"\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.reception = new TreatmentService(this.patientID, this.providerID);\n        this.summaryData = await this.reception.getSummary();\n        await this.setReason();\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async setReason() {\n      const reason = await this.reception.getFirstValueCoded('Referral reason');\n      this.referralReason = reason ? reason : \"N/A\"\n\n    },\n    showSampleCollected() {\n      const reasons = ['Large Lesion (>75%)','Suspect cancer', 'Further Investigation and Management'];\n      return reasons.includes(this.referralReason);\n    },\n    async onFinish(formData: any, computed: any) {\n      const encounter = await this.reception.createEncounter();\n      //Using the approach I got from the Diagnosis.vue file\n      const cxcaData = await this.resolveObs({...computed})\n      //save the data\n      await this.reception.saveObservationList(cxcaData)\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const programID = ProgramService.getProgramID();\n      const workflows: ProgramWorkflow[] =\n        await ProgramService.getProgramWorkflows(ProgramService.getProgramID());\n      const flows = {} as any;\n      workflows.forEach((w) => {\n        w.states.forEach((f) => {\n          const conceptID = f.program_workflow_state_id;\n          const conceptName = f.concept.concept_names[0].name;\n          flows[conceptName] = conceptID;\n        });\n      });\n      \n      const stateValue = formData.patient_outcome ? formData.patient_outcome.value : 'Continue follow-up';\n      //getting the concept ID for flow[stateValue] to prevent the bad request bug that occurs when the stateValue is undefined\n      const concepid = await ConceptService.getConceptID(stateValue);\n      //assigning the concept ID to flow[stateValue] to prevent the undefined bug\n      flows[stateValue] = concepid;\n\n      const state = {\n        'location_id': ProgramService.getLocationName(),\n        state: flows[stateValue],\n        date: ProgramService.getSessionDate(),\n      };\n      console.log(\"STATE \", state)\n      const saveState = await ProgramService.createState(\n        this.patientID,\n        programID,\n        state\n      );\n\n      if (!saveState) return toastWarning(\"Unable to update state\");\n      this.nextTask();\n    },\n\n    getFields(): any {\n      return [\n        {\n          id: \"screening_summary\",\n          helpText: \"Screening Summary\",\n          type: FieldType.TT_DATA_TABLE,\n          config: {\n            rows: () => {\n              return Object.keys(this.summaryData).map((k: string) => {\n                return [table.td(k), table.td(this.summaryData[k])];\n              });\n            },\n            dataTableConfig: {\n              showIndex: false\n            },\n          },\n        },\n        //New referral work flow implemented here\n        {\n          id: \"type_of_referral\",\n          helpText: \"Type of referral visit\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return [\n              { label: 'Initial/1st visit to referral facility', value: 'Initial visit' },\n              { label: 'Follow-up visit', value: 'Follow-up' }\n            ]},\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Referral reason', value.value)\n          })\n        },\n        {\n          id: \"cervix_screening_assessment\",\n          helpText: \"Cervix Screening Assessment\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () =>{\n            return [\n                  { label: 'STI Infection', value: 'STI Infection' },\n                  { label: 'VIA Negative', value: 'VIA Negative' },\n                  { label: 'VIA Positive', value: 'VIA Positive' },\n                  { label: 'PAP Smear Normal', value: 'PAP Smear Normal' },\n                  { label: 'PAP Smear Abnormal', value: 'PAP Smear Abnormal' },\n                  { label: 'No Visible Lesion (After Speculum)', value: 'No visible Lesion' },\n                  { label: 'Suspected Cancer', value: 'Suspected Cancer' }\n              ]},\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Cervix screening assessment', value.value)\n          })\n        },\n        {\n            id: 'are_figo_staging_results_available',\n            helpText: 'Are FIGO staging results available?',\n            type: FieldType.TT_SELECT,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.yesNoOptions(),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Are FIGO staging results available', value.value) //Please build this observation using the buildValueCoded method\n          })\n        },\n        {\n          id: \"figo_staging_results\",\n          helpText: \"FIGO staging results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => f.are_figo_staging_results_available.value === 'Yes',\n          options: () =>\n            this.mapOptions([\n              'Cervical stage 1',\n              'Cervical stage 2',\n              'Cervical stage 3',\n              'Cervical stage 4',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('FIGO staging of cervical cancer', value.label)\n          })\n        },\n        {\n          id: \"type_of_sample_collected\",\n          helpText: \"Type of sample collected\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () =>\n            this.mapOptions([\n              'Punch Biopsy',\n              'LLETZ/LEEP Sample',\n              'Cone Biopsy Sample',\n            ]),\n          computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Sample', value.label)\n          })\n        },\n        {\n            id: 'are_histological_results_after_lletz_available',\n            helpText: 'Are Histological results after LLETZ available?',\n            type: FieldType.TT_SELECT,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.yesNoOptions(),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Are Histological results after LLETZ available', value.label)\n          })\n        },\n        {\n          id: \"histology_results_after_lletz\",\n          helpText: \"Histology Results After LLETZ\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => f.are_histological_results_after_lletz_available.value === 'Yes',\n          options: () =>\n            this.mapOptions([\n              'Normal',\n              'Chronic Cervicitis',\n              'Schistosomiasis',\n              'Tuberculosis(TB)',\n              'CIN 1',\n              'CIN 2',\n              'CIN 3',\n              'Carcinoma in Situ',\n              'Invasive cancer of cervix',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Sample', value.label)\n          })\n        },\n        {\n          id: \"complications_during_lletz_leep_biopsy\",\n          helpText: \"Complications During LLETZ/LEEP Biopsy\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return [\n                { label: 'None (N/A)', value: 'None' },\n                { label: 'Excessive Bleeding or pain', value: 'Excessive Bleeding or pain' }\n              ]},\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Complications During LLETZ/LEEP Biopsy', value.value)\n          })\n        },\n        {\n          id: \"complications_after_lletz_leep_biopsy\",\n          helpText: \"Complications After LLETZ/LEEP Biopsy\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return [\n                  { label: 'None (N/A)', value: 'None' },\n                  { label: 'Excessive Bleeding or pain', value: 'Excessive Bleeding or pain' }\n              ]},\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Complications After LLETZ/LEEP Biopsy', value.value)\n          })\n        },\n        {\n          id: \"treatment_provided\",\n          helpText: \"Treatment Provided\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () =>\n            this.mapOptions([\n              'Hysterectomy',\n              'Chemotherapy',\n              'Palliative Care',\n              'LLETZ/LEEP',\n            ]),\n          computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Treatment', value.label)\n          })\n        },\n        {\n          id: \"recommended_care_after_lletz_histology\",\n          helpText: \"Recommended Care After LLETZ Histology\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.summaryData['Treatment Type'] !== \"Same day treatment\",\n          options: () =>\n            this.mapOptions([\n              'Hysterectomy',\n              'Trachelectomy',\n              'Discharged',\n              'Continue follow-up',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Recommended Care After LLETZ Histology', value.label)\n          })\n        },\n        {\n          id: \"patient_outcome\",\n          helpText: \"Patient outcome\",\n          type: FieldType.TT_SELECT,\n          condition: () => this.summaryData['Treatment Type'] !== \"Same day treatment\",\n          validation: (val: any) => Validation.required(val),\n          options: () =>\n            this.mapOptions([\n              'On-going Palliative Care',\n              'No Dysplasia/Cancer',\n              'Death',\n            ]),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTreatment.vue?vue&type=template&id=5668416b&ts=true\"\nimport script from \"./CxCaTreatment.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTreatment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n                Offline().saveObsOffline({\n                    observations: obs,\n                    id: this.offlineID,\n                    uploadStatus: status,\n                    encounterName: this.$route.name,\n                    encounterTypeID: params.encounterTypeID,\n                    meta: params.formData,\n                    labOrders: params.labOrders,\n                    created\n                }, created)\n                Offline().synchronizeRecord(this.offlineID)\n                if (!params.skipNextTask) this.nextOfflineFlow()\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            // if (!this.isOfflineMode()) {\n            //     try {\n            //         const enc = new AppEncounterService(\n            //             this.patientID,\n            //             params.encounterTypeID, \n            //             this.providerID\n            //         )\n            //         if ((await enc.createEncounter())) {\n            //             if ((await enc.saveObservationList(obs as ObsValue[]))) {\n            //                 status = 'Success'\n            //             }\n            //         }\n            //         if (typeof params.callback === 'function') {\n            //             await params.callback(enc)\n            //         }\n            //         created = true\n            //     } catch (e) {\n            //         created = false\n            //         if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n            //             status = 'NetworkError'\n            //         } else {\n            //             status = 'Exception'\n            //             console.error(`Exception while saving an encounter: ${e}`)\n            //         }\n            //     }\n            //     if (status === 'Exception') {\n            //         return toastDanger(\"An error has occured!\")\n            //     }\n            // }\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextOfflineFlow() {\n            const task = Offline().nextPatientWorkflowActivity(this.patientID)\n            if (!task || !task.patientUrl) return this.$router.push(`/patient/dashboard/${this.patientID}`)\n            return this.$router.push(`${task.patientUrl}/${this.patientID}`) \n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}