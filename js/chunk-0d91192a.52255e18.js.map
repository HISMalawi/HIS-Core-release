{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/composables/storage.ts","webpack:///./src/apps/ANC/Views/Encounters/CurrentPregnancy.vue?3305","webpack:///./src/apps/ANC/Views/Encounters/CurrentPregnancy.vue","webpack:///./src/apps/ANC/Views/Encounters/CurrentPregnancy.vue?9e49","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/apps/ANC/Services/anc_current_pregnancy.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","saveObsOffline","observations","id","uploadStatus","encounterTypeID","meta","formData","labOrders","synchronizeRecord","skipNextTask","nextOfflineFlow","error","toastWarning","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","toastDanger","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","toOption","label","other","mapStrToOptions","items","i","path","task","nextPatientWorkflowActivity","patientUrl","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","constructor","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","onerror","filters","openCursor","cursor","filteredData","continue","put","delete","item","entries","every","isInteger","toLower","includes","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","_","IonPage","mixins","EncounterMixinVue","service","watch","AncCurrentPregnancyService","getFields","immediate","enrollPatient","RecordConflictError","warn","createEncounter","saveObservationList","buildDelieveryDateObs","lmpDate","buildValueDate","estimateDelieveryDate","calculateWeekOfFirstVisit","proxyID","helpText","FieldType","TT_ANC_LMP_DATE_INPUT","computedValue","v","beforeNext","gestationWeeks","alertConfirmation","validation","Validation","today","config","initialDate","date","calculateDelieveryDate","calculateGestationWeeks","allowUnknown","TT_NUMBER","f","lnmp","calculateGestationDateFromPeriod","rangeOf","TT_SELECT","getFacilities","footerBtns","onClickComponentEvents","setValue","getLocationName","onClick","showKeyboard","isFilterDataViaApi","buildValueCoded","isCondition","ignored","undefined","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","offlineStorage","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village_id","super","PatientProgramService","enrollProgram","setStateDate","setStateId","updateState","lnmpDate","theDate","setDate","getDate","s","Math","floor","period","subtract","endOf","format","setMonth","getMonth","month","AppendleadingZero","day","getFullYear"],"mappings":"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","file":"js/chunk-0d91192a.52255e18.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n                Offline().saveObsOffline({\n                    observations: obs,\n                    id: this.offlineID,\n                    uploadStatus: status,\n                    encounterName: this.$route.name,\n                    encounterTypeID: params.encounterTypeID,\n                    meta: params.formData,\n                    labOrders: params.labOrders,\n                    created\n                }, created)\n                Offline().synchronizeRecord(this.offlineID)\n                if (!params.skipNextTask) this.nextOfflineFlow()\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            // if (!this.isOfflineMode()) {\n            //     try {\n            //         const enc = new AppEncounterService(\n            //             this.patientID,\n            //             params.encounterTypeID, \n            //             this.providerID\n            //         )\n            //         if ((await enc.createEncounter())) {\n            //             if ((await enc.saveObservationList(obs as ObsValue[]))) {\n            //                 status = 'Success'\n            //             }\n            //         }\n            //         if (typeof params.callback === 'function') {\n            //             await params.callback(enc)\n            //         }\n            //         created = true\n            //     } catch (e) {\n            //         created = false\n            //         if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n            //             status = 'NetworkError'\n            //         } else {\n            //             status = 'Exception'\n            //             console.error(`Exception while saving an encounter: ${e}`)\n            //         }\n            //     }\n            //     if (status === 'Exception') {\n            //         return toastDanger(\"An error has occured!\")\n            //     }\n            // }\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextOfflineFlow() {\n            const task = Offline().nextPatientWorkflowActivity(this.patientID)\n            if (!task || !task.patientUrl) return this.$router.push(`/patient/dashboard/${this.patientID}`)\n            return this.$router.push(`${task.patientUrl}/${this.patientID}`) \n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncCurrentPregnancyService } from \"@/apps/ANC/Services/anc_current_pregnancy\"\nimport { Field, FooterBtnEvent, Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { ObsValue } from '@/services/observation_service'\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport HisDate from \"@/utils/Date\"\nimport { alertConfirmation } from '@/utils/Alerts'\nimport { RecordConflictError } from '@/services/service'\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n            this.service = new AncCurrentPregnancyService(this.patientID, this.providerID)\n            this.fields = this.getFields()\n        } \n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      try {\n        await this.service.enrollPatient()\n      } catch (e) {\n       if(e instanceof RecordConflictError) {\n        console.warn(`${e}`)\n       } else {\n         throw e\n       }\n      }\n      const obs = await this.resolveObs(computedData)\n      await this.service.createEncounter()\n      await this.service.saveObservationList(obs as ObsValue[])\n      this.nextTask()\n    },\n    buildDelieveryDateObs(lmpDate: string) {\n      if (lmpDate != 'Unknown') {\n        return [\n          this.service.buildValueDate('Last menstrual period', lmpDate),\n          this.service.buildValueDate('Estimated date of delivery', \n            this.service.estimateDelieveryDate(lmpDate)\n          ),\n          this.service.buildValueNumber('Week of First Visit', \n            this.service.calculateWeekOfFirstVisit(lmpDate)\n          )\n        ]\n      }\n    },\n    getFields(): Field[] {\n        return [\n            {\n                id: 'lnmp',\n                proxyID: 'delivery_date',\n                helpText: 'Last Normal Menstrual Period',\n                type: FieldType.TT_ANC_LMP_DATE_INPUT,\n                computedValue: (v: Option) => this.buildDelieveryDateObs(v.value as string),\n                beforeNext: async (v: Option) => {\n                  const gestationWeeks = parseInt(v.other)\n                  if (typeof gestationWeeks === 'number') {\n                    if (gestationWeeks <= 0 || gestationWeeks > 42) {\n                      if ((await alertConfirmation('Gestation weeks out of range of 0-42. Are you sure you want to continue?'))) {\n                        return true\n                      } else {\n                        return false\n                      }\n                    }\n                  }\n                  return true\n                },\n                validation: (v: Option) => this.validateSeries([\n                  () => Validation.required(v),\n                  () => {\n                      if (v.value) {\n                        const lmpDate = new Date(v.value)\n                        const today = new Date()\n                        if (lmpDate > today) {\n                          return ['Last menstrual period cannot be in the future']\n                        }\n                      }\n                      return null\n                  }\n                ]),\n                config: {\n                    initialDate: () => this.service.date,\n                    calculateDelieveryDate: (d: string) => HisDate.toStandardHisDisplayFormat(\n                      this.service.estimateDelieveryDate(d)\n                    ),\n                    calculateGestationWeeks: (d: string) => this.service.calculateWeekOfFirstVisit(d),\n                    allowUnknown: true\n                }\n            },\n            {\n                id: 'estimate_lmp',\n                proxyID: 'delivery_date',\n                helpText: 'Gestation (months)',\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.lnmp.value === 'Unknown',\n                computedValue: (v: Option) => {\n                    return this.buildDelieveryDateObs(this.service.calculateGestationDateFromPeriod(v.value))\n                },\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 10)\n                ])\n            },\n            {\n                id: 'planned_delivery_place',\n                helpText: 'Planned delivery place',\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => this.service.buildValueText('Planned Delivery Place', v.label),\n                validation: (v: Option) => Validation.required(v),\n                options: (_: any, filter='') => getFacilities(filter),\n                config: {\n                    footerBtns: [\n                      {\n                        name: \"Here\",\n                        slot: \"end\",\n                        onClickComponentEvents: {\n                          setValue: () => {\n                            return AncCurrentPregnancyService.getLocationName()\n                          }\n                        },\n                        onClick: () => null\n                      }\n                    ],\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            },\n            {\n                id: 'bed_net_available_for_use',\n                helpText: 'Mosquito net in good condition available for own use',\n                type: FieldType.TT_SELECT,\n                condition: () => false, /// Feature disabled\n                computedValue: (v: Option) => this.service.buildValueCoded('Do you use bed nets', v.value),\n                validation: (v: Option) => Validation.required(v),\n                options: () => {\n                    return this.yesNoOptions()\n                }\n            },\n            {\n                id: 'bed_net_given',\n                helpText: 'Bed net given today',\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => this.service.buildValueCoded('Mosquito net started', v.value),\n                validation: (v: Option) => Validation.required(v),\n                options: () => {\n                    return this.yesNoOptions()\n                }\n            },\n            {\n                id: 'previous_td_given',\n                helpText: 'Previous TD given before this pregnancy',\n                type: FieldType.TT_NUMBER,\n                computedValue: (v: Option) => this.service.buildValueNumber('TD Booster', v.value), //Previously called TTV\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    }\n  }\n})\n","import { render } from \"./CurrentPregnancy.vue?vue&type=template&id=1b1257b6&ts=true\"\nimport script from \"./CurrentPregnancy.vue?vue&type=script&lang=ts\"\nexport * from \"./CurrentPregnancy.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { PatientProgramService } from \"@/services/patient_program_service\"\nimport dayjs from \"dayjs\";\nimport { AppendleadingZero } from \"@/utils/Strs\";\n\nexport class AncCurrentPregnancyService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 81, providerID)\n    }\n\n    async enrollPatient() {\n        const program = new PatientProgramService(this.patientID)\n        /**\n         * TODO: Check if patient is already enrolled first\n        */\n        await program.enrollProgram()\n        program.setStateDate(this.date)\n        program.setStateId(118) //Currently on treatment state... Please remove this ID hack if you can\n        await program.updateState()\n    }\n\n    calculateWeekOfFirstVisit(lnmpDate: string) {\n        const theDate: any = new Date(lnmpDate)\n        theDate.setDate(theDate.getDate() + 7);\n        const today: any = new Date(this.getDate());\n        const s = today - theDate;\n        return String(Math.floor(s / (24 * 60 * 60 * 7 * 1000)));\n    }\n\n    calculateGestationDateFromPeriod(period: number) {\n        return dayjs(this.date).subtract(period, 'months').endOf('month').format('YYYY-MM-DD')\n    }\n\n    estimateDelieveryDate(lnmpDate: string) {\n        const theDate: any = new Date(lnmpDate)\n        theDate.setDate(theDate.getDate() + 7);\n        theDate.setMonth(theDate.getMonth() + 9);\n        const month = AppendleadingZero(theDate.getMonth()+1)\n        const day = AppendleadingZero(theDate.getDate())\n        return `${theDate.getFullYear()}-${month}-${day}`\n    }\n}\n"],"sourceRoot":""}