{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/apps/HTS/views/encounters/HtsTesting.vue?fb7e","webpack:///./src/apps/HTS/services/hts_testing_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsTesting.vue","webpack:///./src/apps/HTS/views/encounters/HtsTesting.vue?f681","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","isEnrolledInProgam","formLabel","ready","watch","handler","route","params","patient_id","this","toUpperCase","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","nextTask","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","onFinishAction","onFinish","cancelDestinationPath","_","HtsTestingService","AppEncounterService","constructor","super","getRecentAccesspoint","getFirstValueCoded","IonPage","mixins","EncounterMixinVue","service","accessPointTypeField","facilityAccessPointField","communityAccessPoints","testsOfferedField","lastHivTestResultField","lastHivTestTypeField","lastTimeHIVTestedField","arvHistoryField","drugTakenField","mostRecentDrugHiddenField","timeSinceDrugTaken","clientRiskCategoryField","testResultsField","hivTestKitDetailsField","hivResultHiddenField","recencyTestConsetField","hivPatientCategoryField","recencyTestField","isDBSsampleCollected","dbsSpecimenID","computedData","createEncounter","saveObservationList","PatientProgramService","enrollProgram","invalidate","inclonclusiveResultDialog","testOffered","formData","test","tests_offered","some","id","helpText","type","FieldType","TT_SELECT","isRequired","finalComputedValue","buildValueCoded","f","accesspoint_type","buildValueText","TT_MULTIPLE_SELECT","onValue","isChecked","alertConfirmation","opt","selected","includes","last_hiv_result","defaultOutput","defaultComputedOutput","TT_AGE_INPUT","beforeNext","monthsAgoInt","validation","Date","date","getAge","config","excludeUnits","TT_MULTIPLE_YES_NO","concept","last_taken_drugs","TT_HIDDEN","defaultValue","fdata","buildObs","value_text","value_datetime","SESSION_KIT_NAMES","SESSION_KIT_ID","kitHistory","JSON","parse","sessionStorage","getItem","kitOptions","getSessionKitValue","testName","attr","TT_INPUT_ARRAY","test_results","t","columns","someIncomplete","count","x","incomplete","mem","c","forEach","l","setItem","stringify","parentObs","childObs","child","testResults","test_kit","kitNameOption","kitName","usefontBold","kitLotNoOption","buildValueNumber","onclick","val","keyboard","TT_TEXT","kitExpiryDateOption","buildValueDate","TT_FULL_DATE","toDate","enteredKits","existingOption","shortName","isStatus","summaryMapValue","onValueUpdate","results","testOneIsPositive","testTwoIsPositive","disable","disabled","r","category","undefined","accessPoint","resultModel","prevResults","defaultOption","existingResult","result","appearInSummary","onload","hasLastTestPerfomed","last_hiv_perfomed","hasLastHivResult","testOneResult","testTwoResult","testThreeResult","testOneRepeat","isCommunity","lastHIVResult","lastTestPerfomed","inconclusiveNegativeForPreviousPositiveProfessional","Negative","Positive","Inconclusive","keys","finalResult","key","every","Boolean","offerRecency","TT_YES_NO","init","hiv_test_one","recency_test_consent","recency_test","dbs_sample_collection","hivStatusCategory","hiv_result","newHivStatus","clientAge","lastHivResult","lastTypeOfTestPerformed","lastTimeHivTestedInMonths","last_time_hiv_tested","hivCategoryRef","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","String","required","$emit","isCondition","ignored","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info"],"mappings":"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","file":"js/chunk-155b4dd8.ab96576f.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Testing\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsTestingService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 197, providerID)\n    }\n\n    getRecentAccesspoint() {\n        return this.getFirstValueCoded('HTS Access Type')\n    }\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport { ObsValue } from \"@/services/observation_service\";\nimport { HtsTestingService } from \"@/apps/HTS/services/hts_testing_service\";\nimport { alertConfirmation } from \"@/utils/Alerts\";\nimport { infoActionSheet } from \"@/utils/ActionSheets\";\nimport { PatientProgramService } from \"@/services/patient_program_service\";\nimport Store from \"@/composables/ApiStore\";\nimport keyboard, { numericKeypad } from \"@/utils/PopupKeyboard\";\nimport { find, isEmpty } from \"lodash\";\nimport { toDate } from \"@/utils/Strs\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsTestingService(this.patientID, this.providerID);\n          this.fields = [\n            this.accessPointTypeField(),\n            this.facilityAccessPointField(),\n            this.communityAccessPoints(),\n            this.testsOfferedField(),\n            this.lastHivTestResultField(),\n            this.lastHivTestTypeField(),\n            this.lastTimeHIVTestedField(),\n            this.arvHistoryField(),\n            this.drugTakenField(),\n            this.mostRecentDrugHiddenField(),\n            this.timeSinceDrugTaken(),\n            this.clientRiskCategoryField(),\n            this.testResultsField(),\n            this.hivTestKitDetailsField(),\n            this.hivResultHiddenField(),\n            this.recencyTestConsetField(),\n            this.hivPatientCategoryField(),\n            this.recencyTestField(),\n            this.isDBSsampleCollected(),\n            this.dbsSpecimenID(),\n          ];\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData);\n      await this.service.createEncounter();\n      await this.service.saveObservationList(obs as ObsValue[]);\n      if (!this.facts.isEnrolledInProgam) {\n        await new PatientProgramService(this.patientID).enrollProgram();\n        Store.invalidate(\"PATIENT_PROGRAM\");\n      }\n      this.nextTask();\n    },\n    inclonclusiveResultDialog() {\n      return infoActionSheet(\n        \"Reschedule test\",\n        \"\",\n        \"HIV result is inconclusive, schedule another test in 2 weeks\",\n        [{ name: \"Ok\", slot: \"start\" }]\n      );\n    },\n    testOffered(formData: any, test: string) {\n      return formData.tests_offered.some((v: Option) => v.value === test);\n    },\n    accessPointTypeField(): Field {\n      return {\n        id: \"accesspoint_type\",\n        helpText: \"Access point type\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\"HTS Access Type\", v.value),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\"Health Facility\", \"Community\"]);\n        },\n      };\n    },\n    facilityAccessPointField(): Field {\n      return {\n        id: \"facility_access_points\",\n        helpText: \"Health facility access points\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) => f.accesspoint_type.value === \"Health Facility\",\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              v.value\n            ),\n          };\n        },\n        options: () => {\n          return this.toConditionalOptions([\n            [\"VCT\"],\n            [\"ANC First Visit\"],\n            [\"Inpatient\"],\n            [\"STI\"],\n            [\"PMTCT FUP\"],\n            [\"Index\"],\n            [\"Paediatric\"],\n            [\"VMMC\"],\n            [\"Malnutrition\"],\n            [\"TB\"],\n            [\"OPD\"],\n            [\"Other PITC\"],\n            [\"SNS\"],\n          ]);\n        },\n      };\n    },\n    communityAccessPoints(): Field {\n      return {\n        id: \"community_access_points\",\n        helpText: \"Community access points\",\n        type: FieldType.TT_SELECT,\n        condition: (f: any) => f.accesspoint_type.value === \"Community\",\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              v.value\n            ),\n          };\n        },\n        options: () => {\n          return this.toConditionalOptions([\n            [\"VCT\"],\n            [\"Index\"],\n            [\"VMMC\"],\n            [\"Other\"],\n            [\"SNS\"],\n            [\"Mobile\"],\n          ]);\n        },\n      };\n    },\n    testsOfferedField(): Field {\n      return {\n        id: \"tests_offered\",\n        helpText: \"Tests to be offered today?\",\n        type: FieldType.TT_MULTIPLE_SELECT,\n        isRequired: () => true,\n        onValue: async (v: Option) => {\n          if (v.value === \"HIV\" && v.isChecked) {\n            return (await alertConfirmation(\n              \"Does client consent for HIV testing?\"\n            ))\n              ? true\n              : false;\n          }\n          return true;\n        },\n        options: (f: any) => {\n          const opt = (v: string) => {\n            const selected = f.tests_offered\n              ? f.tests_offered.some((d: Option) => d.value === v)\n              : false;\n            return { label: v, value: v, isChecked: selected };\n          };\n          return [opt(\"HIV\"), opt(\"Syphilis\"), opt(\"Hepatitis B\")];\n        },\n      };\n    },\n    lastHivTestResultField(): Field {\n      return {\n        id: \"last_hiv_result\",\n        helpText: \"Last HIV Test\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Previous HIV Test Results\",\n              v.value\n            ),\n          };\n        },\n        options: () => {\n          return this.toConditionalOptions([\n            [\"Never Tested\"],\n            [\"Negative\"],\n            [\"Positive\"],\n            [\"Exposed infant\"],\n            [\"Invalid or inconclusive\"],\n          ]);\n        },\n      };\n    },\n    lastHivTestTypeField(): Field {\n      return {\n        id: \"last_hiv_perfomed\",\n        helpText: \"Last HIV test performed\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) =>\n          ![\"Never Tested\", \"Exposed infant\"].includes(f.last_hiv_result.value),\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Previous HIV test done\",\n              v.value\n            ),\n          };\n        },\n        defaultOutput: (f: any) => {\n          if (/exposed infant/i.test(f.last_hiv_result.value)) {\n            return {\n              label: \"Professional\",\n              value: \"Professional\",\n            };\n          }\n          return undefined;\n        },\n        defaultComputedOutput: (f: any) => {\n          if (/exposed infant/i.test(f.last_hiv_result.value)) {\n            return {\n              obs: this.service.buildValueCoded(\n                \"Previous HIV test done\",\n                \"Professional\"\n              ),\n            };\n          }\n          return undefined;\n        },\n        options: (f: any) => {\n          return this.toConditionalOptions([\n            [\"Self\"],\n            [\n              \"Initial professional\",\n              !/Negative|Inconclusive/i.test(f.last_hiv_result.value),\n            ],\n            [\"Professional\"],\n          ]);\n        },\n      };\n    },\n    lastTimeHIVTestedField(): Field {\n      return {\n        id: \"last_time_hiv_tested\",\n        helpText: \"Time since last HIV test\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_hiv_result.value && f.last_hiv_result.value != \"Never Tested\",\n        isRequired: () => true,\n        beforeNext: async (v: Option, f: any) => {\n          if (v.other.monthsAgoInt >= 12 && !this.testOffered(f, \"HIV\")) {\n            await infoActionSheet(\n              \"Recommendation Alert\",\n              \"\",\n              \"Please consider testing client for HIV\",\n              [\n                {\n                  name: \"Ok\",\n                  slot: \"start\",\n                  color: \"primary\",\n                },\n              ]\n            );\n          }\n          return true;\n        },\n        validation: (v: Option) => {\n          if (parseInt(`${v.other.value}`) <= 0) {\n            return [\"Enter a number greater than zero\"];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          if (new Date(v.other.date) < new Date(this.patient.getBirthdate())) {\n            return [\n              `${\n                v.label\n              } is greater than client's age of ${this.patient.getAge()} Years`,\n            ];\n          }\n          return null;\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueText(\n              \"Time of HIV test\",\n              `${v.value} ago`\n            ),\n          };\n        },\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    },\n    arvHistoryField(): Field {\n      return {\n        id: \"last_taken_drugs\",\n        helpText: \"Ever taken the following drugs?\",\n        type: FieldType.TT_MULTIPLE_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v.map((d) =>\n              this.service.buildValueCoded(d.other.concept, d.value)\n            ),\n          };\n        },\n        options: (f: any) => {\n          if (f.last_taken_drugs) return f.last_taken_drugs;\n          return [\n            this.toYesNoOption(\"PrEP or infant NVP\", {\n              concept: \"Taken Prep before\",\n            }),\n            this.toYesNoOption(\"ART\", { concept: \"Taken ARV Before\" }),\n            this.toYesNoOption(\"PEP\", { concept: \"Taken PEP before\" }),\n          ];\n        },\n      };\n    },\n    drugTakenField(): Field {\n      /**\n       * Select Most recent drug from list of drugs\n       */\n      return {\n        id: \"drug_taken\",\n        helpText: \"Most recent drug taken\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) =>\n          f.last_taken_drugs.filter((d: Option) => d.value === \"Yes\").length >\n          1,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Most recent drug taken\",\n              v.value\n            ),\n          };\n        },\n        options: (f: any) => {\n          return f.last_taken_drugs\n            .filter((d: Option) => d.value === \"Yes\")\n            .map((d: Option) => this.toOption(d.label));\n        },\n      };\n    },\n    mostRecentDrugHiddenField(): Field {\n      /**\n       * Automatically determines recent drug if only one drug is Yes\n       */\n      return {\n        id: \"most_recent_drug\",\n        helpText: \"Most recent drug\",\n        type: FieldType.TT_HIDDEN,\n        condition: (f: any) =>\n          f.last_taken_drugs.filter((d: Option) => d.value === \"Yes\").length ===\n          1,\n        defaultValue: (fdata?) => {\n          return find(fdata.last_taken_drugs, { value: \"Yes\" });\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Most recent drug taken\",\n              v.value\n            ),\n          };\n        },\n      };\n    },\n    timeSinceDrugTaken(): Field {\n      return {\n        id: \"time_since_last_drug_taken\",\n        helpText: \"Time since last taken medication\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_taken_drugs.some((d: Option) => d.value === \"Yes\"),\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildObs(\"Time since last taken medication\", {\n              value_text: `${v.value} ago`,\n              value_datetime: v.other.date,\n            }),\n          };\n        },\n        validation: (v: Option) => {\n          if (parseInt(`${v.other.value}`) <= 0) {\n            return [\"Enter a number greater than zero\"];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          if (new Date(v.other.date) < new Date(this.patient.getBirthdate())) {\n            return [\n              `${\n                v.label\n              } is greater than client's age of ${this.patient.getAge()} Years`,\n            ];\n          }\n          return null;\n        },\n        isRequired: () => true,\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    },\n    clientRiskCategoryField(): Field {\n      return {\n        id: \"client_risk_category\",\n        helpText: \"Client Risk Category\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\"client risk category\", v.value),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\n            \"Low risk\",\n            \"On-going risk\",\n            \"High risk event in last 3 months\",\n            \"Risk assessment not done\",\n          ]);\n        },\n      };\n    },\n    hivTestKitDetailsField(): Field {\n      const SESSION_KIT_NAMES = \"htsProfessionalKitNames\";\n      const SESSION_KIT_ID = \"htsProfessionalKitData\";\n      let kitHistory: any = JSON.parse(\n        sessionStorage.getItem(SESSION_KIT_ID) || \"{}\"\n      );\n      let kitOptions: Option[] | [] = JSON.parse(\n        sessionStorage.getItem(SESSION_KIT_NAMES) || \"[]\"\n      );\n      const getSessionKitValue = (testName: string, attr: string) => {\n        if (kitHistory[testName]) return kitHistory[testName][attr] || \"\";\n        return \"\";\n      };\n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        condition: (f: any) => f.test_results.some((t: Option) => t.value != \"\"),\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 3;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        finalComputedValue: (v: Option[]) => {\n          // Cache stuff in session storage taking advantage when creating computed values\n          const mem: any = v.reduce((a: any, c: any) => {\n            if (!a[c.label]) a[c.label] = {};\n            c.other.fields.forEach(\n              (l: Option) => (a[c.label][l.label] = l.value)\n            );\n            return a;\n          }, kitHistory);\n          sessionStorage.setItem(SESSION_KIT_NAMES, JSON.stringify(kitOptions));\n          sessionStorage.setItem(SESSION_KIT_ID, JSON.stringify(mem));\n          return {\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        options: async (f: any) => {\n          const testResults: Option[] = Array.isArray(f.test_results) ? f.test_results : [];\n          if (!isEmpty(kitHistory) && f.test_kit === null) {\n            if (!(await alertConfirmation('Do you want to re-use previously entered KIT information?'))) {\n              kitHistory = {}\n            }\n          }\n          const kitNameOption = (kitName: string) => ({\n            label: \"Kit Name\",\n            value: kitName,\n            other: {\n              usefontBold: true,\n              obs: (v: Option) => this.service.buildValueText(\"Kit name\", v.value),\n            }\n          });\n          const kitLotNoOption = (d: Option) => ({\n            label: \"Kit Lot No.\",\n            value: getSessionKitValue(d.label, \"Kit Lot No.\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueNumber(\"Kit lot number\", v.value),\n              onclick: (val: Option) => {\n                keyboard({\n                  id: 'lot',\n                  helpText: 'Enter Lot Number',\n                  type: FieldType.TT_TEXT,\n                  isRequired: () => true\n                }, (v: Option) => {\n                  val.value = v.value\n                })\n              },\n            },\n          });\n          const kitExpiryDateOption = (d: Option) => ({\n            label: \"Kit Expiry Date\",\n            value: getSessionKitValue(d.label, \"Kit Expiry Date\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueDate(\"kit expiry date\", v.value),\n              onclick: (val: Option) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(this.service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(this.service.date),\n                        ];\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => (val.value = v.value)\n                );\n              },\n            },\n          });\n          const enteredKits = f.test_kit === null ? [] : f.test_kit;\n          return testResults\n            .filter((t) => t.value != \"\")\n            .map((t) => {\n              const existingOption = find(enteredKits, { label: t.label });\n              if (existingOption) return existingOption;\n              return {\n                label: t.label,\n                value: \"\",\n                other: {\n                  fields: [\n                    kitNameOption(t.other.shortName),\n                    kitLotNoOption(t),\n                    kitExpiryDateOption(t)\n                  ]\n                }\n              };\n            });\n        },\n      };\n    },\n    testResultsField(): Field {\n      const isStatus = (l: Option[], test: string, status: string) =>\n        find(l, {\n          value: status,\n          other: { id: test },\n        })\n          ? true\n          : false;\n      return {\n        id: \"test_results\",\n        helpText: \"Test results\",\n        type: FieldType.TT_MULTIPLE_YES_NO,\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => {\n          if (v.value != \"\") return v;\n        },\n        beforeNext: async (v: Option[]) => {\n          if (\n            (isStatus(v, \"test_2\", \"Negative\") &&\n              isStatus(v, \"test_1_repeat\", \"Positive\")) ||\n            (isStatus(v, \"test_2\", \"Positive\") &&\n              isStatus(v, \"test_3\", \"Negative\"))\n          ) {\n            await this.inclonclusiveResultDialog();\n          }\n          return true;\n        },\n        onValueUpdate: (l: Option[], v: any, f: any) => {\n          // Manage Three test algorithm for HIV results\n          if (\n            this.testOffered(f, \"HIV\") &&\n            f.accesspoint_type.value === \"Health Facility\"\n          ) {\n            const results: Option[] = [...l];\n            const testOneIsPositive = isStatus(results, \"test_1\", \"Positive\");\n            const testTwoIsPositive = isStatus(results, \"test_2\", \"Positive\");\n            const disable = (test: string, disabled: boolean) => {\n              results.forEach((r) => {\n                if (r.other.id === test) {\n                  r.disabled = disabled;\n                  if (disabled) r.value = \"\";\n                }\n              });\n            };\n            if (testOneIsPositive) {\n              disable(\"test_2\", false);\n            } else {\n              disable(\"test_2\", true);\n              disable(\"test_3\", true);\n              disable(\"test_1_repeat\", true);\n              return results;\n            }\n            if (testOneIsPositive && testTwoIsPositive) {\n              disable(\"test_3\", false);\n              disable(\"test_1_repeat\", true);\n              return results;\n            }\n            if (\n              testOneIsPositive &&\n              !testTwoIsPositive &&\n              l.some((d) => d.other.id === \"test_2\" && d.value != \"\")\n            ) {\n              disable(\"test_1_repeat\", false);\n              disable(\"test_3\", true);\n            }\n            return results;\n          }\n          return l;\n        },\n        validation: (v: Option[]) => {\n          if (v.some((d) => d.value === \"\" && !d.disabled)) {\n            return [\"Result entry incomplete!\"];\n          }\n          return null;\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v\n              .filter((d) => d.value && typeof d.other.obs === \"function\")\n              .map((d) => d.other.obs(d)),\n          };\n        },\n        condition: (f: any) => f.tests_offered.length,\n        options: (f: any) => {\n          const option = (params = {} as any) => {\n            return {\n              label: params.name,\n              value: \"\",\n              disabled:\n                typeof params?.disabled === \"boolean\" ? params.disabled : false,\n              other: {\n                id: params?.id || \"\",\n                concept: params?.concept || \"\",\n                shortName: params?.shortName || \"\",\n                category: params?.category || \"\",\n                obs: typeof params?.obs === \"function\" ? params.obs : undefined,\n                accessPoint: params?.accessPoint || \"*\",\n                values: [this.toOption(\"Positive\"), this.toOption(\"Negative\")],\n              },\n            };\n          };\n          const resultModel: Option[] = [\n            option({\n              id: \"test_1\",\n              name: \"HIV Test 1 (Determine)\",\n              category: \"HIV\",\n              shortName: \"Determine\",\n              concept: \"Test 1\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: \"test_2\",\n              name: \"HIV Test 2 (Unigold)\",\n              category: \"HIV\",\n              disabled: true,\n              accessPoint: \"Health Facility\",\n              shortName: \"Unigold\",\n              concept: \"Test 2\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: \"test_1_repeat\",\n              name: \"HIV Test 1 (Determine) Repeat\",\n              category: \"HIV\",\n              disabled: true,\n              shortName: \"Determine (Repeat)\",\n              accessPoint: \"Health Facility\",\n              concept: \"Immediate Repeat Test 1 Result\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: \"test_3\",\n              name: \"HIV Test 3 (Bioline)\",\n              category: \"HIV\",\n              disabled: true,\n              shortName: \"Bioline\",\n              accessPoint: \"Health Facility\",\n              concept: \"Test 3\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              name: \"Syphilis Test Result\",\n              category: \"Syphilis\",\n              shortName: \"Syphilis\",\n              concept: \"Syphilis Test Result\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              name: \"Hepatitis B Test Result\",\n              category: \"Hepatitis B\",\n              shortName: \"Hepatitis B\",\n              concept: \"Hepatitis B Test Result\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n          ];\n          const accessPoint = f.accesspoint_type.value;\n          const prevResults = Array.isArray(f.test_results)\n            ? f.test_results\n            : [];\n          // Merge previous entered results to default result model\n          const results: Option[] = resultModel.reduce(\n            (all: any, defaultOption: Option) => {\n              const existingResult = find(prevResults, {\n                label: defaultOption.label,\n              });\n              if (existingResult) {\n                if (\n                  existingResult.other.accessPoint != \"*\" &&\n                  existingResult.other.accessPoint != accessPoint\n                ) {\n                  existingResult.value = \"\";\n                }\n                all.push(existingResult);\n              } else {\n                all.push(defaultOption);\n              }\n              return all;\n            },\n            [] as Option[]\n          );\n          // Filter options by selected tests offered and access point field values\n          return f.tests_offered.reduce((all: Option[], c: Option) => {\n            const options: Option[] = results.filter(\n              (r: Option) =>\n                r.other.category === c.value &&\n                (r.other.accessPoint === accessPoint ||\n                  r.other.accessPoint === \"*\")\n            );\n            return options.length ? all.concat(options) : all;\n          }, []);\n        },\n      };\n    },\n    hivResultHiddenField(): Field {\n      let result = \"\";\n      return {\n        id: \"hiv_result\",\n        helpText: \"HIV Result\",\n        type: FieldType.TT_HIDDEN,\n        appearInSummary: () => false,\n        condition: (f: any) => this.testOffered(f, \"HIV\"),\n        onload: (f: any) => {\n          let hasLastTestPerfomed = f.last_hiv_perfomed != null;\n          let hasLastHivResult = f.last_hiv_result != null;\n          let testOneResult = \"\";\n          let testTwoResult = \"\";\n          let testThreeResult = \"\";\n          let testOneRepeat = \"\";\n          const testResults = f.test_results != null ? f.test_results : [];\n          const isCommunity = f.accesspoint_type.value === \"Community\";\n          const lastHIVResult = () => f.last_hiv_result?.value;\n          const lastTestPerfomed = () => f.last_hiv_perfomed?.value;\n          testResults.forEach((r: Option) => {\n            switch (r.other.id) {\n              case \"test_1\":\n                testOneResult = r.value as string;\n                break;\n              case \"test_2\":\n                testTwoResult = r.value as string;\n                break;\n              case \"test_3\":\n                testThreeResult = r.value as string;\n                break;\n              case \"test_1_repeat\":\n                testOneRepeat = r.value as string;\n                break;\n            }\n          });\n          const inconclusiveNegativeForPreviousPositiveProfessional = () =>\n            hasLastHivResult &&\n            hasLastTestPerfomed &&\n            lastHIVResult() === \"Positive\" &&\n            lastTestPerfomed() === \"Professional\" &&\n            (testOneResult === \"Negative\" ||\n              testTwoResult === \"Negative\" ||\n              testThreeResult === \"Negative\");\n          const results: any = {\n            Negative: () => [\n              !inconclusiveNegativeForPreviousPositiveProfessional(),\n              testOneResult === \"Negative\" ||\n                testTwoResult === \"Negative\" ||\n                testThreeResult === \"Negative\" ||\n                testOneRepeat === \"Negative\",\n            ],\n            Positive: () => [!isCommunity, testThreeResult === \"Positive\"],\n            Inconclusive: () => [\n              !isCommunity,\n              inconclusiveNegativeForPreviousPositiveProfessional() ||\n                (testTwoResult === \"Negative\" &&\n                  testOneRepeat === \"Positive\") ||\n                (testTwoResult === \"Positive\" &&\n                  testThreeResult === \"Negative\"),\n            ],\n            \"Refer client to HIV Clinic\": () => [\n              isCommunity,\n              testOneResult === \"Positive\",\n            ],\n          };\n          result = Object.keys(results).reduce((finalResult: any, key: any) => {\n            if (results[key]().every(Boolean)) return key;\n            return finalResult;\n          }, \"Not indicated\");\n        },\n        defaultValue: () => {\n          if (result) return this.toOption(result);\n        },\n        finalComputedValue: () => {\n          if (result) {\n            return {\n              obs: this.service.buildValueCoded(\"HIV status\", result),\n            };\n          }\n        },\n      };\n    },\n    recencyTestConsetField(): Field {\n      let offerRecency = true;\n      return {\n        id: \"recency_test_consent\",\n        helpText: \"Consent\",\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        init: async () => {\n          offerRecency = await Store.get(\"OFFER_RECENCY\");\n          return true;\n        },\n        condition: (f: any) =>\n          offerRecency &&\n          /facility/i.test(f.accesspoint_type.value) &&\n          f.hiv_test_one.value === \"Positive\",\n        finalComputedValue: (v: any) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Patient consents to recency test\",\n              v\n            ),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Does client consent for Recency Testing?\",\n              value: \"\",\n              values: this.yesNoOptions(),\n            },\n          ];\n        },\n      };\n    },\n    recencyTestField(): Field {\n      return {\n        id: \"recency_test\",\n        helpText: \"Recency Test\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) => f.recency_test_consent === \"Yes\",\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\"Recency Test\", v.value),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\n            \"Long-Term\",\n            \"Recent\",\n            \"Negative\",\n            \"Invalid\",\n          ]);\n        },\n      };\n    },\n    isDBSsampleCollected(): Field {\n      return {\n        id: \"dbs_sample_collection\",\n        helpText: \"DBS Sample\",\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        condition: (f: any) => f.recency_test.value === \"Recent\",\n        finalComputedValue: (v: any) => {\n          return {\n            obs: this.service.buildValueCoded(\"Is DBS Sample Collected\", v),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Is DBS Sample Collected?\",\n              value: \"\",\n              values: this.yesNoOptions(),\n            },\n          ];\n        },\n      };\n    },\n    dbsSpecimenID(): Field {\n      return {\n        id: \"dbs_specimen_id\",\n        helpText: \"DBS Specimen ID\",\n        type: FieldType.TT_TEXT,\n        condition: (f: any) => f.dbs_sample_collection === \"Yes\",\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueText(\"DBS Specimen ID\", v.value),\n          };\n        },\n        validation: (v: Option) => {\n          // Match 2 letters at the beginning of the string, then check the next sequence for 5 digits\n          if (!/^[A-Z]{2}[0-9]{5}$/i.test(`${v.value}`)) {\n            return [\n              `Invalid DBS Specimen ID \"${v.value}\". Expected format of 2 Letters and 5 Digits`,\n            ];\n          }\n          return null;\n        },\n        isRequired: () => true,\n      };\n    },\n    hivPatientCategoryField(): Field {\n      let hivStatusCategory = \"N/A\";\n      return {\n        id: \"patient_category\",\n        helpText: \"Result given to client\",\n        type: FieldType.TT_HIDDEN,\n        onload: (f: any) => {\n          if (!f.hiv_result) return;\n          const newHivStatus = f.hiv_result.value;\n          const clientAge = this.patient.getAge();\n          const lastHivResult = f.last_hiv_result.value;\n          const lastTypeOfTestPerformed =\n            f.last_hiv_perfomed != null ? f.last_hiv_perfomed.value : \"\";\n          const lastTimeHivTestedInMonths =\n            f.last_time_hiv_tested != null\n              ? f.last_time_hiv_tested.other.monthsAgoInt\n              : -1;\n\n          const hivCategoryRef: Record<string, boolean[]> = {\n            \"New exposed infant\": [\n              clientAge <= 0,\n              newHivStatus === \"Positive\",\n              /exposed|inconclusive|negative/i.test(lastHivResult) ||\n                (lastHivResult === \"Positive\" &&\n                  /initial professional|self/i.test(lastTypeOfTestPerformed)),\n            ],\n            \"New Positive\": [\n              newHivStatus === \"Positive\",\n              /never tested|negative|exposed|inconclusive/i.test(\n                lastHivResult\n              ) ||\n                (lastHivResult === \"Positive\" &&\n                  /initial professional|self/i.test(lastTypeOfTestPerformed) &&\n                  lastTimeHivTestedInMonths > 12),\n            ],\n            \"Confirmatory Positive\": [\n              newHivStatus === \"Positive\",\n              lastHivResult === \"Positive\",\n              lastTypeOfTestPerformed === \"Professional\",\n              lastTimeHivTestedInMonths <= 12,\n            ],\n            \"Confirmatory Inconclusive\": [\n              lastTypeOfTestPerformed === \"Professional\",\n              lastTimeHivTestedInMonths <= 12,\n              newHivStatus === \"Inconclusive\",\n            ],\n            \"New Negative\": [newHivStatus === \"Negative\"],\n            \"New Inconclusive\": [\n              newHivStatus === \"Inconclusive\",\n              /never tested|negative|exposed infant/i.test(lastHivResult) ||\n                (lastHivResult === \"Positive\" &&\n                  /self|initial professional/i.test(lastTypeOfTestPerformed)),\n            ],\n          };\n          hivStatusCategory = Object.keys(hivCategoryRef).reduce(\n            (status: string, key: string) =>\n              hivCategoryRef[key].every(Boolean) ? key : status,\n            \"N/A\"\n          );\n        },\n        defaultValue: () => {\n          if (hivStatusCategory != \"N/A\")\n            return this.toOption(hivStatusCategory);\n        },\n        finalComputedValue: () => {\n          if (hivStatusCategory != \"N/A\") {\n            return {\n              obs: this.service.buildValueCoded(\"HIV group\", hivStatusCategory),\n            };\n          }\n        },\n        condition: (f: any) => f.hiv_result.value,\n      };\n    },\n  },\n});\n","import { render } from \"./HtsTesting.vue?vue&type=template&id=48875476&ts=true\"\nimport script from \"./HtsTesting.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsTesting.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}