{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?a9f5","webpack:///./src/apps/CxCa/services/CxCaAssessmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?ba10","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","id","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","AssessmentService","constructor","super","_defineProperty","hivStatus","artStatus","arvNumber","arvStartDate","getHivStatus","getArtStatus","getArvNumber","getArvStartDate","isHivPositive","match","res","getJson","mixins","EncounterMixinVue","assessment","showHIVQuestions","alreadyEnrolled","offerCxCa","watch","Patientservice","getProgramInformation","current_outcome","ConceptService","getConceptsByCategory","loadArtStatus","setOfferCxCa","getFields","deep","encounter","vals","keys","forEach","element","toastSuccess","getFirstValueCoded","buildValueCoded","hasHIVStatus","enterPreviousCxCaData","everHadCxCa","ever_had_cxca","resultsAvailable","results_available","getFacilities","getReasonsForNoCxcaOptions","c","helpText","FieldType","TT_SELECT","validation","val","Validation","computedValue","generateDateFields","hiv_status","minDate","maxDate","getDate","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","computeValue","date","isEstimate","buildValueDate","reason_for_visit","_","config","showKeyboard","isFilterDataViaApi","offer_CxCa","facilities","LocationService","f","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-2d7b0dba.5ac8a320.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class AssessmentService extends AppEncounterService {\n    \n    hivStatus: string;\n    artStatus: string;\n    arvNumber: string;\n    arvStartDate: string;\n    constructor(patientID: number, providerID: number){\n        super(patientID, 181, providerID) //TODO: Use encounter type reference name'\n        this.hivStatus = ''\n        this.artStatus = ''\n        this.arvNumber = ''\n        this.arvStartDate = ''\n    }\n\n    getHivStatus() {\n        return this.hivStatus\n    }\n\n    getArtStatus() {\n        return this.artStatus\n    }\n\n    getArvNumber() {\n        return this.arvNumber\n    } \n\n    getArvStartDate() {\n        return this.arvStartDate\n    }\n\n    isHivPositive() {\n        return this.hivStatus.match(/positive/i) ? true : false\n    }\n\n    async loadArtStatus() {\n        const res = await AppEncounterService.getJson(`programs/12/patients/${this.patientID}/art_hiv_status`)\n        if (res) {\n            this.hivStatus = res['hiv_status'] || this.hivStatus\n            this.artStatus = res['art_status'] || ''\n            this.arvNumber = res['arv_number'] || ''\n            this.arvStartDate = res['arv_start_date'] || ''\n        }\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { AssessmentService } from \"@/apps/CxCa/services/CxCaAssessmentService\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { ConceptService } from \"@/services/concept_service\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport { ProgramService } from \"@/services/program_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    assessment: {} as any,\n    obs: [] as any,\n    showHIVQuestions: true,\n    alreadyEnrolled: false,\n    offerCxCa: false,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.assessment = new AssessmentService(\n          this.patientID,\n          this.providerID\n        );\n\n\n        //test here \n        const patient2 = new Patientservice((await Patientservice.findByID(this.patientID)))\n\n        const program = await ProgramService.getProgramInformation(this.patientID)\n\n        if(program.current_outcome === 'Continue follow-up'){\n          this.alreadyEnrolled = true;\n        }\n\n        ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n\n        await this.assessment.loadArtStatus();\n\n\n        const artStatus = this.assessment.getHivStatus();\n\n        if (this.assessment.getHivStatus() !== '') {\n          this.showHIVQuestions = false;\n        }\n\n        if(this.assessment.getHivStatus() === \"Positive\"){\n          this.showHIVQuestions = false;\n        }\n\n        await this.setOfferCxCa();\n        this.fields = await this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computed: any) {\n      \n      const encounter = await this.assessment.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...this.obs, ...vals]);\n\n      const obs = await this.assessment.saveObservationList(data);\n\n      if (!obs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      this.nextTask();\n    },\n    async setOfferCxCa() {\n      const data = await this.assessment.getFirstValueCoded(\"Offer CxCa\");\n      this.offerCxCa = data && data === \"Yes\";\n      if (!this.offerCxCa) {\n        this.obs.push(this.assessment.buildValueCoded(\"Ever had CxCa\", \"No\"));\n      }\n      return true;\n    },\n    hasHIVStatus() {\n      return this.assessment.getHivStatus !== \"\"\n    },\n    enterPreviousCxCaData(formData: any) {\n      const everHadCxCa = formData.ever_had_cxca.value === \"Yes\";\n      const resultsAvailable = formData.results_available.value === \"Yes\";\n      return everHadCxCa && resultsAvailable;\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    getReasonsForNoCxcaOptions() {\n      return ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n        .map((c: any) => ({\n          label: c.name,\n          value: c.name,\n          other: {\n            c\n          }\n        }))\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"reason_for_visit\",\n          helpText: \"Reason for visit\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Initial screening\",\n              value: \"Initial screening\",\n            },\n            {\n              label: \"Postponed treatmment\",\n              value: \"Postponed treatment\",\n            },\n            {\n              label: \"One year subsequent check-up after treatment\",\n              value: \"One year subsequent check-up after treatment\",\n            },\n            {\n              label: \"Subsequent screening\",\n              value: \"Subsequent screening\",\n            },\n            {\n              label: \"Problem visit after treatment\",\n              value: \"Problem visit after treatment\",\n            },\n            {\n              label: \"Referral\",\n              value: \"Referral\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for visit\", value.value)\n          })\n        },\n        {\n          id: \"hiv_status\",\n          helpText: \"HIV status\",\n          type: FieldType.TT_SELECT,\n          condition: () => this.showHIVQuestions,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Positive on ART\",\n              value: \"Positive on ART\",\n            },\n            {\n              label: \"Positive Not on ART\",\n              value: \"Positive Not on ART\",\n            },\n            {\n              label: \"Negative\",\n              value: \"Negative\",\n            },\n            {\n              label: \"Never tested\",\n              value: \"Never tested\",\n            },\n            {\n              label: \"Prefers Not to disclose\",\n              value: \"Undisclosed\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"HIV status\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"hiv_test_date\",\n            helpText: \"HIV test result date\",\n            required: true,\n            condition: (formData: any) =>\n              formData.hiv_status.value.match(/Negative|ART/i),\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            //I've allowed for unknown dates to address the issue of the date picker not allowing for unknown dates\n            //this was a requirement from the client and analyst team\n            estimation: {\n              allowUnknown: true,\n              estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"HIV test date\", date, isEstimate),\n              };\n            },\n          },\n          this.assessment.getDate()\n        ),\n        {\n          id: \"ever_had_cxca\",\n          helpText: \"Ever had CxCa screening\",\n          type: FieldType.TT_SELECT,\n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\" && this.alreadyEnrolled == false,\n          options: () => this.yesNoOptions(),\n          validation: (val: any) => Validation.required(val),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Ever had CxCa\", value.value)\n          })\n        },\n        {\n          id: \"results_available\",\n          helpText: \"Results available?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          \n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\" && formData.ever_had_cxca.value !== \"No\",\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa test results\", value.value)\n          })\n        },\n        {\n          id: \"location\",\n          helpText: \"CxCa screening location\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (_: any, filter = \"\") => this.getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueText(\"Previous CxCa location\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"cxca_date\",\n            helpText: \"Previous CxCa test\",\n            required: true,\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            estimation: {\n              allowUnknown: false,\n            },\n            condition: (formData: any) => this.enterPreviousCxCaData(formData),\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"cxca test date\", date),\n              };\n            },\n          },\n          this.assessment.getDate()\n        ),\n        {\n          id: \"previous_screening_method\",\n          helpText: \"Previous screening method\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Previous CxCa screening method\", value.value)\n          })\n        },\n        {\n          id: \"offer_CxCa\",\n          helpText: \"Offer CxCa screening today\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Offer CxCa\", value.value)\n          })\n        },\n        {\n          id: \"screening_method\",\n          helpText: \"Screening method being offered\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"Yes\",\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa screening method\", value.value)\n          }),\n        },\n        /*added new fields for family planning\n        */\n        {\n          id: 'offer_family_planning',\n          helpText: 'Offer Family Planning ?',\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n          obs: this.assessment.buildValueCoded('Family planning', value.label)\n          })\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa screening\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"No\",\n          options: () => this.getReasonsForNoCxcaOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for NOT offering CxCa\", value.value)\n          }),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTest.vue?vue&type=template&id=d8da06ca&ts=true\"\nimport script from \"./CxCaTest.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTest.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}