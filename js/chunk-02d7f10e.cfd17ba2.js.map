{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsArtInitiation.vue?9755","webpack:///./src/apps/HTS/views/encounters/HtsArtInitiation.vue","webpack:///./src/apps/HTS/views/encounters/HtsArtInitiation.vue?6380","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/composables/storage.ts","webpack:///./src/apps/HTS/services/hts_art_initiation_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","patientDashboardUrl","_","defineComponent","components","IonPage","HisStandardForm","setup","ref","service","HtsArtInitiationService","toOption","yesNoOptions","saveEncounter","StartHtsEncounter","onInitVisit","value","referralForArtInitiation","intendedArtSiteField","artAppointmentDataField","htsLinkageCodeField","hiddenArtReferralOutcomeStatusField","computedData","encounterName","encounterTypeID","id","helpText","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","obs","buildValueText","options","label","values","TT_SELECT","filter","getFacilities","condition","f","is_referral","defaultValue","getLocationName","config","footerBtns","name","slot","onClickComponentEvents","setValue","onClick","showKeyboard","isFilterDataViaApi","TT_DATE_PICKER","date","d","buildValueDate","minDate","infoItems","toDate","hiddenFooterBtns","invalidLinkageCode","TT_LINKAGE_CODE","validation","_v$other","other","isValidLinkageCode","uniq","concat","map","TT_HIDDEN","buildValueCoded","__exports__","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","data","props","Function","Boolean","String","Object","required","methods","formData","this","$emit","i","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","Promise","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","constructor","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","get","onerror","error","filters","openCursor","cursor","filteredData","continue","put","delete","item","entries","every","isInteger","toLower","includes","AppEncounterService","patientID","providerID","super","PrintoutService","code","printoutService","printLbl","getFirstValueText","validLinkID","linkID","mapping","A","C","H","K","L","N","P","W","X","Y","regex","match","exec","bookNo","parseInt","pageNo","rowNo","checkDigit","length","toString","isNaN","hasOwnProperty","offlineStorage","async","facilities","isEmpty","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-02d7f10e.cfd17ba2.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"ART (Re-) Initiation\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.patientDashboardUrl()\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent, ref } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport { HtsArtInitiationService } from \"../../services/hts_art_initiation_service\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { toDate } from \"@/utils/Strs\";\nimport { uniq } from \"lodash\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { StartHtsEncounter } from \"@/apps/HTS/composables/HtsFormEncounter\";\n\nexport default defineComponent({\n  components: { IonPage, HisStandardForm },\n  setup() {\n    const fields = ref<Field[]>([])\n    const service = new HtsArtInitiationService(-1);\n    const {\n      toOption,\n      yesNoOptions,\n      saveEncounter,\n      patientDashboardUrl\n    } = StartHtsEncounter({\n      onInitVisit: () => {\n        fields.value = [\n          referralForArtInitiation(),\n          intendedArtSiteField(),\n          artAppointmentDataField(),\n          htsLinkageCodeField(),\n          hiddenArtReferralOutcomeStatusField()\n        ]\n      }\n    })\n\n    function onFinish(_: any, computedData: any) {\n      saveEncounter({\n        encounterName: \"ART Enrollment\",\n        encounterTypeID: service.encounterTypeID,\n        computedData\n      })\n    }\n\n    function referralForArtInitiation(): Field {\n      return {\n        id: \"is_referral\",\n        helpText: \"Referral for ART (Re-)Initiation\",\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            obs: service.buildValueText(\"ART referral\", v),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Do you want to refer client?\",\n              value: \"\",\n              values: yesNoOptions(),\n            },\n          ];\n        },\n      };\n    }\n    \n    function intendedArtSiteField(): Field {\n      return {\n        id: \"art_site\",\n        helpText: \"Intended Site for ART\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: ({ label }: Option) => ({\n          obs: service.buildValueText(\"Referral location\", label),\n        }),\n        options: (_: any, filter = \"\") => getFacilities(filter),\n        condition: (f: any) => f.is_referral === \"Yes\",\n        defaultValue: () => HtsArtInitiationService.getLocationName(),\n        config: {\n          footerBtns: [\n            {\n              name: \"Here\",\n              slot: \"end\",\n              onClickComponentEvents: {\n                setValue: () => HtsArtInitiationService.getLocationName()\n              },\n              onClick: () => null,\n            },\n          ],\n          showKeyboard: true,\n          isFilterDataViaApi: true,\n        },\n      };\n    }\n\n    function artAppointmentDataField(): Field {\n      return {\n        id: \"art_appointment_date\",\n        helpText: \"Appointment Date for ART Referral\",\n        type: FieldType.TT_DATE_PICKER,\n        isRequired: () => true,\n        defaultValue: () => service.date,\n        condition: (f: any) => f.is_referral === \"Yes\",\n        finalComputedValue: (d: Option) => {\n          return {\n            obs: service.buildValueDate(\"Appointment date\", `${d.value}`),\n          };\n        },\n        config: {\n          minDate: () => service.date,\n          infoItems: (date: string) => {\n            return [\n              {\n                label: \"Set appointment date\",\n                value: toDate(date),\n              },\n            ];\n          },\n          hiddenFooterBtns: [\"Clear\"],\n        },\n      };\n    }\n\n    function htsLinkageCodeField() {\n      let invalidLinkageCode: string[] = []\n      return {\n        id: 'linkage_code',\n        helpText: 'LINKAGE CODE',\n        type: FieldType.TT_LINKAGE_CODE,\n        isRequired: () => true,\n        validation: (v: Option) => {\n          if (!v?.other?.isValidLinkageCode) {\n            invalidLinkageCode = uniq(invalidLinkageCode.concat(`${v.value}`))\n            return ['Invalid Scanform linkage code']\n          }\n          return null\n        },\n        condition: (f: any) => f.is_referral === \"Yes\",\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: [\n              service.buildValueText('HTC Serial number', `${v.value}`),\n              ...invalidLinkageCode.map((id) => service.buildValueText('Invalid', id))\n            ]\n          }\n        }\n      }\n    }\n\n    function hiddenArtReferralOutcomeStatusField() {\n      return {\n        id: \"art_outcome_field\",\n        helpText: \"Art outcome\",\n        type: FieldType.TT_HIDDEN,\n        defaultValue: () => {\n          return toOption(\"Unknown\");\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: service.buildValueCoded(\n              \"Antiretroviral status or outcome\",\n              v.value\n            ),\n          };\n        },\n      };\n    }\n\n    return {\n      patientDashboardUrl,\n      onFinish,\n      fields\n    }\n  }\n});\n","import { render } from \"./HtsArtInitiation.vue?vue&type=template&id=315ddd79&ts=true\"\nimport script from \"./HtsArtInitiation.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsArtInitiation.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { PrintoutService } from '@/services/printout_service';\nimport Prop from \"@/apps/GLOBAL_APP/global_prop\";\nexport class HtsArtInitiationService extends AppEncounterService {\n  patientID: number\n  printoutService: PrintoutService = new PrintoutService()\n    \n  constructor(patientID: number, providerID = -1) {\n      super(patientID, 79, providerID);\n      this.patientID = patientID;\n  }\n\n  async printHtsLinkageId(code: string) {\n    await this.printoutService.printLbl(\n      `/patients/${this.patientID}/labels/print_hts_linkage_code/${code}`\n    );\n  }\n\n    async getHtsCode() {\n      return (await this.getFirstValueText('HTC serial number'))||'Un-assigned'\n    }\n  \n  validLinkID(linkID: string): Array<string> | null {\n    const mapping: { [key: string]: number } = {\n      A: 0,\n      C: 1,\n      H: 2,\n      K: 3,\n      L: 4,\n      N: 5,\n      P: 6,\n      W: 7,\n      X: 8,\n      Y: 9,\n    };\n\n    const regex = /^(\\d{1,4})-(\\d{1,3})-(\\d{1,2})-([A-CE-HK-NP-Y])$/;\n    const match = regex.exec(linkID);\n\n    if (!match) {\n      return [\"Invalid LinkID format\"]\n    }\n\n    const bookNo = parseInt(match[1], 10);\n    const pageNo = parseInt(match[2], 10);\n    const rowNo = parseInt(match[3], 10);\n    const checkDigit = match[4];\n\n    // book no and row no should not have leading zeros\n    if (match[1].length !== bookNo.toString().length || match[3].length !== rowNo.toString().length || match[2].length !== pageNo.toString().length) {\n      return [\"Invalid LinkID, book number and row number should not have leading zeros\"];\n    }\n\n    // Validate book number, page number, and row number\n    if (\n      isNaN(bookNo) ||\n      isNaN(pageNo) ||\n      isNaN(rowNo) ||\n      bookNo < 1 ||\n      bookNo > 9999 ||\n      pageNo < 1 ||\n      pageNo > 999 ||\n      rowNo < 1 ||\n      rowNo > 99\n    ) {\n      return [\"Invalid LinkID format on book, page, or row number\"];\n    }\n\n    // Validate check digit\n    // eslint-disable-next-line no-prototype-builtins\n    if (!mapping.hasOwnProperty(checkDigit)) {\n      return [\"Invalid check digit\"];\n    }\n\n    return null;\n  }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}