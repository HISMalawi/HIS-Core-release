{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/views/PatientRegistration.vue"],"names":["PersonAttributeService","Service","constructor","attributes","postJson","PatientRegistrationService","personId","getPersonID","setPersonID","personID","person","personAttributes","createPerson","createPersonAttributes","patient","createPatient","printPatient","updatePerson","PersonService","update","data","create","person_id","ProgramService","index","PatientPrintoutService","printNidLbl","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","$emit","i","__exports__","mapToOption","listOptions","map","item","label","value","resolvePerson","computedForm","attr","values","isPlainObject","getGivenNameField","id","helpText","FieldType","TT_TEXT","computedValue","val","validation","Validation","isName","options","form","given_name","names","searchGivenName","getFamilyNameField","family_name","searchFamilyName","getGenderField","TT_SELECT","getDobConfig","summaryLabel","minDate","HisDate","estimateDateFromAge","maxDate","getSessionDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","date","isEstimate","birthdate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","dynamicHelpText","f","home_region","match","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","slot","color","onClick","c","field","filter","length","toastWarning","isEmpty","filtered","ok","alertConfirmation","address","LocationService","createAddress","toUpperCase","getHomeTaField","config","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","defaultComputedOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","getCurrentDistrictField","current_region","getCurrentTAfield","current_district","getCurrentVillageField","current_traditional_authority","getCellNumberField","number","split","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","condition","v","getFacilityLocationField","_","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","Array","isArray","person_attributes","reduce","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","gender","birthdate_estimated","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","getNationalID","other","npid","show","getProgramName","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","formLabel","$event","fieldComponent","HisStandardForm","IonPage","app","App","getActiveApp","ddeInstance","ddeDocID","ddeIsReassign","currentAddressAttributes","homeAddressAttributes","hasIncompleteData","editPersonData","editPerson","personAttribute","isMilitarySite","presets","registrationSummary","ddeEnabled","watch","query","this","PatientDemographicsExchangeService","edit_person","dde_reassign","doc_id","setPatientID","person_attribute","initEditMode","getFields","immediate","deep","push","personIndexField","hasScannedNationalID","concat","hiddenFieldsForScannedNationalID","givenNameField","familyNameField","genderField","searchResultField","dobFields","homeRegionField","homeDistrictField","homeTAField","homeVillageField","currentRegionField","currentDistrictField","currentTAField","currentVillage","landmarkFields","cellPhoneField","patientTypeField","facilityLocationField","occupationField","regimentField","dateJoinedMilitaryFields","rankField","relationshipField","possibleDuplicatesField","isEditMode","nationalIDStatus","Store","get","patientID","parseInt","ancestryDistrict","ancestryTA","ancestryVillage","currentDistrict","currentTA","getAddresses","getGivenName","getFamilyName","getGender","getBirthdate","getPhoneNumber","getClosestLandmark","PersonField","resolvePersonAttributes","registration","registerPatient","set","updateMWNationalId","malawiNationalID","onRegisterPatient","exit","$router","$route","relationship","nextTask","invalidate","back","editConditionCheck","includes","getDocID","assignNpid","printNationalID","delayPromise","e","toastDanger","d","console","error","TT_HIDDEN","defaultValue","toLowerCase","async","findByID","IS_ANC_APP","applicationName","IS_CXCA","beforeNext","newGender","oldGender","action","infoActionSheet","dobConfig","sdate","childBearingAgeInYrs","dayjs","subtract","format","STANDARD_DATE_FORMAT","generateDateFields","region","district","currentRegion","cellPhone","cell_phone_number","facility","patient_type","landmarks","PatientTypeService","getPatientTypes","init","GLOBAL_PROP","militarySiteEnabled","occupation","WorkflowService","IS_HTS","OPD","Registration","TT_PERSON_RESULT_VIEW","payload","patients","searchDemographics","itemData","search","hiddenFooterBtns","state","disabled","onValue","results","createdPerson","duplicatePatients","TT_PERSON_MATCH_VIEW","checkPotentialDuplicates","toDate","toStandardHisDisplayFormat","score","patient_id","newPerson","foundPerson","comparisons","visible","possible_duplicates","TT_TABLE_VIEWER","editButton","attribute","columns","rows","home_village","landmark","emptySets","indexes","class","forEach","r","isValueEmpty","rowColors","onload","reassignNpid","printNpid","confirmPatient","putJson","getProgramID","getJson","facilities","trim","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","regions","region_id","regionID","districts","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-cc8f3bf2.a68f6de3.js","sourcesContent":["import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: _ctx.formLabel,\n        onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n        skipSummary: _ctx.skipSummary,\n        activeField: _ctx.fieldComponent,\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish\n      }, null, 8, [\"formLabel\", \"skipSummary\", \"activeField\", \"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport { WorkflowService } from \"@/services/workflow_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\"\nimport App from \"@/apps/app_lib\"\nimport { AppInterface } from \"@/apps/interfaces/AppInterface\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { isValueEmpty } from \"@/utils/Strs\"\nimport { PatientDemographicsExchangeService } from \"@/services/patient_demographics_exchange_service\"\nimport { toastDanger, toastWarning } from \"@/utils/Alerts\"\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { IonPage } from \"@ionic/vue\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport GLOBAL_PROP from \"@/apps/GLOBAL_APP/global_prop\";\nimport dayjs from \"dayjs\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  components: { HisStandardForm, IonPage },\n  data: () => ({\n    formLabel: 'Find / Register',\n    app: App.getActiveApp() as AppInterface,\n    ddeInstance: {} as any,\n    ddeDocID: '' as string,\n    ddeIsReassign: false as boolean,\n    skipSummary: false as boolean,\n    currentAddressAttributes: [\n        'current_region',\n        'current_district',\n        'current_village',\n        'current_traditional_authority'\n    ] as string[],\n    homeAddressAttributes: [\n        'home_region',\n        'home_district',\n        'home_traditional_authority',\n        'home_village'\n    ] as string[],\n    hasIncompleteData: false as boolean,\n    patient: {} as any,\n    editPersonData: {} as any,\n    editPerson: -1 as number,\n    personAttribute: '' as string,\n    activeField: '' as string,\n    fieldComponent: '' as string,\n    fields: [] as Array<Field>,\n    isMilitarySite: false,\n    presets: {} as any,\n    registrationSummary: {} as any,\n    form: {} as Record<string, Option> | Record<string, null>,\n    ddeEnabled: false as boolean,\n  }),\n  watch: {\n    '$route': {\n        async handler({query}: any) {\n           this.ddeInstance = new PatientDemographicsExchangeService()\n           if (query.edit_person) {\n                this.ddeIsReassign = query.dde_reassign\n                this.ddeDocID = query.doc_id\n                this.ddeInstance.setPatientID(query.edit_person)\n                if(query.person_attribute) this.personAttribute = query.person_attribute\n                await this.initEditMode(query.edit_person)\n            } else {\n                this.presets = query\n            }\n            this.fields = this.getFields()\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    getFields(): Array<Field> {\n        let fields: Array<Field> = []\n        fields.push(this.personIndexField())\n        if (this.hasScannedNationalID()) {\n            fields = fields.concat(this.hiddenFieldsForScannedNationalID())\n        } else {\n            fields.push(this.givenNameField())\n            fields.push(this.familyNameField())\n            fields.push(this.genderField())\n        }\n        fields.push(this.searchResultField())\n        if (!this.hasScannedNationalID()) {\n            fields = fields.concat(this.dobFields())\n        }\n        fields.push(this.homeRegionField())\n        fields.push(this.homeDistrictField())\n        fields.push(this.homeTAField())\n        fields.push(this.homeVillageField())\n        fields.push(this.currentRegionField())\n        fields.push(this.currentDistrictField())\n        fields.push(this.currentTAField())\n        fields.push(this.currentVillage())\n        fields = fields.concat(this.landmarkFields())\n        fields.push(this.cellPhoneField())\n        fields.push(this.patientTypeField())\n        fields.push(this.facilityLocationField())\n        fields.push(this.occupationField())\n        fields.push(this.regimentField())\n        fields = fields.concat(this.dateJoinedMilitaryFields())\n        fields.push(this.rankField())\n        fields.push(this.relationshipField())\n        fields.push(this.possibleDuplicatesField())\n        return fields\n    },\n    isEditMode() {\n        return this.editPerson >= 1\n    },\n    hasScannedNationalID() {\n        return this.presets.nationalIDStatus === 'true'\n    },\n    async initEditMode(personId: number) {\n        this.editPerson = personId\n        this.patient = await Store.get('ACTIVE_PATIENT', { patientID: parseInt(`${this.editPerson}`)})\n        const {\n            ancestryDistrict,\n            ancestryTA,\n            ancestryVillage,\n            currentDistrict,\n            currentTA\n        } = this.patient.getAddresses()\n        this.editPersonData = {\n            'given_name': this.patient.getGivenName(),\n            'family_name': this.patient.getFamilyName(),\n            'gender': this.patient.getGender(),\n            'birthdate': this.patient.getBirthdate(),\n            'home_district': ancestryDistrict,\n            'home_traditional_authority': ancestryTA,\n            'home_village': ancestryVillage,\n            'current_district': currentDistrict,\n            'current_traditional_authority': currentTA,\n            'cell_phone_number': this.patient.getPhoneNumber(),\n            'landmark': this.patient.getClosestLandmark()\n        }\n        this.presets = this.editPersonData\n        this.skipSummary = true\n        if(this.personAttribute) {\n            this.activeField = this.personAttribute\n            this.fieldComponent = this.activeField\n        }\n    },\n    async onFinish(form: Record<string, Option> | Record<string, null>, computedData: any) {\n        if (!this.isEditMode()) {\n            return this.create(form, computedData)\n        } else {\n            return this.update(computedData)\n        }\n    },\n    async create(_: any, computedData: any) {\n        const person: any = PersonField.resolvePerson(computedData)\n        const attributes: Array<any> = this.resolvePersonAttributes(computedData)\n        const registration: any = new PatientRegistrationService()\n        const patient = new Patientservice((await registration.registerPatient(person, attributes)))\n        const patientID = registration.getPersonID()\n\n        Store.set('ACTIVE_PATIENT', patient) // update patient store\n \n        if(this.presets.nationalIDStatus == \"true\"){ \n            this.patient = patient\n            await this.patient.updateMWNationalId(this.presets.malawiNationalID)\n        }\n\n        if (this.app.onRegisterPatient) {\n            const exit = await this.app.onRegisterPatient(\n                patientID, person, attributes, this.$router, this.$route,\n                computedData\n            )\n            if (exit) return\n        }\n        if (person.relationship === 'Yes') {\n            return this.$router.push(`/guardian/registration/${patientID}`)\n        }\n        await nextTask(patientID, this.$router)\n    },\n    async update(computedData: any) {\n        const person: any = PersonField.resolvePerson(computedData)\n        const update = new PatientRegistrationService()\n\n        update.setPersonID(this.editPerson)\n        await update.updatePerson(person)\n        for(const attr in person) {\n            if (attr in this.editPersonData) {\n                this.editPersonData[attr] = person[attr]\n            }\n        }\n        Store.invalidate('ACTIVE_PATIENT')\n        if(!this.personAttribute) return this.fieldComponent = 'edit_user'\n        this.$router.back()\n    },\n    editConditionCheck(attributes=[] as Array<string>): boolean {\n        if (this.isEditMode() && !attributes.includes(this.activeField)) {\n            return false\n        }\n        return true\n    },\n    async confirmPatient() {\n        // Attempt to assign or reassign a patient's NPID if they dont have a valid one\n        if (this.ddeEnabled && (!this.patient.getDocID() \n            || (this.patient.getDocID() && this.patient.getNationalID().match(/unknown/i)))) {\n                try {\n                    await this.patient.assignNpid()\n                    await this.patient.printNationalID()\n                    await delayPromise(300)\n               } catch (e) {\n                    toastDanger(`Failed to assign new NPID: ${e}`)\n                }\n        }\n        this.$router.push(`/patients/confirm?person_id=${this.patient.getID()}`)\n    },\n    resolvePersonAttributes(form: Record<string, Option> | Record<string, null>) {\n        return Object.values(form)\n                    .filter((d: any) => isPlainObject(d) && 'personAttributes' in d)\n                    .map(({personAttributes}: any) => personAttributes)\n    },\n    async resolveOnRegistrationCallbacks(patientID: number, computedData: any) {\n        for (const i of Object.values(computedData)) {\n            const item: any = i\n            if (typeof item.onRegisterPatient === 'function') {\n                try {\n                    await item.onRegisterPatient(patientID)\n                } catch (e) {\n                    console.error(`${e}`)\n                    toastDanger(`${e}`)\n                }\n            }\n        }\n    },\n    mapToOption(listOptions: Array<string>): Array<Option> {\n        return listOptions.map((item: any) => ({ label: item, value: item }))\n    },\n    hiddenFieldsForScannedNationalID(): Field[] {\n        const d = (val: string | boolean) => ({label: val, value: val})\n        return [\n            {\n                id: 'given_name',\n                helpText: 'First name',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => d(this.presets.given_name),\n                computedValue: () => ({person : this.presets.given_name})\n            },\n            {\n                id: 'family_name',\n                helpText: 'Last name',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => d(this.presets.family_name),\n                computedValue: () => ({person : this.presets.family_name})\n            },\n            {\n                id: 'gender',\n                helpText: 'Gender',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => ({\n                    label: this.presets.gender,\n                    value: this.presets.gender.toLowerCase() === 'male'\n                        ? 'M'\n                        : this.presets.gender.toLowerCase() === 'female'\n                        ? 'F'\n                        : 'N/A'\n                }),\n                computedValue: () => ({person : this.presets.gender})\n            },\n            {\n                id: 'scanned_birthdate',\n                helpText: 'Birth date',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => d(this.presets.birthdate),\n                computedValue: () => ({\n                    person : {\n                        'birthdate': this.presets.birthdate,\n                        'birthdate_estimated': false\n                    }\n                })\n            },\n            {\n                id: 'scanned_national_id',\n                helpText: 'Scanned National ID',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => d(this.presets.malawiNationalID),\n                computedValue: () => ({\n                    onRegisterPatient : async (patientID: number) => {\n                        const patient = await Patientservice.findByID(patientID)\n                        this.patient = new Patientservice(patient)\n                        this.patient.updateMWNationalId(this.presets.malawiNationalID)\n                    }\n                })\n            }\n        ]\n    },\n    givenNameField(): Field {\n        const name: Field = PersonField.getGivenNameField()\n        name.condition = () => this.editConditionCheck(['given_name'])\n        name.defaultValue = () => this.presets.given_name\n        return name\n    },\n    familyNameField(): Field {\n        const name: Field = PersonField.getFamilyNameField()\n        name.condition = () => this.editConditionCheck(['family_name'])\n        name.defaultValue = () => this.presets.family_name\n        return name\n    },\n    genderField(): Field {\n        const IS_ANC_APP = this.app.applicationName === 'ANC'\n        const IS_CXCA = this.app.applicationName === 'CxCa'\n        const gender: Field = PersonField.getGenderField()\n        gender.requireNext = this.isEditMode()\n        gender.defaultValue = () => this.presets.gender\n        gender.condition = () => {\n            if (!this.isEditMode() && (IS_ANC_APP || IS_CXCA)) {\n                return false\n            }\n            return this.editConditionCheck(['gender'])\n        }\n        if ((IS_ANC_APP || IS_CXCA) && !this.isEditMode()) {\n            gender.defaultOutput = () => ({ label: 'Female', value: 'F' })\n            gender.defaultComputedOutput = () => ({ person: 'F' })\n        } \n\n        gender.beforeNext = async (data: Option) => {\n            /**\n             * Provide warning when changing gender in edit mode\n            */\n            const newGender = data.value\n            const oldGender = this.presets.gender\n            if (this.isEditMode() && newGender != oldGender) {\n                const action = await infoActionSheet(\n                    'Warning',\n                    `Changing gender from ${oldGender} to ${newGender}`,\n                    \"This change will cause data inconsistency and will affect alot of Reports.\",\n                    [\n                        {\n                            name: 'Cancel', slot: 'start'\n                        },\n                        {\n                            name: 'Change gender', slot: 'end', color: 'danger'\n                        }\n                    ]\n                )\n                return action === 'Change gender'\n            }\n            return true\n        }\n        return gender\n    },\n    dobFields(): Array<Field> {\n        const dobConfig = PersonField.getDobConfig()\n        dobConfig.defaultValue = () => this.presets.birthdate\n        dobConfig.condition = () => this.editConditionCheck([\n            'year_birth_date', 'month_birth_date', 'day_birth_date'\n        ])\n        // ANC validation to ensure that we are not registering\n        // Non child bearing youngsters\n        if (this.app.applicationName === 'ANC') {\n            const sdate = Patientservice.getSessionDate()\n            const childBearingAgeInYrs = 12\n            dobConfig.maxDate = () => dayjs(sdate)\n                .subtract(childBearingAgeInYrs, 'years')\n                .format(STANDARD_DATE_FORMAT)\n        }\n        return generateDateFields(dobConfig)\n    },\n    homeRegionField(): Field {\n        const region: Field = PersonField.getHomeRegionField()\n        region.condition = () => this.editConditionCheck(this.homeAddressAttributes)\n        return region\n    },\n    homeDistrictField(): Field {\n        const district: Field = PersonField.getHomeDistrictField()\n        district.condition = () => this.editConditionCheck(this.homeAddressAttributes)\n        return district\n    },\n    homeTAField(): Field {\n        const homeTA: Field = PersonField.getHomeTaField()\n        homeTA.condition = (form: any) => this.editConditionCheck(this.homeAddressAttributes)\n            && !form.home_region.label.match(/foreign/i)\n        return homeTA\n    },\n    homeVillageField(): Field {\n        const homeVillage: Field = PersonField.getHomeVillageField()\n        homeVillage.condition = (form: any) => this.editConditionCheck(this.homeAddressAttributes)\n            && !form.home_region.label.match(/foreign/i)\n        return homeVillage\n    },\n    currentRegionField(): Field {\n        const currentRegion: Field = PersonField.getCurrentRegionField()\n        currentRegion.condition = () => this.editConditionCheck(this.currentAddressAttributes)\n        return currentRegion\n    },\n    currentDistrictField(): Field {\n        const currentDistrict: Field = PersonField.getCurrentDistrictField()\n        currentDistrict.condition = () => this.editConditionCheck(this.currentAddressAttributes)\n        return currentDistrict\n    },\n    currentTAField(): Field {\n        const currentTA: Field = PersonField.getCurrentTAfield()\n        currentTA.condition = (form: any) => this.editConditionCheck(this.currentAddressAttributes)\n            && !form.current_region.label.match(/foreign/i)\n        return currentTA\n    },\n    currentVillage(): Field {\n        const currentVillage: Field = PersonField.getCurrentVillageField()\n        currentVillage.condition = (form: any) => this.editConditionCheck(this.currentAddressAttributes)\n            && !form.current_region.label.match(/foreign/i)\n        return currentVillage\n    },\n    cellPhoneField(): Field {\n        const cellPhone: Field = PersonField.getCellNumberField()\n        cellPhone.condition = () => this.editConditionCheck(['cell_phone_number'])\n        cellPhone.defaultValue = () => this.presets.cell_phone_number\n        return cellPhone\n    },\n    facilityLocationField(): Field {\n       const facility: Field = PersonField.getFacilityLocationField()\n       facility.condition = (form: any) => [\n           'Drug Refill',\n           'External consultation'\n       ].includes(form.patient_type.value)\n       return facility\n    },\n    landmarkFields(): Field[] {\n        const landmarks: Field[] = PersonField.getLandmarkFields()\n        landmarks[0].condition = () => this.editConditionCheck(['default_landmarks'])\n        return landmarks\n    },\n    patientTypeField(): Field {\n        return {\n            id: 'patient_type',\n            helpText: 'Type of patient',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['patient_type'])\n                && this.app.applicationName === 'ART',\n            validation: (val: any) => Validation.required(val),\n            options: () => PatientTypeService.getPatientTypes()\n        }\n    },\n    occupationField(): Field {\n        return {\n            id: 'occupation',\n            helpText: 'Occupation',\n            type: FieldType.TT_SELECT,\n            init: async () => {\n               this.isMilitarySite = await GLOBAL_PROP.militarySiteEnabled()\n               return true \n            },\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['occupation']) && this.isMilitarySite,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.mapToOption([\n                'Military',\n                'Civilian'\n            ])\n        }\n    },\n    regimentField(): Field {\n        return {\n            id: 'person_regiment_id',\n            helpText: 'Regiment ID',\n            type: FieldType.TT_TEXT,\n            computedValue: ({value}: Option) => ({\n                personAttributes: {\n                    'person_attribute_type_id': 35,\n                    'value': value\n                }\n            }),\n            condition: (form: any) => this.editConditionCheck(['person_regiment_id']) && form.occupation && form.occupation.value.match(/Military/i),\n            validation: (val: any) => Validation.required(val)\n        }\n    },\n    rankField(): Field {\n        return {\n            id: 'rank',\n            helpText: 'Rank',\n            type: FieldType.TT_SELECT,\n            validation: (val: any) => Validation.required(val),\n            computedValue: ({value}: Option) => ({\n                personAttributes: {\n                    'person_attribute_type_id': 36,\n                    'value': value\n                }\n            }),\n            condition: (form: any) => this.editConditionCheck(['rank']) && form.occupation && form.occupation.value.match(/Military/i),\n            options: () => this.mapToOption([\n                'First Lieutenant',\n                'Captain',\n                'Major',\n                'Lieutenant Colonel',\n                'Colonel',\n                'Brigadier General',\n                'Lieutenant General',\n                'General',\n                'Private',\n                'Corporal',\n                'Lance Corporal',\n                'Seargent',\n                'Staff Seargent',\n                'Warrant Officer class 1',\n                'Warrant Officer class 2'\n            ])\n        }\n    },\n    dateJoinedMilitaryFields(): Array<Field> {\n        return generateDateFields({\n            id: 'person_date_joined_military',\n            helpText: 'Joined Military',\n            required: true,\n            condition: (form: any) =>  this.editConditionCheck([\n                'year_person_date_joined_military',\n                'month_person_date_joined_military',\n                'day_person_date_joined_military'\n            ]) && form.occupation && form.occupation.value.match(/Military/i),\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => WorkflowService.getSessionDate(),\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => ({\n                date,\n                personAttributes : {\n                    'person_attribute_type_id': 37, 'value': date\n                }\n            })\n        })\n    },\n    relationshipField(): Field {\n        const IS_HTS = this.app.applicationName === 'HTS'\n        const IS_CXCA = this.app.applicationName === 'CxCa'\n        const OPD = this.app.applicationName === 'OPD'\n        const Registration = this.app.applicationName === 'Registration'\n        return {\n            id: 'relationship',\n            helpText: 'Register guardian?',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['relationship']) && !IS_CXCA && !OPD && !Registration && !IS_HTS,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.mapToOption(['Yes', 'No'])\n        }\n    },\n    searchResultField(): Field {\n        return {\n            id: 'results',\n            helpText: 'Search results',\n            type: FieldType.TT_PERSON_RESULT_VIEW,\n            init: async () => {\n                if (!this.isEditMode()) { \n                    this.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n                }\n                return true\n            },\n            dynamicHelpText: (form: any) => {\n                return `Search results for \"${form.given_name.value} ${form.family_name.value} | ${form.gender.label}\"`;\n            },\n            appearInSummary: () => false,\n            condition: () => !this.isEditMode(),\n            options: async (form: any) => {\n                const payload = {\n                    'given_name': form.given_name.value,\n                    'family_name': form.family_name.value,\n                    'gender': form.gender.value\n                }\n                // DDE enabled search\n                if (this.ddeEnabled) {\n                    const patients = await this.ddeInstance.searchDemographics(payload)\n                    return patients.map((item: any) => {\n                        const itemData = PersonField.getPersonAttributeOptions(item)\n                        itemData.other.options.push({\n                            label: 'Patient Type',\n                            value: item.patient_type\n                        })\n                        itemData.other.options.push({\n                            label: 'Doc ID',\n                            value: item.doc_id\n                        })\n                        return itemData\n                    })\n                }\n                // Regular search\n                const patients = await Patientservice.search(payload);\n                return patients.map((item: any) => PersonField.getPersonAttributeOptions(item))\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Edit Search',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldComponent = 'given_name'\n                        },\n                        state: {\n                            disabled: {\n                                default: () => this.hasScannedNationalID()\n                            }\n                        }\n                        \n                    },\n                    {\n                        name: 'New Patient',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldComponent = '_NEXT_FIELD_'\n                        }\n                    },\n                    {\n                        name: 'Continue',\n                        color: 'success',\n                        slot: 'end',\n                        state: {\n                            disabled: {\n                                default: () => true,\n                                onValue(_: any,form: any) {\n                                    return isEmpty(form.results)\n                                }\n                            }\n                        },\n                        onClick: (form: any) => {\n                            return this.$router.push(`/patients/confirm?person_id=${form.results.value}`)\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    possibleDuplicatesField(): Field {\n        let createdPerson: any = {}\n        let duplicatePatients: any = {}\n        return {\n            id: 'possible_duplicates',\n            helpText: 'Possible Duplicate(s)',\n            type: FieldType.TT_PERSON_MATCH_VIEW,\n            condition: async (_: any, c: any) => {\n                if (this.ddeEnabled && !this.editPerson) {\n                    createdPerson = PersonField.resolvePerson(c)\n                    duplicatePatients = await this.ddeInstance\n                        .checkPotentialDuplicates(createdPerson)\n                    return duplicatePatients.length >= 1\n                }\n                return false\n            },\n            options: async () => {\n                const toDate = (date: string) => HisDate.toStandardHisDisplayFormat(date)\n                return duplicatePatients.map(({ score, person }: any) => {\n                    const name = `${person.given_name} ${person.family_name}`\n                    return {\n                        label: name,\n                        value: person.patient_id,\n                        other: {\n                            score: `${score * 100}%`,\n                            newPerson: createdPerson,\n                            foundPerson: person,\n                            comparisons: [\n                                [\n                                    'Name',\n                                    `${createdPerson.given_name} ${createdPerson.family_name}`,\n                                    `${person.given_name} ${person.family_name}`\n                                ],\n                                [\n                                    'Gender',\n                                    createdPerson.gender,\n                                    person.gender\n                                ],\n                                [\n                                    'Birthdate',\n                                    toDate(createdPerson.birthdate),\n                                    toDate(person.birthdate)\n                                ],\n                                [\n                                    'Home District',\n                                    createdPerson.home_district,\n                                    person.home_district\n                                ],\n                                [\n                                    'Home TA',\n                                    createdPerson.home_traditional_authority,\n                                    person.home_traditional_authority\n                                ]\n                            ]\n                        }\n                    }\n                })\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Not Duplicate',\n                        slot: 'start',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onValue: (_: any, f: any) => !isEmpty(f.possible_duplicates)\n                            }\n                        },\n                        onClick: () => {\n                            this.fieldComponent = '_NEXT_FIELD_'\n                        }\n                    },\n                    {\n                        name: 'Confirm',\n                        slot: 'end',\n                        color: 'warning',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onValue: (_: any, f: any) => !isEmpty(f.possible_duplicates)\n                            }\n                        },\n                        onClick: (form: any) => {\n                            this.$router.push(`/patients/confirm?person_id=${form.possible_duplicates.value}`)\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    personIndexField(): Field {\n        return {\n            id: 'edit_user',\n            helpText: 'Edit Demographics',\n            type: FieldType.TT_TABLE_VIEWER,\n            init: async () => {\n                if (this.isEditMode()) {\n                    this.formLabel = 'View / Edit'\n                    this.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n                }\n                return true\n            },\n            condition: () => this.isEditMode(),\n            options: async () => {\n                const editButton = (attribute: string) => ({\n                    name: 'Edit',\n                    type: 'button',\n                    action: () => {\n                        this.activeField = attribute\n                        this.fieldComponent = this.activeField\n                    }\n                })\n                const columns = ['Attributes', 'Values', 'Edit']\n                const rows = [\n                    ['Given Name', this.editPersonData.given_name, editButton('given_name')],\n                    ['Family Name', this.editPersonData.family_name, editButton('family_name')],\n                    ['Gender', this.editPersonData.gender,  editButton('gender')],\n                    ['Birthdate', HisDate.toStandardHisDisplayFormat(this.editPersonData.birthdate),  editButton('year_birth_date')],\n                    ['Cell Phone Number', this.editPersonData.cell_phone_number, editButton('cell_phone_number')],\n                    ['Home District', this.editPersonData.home_district, editButton('home_region')],\n                    ['Home TA', this.editPersonData.home_traditional_authority,  editButton('home_region')],\n                    ['Home Village', this.editPersonData.home_village,  editButton('home_region')],\n                    ['Current district',this.editPersonData.current_district, editButton('current_region')],\n                    ['Current T/A', this.editPersonData.current_traditional_authority, editButton('current_region')],\n                    ['Landmark', this.editPersonData.landmark, editButton('default_landmarks')],\n                ]\n                // Tag rows with empty values\n                const emptySets: any = {indexes: [], class: 'his-empty-set-color'}\n                rows.forEach((r: any, i: number) => {\n                    if (isValueEmpty(r[1])) \n                        emptySets.indexes.push(i)\n                })\n                this.hasIncompleteData = emptySets.indexes.length >= 1\n                return [{\n                    label: '', \n                    value: '',\n                    other: {\n                        rows,\n                        columns,\n                        rowColors: [emptySets]\n                    }\n                }]\n            },\n            config: {\n                footerBtns: [\n                    /**\n                     * Custom button that Appears when DDE wants to\n                     * Reassign a patient with incomplete data\n                    */\n                    {\n                        name: 'Reassign',\n                        slot: 'end',\n                        color: 'success',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onload: () => (\n                                    this.ddeEnabled\n                                    && this.ddeIsReassign\n                                    && !this.hasIncompleteData\n                                )\n                            }\n                        },\n                        onClick: async () => {\n                            try {\n                                await this.ddeInstance.reassignNpid(this.ddeDocID, this.editPerson)\n                                await this.ddeInstance.printNpid()\n                                this.$router.push(`/patients/confirm?person_id=${this.editPerson}`)\n                            } catch(e) {\n                                toastWarning(`${e}`)\n                            }\n                        }\n                    },\n                    /**\n                     * Custom button that redirects to patient confirmation page\n                     */\n                    {\n                        name: 'Confirm',\n                        slot: 'end',\n                        color: 'warning',\n                        state: {\n                            visible: {\n                                onload: () => !this.ddeIsReassign && !this.hasIncompleteData\n                            }\n                        },\n                        onClick: async () => this.confirmPatient()\n                    }\n                ],\n                hiddenFooterBtns: ['Clear', 'Next']\n            }\n        }\n    }\n  }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./PatientRegistration.vue?vue&type=template&id=365b1d29&ts=true\"\nimport script from \"./PatientRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./PatientRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}