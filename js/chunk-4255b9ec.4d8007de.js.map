{"version":3,"sources":["webpack:///./src/apps/RADIOLOGY/services/radiology_examination_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/apps/RADIOLOGY/views/RadiologyActivities.vue?611e","webpack:///./src/apps/RADIOLOGY/views/RadiologyActivities.vue","webpack:///./src/apps/RADIOLOGY/views/RadiologyActivities.vue?bada","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts"],"names":["RadiologyExaminationService","AppEncounterService","constructor","patientID","providerID","super","id","getJson","getPatientExaminations","this","createOrder","params","postJson","printExamination","accessionNumber","service","PrintoutService","printLbl","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","skipSummary","onOnFinish","onFinish","mixins","EncounterMixinVue","watch","handler","helpText","type","FieldType","TT_DATA_TABLE","config","columns","table","thTxt","rows","order","td","accession_number","examination_name","tdDate","order_date","tdBtn","hiddenFooterBtns","_resolveDynamicComponent","formType","activeField","cancelDestinationPath","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-4255b9ec.4d8007de.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { PrintoutService } from \"@/services/printout_service\"\n\nexport class RadiologyExaminationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 121, providerID) \n    }\n\n    \n    static getListOfRadiologyTests(id: string | number) {\n        return super.getJson('radiology_set', { id })\n    }\n    \n    getPatientExaminations() {\n        return AppEncounterService.getJson('radiology/examinations', {\n            'patient_id': this.patientID\n        })\n    }\n\n    createOrder(params: any) {\n        return AppEncounterService.postJson('orders/radiology', params)\n    }\n\n    printExamination(accessionNumber: string) {\n        const service = new PrintoutService()\n        return service.printLbl(`orders/radiology?accession_number=${accessionNumber}`)\n    }\n}\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    skipSummary: true,\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"fields\", \"onOnFinish\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { RadiologyExaminationService } from \"../services/radiology_examination_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n            const service = new RadiologyExaminationService(this.patientID, this.providerID)\n            this.fields = [\n                {\n                    id: \"patient_radiology_orders\",\n                    helpText: \"Radiology activities\",\n                    type: FieldType.TT_DATA_TABLE,\n                    config: {\n                        columns: () => [\n                            [\n                                table.thTxt('Accession Number'),\n                                table.thTxt('Examination'),\n                                table.thTxt('Date'),\n                                table.thTxt('Action')\n                            ]\n                        ],\n                        rows: async () => {\n                            return (await service.getPatientExaminations() || []).map((order: any) => {\n                                return [\n                                    table.td(order.accession_number),\n                                    table.td(order.examination_name),\n                                    table.tdDate(order.order_date),\n                                    table.tdBtn('Print', () => service.printExamination(order.accession_number))\n                                ]\n                            })\n                        },\n                        hiddenFooterBtns: [\"Clear\", 'Cancel'],\n                    }\n                }\n            ]\n            }\n        }\n    }\n  },\n  methods: {\n    onFinish() {\n        this.gotoPatientDashboard()\n    }\n  }\n})\n","import { render } from \"./RadiologyActivities.vue?vue&type=template&id=04beec86&ts=true\"\nimport script from \"./RadiologyActivities.vue?vue&type=script&lang=ts\"\nexport * from \"./RadiologyActivities.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}