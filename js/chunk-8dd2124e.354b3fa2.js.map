{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/encounters/SocialHistory.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","socialHistory","obs","watch","ready","this","SocialHistoryService","patientID","providerID","getFields","immediate","methods","formData","encounter","createEncounter","toastWarning","Promise","all","saveObservationList","toastSuccess","nextTask","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","label","value","unload","async","push","buildValueCoded","TT_NUMBER","rangeOf","condition","smoking_history","buildValueNumber","buildValueText","alcohol_history","__exports__","AppEncounterService","constructor","super"],"mappings":"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","file":"js/chunk-8dd2124e.354b3fa2.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { SocialHistoryService } from \"@/apps/ART/services/social_history_service\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    socialHistory : {} as any,\n    obs: [] as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n          this.socialHistory = new SocialHistoryService(this.patientID, this.providerID)\n          this.fields = await this.getFields()\n        }\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      const encounter = await this.socialHistory.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n\n      const data = await Promise.all([...this.obs]);\n      const obs = await this.socialHistory.saveObservationList(data)\n\n      if (!obs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      this.nextTask();\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"smoking_history\",\n          helpText: \"Have you ever smoked cigarettes?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Yes\",\n              value: \"Yes\",\n            },\n            {\n              label: \"No\",\n              value: \"No\",\n            },\n          ],\n          unload: async (value: any) => {\n            this.obs.push(this.socialHistory.buildValueCoded('SMOKE_HIS', value.value));\n          }\n        },\n        {\n          id: \"number_of_cigarettes\",\n          helpText: \"Number of cigarettes smoked per day\",\n          type: FieldType.TT_NUMBER,\n          validation: (val: any) => Validation.rangeOf(val, 1, 90),\n          condition(formData: any) {\n            return formData.smoking_history.value === \"Yes\"\n          },\n          unload: async (value: any) => {\n            this.obs.push(this.socialHistory.buildValueNumber('Number of cigarettes smoked per day', value.value));\n          }\n        },\n        {\n          id: \"smoking_duration\",\n          helpText: \"How long have you been smoking?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition(formData: any) {\n            return formData.smoking_history.value === \"Yes\"\n          },\n          options: () => [\n            {\n              label: \"Less than five years\",\n              value: \"Less than five years\",\n            },\n            {\n              label: \"Five years or more\",\n              value: \"Five years or more\",\n            },\n          ],\n          unload: async (value: any) => {\n            this.obs.push(this.socialHistory.buildValueText('Smoking duration', value.value));\n          }\n        },\n        {\n          id: \"current_smoker\",\n          helpText: \"Do you still smoke?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition(formData: any) {\n            return formData.smoking_history.value === \"Yes\"\n          },\n          options: () => [\n            {\n              label: \"Yes\",\n              value: \"Yes\",\n            },\n            {\n              label: \"No\",\n              value: \"No\",\n            },\n          ],\n          unload: async (value: any) => {\n            this.obs.push(this.socialHistory.buildValueCoded('Current smoker', value.value));\n          }\n        },\n        {\n          id: \"alcohol_history\",\n          helpText: \"Do you drink alcohol?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Yes\",\n              value: \"Yes\",\n            },\n            {\n              label: \"No\",\n              value: \"No\",\n            },\n          ],\n          unload: async (value: any) => {\n            this.obs.push(this.socialHistory.buildValueCoded('Does the patient drink alcohol?', value.value));\n          }\n        },\n        {\n          id: \"number_of_drinks\",\n          helpText: \"How many alcoholic drinks do you have per day?\",\n          type: FieldType.TT_NUMBER,\n          validation: (val: any) => Validation.required(val),\n          condition(formData: any) {\n            return formData.alcohol_history.value === \"Yes\"\n          },\n          unload: async (value: any) => {\n            this.obs.push(this.socialHistory.buildValueNumber('Alcoholic drinks per day', value.value));\n          }\n        },\n        {\n          id: \"number_of_days_drank\",\n          helpText: \"Number of days per week alcohol is used?\",\n          type: FieldType.TT_NUMBER,\n          validation: (val: any) => Validation.rangeOf(val, 1,7),\n          condition(formData: any) {\n            return formData.alcohol_history.value === \"Yes\"\n          },\n          unload: async (value: any) => {\n            this.obs.push(this.socialHistory.buildValueNumber('Number of days per week alcohol is used', value.value));\n          }\n        },\n        {\n          id: \"exercise\",\n          helpText: \"Do you do any physical exercise?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Yes\",\n              value: \"Yes\",\n            },\n            {\n              label: \"No\",\n              value: \"No\",\n            },\n          ],\n          unload: async (value: any) => {\n            this.obs.push(this.socialHistory.buildValueCoded('Physical Exercises', value.value));\n          }\n        },\n        {\n          id: \"employment\",\n          helpText: \"Type of employment?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Active\",\n              value: \"Active\",\n            },\n            {\n              label: \"Sedentary\",\n              value: \"Sedentary\",\n            },\n          ],\n          unload: async (value: any) => {\n            this.obs.push(this.socialHistory.buildValueText('Type of employment', value.value));\n          }\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./SocialHistory.vue?vue&type=template&id=12f8a8ac&ts=true\"\nimport script from \"./SocialHistory.vue?vue&type=script&lang=ts\"\nexport * from \"./SocialHistory.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class SocialHistoryService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 84, providerID) //TODO: Use encounter type reference name'\n    }\n}"],"sourceRoot":""}