{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsArtInitiation.vue?af22","webpack:///./src/apps/HTS/views/encounters/HtsArtInitiation.vue","webpack:///./src/apps/HTS/views/encounters/HtsArtInitiation.vue?59eb","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/services/hts_art_initiation_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","HtsArtInitiationService","patientID","providerID","referralForArtInitiation","intendedArtSiteField","artAppointmentDataField","htsLinkageCodeField","hiddenArtReferralOutcomeStatusField","immediate","methods","formData","computedData","saveFormEncounterAndProceed","encounterTypeID","id","helpText","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","obs","buildValueText","options","label","value","values","yesNoOptions","TT_SELECT","filter","getFacilities","condition","f","is_referral","defaultValue","getLocationName","config","footerBtns","name","slot","onClickComponentEvents","setValue","onClick","showKeyboard","isFilterDataViaApi","TT_DATE_PICKER","date","d","buildValueDate","minDate","infoItems","toDate","hiddenFooterBtns","TT_TEXT","toString","toUpperCase","validation","validLinkID","TT_HIDDEN","toOption","buildValueCoded","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","getPlatformName","durationObs","buildValueNumber","resolveObs","error","toastWarning","enc","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","other","mapStrToOptions","items","i","path","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","constructor","super","PrintoutService","code","printoutService","printLbl","getFirstValueText","linkID","mapping","A","C","H","K","L","N","P","W","X","Y","regex","match","exec","bookNo","pageNo","rowNo","checkDigit","isNaN","hasOwnProperty","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-53dfc2ec.6988ec1f.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"ART (Re-) Initiation\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport {\n  Field,\n  Option,\n} from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport { HtsArtInitiationService } from \"../../services/hts_art_initiation_service\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { toDate } from \"@/utils/Strs\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsArtInitiationService,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsArtInitiationService(\n            this.patientID,  this.providerID\n          );\n          this.fields = [\n            this.referralForArtInitiation(),\n            this.intendedArtSiteField(),\n            this.artAppointmentDataField(),\n            this.htsLinkageCodeField(),\n            this.hiddenArtReferralOutcomeStatusField(),\n          ];\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    onFinish(formData: any, computedData: any) {\n      this.saveFormEncounterAndProceed({\n        encounterTypeID: this.service.encounterTypeID,\n        formData,\n        computedData,\n      })\n    },\n    referralForArtInitiation(): Field {\n      return {\n        id: \"is_referral\",\n        helpText: \"Referral for ART (Re-)Initiation\",\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            obs: this.service.buildValueText(\"ART referral\", v),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Do you want to refer client?\",\n              value: \"\",\n              values: this.yesNoOptions(),\n            },\n          ];\n        },\n      };\n    },\n    intendedArtSiteField(): Field {\n      return {\n        id: \"art_site\",\n        helpText: \"Intended Site for ART\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: ({ label }: Option) => ({\n          obs: this.service.buildValueText(\"Referral location\", label),\n        }),\n        options: (_: any, filter = \"\") => getFacilities(filter),\n        condition: (f: any) => f.is_referral === \"Yes\",\n        defaultValue: () => HtsArtInitiationService.getLocationName(),\n        config: {\n          footerBtns: [\n            {\n              name: \"Here\",\n              slot: \"end\",\n              onClickComponentEvents: {\n                setValue: () => HtsArtInitiationService.getLocationName()\n              },\n              onClick: () => null,\n            },\n          ],\n          showKeyboard: true,\n          isFilterDataViaApi: true,\n        },\n      };\n    },\n    artAppointmentDataField(): Field {\n      return {\n        id: \"art_appointment_date\",\n        helpText: \"Appointment Date for ART Referral\",\n        type: FieldType.TT_DATE_PICKER,\n        isRequired: () => true,\n        defaultValue: () => this.service.date,\n        condition: (f: any) => f.is_referral === \"Yes\",\n        finalComputedValue: (d: Option) => {\n          return {\n            obs: this.service.buildValueDate(\"Appointment date\", `${d.value}`),\n          };\n        },\n        config: {\n          minDate: () => this.service.date,\n          infoItems: (date: string) => {\n            return [\n              {\n                label: \"Set appointment date\",\n                value: toDate(date),\n              },\n            ];\n          },\n          hiddenFooterBtns: [\"Clear\"],\n        },\n      };\n    },\n    htsLinkageCodeField() {\n      return {\n        id: \"linkage_code\",\n        helpText: \"LINKAGE CODE\",\n        type: FieldType.TT_TEXT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueText(\"HTC serial number\", `${v.value.toString().toUpperCase()}`),\n          };\n        },\n        validation: (v: Option) => {\n          const value = v.value as string;\n          if(value == 'Unknown') return null;\n          return this.service.validLinkID(value.toUpperCase());\n        },\n      };\n    },\n    hiddenArtReferralOutcomeStatusField() {\n      return {\n        id: \"art_outcome_field\",\n        helpText: \"Art outcome\",\n        type: FieldType.TT_HIDDEN,\n        defaultValue: () => {\n          return this.toOption(\"Unknown\");\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Antiretroviral status or outcome\",\n              v.value\n            ),\n          };\n        },\n      };\n    },\n  },\n});\n","import { render } from \"./HtsArtInitiation.vue?vue&type=template&id=23f2b583&ts=true\"\nimport script from \"./HtsArtInitiation.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsArtInitiation.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\nimport { LabOrderService } from '@/apps/ART/services/lab_order_service'\nimport { OrderService } from '@/services/order_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { PrintoutService } from '@/services/printout_service';\nimport Prop from \"@/apps/GLOBAL_APP/global_prop\";\nexport class HtsArtInitiationService extends AppEncounterService {\n  patientID: number\n  printoutService: PrintoutService = new PrintoutService()\n    \n  constructor(patientID: number, providerID = -1) {\n      super(patientID, 79, providerID);\n      this.patientID = patientID;\n  }\n\n  async printHtsLinkageId(code: string) {\n    await this.printoutService.printLbl(\n      `/patients/${this.patientID}/labels/print_hts_linkage_code/${code}`\n    );\n  }\n\n    async getHtsCode() {\n      return (await this.getFirstValueText('HTC serial number'))||'Un-assigned'\n    }\n  \n  validLinkID(linkID: string): Array<string> | null {\n    const mapping: { [key: string]: number } = {\n      A: 0,\n      C: 1,\n      H: 2,\n      K: 3,\n      L: 4,\n      N: 5,\n      P: 6,\n      W: 7,\n      X: 8,\n      Y: 9,\n    };\n\n    const regex = /^(\\d{1,4})-(\\d{1,3})-(\\d{1,2})-([A-CE-HK-NP-Y])$/;\n    const match = regex.exec(linkID);\n\n    if (!match) {\n      return [\"Invalid LinkID format\"]\n    }\n\n    const bookNo = parseInt(match[1], 10);\n    const pageNo = parseInt(match[2], 10);\n    const rowNo = parseInt(match[3], 10);\n    const checkDigit = match[4];\n\n    // book no and row no should not have leading zeros\n    if (match[1].length !== bookNo.toString().length || match[3].length !== rowNo.toString().length || match[2].length !== pageNo.toString().length) {\n      return [\"Invalid LinkID, book number and row number should not have leading zeros\"];\n    }\n\n    // Validate book number, page number, and row number\n    if (\n      isNaN(bookNo) ||\n      isNaN(pageNo) ||\n      isNaN(rowNo) ||\n      bookNo < 1 ||\n      bookNo > 9999 ||\n      pageNo < 1 ||\n      pageNo > 999 ||\n      rowNo < 1 ||\n      rowNo > 99\n    ) {\n      return [\"Invalid LinkID format on book, page, or row number\"];\n    }\n\n    // Validate check digit\n    // eslint-disable-next-line no-prototype-builtins\n    if (!mapping.hasOwnProperty(checkDigit)) {\n      return [\"Invalid check digit\"];\n    }\n\n    return null;\n  }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}