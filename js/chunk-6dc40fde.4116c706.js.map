{"version":3,"sources":["webpack:///./src/apps/ART/services/htn_service.ts","webpack:///./src/services/regimen_service.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/services/prescription_service.ts"],"names":["HTN_SESSION_KEY","BPManagementService","AppEncounterService","constructor","patientID","providerID","super","sbp","dbp","bpTrail","firstRecentGrade","secondRecentGrade","Object","values","sort","a","b","date","map","bp","this","getBpGrade","getSystolicBp","ObservationService","getFirstValueNumber","getDiastolicBp","query","getFirstValueCoded","getJson","drugID","pills","postJson","state","getDrugs","HCZ","drugs","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","adherence","notes","Enalapril","remaining","Amlodipine","Atenolol","RegimenService","Service","getProgramID","patientId","getSessionDate","DrugOrderService","orders","dispensations","order","pageSize","params","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","saveObsOffline","observations","id","uploadStatus","encounterTypeID","meta","formData","labOrders","synchronizeRecord","skipNextTask","nextOfflineFlow","error","toastWarning","runflowState","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","toastDanger","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","usernameA","usernameB","p","_p$person","names","_p$person2","latestName","toOption","label","other","mapStrToOptions","items","i","path","task","nextPatientWorkflowActivity","patientUrl","nextTask","yesNoOptions","toYesNoOption","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","AdverseEffectsCategories","PrescriptionService","_defineProperty","nextVisitInterval","fastTrack","regimenExtras","fastTrackMedications","hangingPills","medicationOrders","treatmentState","contraindications","sideEffects","tptPrescriptionCount","lastSideEffectDate","setNextVisitInterval","getHangingPills","getMedicationOrders","getCachedConceptName","getTptPrescriptionCount","getLastSideEffectDate","getContraindications","getSideEffects","getRegimenExtras","getPatientRegimens","getRegimens","getARVs","getCustomIngridients","getFastTrackMedications","getTreatmentState","isFastTrack","medicationOrdersAvailable","shouldPrescribeArvs","arvs","getCachedConceptID","shouldPrescribeExtras","extras","getConceptsByCategory","extrasAvailable","concept_id","getRegimenStarterpack","regimenCode","patientWeight","regimen","contraindication","getConceptID","getObs","forEach","o","toStandardHisFormat","obs_datetime","concept","value_coded","drugInduced","value_drug","res","count","yes","meds","getAll","value_numeric","toDate","_o$order","drug_order","drug_inventory_id","getLastDrugsReceived","withDosages","drug","dosage","getDrugDosages","drug_id","units","am","noon","pm","frequency","req","findAndGroupDrugSideEffects","allSideEffects","calculatePillsPerDay","parseFloat","estimatePackSize","pillsPerDay","packSize","packs","roundedPacks","Math","round","calculateDosage","morningTabs","eveningTabs","dose","calculateEquivalentDosage","calculateDateFromInterval","dateObj","setDate","getDate","getDrugPackSize","pack_size","barcodes","tabs","getInstructions","toOrderObj","reason","getFirstValueText","drugOrders","create","encounterID","response","saveValueTextObs","reasonForSwitch"],"mappings":"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","file":"js/chunk-6dc40fde.4116c706.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ObservationService } from \"@/services/observation_service\"\n\nexport enum HTN_SESSION_KEY {\n  Prescription = \"htnPrescription\"\n}\n\nexport class BPManagementService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n      super(patientID, 48, providerID) //TODO: Use encounter type reference name'\n    }\n\n    static getBpGrade(sbp: number, dbp: number) {\n      if ((sbp < 140) && (dbp < 90)) {\n        return \"normal\"\n      }\n      else if ((sbp >= 140 && sbp < 160) || (dbp >= 100 && dbp < 110)) {\n        return \"grade 1\"\n      }\n      else if ((sbp >= 180 && dbp > 110) || sbp >= 180) {\n        return \"grade 3\"\n      }\n      else if ((sbp >= 160 && sbp < 180) || (dbp >= 110)) {\n        return \"grade 2\"\n      }\n      return 'N/A'\n    }\n\n    /**\n     * BP is normointensive if two most recent consecutive tests are normal\n     * @param bpTrail \n     * @returns\n    */\n    static isBpNormotensive(bpTrail: any) {\n      const [ firstRecentGrade, secondRecentGrade ] = Object.values(bpTrail)\n        .sort((a: any, b: any) => a.date < b.date ? 1 : 0)\n        .map((bp: any) => this.getBpGrade(bp.sbp, bp.dbp))\n      return firstRecentGrade === 'normal' && secondRecentGrade === 'normal'\n    }\n\n    getSystolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Systolic blood pressure')\n    }\n\n    getDiastolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Diastolic blood pressure')\n    }\n\n    async onBpDrugs() {\n      const query = await ObservationService.getFirstValueCoded(this.patientID, 'Treatment status')\n      return query ? query === 'Yes' : false\n    }\n  \n    async getBPTrail() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/bp_trail`);\n    }\n    async getCurrentDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/current_bp_drugs`);\n    }\n    async getLastDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/last_bp_drugs_dispensation`);\n    }\n    async getAdherence(drugID: number, pills: number) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/remaining_bp_drugs`, {\n        'drug_id': drugID,\n        pills: pills\n      });\n    }\n    async enrollPatient(state: any) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/update_or_create_htn_state`, state);\n    }\n    static htnDrugReferences() {\n      return [\n        { \n          'drug_id': 275,\n          'drug_name': \"HCZ (25mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 942,\n          'drug_name': \"Enalapril (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 943,\n          'drug_name': \"Enalapril (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 558,\n          'drug_name': \"Amlodipine (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 559,\n          'drug_name': \"Amlodipine (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 117,\n          'drug_name': \"Atenolol (50mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 11,\n          'drug_name': \"Atenolol(100mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        }\n      ]\n    }\n    getDrugs() {\n        return {\n        HCZ: {\n          drugs: [\n            {\n              drugName: \"HCZ (25mg tablet)\",\n              drugID: 275,\n              amount: '25mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Enalapril: {\n          drugs: [\n            {\n              drugName: \"Enalapril (5mg tablet)\",\n              drugID: 942,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Enalapril (10mg tablet)\",\n              drugID: 943,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Amlodipine: {\n          drugs: [\n            {\n              drugName: \"Amlodipine (5mg tablet)\",\n              drugID: 558,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Amlodipine (10mg tablet)\",\n              drugID: 559,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Atenolol: {\n          drugs: [\n            {\n              drugName: \"Atenolol (50mg tablet)\",\n              drugID: 117,\n              amount: '50mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Atenolol(100mg tablet)\",\n              drugID: 11,\n              amount: '100mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n      }\n    }\n}","import { Service } from \"./service\";\n\nexport class RegimenService extends Service {\n    constructor() {\n        super()\n    } \n\n    static getAllArvRegimens() {\n        return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)\n    }\n\n    static getRegimens(patientId: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {'patient_id': patientId})\n    }\n\n    static getCustomIngridients() {\n        return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)\n    }\n\n    static getCurrentRegimen(patientId: number, date=this.getSessionDate()) {\n        return this.getJson(`programs/${this.getProgramID()}/${patientId}`, {date})   \n    }\n}","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n                Offline().saveObsOffline({\n                    observations: obs,\n                    id: this.offlineID,\n                    uploadStatus: status,\n                    encounterName: this.$route.name,\n                    encounterTypeID: params.encounterTypeID,\n                    meta: params.formData,\n                    labOrders: params.labOrders,\n                    created\n                }, created)\n                Offline().synchronizeRecord(this.offlineID)\n                if (!params.skipNextTask) this.nextOfflineFlow()\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            // if (!this.isOfflineMode()) {\n            //     try {\n            //         const enc = new AppEncounterService(\n            //             this.patientID,\n            //             params.encounterTypeID, \n            //             this.providerID\n            //         )\n            //         if ((await enc.createEncounter())) {\n            //             if ((await enc.saveObservationList(obs as ObsValue[]))) {\n            //                 status = 'Success'\n            //             }\n            //         }\n            //         if (typeof params.callback === 'function') {\n            //             await params.callback(enc)\n            //         }\n            //         created = true\n            //     } catch (e) {\n            //         created = false\n            //         if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n            //             status = 'NetworkError'\n            //         } else {\n            //             status = 'Exception'\n            //             console.error(`Exception while saving an encounter: ${e}`)\n            //         }\n            //     }\n            //     if (status === 'Exception') {\n            //         return toastDanger(\"An error has occured!\")\n            //     }\n            // }\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextOfflineFlow() {\n            const task = Offline().nextPatientWorkflowActivity(this.patientID)\n            if (!task || !task.patientUrl) return this.$router.push(`/patient/dashboard/${this.patientID}`)\n            return this.$router.push(`${task.patientUrl}/${this.patientID}`) \n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { toDate } from \"@/utils/Strs\";\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getARVs() {\n        return RegimenService.getJson('arv_drugs')\n    }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = (await AppEncounterService.getAll(this.patientID, 'Pills brought'))||[]\n        this.hangingPills = pills.filter((o: any) => {\n            if (o.value_numeric >= 1) {\n                // Condition for detecting pills brought during transfer in.. This is a bit hack-ish\n                if (o.value_drug && toDate(o.obs_datetime) === toDate(this.date)) {\n                    return true\n                }\n                // This is for normal workflow adherence pills\n                return o.order||false\n            }\n            return false\n        }).map((o: any) => o?.order?.drug_order?.drug_inventory_id||o.value_drug)        \n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / packSize\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n"],"sourceRoot":""}