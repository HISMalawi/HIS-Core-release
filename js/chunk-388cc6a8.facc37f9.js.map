{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue?64ff","webpack:///./src/apps/OPD/services/hiv_status_service.ts","webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue","webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue?124f","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","userAgentObs","AppEncounterService","buildValueText","getPlatformName","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","id","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","_component_his_standard_form","_resolveComponent","onSubmit","HIVStatusService","constructor","super","mixins","EncounterMixinVue","hivService","watch","isReady","getID","getFields","immediate","deep","encounter","buildDateObs","conceptName","date","isEstimate","match","buildValueDateEstimated","buildValueDate","helpText","FieldType","TT_SELECT","validation","Validation","computedValue","generateDateFields","minDate","maxDate","hiv_status","summaryLabel","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","computeValue","getDate","defaultValue","getLocationName","_","getFacilities","config","showKeyboard","isFilterDataViaApi","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","facilities","LocationService","f","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-388cc6a8.facc37f9.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class HIVStatusService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 39, providerID) \n    }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { EstimationFieldType, generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper';\nimport { toastWarning } from '@/utils/Alerts';\nimport { HIVStatusService } from '../../services/hiv_status_service';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        hivService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.hivService = new HIVStatusService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            const encounter = await this.hivService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create encounter') \n            const data = await this.resolveObs({...computedData})\n            const obs = await this.hivService.saveObservationList(data)\n            if (!obs) return toastWarning('Unable to save observations')\n            this.nextTask()        \n        },\n        buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n            let obs = {}\n            if (date.match(/unknown/i)) {\n                obs = this.hivService.buildValueText(conceptName, 'Unknown')\n            } else if (isEstimate) {\n                obs = this.hivService.buildValueDateEstimated(conceptName, date)\n            } else {\n                obs = this.hivService.buildValueDate(conceptName, date)\n            }\n            return obs\n        },\n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'hiv_status',\n                    helpText: 'HIV status',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ value }: Option) => ({\n                        obs: this.hivService.buildValueText('HIV status', value)\n                    }),\n                    options: () => ([\n                        { label: 'Positive not ART', value: 'Positive not ART' },\n                        { label: 'Posititve on ART', value: 'Positive on ART' },\n                        { label: 'Previous negative', value: 'Previous negative' },\n                        { label: 'New positive', value: 'New positive' },\n                        { label: 'New negative', value: 'New negative' },\n                        { label: 'Never tested', value: 'Never tested' },\n                    ])\n                },\n                ...generateDateFields({\n                    id: 'hiv_test_date',\n                    helpText: 'HIV Test',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => HIVStatusService.getSessionDate(),\n                    condition: (fields: any) => fields.hiv_status.value !== 'Never tested',\n                    summaryLabel: 'HIV test date',\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => this.buildDateObs('HIV test date', date, isEstimate)\n                    \n                }, this.hivService.getDate()),\n                {\n                    id: 'test_location',\n                    helpText: 'HIV test location',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    defaultValue: () => HIVStatusService.getLocationName(),\n                    computedValue: ({ label }: Option) => ({obs: this.hivService.buildValueText('HIV test location', label)}),\n                    condition: (fields: any) => fields.hiv_status.value !== 'Never tested',\n                    options: (_: any, filter='') => getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./HIVStatus.vue?vue&type=template&id=e5f40c22&ts=true\"\nimport script from \"./HIVStatus.vue?vue&type=script&lang=ts\"\nexport * from \"./HIVStatus.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}