{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/CurrentPregnancy.vue?ef50","webpack:///./src/apps/ANC/Views/Encounters/CurrentPregnancy.vue","webpack:///./src/apps/ANC/Views/Encounters/CurrentPregnancy.vue?9e49","webpack:///./src/apps/ANC/Services/anc_current_pregnancy.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","AncCurrentPregnancyService","patientID","providerID","getFields","immediate","methods","computedData","enrollPatient","RecordConflictError","console","warn","resolveObs","obs","createEncounter","saveObservationList","nextTask","buildDelieveryDateObs","lmpDate","this","buildValueDate","estimateDelieveryDate","buildValueNumber","calculateWeekOfFirstVisit","id","proxyID","helpText","type","FieldType","TT_ANC_LMP_DATE_INPUT","computedValue","v","value","beforeNext","gestationWeeks","parseInt","other","alertConfirmation","validation","validateSeries","Validation","required","Date","today","config","initialDate","date","calculateDelieveryDate","d","HisDate","toStandardHisDisplayFormat","calculateGestationWeeks","allowUnknown","TT_NUMBER","condition","f","lnmp","calculateGestationDateFromPeriod","rangeOf","TT_SELECT","buildValueText","label","options","filter","getFacilities","footerBtns","name","slot","onClickComponentEvents","setValue","btnEvent","btnOutput","onClick","getLocationName","showKeyboard","isFilterDataViaApi","buildValueCoded","yesNoOptions","bed_net_available_for_use","__exports__","program","PatientProgramService","enrollProgram","setStateDate","setStateId","updateState","lnmpDate","theDate","setDate","getDate","s","String","Math","floor","period","dayjs","subtract","endOf","format","setMonth","getMonth","month","AppendleadingZero","day","getFullYear","AppEncounterService"],"mappings":"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","file":"js/chunk-72632c0e.1d834cad.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncCurrentPregnancyService } from \"@/apps/ANC/Services/anc_current_pregnancy\"\nimport { Field, FooterBtnEvent, Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { ObsValue } from '@/services/observation_service'\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport HisDate from \"@/utils/Date\"\nimport { alertConfirmation } from '@/utils/Alerts'\nimport { RecordConflictError } from '@/services/service'\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n            this.service = new AncCurrentPregnancyService(this.patientID, this.providerID)\n            this.fields = this.getFields()\n        } \n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      try {\n        await this.service.enrollPatient()\n      } catch (e) {\n       if(e instanceof RecordConflictError) {\n        console.warn(`${e}`)\n       } else {\n         throw e\n       }\n      }\n      const obs = await this.resolveObs(computedData)\n      await this.service.createEncounter()\n      await this.service.saveObservationList(obs as ObsValue[])\n      this.nextTask()\n    },\n    buildDelieveryDateObs(lmpDate: string) {\n      if (lmpDate != 'Unknown') {\n        return [\n          this.service.buildValueDate('Last menstrual period', lmpDate),\n          this.service.buildValueDate('Estimated date of delivery', \n            this.service.estimateDelieveryDate(lmpDate)\n          ),\n          this.service.buildValueNumber('Week of First Visit', \n            this.service.calculateWeekOfFirstVisit(lmpDate)\n          )\n        ]\n      }\n    },\n    getFields(): Field[] {\n        return [\n            {\n                id: 'lnmp',\n                proxyID: 'delivery_date',\n                helpText: 'Last Normal Menstrual Period',\n                type: FieldType.TT_ANC_LMP_DATE_INPUT,\n                computedValue: (v: Option) => this.buildDelieveryDateObs(v.value as string),\n                beforeNext: async (v: Option) => {\n                  const gestationWeeks = parseInt(v.other)\n                  if (typeof gestationWeeks === 'number') {\n                    if (gestationWeeks <= 0 || gestationWeeks > 42) {\n                      if ((await alertConfirmation('Gestation weeks out of range of 0-42. Are you sure you want to continue?'))) {\n                        return true\n                      } else {\n                        return false\n                      }\n                    }\n                  }\n                  return true\n                },\n                validation: (v: Option) => this.validateSeries([\n                  () => Validation.required(v),\n                  () => {\n                      if (v.value) {\n                        const lmpDate = new Date(v.value)\n                        const today = new Date()\n                        if (lmpDate > today) {\n                          return ['Last menstrual period cannot be in the future']\n                        }\n                      }\n                      return null\n                  }\n                ]),\n                config: {\n                    initialDate: () => this.service.date,\n                    calculateDelieveryDate: (d: string) => HisDate.toStandardHisDisplayFormat(\n                      this.service.estimateDelieveryDate(d)\n                    ),\n                    calculateGestationWeeks: (d: string) => this.service.calculateWeekOfFirstVisit(d),\n                    allowUnknown: true\n                }\n            },\n            {\n                id: 'estimate_lmp',\n                proxyID: 'delivery_date',\n                helpText: 'Gestation (months)',\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.lnmp.value === 'Unknown',\n                computedValue: (v: Option) => {\n                    return this.buildDelieveryDateObs(this.service.calculateGestationDateFromPeriod(v.value))\n                },\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 10)\n                ])\n            },\n            {\n                id: 'planned_delivery_place',\n                helpText: 'Planned delivery place',\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => this.service.buildValueText('Planned Delivery Place', v.label),\n                validation: (v: Option) => Validation.required(v),\n                options: (_: any, filter='') => getFacilities(filter),\n                config: {\n                    footerBtns: [\n                      {\n                        name: \"Here\",\n                        slot: \"end\",\n                        onClickComponentEvents: {\n                          setValue: (btnEvent: FooterBtnEvent) => {\n                            return btnEvent.btnOutput\n                          }\n                        },\n                        onClick: () => AncCurrentPregnancyService.getLocationName()\n                      }\n                    ],\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            },\n            {\n                id: 'bed_net_available_for_use',\n                helpText: 'Mosquito net in good condition available for own use',\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => this.service.buildValueCoded('Do you use bed nets', v.value),\n                validation: (v: Option) => Validation.required(v),\n                options: () => {\n                    return this.yesNoOptions()\n                }\n            },\n            {\n                id: 'bed_net_given',\n                helpText: 'Bed net given today',\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => this.service.buildValueCoded('Mosquito net started', v.value),\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.bed_net_available_for_use.value === 'No',\n                options: () => {\n                    return this.yesNoOptions()\n                }\n            },\n            {\n                id: 'previous_ttv_given',\n                helpText: 'Previous TTV given before this pregnancy',\n                type: FieldType.TT_NUMBER,\n                computedValue: (v: Option) => this.service.buildValueNumber('TTV', v.value),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    }\n  }\n})\n","import { render } from \"./CurrentPregnancy.vue?vue&type=template&id=1e0496c7&ts=true\"\nimport script from \"./CurrentPregnancy.vue?vue&type=script&lang=ts\"\nexport * from \"./CurrentPregnancy.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { PatientProgramService } from \"@/services/patient_program_service\"\nimport dayjs from \"dayjs\";\nimport { AppendleadingZero } from \"@/utils/Strs\";\n\nexport class AncCurrentPregnancyService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 81, providerID)\n    }\n\n    async enrollPatient() {\n        const program = new PatientProgramService(this.patientID)\n        /**\n         * TODO: Check if patient is already enrolled first\n        */\n        await program.enrollProgram()\n        program.setStateDate(this.date)\n        program.setStateId(118) //Currently on treatment state... Please remove this ID hack if you can\n        await program.updateState()\n    }\n\n    calculateWeekOfFirstVisit(lnmpDate: string) {\n        const theDate: any = new Date(lnmpDate)\n        theDate.setDate(theDate.getDate() + 7);\n        const today: any = new Date(this.getDate());\n        const s = today - theDate;\n        return String(Math.floor(s / (24 * 60 * 60 * 7 * 1000)));\n    }\n\n    calculateGestationDateFromPeriod(period: number) {\n        return dayjs(this.date).subtract(period, 'months').endOf('month').format('YYYY-MM-DD')\n    }\n\n    estimateDelieveryDate(lnmpDate: string) {\n        const theDate: any = new Date(lnmpDate)\n        theDate.setDate(theDate.getDate() + 7);\n        theDate.setMonth(theDate.getMonth() + 9);\n        const month = AppendleadingZero(theDate.getMonth()+1)\n        const day = AppendleadingZero(theDate.getDate())\n        return `${theDate.getFullYear()}-${month}-${day}`\n    }\n}\n"],"sourceRoot":""}