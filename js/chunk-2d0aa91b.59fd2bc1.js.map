{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/SurgicalHistory.vue?f129","webpack:///./src/apps/ANC/Services/anc_surgical_history_service.ts","webpack:///./src/apps/ANC/Views/Encounters/SurgicalHistory.vue","webpack:///./src/apps/ANC/Views/Encounters/SurgicalHistory.vue?59dd"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","formFields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","AncSurgicalHistoryService","patientID","providerID","ConceptService","getConceptsByCategory","sort","a","b","name","AppEncounterService","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","getFields","immediate","methods","computedData","resolveObs","obs","anc","createEncounter","saveObservationList","nextTask","surgeryOptions","onMap","surgicalHistoryOptions","map","h","label","value","isChecked","id","helpText","type","FieldType","TT_MULTIPLE_SELECT","validation","v","Validation","required","onValueUpdate","list","option","i","noneIndex","findIndex","computedValue","find","buildValueText","buildValueCoded","options","config","footerBtns","onClickComponentEvents","refreshOptions","onClick","__exports__"],"mappings":"uIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,IAAMC,EAA+BC,8BAAkB,qBACjDC,EAAsBD,8BAAkB,YAE9C,OAAQE,yBAAcC,yBAAaF,EAAqB,KAAM,CAC5DG,QAASC,sBAAS,iBAAM,CACtBC,yBAAaP,EAA8B,CACzCQ,OAAQd,EAAKe,WACbC,aAAa,EACbC,eAAgBjB,EAAKkB,SACrBC,sBAAuBnB,EAAKoB,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,8BAE3CC,EAAG,I,kLCZMC,EAAb,wDACI,WAAYC,EAAmBC,GAAkB,0CACvCD,EAAW,GAAIC,GAF7B,kEAKI,WACI,OAAOC,OAAeC,sBAAsB,wBACvCC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,KAAOD,EAAEC,KAAO,GAAK,SAPnD,GAA+CC,Q,oCCQhCC,+BAAgB,CAC7BC,WAAY,CAAEC,gBACdC,OAAQ,CAACC,QACTC,KAAM,iBAAO,CACXtB,WAAY,GACZuB,QAAS,KAEXC,MAAO,CACLC,MAAO,CACLC,QADK,SACGD,GACFA,IAAOE,KAAK3B,WAAa2B,KAAKC,cAEpCC,WAAW,IAGfC,QAAS,CACD3B,SADC,SACQG,EAAQyB,GAAiB,gLACpB,EAAKC,WAAWD,GADI,cAChCE,EADgC,OAEhCC,EAAM,IAAI3B,EAA0B,EAAKC,UAAW,EAAKC,YAFzB,SAGhCyB,EAAIC,kBAH4B,uBAIhCD,EAAIE,oBAAoBH,GAJQ,OAKtC,EAAKI,WALiC,8CAOxCC,eARO,SAQQC,GACb,MAAO,yBACFhC,EAA0BiC,0BADxB,CAEL,CAAEzB,KAAM,UACR0B,KAAI,SAAAC,GAAC,OAAIH,EAAM,CACbI,MAAOD,EAAE3B,KACT6B,MAAO,MACPC,WAAW,QAGjBjB,UAlBO,WAkBE,WACP,MAAO,CACL,CACEkB,GAAI,UACJC,SAAU,sCACVC,KAAMC,OAAUC,mBAChBC,WAAY,SAACC,GAAD,OAAiBC,OAAWC,SAASF,IACjDG,cAAe,SAACC,EAAgBC,GAC9B,GAAqB,SAAjBA,EAAOd,OAAoBc,EAAOZ,UAClC,OAAOW,EAAKf,KAAI,SAAAiB,GAEZ,MADe,QAAXA,EAAEf,QAAiBe,EAAEb,WAAY,GAC9Ba,KAER,GAAoB,QAAhBD,EAAOd,OAAmBc,EAAOZ,UAAU,CAClD,IAAMc,EAAYC,uBAAUJ,EAAM,CAAEb,MAAO,SAC3Ca,EAAKG,GAAWd,WAAY,EAEhC,OAAOW,GAETK,cAAe,SAACT,GACd,OAAIU,kBAAKV,EAAG,CAAET,MAAO,SACZpC,EAA0BwD,eAAe,iBAAkB,QAE7DX,EAAEX,KAAI,SAAAiB,GAAC,OAAInD,EAA0ByD,gBAAgBN,EAAEf,MAA5C,UAAsDe,EAAEd,YAE5EqB,QAAS,kBAAM,EAAK3B,gBAAe,SAAAoB,GAAC,OAAIA,MACxCQ,OAAQ,CACNC,WAAY,CACV,CACE,KAAQ,OACR,KAAQ,MACRC,uBAAwB,CACtBC,eAAgB,kBAAM,EAAK/B,gBAAe,SAAAoB,GAExC,OADAA,EAAEb,UAAwB,SAAZa,EAAEf,MACTe,OAGXY,QAAS,iBAAM,iB,qBC5E/B,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASvF,KAErD","file":"js/chunk-2d0aa91b.59fd2bc1.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { ConceptService } from \"@/services/concept_service\";\n\nexport class AncSurgicalHistoryService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 83, providerID)\n    }\n\n    static surgicalHistoryOptions() {\n        return ConceptService.getConceptsByCategory('anc_surgical_history')\n            .sort((a, b) => a.name > b.name ? 1 : -1)\n    }\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncSurgicalHistoryService} from \"@/apps/ANC/Services/anc_surgical_history_service\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { find, findIndex } from 'lodash'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) this.formFields = this.getFields()\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData)\n      const anc = new AncSurgicalHistoryService(this.patientID, this.providerID)\n      await anc.createEncounter()\n      await anc.saveObservationList(obs as ObsValue[])\n      this.nextTask()\n    },\n    surgeryOptions(onMap: (v: Option) => Option) {\n      return [\n        ...AncSurgicalHistoryService.surgicalHistoryOptions(), \n        { name: 'None'}\n      ].map(h =>(onMap({\n          label: h.name,\n          value: 'Yes',\n          isChecked: false\n      })))\n    },\n    getFields() {\n      return [\n        {\n          id: 'history',\n          helpText: 'Previous Surgical Procedure(s) Done',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          validation: (v: Option[]) => Validation.required(v),\n          onValueUpdate: (list: Option[], option: Option) => {\n            if (option.label === 'None' && option.isChecked) {\n                return list.map(i => {\n                    if (i.label != \"None\") i.isChecked = false;\n                    return i\n                })\n            } else if (option.label != 'None' && option.isChecked){\n                const noneIndex = findIndex(list, { label: \"None\" });\n                list[noneIndex].isChecked = false; \n            }\n            return list\n          },\n          computedValue: (v: Option[]) => {\n            if (find(v, { label: 'None' })) {\n              return AncSurgicalHistoryService.buildValueText('Procedure done', 'None')\n            }\n            return v.map(i => AncSurgicalHistoryService.buildValueCoded(i.label, `${i.value}`))\n          },\n          options: () => this.surgeryOptions(i => i),\n          config: {\n            footerBtns: [\n              {\n                \"name\": \"None\",\n                \"slot\": \"end\",\n                onClickComponentEvents: {\n                  refreshOptions: () => this.surgeryOptions(i => {\n                    i.isChecked = i.label === 'None'\n                    return i\n                  })\n                },\n                onClick: () => \"None\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./SurgicalHistory.vue?vue&type=template&id=487f2895&ts=true\"\nimport script from \"./SurgicalHistory.vue?vue&type=script&lang=ts\"\nexport * from \"./SurgicalHistory.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}