{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/apps/Registration/views/encounters/OutpatientReception.vue?5287","webpack:///./src/apps/Registration/services/patient_reception_service.ts","webpack:///./src/apps/Registration/views/encounters/OutpatientReception.vue","webpack:///./src/apps/Registration/views/encounters/OutpatientReception.vue?00e9","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","split","username","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","_component_his_standard_form","_resolveComponent","onSubmit","PatientReceptionService","AppEncounterService","mixins","EncounterMixinVue","receptionService","isReady","getID","getFields","createEncounter","encounter","toastWarning","registrationData","saveObservationList","registrationObs","id","helpText","FieldType","TT_SELECT","validation","Validation","computedValue","v","buildValueCoded","buildValueText","referral","_","getFacilities","config","showKeyboard","isFilterDataViaApi","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","LocationService","facilities","f","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-558c7b2c.28590d5f.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class PatientReceptionService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 80, providerID) \n    }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientReceptionService } from \"@/apps/Registration/services/patient_reception_service\"\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { toastWarning } from '@/utils/Alerts';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        receptionService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.receptionService = new PatientReceptionService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            const encounter = await this.receptionService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create registration encounter')\n            \n            const registrationData = await this.resolveObs({...computedData})\n            const registrationObs = await this.receptionService.saveObservationList(registrationData)\n            if (!registrationObs) return toastWarning('Unable to save observations')\n\n            this.$router.push(`/registration/encounters/patient_services/${this.patientID}`);\n        },\n        \n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'referral',\n                    helpText: 'Is the Patient a Referral Case From Another Health Facility?',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: (v: Option) => ({ obs: this.receptionService.buildValueCoded('Is patient referred?', v.value)}),\n                    options: () => {\n                        return [\n                            { label: 'Yes', value: 'Yes' },\n                            { label: 'No', value: 'No' },\n                        ]\n                    }\n                },\n                {\n                    id: 'referring_facility_name',\n                    helpText: 'Referred from',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ label }: Option) => ({obs: this.receptionService.buildValueText('Referred from', label)}),\n                    condition: (fields: any) => fields.referral.value === 'Yes',\n                    options: (_: any, filter='') => getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./OutpatientReception.vue?vue&type=template&id=97d026d8&ts=true\"\nimport script from \"./OutpatientReception.vue?vue&type=script&lang=ts\"\nexport * from \"./OutpatientReception.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n"],"sourceRoot":""}