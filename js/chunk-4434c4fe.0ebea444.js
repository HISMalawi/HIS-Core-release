(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-4434c4fe"],{"303d":function(t,e,a){"use strict";a("afc1")},3171:function(t,e,a){"use strict";a.r(e);var i=a("7a23");const n=Object(i["withScopeId"])("data-v-0492b742");Object(i["pushScopeId"])("data-v-0492b742");const s={class:"tool-bar-medium-card"},r={class:"his-sm-text"},o=Object(i["createTextVNode"])("Patient Name: "),c=Object(i["createTextVNode"])(),d=Object(i["createVNode"])("p",null,null,-1),l={class:"his-sm-text"},p=Object(i["createTextVNode"])("Birthdate: "),h=Object(i["createTextVNode"])(),u=Object(i["createVNode"])("p",null,null,-1),m={class:"his-sm-text"},g=Object(i["createTextVNode"])("Gender: "),N={class:"tool-bar-medium-card"},f={class:"his-sm-text"},D=Object(i["createTextVNode"])("Ancestry district: "),O=Object(i["createVNode"])("p",null,null,-1),b={class:"his-sm-text"},E=Object(i["createTextVNode"])("Ancestry TA: "),I=Object(i["createVNode"])("p",null,null,-1),y={class:"his-sm-text"},w=Object(i["createTextVNode"])("Ancestry village: "),A=Object(i["createVNode"])("p",null,null,-1),_={class:"tool-bar-medium-card"},P={class:"his-sm-text"},T=Object(i["createTextVNode"])("Current District:"),C=Object(i["createVNode"])("p",null,null,-1),j={class:"his-sm-text"},v=Object(i["createTextVNode"])("Current TA: "),R=Object(i["createVNode"])("p",null,null,-1),V={class:"his-sm-text"},L=Object(i["createTextVNode"])("Current Village: "),F=Object(i["createVNode"])("p",null,null,-1),S=Object(i["createTextVNode"])(" Cancel "),U=Object(i["createTextVNode"])("Void Client"),M=Object(i["createTextVNode"])(" New Pregnancy "),H=Object(i["createTextVNode"])(" Continue ");Object(i["popScopeId"])();const x=n((function(t,e,a,x,G,k){const B=Object(i["resolveComponent"])("ion-col"),X=Object(i["resolveComponent"])("ion-row"),Y=Object(i["resolveComponent"])("ion-toolbar"),$=Object(i["resolveComponent"])("ion-header"),W=Object(i["resolveComponent"])("confirmation-card"),z=Object(i["resolveComponent"])("ion-content"),K=Object(i["resolveComponent"])("ion-button"),q=Object(i["resolveComponent"])("ion-spinner"),J=Object(i["resolveComponent"])("ion-footer"),Z=Object(i["resolveComponent"])("ion-page");return Object(i["openBlock"])(),Object(i["createBlock"])(Z,null,{default:n(()=>[Object(i["createVNode"])($,{translucent:!0},{default:n(()=>[Object(i["createVNode"])(Y,null,{default:n(()=>[Object(i["createVNode"])(X,null,{default:n(()=>[Object(i["createVNode"])(B,null,{default:n(()=>[Object(i["createVNode"])("div",s,[Object(i["createVNode"])("span",r,[o,Object(i["createVNode"])("b",null,Object(i["toDisplayString"])(t.demographics.patientName),1)]),c,d,Object(i["createVNode"])("span",l,[p,Object(i["createVNode"])("b",null,Object(i["toDisplayString"])(t.birthdate),1)]),h,u,Object(i["createVNode"])("span",m,[g,Object(i["createVNode"])("b",null,Object(i["toDisplayString"])(t.demographics.gender),1)])])]),_:1}),Object(i["createVNode"])(B,null,{default:n(()=>[Object(i["createVNode"])("div",N,[Object(i["createVNode"])("span",f,[D,Object(i["createVNode"])("b",null,Object(i["toDisplayString"])(t.demographics.ancestryDistrict),1)]),O,Object(i["createVNode"])("span",b,[E,Object(i["createVNode"])("b",null,Object(i["toDisplayString"])(t.demographics.ancestryTA),1)]),I,Object(i["createVNode"])("span",y,[w,Object(i["createVNode"])("b",null,Object(i["toDisplayString"])(t.demographics.ancestryVillage),1)]),A])]),_:1}),Object(i["createVNode"])(B,null,{default:n(()=>[Object(i["createVNode"])("div",_,[Object(i["createVNode"])("span",P,[T,Object(i["createVNode"])("b",null,Object(i["toDisplayString"])(t.demographics.currentDistrict),1),C]),Object(i["createVNode"])("span",j,[v,Object(i["createVNode"])("b",null,Object(i["toDisplayString"])(t.demographics.currentTA),1),R]),Object(i["createVNode"])("span",V,[L,Object(i["createVNode"])("b",null,Object(i["toDisplayString"])(t.demographics.currentVillage),1),F])])]),_:1})]),_:1})]),_:1})]),_:1}),Object(i["createVNode"])(z,null,{default:n(()=>[Object(i["createVNode"])(X,null,{default:n(()=>[(Object(i["openBlock"])(!0),Object(i["createBlock"])(i["Fragment"],null,Object(i["renderList"])(t.cards,(t,e)=>(Object(i["openBlock"])(),Object(i["createBlock"])(B,{"size-md":"4","size-sm":"12",key:e},{default:n(()=>[Object(i["createVNode"])(W,{key:"card-"+e,title:t.label,items:t.values,isLoading:t.isLoading},null,8,["title","items","isLoading"])]),_:2},1024))),128))]),_:1})]),_:1}),Object(i["createVNode"])(J,null,{default:n(()=>[Object(i["createVNode"])(Y,{color:"dark"},{default:n(()=>[Object(i["createVNode"])(K,{color:"danger",size:"large","router-link":"/"},{default:n(()=>[S]),_:1}),Object(i["createVNode"])(K,{disabled:!(t.facts.patientFound&&t.isAdmin),color:"danger left",size:"large",onClick:t.onVoid},{default:n(()=>[U]),_:1},8,["disabled","onClick"]),t.facts.anc.canInitiateNewPregnancy?(Object(i["openBlock"])(),Object(i["createBlock"])(K,{key:0,slot:"end",size:"large",onClick:t.onInitiateNewAncPregnancy},{default:n(()=>[M]),_:1},8,["onClick"])):Object(i["createCommentVNode"])("",!0),Object(i["createVNode"])(K,{disabled:!t.facts.patientFound||t.facts.patientFound&&!t.isReady,slot:"end",color:"success",size:"large",onClick:t.nextTask},{default:n(()=>[t.isReady?Object(i["createCommentVNode"])("",!0):(Object(i["openBlock"])(),Object(i["createBlock"])(q,{key:0,name:"crescent"})),H]),_:1},8,["disabled","onClick"])]),_:1})]),_:1})]),_:1})}));var G,k,B=a("2ef0"),X=a("9283"),Y=a("3e53"),$=a("0fa1"),W=a("c1e4"),z=a("c21d"),K=a("23e6"),q=a("74f4"),J=a("b5e4"),Z=a("8a30"),Q=a("7f35"),tt=a("0011");(function(t){t["ON_CONTINUE"]="oncontinue",t["ONLOAD"]="onload"})(G||(G={})),function(t){t["FORCE_EXIT"]="forceExit",t["GO_HOME"]="gotoHome",t["GO_BACK"]="goBack",t["CONTINUE"]="continue",t["ENROLL"]="enroll",t["EXIT"]="exit",t["ACTIVATE_FN"]="activateFn",t["ASSIGN_NPID"]="assignNpid",t["UPDATE_DMG"]="updateDemographics",t["PRINT_NPID"]="printNPID",t["CREATE_NPID_WITH_REMOTE_DIFF"]="createNpiDWithRemote",t["REFRESH_DDE_DEMOGRAPHICS"]="refreshDemographicsDDE",t["UPDATE_LOCAL_DDE_DIFFS"]="updateLocalDiffs",t["RESOLVE_DUPLICATE_NPIDS"]="resolveDuplicateNpids",t["ADD_AS_DRUG_REFILL"]="addAsDrugRefill",t["ADD_AS_NEW_PATIENT"]="addAsNewPatient",t["ADD_AS_EXTERNAL_CONSULTATION"]="addAsExternalConsultation",t["INITIATE_ANC_PREGNANCY"]="initiateNewAncPregnancy",t["VIEW_MERGE_AUDIT_FOR_NPID"]="viewMergeAuditForNpid",t["SEARCH_BY_NAME"]="searchByName"}(k||(k={}));const et={"[DDE NOT ENABLED] Do not proceed if patient is not found in the system":{weight:98,targetEvent:G.ONLOAD,actions:{alert:async()=>{const t=await Object(Q["a"])(" 0 Search results","Patient has not been found","Choose how to proceed",[{name:"Close",slot:"start",color:"primary"},{name:"Search by name",slot:"end",color:"success"}],"his-danger-color");return"Search by name"===t?k.SEARCH_BY_NAME:k.GO_HOME}},conditions:{globalProperties({ddeEnabled:t}){return!1===t},patientFound(t){return!1===t}}},"[DDE ENABLED] Show invalid attributes for a patient whose remote":{weight:78,targetEvent:G.ONLOAD,actions:{alert:async t=>(await Object(Q["d"])("DDE Entity Error","Remote patient has invalid attributes",["Attribute","Errors"],t.demographics.invalidDemographics,[{name:"Close",slot:"start",color:"danger"}],"his-danger-color"),k.GO_BACK)},conditions:{demographics({hasInvalidDemographics:t}){return!0===t}}},"[DDE ENABLED] Do not proceed if NPID is not found and Provide history of voided NPIDS":{weight:98,targetEvent:G.ONLOAD,actions:{alert:async t=>{const e=await Object(Q["d"])("Voided patients with ID "+t.scannedNpid,"NPID was not found. Please review available patient with similar ID",t.dde.voidedNpids.cols,t.dde.voidedNpids.rows,[{name:"Close",slot:"start",color:"primary"},{name:"Merge history",slot:"end",color:"primary"},{name:"Search by name",slot:"end",color:"success"}],"his-danger-color");return"Merge history"===e?k.VIEW_MERGE_AUDIT_FOR_NPID:"Search by name"===e?k.SEARCH_BY_NAME:k.GO_HOME}},conditions:{globalProperties({ddeEnabled:t}){return!0===t},patientFound(t){return!1===t}}},"[DDE NOT ENABLED] Notify the user to proceed with Remote NPID if local NPID does not match remote":{weight:77,targetEvent:G.ONLOAD,actions:{alert:async({dde:t})=>(await Object(Q["a"])("Missing Local NPID",`Local NPID of "${t.localNpidDiff}" does not match remote "${t.remoteNpidDiff}"`,"Proceed to Fix issue",[{name:"Resolve issue",slot:"start",color:"danger"}],"his-danger-color"),k.CREATE_NPID_WITH_REMOTE_DIFF)},conditions:{dde({localNpidDiff:t,remoteNpidDiff:e}){return t!=e},globalProperties({ddeEnabled:t}){return!0===t}}},"Warn if patient is missing National ID and assign them one":{weight:75,targetEvent:G.ONLOAD,actions:{alert:async()=>(await Object(Q["a"])("Missing National ID","Patient was found BUT has no National ID","The system is going to assign the patient with a new ID",[{name:"OK",slot:"start",color:"primary"}],"his-danger-color"),k.ASSIGN_NPID)},conditions:{currentNpid:t=>Object(tt["c"])(t)}},"Detect NPID over 5 duplicates and prompt the user to resolve them":{weight:76,targetEvent:G.ONLOAD,actions:{alert:async({scannedNpid:t})=>{const e=await Object(Q["a"])("More than 5 duplicates found",`There are more than 5 duplicates for this NPID (${t}). Please search by name and gender`,"Choose how to proceed",[{name:"Close",slot:"start",color:"danger"},{name:"Search by name",slot:"start",color:"primary"}],"his-danger-color");return"Search by name"===e?k.SEARCH_BY_NAME:k.GO_HOME}},conditions:{npidHasOverFiveDuplicates(t){return t}}},"Detect NPID duplicates and prompt the user to resolve them":{weight:99,targetEvent:G.ONLOAD,actions:{alert:async({scannedNpid:t})=>(await Object(Q["a"])("DUPLICATE NPID",`NPID ${t} is currently assigned to multiple patients`,"Proceed to resolve the issue",[{name:"Resolve Duplicate NPIDs",slot:"start",color:"danger"}],"his-danger-color"),k.RESOLVE_DUPLICATE_NPIDS)},conditions:{npidHasDuplicates(t){return t}}},"Warn before proceeding if patient is deceased based on current Patient state":{weight:50,targetEvent:G.ON_CONTINUE,actions:{alert:async()=>{const t=await Object(Q["a"])("Deceased Patient","Patient outcome is Died!","Do you want to continue?",[{name:"Yes",slot:"start",color:"danger"},{name:"No",slot:"end",color:"success"}],"his-warning-color");return"Yes"===t?k.CONTINUE:k.FORCE_EXIT}},conditions:{currentOutcome:t=>"Patient died"===t}},"Warn before proceeding if patient stopped treatment based on current Patient state":{weight:49,targetEvent:G.ON_CONTINUE,actions:{alert:async()=>{const t=await Object(Q["a"])("Stopped Treatment","Patient outcome is Stopped Treatment ","Do you want to continue?",[{name:"Yes",slot:"start",color:"danger"},{name:"No",slot:"end",color:"success"}],"his-warning-color");return"Yes"===t?k.CONTINUE:k.FORCE_EXIT}},conditions:{currentOutcome:t=>"Treatment stopped"===t}},"[ART patient visit purpose] Select purpose of visit if patient is Transferred out or Drug refill":{weight:70,targetEvent:G.ON_CONTINUE,actions:{alert:async({patientType:t,currentOutcome:e})=>{let a=[];"External consultation"!==t&&"Patient transferred out"!==e||(a=[{name:"Drug refill",slot:"start",color:"primary"},{name:"New Patient",slot:"end",color:"primary"}]),"Drug Refill"===t&&(a=[{name:"External Consultation",slot:"start",color:"primary"},{name:"New Patient",slot:"end",color:"primary"}]),"New patient"===t&&(a=[{name:"External Consultation",slot:"start",color:"primary"},{name:"Drug refill",slot:"start",color:"primary"}]);const i=await Object(Q["a"])("Purpose of visit",`Patient type: ${t} | State: ${e}`,"Please select purspose of the visit",[...a,{name:"Continue",slot:"end",color:"success"}]);switch(i){case"Drug refill":return k.ADD_AS_DRUG_REFILL;case"External Consultation":return k.ADD_AS_EXTERNAL_CONSULTATION;case"New Patient":return k.ADD_AS_NEW_PATIENT;default:return k.CONTINUE}}},conditions:{programName:t=>"ART"===t,patientType:(t,{currentOutcome:e})=>["Drug Refill","External consultation"].includes(t)||"Patient transferred out"===e}},"Prompt patient enrollment in current programme if not enrolled":{weight:30,targetEvent:G.ONLOAD,actions:{alert:async()=>{const t=await Object(Q["a"])("Programme Enrollment","Patient is not enrolled in current programme, do you want to enroll?","",[{name:"Yes",slot:"start",color:"success"},{name:"No",slot:"end",color:"danger"}]);return"Yes"===t?k.ENROLL:k.EXIT}},conditions:{enrolledInProgram:t=>!1===t}},"(ART Filing numbers) Prompt dormant filing number reactivation if patient has a dormant filing number":{weight:25,targetEvent:G.ONLOAD,actions:{alert:async()=>{const t=await Object(Q["a"])("Filing Numbers","Activate dormant #?","",[{name:"Yes",slot:"start",color:"success"},{name:"No",slot:"end",color:"danger"}]);return"Yes"===t?k.ACTIVATE_FN:k.EXIT}},conditions:{programName:t=>"ART"===t,identifiers:t=>t.includes("Archived filing number"),currentOutcome:t=>!["Treatment stopped","Patient transferred out","Patient died"].includes(t),globalProperties({useFilingNumbers:t}){return t}}},"[DDE OFF] Prompt the user to update patient demographics when data is incomplete":{weight:92,targetEvent:G.ONLOAD,actions:{alert:async()=>{const t=await Object(Q["a"])("Demographics","Patient data is incomplete","Do you want to review and update now?",[{name:"Yes",slot:"start",color:"success"},{name:"No",slot:"end",color:"danger"}],"his-danger-color");return"Yes"===t?k.UPDATE_DMG:k.EXIT}},conditions:{globalProperties({ddeEnabled:t}){return!1===t},demographics:({patientIsComplete:t})=>!1===t,patientFound:t=>!0===t}},"[DDE] Alert When remote Patient demographics dont match Local Demographics ":{weight:93,targetEvent:G.ONLOAD,actions:{alert:async({dde:t})=>{const e=await Object(Q["d"])("Demographics Mismatch","Local Demographics do not match Remote Demographics",["Attributes","Local","Remote"],t.diffRows,[{name:"Use Local",slot:"start",color:"primary"},{name:"Use Remote",slot:"start",color:"primary"}],"his-danger-color",t.diffRowColors);return"Use Local"===e?k.UPDATE_LOCAL_DDE_DIFFS:k.REFRESH_DDE_DEMOGRAPHICS}},conditions:{dde({hasDemographicConflict:t}){return t}}},"[DDE] Alert to print newer NPID when the scanned NPID doesnt match active NPID":{weight:69,targetEvent:G.ONLOAD,actions:{alert:async({currentNpid:t})=>(await Object(Q["a"])("[DDE] NATIONAL ID","Patient has a newer National Identifier "+t,"Print and proceed",[{name:"Print",slot:"start",color:"primary"}]),k.PRINT_NPID)},conditions:{globalProperties({ddeEnabled:t}){return!0===t},scannedNpid(t,{currentNpid:e}){return!t.match(new RegExp(e,"i"))}}},"assign newer NPID when the current one is invalid":{weight:68,targetEvent:G.ONLOAD,actions:{alert:async({currentNpid:t})=>(await Object(Q["a"])("NATIONAL ID",`Current NPID ${t} is invalid`,"Reasign and Print",[{name:"Reassign",slot:"start",color:"primary"}]),k.ASSIGN_NPID)},conditions:{demographics:({patientIsComplete:t})=>!0===t,patientFound:t=>!0===t,hasInvalidNpid(t){return t}}},"[DDE ON] Warn program managers when Patient has incomplete demographics. Dont force them to update though":{weight:91,targetEvent:G.ONLOAD,actions:{alert:async()=>{const t=await Object(Q["a"])("Demographics","Patient data is incomplete data","Do you want to review and update now?",[{name:"Yes",slot:"start",color:"success"},{name:"No",slot:"end",color:"danger"}],"his-danger-color");return"Yes"===t?k.UPDATE_DMG:k.CONTINUE}},conditions:{globalProperties({ddeEnabled:t}){return!0===t},demographics:({patientIsComplete:t})=>!1===t,patientFound:t=>!0===t,userRoles(t){return!0===t.includes("Program Manager")}}},"[DDE ON] Force Users to update Incomplete Patient demographics":{weight:92,targetEvent:G.ONLOAD,actions:{alert:async()=>{const t=await Object(Q["a"])("Patient Demographics","Demographic data is incomplete","Continue to update",[{name:"Update",slot:"start",color:"success"},{name:"Cancel",slot:"start",color:"danger"}],"his-warning-color");return"Cancel"===t?k.GO_HOME:k.UPDATE_DMG}},conditions:{globalProperties({ddeEnabled:t}){return!0===t},demographics:({patientIsComplete:t})=>!1===t,userRoles:t=>!1===t.includes("Program Manager")}},"Warn the user when patient has high viral load":{weight:45,targetEvent:G.ONLOAD,actions:{alert:async()=>(await Object(Q["a"])("High Viral Load","Patient has a high viral load, please take immediate action!","",[{name:"OK",slot:"end",color:"danger"}],"his-danger-color"),k.CONTINUE)},conditions:{hasHighViralLoad:t=>!0===t}},"[ANC] Warn last LMP is more than 8 months ago and ask to initiate new pregnancy":{weight:32,targetEvent:G.ON_CONTINUE,actions:{alert:async({anc:t})=>{const e=await Object(Q["a"])("Pregancy overdue",`Last menstrual period was ${t.lmpMonths} months ago!`,"Would you like to initiate new pregnancy?",[{name:"Yes",slot:"end",color:"success"},{name:"No",slot:"end",color:"danger"}],"his-danger-color");return"Yes"===e?k.INITIATE_ANC_PREGNANCY:k.CONTINUE}},conditions:{programName:t=>"ANC"===t,anc:t=>!0===t.currentPregnancyIsOverdue}},"[ANC] Exit if client is NOT ELIGIBLE for ANC":{weight:89,targetEvent:G.ONLOAD,actions:{alert:async()=>{const t=await Object(Q["a"])("Client not eligible for ANC","This program is for women eligible for ANC only","If this is a mistake, please update client Demographics or Exit",[{name:"EXIT",slot:"end",color:"success"},{name:"EDIT DEMOGRAPHICS",slot:"end",color:"danger"}],"his-danger-color");return"EXIT"===t?k.GO_HOME:k.UPDATE_DMG}},conditions:{demographics:({gender:t})=>{const e=t.toLowerCase();return"m"===e||"male"===e},programName:t=>"ANC"===t}}};var at=a("4db7"),it=a("fa73"),nt=a("1c74"),st=a("9b7c"),rt=a("8df6"),ot=a("7957"),ct=a("8734"),dt=a("cc6f"),lt=a("ad60"),pt=a("5a0c"),ht=a.n(pt);class ut extends dt["a"]{constructor(t,e){super(t,111,e)}async getLmpInMonths(){const t=await lt["a"].getProgramInformation(this.patientID);if(t.date_of_lnmp){const e=ht()(t.date_of_lnmp),a=ht()(this.date);return a.diff(e,"months")}return-1}async pregnancyIsOverdue(){return await this.getLmpInMonths()>9}async canInitiateNewPregnancy(){return await this.getLmpInMonths()>=7}async createNewPregnancyStatus(){return await this.createEncounter(),this.saveValueCodedObs("Pregnancy status","New")}}var mt=a("76df"),gt=a("8e8b"),Nt=Object(i["defineComponent"])({name:"Patient Confirmation",components:{IonContent:Z["n"],IonHeader:Z["q"],IonFooter:Z["o"],IonPage:Z["D"],IonToolbar:Z["S"],IonSpinner:Z["N"],IonRow:Z["H"],IonCol:Z["m"],IonButton:Z["d"],ConfirmationCard:Object(i["defineAsyncComponent"])(()=>a.e("chunk-1f0442db").then(a.bind(null,"8ee9")))},data:()=>({app:{},program:{},patient:{},localPatient:{},ddeInstance:{},useDDE:!1,programInfo:{},isReady:!1,cards:[],facts:{hasHighViralLoad:!1,patientFound:!1,npidHasDuplicates:!1,npidHasOverFiveDuplicates:!1,userRoles:[],scannedNpid:"",currentNpid:"",hasInvalidNpid:!1,enrolledInProgram:!1,programName:"N/A",currentOutcome:"",programs:[],identifiers:[],patientType:"N/A",anc:{lmpMonths:-1,canInitiateNewPregnancy:!1,currentPregnancyIsOverdue:!1},dde:{localNpidDiff:"",remoteNpidDiff:"",voidedNpids:{cols:[],rows:[]},hasDemographicConflict:!1,localDiffs:{},diffRows:[],diffRowColors:[]},demographics:{patientIsComplete:!1,hasInvalidDemographics:!1,invalidDemographics:[],givenName:"",familyName:"",patientName:"",landmark:"",phoneNumber:"",currentDistrict:"",currentTA:"",currentVillage:"",ancestryDistrict:"",ancestryTA:"",ancestryVillage:"",gender:"",birthdate:""},globalProperties:{useFilingNumbers:!1,ddeEnabled:!1}}}),created(){this.initCards(),this.app=Y["a"].getActiveApp()||{}},mounted(){this.app&&(this.updateCards(),this.ddeInstance=new it["a"],this.setGlobalPropertyFacts().then(()=>{const t=this.$route.query;Object(B["isEmpty"])(t)||!t.person_id&&!t.patient_barcode||this.findAndSetPatient(t.person_id,t.patient_barcode)}))},computed:{demographics(){return this.facts.demographics},birthdate(){return X["b"].toStandardHisDisplayFormat(this.facts.demographics.birthdate)},isAdmin(){return W["a"].isAdmin()}},methods:{initCards(){for(let t=0;t<6;t++)this.cards[t]={label:"-",isLoading:!0,values:[]}},async updateCards(){if("function"===typeof this.app.confirmationSummary){const t=this.app.confirmationSummary(this.patient,this.program,this.facts),e=Object.keys(t);for(let a=0;a<this.cards.length;a++){const i=e[a]?t[e[a]]():[];if(this.cards[a]={label:e[a]||"-",isLoading:!1,values:i},"object"===typeof i&&i.then)this.cards[a].isLoading=!0,Object(B["isEmpty"])(this.patient)||i.then(t=>{this.cards[a].isLoading=!1,this.cards[a].values=t}).catch(t=>{this.cards[a].isLoading=!1,console.error(""+t)});else for(let t=0;t<i.length;++t){const e=i[t];this.cards[a].values[t]=e,Object(B["isEmpty"])(this.patient)||("function"===typeof e.init&&await e.init(),"function"===typeof e.asyncValue?e.asyncValue().then(e=>{this.cards[a].values[t].value=e}).catch(e=>{this.cards[a].values[t].value="_ERROR_",console.error(""+e)}):"function"===typeof e.staticValue&&(this.cards[a].values[t].value=e.staticValue()))}}}},async setViralLoadStatus(){const t=await st["a"].getOrders(this.patient.getID());if(!Object(B["isEmpty"])(t)){const e=st["a"].getViralLoadOrders(t);Object(B["isEmpty"])(e)||(this.facts.hasHighViralLoad=st["a"].isHighViralLoadResult(e[0].tests[0].result[0]))}},async findAndSetPatient(t,e){let a=null;this.isReady=!1,this.localPatient={},this.facts.scannedNpid||(this.facts.scannedNpid=e||""),a=this.useDDE&&e?this.ddeInstance.searchNpid(e):t?K["a"].findByID(t):K["a"].findByNpid(e),this.handleSearchResults(a).then(()=>this.isReady=!0).catch(t=>Object(J["c"])(""+t,3e5))},async handleSearchResults(t){let e=[];try{e=await t}catch(a){if(a instanceof nt["b"]&&!Object(B["isEmpty"])(a.entity))e=a.entity;else if(a instanceof nt["a"]&&Array.isArray(a.errors)){const[t,...e]=a.errors;"string"===typeof t&&"Invalid parameter(s)"===t&&this.setInvalidParametersFacts(e)}else Object(J["c"])(""+a,3e5)}if(Object(B["isEmpty"])(e)&&!Object(B["isEmpty"])(this.localPatient)&&(e=this.localPatient),Array.isArray(e)&&e.length>1?(this.facts.npidHasDuplicates=e.length<=5,this.facts.npidHasOverFiveDuplicates=e.length>5):this.facts.patientFound=!Object(B["isEmpty"])(e),this.facts.patientFound){this.patient=new K["a"](Array.isArray(e)?e[0]:e),this.updateCards(),gt["a"].set("ACTIVE_PATIENT",this.patient),this.setPatientFacts();const t=[];t.push(this.setProgramFacts()),this.useDDE&&t.push(this.setDDEFacts()),"ANC"===this.facts.programName&&t.push(this.setAncFacts()),"ART"===this.facts.programName&&t.push(this.setViralLoadStatus()),this.facts.currentNpid=this.patient.getNationalID(),t.push(this.validateNpid()),await Promise.all(t)}else this.facts.scannedNpid&&this.setVoidedNpidFacts(this.facts.scannedNpid);this.onEvent(G.ONLOAD).then(()=>this.isReady=!0).catch(t=>{Object(J["c"])(""+t,3e5),this.isReady=!0})},async validateNpid(){if(this.useDDE)this.facts.hasInvalidNpid=!this.patient.getDocID()||this.patient.getDocID()&&Object(tt["c"])(this.patient.getNationalID());else{const t=await K["a"].findByNpid(this.facts.currentNpid,{page_size:2});this.facts.hasInvalidNpid=Array.isArray(t)&&t.length>1}},setInvalidParametersFacts(t){this.facts.demographics.hasInvalidDemographics=!0,this.facts.demographics.invalidDemographics=t.map(t=>{const e=Object.entries(t),a=e[0][0],i=e[0][1];return[a,i.join(", ")]})},reloadPatient(){return this.findAndSetPatient(this.patient.getID(),void 0)},setPatientFacts(){this.facts.demographics.patientIsComplete=this.patient.patientIsComplete(),this.facts.demographics.patientName=this.patient.getFullName(),this.facts.demographics.givenName=this.patient.getGivenName(),this.facts.demographics.familyName=this.patient.getFamilyName(),this.facts.demographics.landmark=this.patient.getAttribute(19),this.facts.demographics.phoneNumber=this.patient.getAttribute(12),this.facts.demographics.gender=this.patient.getGender(),this.facts.demographics.birthdate=this.patient.getBirthdate(),this.facts.demographics.ancestryDistrict=this.patient.getHomeDistrict(),this.facts.demographics.ancestryTA=this.patient.getHomeTA(),this.facts.demographics.ancestryVillage=this.patient.getHomeVillage(),this.facts.demographics.currentDistrict=this.patient.getCurrentDistrict(),this.facts.demographics.currentTA=this.patient.getCurrentTA(),this.facts.demographics.currentVillage=this.patient.getCurrentVillage(),this.facts.identifiers=this.patient.getIdentifiers().map(t=>t.type.name)},async setGlobalPropertyFacts(){this.facts.globalProperties.ddeEnabled=await gt["a"].get("IS_DDE_ENABLED"),this.useDDE=this.facts.globalProperties.ddeEnabled,"ART"===this.app.applicationName&&(this.facts.globalProperties.useFilingNumbers=await gt["a"].get("IS_ART_FILING_NUMBER_ENABLED"))},async setAncFacts(){const t=new ut(this.patient.getID(),-1);this.facts.anc.canInitiateNewPregnancy=await t.canInitiateNewPregnancy(),this.facts.anc.currentPregnancyIsOverdue=await t.pregnancyIsOverdue(),this.facts.anc.lmpMonths=await t.getLmpInMonths()},buildDDEDiffs(t){const e=[],a={givenName:{label:"First Name",ref:"given_name"},familyName:{label:"Last Name",ref:"family_name"},birthdate:{label:"Birthdate",ref:"birthdate"},gender:{label:"Gender",ref:"gender"},phoneNumber:{label:"Phone number",ref:"phone_number"},ancestryDistrict:{label:"Home District",ref:"home_district"},ancestryTA:{label:"Home TA",ref:"home_traditional_authority"},ancestryVillage:{label:"Home Village",ref:"home_village"},currentDistrict:{label:"Current District",ref:"current_district"},currentTA:{label:"Current TA",ref:"current_traditional_authority"},currentVillage:{label:"Current Village",ref:"current_village"}};let i=0;const n={indexes:[],class:"his-empty-set-color"};for(const s in a){let r=this.facts.demographics[s],o=r;a[s].ref in t&&(n.indexes.push(i),r=t[a[s].ref].local,o=t[a[s].ref].remote),e.push([a[s].label,r,o]),++i}return{comparisons:e,rowColors:[n]}},async setProgramFacts(){this.facts.programName=this.app.applicationName;try{this.program=new q["a"](this.patient.getID()),this.programInfo=await this.program.getProgram(),gt["a"].set("PATIENT_PROGRAM",this.programInfo);const{program:t,outcome:e}=this.programInfo;this.facts.enrolledInProgram=!(Object(tt["d"])(t)||t.match(/n\/a/i)),this.facts.currentOutcome=e,this.facts.userRoles=W["a"].getUserRoles().map(t=>t.role),this.facts.patientType=await ot["a"].getFirstValueCoded(this.patient.getID(),"Type of patient")||"N/A"}catch(t){console.error(""+t)}},async setDDEFacts(){try{var t;const e=null===(t=await this.ddeInstance.getLocalAndRemoteDiffs())||void 0===t?void 0:t.diff;this.facts.dde.localDiffs=this.ddeInstance.formatDiffValuesByType(e,"local");const{comparisons:a,rowColors:i}=this.buildDDEDiffs(e);if(this.facts.dde.diffRows=a,this.facts.dde.diffRowColors=i,e.npid){const{local:t,remote:a}=e.npid;this.facts.dde.localNpidDiff=t,this.facts.dde.remoteNpidDiff=a,delete e.npid}this.facts.dde.hasDemographicConflict=!Object(B["isEmpty"])(e)}catch(e){console.warn(e)}},async setVoidedNpidFacts(t){const e=["Name","Birthdate","Gender","Ancestry Home","CurrentID","Action"];let a=[];const i=await this.ddeInstance.findVoidedIdentifier(t);i&&(a=i.map(t=>{const e=new K["a"](t);return[e.getFullName(),e.getBirthdate(),e.getGender(),e.getHomeTA(),e.getNationalID(),{type:"button",name:"Select",action:async()=>{if(!e.patientIsComplete())return this.$router.push("/patient/registration?edit_person="+e.getID());if(e.getNationalID().match(/unknown/i)||!e.getDocID())try{return await e.assignNpid(),await this.findAndSetPatient(e.getID(),void 0),Z["Z"].dismiss()}catch(t){return Object(J["e"])("Failed to assign npid to patient with unknown npid."),console.error(t)}await Z["Z"].dismiss(),await this.findAndSetPatient(void 0,e.getNationalID())}}]}),this.facts.dde.voidedNpids.cols=e,this.facts.dde.voidedNpids.rows=a)},async onEvent(t,e={}){const a=Object(z["a"])(this.facts,et,"",t,"weight");for(const s in a){var i;const t=a[s];if(null!==t&&void 0!==t&&null!==(i=t.actions)&&void 0!==i&&i.alert){var n;const e=await(null===t||void 0===t||null===(n=t.actions)||void 0===n?void 0:n.alert(this.facts));if(await this.runFlowState(e)===k.FORCE_EXIT)return!1}}"function"===typeof e&&e()},async onInitiateNewAncPregnancy(){await Object(J["a"])("Are you sure you want to initiate new pregnancy?")&&(await this.initiateNewAncPregnancy()?(this.facts.anc.canInitiateNewPregnancy=!1,this.facts.anc.currentPregnancyIsOverdue=!1,this.nextTask()):Object(J["e"])("Unable to initiate new pregnancy"))},initiateNewAncPregnancy(){return new ut(this.patient.getID(),-1).createNewPregnancyStatus()},async runFlowState(t){const e={};if(e[k.GO_HOME]=()=>(this.$router.push("/"),k.FORCE_EXIT),e[k.GO_BACK]=()=>(this.$router.back(),k.FORCE_EXIT),e[k.ENROLL]=()=>this.program.enrollProgram(),e[k.ACTIVATE_FN]=()=>(this.$router.push(`/art/filing_numbers/${this.patient.getID()}?assign=true`),k.FORCE_EXIT),e[k.UPDATE_DMG]=()=>(this.$router.push("/patient/registration?edit_person="+this.patient.getID()),k.FORCE_EXIT),e[k.PRINT_NPID]=async()=>(await this.ddeInstance.printNpid(this.patient.getID()),await Object(ct["a"])(1800),k.CONTINUE),e[k.CREATE_NPID_WITH_REMOTE_DIFF]=async()=>{const t=this.facts.dde.remoteNpidDiff;try{if(t&&await this.ddeInstance.createNPID(t))return this.facts.scannedNpid=t,this.facts.currentNpid=t,this.facts.dde.localNpidDiff=t,Object(J["d"])("Remote NPID successfully updated"),await Object(ct["a"])(300),await this.ddeInstance.printNpid(),await this.findAndSetPatient(void 0,t),k.FORCE_EXIT}catch(e){const t=/Identifier already assigned to another patient/i;if(e instanceof nt["a"]&&e.errors.join(",").match(t)){const t=await this.ddeInstance.reassignNpid(this.patient.getDocID());if(t)return this.patient=new K["a"](t),Object(J["d"])("Patient has been reassigned NPID"),await Object(ct["a"])(300),await this.ddeInstance.printNpid(),await this.findAndSetPatient(void 0,this.patient.getNationalID()),k.FORCE_EXIT}Object(J["c"])("Unable to assign NPID: "+e)}},e[k.ASSIGN_NPID]=async()=>(await this.patient.assignNpid(),await new at["a"](this.patient.getID()).printNidLbl(),await Object(ct["a"])(300),await this.reloadPatient(),k.FORCE_EXIT),e[k.INITIATE_ANC_PREGNANCY]=async()=>(await this.initiateNewAncPregnancy(),k.CONTINUE),e[k.VIEW_MERGE_AUDIT_FOR_NPID]=()=>(this.$router.push("/merge/rollback/"+this.facts.scannedNpid),k.FORCE_EXIT),e[k.RESOLVE_DUPLICATE_NPIDS]=()=>(this.$router.push("/npid/duplicates/"+this.facts.scannedNpid),k.FORCE_EXIT),e[k.REFRESH_DDE_DEMOGRAPHICS]=async()=>(await this.ddeInstance.refreshDemographics(),await this.reloadPatient(),k.FORCE_EXIT),e[k.ADD_AS_DRUG_REFILL]=async()=>(await this.createPatientType("Drug Refill"),k.CONTINUE),e[k.ADD_AS_NEW_PATIENT]=async()=>(await this.createPatientType("New patient"),k.CONTINUE),e[k.ADD_AS_EXTERNAL_CONSULTATION]=async()=>(await this.createPatientType("External consultation"),k.CONTINUE),e[k.SEARCH_BY_NAME]=()=>(this.$router.push("/patient/registration"),k.FORCE_EXIT),e[k.UPDATE_LOCAL_DDE_DIFFS]=async()=>(await this.ddeInstance.updateLocalDifferences(this.facts.dde.localDiffs),await this.reloadPatient(),k.FORCE_EXIT),t in e)try{return await e[t]()}catch(a){Object(J["c"])(""+a)}return t},async createPatientType(t){const e=new rt["a"](this.patient.getID(),-1);await e.createEncounter(),await e.savePatientType(t)},async onVoid(){Object(mt["a"])(async t=>{try{await K["a"].voidPatient(this.patient.getID(),t),this.$router.push("/")}catch(e){Object(J["c"])(""+e)}},"void-modal")},nextTask(){this.onEvent(G.ON_CONTINUE,()=>{Object($["b"])(this.patient.getID(),this.$router)})}}}),ft=(a("303d"),a("d959")),Dt=a.n(ft);const Ot=Dt()(Nt,[["render",x],["__scopeId","data-v-0492b742"]]);e["default"]=Ot},"76df":function(t,e,a){"use strict";a.d(e,"a",(function(){return n}));var i=a("7f35");async function n(t,e="action-sheet-modal"){const a=await Object(i["c"])("Are you sure you want to void record?","Please specify reason for voiding this record",["Mistake/ Wrong Entry","Duplicate","System Error"],[{name:"Cancel",slot:"start"},{name:"Void",color:"danger",slot:"end",role:"action"}],"",e);a.selection&&"Void"===a.action&&await t(a.selection)}},afc1:function(t,e,a){},c21d:function(t,e,a){"use strict";function i(t,e){const a=[],i=[-1,"",null,void 0];for(const n in e){if(!(n in t))continue;const s=t[n];i.includes(s)?a.push(!1):a.push(e[n](s,t))}return a.every(Boolean)}function n(t){return t.sort((t,e)=>t.priority&&e.priority&&t.priority<e.priority?-1:1)}function s(t){return t.sort((t,e)=>t.weight&&e.weight&&t.weight>e.weight?-1:1)}function r(t,e,a="",r="",o="priority"){const c=[];for(const n in e){const s=e[n],o=[s.target&&a&&s.target!=a,s.targetEvent&&r&&s.targetEvent!=r];o.some(Boolean)||i(t,s.conditions)&&(s.title=n,s.description&&(s.description.text=s.description.info(t)),c.push(s))}return"priority"===o?n(c):s(c)}a.d(e,"a",(function(){return r}))}}]);
//# sourceMappingURL=chunk-4434c4fe.0ebea444.js.map