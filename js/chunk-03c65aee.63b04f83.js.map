{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue?7bc9","webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue?a4af","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/composables/storage.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","patientType","watch","patient","this","PatientTypeService","patientID","providerID","loadPatientType","getFields","deep","methods","formData","getFacilities","filter","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","mapOptions","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","offlineID","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","constructor","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","onerror","filters","openCursor","cursor","filteredData","continue","put","delete","item","entries","every","isInteger","toLower","includes","isCondition","ignored","undefined","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","offlineStorage","facilities","LocationService","f","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-03c65aee.63b04f83.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    patientType: {} as any,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.patientType = new PatientTypeService(\n          this.patientID,\n          this.providerID\n        );\n        await this.patientType.loadPatientType();\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      //       const encounter = await this.patientType.createEncounter();\n      //       if (!encounter) return toastWarning(\"Unable to create encounter\");\n      //       this.patientType.setLocationName(formData?.location?.label);\n      //       this.patientType.setPatientType(formData?.patient_type?.value);\n      //       await this.patientType.save();\n      //       toastSuccess(\"Observations and encounter created!\");\n      //       this.nextTask();\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"via_test_results\",\n          helpText: \"VIA test results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Negative\",\n              \"Positive\",\n              \"Suspect\",\n            ]);\n          },\n        },\n        {\n          id: \"pap_smear\",\n          helpText: \"PAP Smear Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"PAP Smear normal\",\n              \"PAP Smear abnormal\"\n            ]);\n          },\n        },\n        {\n          id: \"hpv_dna\",\n          helpText: \"HPV DNA Test Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"HPV negative\",\n              \"HPV positive\"\n            ]);\n          },\n        },\n        {\n          id: \"speculum_exam\",\n          helpText: \"Speculum Exam Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Visible Lesion\",\n              \"No Visible lesion\",\n              \"Other gynaecological condition\",\n            ]);\n          },\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaResult.vue?vue&type=template&id=59ae6bcf&ts=true\"\nimport script from \"./CxCaResult.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaResult.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}