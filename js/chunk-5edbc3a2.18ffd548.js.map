{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/apps/ART/views/encounters/Reception.vue?68fe","webpack:///./src/apps/ART/services/reception_service.ts","webpack:///./src/apps/ART/views/encounters/Reception.vue","webpack:///./src/apps/ART/views/encounters/Reception.vue?b776","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","obs","resolveObs","computedData","status","enc","AppEncounterService","encounterTypeID","createEncounter","saveObservationList","callback","test","error","toastDanger","saveObsOffline","observations","id","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","activeField","onFinishAction","onFinish","skipSummary","cancelDestinationPath","ReceptionService","constructor","super","sitePrefix","getSitePrefix","GLOBAL_PROP","createArvNumber","identifier","postJson","buildArvNumber","arv","mixins","EncounterMixinVue","reception","hasARVNumber","suggestedNumber","patientType","watch","handler","getFields","immediate","encounter","toastWarning","registrationObs","capture_arv","arv_number","invalidate","toastSuccess","guardianPresent","who_is_present","getGuardian","helpText","type","FieldType","TT_MULTIPLE_YES_NO","validation","val","Validation","required","neitherOr","anyEmpty","computedValue","buildValueCoded","concept","onValueUpdate","active","o","form","property","TT_SELECT","requireNext","init","ARVNumber","getPatientIdentifier","PatientTypeService","loadPatientType","getType","TT_TEXT","loadSitePrefix","j","getNextSuggestedARVNumber","replace","f","defaultValue","config","prependValue","artApp","HisApp","getActiveApp","programPatientIdentifiers","arvType","prefix","_resolveDynamicComponent","formType","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-5edbc3a2.18ffd548.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            let created = false\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ProgramService } from \"@/services/program_service\";\nimport GLOBAL_PROP from \"@/apps/GLOBAL_APP/global_prop\";\n\nexport class ReceptionService extends AppEncounterService {\n    sitePrefix: string\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 51, providerID) //TODO: Use encounter type reference name'\n        this.sitePrefix = ''\n    }\n\n    getSitePrefix() {\n        return this.sitePrefix\n    }\n\n    async loadSitePrefix() {\n        this.sitePrefix = await GLOBAL_PROP.sitePrefix();\n    }\n\n    createArvNumber(identifier: string) {\n        return ProgramService.postJson(\"/patient_identifiers/\", {\n            'patient_id': this.patientID,  \n            'identifier_type': 4,\n            identifier,\n        })\n    }\n\n    buildArvNumber(arv: number) {\n        return `${this.sitePrefix}-ARV-${arv}`    \n    }\n}\n","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { ReceptionService } from \"@/apps/ART/services/reception_service\"\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { toastWarning, toastSuccess } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport HisApp from \"@/apps/app_lib\"\nimport { find, isEmpty } from \"lodash\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    reception: {} as any,\n    activeField: \"\",\n    hasARVNumber: true,\n    suggestedNumber: \"\" as any,\n    patientType: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler(ready: any) {\n        if (!ready) return\n        this.reception = new ReceptionService(this.patientID, this.providerID)\n        this.fields = this.getFields();\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computedData: any) {\n      const encounter = await this.reception.createEncounter()\n\n      if (!encounter) return toastWarning('Unable to create encounter')\n\n      const registrationObs = await this.resolveObs(computedData, 'obs')\n\n      const obs = await this.reception.saveObservationList(registrationObs)\n\n      if (!obs) return toastWarning('Unable to create Obs')\n\n      if (formData.capture_arv && formData.capture_arv.value === 'Yes') {\n        const arv = await this.reception.createArvNumber(computedData.arv_number)\n        if (!arv) return toastWarning('Unable to save Arv number')\n        Store.invalidate('ACTIVE_PATIENT')\n      }\n      toastSuccess('Encounter created')\n      const guardianPresent = find(formData.who_is_present, { value: 'Yes', label: 'Guardian present?'})\n      if (guardianPresent) {\n        if (isEmpty((await this.patient.getGuardian()))) {\n          return this.$router.push(`/guardian/registration/${this.patientID}`)\n        } \n      }\n      this.nextTask()\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"who_is_present\",\n          helpText: \"HIV reception\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          validation: (val: any) => Validation.required(val) || Validation.neitherOr(val) || Validation.anyEmpty(val),\n          computedValue: (d: Array<Option>) => {\n            return {\n              tag: 'obs',\n              obs: d.map(({ other, value }: Option) => this.reception.buildValueCoded(other.concept, value))\n            }\n          },\n          onValueUpdate: async (options: Option[], active: Option) => {\n            return options.map(o => {\n              if (active.label != o.label && active.value === 'No') {\n                o.value = \"Yes\"\n              }\n              return o\n            })\n          },\n          options: (form: any) => {\n            if (form.who_is_present) return form.who_is_present as Option[]\n            return [\n              {\n                label: \"Patient present?\",\n                value: \"\",\n                other: {\n                  concept: \"Patient Present\",\n                  property: \"patient_present\",\n                  values: this.yesNoOptions(),\n                },\n              },\n              {\n                label: \"Guardian present?\",\n                value: \"\",\n                other: {\n                  concept: \"Guardian Present\",\n                  property: \"guardian_present\",\n                  values: this.yesNoOptions(),\n                },\n              }\n            ]\n          }\n        },\n        {\n          id: \"capture_arv\",\n          helpText: \"Capture ARV Number?\",\n          type: FieldType.TT_SELECT,\n          requireNext: true,\n          init: async() => {\n            const ARVNumber = this.patient.getPatientIdentifier(4);\n            if (ARVNumber === \"\") this.hasARVNumber = false;\n            this.patientType = new PatientTypeService(this.patientID, this.providerID);\n            await this.patientType.loadPatientType()\n            return true\n          },\n          condition: () => !this.hasARVNumber && this.patientType.getType() === \"New patient\",\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n        },\n        {\n          id: \"arv_number\",\n          helpText: \"ART number\",\n          type: FieldType.TT_TEXT,\n          init: async() => {\n            await this.reception.loadSitePrefix()\n            if (!this.hasARVNumber) {\n              const j = await ProgramService.getNextSuggestedARVNumber();\n              this.suggestedNumber = j.arv_number.replace(/^\\D+|\\s/g, \"\");\n            }\n            return true\n          },\n          computedValue: ({ value }: Option) => {\n            return value\n          },\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => !this.hasARVNumber && f.capture_arv.value === \"Yes\",\n          defaultValue: () => this.suggestedNumber,\n          config: {\n            prependValue: () => {\n              const artApp = HisApp.getActiveApp()\n              if (artApp && artApp.programPatientIdentifiers) {\n                const arvType = artApp.programPatientIdentifiers['ARV Number']\n                return arvType.prefix()\n              }\n              return ''\n            }\n          }\n        }\n      ]\n    }\n  }\n});\n","import { render } from \"./Reception.vue?vue&type=template&id=73d30112&ts=true\"\nimport script from \"./Reception.vue?vue&type=script&lang=ts\"\nexport * from \"./Reception.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}