{"version":3,"sources":["webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/apps/ANC/Services/anc_treatment_service.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ANC/Views/Encounters/TTV.vue?71e4","webpack:///./src/apps/ANC/Services/anc_dispensing_service.ts","webpack:///./src/apps/ANC/Views/Encounters/TTV.vue","webpack:///./src/apps/ANC/Views/Encounters/TTV.vue?ceda"],"names":["DrugOrderService","orders","this","postJson","getProgramID","dispensations","map","order","getSessionDate","patientID","getJson","pageSize","Service","drugID","date","params","patientId","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","providerID","facts","ready","watch","handler","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","split","username","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","DRUG_FREQUENCIES","AncTreatmentService","dispenseTTV","dispensed","orderID","order_id","updateDispensationOrders","createOrders","ttvDrugObj","create","getEncounterID","drugs","createEncounter","o","buildDrugOrderObj","dispensation","AppEncounterService","forEach","quantity","frequency","duration","drug_inventory_id","id","drug","Date","expiryDate","setDate","getDate","dose","dailyEquivalentDose","parseFloat","toStandardHisFormat","drug_name","units","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","formFields","_","AncDispensationService","saveValueTextObs","IonPage","mixins","EncounterMixinVue","service","getFields","f","helpText","FieldType","TT_YES_NO","validation","v","computedValue","match","updateTTvOrder","saveNoDispensationObs"],"mappings":"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","file":"js/chunk-5d9db78a.415ddd70.js","sourcesContent":["import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { find, isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface AncTreatmentDrugObject {\n    'id': number;\n    'drug_name': string;\n    'dose': string;\n    'duration': number;\n    'frequency': string;\n    'units': string;\n}\n\nexport const DRUG_FREQUENCIES: Record<string, number> = { \n    'Once a day (OD)' : 1,\n    'Twice a day (BD)': 2,\n    'Three a day (TDS)': 3,\n    'Four times a day (QID)' : 4,\n    'Five times a day (5X/D)' : 5,\n    'Six times a day (Q4HRS)' : 6,\n    'In the morning (QAM)' : 0.5,\n    'Once a week (QWK)' : 0.14,\n    'Once a month' : 0.03,\n    'Twice a month' : 0.071\n}\n\nexport class AncTreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 25, providerID)\n    }\n\n    ttvDrugObj() {\n        return {\n            'drug_inventory_id': 609,\n            'dose': 0.5,\n            'equivalent_daily_dose': 0.5,\n            'frequency': \"Once a day (od)\",\n            'start_date': this.date,\n            'auto_expire_date': this.date,\n            'instructions': \"Once a day\",\n            'units': \"ml\"\n        }\n    }\n\n    async updateTTvOrder() {\n        const dispensed = await this.dispenseTTV()\n        if (!isEmpty(dispensed)) {\n            const orderID = dispensed[0].order_id\n            return DrugOrderService.updateDispensationOrders([{'order_id': orderID, 'quantity' : 1}])\n        }\n        throw 'Unable to dispense'\n    }\n\n    dispenseTTV() {\n        return this.createOrders([this.ttvDrugObj()])\n    }\n\n    createOrders(orders: any) {\n        return DrugOrderService.create({\n            'drug_orders': orders,\n            'encounter_id': this.getEncounterID(),\n        })\n    }\n\n    async submitTreatment(drugs: AncTreatmentDrugObject[]) {\n        await this.createEncounter()\n        const orders = await this.createOrders(drugs.map(o => this.buildDrugOrderObj(o)))\n        const dispensation = new AppEncounterService(this.patientID, 54, this.providerID)\n        await dispensation.createEncounter()\n        drugs.forEach(o => {\n            const quantity: number = DRUG_FREQUENCIES[o.frequency] * o.duration\n            orders.forEach((order: any) => { \n                if (order.drug_inventory_id === o.id) {\n                    order.quantity = quantity\n                }\n            })\n        })\n        await DrugOrderService.updateDispensationOrders(orders)\n    }\n\n    buildDrugOrderObj(drug: AncTreatmentDrugObject) {\n        const startDate = new Date(this.date)\n        const expiryDate = startDate.setDate(startDate.getDate() + parseInt(`${drug.duration}`))\n        const dose: any = drug.dose || DRUG_FREQUENCIES[drug.frequency]\n        const dailyEquivalentDose =  parseFloat(dose) * DRUG_FREQUENCIES[drug.frequency] \n        return {\n            'drug_inventory_id': drug.id,\n            'dose': dose,\n            'equivalent_daily_dose': dailyEquivalentDose,\n            'frequency': drug.frequency,\n            'start_date': this.date,\n            'auto_expire_date': HisDate.toStandardHisFormat(new Date(expiryDate)),\n            'instructions': drug.drug_name + ':' + drug.dose + ' ' + drug.units + ' ' + drug.frequency + 'days',\n            'units': drug.units\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\n\nexport class AncDispensationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 54, providerID)\n    }\n\n    saveNoDispensationObs() {\n        return this.saveValueTextObs(\n            'Tetanus toxoid vaccine', 'Not dispensed'\n        )\n    }\n\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncDispensationService} from \"@/apps/ANC/Services/anc_dispensing_service\"\nimport { AncTreatmentService } from \"@/apps/ANC/Services/anc_treatment_service\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.formFields = this.getFields()\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      await computedData['prescription'].action()\n      this.nextTask()\n    },\n    getFields() {\n      return [\n        {\n          id: 'prescription',\n          helpText: 'Prescription',\n          type: FieldType.TT_YES_NO,\n          validation: (v: string) => !v ?  ['Value is required'] : null,\n          computedValue: (v: string) => {\n            if (v.match(/true/i)) {\n              return {\n                action: async () => {\n                  const service = new AncTreatmentService(this.patientID, this.providerID)\n                  await service.createEncounter()\n                  await service.updateTTvOrder()\n                }\n              }\n            }\n            return {\n              action: async () => {\n                const service = new AncDispensationService(this.patientID, this.providerID)\n                await service.createEncounter()\n                await service.saveNoDispensationObs()\n              }\n            }\n          },\n          options: () => ([\n            {\n              label: 'TTV has been given today',\n              values: [\n                {\n                  label: \"yes\",\n                  value: \"true\"\n                },\n                {\n                  label: \"no\",\n                  value: \"false\"\n                }\n              ]\n            }\n          ])\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./TTV.vue?vue&type=template&id=4420df94&ts=true\"\nimport script from \"./TTV.vue?vue&type=script&lang=ts\"\nexport * from \"./TTV.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}