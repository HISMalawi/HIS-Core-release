{"version":3,"sources":["webpack:///./src/services/person_attributes_service.ts","webpack:///./src/services/patient_registration_service.ts","webpack:///./src/apps/HTS/services/hts_items_given.ts","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue?2a93","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue?5019","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/services/person_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["PersonAttributeService","Service","constructor","super","attributes","postJson","PatientRegistrationService","this","personId","getPersonID","setPersonID","personID","person","personAttributes","createPerson","createPersonAttributes","patient","createPatient","printPatient","updatePerson","PersonService","update","data","create","person_id","ProgramService","index","PatientPrintoutService","printNidLbl","HtsItemsGivenService","AppEncounterService","patientID","providerID","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","service","watch","ready","handler","accessPointTypeField","facilityAccessPointField","communityAccessPoints","genderField","ageField","pregnancyStatusField","lastHivTestResultField","lastTimeHIVTestedField","itemsGivenToClientField","selfTestsGivenToClientField","hivTestKitDetailsField","patientDemographics","immediate","methods","computedData","PersonField","resolvePerson","registration","Patientservice","registerBasicPatient","createEncounter","saveObservationList","resolveObs","$router","push","getSelfKitCount","f","items_given_to_client","label","value","id","helpText","type","FieldType","TT_SELECT","isRequired","finalComputedValue","v","tag","obs","buildValueCoded","options","mapStrToOptions","condition","accesspoint_type","buildValueText","toString","toConditionalOptions","TT_NUMBER","validation","test","isNaN","config","noChars","estimatedDOB","dayjs","year","subtract","parseInt","format","birthdate","birthdate_estimated","gender","TT_AGE_INPUT","last_hiv_result","other","date","isBefore","length","excludeUnits","TT_ADHERENCE_INPUT","summaryMapValue","every","d","some","maxSelfKits","isEmpty","filter","map","buildValueNumber","noFloat","titles","init","SESSION_KIT_NAMES","SESSION_KIT_ID","kitHistory","JSON","parse","sessionStorage","getItem","kitOptions","getSessionKitValue","TT_INPUT_ARRAY","columns","incomplete","x","setItem","stringify","kitName","find","kitLot","kitExpiry","async","parentObs","childObs","l","child","Promise","all","alertConfirmation","test_kit","kitNameOption","onclick","val","keyboard","TT_TEXT","uniqBy","kitLotNoOption","kitExpiryDateOption","buildValueDate","TT_FULL_DATE","Date","toDate","someIncomplete","count","userOptionField","rows","i","listData","otherRows","selectionList","selection","forEach","r","selfOptionDefaultValue","selfOptionDisabledValue","disabled","otherOptionDefaultValue","otherOptionDisabledValue","title","preset","size","genderOptionField","ageOptionField","numericKeypad","age","toastWarning","strictNumbers","customKeyboard","approachOptionField","kits","generateRows","Array","from","isArray","self_test_kits","slice","name","getGivenNameField","TT_HIDDEN","computedValue","getFamilyNameField","getHomeDistrictField","getHomeTaField","getHomeVillageField","getCurrentDistrictField","getCurrentTAfield","getCurrentVillageField","getCellNumberField","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","facts","isEnrolledInProgam","route","params","patient_id","toUpperCase","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","cancelDestination","patientDashboardUrl","runflowState","state","states","username","split","provider","EXIT","gotoPatientDashboard","findings","matchToGuidelines","finding","status","program","programID","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","sort","a","b","usernameA","usernameB","p","names","latestName","given_name","family_name","toOption","items","path","loadingController","backdropDismiss","message","present","nextTask","getTop","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","option","final","yesNoUnknownOptions","Object","reduce","accum","cur","concat","inArray","arr","expression","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","formData","$emit","mapToOption","listOptions","item","computedForm","attr","isPlainObject","Validation","isName","form","searchGivenName","searchFamilyName","getGenderField","customOptions","getDobConfig","summaryLabel","minDate","estimateDateFromAge","maxDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","isEstimate","getHomeRegionField","group","requireNext","getRegions","dynamicHelpText","home_region","match","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","onClick","c","field","filtered","ok","address","LocationService","createAddress","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","defaultComputedOutput","getTraditionalAuthorities","home_district","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","current_region","current_district","current_traditional_authority","number","isMWPhoneNumber","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","getFacilityLocationField","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","getPersonAttributeOptions","prop","getPatientInfoString","getID","getNationalID","npid","show","getProgramName","isCondition","ignored","undefined","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","description","text","info","putJson","getJson","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-a352d49c.f64ce3c6.js","sourcesContent":["import { Service } from \"./service\"\n\nexport interface NewAttribute {\n    person_id: number;\n    person_attribute_type_id: number;\n    value: number | string;\n}\n\nexport class PersonAttributeService extends Service { \n    constructor() {\n        super()\n    }\n\n    static create(attributes: Array<NewAttribute>) { \n        return super.postJson('/person_attributes', attributes) \n    }\n}\n","import { Service } from \"./service\"\nimport { ProgramService } from \"@/services/program_service\";\nimport { Person } from \"@/interfaces/person\"\nimport { PersonService } from \"@/services/person_service\"\nimport { PersonAttributeService } from '@/services/person_attributes_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\n\nexport class PatientRegistrationService extends Service {\n    personId: number\n    constructor() {\n        super()\n        this.personId = 0\n    }\n\n    getPersonID() {\n        return this.personId\n    }\n\n    setPersonID(personID: number) {\n        this.personId = personID\n    }\n\n    async registerPatient(person: any, personAttributes: any) {\n        await this.createPerson(person)\n        await this.createPersonAttributes(personAttributes)\n        const patient = await this.createPatient()\n        await this.printPatient()\n        return patient\n    }\n\n    async registerBasicPatient(person: any) {\n        await this.createPerson(person)\n        return this.createPatient()\n    }\n\n    async registerGuardian(person: any) {\n        return this.createPerson(person)\n    }\n\n    updatePerson(person: any) {\n       return new PersonService(person).update(this.personId)\n    }\n\n    async createPerson(person: any) {\n        const data: Person = await new PersonService(person).create()\n        this.personId = data.person_id\n        return data\n    }\n\n    createPatient() {\n        return ProgramService.createPatient(this.personId)\n    }\n\n    async createPersonAttributes(attributes: Array<any>) {\n        for(const index in attributes) {\n            await PersonAttributeService.create({\n                ...attributes[index],\n                'person_id': this.personId\n            })\n        }\n    }\n\n    printPatient() {\n        return new PatientPrintoutService(this.personId).printNidLbl()\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsItemsGivenService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 196, providerID)\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Self Test Registration\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: `/`\n      }, null, 8, [\"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { find, isEmpty, uniqBy } from \"lodash\";\nimport keyboard, { numericKeypad, selectionList } from \"@/utils/PopupKeyboard\";\nimport { ObsValue } from \"@/services/observation_service\";\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport dayjs from \"dayjs\";\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport { HtsItemsGivenService } from \"../../services/hts_items_given\";\nimport { toDate } from \"@/utils/Strs\";\nimport { alertConfirmation, toastWarning } from \"@/utils/Alerts\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler() {\n        this.service = new HtsItemsGivenService(-1);\n        this.fields = [\n          ...[\n            this.accessPointTypeField(),\n            this.facilityAccessPointField(),\n            this.communityAccessPoints(),\n            this.genderField(),\n            this.ageField(),\n            this.pregnancyStatusField(),\n            this.lastHivTestResultField(),\n            this.lastTimeHIVTestedField(),\n            this.itemsGivenToClientField(),\n            this.selfTestsGivenToClientField(),\n            this.hivTestKitDetailsField(),\n          ],\n          ...this.patientDemographics(),\n        ];\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const person = await PersonField.resolvePerson(computedData);\n      const registration: any = new PatientRegistrationService();\n      new Patientservice(await registration.registerBasicPatient(person));\n      this.service.patientID = registration.getPersonID();\n      await this.service.createEncounter();\n      await this.service.saveObservationList(\n        (await this.resolveObs(computedData, \"reg\")) as ObsValue[]\n      );\n      this.$router.push(`/`);\n    },\n    getSelfKitCount(f: Record<string, any>) {\n      return (\n        find(f.items_given_to_client || [], { label: \"Self-Test Kit\" })\n          ?.value || 0\n      );\n    },\n    accessPointTypeField(): Field {\n      return {\n        id: \"accesspoint_type\",\n        helpText: \"Ditribution point type\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueCoded(\"HTS Access Type\", v.value),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\"Health Facility\", \"Community\"]);\n        },\n      };\n    },\n    facilityAccessPointField(): Field {\n      return {\n        id: \"facility_access_points\",\n        helpText: \"Health facility distribution point\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) => f.accesspoint_type.value === \"Health Facility\",\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              v.value.toString()\n            ),\n          };\n        },\n        options: () => {\n          return this.toConditionalOptions([\n            [\"VCT\"],\n            [\"ANC First Visit\"],\n            [\"Inpatient\"],\n            [\"STI\"],\n            [\"PMTCT FUP\"],\n            [\"Index\"],\n            [\"Paediatric\"],\n            [\"VMMC\"],\n            [\"Malnutrition\"],\n            [\"TB\"],\n            [\"OPD\"],\n            [\"Other PITC\"],\n            [\"SNS\"],\n          ]);\n        },\n      };\n    },\n    communityAccessPoints(): Field {\n      return {\n        id: \"community_access_points\",\n        helpText: \"Community distribution points\",\n        type: FieldType.TT_SELECT,\n        condition: (f: any) => f.accesspoint_type.value === \"Community\",\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              `${v.value}`\n            ),\n          };\n        },\n        options: () => {\n          return this.toConditionalOptions([\n            [\"VCT\"],\n            [\"Index\"],\n            [\"VMMC\"],\n            [\"Other\"],\n            [\"SNS\"],\n            [\"Mobile\"],\n          ]);\n        },\n      };\n    },\n    genderField(): Field {\n      return {\n        id: \"gender\",\n        helpText: \"Gender\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            person: v.value,\n          };\n        },\n        options: () => {\n          return [\n            { label: \"Female\", value: \"F\" },\n            { label: \"Male\", value: \"M\" },\n          ];\n        },\n      };\n    },\n    ageField(): Field {\n      return {\n        id: \"birthdate\",\n        helpText: \"Age (In Years)\",\n        type: FieldType.TT_NUMBER,\n        isRequired: () => true,\n        validation: (v: Option) => {\n          if (/unknown/i.test(`${v.value}`)) return null\n          if (v.value <= 10 || v.value >= 125 || isNaN(v.value as number)) {\n            return [\"Invalid Age\"];\n          }\n          return null;\n        },\n        config: {\n          noChars: false\n        },\n        finalComputedValue: (v: any) => {\n          const estimatedDOB = dayjs(`${dayjs().year()}-07-14`)\n            .subtract(parseInt(v.value), \"year\")\n            .format(\"YYYY-MM-DD\");\n          return {\n            person: {\n              birthdate: estimatedDOB,\n              birthdate_estimated: true,\n            },\n          };\n        },\n      };\n    },\n    pregnancyStatusField(): Field {\n      return {\n        id: \"pregnancy_status\",\n        helpText: \"Pregnancy Status\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) => f.gender.value === \"F\",\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueCoded(\"Pregnancy status\", v.value),\n          };\n        },\n        options: () => {\n          return [\n            { label: \"Pregnant\", value: \"Pregnant woman\" },\n            { label: \"Non-pregnant\", value: \"Not Pregnant / Breastfeeding\" },\n            { label: \"Breastfeeding\", value: \"Breastfeeding\" },\n          ];\n        },\n      };\n    },\n    lastHivTestResultField(): Field {\n      return {\n        id: \"last_hiv_result\",\n        helpText: \"Last HIV Test Results\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueCoded(\n              \"Previous HIV Test Results\",\n              v.value\n            ),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\n            \"Never Tested\",\n            \"Negative\",\n            \"Positive NOT on ART\",\n            \"Positive on ART\",\n            \"Inconclusive\",\n          ]);\n        },\n      };\n    },\n    lastTimeHIVTestedField(): Field {\n      return {\n        id: \"last_time_hiv_tested\",\n        helpText: \"Time since last HIV test\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_hiv_result.value && f.last_hiv_result.value != \"Never Tested\",\n        isRequired: () => true,\n        validation: (v: any, f: any) => {\n          if (parseInt(`${v.other.value}`) <= 0) {\n            return [\"Enter a number greater than zero\"];\n          }\n          if (\n            dayjs(v.other.date).isBefore(\n              dayjs().subtract(parseInt(f.birthdate.value), \"year\"),\n              \"year\"\n            )\n          ) {\n            return [\"Enter a date that is not before the patient's birthdate\"];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          return null;\n        },\n        finalComputedValue: (v: any) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Time of HIV test\",\n              `${v.value} ago`\n            ),\n          };\n        },\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    },\n    itemsGivenToClientField(): Field {\n      return {\n        id: \"items_given_to_client\",\n        helpText: \"Items given to the client\",\n        type: FieldType.TT_ADHERENCE_INPUT,\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v,\n        validation: (v: Option[]) => {\n          if (v.every((d) => d.value === \"\")) {\n            return [\"Values cannot be empty\"];\n          }\n          if (\n            v.some(\n              (d) => /self-test/i.test(d.label) && (!d.value || d.value <= 0)\n            )\n          ) {\n            return [`Please enter number of self kits to give client`];\n          }\n          const maxSelfKits = 4;\n          if (\n            v.some((d) => /self-test/i.test(d.label) && d.value > maxSelfKits)\n          ) {\n            return [\n              `Cannot distribute more than ${maxSelfKits} Self-test kits. Please adjust the number accordingly`,\n            ];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          if (!isEmpty(f.items_given_to_client)) {\n            return f.items_given_to_client;\n          }\n          return [\n            { label: \"Self-Test Kit\", value: \"\" },\n            { label: \"Male condoms\", value: \"\" },\n            { label: \"Female condoms\", value: \"\" },\n            { label: \"FRS\", value: \"\" },\n          ] as Option[];\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            tag: \"reg\",\n            obs: v\n              .filter((d: Option) => d.value)\n              .map((d: Option) =>\n                this.service.buildValueNumber(d.label, parseInt(`${d.value}`))\n              ),\n          };\n        },\n        config: {\n          noFloat: true,\n          titles: {\n            label: \"Item\",\n            value: \"Quantity\",\n          },\n        },\n      };\n    },\n    hivTestKitDetailsField(): Field {\n      let init = false\n      const SESSION_KIT_NAMES = \"htsSelfKitNames\";\n      const SESSION_KIT_ID = \"htsSelfTestKitData\";\n      let kitHistory: any = JSON.parse(\n        sessionStorage.getItem(SESSION_KIT_ID) || \"{}\"\n      );\n      let kitOptions: Option[] | [] = JSON.parse(\n        sessionStorage.getItem(SESSION_KIT_NAMES) || \"[]\"\n      );\n      const getSessionKitValue = (id: string) => kitHistory[id] || \"\";\n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v?.other?.fields,\n        validation: (v: Option[]) => {\n          const incomplete = v\n            .map((d: Option) => d.other.fields)\n            .some((d: Option[]) => d.some((x: Option) => x.value === \"\"));\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        finalComputedValue: (v: Option[]) => {\n          const data = v.map((d) => d.other.fields);\n          // Cache stuff in session storage taking advantage when creating computed values\n          sessionStorage.setItem(SESSION_KIT_NAMES, JSON.stringify(kitOptions));\n          sessionStorage.setItem(\n            SESSION_KIT_ID,\n            JSON.stringify({\n              kitName: find(data[0], { label: \"Kit Name\" })?.value,\n              kitLot: find(data[0], { label: \"Kit Lot No.\" })?.value,\n              kitExpiry: find(data[0], { label: \"Kit Expiry Date\" })?.value,\n            })\n          );\n          return {\n            obs: data.map(async (options: Option[]) => {\n              const [parentObs, ...childObs] = options\n                .filter((l: Option) => typeof l.other.obs === \"function\")\n                .map((d: Option) => d.other.obs(d));\n              return {\n                ...(await parentObs),\n                child: await Promise.all(childObs),\n              };\n            }),\n          };\n        },\n        options: async (f: any) => {\n          if (!init && !isEmpty(kitHistory) && \n            !(await alertConfirmation('Do you want to re-use previously entered KIT information?'))) {\n            init = true\n            kitHistory = {}\n          }\n          if (f.test_kit != null) return f.test_kit;\n          const kitNameOption = () => ({\n            label: \"Kit Name\",\n            value: getSessionKitValue(\"kitName\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueText(\"Kit name\", v.value as string),\n              onclick: (val: Option) => {\n                keyboard(\n                  {\n                    id: \"name\",\n                    helpText: \"Kit Name\",\n                    type: FieldType.TT_TEXT,\n                    isRequired: () => true,\n                    options: () => kitOptions,\n                  },\n                  (v: Option) => {\n                    val.value = v.value;\n                    kitOptions = uniqBy([v, ...kitOptions], \"label\");\n                  }\n                );\n              },\n            },\n          });\n          const kitLotNoOption = () => ({\n            label: \"Kit Lot No.\",\n            value: getSessionKitValue(\"kitLot\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueNumber(\n                  \"Kit lot number\",\n                  v.value as number\n                ),\n              onclick: (val: Option) => {\n                keyboard({\n                  id: 'lot',\n                  helpText: 'Enter Lot Number',\n                  type: FieldType.TT_TEXT,\n                  isRequired: () => true\n                }, (v: Option) => {\n                  val.value = v.value\n                })\n              },\n            },\n          });\n          const kitExpiryDateOption = () => ({\n            label: \"Kit Expiry Date\",\n            value: getSessionKitValue(\"kitExpiry\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueDate(\n                  \"kit expiry date\",\n                  v.value as string\n                ),\n              onclick: (val: Option) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(this.service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(this.service.date),\n                        ];\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => (val.value = v.value)\n                );\n              },\n            },\n          });\n          return [\n            {\n              label: \"\",\n              value: \"\",\n              other: {\n                fields: [\n                  kitNameOption(),\n                  kitLotNoOption(),\n                  kitExpiryDateOption(),\n                ],\n              },\n            },\n          ];\n        },\n      };\n    },\n    selfTestsGivenToClientField(): Field {\n      return {\n        id: \"self_test_kits\",\n        helpText: \"Self-test kit users\",\n        type: FieldType.TT_INPUT_ARRAY,\n        isRequired: () => true,\n        condition: (f: any) =>\n          f.items_given_to_client.some(\n            (d: Option) => /self-test/i.test(d.label) && d.value > 0\n          ),\n        finalComputedValue: (v: Option[]) => {\n          return {\n            tag: \"reg\",\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d.value));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        summaryMapValue: (v: Option) => v.other.fields,\n        config: {\n          columns: [\n            { label: \"End-User\" },\n            { label: \"Gender\" },\n            { label: \"Age\" },\n            { label: \"Approach\" },\n          ],\n        },\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 4;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          const userOptionField = () => ({\n            label: \"User\",\n            value: \"\",\n            other: {\n              obs: (v: string) =>\n                this.service.buildValueCoded(\"Self-test end user\", v),\n              onclick: (\n                val: Option,\n                rows: Option[],\n                index: number,\n                i: number,\n                listData: Option[]\n              ) => {\n                const otherRows = listData.filter((_: any, i) => i != index);\n                const options = [];\n                if (!/Self/.test(JSON.stringify(otherRows)))\n                  options.push(\"Self\");\n                selectionList(\n                  [...options, \"Sexual partner\", \"Other\"],\n                  (selection: string) => {\n                    if (selection === \"Self\")\n                      rows.forEach((r) => {\n                        typeof r.other.selfOptionDefaultValue === \"function\"\n                          ? (r.value = r.other.selfOptionDefaultValue())\n                          : (r.value = \"\");\n                        typeof r.other.selfOptionDisabledValue === \"function\"\n                          ? (r.disabled = r.other.selfOptionDisabledValue())\n                          : (r.disabled = false);\n                      });\n                    else\n                      rows.forEach((r) => {\n                        typeof r.other.otherOptionDefaultValue === \"function\"\n                          ? (r.value = r.other.otherOptionDefaultValue())\n                          : (r.value = \"\");\n                        typeof r.other.otherOptionDisabledValue === \"function\"\n                          ? (r.disabled = r.other.otherOptionDisabledValue())\n                          : (r.disabled = false);\n                      });\n                    val.value = selection;\n                  },\n                  {\n                    title: \"Select End-User\",\n                    preset: val != null ? val.value : \"\",\n                    size: \"small-modal\",\n                  }\n                );\n              },\n            },\n          });\n          const genderOptionField = () => ({\n            label: \"Gender\",\n            value: \"\",\n            other: {\n              selfOptionDefaultValue: () => f.gender.label,\n              selfOptionDisabledValue: () => true,\n              otherOptionDefaultValue: () => \"\",\n              otherOptionDisabledValue: () => false,\n              obs: (v: string) =>\n                this.service.buildValueCoded(\"Gender of contact\", v),\n              onclick: (val: Option) => {\n                selectionList(\n                  [\"Female\", \"Male\"],\n                  (selection: string) => (val.value = selection),\n                  {\n                    title: \"Select gender\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const ageOptionField = () => ({\n            label: \"Age\",\n            value: \"\",\n            other: {\n              selfOptionDefaultValue: () => `${f.birthdate.value}`,\n              selfOptionDisabledValue: () => true,\n              otherOptionDefaultValue: () => \"\",\n              otherOptionDisabledValue: () => false,\n              obs: (v: string) => {\n                if (/unk/i.test(`${v}`)) {\n                  return this.service.buildValueCoded('Age of contact', 'Unknown')\n                } else {\n                  return this.service.buildValueNumber(\"Age of contact\", parseInt(v))\n                }\n              },\n              onclick: (val: Option) => {\n                numericKeypad((age: number | string) => {\n                  if (!/unk/i.test(`${age}`) && parseInt(`${age}`) >= 125) {\n                    val.value =''\n                    return toastWarning(`Age exceeds maximum human life expectancy of 124 years`)\n                  }\n                  val.value = age\n                }, {\n                  title: 'Age',\n                  preset: ' ',\n                  strictNumbers: false,\n                  customKeyboard: [\n                    ['1', '2', '3'],\n                    ['4', '5', '6'],\n                    ['7', '8', '9'],\n                    ['Unk', '0', 'Del'],\n                    ['', 'Done', '']\n                  ]\n                });\n              },\n            },\n          });\n          const approachOptionField = () => ({\n            label: \"Approach\",\n            value: \"\",\n            other: {\n              otherOptionDefaultValue: () => \"Un-assisted\",\n              otherOptionDisabledValue: () => true,\n              selfOptionDefaultValue: () => \"\",\n              selfOptionDisabledValue: () => false,\n              obs: (v: string) =>\n                this.service.buildValueCoded(\"Self-test approach\", v),\n              onclick: (val: Option) => {\n                selectionList(\n                  [\"Directly-assisted\", \"Un-assisted\"],\n                  (v: string) => (val.value = v),\n                  {\n                    title: \"Select approach\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const kits = this.getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"item\",\n                value: \"N/A\",\n                other: {\n                  fields: [\n                    userOptionField(),\n                    genderOptionField(),\n                    ageOptionField(),\n                    approachOptionField(),\n                  ],\n                },\n              };\n            });\n          if (Array.isArray(f.self_test_kits)) {\n            if (this.getSelfKitCount(f) < f.self_test_kits.length) {\n              return f.self_test_kits.slice(0, this.getSelfKitCount(f));\n            } else if (this.getSelfKitCount(f) > f.self_test_kits.length) {\n              return [\n                ...f.self_test_kits,\n                ...generateRows(\n                  this.getSelfKitCount(f) - f.self_test_kits.length\n                ),\n              ];\n            } else {\n              return f.self_test_kits;\n            }\n          }\n          return generateRows();\n        },\n      };\n    },\n    patientDemographics(): Field[] {\n      return [\n        (() => {\n          const name = PersonField.getGivenNameField();\n          name.validation = () => {\n            return true;\n          };\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getFamilyNameField();\n          name.type = FieldType.TT_HIDDEN;\n          name.validation = () => {\n            return true;\n          };\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeDistrictField();\n          name.type = FieldType.TT_HIDDEN;\n\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeTaField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeVillageField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentDistrictField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentTAfield();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentVillageField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCellNumberField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n      ];\n    },\n  },\n});\n","import { render } from \"./HtsESelfTestRegister.vue?vue&type=template&id=25765cde&ts=true\"\nimport script from \"./HtsESelfTestRegister.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsESelfTestRegister.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Gender',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: 'Birth',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'Home District',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            dynamicHelpText: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return 'Home Country'\n                }\n                return 'Home District'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'Home TA',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Home Village',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Current Region',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.value }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Use Home Address\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'Current District'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'Current TA',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Current Village',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Gender\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Person } from \"@/interfaces/person\"\nimport { Service } from \"./service\"\n\nexport interface NewPerson {\n    person_id?: number;\n    given_name: string;\n    family_name: string;\n    gender: string;\n    birthdate: string;\n    birthdate_estimated: boolean;\n    home_district: string;\n    home_traditional_authority: string;\n    home_village: string;\n    current_district: string;\n    current_traditional_authority: string;\n    current_village: string;\n    landmark: string;\n    cell_phone_number: string;\n    occupation: string;\n    facility_name: string;\n    patient_type?: string;\n    relationship?: string;\n}\n\nexport class PersonService extends Service{\n    person: Person | NewPerson\n    constructor(person: NewPerson | Person){\n        super()\n        this.person = person\n    }\n\n    create() { return Service.postJson('/people', this.person) }\n\n    update(id: number) { return Service.putJson(`people/${id}`, {\n        ...this.person, 'program_id': Service.getProgramID()\n    })}\n\n    static searchFamilyName(name: string) {\n        return super.getJson('/search/family_name', {'search_string': name})\n    }\n\n    static searchGivenName(name: string) {\n        return super.getJson('/search/given_name', {'search_string': name})\n    }\n\n    static async getPersonFullName(personId: string | number) {\n        const names = await super.getJson(`/people/${personId}/names`)\n        return names && names.length ? names[0].given_name + ' ' + names[0].family_name : ''\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}