{"version":3,"sources":["webpack:///./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/views/GuardianRegistration.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","onOnIndex","$event","fieldComponent","skipSummary","activeField","fields","onFinishAction","onFinish","cancelDestinationPath","patientData","id","RelationsService","Service","constructor","patientID","relationID","reason","void","guardianID","curRelationID","newRelationTypeID","voidRelation","createRelation","getJson","patientA","patientB","relationType","postJson","defineComponent","components","HisStandardForm","data","guardianData","fieldAction","form","redirectURL","currentAddressAttributes","homeAddressAttributes","watch","params","query","patient_id","patient","Patientservice","findByID","this","PersonFieldHelper","mapPersonData","person","edit_guardian","getFields","source","immediate","deep","methods","push","guardianSelection","guardianIndex","scanGuardian","givenNameField","familyNameField","genderField","searchResultField","concat","dobFields","homeRegionField","homeDistrictField","homeTAField","homeVillageField","currentRegionField","currentDistrictField","currentTAField","currentVillage","landmarkFields","cellPhoneField","relationsField","computedData","isEditMode","reg","PatientRegistrationService","setPersonID","updatePerson","PersonField","resolvePerson","Object","keys","forEach","i","date","relation","amendRelation","relationship_id","relations","other","relationship_type_id","isSameAsPatient","toastWarning","isRegistrationMode","guardian","registerGuardian","getPersonID","$router","name","$route","nextTask","isSearchMode","includes","canEdit","groups","defaultCondition","mandatoryCondition","birthdate","gender","HisDate","toStandardHisDisplayFormat","birth_date","given_name","family_name","toLowerCase","helpText","type","FieldType","TT_SELECT","condition","validation","v","Validation","required","options","async","relationship","RelationshipService","getRelationships","isEmpty","map","r","label","b_is_to_a","value","person_id","details","delayPromise","action","infoActionSheet","slot","color","back","config","footerBtns","onClick","getDefaultVal","fieldID","e","TT_TABLE_VIEWER","f","select_guardian","editButton","attribute","rows","cell_phone_number","home_district","home_traditional_authority","home_village","current_district","current_traditional_authority","landmark","overrideDefaultFooterBtns","nextBtn","popVoidReason","hiddenFooterBtns","getGivenNameField","defaultValue","getFamilyNameField","getGenderField","dob","getDobConfig","generateDateFields","home","getHomeRegionField","district","getHomeDistrictField","ta","getHomeTaField","home_region","match","village","getHomeVillageField","region","getCurrentRegionField","currentDistrict","getCurrentDistrictField","currentTA","getCurrentTAfield","current_region","getCurrentVillageField","cellPhone","getCellNumberField","landmarks","getLandmarkFields","proxyID","TT_RELATION_SELECTION","val","onload","context","cdata","relationships","getRelations","description","TT_BARCODE","requireNext","onValue","searchResults","findByNpid","TT_PERSON_RESULT_VIEW","dynamicHelpText","appearInSummary","patients","search","item","getPersonAttributeOptions","state","disabled","default","_","results","__exports__","PersonAttributeService","attributes","personId","personID","personAttributes","createPerson","createPersonAttributes","createPatient","printPatient","PersonService","update","create","ProgramService","index","PatientPrintoutService","printNidLbl","callback","size","modal","optionsActionSheet","role","selection"],"mappings":"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","file":"js/chunk-03bca019.50ab1640.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    skipSummary: true,\n    activeField: _ctx.fieldComponent,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    cancelDestinationPath: `/patient/dashboard/${_ctx.patientData.id}`\n  }, null, 8, [\"activeField\", \"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { optionsActionSheet } from '@/utils/ActionSheets'\n\nexport default async function popVoidReason(callback: Function, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { RelationsService } from \"@/services/relations_service\"\nimport { isEmpty } from \"lodash\"\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { RelationshipService } from \"@/services/relationship_service\";\nimport PersonFieldHelper from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport { infoActionSheet } from \"@/utils/ActionSheets\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    patientData: {} as any,\n    guardianData: {} as any,\n    fieldAction: '' as 'Scan' | 'Search' | 'Registration' | 'edit',\n    fieldComponent: '' as string,\n    fields: [] as Array<Field>,\n    form: {} as Record<string, Option> | Record<string, null>,\n    redirectURL: '' as string,\n    activeField: '' as string,\n    currentAddressAttributes: [\n        'current_region',\n        'current_district',\n        'current_village',\n        'current_traditional_authority'\n    ] as string[],\n    homeAddressAttributes: [\n        'home_region',\n        'home_district',\n        'home_traditional_authority',\n        'home_village'\n    ] as string[]\n  }),\n  watch: {\n    '$route': {\n        async handler({params, query}: any) {\n            if (params.patient_id) {\n                const patient = await Patientservice.findByID(params.patient_id)\n                if (patient) {\n                    this.patientData = PersonFieldHelper.mapPersonData(patient.person)\n                    if (query.edit_guardian) {\n                        this.fieldAction = 'edit'\n                    }\n                    this.fields = this.getFields()\n                }\n            }\n            if(query.source) this.redirectURL = query.source\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    getFields(): Array<Field> {\n        let fields: Array<Field> = []\n        fields.push(this.guardianSelection())\n        fields.push(this.guardianIndex())\n        fields.push(this.scanGuardian())\n        fields.push(this.givenNameField())\n        fields.push(this.familyNameField())\n        fields.push(this.genderField())\n        fields.push(this.searchResultField())\n        fields = fields.concat(this.dobFields())\n        fields.push(this.homeRegionField())\n        fields.push(this.homeDistrictField())\n        fields.push(this.homeTAField())\n        fields.push(this.homeVillageField())\n        fields.push(this.currentRegionField())\n        fields.push(this.currentDistrictField())\n        fields.push(this.currentTAField())\n        fields.push(this.currentVillage())\n        fields = fields.concat(this.landmarkFields())\n        fields.push(this.cellPhoneField())\n        fields.push(this.relationsField())\n        return fields\n    },\n    async onFinish(form: any, computedData: any) {\n        if (this.isEditMode()) {\n            if (this.activeField != 'relations') {\n                const reg = new PatientRegistrationService()\n                reg.setPersonID(this.guardianData.id)\n                await reg.updatePerson(PersonField.resolvePerson(computedData))\n                // Patch updated values\n                Object.keys(computedData).forEach((i: string) => {\n                    if (i in this.guardianData) {\n                        this.guardianData[i] = computedData[i]?.date || computedData[i].person\n                    }\n                })\n            } else {\n                if (this.guardianData?.relation) {\n                    const relation = await RelationsService.amendRelation(\n                        this.patientData.id,\n                        this.guardianData.id,\n                        this.guardianData.relation.relationship_id,\n                        form.relations.other.relationship_type_id\n                    )\n                    if (relation) {\n                        this.guardianData.relation = relation\n                    }\n                }\n            }\n            this.fieldComponent = 'guardian_index'\n        } else {\n            if(this.isSameAsPatient(computedData)) {\n                toastWarning(\"Guardian cannot be the same patient\")\n            } else {\n                let guardianID = -1\n                if (this.isRegistrationMode()) {\n                    const guardian: any = new PatientRegistrationService()\n                    await guardian.registerGuardian(PersonField.resolvePerson(computedData))\n                    guardianID = guardian.getPersonID()\n                } else {\n                    guardianID = this.guardianData.id\n                }\n                await RelationsService.createRelation(\n                    this.patientData.id, guardianID, form.relations.other.relationship_type_id\n                )\n                if(this.redirectURL) this.$router.push({name: this.redirectURL})\n                else if (this.$route.query.edit_guardian) this.fieldComponent = 'select_guardian'\n                else await nextTask(this.patientData.id, this.$router, this.$route)\n            }   \n        }\n    },\n    isEditMode() {\n        return this.fieldAction === 'edit'\n    },\n    isSearchMode() {\n        return ['Search', 'Registration'].includes(this.fieldAction)\n    },\n    isRegistrationMode() {\n        return this.fieldAction === 'Registration'\n    },\n    canEdit(groups: Array<string|number>, defaultCondition=true, mandatoryCondition=true) {\n        if (this.isEditMode()) {\n            return groups.includes(this.activeField) && mandatoryCondition\n        }\n        return defaultCondition\n    },\n    isSameAsPatient(guardian: any) {\n        let birthdate = ''\n        let name = ''\n        let gender = ''\n\n        if(this.isRegistrationMode()) {\n            birthdate = HisDate.toStandardHisDisplayFormat(guardian.birth_date.date)\n            name = guardian.given_name.person && guardian.family_name.person\n            gender = guardian.gender.person\n        } else {\n            birthdate = this.guardianData.birth_date\n            name = this.guardianData.name\n            gender = this.guardianData.gender  \n        }\n\n        return (name.toLowerCase() === this.patientData.name.toLowerCase()) \n            && (birthdate === this.patientData.birth_date)\n            && (gender === this.patientData.gender)\n    },\n    guardianSelection(): Field {\n        return {\n            id: 'select_guardian',\n            helpText: 'Select guardian to edit/view',\n            type: FieldType.TT_SELECT,\n            condition: () => this.isEditMode(),\n            validation: (v: Option) => Validation.required(v),\n            options: async () => {\n                const relationship = await RelationshipService.getRelationships(this.patientData.id)\n                if (!isEmpty(relationship)) {\n                    return relationship.map((r: any) => {\n                        const guardian = PersonField.mapPersonData(r.relation)\n                        return {\n                            label: `${guardian.name} (${r.type.b_is_to_a})`, \n                            value: r.relation.person_id, \n                            other: {\n                                relations: r, \n                                details: guardian \n                            }\n                        }\n                    })\n                } else {\n                    await delayPromise(450)\n                    const action = await infoActionSheet(\n                        'Patient has no guardians', '',\n                        'Select option to proceed',\n                        [\n                            {\n                                name: 'Cancel',\n                                slot: 'start',\n                                color: 'danger'\n                            },\n                            {\n                                name: 'Register new',\n                                slot: 'start',\n                                color: 'success'\n                            }\n                        ]\n                    )\n                    if (action === 'Register new') {\n                        this.guardianData = {}\n                        this.fieldAction = 'Registration'\n                        this.fieldComponent = 'scan'\n                    } else {\n                        this.$router.back()\n                    }\n                }\n                return []\n            },\n            config: {\n                footerBtns: [\n                    {\n                        name: 'New Guardian',\n                        slot: 'end',\n                        color: 'primary',\n                        onClick: () => {\n                            this.guardianData = {}\n                            this.fieldAction = 'Registration'\n                            this.fieldComponent = 'scan'\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    getDefaultVal(fieldID: string | number) {\n        try {\n            return this.guardianData[fieldID]\n        } catch (e) {\n            return ''\n        }\n    },\n    guardianIndex(): Field {\n        return {\n            id: 'guardian_index',\n            helpText: 'Guardian details',\n            type: FieldType.TT_TABLE_VIEWER,\n            condition: (f: any) => f.select_guardian.value, \n            options: (f: any) => {\n                if (this.guardianData && this.guardianData.id != f.select_guardian.value) {\n                    this.guardianData = {\n                        ...f.select_guardian.other.details,\n                        relation: f.select_guardian.other.relations\n                    }\n                }\n                const editButton = (attribute: string) => ({\n                    name: 'Edit',\n                    type: 'button',\n                    action: () => {\n                        this.activeField = attribute\n                        this.fieldComponent = this.activeField\n                    }\n                })\n                const rows = [\n                    ['Given Name', this.guardianData.given_name, editButton('given_name')],\n                    ['Family Name', this.guardianData.family_name, editButton('family_name')],\n                    ['Gender', this.guardianData.gender, editButton('gender')],\n                    ['Birthdate', HisDate.toStandardHisDisplayFormat(this.guardianData.birth_date), editButton('year_birth_date')],\n                    ['Cell Phone Number', this.guardianData.cell_phone_number, editButton('cell_phone_number')],\n                    ['Home District', this.guardianData.home_district, editButton('home_region')],\n                    ['Home TA', this.guardianData.home_traditional_authority, editButton('home_region')],\n                    ['Home Village', this.guardianData.home_village,  editButton('home_region')],\n                    ['Current district', this.guardianData.current_district, editButton('current_region')],\n                    ['Current T/A', this.guardianData.current_traditional_authority, editButton('current_region')],\n                    ['Landmark', this.guardianData.landmark, editButton('default_landmarks')],\n                    ['Relation', this.guardianData.relation.type.b_is_to_a, editButton('relations')]\n                ]\n                return [{\n                    label: '', \n                    value: '',\n                    other: {\n                        rows\n                    }\n                }]\n            },\n            config : {\n                overrideDefaultFooterBtns: {\n                    nextBtn: {\n                        name: 'Finish',\n                        slot: 'end',\n                        color: 'success',\n                        onClick: () => this.fieldComponent = 'select_guardian'\n                    }\n                },\n                footerBtns: [\n                    {\n                        name: 'Void Relation',\n                        slot: 'start',\n                        color: 'danger',\n                        onClick: async () => {\n                            popVoidReason(async (reason: string) => {\n                                await RelationsService.voidRelation(\n                                    this.patientData.id, \n                                    this.guardianData.relation.relationship_id,\n                                    reason\n                                )\n                                this.fieldComponent = 'select_guardian'\n                            })\n                        }\n                    }\n                ],\n                hiddenFooterBtns: ['Clear', 'Back']\n            }\n        }\n    },\n    givenNameField(): Field {\n        const name: Field = PersonField.getGivenNameField()\n        name.helpText = 'Guardian First name'\n        name.defaultValue = () => this.getDefaultVal(name.id)\n        name.condition = () => this.canEdit([name.id], this.isSearchMode())\n        return name\n    },\n    familyNameField(): Field {\n        const name: Field = PersonField.getFamilyNameField()\n        name.helpText = 'Guardian Last name'\n        name.defaultValue = () => this.getDefaultVal(name.id)\n        name.condition = () => this.canEdit([name.id], this.isSearchMode())\n        return name\n    },\n    genderField(): Field {\n        const gender: Field = PersonField.getGenderField()\n        gender.defaultValue = () => this.getDefaultVal(gender.id)\n        gender.condition = () => this.canEdit([gender.id], this.isSearchMode())\n        return gender\n    },\n    dobFields(): Array<Field> {\n        const dob =PersonField.getDobConfig()\n        dob.defaultValue = () => this.getDefaultVal('birth_date')\n        dob.condition = () => this.canEdit([\n            'year_birth_date', \n            'month_birth_date', \n            'day_birth_date'\n            ], \n            this.isRegistrationMode()\n        ) \n        return generateDateFields(dob)\n    },\n    homeRegionField(): Field {\n        const home: Field = PersonField.getHomeRegionField()\n        home.condition = () => this.canEdit(this.homeAddressAttributes, this.isRegistrationMode())\n        return home\n    },\n    homeDistrictField(): Field {\n        const district: Field = PersonField.getHomeDistrictField()\n        district.condition = () => this.canEdit(this.homeAddressAttributes, this.isRegistrationMode())\n        return district\n    },\n    homeTAField(): Field {\n        const ta: Field =  PersonField.getHomeTaField()\n        ta.condition = (form: any) => this.canEdit(\n            this.homeAddressAttributes, \n            this.isRegistrationMode() && !form.home_region.label.match(/foreign/i),\n            !form.home_region.label.match(/foreign/i)\n        )\n        return ta\n    },\n    homeVillageField(): Field {\n        const village: Field = PersonField.getHomeVillageField()\n        village.condition = (form: any) => this.canEdit(\n            this.homeAddressAttributes, \n            this.isRegistrationMode() && !form.home_region.label.match(/foreign/i),\n            !form.home_region.label.match(/foreign/i)\n        )\n        return village\n    },\n    currentRegionField(): Field {\n        const region: Field = PersonField.getCurrentRegionField()\n        region.condition = () => this.canEdit(this.currentAddressAttributes, this.isRegistrationMode())\n        return region\n    },\n    currentDistrictField(): Field {\n        const currentDistrict: Field = PersonField.getCurrentDistrictField()\n        currentDistrict.condition = () => this.canEdit(this.currentAddressAttributes, this.isRegistrationMode())\n        return currentDistrict\n    },\n    currentTAField(): Field {\n        const currentTA: Field = PersonField.getCurrentTAfield()\n        currentTA.condition = (form: any) => this.canEdit(\n            this.currentAddressAttributes, \n            this.isRegistrationMode() && !form.current_region.label.match(/foreign/i),\n            !form.current_region.label.match(/foreign/i)\n        )\n        return currentTA\n    },\n    currentVillage(): Field {\n        const currentVillage: Field = PersonField.getCurrentVillageField()\n        currentVillage.condition = (form: any) => this.canEdit(\n            this.currentAddressAttributes, \n            this.isRegistrationMode() && !form.current_region.label.match(/foreign/i),\n            !form.current_region.label.match(/foreign/i)\n        )\n        return currentVillage\n    },\n    cellPhoneField(): Field {\n        const cellPhone: Field = PersonField.getCellNumberField()\n        cellPhone.condition = () => this.canEdit([cellPhone.id], this.isRegistrationMode())\n        return cellPhone \n    },\n    landmarkFields(): Field[] {\n        const landmarks: Field[] = PersonField.getLandmarkFields()\n        const id = landmarks[0].proxyID || landmarks[0].id\n        landmarks[0].defaultValue =  () => this.getDefaultVal(id)\n        landmarks[0].condition = () => this.canEdit([id], this.isRegistrationMode())\n        return landmarks\n    },\n    relationsField(): Field {\n        return {\n            id: 'relations',\n            helpText: 'Select relationship type',\n            type: FieldType.TT_RELATION_SELECTION,\n            defaultValue: () => this.getDefaultVal('relations'),\n            validation: (val: Option) => Validation.required(val),\n            condition: () => this.canEdit(['relations']),\n            onload: (context: any) => {\n                context.patient = this.patientData\n                if (this.isRegistrationMode()) {\n                    const person = PersonField.resolvePerson(context.cdata)\n                    context.guardian = {\n                        'name': `${person.given_name} ${person.family_name}`,\n                        'birth_date': HisDate.toStandardHisDisplayFormat(person.birthdate),\n                        'home_address': `${person.home_district} ${person.home_traditional_authority}`\n                    }\n                } else {\n                    context.guardian = this.guardianData\n                }\n            },\n            options: async() => {\n                const relationships = await RelationsService.getRelations()\n                return relationships.map((r: any) => ({\n                    label: r.b_is_to_a, \n                    value: r.description, \n                    other: r\n                }))\n            },\n            config: {\n                hiddenFooterBtns: [\n                  'Clear'\n                ]\n            }\n        }\n    },\n    scanGuardian(): Field {\n        return {\n            id: 'scan',\n            helpText: 'Scan or Register Guardian',\n            type: FieldType.TT_BARCODE,\n            requireNext: false,\n            condition: () => !this.isEditMode(),\n            onValue: async (id: string) => {\n                const searchResults = await Patientservice.findByNpid(id)\n                if (!isEmpty(searchResults)) {\n                    this.guardianData = PersonFieldHelper.mapPersonData(searchResults[0].person)\n                    this.fieldComponent = 'relations'\n                    this.fieldAction = 'Scan'\n                }\n                return false\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns : [\n                    {\n                        name: 'Find or Register Guardian',\n                        color: 'success',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Search'\n                            this.fieldComponent = 'given_name'\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    searchResultField(): Field {\n        return {\n            id: 'results',\n            helpText: 'Search results',\n            type: FieldType.TT_PERSON_RESULT_VIEW,\n            dynamicHelpText: (f: any) => {\n                return `Search results for \n                \"${f.given_name.value} ${f.family_name.value} | ${f.gender.label}\"\n                `\n            },\n            appearInSummary: () => false,\n            condition: () => this.isSearchMode(),\n            validation: (val: Option) => Validation.required(val),\n            options: async (form: any) => {\n                const patients = await Patientservice.search({\n                    'given_name': form.given_name.value, \n                    'family_name': form.family_name.value, \n                    'gender': form.gender.value, \n                });\n                return patients.map((item: any) => PersonField.getPersonAttributeOptions(item))\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Edit Search',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Search'\n                            this.fieldComponent = 'given_name'\n                        }\n                    },\n                    {\n                        name: 'New Guardian',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Registration'\n                            this.fieldComponent = 'year_birth_date'\n                        }\n                    },\n                    {\n                        name: 'Continue Guardian',\n                        color: 'success',\n                        slot: 'end',\n                        state: {\n                            disabled: {\n                                default: () => true,\n                                onValue(_: any,form: any) {\n                                    return isEmpty(form.results)\n                                }\n                            }\n                        },\n                        onClick: (form: any) => {\n                            this.guardianData = PersonFieldHelper.mapPersonData(\n                                form.results.other.person.person\n                            )\n                            this.fieldComponent = 'relations'\n                            this.fieldAction = 'Search'\n                        }\n                    }\n                ]\n            }\n        }\n    }\n  }\n})\n","import { render } from \"./GuardianRegistration.vue?vue&type=template&id=0334418a&ts=true\"\nimport script from \"./GuardianRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./GuardianRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}