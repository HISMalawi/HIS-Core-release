{"version":3,"sources":["webpack:///./src/apps/ART/views/ARTStock/verification.vue?1c27","webpack:///./src/apps/ART/views/ARTStock/verification.vue","webpack:///./src/apps/ART/views/ARTStock/verification.vue?3832"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","activeField","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","components","HisStandardForm","data","drugs","selectedDrugs","barcode","stockService","methods","formData","items","enter_batches","errors","index","length","element","value","vals","reason","updateItem","f","push","shortName","toastSuccess","$router","toastDanger","getFields","id","helpText","type","FieldType","TT_FULL_DATE","validation","val","Validation","required","TT_BATCH_VERIFICATION","options","TT_SELECT","label","TT_TABLE_VIEWER","d","buildResults","config","hiddenFooterBtns","columns","rows","map","j","HisDate","toStandardHisDisplayFormat","expiry_date","other","prepDrugs","formdata","this","forEach","batchNumber","drugID","expiry","parseInt","tabs","tins","date","selectAll","listData","l","isChecked","formatDrugs","drugList","drug","created","StockService","__exports__"],"mappings":"yIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,IAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,OAAQV,EAAKU,OACbC,YAAaX,EAAKW,YAClBC,eAAgBZ,EAAKa,SACrBC,aAAa,EACbC,sBAAuBf,EAAKgB,mBAC3B,KAAM,EAAG,CAAC,SAAU,cAAe,iBAAkB,0B,kICD3CC,+BAAgB,CAC7BC,WAAY,CAAEC,wBACdC,KAAM,iBAAO,CACXT,YAAa,GACbD,OAAQ,GACRW,MAAO,GACPC,cAAe,GACfC,QAAS,GACTC,aAAc,KAGhBC,QAAS,CACDZ,SADC,SACQa,GAAa,wKACpBC,EAAQD,EAASE,cACjBC,EAAS,GACNC,EAAQ,EAHS,YAGNA,EAAQH,EAAMI,QAHR,wBAIlBC,EAAUL,EAAMG,GAAOG,MACvBC,EAAO,CACL,iBAAoBF,EAAQ,oBAC5B,OAAUN,EAASS,OAAOF,OAPV,SASJ,EAAKT,aAAaY,WAAWJ,EAAQ,qBAAsBE,GATvD,OASdG,EATc,OAUhBA,GACFR,EAAOS,KAAK,uBAAyBX,EAAMG,GAAOS,WAXhC,QAGgBT,IAHhB,uBAcJ,IAAlBD,EAAOE,QACTS,eAAa,6BACb,EAAKC,QAAQH,KAAK,MAElBI,eAAY,wBAlBY,+CAqB5BC,UAtBO,WAsBE,WACP,MAAO,CACL,CACEC,GAAI,OACJC,SAAU,mBACVC,KAAMC,OAAUC,aAChBC,WAAY,SAACC,GAAD,OAAiBC,OAAWC,SAASF,KAEnD,CACEN,GAAI,gBACJC,SAAU,cACVC,KAAMC,OAAUM,sBAChBC,QAAS,kBAAM,EAAKjC,OACpB4B,WAAY,SAACC,GAAD,OAAiBC,OAAWC,SAASF,KAEnD,CACEN,GAAI,SACJC,SAAU,gBACVC,KAAMC,OAAUQ,UAChBN,WAAY,SAACC,GAAD,OAAiBC,OAAWC,SAASF,IACjDI,QAAS,iBAAM,CACb,CACEE,MAAO,qBACPvB,MAAO,sBAET,CACEuB,MAAO,QACPvB,MAAO,SAET,CACEuB,MAAO,iCACPvB,MAAO,kCAET,CACEuB,MAAO,cACPvB,MAAO,kBAIb,CACEW,GAAI,uBACJC,SAAU,UACVC,KAAMC,OAAUU,gBAChBH,QAAS,SAACI,GAAD,OAAY,EAAKC,aAAaD,EAAE9B,gBACzCgC,OAAQ,CACNC,iBAAkB,CAAC,aAK3BF,aAxEO,SAwEMtC,GACX,IAAMyC,EAAU,CACd,OACA,cACA,eAEIC,EAAO1C,EAAM2C,KAAI,SAACC,GACtB,IAAMP,EAAIO,EAAEhC,MACZ,MAAO,CACLyB,EAAEnB,UACFmB,EAAE,oBACFQ,OAAQC,2BAA2BT,EAAEU,iBAGzC,MAAO,CACL,CACEZ,MAAO,gBACPvB,MAAO,QACPoC,MAAO,CAAEP,UAASC,WAIxBO,UA9FO,SA8FGC,GACR,IAAM5C,EAAe,GACfJ,EAAUiD,KAAKjD,QAgBrB,OAdAgD,EAAS3C,cAAcK,MAAMwC,SAAQ,SAACzC,GACpCL,EAAMW,KAAK,CACT,aAAgBN,EAAQ0C,YACxB/C,MAAO,CACL,CACE,QAAWJ,EACX,QAAWS,EAAQ2C,OACnB,YAAe3C,EAAQ4C,OACvB,SAAYC,SAAS7C,EAAQ8C,MAAQD,SAAS7C,EAAQ+C,MACtD,cAAiBR,EAASS,KAAK/C,aAKhCN,GAETsD,UAlHO,SAkHGC,GACR,OAAOA,EAASlB,KAAI,SAACmB,GAEnB,OADAA,EAAEC,WAAY,EACPD,MAGXE,YAxHO,WAyHL,OAAOb,KAAKhD,aAAa8D,WAAWtB,KAAI,SAACuB,GACvC,MAAO,CACL/B,MAAO+B,EAAKhD,UACZN,MAAOsD,QAKfC,QA5I6B,WA6I3BhB,KAAKhD,aAAe,IAAIiE,OACxBjB,KAAK9D,OAAS8D,KAAK7B,YACnB6B,KAAKnD,MAAQmD,KAAKa,iB,qBCpJtB,MAAMK,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS3F,KAErD","file":"js/chunk-2d0e2514.dadbfd2d.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport HisDate from \"@/utils/Date\";\nimport  { StockService } from \"./stock_service\";\nimport { toastDanger, toastSuccess } from \"@/utils/Alerts\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      const items = formData.enter_batches;\n      const errors = [];\n      for (let index = 0; index < items.length; index++) {\n        const element = items[index].value;\n        const vals = {\n                \"current_quantity\": element['current_quantity'],\n                \"reason\": formData.reason.value\n            };\n            const f = await this.stockService.updateItem(element['pharmacy_batch_id'], vals)\n            if(!f) {\n              errors.push('could not stock for ' + items[index].shortName);\n            }\n      }\n      if (errors.length === 0) {\n        toastSuccess(\"Stock succesfully updated\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(\"Could not save stock\");\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"date\",\n          helpText: \"Verfication Date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: Option) => Validation.required(val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_VERIFICATION,\n          options: () => this.drugs,\n          validation: (val: Option) => Validation.required(val),\n        },\n        {\n          id: \"reason\",\n          helpText: \"Select reason\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Monthly stock take\",\n              value: \"Monthly stock take\",\n            },\n            {\n              label: \"Audit\",\n              value: \"Audit\",\n            },\n            {\n              label: \"Adhoc (due to stock imbalance)\",\n              value: \"Adhoc (due to stock imbalance)\",\n            },\n            {\n              label: \"Supervision\",\n              value: \"Supervision\",\n            },\n          ],\n        },\n        {\n          id: \"verification_summary\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d.enter_batches),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(drugs: any) {\n      const columns = [\n        \"Drug\",\n        \"Total units\",\n        \"Expiry date\",\n      ];\n      const rows = drugs.map((j: any) => {\n        const d = j.value;\n        return [\n          d.shortName,\n          d['current_quantity'],\n          HisDate.toStandardHisDisplayFormat(d.expiry_date),\n        ];\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    prepDrugs(formdata: any) {\n      const items: any[] = [];\n      const barcode = this.barcode;\n      \n      formdata.enter_batches.value.forEach((element: any) => {\n        items.push({\n          'batch_number': element.batchNumber,\n          items: [\n            {\n              'barcode': barcode,\n              'drug_id': element.drugID,\n              'expiry_date': element.expiry,\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\n              'delivery_date': formdata.date.value,\n            },\n          ],\n        });\n      });\n      return items;\n    },\n    selectAll(listData: Array<Option>) {\n      return listData.map((l) => {\n        l.isChecked = true;\n        return l;\n      });\n    },\n    formatDrugs() {\n      return this.stockService.drugList().map((drug: any) => {\n        return {\n          label: drug.shortName,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n    this.drugs = this.formatDrugs();\n  },\n});\n","import { render } from \"./verification.vue?vue&type=template&id=046fe90a&ts=true\"\nimport script from \"./verification.vue?vue&type=script&lang=ts\"\nexport * from \"./verification.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}