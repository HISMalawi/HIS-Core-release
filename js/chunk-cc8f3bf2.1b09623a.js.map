{"version":3,"sources":["webpack:///./src/services/person_attributes_service.ts","webpack:///./src/services/patient_registration_service.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/views/PatientRegistration.vue?4ce2","webpack:///./src/views/PatientRegistration.vue","webpack:///./src/views/PatientRegistration.vue?ad61","webpack:///./src/services/person_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["PersonAttributeService","Service","constructor","super","attributes","postJson","PatientRegistrationService","this","personId","getPersonID","setPersonID","personID","person","personAttributes","createPerson","createPersonAttributes","patient","createPatient","printPatient","updatePerson","PersonService","update","data","create","person_id","ProgramService","index","PatientPrintoutService","printNidLbl","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","$emit","i","__exports__","mapToOption","listOptions","map","item","label","value","resolvePerson","computedForm","attr","values","isPlainObject","getGivenNameField","id","helpText","FieldType","TT_TEXT","computedValue","val","validation","Validation","isName","options","async","form","given_name","names","searchGivenName","getFamilyNameField","family_name","searchFamilyName","getGenderField","customOptions","TT_SELECT","isEmpty","getDobConfig","summaryLabel","minDate","HisDate","estimateDateFromAge","maxDate","getSessionDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","date","isEstimate","birthdate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","dynamicHelpText","f","home_region","match","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","slot","color","onClick","c","field","filter","length","toastWarning","filtered","ok","alertConfirmation","address","LocationService","createAddress","toUpperCase","getHomeTaField","config","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","defaultComputedOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","test","home_village","onClickComponentEvents","setValue","getCurrentDistrictField","current_region","getCurrentTAfield","current_district","getCurrentVillageField","current_traditional_authority","getCellNumberField","number","split","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","condition","v","getFacilityLocationField","_","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","Array","isArray","person_attributes","reduce","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","gender","birthdate_estimated","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","getNationalID","other","npid","show","getProgramName","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","formLabel","$event","fieldComponent","HisStandardForm","IonPage","app","App","getActiveApp","ddeInstance","ddeDocID","ddeIsReassign","currentAddressAttributes","homeAddressAttributes","hasIncompleteData","editPersonData","editPerson","personAttribute","isMilitarySite","presets","registrationSummary","ddeEnabled","watch","query","PatientDemographicsExchangeService","edit_person","dde_reassign","doc_id","setPatientID","person_attribute","initEditMode","getFields","immediate","deep","push","personIndexField","hasScannedNationalID","concat","hiddenFieldsForScannedNationalID","givenNameField","familyNameField","genderField","searchResultField","dobFields","homeRegionField","homeDistrictField","homeTAField","homeVillageField","currentRegionField","currentDistrictField","currentTAField","currentVillage","landmarkFields","cellPhoneField","patientTypeField","facilityLocationField","occupationField","regimentField","dateJoinedMilitaryFields","rankField","relationshipField","possibleDuplicatesField","isEditMode","nationalIDStatus","Store","get","patientID","parseInt","ancestryDistrict","ancestryTA","ancestryVillage","currentDistrict","currentTA","getAddresses","getGivenName","getFamilyName","getGender","getBirthdate","getPhoneNumber","getClosestLandmark","PersonField","resolvePersonAttributes","registration","registerPatient","set","updateMWNationalId","malawiNationalID","onRegisterPatient","exit","$router","$route","relationship","nextTask","invalidate","back","editConditionCheck","includes","getDocID","assignNpid","printNationalID","delayPromise","e","toastDanger","d","console","error","TT_HIDDEN","defaultValue","toLowerCase","findByID","IS_ANC_APP","applicationName","IS_CXCA","beforeNext","newGender","oldGender","action","infoActionSheet","dobConfig","sdate","childBearingAgeInYrs","dayjs","subtract","format","STANDARD_DATE_FORMAT","generateDateFields","region","district","currentRegion","summaryMapValue","current_village","cellPhone","cell_phone_number","facility","patient_type","landmarks","PatientTypeService","getPatientTypes","init","GLOBAL_PROP","militarySiteEnabled","occupation","WorkflowService","IS_HTS","OPD","Registration","TT_PERSON_RESULT_VIEW","payload","patients","searchDemographics","itemData","search","hiddenFooterBtns","state","disabled","onValue","results","createdPerson","duplicatePatients","TT_PERSON_MATCH_VIEW","checkPotentialDuplicates","toDate","toStandardHisDisplayFormat","score","patient_id","newPerson","foundPerson","comparisons","visible","possible_duplicates","TT_TABLE_VIEWER","editButton","attribute","columns","rows","landmark","emptySets","indexes","class","forEach","r","isValueEmpty","rowColors","onload","reassignNpid","printNpid","confirmPatient","putJson","getProgramID","getJson","facilities","trim","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","regions","region_id","regionID","districts","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-cc8f3bf2.1b09623a.js","sourcesContent":["import { Service } from \"./service\"\n\nexport interface NewAttribute {\n    person_id: number;\n    person_attribute_type_id: number;\n    value: number | string;\n}\n\nexport class PersonAttributeService extends Service { \n    constructor() {\n        super()\n    }\n\n    static create(attributes: Array<NewAttribute>) { \n        return super.postJson('/person_attributes', attributes) \n    }\n}\n","import { Service } from \"./service\"\nimport { ProgramService } from \"@/services/program_service\";\nimport { Person } from \"@/interfaces/person\"\nimport { PersonService } from \"@/services/person_service\"\nimport { PersonAttributeService } from '@/services/person_attributes_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\n\nexport class PatientRegistrationService extends Service {\n    personId: number\n    constructor() {\n        super()\n        this.personId = 0\n    }\n\n    getPersonID() {\n        return this.personId\n    }\n\n    setPersonID(personID: number) {\n        this.personId = personID\n    }\n\n    async registerPatient(person: any, personAttributes: any) {\n        await this.createPerson(person)\n        await this.createPersonAttributes(personAttributes)\n        const patient = await this.createPatient()\n        await this.printPatient()\n        return patient\n    }\n\n    async registerBasicPatient(person: any) {\n        await this.createPerson(person)\n        return this.createPatient()\n    }\n\n    async registerGuardian(person: any) {\n        return this.createPerson(person)\n    }\n\n    updatePerson(person: any) {\n       return new PersonService(person).update(this.personId)\n    }\n\n    async createPerson(person: any) {\n        const data: Person = await new PersonService(person).create()\n        this.personId = data.person_id\n        return data\n    }\n\n    createPatient() {\n        return ProgramService.createPatient(this.personId)\n    }\n\n    async createPersonAttributes(attributes: Array<any>) {\n        for(const index in attributes) {\n            await PersonAttributeService.create({\n                ...attributes[index],\n                'person_id': this.personId\n            })\n        }\n    }\n\n    printPatient() {\n        return new PatientPrintoutService(this.personId).printNidLbl()\n    }\n}\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: 'Birth',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            dynamicHelpText: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Current Region of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'Current District of Residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'Current TA of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Current Village of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: _ctx.formLabel,\n        onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n        skipSummary: _ctx.skipSummary,\n        activeField: _ctx.fieldComponent,\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish\n      }, null, 8, [\"formLabel\", \"skipSummary\", \"activeField\", \"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport { WorkflowService } from \"@/services/workflow_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\"\nimport App from \"@/apps/app_lib\"\nimport { AppInterface } from \"@/apps/interfaces/AppInterface\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { isValueEmpty } from \"@/utils/Strs\"\nimport { PatientDemographicsExchangeService } from \"@/services/patient_demographics_exchange_service\"\nimport { toastDanger, toastWarning } from \"@/utils/Alerts\"\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { IonPage } from \"@ionic/vue\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport GLOBAL_PROP from \"@/apps/GLOBAL_APP/global_prop\";\nimport dayjs from \"dayjs\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  components: { HisStandardForm, IonPage },\n  data: () => ({\n    formLabel: 'Find / Register',\n    app: App.getActiveApp() as AppInterface,\n    ddeInstance: {} as any,\n    ddeDocID: '' as string,\n    ddeIsReassign: false as boolean,\n    skipSummary: false as boolean,\n    currentAddressAttributes: [\n        'current_region',\n        'current_district',\n        'current_village',\n        'current_traditional_authority'\n    ] as string[],\n    homeAddressAttributes: [\n        'home_region',\n        'home_district',\n        'home_traditional_authority',\n        'home_village'\n    ] as string[],\n    hasIncompleteData: false as boolean,\n    patient: {} as any,\n    editPersonData: {} as any,\n    editPerson: -1 as number,\n    personAttribute: '' as string,\n    activeField: '' as string,\n    fieldComponent: '' as string,\n    fields: [] as Array<Field>,\n    isMilitarySite: false,\n    presets: {} as any,\n    registrationSummary: {} as any,\n    form: {} as Record<string, Option> | Record<string, null>,\n    ddeEnabled: false as boolean,\n  }),\n  watch: {\n    '$route': {\n        async handler({query}: any) {\n           this.ddeInstance = new PatientDemographicsExchangeService()\n           if (query.edit_person) {\n                this.ddeIsReassign = query.dde_reassign\n                this.ddeDocID = query.doc_id\n                this.ddeInstance.setPatientID(query.edit_person)\n                if(query.person_attribute) this.personAttribute = query.person_attribute\n                await this.initEditMode(query.edit_person)\n            } else {\n                this.presets = query\n            }\n            this.fields = this.getFields()\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    getFields(): Array<Field> {\n        let fields: Array<Field> = []\n        fields.push(this.personIndexField())\n        if (this.hasScannedNationalID()) {\n            fields = fields.concat(this.hiddenFieldsForScannedNationalID())\n        } else {\n            fields.push(this.givenNameField())\n            fields.push(this.familyNameField())\n            fields.push(this.genderField())\n        }\n        fields.push(this.searchResultField())\n        if (!this.hasScannedNationalID()) {\n            fields = fields.concat(this.dobFields())\n        }\n        fields.push(this.homeRegionField())\n        fields.push(this.homeDistrictField())\n        fields.push(this.homeTAField())\n        fields.push(this.homeVillageField())\n        fields.push(this.currentRegionField())\n        fields.push(this.currentDistrictField())\n        fields.push(this.currentTAField())\n        fields.push(this.currentVillage())\n        fields = fields.concat(this.landmarkFields())\n        fields.push(this.cellPhoneField())\n        fields.push(this.patientTypeField())\n        fields.push(this.facilityLocationField())\n        fields.push(this.occupationField())\n        fields.push(this.regimentField())\n        fields = fields.concat(this.dateJoinedMilitaryFields())\n        fields.push(this.rankField())\n        fields.push(this.relationshipField())\n        fields.push(this.possibleDuplicatesField())\n        return fields\n    },\n    isEditMode() {\n        return this.editPerson >= 1\n    },\n    hasScannedNationalID() {\n        return this.presets.nationalIDStatus === 'true'\n    },\n    async initEditMode(personId: number) {\n        this.editPerson = personId\n        this.patient = await Store.get('ACTIVE_PATIENT', { patientID: parseInt(`${this.editPerson}`)})\n        const {\n            ancestryDistrict,\n            ancestryTA,\n            ancestryVillage,\n            currentDistrict,\n            currentVillage,\n            currentTA\n        } = this.patient.getAddresses()\n        this.editPersonData = {\n            'given_name': this.patient.getGivenName(),\n            'family_name': this.patient.getFamilyName(),\n            'gender': this.patient.getGender(),\n            'birthdate': this.patient.getBirthdate(),\n            'home_district': ancestryDistrict,\n            'home_traditional_authority': ancestryTA,\n            'home_village': ancestryVillage,\n            'current_district': currentDistrict,\n            'current_village': currentVillage,\n            'current_traditional_authority': currentTA,\n            'cell_phone_number': this.patient.getPhoneNumber(),\n            'landmark': this.patient.getClosestLandmark()\n        }\n        this.presets = this.editPersonData\n        this.skipSummary = true\n        if(this.personAttribute) {\n            this.activeField = this.personAttribute\n            this.fieldComponent = this.activeField\n        }\n    },\n    async onFinish(form: Record<string, Option> | Record<string, null>, computedData: any) {\n        if (!this.isEditMode()) {\n            return this.create(form, computedData)\n        } else {\n            return this.update(computedData)\n        }\n    },\n    async create(_: any, computedData: any) {\n        const person: any = PersonField.resolvePerson(computedData)\n        const attributes: Array<any> = this.resolvePersonAttributes(computedData)\n        const registration: any = new PatientRegistrationService()\n        const patient = new Patientservice((await registration.registerPatient(person, attributes)))\n        const patientID = registration.getPersonID()\n\n        Store.set('ACTIVE_PATIENT', patient) // update patient store\n \n        if(this.presets.nationalIDStatus == \"true\"){ \n            this.patient = patient\n            await this.patient.updateMWNationalId(this.presets.malawiNationalID)\n        }\n\n        if (this.app.onRegisterPatient) {\n            const exit = await this.app.onRegisterPatient(\n                patientID, person, attributes, this.$router, this.$route,\n                computedData\n            )\n            if (exit) return\n        }\n        if (person.relationship === 'Yes') {\n            return this.$router.push(`/guardian/registration/${patientID}`)\n        }\n        await nextTask(patientID, this.$router)\n    },\n    async update(computedData: any) {\n        const person: any = PersonField.resolvePerson(computedData)\n        const update = new PatientRegistrationService()\n\n        update.setPersonID(this.editPerson)\n        await update.updatePerson(person)\n        for(const attr in person) {\n            if (attr in this.editPersonData) {\n                this.editPersonData[attr] = person[attr]\n            }\n        }\n        Store.invalidate('ACTIVE_PATIENT')\n        if(!this.personAttribute) return this.fieldComponent = 'edit_user'\n        this.$router.back()\n    },\n    editConditionCheck(attributes=[] as Array<string>): boolean {\n        if (this.isEditMode() && !attributes.includes(this.activeField)) {\n            return false\n        }\n        return true\n    },\n    async confirmPatient() {\n        // Attempt to assign or reassign a patient's NPID if they dont have a valid one\n        if (this.ddeEnabled && (!this.patient.getDocID() \n            || (this.patient.getDocID() && this.patient.getNationalID().match(/unknown/i)))) {\n                try {\n                    await this.patient.assignNpid()\n                    await this.patient.printNationalID()\n                    await delayPromise(300)\n               } catch (e) {\n                    toastDanger(`Failed to assign new NPID: ${e}`)\n                }\n        }\n        this.$router.push(`/patients/confirm?person_id=${this.patient.getID()}`)\n    },\n    resolvePersonAttributes(form: Record<string, Option> | Record<string, null>) {\n        return Object.values(form)\n                    .filter((d: any) => isPlainObject(d) && 'personAttributes' in d)\n                    .map(({personAttributes}: any) => personAttributes)\n    },\n    async resolveOnRegistrationCallbacks(patientID: number, computedData: any) {\n        for (const i of Object.values(computedData)) {\n            const item: any = i\n            if (typeof item.onRegisterPatient === 'function') {\n                try {\n                    await item.onRegisterPatient(patientID)\n                } catch (e) {\n                    console.error(`${e}`)\n                    toastDanger(`${e}`)\n                }\n            }\n        }\n    },\n    mapToOption(listOptions: Array<string>): Array<Option> {\n        return listOptions.map((item: any) => ({ label: item, value: item }))\n    },\n    hiddenFieldsForScannedNationalID(): Field[] {\n        const d = (val: string | boolean) => ({label: val, value: val})\n        return [\n            {\n                id: 'given_name',\n                helpText: 'First name',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => d(this.presets.given_name),\n                computedValue: () => ({person : this.presets.given_name})\n            },\n            {\n                id: 'family_name',\n                helpText: 'Last name',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => d(this.presets.family_name),\n                computedValue: () => ({person : this.presets.family_name})\n            },\n            {\n                id: 'gender',\n                helpText: 'Gender',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => ({\n                    label: this.presets.gender,\n                    value: this.presets.gender.toLowerCase() === 'male'\n                        ? 'M'\n                        : this.presets.gender.toLowerCase() === 'female'\n                        ? 'F'\n                        : 'N/A'\n                }),\n                computedValue: () => ({person : this.presets.gender})\n            },\n            {\n                id: 'scanned_birthdate',\n                helpText: 'Birth date',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => d(this.presets.birthdate),\n                computedValue: () => ({\n                    person : {\n                        'birthdate': this.presets.birthdate,\n                        'birthdate_estimated': false\n                    }\n                })\n            },\n            {\n                id: 'scanned_national_id',\n                helpText: 'Scanned National ID',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => d(this.presets.malawiNationalID),\n                computedValue: () => ({\n                    onRegisterPatient : async (patientID: number) => {\n                        const patient = await Patientservice.findByID(patientID)\n                        this.patient = new Patientservice(patient)\n                        this.patient.updateMWNationalId(this.presets.malawiNationalID)\n                    }\n                })\n            }\n        ]\n    },\n    givenNameField(): Field {\n        const name: Field = PersonField.getGivenNameField()\n        name.condition = () => this.editConditionCheck(['given_name'])\n        name.defaultValue = () => this.presets.given_name\n        return name\n    },\n    familyNameField(): Field {\n        const name: Field = PersonField.getFamilyNameField()\n        name.condition = () => this.editConditionCheck(['family_name'])\n        name.defaultValue = () => this.presets.family_name\n        return name\n    },\n    genderField(): Field {\n        const IS_ANC_APP = this.app.applicationName === 'ANC'\n        const IS_CXCA = this.app.applicationName === 'CxCa'\n        const gender: Field = PersonField.getGenderField()\n        gender.requireNext = this.isEditMode()\n        gender.defaultValue = () => this.presets.gender\n        gender.condition = () => {\n            if (!this.isEditMode() && (IS_ANC_APP || IS_CXCA)) {\n                return false\n            }\n            return this.editConditionCheck(['gender'])\n        }\n        if ((IS_ANC_APP || IS_CXCA) && !this.isEditMode()) {\n            gender.defaultOutput = () => ({ label: 'Female', value: 'F' })\n            gender.defaultComputedOutput = () => ({ person: 'F' })\n        } \n\n        gender.beforeNext = async (data: Option) => {\n            /**\n             * Provide warning when changing gender in edit mode\n            */\n            const newGender = data.value\n            const oldGender = this.presets.gender\n            if (this.isEditMode() && newGender != oldGender) {\n                const action = await infoActionSheet(\n                    'Warning',\n                    `Changing gender from ${oldGender} to ${newGender}`,\n                    \"This change will cause data inconsistency and will affect alot of Reports.\",\n                    [\n                        {\n                            name: 'Cancel', slot: 'start'\n                        },\n                        {\n                            name: 'Change gender', slot: 'end', color: 'danger'\n                        }\n                    ]\n                )\n                return action === 'Change gender'\n            }\n            return true\n        }\n        return gender\n    },\n    dobFields(): Array<Field> {\n        const dobConfig = PersonField.getDobConfig()\n        dobConfig.defaultValue = () => this.presets.birthdate\n        dobConfig.condition = () => this.editConditionCheck([\n            'year_birth_date', 'month_birth_date', 'day_birth_date'\n        ])\n        // ANC validation to ensure that we are not registering\n        // Non child bearing youngsters\n        if (this.app.applicationName === 'ANC') {\n            const sdate = Patientservice.getSessionDate()\n            const childBearingAgeInYrs = 12\n            dobConfig.maxDate = () => dayjs(sdate)\n                .subtract(childBearingAgeInYrs, 'years')\n                .format(STANDARD_DATE_FORMAT)\n        }\n        return generateDateFields(dobConfig)\n    },\n    homeRegionField(): Field {\n        const region: Field = PersonField.getHomeRegionField()\n        region.condition = () => this.editConditionCheck(this.homeAddressAttributes)\n        return region\n    },\n    homeDistrictField(): Field {\n        const district: Field = PersonField.getHomeDistrictField()\n        district.condition = () => this.editConditionCheck(this.homeAddressAttributes)\n        return district\n    },\n    homeTAField(): Field {\n        const homeTA: Field = PersonField.getHomeTaField()\n        homeTA.condition = (form: any) => this.editConditionCheck(this.homeAddressAttributes)\n            && !form.home_region.label.match(/foreign/i)\n        return homeTA\n    },\n    homeVillageField(): Field {\n        const homeVillage: Field = PersonField.getHomeVillageField()\n        homeVillage.condition = (form: any) => this.editConditionCheck(this.homeAddressAttributes)\n            && !form.home_region.label.match(/foreign/i)\n        return homeVillage\n    },\n    currentRegionField(): Field {\n        const currentRegion: Field = PersonField.getCurrentRegionField()\n        currentRegion.summaryMapValue = (v: Option, f: any, computedData: any) => {\n            if (/use home/i.test(`${v.value}`)) {\n                return [\n                    { label: 'Current region', value: computedData.person?.current_region},\n                    { label: 'Current District/Country', value: computedData.person?.current_district },\n                    { label: 'Current Traditional Authority', value: computedData.person?.current_traditional_authority },\n                    { label: 'Current village', value: computedData.person?.current_village}\n                ]\n            }\n            return { label: 'Current Region', value: v.label }\n        }\n        if (this.isEditMode()) {\n            currentRegion.computedValue = (val: Option) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_district': this.editPersonData.home_district,\n                            'current_traditional_authority': this.editPersonData.home_traditional_authority,\n                            'current_village': this.editPersonData.home_village\n                        }\n                    }\n                }\n            }\n        }\n        currentRegion.condition = () => this.editConditionCheck(this.currentAddressAttributes)\n        return currentRegion\n    },\n    currentDistrictField(): Field {\n        const currentDistrict: Field = PersonField.getCurrentDistrictField()\n        currentDistrict.condition = (f: any) => !/use home/i.test(f.current_region.label) &&\n             this.editConditionCheck(this.currentAddressAttributes)\n        return currentDistrict\n    },\n    currentTAField(): Field {\n        const currentTA: Field = PersonField.getCurrentTAfield()\n        currentTA.condition = (form: any) => this.editConditionCheck(this.currentAddressAttributes)\n            && !form.current_region.label.match(/foreign|use home/i)\n        return currentTA\n    },\n    currentVillage(): Field {\n        const currentVillage: Field = PersonField.getCurrentVillageField()\n        currentVillage.condition = (form: any) => this.editConditionCheck(this.currentAddressAttributes)\n            && !form.current_region.label.match(/foreign|use home/i)\n        return currentVillage\n    },\n    cellPhoneField(): Field {\n        const cellPhone: Field = PersonField.getCellNumberField()\n        cellPhone.condition = () => this.editConditionCheck(['cell_phone_number'])\n        cellPhone.defaultValue = () => this.presets.cell_phone_number\n        return cellPhone\n    },\n    facilityLocationField(): Field {\n       const facility: Field = PersonField.getFacilityLocationField()\n       facility.condition = (form: any) => [\n           'Drug Refill',\n           'External consultation'\n       ].includes(form.patient_type.value)\n       return facility\n    },\n    landmarkFields(): Field[] {\n        const landmarks: Field[] = PersonField.getLandmarkFields()\n        landmarks[0].condition = () => this.editConditionCheck(['default_landmarks'])\n        return landmarks\n    },\n    patientTypeField(): Field {\n        return {\n            id: 'patient_type',\n            helpText: 'Type of patient',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['patient_type'])\n                && this.app.applicationName === 'ART',\n            validation: (val: any) => Validation.required(val),\n            options: () => PatientTypeService.getPatientTypes()\n        }\n    },\n    occupationField(): Field {\n        return {\n            id: 'occupation',\n            helpText: 'Occupation',\n            type: FieldType.TT_SELECT,\n            init: async () => {\n               this.isMilitarySite = await GLOBAL_PROP.militarySiteEnabled()\n               return true \n            },\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['occupation']) && this.isMilitarySite,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.mapToOption([\n                'Military',\n                'Civilian'\n            ])\n        }\n    },\n    regimentField(): Field {\n        return {\n            id: 'person_regiment_id',\n            helpText: 'Regiment ID',\n            type: FieldType.TT_TEXT,\n            computedValue: ({value}: Option) => ({\n                personAttributes: {\n                    'person_attribute_type_id': 35,\n                    'value': value\n                }\n            }),\n            condition: (form: any) => this.editConditionCheck(['person_regiment_id']) && form.occupation && form.occupation.value.match(/Military/i),\n            validation: (val: any) => Validation.required(val)\n        }\n    },\n    rankField(): Field {\n        return {\n            id: 'rank',\n            helpText: 'Rank',\n            type: FieldType.TT_SELECT,\n            validation: (val: any) => Validation.required(val),\n            computedValue: ({value}: Option) => ({\n                personAttributes: {\n                    'person_attribute_type_id': 36,\n                    'value': value\n                }\n            }),\n            condition: (form: any) => this.editConditionCheck(['rank']) && form.occupation && form.occupation.value.match(/Military/i),\n            options: () => this.mapToOption([\n                'First Lieutenant',\n                'Captain',\n                'Major',\n                'Lieutenant Colonel',\n                'Colonel',\n                'Brigadier General',\n                'Lieutenant General',\n                'General',\n                'Private',\n                'Corporal',\n                'Lance Corporal',\n                'Seargent',\n                'Staff Seargent',\n                'Warrant Officer class 1',\n                'Warrant Officer class 2'\n            ])\n        }\n    },\n    dateJoinedMilitaryFields(): Array<Field> {\n        return generateDateFields({\n            id: 'person_date_joined_military',\n            helpText: 'Joined Military',\n            required: true,\n            condition: (form: any) =>  this.editConditionCheck([\n                'year_person_date_joined_military',\n                'month_person_date_joined_military',\n                'day_person_date_joined_military'\n            ]) && form.occupation && form.occupation.value.match(/Military/i),\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => WorkflowService.getSessionDate(),\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => ({\n                date,\n                personAttributes : {\n                    'person_attribute_type_id': 37, 'value': date\n                }\n            })\n        })\n    },\n    relationshipField(): Field {\n        const IS_HTS = this.app.applicationName === 'ITS'\n        const IS_CXCA = this.app.applicationName === 'CxCa'\n        const OPD = this.app.applicationName === 'OPD'\n        const Registration = this.app.applicationName === 'Registration'\n        return {\n            id: 'relationship',\n            helpText: 'Register guardian?',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['relationship']) && !IS_CXCA && !OPD && !Registration && !IS_HTS,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.mapToOption(['Yes', 'No'])\n        }\n    },\n    searchResultField(): Field {\n        return {\n            id: 'results',\n            helpText: 'Search results',\n            type: FieldType.TT_PERSON_RESULT_VIEW,\n            init: async () => {\n                if (!this.isEditMode()) { \n                    this.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n                }\n                return true\n            },\n            dynamicHelpText: (form: any) => {\n                return `Search results for \"${form.given_name.value} ${form.family_name.value} | ${form.gender.label}\"`;\n            },\n            appearInSummary: () => false,\n            condition: () => !this.isEditMode(),\n            options: async (form: any) => {\n                const payload = {\n                    'given_name': form.given_name.value,\n                    'family_name': form.family_name.value,\n                    'gender': form.gender.value\n                }\n                // DDE enabled search\n                if (this.ddeEnabled) {\n                    const patients = await this.ddeInstance.searchDemographics(payload)\n                    return patients.map((item: any) => {\n                        const itemData = PersonField.getPersonAttributeOptions(item)\n                        itemData.other.options.push({\n                            label: 'Patient Type',\n                            value: item.patient_type\n                        })\n                        itemData.other.options.push({\n                            label: 'Doc ID',\n                            value: item.doc_id\n                        })\n                        return itemData\n                    })\n                }\n                // Regular search\n                const patients = await Patientservice.search(payload);\n                return patients.map((item: any) => PersonField.getPersonAttributeOptions(item))\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Edit Search',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldComponent = 'given_name'\n                        },\n                        state: {\n                            disabled: {\n                                default: () => this.hasScannedNationalID()\n                            }\n                        }\n                        \n                    },\n                    {\n                        name: 'New Client',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldComponent = '_NEXT_FIELD_'\n                        }\n                    },\n                    {\n                        name: 'Continue',\n                        color: 'success',\n                        slot: 'end',\n                        state: {\n                            disabled: {\n                                default: () => true,\n                                onValue(_: any,form: any) {\n                                    return isEmpty(form.results)\n                                }\n                            }\n                        },\n                        onClick: (form: any) => {\n                            return this.$router.push(`/patients/confirm?person_id=${form.results.value}`)\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    possibleDuplicatesField(): Field {\n        let createdPerson: any = {}\n        let duplicatePatients: any = {}\n        return {\n            id: 'possible_duplicates',\n            helpText: 'Possible Duplicate(s)',\n            type: FieldType.TT_PERSON_MATCH_VIEW,\n            condition: async (_: any, c: any) => {\n                if (this.ddeEnabled && this.editPerson <= 0) {\n                    createdPerson = PersonField.resolvePerson(c)\n                    duplicatePatients = await this.ddeInstance\n                        .checkPotentialDuplicates(createdPerson)\n                    return duplicatePatients.length >= 1\n                }\n                return false\n            },\n            options: async () => {\n                const toDate = (date: string) => HisDate.toStandardHisDisplayFormat(date)\n                return duplicatePatients.map(({ score, person }: any) => {\n                    const name = `${person.given_name} ${person.family_name}`\n                    return {\n                        label: name,\n                        value: person.patient_id,\n                        other: {\n                            score: `${score * 100}%`,\n                            newPerson: createdPerson,\n                            foundPerson: person,\n                            comparisons: [\n                                [\n                                    'Name',\n                                    `${createdPerson.given_name} ${createdPerson.family_name}`,\n                                    `${person.given_name} ${person.family_name}`\n                                ],\n                                [\n                                    'Gender',\n                                    createdPerson.gender,\n                                    person.gender\n                                ],\n                                [\n                                    'Birthdate',\n                                    toDate(createdPerson.birthdate),\n                                    toDate(person.birthdate)\n                                ],\n                                [\n                                    'Home District',\n                                    createdPerson.home_district,\n                                    person.home_district\n                                ],\n                                [\n                                    'Home TA',\n                                    createdPerson.home_traditional_authority,\n                                    person.home_traditional_authority\n                                ]\n                            ]\n                        }\n                    }\n                })\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Not Duplicate',\n                        slot: 'start',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onValue: (_: any, f: any) => !isEmpty(f.possible_duplicates)\n                            }\n                        },\n                        onClick: () => {\n                            this.fieldComponent = '_NEXT_FIELD_'\n                        }\n                    },\n                    {\n                        name: 'Confirm',\n                        slot: 'end',\n                        color: 'warning',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onValue: (_: any, f: any) => !isEmpty(f.possible_duplicates)\n                            }\n                        },\n                        onClick: (form: any) => {\n                            this.$router.push(`/patients/confirm?person_id=${form.possible_duplicates.value}`)\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    personIndexField(): Field {\n        return {\n            id: 'edit_user',\n            helpText: 'Edit Demographics',\n            type: FieldType.TT_TABLE_VIEWER,\n            init: async () => {\n                if (this.isEditMode()) {\n                    this.formLabel = 'View / Edit'\n                    this.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n                }\n                return true\n            },\n            condition: () => this.isEditMode(),\n            options: async () => {\n                const editButton = (attribute: string) => ({\n                    name: 'Edit',\n                    type: 'button',\n                    action: () => {\n                        this.activeField = attribute\n                        this.fieldComponent = this.activeField\n                    }\n                })\n                const columns = ['Attributes', 'Values', 'Edit']\n                const rows = [\n                    ['Given Name', this.editPersonData.given_name, editButton('given_name')],\n                    ['Family Name', this.editPersonData.family_name, editButton('family_name')],\n                    ['Gender', this.editPersonData.gender,  editButton('gender')],\n                    ['Birthdate', HisDate.toStandardHisDisplayFormat(this.editPersonData.birthdate),  editButton('year_birth_date')],\n                    ['Cell Phone Number', this.editPersonData.cell_phone_number, editButton('cell_phone_number')],\n                    ['Home District', this.editPersonData.home_district, editButton('home_region')],\n                    ['Home TA', this.editPersonData.home_traditional_authority,  editButton('home_region')],\n                    ['Home Village', this.editPersonData.home_village,  editButton('home_region')],\n                    ['Current district',this.editPersonData.current_district, editButton('current_region')],\n                    ['Current Village',this.editPersonData.current_village, editButton('current_region')],\n                    ['Current T/A', this.editPersonData.current_traditional_authority, editButton('current_region')],\n                    ['Landmark', this.editPersonData.landmark, editButton('default_landmarks')],\n                ]\n                // Tag rows with empty values\n                const emptySets: any = {indexes: [], class: 'his-empty-set-color'}\n                rows.forEach((r: any, i: number) => {\n                    if (isValueEmpty(r[1])) \n                        emptySets.indexes.push(i)\n                })\n                this.hasIncompleteData = emptySets.indexes.length >= 1\n                return [{\n                    label: '', \n                    value: '',\n                    other: {\n                        rows,\n                        columns,\n                        rowColors: [emptySets]\n                    }\n                }]\n            },\n            config: {\n                footerBtns: [\n                    /**\n                     * Custom button that Appears when DDE wants to\n                     * Reassign a patient with incomplete data\n                    */\n                    {\n                        name: 'Reassign',\n                        slot: 'end',\n                        color: 'success',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onload: () => (\n                                    this.ddeEnabled\n                                    && this.ddeIsReassign\n                                    && !this.hasIncompleteData\n                                )\n                            }\n                        },\n                        onClick: async () => {\n                            try {\n                                await this.ddeInstance.reassignNpid(this.ddeDocID, this.editPerson)\n                                await this.ddeInstance.printNpid()\n                                this.$router.push(`/patients/confirm?person_id=${this.editPerson}`)\n                            } catch(e) {\n                                toastWarning(`${e}`)\n                            }\n                        }\n                    },\n                    /**\n                     * Custom button that redirects to patient confirmation page\n                     */\n                    {\n                        name: 'Confirm',\n                        slot: 'end',\n                        color: 'warning',\n                        state: {\n                            visible: {\n                                onload: () => !this.ddeIsReassign && !this.hasIncompleteData\n                            }\n                        },\n                        onClick: async () => this.confirmPatient()\n                    }\n                ],\n                hiddenFooterBtns: ['Clear', 'Next']\n            }\n        }\n    }\n  }\n})\n","import { render } from \"./PatientRegistration.vue?vue&type=template&id=93ab5484&ts=true\"\nimport script from \"./PatientRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./PatientRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Person } from \"@/interfaces/person\"\nimport { Service } from \"./service\"\n\nexport interface NewPerson {\n    person_id?: number;\n    given_name: string;\n    family_name: string;\n    gender: string;\n    birthdate: string;\n    birthdate_estimated: boolean;\n    home_district: string;\n    home_traditional_authority: string;\n    home_village: string;\n    current_district: string;\n    current_traditional_authority: string;\n    current_village: string;\n    landmark: string;\n    cell_phone_number: string;\n    occupation: string;\n    facility_name: string;\n    patient_type?: string;\n    relationship?: string;\n}\n\nexport class PersonService extends Service{\n    person: Person | NewPerson\n    constructor(person: NewPerson | Person){\n        super()\n        this.person = person\n    }\n\n    create() { return Service.postJson('/people', this.person) }\n\n    update(id: number) { return Service.putJson(`people/${id}`, {\n        ...this.person, 'program_id': Service.getProgramID()\n    })}\n\n    static searchFamilyName(name: string) {\n        return super.getJson('/search/family_name', {'search_string': name})\n    }\n\n    static searchGivenName(name: string) {\n        return super.getJson('/search/given_name', {'search_string': name})\n    }\n\n    static async getPersonFullName(personId: string | number) {\n        const names = await super.getJson(`/people/${personId}/names`)\n        return names && names.length ? names[0].given_name + ' ' + names[0].family_name : ''\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}