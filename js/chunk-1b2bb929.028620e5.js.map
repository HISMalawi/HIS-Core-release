{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/OPD/views/encounters/Registration.vue"],"names":["DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","PatientVisitRegistrationService","AppEncounterService","constructor","patientID","providerID","MALAWI_NATIONAL_ID_TYPE","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","registrationService","watch","ready","isReady","this","patient","getID","getFields","immediate","deep","methods","formData","computedData","asignNID","encounter","createEncounter","toastWarning","registrationData","resolveObs","registrationObs","saveObservationList","nextTask","nidAvailable","nid","value","updateMWNationalId","people","Patientservice","findByOtherID","length","id","helpText","type","FieldType","TT_SELECT","validation","Validation","required","computedValue","v","obs","buildValueCoded","options","label","buildValueText","condition","visit_type","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","getMWNationalID","yesNoUnknownOptions","appearInSummary","TT_TEXT","isMWNationalID","national_id_available","beforeNext","async","field","mwIdExists","toString","summaryMapValue","casing","customKeyboard","isChildBearing","__exports__","facilities","LocationService","name","f","isEmpty","map","facility","location_id","other","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-1b2bb929.028620e5.js","sourcesContent":["import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f))\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientVisitRegistrationService } from \"@/apps/OPD/services/patient_registration_service\"\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { toastWarning } from '@/utils/Alerts';\nimport { Patientservice } from '@/services/patient_service';\nimport { MALAWI_NATIONAL_ID_TYPE } from '@/constants';\nimport { CHARACTERS_AND_NUMBERS_LO, NOTE_PAD_KEYBOARD } from '@/components/Keyboard/KbLayouts';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        registrationService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.registrationService = new PatientVisitRegistrationService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            await this.asignNID(formData)\n            const encounter = await this.registrationService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create registration encounter')\n            \n            const registrationData = await this.resolveObs({...computedData})\n            const registrationObs = await this.registrationService.saveObservationList(registrationData)\n            if (!registrationObs) return toastWarning('Unable to save observations')\n\n            this.nextTask()        \n        },\n        async asignNID(formData: any) {\n            const nidAvailable = formData['national_id_available']\n            const nid = formData['national_id']\n            if(nidAvailable && nidAvailable.value === 'Yes') {\n                await this.patient.updateMWNationalId(nid.value)\n            }\n        },\n        async mwIdExists(nid: string) {\n            if(!nid) return false\n            const people = await Patientservice.findByOtherID(MALAWI_NATIONAL_ID_TYPE, nid)\n            return people.length > 0\n        },\n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'visit_type',\n                    helpText: 'Type of visit',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: (v: Option) => ({ obs: this.registrationService.buildValueCoded('Type of visit', v.value)}),\n                    options: () => {\n                        return [\n                            { label: 'New', value: 'New patient' },\n                            { label: 'Referral', value: 'Referral' },\n                            { label: 'Re-visiting', value: 'Re-visiting' },\n                        ]\n                    }\n                },\n                {\n                    id: 'referring_facility_name',\n                    helpText: 'Referred from',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ label }: Option) => ({obs: this.registrationService.buildValueText('Referred from', label)}),\n                    condition: (fields: any) => fields.visit_type.value === 'Referral',\n                    options: (_: any, filter='') => getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                {\n                    id: 'national_id_available',\n                    helpText: 'National ID Available',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    condition: () => this.patient.getMWNationalID() === 'Unknown',\n                    options: () => this.yesNoUnknownOptions(),\n                    appearInSummary: () => false\n                },\n                {\n                    id: 'national_id',\n                    helpText: 'Enter National ID',\n                    type: FieldType.TT_TEXT,\n                    validation: (value: Option) => Validation.isMWNationalID(value),\n                    condition: (fields: any) => fields.national_id_available.value === 'Yes',\n                    beforeNext: async (field: Option) => {\n                        if(field.value && (await this.mwIdExists(field.value.toString()))){\n                            toastWarning('National ID already exists')\n                            return false\n                        }\n                        return true\n                    },\n                    summaryMapValue: ({ value }: Option) => ({\n                        value,\n                        label: 'National ID'\n                    }),\n                    config: {\n                        casing: 'uppercase',\n                        customKeyboard: [CHARACTERS_AND_NUMBERS_LO, [['Delete']]],\n                    }\n                },\n                {\n                    id: 'patient_pregnant',\n                    helpText: 'Patient pregnant',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({value}: Option) => ({obs: this.registrationService.buildValueCoded('PATIENT PREGNANT', value)}),\n                    condition: () => this.patient.isChildBearing(),\n                    options: () => this.yesNoUnknownOptions(),\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Registration.vue?vue&type=template&id=0f88b2aa&ts=true\"\nimport script from \"./Registration.vue?vue&type=script&lang=ts\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}