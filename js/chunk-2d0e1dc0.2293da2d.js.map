{"version":3,"sources":["webpack:///./src/views/DuplicateIdentifiers.vue?faa1","webpack:///./src/views/DuplicateIdentifiers.vue","webpack:///./src/views/DuplicateIdentifiers.vue?71d9"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_openBlock","_createBlock","title","period","rows","fields","columns","canExportCsv","canExportPDf","onReportConfiguration","onPeriod","defineComponent","components","ReportTemplate","data","service","dde","table","thTxt","this","getFormFields","PatientDemographicsExchangeService","loadDDEStatus","methods","identifier","idType","parseInt","value","toString","label","IdentifierService","setIdentifierType","getRows","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","async","getIdentifierTypes","map","i","name","patient_identifier_type_id","toDate","date","HisDate","toStandardHisDisplayFormat","modal","modalController","create","component","DrillTable","cssClass","componentProps","onRows","patients","getPatientsByIdentifier","p","patient","Patientservice","getGivenName","getFamilyName","getGender","getBirthdate","action","dismiss","then","$router","push","getID","e","toastDanger","present","getDuplicateIndentifiers","td","count","tdBtn","drillDuplicates","event","disabled","getIdentifierType","__exports__"],"mappings":"yIAEM,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAA6BC,8BAAkB,mBAErD,OAAQC,yBAAcC,yBAAaH,EAA4B,CAC7DI,MAAOV,EAAKU,MACZC,OAAQX,EAAKW,OACbC,KAAMZ,EAAKY,KACXC,OAAQb,EAAKa,OACbC,QAASd,EAAKc,QACdC,cAAc,EACdC,cAAc,EACdC,sBAAuBjB,EAAKkB,UAC3B,KAAM,EAAG,CAAC,QAAS,SAAU,OAAQ,SAAU,UAAW,0B,kJCChDC,+BAAgB,CAC3BC,WAAY,CAAEC,uBACdC,KAAMA,KAAA,CACFC,QAAS,GACTC,IAAK,GACLd,MAAO,wBACPG,OAAQ,GACRD,KAAM,GACNE,QAAS,CACL,CACIW,OAAMC,MAAM,cACZD,OAAMC,MAAM,SACZD,OAAMC,MAAM,QACZD,OAAMC,MAAM,eAIxB,gBACIC,KAAKd,OAASc,KAAKC,gBACnBD,KAAKH,IAAM,IAAIK,aACTF,KAAKH,IAAIM,iBAEnBC,QAAS,CACL,gBAAe,WAACC,IACZ,MAAMC,EAASC,SAASF,EAAWG,MAAMC,YACzCT,KAAKjB,MAAQsB,EAAWK,MAAQ,cAChCV,KAAKJ,QAAU,IAAIe,OACnBX,KAAKJ,QAAQgB,kBAAkBN,GAC/BN,KAAKf,WAAae,KAAKa,WAE3BZ,gBACI,MAAO,CACH,CACIa,GAAI,aACJC,SAAU,yBACVC,KAAMC,OAAUC,UAChBC,WAAaC,GAAgBC,OAAWC,SAASF,GACjDG,QAASC,gBACEb,OAAkBc,sBACpBC,IAAKC,IAAM,CACRjB,MAAOiB,EAAEC,KACTpB,MAAOmB,EAAEE,iCAKjCC,OAAOC,GACH,OAAOC,OAAQC,2BAA2BF,IAE9C,sBAAsB1B,GAClB,MAAM6B,QAAcC,QAAgBC,OAAO,CACvCC,UAAWC,OACXC,SAAU,eACVC,eAAgB,CACZzD,MAAO,4BAA4BsB,EACnClB,QAAS,CACL,aAAc,cAAe,SAAU,aAAc,UAEzDsD,OAAQjB,UACJ,MAAMkB,QAAiB1C,KAAKJ,QAAQ+C,wBAAwBtC,GAC5D,OAAOqC,EAAShB,IAAKkB,IACjB,IACI,MAAMC,EAAU,IAAIC,OAAeF,GACnC,MAAO,CACHC,EAAQE,eACRF,EAAQG,gBACRH,EAAQI,YACRjD,KAAK8B,OAAOe,EAAQK,gBACpB,CACIlC,KAAM,SACNY,KAAM,OACNuB,OAAQA,KACJhB,QAAgBiB,UAAUC,KAAK,KAC3BrD,KAAKsD,QAAQC,KAAK,sBAAsBV,EAAQW,cAKlE,MAAOC,GAEL,OADAC,eAAY,kCACL,CAAC,MAAO,MAAO,MAAO,MAAO,cAMxDxB,EAAMyB,WAEV,gBACI,aAAc3D,KAAKJ,QAAQgE,4BACtBlC,IAAKC,GAAsC,CACxC7B,OAAM+D,GAAGlC,EAAEtB,YACXP,OAAM+D,GAAGlC,EAAEmC,OACXhE,OAAMiE,MAAM,SAAU,IAAM/D,KAAKgE,gBAAgBrC,EAAEtB,aACnDP,OAAMiE,MAAM,UAAW,KACnB/D,KAAKsD,QAAQC,KAAK,oBAAoB5B,EAAEtB,aACzC,CACC4D,MAAO,CACHC,SAA8C,GAApClE,KAAKJ,QAAQuE,sBAE5B,gB,qBC9GvB,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAShG,KAErD","file":"js/chunk-2d0e1dc0.2293da2d.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_report_template = _resolveComponent(\"report-template\")!\n\n  return (_openBlock(), _createBlock(_component_report_template, {\n    title: _ctx.title,\n    period: _ctx.period,\n    rows: _ctx.rows,\n    fields: _ctx.fields,\n    columns: _ctx.columns,\n    canExportCsv: false,\n    canExportPDf: false,\n    onReportConfiguration: _ctx.onPeriod\n  }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"onReportConfiguration\"]))\n}","\nimport { defineComponent } from 'vue'\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport { FieldType } from '@/components/Forms/BaseFormElements'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { Option } from '@/components/Forms/FieldInterface'\nimport table, { RowInterface } from \"@/components/DataViews/tables/ReportDataTable\"\nimport { IdentifierService, DuplicateIdentifiersInterface } from \"@/services/identifier_service\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport DrillTable from \"@/components/DataViews/DrillTableModal.vue\"\nimport { modalController } from \"@ionic/vue\";\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport {PatientDemographicsExchangeService} from \"@/services/patient_demographics_exchange_service\"\nimport { toastDanger } from '@/utils/Alerts'\nexport default defineComponent({\n    components: { ReportTemplate },\n    data: () => ({\n        service: {} as any,\n        dde: {} as any,\n        title: 'Duplicate Identifiers',\n        fields: [] as Field[],\n        rows: [] as Array<RowInterface[]>,\n        columns: [\n            [\n                table.thTxt('Identifier'), \n                table.thTxt('Count'), \n                table.thTxt('View'),\n                table.thTxt('Resolve')\n            ]\n        ]\n    }),\n    async created() {\n        this.fields = this.getFormFields()\n        this.dde = new PatientDemographicsExchangeService()\n        await this.dde.loadDDEStatus()\n    },\n    methods: {\n        async onPeriod({identifier}: any) {\n            const idType = parseInt(identifier.value.toString())\n            this.title = identifier.label + ' Duplicates'\n            this.service = new IdentifierService()\n            this.service.setIdentifierType(idType)\n            this.rows = await this.getRows()\n        },\n        getFormFields(): Array<Field> {\n            return [\n                {\n                    id: 'identifier',\n                    helpText: 'Select Identifier type',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => \n                        (await IdentifierService.getIdentifierTypes())\n                            .map((i: any) => ({\n                                label: i.name,\n                                value: i.patient_identifier_type_id\n                            }))\n                }\n            ]\n        },\n        toDate(date: string | Date) {\n            return HisDate.toStandardHisDisplayFormat(date)\n        },\n        async drillDuplicates(identifier: string){\n            const modal = await modalController.create({\n                component: DrillTable,\n                cssClass: 'custom-modal',\n                componentProps: {\n                    title: `Persons using identifier ${identifier}`,\n                    columns: [\n                        'Given name', 'Family name', 'Gender', 'Birth date', 'Action'\n                    ],\n                    onRows: async () => {\n                        const patients = await this.service.getPatientsByIdentifier(identifier)\n                        return patients.map((p: any) => {\n                            try {\n                                const patient = new Patientservice(p)\n                                return [\n                                    patient.getGivenName(),\n                                    patient.getFamilyName(),\n                                    patient.getGender(),\n                                    this.toDate(patient.getBirthdate()),\n                                    {\n                                        type: 'button',\n                                        name: 'View',\n                                        action: () => {\n                                            modalController.dismiss().then(() => {\n                                                this.$router.push(`/patient/dashboard/${patient.getID()}`)\n                                            })\n                                        }\n                                    }\n                                ]\n                            } catch (e) {\n                                toastDanger('Unable to load patient details')\n                                return ['N/A', 'N/A', 'N/A', 'N/A', 'N/A']\n                            }\n                        })\n                    }\n                }\n            })\n            modal.present()\n        },\n        async getRows() {\n            return (await this.service.getDuplicateIndentifiers())\n                .map((i: DuplicateIdentifiersInterface) => ([\n                    table.td(i.identifier),\n                    table.td(i.count),\n                    table.tdBtn('Select', () => this.drillDuplicates(i.identifier)),\n                    table.tdBtn('Resolve', () => {\n                        this.$router.push(`/npid/duplicates/${i.identifier}`)\n                    }, {\n                        event: {\n                            disabled: this.service.getIdentifierType() != 3\n                        }\n                    }, 'danger')\n                ]))\n        }\n    }\n})\n","import { render } from \"./DuplicateIdentifiers.vue?vue&type=template&id=5c350c67&ts=true\"\nimport script from \"./DuplicateIdentifiers.vue?vue&type=script&lang=ts\"\nexport * from \"./DuplicateIdentifiers.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}