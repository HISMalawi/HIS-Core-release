{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/reports/moh/MohDisaggregatedReport.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","title","period","rows","columns","headerInfoList","headerList","reportPrefix","config","showIndex","validationErrors","errors","showValidationStatus","canValidate","hasServerSideCaching","enabledPDFHorizontalPageBreak","onReportConfiguration","onPeriod","onDefaultConfiguration","onLoadDefault","_","defineComponent","mixins","ReportMixin","components","ReportTemplate","IonPage","data","table","thTxt","thNum","REGIMENS","map","r","showStatus","rowDataRefs","dataRefLabels","aggregations","mohCohort","maleFemaleAgeGroupData","sortIndexes","query","this","$route","start_date","end_date","quarter","label","other","start","end","watch","doIt","validateReport","computed","Object","keys","sort","a","b","parseInt","reduce","i","concat","methods","form","rebuildCache","report","DisaggregatedReportService","MohCohortReportService","setQuarter","setStartDate","setEndDate","getDateIntervalPeriod","setRebuildOutcome","isInit","init","toastWarning","setTableRows","setFemaleRows","setMaleRows","setTotalMalesRow","setFemalePregnantRows","setFemaleBreastFeedingRows","setFemaleNotPregnantRows","getColumnLabel","col","getTotals","compareFunction","filter","accum","cur","addAggregation","gender","push","group","totals","row","distribution","getRegimenDistribution","refs","forEach","drill","getValue","prop","getTxIpt","getTxCurrTB","sortIndex","maleTD","column","columnDescription","columnName","td","isPregnant","patientID","match","includes","fnpTD","setGender","setRows","AGE_GROUPS","category","ageGroups","otherAgeGroup","txNew","txCurr","txGivenIpt","txScreenTB","setAgeGroup","cohort","getCohort","isEmpty","value","async","getGender","getRegimenRows","setHeaderInfoList","totalAlive","length","onclick","runTableDrill","validations","param","check","p","error","s","validateIndicators","__exports__","ArtReportService","constructor","ageGroup","initialize","rebuildOutcome","req","temp_disaggregated","setInitialization","isRebuild","getReport","PatientReportService","getBookedAppointments","date","getJson","programID","getViralLoadResults","range","getOtherOutcome","outcome","getPatientVisitTypes","getClientsDueForVl","getClientRentention","getExternalConsultationClients","getMissedAppointments","getPregnantWomen","getArchivingCandidates","CohortVar","super","regenerate","cohortUrl","setRegenerate","getCohortDrillDown","resourceId","id","requestCohort","params","ajxGet","qaurterRequestParams","name","datePeriodRequestParams","startDate","endDate","getCachedCohortValues","cache","sessionStorage","getItem","MOH_CACHE","conf","JSON","parse","cacheCohort","values","setItem","stringify","callback","cachedValues","key","indicator","find","validation","indicatorValue","contents","condition"],"mappings":"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","file":"js/chunk-46bff48c.493d9ad8.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_report_template = _resolveComponent(\"report-template\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_report_template, {\n        title: _ctx.title,\n        period: _ctx.period,\n        rows: _ctx.rows,\n        columns: _ctx.columns,\n        headerInfoList: _ctx.headerList,\n        reportPrefix: \"MoH\",\n        config: {\n                showIndex: true\n            },\n        validationErrors: _ctx.errors,\n        showValidationStatus: _ctx.canValidate,\n        hasServerSideCaching: true,\n        enabledPDFHorizontalPageBreak: true,\n        onReportConfiguration: _ctx.onPeriod,\n        onDefaultConfiguration: _ctx.onLoadDefault\n      }, null, 8, [\"title\", \"period\", \"rows\", \"columns\", \"headerInfoList\", \"validationErrors\", \"showValidationStatus\", \"onReportConfiguration\", \"onDefaultConfiguration\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport { DisaggregatedReportService } from \"@/apps/ART/services/reports/disaggregated_service\"\nimport { REGIMENS } from \"@/apps/ART/services/reports/regimen_report_service\"\nimport { toastWarning } from '@/utils/Alerts'\nimport { isEmpty } from \"lodash\"\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { IonPage } from \"@ionic/vue\"\nimport { MohCohortReportService } from \"@/apps/ART/services/reports/moh_cohort_service\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { AGE_GROUPS } from \"@/apps/ART/services/reports/patient_report_service\"\n\nexport default defineComponent({\n    mixins: [ReportMixin],\n    components: { ReportTemplate, IonPage },\n    data: () => ({\n        title: 'Disaggregated report',\n        columns: [\n            [\n                table.thTxt('Age group'),\n                table.thTxt('Gender'),\n                table.thNum('Tx new (new on ART)'),\n                table.thNum('TX curr (receiving ART)'),\n                table.thNum('TX curr (received IPT)'),\n                table.thNum('TX curr (screened for TB)'),\n                ...(REGIMENS.map(r => table.thNum(r))),\n                table.thNum('Unknown'),\n                table.thNum('Total (regimen)')\n            ]\n        ],\n        errors: [] as string[],\n        showStatus: false as boolean,\n        rowDataRefs: [\n            'txNew', \n            'txCurr', \n            'txGivenIpt', \n            'txScreenTB', \n            ...REGIMENS,\n            'N/A', \n            'regimenTotals'\n        ],\n        dataRefLabels: {\n           'txNew': 'Tx new (new on ART)',\n           'txCurr': 'Tx curr (receiving ART)',\n           'txGivenIpt': 'TX curr (received IPT)',\n           'txScreenTB': 'TX curr (screened for TB)',\n           'N/A': 'Unknown',\n           'regimenTotals': 'Regimen Totals'\n        } as any,\n        aggregations: [] as any,\n        mohCohort: {} as any,\n        maleFemaleAgeGroupData: {} as any,\n        headerList: [] as Array<Option>,\n        canValidate: false as boolean,\n        onLoadDefault: null as any,\n        sortIndexes: {} as Record<string | number, Array<any>>\n    }),\n    async created() {\n        const { query }  = this.$route\n        /** Check for default url params for this report */\n        if (query.start_date && query.end_date && query.quarter) {\n            this.onLoadDefault = () =>\n                this.onPeriod({\n                    quarter: {\n                        label: query.quarter,\n                        other: {\n                            start: query.start_date,\n                            end: query.end_date\n                        }\n                    }\n                },{})\n        }\n    },\n    watch: {\n        async canValidate(doIt: boolean) {\n            if (doIt) await this.validateReport()\n        }\n    },\n    computed: {\n        rows(): any {\n            return Object.keys(this.sortIndexes)\n                .sort((a, b) => parseInt(a) - parseInt(b))\n                .reduce((r: any, i: any) => r.concat(this.sortIndexes[i]), [])\n        }\n    },\n    methods: {\n        async onPeriod(form: any, config: any, rebuildCache=false) {\n            this.canValidate = false\n            this.maleFemaleAgeGroupData = {}\n            this.aggregations = []\n            this.sortIndexes = {}\n            this.errors = []\n            this.report = new DisaggregatedReportService()\n            this.mohCohort = new MohCohortReportService()\n            if (form.quarter) {\n                this.mohCohort.setQuarter(form.quarter.label)\n                this.mohCohort.setStartDate(form.quarter.other.start)\n                this.mohCohort.setEndDate(form.quarter.other.end)\n                this.report.setQuarter(form.quarter.label)\n                this.report.setStartDate(form.quarter.other.start)\n                this.report.setEndDate(form.quarter.other.end)\n                this.period = form.quarter.label === 'Custom'\n                    ? this.report.getDateIntervalPeriod()\n                    : form.quarter.label\n            } else {\n                this.mohCohort.setStartDate(config.start_date)\n                this.mohCohort.setEndDate(config.end_date)\n                this.report.setStartDate(config.start_date)\n                this.report.setEndDate(config.end_date)\n                this.period = this.report.getDateIntervalPeriod()\n            }\n            this.report.setRebuildOutcome(rebuildCache)\n            const isInit = await this.report.init()\n            if (!isInit) {\n                return toastWarning('Unable to initialise report')\n            }\n            await this.setTableRows()\n            this.canValidate = true\n        },\n        async setTableRows() {\n            await this.setFemaleRows(1)\n            await this.setMaleRows(2)\n            await this.setTotalMalesRow(3)\n            await this.setFemalePregnantRows(4)\n            await this.setFemaleBreastFeedingRows(6)\n            await this.setFemaleNotPregnantRows(5)\n        },\n        getColumnLabel(col: string) {\n            return col in this.dataRefLabels ? this.dataRefLabels[col] : col\n        },\n        getTotals(compareFunction: Function){\n            return this.aggregations\n                .filter((i: any) => compareFunction(i))\n                .reduce((accum: any, cur: any) => accum.concat(cur.data), [])\n        },\n        addAggregation(col: string, gender: string, data = []) {\n            this.aggregations.push({ col, gender, data })\n        },\n        async getRegimenRows(group: string, gender: string) {\n            let totals: any = []\n            const row: any = []\n            const distribution = await this.report.getRegimenDistribution()\n            const refs = [...REGIMENS, 'N/A']\n            refs.forEach((i: any) => {\n                if (distribution[i]) totals = totals.concat(distribution[i])\n                row.push(this.drill(distribution[i], `Regimen ${i} | ${group} | ${gender}`))\n                this.addAggregation(i, gender, distribution[i])\n            })\n            row.push(this.drill(totals, `Regimen Totals | ${group} | ${gender}`))\n            this.addAggregation('regimenTotals', gender, totals)\n            return row\n        },\n        getValue(prop: string, gender: string, data: any) {\n            switch(prop) {\n                case 'tx_given_ipt':\n                    return this.report.getTxIpt()\n                case 'tx_screened_for_tb':\n                    return this.report.getTxCurrTB()\n                default:\n                    return gender in data ? data[gender][prop] : []\n            }\n        },\n        setTotalMalesRow(sortIndex: number) {\n            const maleTD = (column: string, columnDescription: string) => {\n                const data = this.aggregations.filter((a: any) => a.gender === 'Male' && a.col === column)\n                    .reduce((accum: any, cur: any) => accum.concat(cur.data), []) \n                return this.drill(data, columnDescription)\n            }\n            const rows: any = this.rowDataRefs.map(columnName => \n                maleTD(columnName, `${this.getColumnLabel(columnName)} | All Male`)\n            )\n            this.sortIndexes[sortIndex] = [[table.td('All'), table.td('Male'), ...rows]]\n        },\n        setFemaleNotPregnantRows(sortIndex: number) {\n            // Gets all pregnant females from a particular column and checks if given patient ID \n            // Is in the list\n            const isPregnant = (patientID: number, column: string) => this.aggregations\n                .filter((a: any) => a.gender.match(/fp|fbf/i) && a.col === column)\n                .reduce((accum: any, cur: any) => accum.concat(cur.data || []), [])\n                .includes(patientID)\n            // Get total sum of all females by a particular column\n            const fnpTD = (column: string, columnDescription: string) => {\n                const data = this.aggregations.filter((a: any) => a.gender === 'Female' && a.col === column)\n                    .reduce((accum: any, cur: any) => accum.concat(cur.data.filter((i: any) => !isPregnant(i, column))), [])\n                return this.drill(data, columnDescription)\n            }\n            const rows: any = this.rowDataRefs.map(column => \n                fnpTD(column, `${this.getColumnLabel(column)} | FNP`)\n            )\n            this.sortIndexes[sortIndex] = [[table.td('All'), table.td('FNP'), ...rows]]\n        },\n        setFemaleRows(sortIndex: number) {\n            this.report.setGender('female')\n            return this.setRows(sortIndex, 'F', AGE_GROUPS, 'Female')\n        },\n        setMaleRows(sortIndex: number) {\n            this.report.setGender('male')\n            return this.setRows(sortIndex, 'M', AGE_GROUPS, 'Male')\n        },\n        setFemalePregnantRows(sortIndex: number) {\n            this.report.setGender('pregnant')\n            return this.setRows(sortIndex, 'F', ['All'], 'FP', 'Pregnant')\n        },\n        setFemaleBreastFeedingRows(sortIndex: number) {\n            this.report.setGender('breastfeeding')\n            return this.setRows(sortIndex, 'F', ['All'], 'FBf', 'Breastfeeding')\n        },\n        async setRows(sortIndex: number, category: string, ageGroups: string[], gender: string, otherAgeGroup='') {\n            for(const i in ageGroups) {\n                let txNew = []\n                let txCurr= []\n                let txGivenIpt = []\n                let txScreenTB = []\n                const group = otherAgeGroup || ageGroups[i]\n                this.report.setAgeGroup(group)\n\n                if (!(group in this.maleFemaleAgeGroupData)) {\n                    const cohort = await this.report.getCohort()\n                    this.report.setRebuildOutcome(false)\n                    this.maleFemaleAgeGroupData[group] = !isEmpty(cohort) ? cohort[group] : {}\n                }\n\n                if (!isEmpty(this.maleFemaleAgeGroupData[group])) {\n                    const value = async (prop: string) => this.getValue(\n                        prop, category, this.maleFemaleAgeGroupData[group]\n                    )\n                    txNew = await value('tx_new')\n                    txCurr= await value('tx_curr')\n                    txGivenIpt = await value('tx_given_ipt')\n                    txScreenTB = await value('tx_screened_for_tb')\n                    this.addAggregation('txNew', gender, txNew)\n                    this.addAggregation('txCurr', gender, txCurr)\n                    this.addAggregation('txGivenIpt', gender, txGivenIpt)    \n                    this.addAggregation('txScreenTB', gender, txScreenTB)\n                }\n\n                switch(this.report.getGender()) {\n                    case 'breastfeeding':\n                        this.report.setAgeGroup('All')\n                        this.report.setGender('Fbf')\n                        break\n                    case 'pregnant':\n                        this.report.setAgeGroup('All')\n                        this.report.setGender('FP')\n                        break\n                }\n\n                if (!this.sortIndexes[sortIndex]) this.sortIndexes[sortIndex] = []\n\n                this.sortIndexes[sortIndex].push([\n                    table.td(ageGroups[i]),\n                    table.td(gender),\n                    this.drill(txNew, `Tx new (new on ART) | ${group} | ${gender}`),\n                    this.drill(txCurr, `Tx curr (receiving ART) | ${group} | ${gender}`),\n                    this.drill(txGivenIpt, `TX curr (received IPT) | ${group} | ${gender}`),\n                    this.drill(txScreenTB, `TX curr (screened for TB) | ${group} | ${gender}`),\n                    ...(await this.getRegimenRows(group, gender))\n                ])\n            }\n        },\n        setHeaderInfoList(totalAlive: Array<any>) {\n            this.headerList = [\n                { \n                    label: 'Total Alive and on ART', \n                    value: totalAlive.length,\n                    other: {\n                        onclick: () => this.runTableDrill(totalAlive, 'Total Alive on ART')\n                    }\n                }\n            ]\n        },\n        async validateReport() {\n            const totalAlive = this.getTotals((i: any) => i.col === 'txCurr' && i.gender.match(/male|female/i))\n            this.setHeaderInfoList(totalAlive)\n            const validations: any = {\n                'total_alive_and_on_art' : {\n                    param: totalAlive.length,\n                    check: (i: number, p: number) => i != p,\n                    error: (i: number, p: number) => `\n                        Total alive of <b>${p}</b>\n                        Does not match total alive of <b>${i}</b> on MOH report\n                    `\n                }\n            }\n            const s = this.mohCohort.validateIndicators(validations, (errors: string[]) => this.errors = errors)\n            if (s === -1) this.errors = ['Report not validated. Run the MoH cohort report for similar reporting period and then run this report']\n        }\n    }\n})\n","import { render } from \"./MohDisaggregatedReport.vue?vue&type=template&id=34b7a7c4&ts=true\"\nimport script from \"./MohDisaggregatedReport.vue?vue&type=script&lang=ts\"\nexport * from \"./MohDisaggregatedReport.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { find } from \"lodash\";\nimport { ArtReportService } from \"./art_report_service\";\n\nexport enum CohortVar {\n    MOH_CACHE = 'mohCache'\n}\n\nexport interface CohortValidationInterface {\n    param: number | string;\n    error: (indicator: number, param: number) => string;\n    check: (indicator: number, param: number) => boolean;\n}\n\nexport class MohCohortReportService extends ArtReportService {\n    regenerate: boolean;\n    constructor() {\n        super()\n        this.regenerate = false\n    }\n\n    private cohortUrl() {\n        return `programs/${this.programID}/reports/cohort`\n    }\n\n    setRegenerate(regenerate: boolean) {\n        this.regenerate = regenerate\n    }\n\n    getCohortDrillDown(resourceId: string) {\n        return ArtReportService.getJson('cohort_report_drill_down', {\n            id: resourceId,\n            date: this.date,\n            'program_id': this.programID\n        })\n    }\n\n    requestCohort(params: any) {\n        return ArtReportService.ajxGet(\n            this.cohortUrl(), params\n        )\n    }\n\n    qaurterRequestParams() {\n        return { \n            name: this.quarter, \n            regenerate: this.regenerate \n        }\n    }\n\n    datePeriodRequestParams() {\n        return {\n            name: `Cohort-${this.startDate}-${this.endDate}`,\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            regenerate: this.regenerate\n        }\n    }\n\n    getCachedCohortValues() {\n        const cache = sessionStorage.getItem(CohortVar.MOH_CACHE)\n        if (cache) {\n            const conf = JSON.parse(cache)\n            if (conf.start_date === this.startDate \n                && conf.end_date === this.endDate\n                || conf.quarter === this.quarter) {\n                return conf.data\n            }\n        }\n    }\n\n    cacheCohort(values: any) {\n        sessionStorage.setItem(\n            CohortVar.MOH_CACHE, \n            JSON.stringify({\n                'start_date': this.startDate,\n                'end_date': this.endDate,\n                'quarter': this.quarter,\n                'data': values\n        }))\n    }\n\n    validateIndicators(validations: Record<string, CohortValidationInterface>, callback: Function) {\n        const cachedValues = this.getCachedCohortValues()\n        if (cachedValues) {\n            const errors = Object.keys(validations)\n                .reduce((errors: Array<any>, key: string) => {\n                    const indicator: any = find(cachedValues, { name: key })\n                    const validation: any = validations[key]\n                    const indicatorValue: any = indicator ? indicator.contents : null\n                    const param = validation.param as number\n                    const condition = validation.check(parseInt(indicatorValue), param)\n                    if (condition) errors.push(\n                        validation.error(indicatorValue, param)\n                    )\n                    return errors\n                }, [])\n            return callback(errors)\n        }\n        return -1\n    }\n}\n"],"sourceRoot":""}