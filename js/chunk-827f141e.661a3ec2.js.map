{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsContact.vue?6cf6","webpack:///./src/apps/HTS/services/hts_contact_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsContact.vue","webpack:///./src/apps/HTS/views/encounters/HtsContact.vue?aa4c","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/composables/storage.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","patientDashboardUrl","_","HtsContactService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","IonPage","HisStandardForm","setup","ref","service","htsClient","toOption","resolveObs","yesNoOptions","saveEncounter","mapStrToOptions","StartHtsEncounter","onInitVisit","value","discussPartnerField","contactIndexPageField","computedData","encounterName","encounterTypeID","buildDateObs","conceptName","date","isEstimate","obs","match","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","buildValueCoded","options","label","values","context","TT_TABLE_VIEWER","onload","c","condition","f","discuss_partner","validation","parseInt","async","_data","_data2","data","contact_index_page","rows","other","contacts","formFields","contactRegistrationWorflowForm","modal","MultiStepPopupForm","length","rowID","push","given_name","val","family_name","relation_to_contact","birth_date","name","color","action","KeyboardInput","TT_SUMMARY","Object","keys","filter","map","d","_find","valLabel","find","modalController","dismiss","alertConfirmation","splice","findIndex","r","child","onDidDismiss","columns","reduce","a","concat","config","footerBtns","slot","onClick","fdata","PersonField","getGivenNameField","getFamilyNameField","TT_SELECT","age","HisDate","getAgeInYears","birthDate","dob","getDobConfig","ageThreshold","computeValue","buildValueNumber","minDate","dayjs","add","format","maxDate","subtract","generateDateFields","gender","getGenderField","cell","getCellNumberField","contact_hiv_status","beforeNext","confirm","infoActionSheet","last_time_hiv_tested","ipv_status","contact_consent","TT_DATE_PICKER","defaultValue","toDate","infoItems","getCurrentRegionField","onClickComponentEvents","setValue","computedValue","getCurrentDistrictField","defaultComputedOutput","undefined","test","current_region","defaultOutput","district","getCurrentTAfield","currentTA","getCurrentVillageField","village","TT_NOTE","self_testkit_given","TT_TEXT","frs_given","contact_on_art","required","getDate","estimation","allowUnknown","trim","tag","__exports__","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","methods","formData","this","$emit","i","mapToOption","listOptions","item","resolvePerson","computedForm","attr","isPlainObject","person","Validation","isName","form","names","PersonService","searchGivenName","searchFamilyName","customOptions","isEmpty","includeHelpText","summaryLabel","estimateDateFromAge","getSessionDate","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","birthdate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","summaryMapValue","_f$home_region","home_region","dynamicHelpText","_f$home_region2","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","field","toastWarning","filtered","ok","address","LocationService","createAddress","toUpperCase","getHomeTaField","showKeyboard","isFilterDataViaApi","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","home_village","_f$home_region3","_f$current_region","current_district","_f$current_region2","current_traditional_authority","number","split","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","getFacilityLocationField","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","Array","isArray","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","person_id","birthdate_estimated","getPersonAttributeOptions","patient","Patientservice","prop","getPatientInfoString","getID","getNationalID","npid","show","Service","getProgramName","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","Promise","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","get","onerror","error","filters","openCursor","cursor","filteredData","continue","put","delete","entries","every","isInteger","toLower","includes","offlineStorage","facilities","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-827f141e.661a3ec2.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Contact tracing\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.patientDashboardUrl()\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsContactService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 195, providerID)\n    }\n}\n","\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent, ref } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { IonPage, modalController } from \"@ionic/vue\";\nimport { HtsContactService } from \"@/apps/HTS/services/hts_contact_service\";\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport KeyboardInput, { MultiStepPopupForm } from \"@/utils/PopupKeyboard\";\nimport HisDate from \"@/utils/Date\";\nimport { alertConfirmation } from \"@/utils/Alerts\";\nimport { find } from \"lodash\";\nimport { toDate } from \"@/utils/Strs\";\nimport dayjs from 'dayjs';\nimport { infoActionSheet } from '@/utils/ActionSheets';\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { StartHtsEncounter } from \"@/apps/HTS/composables/HtsFormEncounter\";\n\nexport default defineComponent({\n  components: { IonPage, HisStandardForm },\n  setup() {\n    const fields = ref<Field[]>([])\n    const service = new HtsContactService(-1);\n    const {\n      htsClient,\n      toOption,\n      resolveObs,\n      yesNoOptions,\n      saveEncounter,\n      mapStrToOptions,\n      patientDashboardUrl\n    } = StartHtsEncounter({\n      onInitVisit: () => {\n        fields.value = [\n          discussPartnerField(),\n          contactIndexPageField()\n        ]\n      }\n    })\n\n    function onFinish(_: any, computedData: any) {\n      saveEncounter({\n        encounterName: \"HTS Contact\",\n        encounterTypeID: service.encounterTypeID,\n        computedData\n      })\n    }\n\n    function buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n      let obs = {};\n      if (date.match(/unknown/i)) {\n        obs = service.buildValueText(conceptName, \"Unknown\");\n      } else if (isEstimate) {\n        obs = service.buildValueDateEstimated(conceptName, date);\n      } else {\n        obs = service.buildValueDate(conceptName, date);\n      }\n      return obs;\n    }\n\n    function discussPartnerField(): Field {\n      return {\n        id: \"discuss_partner\",\n        helpText: \"Discuss Partner\",\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            obs: service.buildValueCoded(\"Consent Confirmation\", v),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Does the client consent to discuss contact?\",\n              value: \"\",\n              values: yesNoOptions(),\n            },\n          ];\n        },\n      }\n    }\n\n    function contactIndexPageField(): Field {\n      let context: any = null;\n      return {\n        id: \"contact_index_page\",\n        helpText: \"Registered contacts\",\n        type: FieldType.TT_TABLE_VIEWER,\n        onload: (c: any) => (context = c),\n        condition: (f: any) => f.discuss_partner === \"Yes\",\n        isRequired: () => true,\n        validation: (v: Option[]) => {\n          if (parseInt(`${v[0].value}`) <= 0) {\n            return [\"Contact list is empty!!. Please register some\"];\n          }\n          return null;\n        },\n        options: async (f: any) => {\n          let data: any = {};\n          if (f.contact_index_page != null) {\n            data = f.contact_index_page[0] || {};\n          }\n          const rows: Array<any> = [...(data?.other?.rows || [])];\n          const contacts: Record<string, any> = {\n            ...(data?.other?.contacts || {}),\n          };\n          const formFields = contactRegistrationWorflowForm();\n          const modal = await MultiStepPopupForm(formFields, {\n            formLabel: `Contact Registration #${rows.length + 1}`,\n            onFinish: async (_: any, computedData: any) => {\n              const rowID = rows.length + 1;\n              rows.push([\n                rowID,\n                `${computedData.given_name.val} ${computedData.family_name.val}`,\n                computedData.relation_to_contact.val,\n                computedData.birth_date.val + \" years\",\n                {\n                  name: \"View\",\n                  type: \"button\",\n                  color: \"primary\",\n                  action: async () => {\n                    KeyboardInput(\n                      {\n                        id: \"summary_view\",\n                        helpText: \"More details\",\n                        type: FieldType.TT_SUMMARY,\n                        options: () => {\n                          return Object.keys(computedData)\n                            .filter((v: any) => computedData[v].val)\n                            .map((d: any) => {\n                              return {\n                                value: computedData[d].val,\n                                label:\n                                  computedData[d].valLabel ||\n                                  find(formFields, { id: d })?.helpText,\n                              };\n                            }) as Option[];\n                        },\n                      },\n                      () => modalController.dismiss()\n                    );\n                  },\n                },\n                {\n                  name: \"Remove\",\n                  type: \"button\",\n                  color: \"danger\",\n                  action: async () => {\n                    if (\n                      await alertConfirmation(\n                        \" Are you sure you want to remove contact?\"\n                      )\n                    ) {\n                      delete context.data[0].other.contacts[rowID];\n                      context.data[0].label = `${\n                        parseInt(`${context.data[0].label}`) - 1\n                      }`;\n                      context.data[0].value = parseInt(context.data[0].label);\n                      context.data[0].other.rows.splice(\n                        context.data[0].other.rows.findIndex(\n                          (r: any) => r[0] === rowID\n                        ),\n                        1\n                      );\n                    }\n                  },\n                },\n              ]);\n              contacts[rowID] = {\n                ...(await service.buildValueText(\n                  \"Patient contacts construct\",\n                  `${computedData.given_name.val} ${computedData.family_name.val}`\n                )),\n                child: await resolveObs(computedData),\n              };\n              modalController.dismiss();\n            },\n          });\n          await modal.onDidDismiss();\n          return [\n            {\n              label: `${rows.length}`,\n              value: `${rows.length}`,\n              other: {\n                columns: [\"ID\", \"Name\", \"Relation\", \"Age\"],\n                contacts,\n                rows,\n              },\n            },\n          ];\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: Object.values(v[0].other.contacts).reduce(\n              (a: any, c: any) => a.concat(c),\n              []\n            ),\n          };\n        },\n        config: {\n          footerBtns: [\n            {\n              name: \"Add New\",\n              slot: \"end\",\n              color: \"success\",\n              onClick: async () =>\n                (context.data = await context.options(context.fdata)),\n            },\n          ],\n        },\n      };\n    }\n\n    function contactRegistrationWorflowForm(): Field[] {\n      return [\n        (() => {\n          const name = PersonField.getGivenNameField();\n          name.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: service.buildValueText(\n                \"First name of contact\",\n                `${v.value}`\n              ),\n            };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getFamilyNameField();\n          name.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: service.buildValueText(\"Last name of contact\", `${v.value}`),\n            };\n          };\n          return name;\n        })(),\n         {\n          id: \"relation_to_contact\",\n          helpText: \"Contact is a ___\",\n          type: FieldType.TT_SELECT,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: service.buildValueCoded(\n                \"Relationships of contact\",\n                v.value as string\n              ),\n            };\n          },\n          isRequired: () => true,\n          options: () => {\n            return mapStrToOptions([\n              \"Sexual Partner\",\n              \"Biological Child\",\n              \"Biological Parent\",\n            ]);\n           },\n           validation: (v: Option) => {\n            const age = HisDate.getAgeInYears(htsClient.birthDate);\n             if (v.value === \"Biological Child\" && age < 13) {\n               return [\"Contact is too young to have a biological child\"];\n             }\n             if(v.value === \"Sexual Partner\" && age < 13) {\n               return [\"Contact is too young to have a sexual partner\"];\n             }\n             return null\n          },\n        },\n        ...(() => {\n          const dob = PersonField.getDobConfig(false);\n          const ageThreshold = 14;\n          dob.helpText = \"Contact Birth\";\n          dob.computeValue = (date: string) => {\n            const age = HisDate.getAgeInYears(date);\n            return {\n              valLabel: \"Age\",\n              val: age,\n              obs: service.buildValueNumber(\"Age of contact\", age),\n            };\n          };\n          dob.minDate = (f: any) => {\n            let minDate = \"\"\n            if (f.relation_to_contact.value === \"Biological Child\") {\n              minDate = dayjs(htsClient.birthDate).add(ageThreshold, \"year\").format(\"YYYY-MM-DD\");\n            }\n            return minDate\n          }\n          dob.maxDate = (f: any) => {\n            let maxDate = \"\"\n            if (f.relation_to_contact.value === \"Biological Parent\") {\n              maxDate = dayjs(htsClient.birthDate).subtract(ageThreshold, \"year\").format(\"YYYY-MM-DD\");\n            }\n            return maxDate\n          };\n          return generateDateFields(dob);\n        })(),\n        (() => {\n          const gender = PersonField.getGenderField([\n            { label: \"Male\", value: \"M\" },\n            { label: \"Female\", value: \"F\" },\n          ]);\n          gender.helpText = 'Sex of contact'\n          gender.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: service.buildValueText(\"Gender of contact\", `${v.value}`),\n            };\n          };\n          return gender;\n        })(),\n        {\n          id: \"contact_pregnancy_status\",\n          helpText: \"Pregnancy status of contact\",\n          type: FieldType.TT_SELECT,\n          condition: (f: any) => {\n            return f.gender.value === \"F\";\n          },\n          options: () => [\n            { label: \"Non-Pregnant\", value: \"FNP\" },\n            { label: \"Pregnant\", value: \"FP\" },\n            { label: \"Breastfeeding\", value: \"FBf\" },\n            { label: \"Unknown\", value: \"Unknown\" },\n          ],\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: service.buildValueText(\"Contact pregnancy status\", `${v.value}`),\n            };\n          }\n        },\n         (() => {\n          const cell: Field = PersonField.getCellNumberField();\n          cell.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: service.buildValueText(\"Contact phone number\", `${v.value}`),\n            };\n          };\n          return cell;\n        })(),\n        {\n          id: \"contact_hiv_status\",\n          helpText: \"HIV Status of the contact\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: service.buildValueCoded(\"Contact HIV tested\", v.value),\n            };\n          },\n          options: () => {\n            return mapStrToOptions([\"Positive\", \"Negative\", \"Unknown\"]);\n          },\n        },\n        {\n          id: \"last_time_hiv_tested\",\n          helpText: \"When was Contact's Last HIV Test\",\n          type: FieldType.TT_SELECT,\n          condition: (f: any) => f.contact_hiv_status.value && \n            f.contact_hiv_status.value == 'Negative',\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => {\n            return {\n              obs: service.buildValueText(\n                \"Contact HIV test date\",\n                `${v.value} ago`\n              ),\n            };\n          },\n          options: () => {\n            return mapStrToOptions([\n              \"A year or more ago\",\n              \"Less than a year ago\",\n            ]);\n          },\n          beforeNext: async (v: any) => {\n            if (v.value == \"Less than a year ago\") {\n              const confirm = await infoActionSheet(\n                'Last HIV test',\n                'Last HIV test',\n                'The case will be closed because the contact was recently tested and does not need to be followed up on.',\n                [\n                  {\n                    name: 'OK',\n                    slot: 'start',\n                    color: 'success'\n                  }\n                ],\n                'primary',\n                false\n              )\n              return confirm == 'OK' ? true : false\n            }\n            return true\n          }\n        },\n        {\n          id: \"ipv_status\",\n          helpText: \"IPV Status\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          beforeNext: async (v: Option) => {\n            if (v.label === 'Risk') {\n              await infoActionSheet(\n                'Case closed',\n                'IPV Risk',\n                'This contact is at risk of IPV, therefore the case will be closed',\n                [\n                  {\n                    name: 'OK',\n                    slot: 'start',\n                    color: 'primary'\n                  }\n                ],\n                'primary',\n                false\n              )\n            }\n            return true\n          },\n          condition: (f: any) => ('Negative' == f.contact_hiv_status.value && \n            'A year or more ago' == f.last_time_hiv_tested.value || \"Unknown\" == f.contact_hiv_status.value),\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: service.buildValueText(\"IPV Status\", `${v.value}`),\n            };\n          },\n          options: () => {\n            return mapStrToOptions([\"Risk\", \"No Risk\"]);\n          }\n        },\n        {\n          id: \"contact_consent\",\n          helpText: \"Consent to reach out to the contact\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => f.ipv_status.value === \"No Risk\",\n          finalComputedValue: (val: any) => {\n            return {\n              val,\n              obs: service.buildValueCoded(\n                \"Consent to contact the contact\",\n                val\n              ),\n            };\n          },\n          options: () => {\n            return [\n              {\n                label: \"Does the client consent to reach out to the contact?\",\n                value: \"\",\n                values: yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"referral_type\",\n          helpText: \"Referral Type\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          condition: (f: any) => f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: service.buildValueCoded(\"Referral type\", v.value),\n            };\n          },\n          options: () => {\n            return mapStrToOptions([\n              \"Provider referral\",\n              \"Contract referral\",\n              \"Dual referral\",\n            ]);\n          },\n        },\n        {\n          id: \"set_appointment\",\n          helpText: \"Appointment Date (Within 2 weeks)\",\n          type: FieldType.TT_DATE_PICKER,\n          isRequired: () => true,\n          defaultValue: () => service.date,\n          condition: (f: any) => f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          finalComputedValue: (val: any) => {\n            return {\n              val: toDate(val.value),\n              obs: service.buildValueDate(\n                \"Contact appointment date\",\n                val.value\n              ),\n            };\n          },\n          config: {\n            minDate: () => service.date,\n            maxDate: () => dayjs(service.date).add(15, \"day\").toDate(),\n            infoItems: (date: string) => {\n              return [\n                {\n                  label: \"User set appointment\",\n                  value: toDate(date),\n                },\n              ];\n            },\n          },\n        },\n        {\n          id: \"testing_location\",\n          helpText: \"Testing Location\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => ({\n            obs: service.buildValueText(\n              \"Contact Appointment location\",\n              `${v.value}`\n            ),\n          }),\n          options: () => {\n            return mapStrToOptions([\n              \"Facility\",\n              \"Home/Other Facility\"\n            ]);\n          },\n          condition: (f: any) => f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n        },\n        {\n          ...PersonField.getCurrentRegionField(),\n          helpText: \"Contact's Current Region of Residence\",\n          config: {\n            footerBtns: [\n              {\n                name: \"Same as index\",\n                slot: \"end\",\n                onClickComponentEvents: {\n                  setValue: () => 'Same as index'\n                },\n                onClick: () => \"Same as index\"\n              }\n            ]\n          },\n          condition: (f: any) => f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: service.buildValueText(\"Contact current region\", v.label),\n          })\n        },\n        {\n          ...PersonField.getCurrentDistrictField(),\n          helpText: \"Contact's Current District of Residence\",\n          defaultComputedOutput: undefined,\n          condition: (f: any) => !/same as index/i.test(f.current_region.label) &&\n            f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          defaultOutput: (f: any) => {\n            if (/Same as index/i.test(f.current_region.label)) {\n              return toOption(htsClient.district)\n            }\n          },\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: service.buildValueText(\n              \"Contact current district\",\n              v.label\n            ),\n          }),\n        },\n        {\n          ...PersonField.getCurrentTAfield(),\n          helpText: \"Contact's Current TA of Residence\",\n          defaultComputedOutput: undefined,\n          condition: (f: any) => !/foreign|same as index/i.test(`${f.current_region.label}`) && \n            f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          defaultOutput: (f: any) => {\n            if (/Same as index/i.test(f.current_region.label)) {\n              return toOption(htsClient.currentTA)\n            }\n          },\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: service.buildValueText(\"Contact current TA\", v.label),\n          }),\n        },\n        {\n          ...PersonField.getCurrentVillageField(),\n          helpText: \"Contact's Current Village of Residence\",\n          defaultComputedOutput: undefined,\n          condition: (f: any) => !/foreign|same as index/i.test(`${f.current_region.label}`) &&\n            f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          defaultOutput: (f: any) => {\n            if (/Same as index/i.test(f.current_region.label)) {\n              return toOption(htsClient.village)\n            }\n          },\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: service.buildValueText(\n              \"Contact current village\",\n              v.label\n            ),\n          }),\n        },\n        {\n          id: \"contact_address\",\n          helpText: \"Physical address\",\n          type: FieldType.TT_NOTE,\n          isRequired: () => true,\n          condition: (f: any) => f.ipv_status.value === \"No Risk\" && f.contact_consent === \"Yes\",\n          finalComputedValue: (v: Option) => ({\n            val: v.value,\n            obs: service.buildValueText(\n              \"Contact physical address\",\n              `${v.value}`\n            ),\n          }),\n        },\n        {\n          id: \"self_testkit_given\",\n          helpText: \"Contact Self Test Kit Given\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => f.contact_consent === \"No\",\n          finalComputedValue: (v: any) => ({\n            obs: service.buildValueCoded(\"Self-Test kit given\", v),\n          }),\n          options: () => {\n            return [\n              {\n                label:\n                  \"Was a self test kit given to the Index for their contact?\",\n                value: \"\",\n                values: yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"reason_for_not_giving_self_testkit\",\n          helpText: \"Reason for not providing a self test (Optional)\",\n          type: FieldType.TT_NOTE,\n          condition: (f: any) => f.self_testkit_given === \"No\",\n          finalComputedValue: (v: Option) => {\n            if (!v) return;\n            return {\n              val: v.value,\n              obs: service.buildValueText(\n                \"Reason for not giving self-test kit\",\n                `${v.value}`\n              ),\n            };\n          },\n        },\n        {\n          id: \"frs_given\",\n          helpText: \"FRS Given\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => false,\n          condition: (f: any) => f.contact_consent === \"No\",\n          finalComputedValue: (v: Option) => ({\n            obs: service.buildValueCoded(\"FRS given\", v as any),\n          }),\n          options: () => {\n            return [\n              {\n                label: \"Was FRS given to the Index client for their contact?\",\n                value: \"\",\n                values: yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"reason_for_not_giving_frs\",\n          helpText: \"Reason for not providing FRS\",\n          type: FieldType.TT_TEXT,\n          isRequired: () => true,\n          condition: (f: any) => f.frs_given === \"No\",\n          finalComputedValue: (v: Option) => ({\n            obs: service.buildValueText(\n              \"Reason for not giving FRS\",\n              `${v.value}`\n            ),\n          }),\n        },\n        {\n          id: \"contact_on_art\",\n          helpText: \"On ART\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => false,\n          condition: (f: any) =>\n            f.contact_hiv_status.value &&\n            f.contact_hiv_status.value === \"Positive\",\n          finalComputedValue: (v: Option) => ({\n            obs: service.buildValueCoded(\n              \"Contact ever registered at ART clinic\",\n              v as any\n            ),\n          }),\n          options: () => {\n            return [\n              {\n                label: \"Is the Contact on ART?\",\n                value: \"\",\n                values: yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"index_contact\",\n          helpText: \"Contact Indexing\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"No\",\n          options: () => {\n            return [\n              {\n                label: \"Do you want to convert the contact to an index client?\",\n                value: \"\",\n                values: yesNoOptions(),\n              },\n            ];\n          },\n          finalComputedValue: (v: Option) => ({\n            obs: service.buildValueCoded(\"Index patient\", v as any),\n          }),\n        },\n        {\n          id: \"art_start_location\",\n          helpText: \"Contact ART start location?\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => false,\n          finalComputedValue: (v: Option) => ({\n            obs: service.buildValueText(\n              \"Contact location of ART initiation\",\n              `${v.value}`\n            ),\n          }),\n          options: () => {\n            return mapStrToOptions([\n              \"Same Health Facility\",\n              \"Other Health Facility\",\n              \"Unknown\"\n            ]);\n          },\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"Yes\",\n        },\n        ...generateDateFields(\n          {\n            id: \"date_started_art\",\n            helpText: \"Contact Art Start\",\n            required: false,\n            condition: (f: any) =>\n              f.contact_on_art && f.contact_on_art === \"Yes\",\n            minDate: () => htsClient.birthDate,\n            maxDate: () => service.getDate(),\n            estimation: {\n              allowUnknown: true\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                isEstimate,\n                obs: buildDateObs(\n                  \"Contact Date ART started\",\n                  date,\n                  isEstimate\n                ),\n              };\n            },\n          },\n          service.getDate()\n        ),\n        {\n          id: \"contact_art_number\",\n          helpText: \"Contact ART number\",\n          type: FieldType.TT_TEXT,\n          isRequired: () => false,\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"Yes\",\n          beforeNext: async (v: any) => {\n            if(v.value == null || v.value.trim() == \"\" || v.value == 'Unknown'){\n              await infoActionSheet(\n                \"Contact ART number\",\n                \"Contact ART status\",\n                \"Since  an ART number has not been submitted for this HIV+ contact. The case will remian open, until the ART number is added.\",\n                [\n                  {\n                    name: 'OK',\n                    slot: 'start',\n                    color: 'primary'\n                  }\n                ],\n                'primary',\n                false\n              )\n            } else {\n              await infoActionSheet(\n                \"Contact ART number\",\n                \"Contact ART status\",\n                \"The contact is already on ART, therefore does not need follow up. This contact case will be closed.\",\n                [\n                  {\n                    name: 'OK',\n                    slot: 'start',\n                    color: 'success'\n                  }\n                ],\n                'primary',\n                false\n              )\n            }\n            return true\n          },\n          computedValue: (d: Option) => ({\n            tag: \"reg\",\n            obs: service.buildValueText(\n              \"Contact ART number at previous location\",\n              `${d.value}`\n            ),\n          }),\n        },\n      ];\n    }\n\n    return {\n      patientDashboardUrl,\n      onFinish,\n      fields\n    }\n  }\n});\n","import { render } from \"./HtsContact.vue?vue&type=template&id=9d6555b4&ts=true\"\nimport script from \"./HtsContact.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsContact.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Region of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'District of current residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'District of current residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'TA of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Village of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}