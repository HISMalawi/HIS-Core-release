{"version":3,"sources":["webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue?2315","webpack:///./src/services/drug_cms_service.ts","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue?0c64","webpack:///./src/composables/storage.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","this","$emit","i","__exports__","_component_his_standard_form","_resolveComponent","$event","DrugCmsService","Service","constructor","super","params","getJson","keyword","HisStandardForm","drugs","selectedDrugs","barcode","stockService","items","prepDrugs","f","postItems","toastSuccess","$router","push","toastDanger","getFields","id","helpText","FieldType","TT_SELECT","validation","val","Validation","options","label","value","condition","transfer_origination","_","filter","getFacilities","computedValue","config","showKeyboard","isFilterDataViaApi","TT_BARCODE","hiddenFooterBtns","onValue","async","TT_INFINITE_SCROLL_MULTIPLE_SELECT","requireNext","d","search","formatDrugs","unload","footerBtns","slot","onClick","allDrugs","getDrugs","pagenate","selectAll","TT_FULL_DATE","TT_BATCH_ENTRY","beforeNext","c","currentFieldContext","drugsToStr","map","b","join","drugsWithoutBatches","drug","entries","tins","expiry","batchNumber","tabs","every","partialBatches","e","score","some","isEmpty","partialDrugs","toastWarning","batchlessDrugs","v","TT_TABLE_VIEWER","buildResults","enter_batches","columns","rows","j","short_name","toNumString","HisDate","toStandardHisDisplayFormat","other","formdata","location","transfer_location","forEach","el","element","drug_inventory_id","parseInt","date","code","listData","l","isChecked","created","StockService","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","Promise","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","get","onerror","error","filters","openCursor","cursor","filteredData","continue","put","delete","item","isInteger","toLower","includes","offlineStorage","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-66ec2673.ecb33653.js","sourcesContent":["import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.activeField=''))\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\"]))\n}","import { Service } from \"./service\";\n\nexport class DrugCmsService extends Service {\n    constructor() {\n        super()\n    }\n\n    \n    static getDrugs(params={} as Record<string, string | number | boolean>) {\n        return super.getJson('/drug_cms', params)\n    }\n\n    static search(keyword=\"\") {\n        return super.getJson('/drug_cms/search', { keyword })\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport HisDate from \"@/utils/Date\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { StockService } from \"./stock_service\";\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { isEmpty } from \"lodash\";\nimport { toNumString } from \"@/utils/Strs\";\nimport { DrugCmsService } from \"@/services/drug_cms_service\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any,\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      const items = this.prepDrugs(formData);\n      const f = await this.stockService.postItems(items);\n      if (f) {\n        toastSuccess(\"Stock succesfully added\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(\"Could not save stock\");\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"transfer_origination\",\n          helpText: \"Select where stock came from\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          options: () => [\n            {\n              label: \"DHA\",\n              value: \"DHA\",\n            },\n            {\n              label: \"Other location\",\n              value: \"Other location\",\n            },\n          ],\n        },\n        {\n          id: \"transfer_location\",\n          helpText: \"Location\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          condition: (val: any) => val.transfer_origination.value === \"Other location\",\n          options: (_: any, filter = \"\") => getFacilities(filter),\n          computedValue: (val: Option) => val.label,\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n        },\n        {\n          id: \"barcode\",\n          helpText: \"Scan barcode\",\n          type: FieldType.TT_BARCODE,\n\n          config: {\n            hiddenFooterBtns: [\"Clear\", \"Next\"],\n          },\n          onValue: async (id: string) => {\n            this.barcode = id;\n            this.activeField = \"select drugs\";\n          },\n          condition: (val: any) => val.transfer_origination.value === \"DHA\"\n        },\n        {\n          id: \"select drugs\",\n          helpText: \"Select drugs\",\n          type: FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n          requireNext: true,\n          validation: (val: any) => Validation.required(val),\n          options: async (_: any, filter='a') => {\n            const d = await DrugCmsService.search(filter || \"a\");\n            this.drugs = this.formatDrugs(d)\n            return this.drugs\n          },\n          unload: (val: any) => (this.selectedDrugs = val),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n            footerBtns: [\n              {\n                name: \"Select all\",\n                slot: \"end\",\n                onClick: async () => {\n                  const allDrugs = await DrugCmsService.getDrugs({ pagenate: false})\n                  this.drugs = this.formatDrugs(allDrugs)\n                  this.selectAll(this.drugs);\n                },\n              },\n            ],\n          },\n        },\n        {\n          id: \"date\",\n          helpText: \"Delivery Date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: Option) => Validation.required(val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_ENTRY,\n          options: () => this.selectedDrugs,\n          beforeNext: (_: any, f: any, c: any, {currentFieldContext}: any) => {\n            const drugsToStr = (drugs: any) => drugs.map((b: any, i: number) => `${b.label}`).join(' & ')\n            const drugsWithoutBatches = currentFieldContext.drugs.filter((drug: any) =>\n              drug.entries.map((d: any) => !d.tins && !d.expiry && !d.batchNumber && !d.tabs).every(Boolean)\n            )\n            const partialBatches = currentFieldContext.drugs.filter((drug: any) => {\n              return drug.entries.map((e: any) => {\n                let score = 0\n                if (e.tins) score += 1\n                if (e.expiry) score += 1\n                if (e.batchNumber) score += 1\n                if (e.tabs) score += 1\n                return score >= 1 && score <= 3\n              }).some(Boolean)\n            })\n            if (!isEmpty(partialBatches)) {\n              const partialDrugs = drugsToStr(partialBatches)\n              toastWarning(`Please fix partial batch entries for drugs: ${partialDrugs}`)\n              return false\n            }\n            if (!isEmpty(drugsWithoutBatches)) {\n              const batchlessDrugs = drugsToStr(drugsWithoutBatches)\n              toastWarning(`The following drug batches are empty: ${batchlessDrugs}`)\n              return false\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"summary\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d.enter_batches),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(d: any) {\n      const columns = [\n        \"Drug\",\n        \"Amount per unit\",\n        \"Tins/Pallets\",\n        \"Expiry date\",\n        \"Batch number\",\n      ];\n      const rows = d.map((j: any) => {\n        const d = j.value;\n        return [\n          d.short_name,\n          d.tabs,\n          toNumString(d.tins),\n          HisDate.toStandardHisDisplayFormat(d.expiry),\n          d.batchNumber,\n        ];\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    prepDrugs(formdata: any) {\n      const items: any[] = [];\n      const barcode = this.barcode;\n      const location = formdata.transfer_origination.value === \"DHA\" ? null : formdata.transfer_location.value;\n      formdata.enter_batches.forEach((el: any) => {\n        const element = el.value;\n        items.push({\n          'batch_number': element.batchNumber,\n          'location_id': location,\n          items: [\n            {\n              'barcode': barcode,\n              'drug_id': element.drug_inventory_id,\n              'expiry_date': element.expiry,\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\n              'delivery_date': formdata.date.value,\n              'product_code': element.code,\n              \"pack_size\": element.tabs,\n            },\n          ],\n        });\n      });\n      return items;\n    },\n    selectAll(listData: Array<Option>) {\n      return listData.map((l) => {\n        l.isChecked = true;\n        return l;\n      });\n    },\n    formatDrugs(drugs: Array<any>) {\n      return drugs.map((drug: any) => {\n        return {\n          label: `${drug.short_name} (${drug.code})`,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n  },\n});\n","import { render } from \"./enter_receipts.vue?vue&type=template&id=e7964892&ts=true\"\nimport script from \"./enter_receipts.vue?vue&type=script&lang=ts\"\nexport * from \"./enter_receipts.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}