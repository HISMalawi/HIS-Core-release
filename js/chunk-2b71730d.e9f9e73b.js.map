{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaOutcome.vue?0bf2","webpack:///./src/apps/CxCa/services/CxCaOutcomeService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaOutcome.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaOutcome.vue?9916","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","OutcomeService","patientID","providerID","AppEncounterService","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","outcome","watch","patient","handler","getFields","deep","methods","formData","createEncounter","encounter","toastWarning","programID","ProgramService","getProgramID","getProgramWorkflows","workflows","select_referral_outcome","value","flows","forEach","w","states","f","conceptID","program_workflow_state_id","conceptName","concept","concept_names","name","state","getLocationName","date","getSessionDate","createState","saveState","referralObs","cancerObs","select_cancer_treatment","buildValueCoded","rOb","obList","match","cOb","push","saveObservationList","toastSuccess","nextTask","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","label","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","flowState","SET_PROVIDER","isBdeMode","isBDE","facts","ready","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","computed","patientDashboardUrl","runflowState","split","username","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","computedData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-2b71730d.e9f9e73b.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class OutcomeService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 184, providerID) //TODO: Use encounter type reference name'\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { ProgramService } from \"@/services/program_service\";\nimport {ProgramWorkflow} from \"@/interfaces/program_workflow\"\nimport {OutcomeService} from \"@/apps/CxCa/services/CxCaOutcomeService\"\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    outcome: {} as any,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.outcome = new OutcomeService(\n          this.patientID,\n          this.providerID\n        );\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      const encounter = await this.outcome.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const programID = ProgramService.getProgramID();\n      const workflows: ProgramWorkflow[] = await ProgramService.getProgramWorkflows(ProgramService.getProgramID());\n      const outcome = formData.select_referral_outcome.value;\n      const flows = {} as any;\n      workflows.forEach(w => {\n        w.states.forEach(f => {\n          const conceptID = f.program_workflow_state_id;\n          const conceptName = f.concept.concept_names[0].name;\n          flows[conceptName] = conceptID;\n        })\n      })\n      const state = {\n        'location_id': ProgramService.getLocationName(),\n        state: flows[outcome],\n        date: ProgramService.getSessionDate()\n      }\n      const saveState = await ProgramService.createState(this.patientID, programID, state);\n      if(!saveState) return toastWarning('Unable to update state')\n      const referralObs = formData.select_referral_outcome.value;\n      const cancerObs = formData.select_cancer_treatment.value;\n      const rOb = await this.outcome.buildValueCoded('Outcome', referralObs);\n      const obList = [rOb];\n      if(cancerObs.match(/cancer/)) {\n        const cOb = await this.outcome.buildValueCoded('Cancer treatment', cancerObs);\n        obList.push(cOb);\n      }\n\n      const obs = await this.outcome.saveObservationList(obList);\n      toastSuccess(\"Observations and encounter created!\");\n      this.nextTask();\n    },\n\n    getFields(): any {\n      return [\n        {\n          id: \"select_referral_outcome\",\n          helpText: `Referral outcome`,\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return [\n              {\n                label: \"Cancer of cervix\",\n                value: \"Cancer of cervix\",\n              },\n              {\n                label: \"Continue follow-up\",\n                value: \"Continue follow-up\",\n              },\n              {\n                label: \"Discharged uninfected\",\n                value: \"Discharged uninfected\",\n              },\n              {\n                label: \"Treatment complete\",\n                value: \"Treatment complete\",\n              },\n            ];\n          },\n        },\n        {\n          id: \"select_cancer_treatment\",\n          helpText: \"Select cancer treatment\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return [\n              {\n                label: \"Surgery\",\n                value: \"Surgery\",\n              },\n              {\n                label: \"Palliative Care\",\n                value: \"Palliative Care\",\n              },\n              {\n                label: \"Discharged\",\n                value: \"Discharged\",\n              },\n              {\n                label: \"Other\",\n                value: \"Other\",\n              },\n            ];\n          },\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaOutcome.vue?vue&type=template&id=3317e905&ts=true\"\nimport script from \"./CxCaOutcome.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaOutcome.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}