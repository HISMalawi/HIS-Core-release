{"version":3,"sources":["webpack:///./src/apps/HTS/services/hts_items_given.ts","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue?4fce","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue?d75f","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/composables/storage.ts","webpack:///./src/apps/HTS/composables/testKits.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["HtsItemsGivenService","AppEncounterService","constructor","patientID","providerID","super","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","_","defineComponent","components","IonPage","HisStandardForm","setup","ref","accessPointTypeField","facilityAccessPointField","communityAccessPoints","genderField","ageField","pregnancyStatusField","lastHivTestResultField","lastTimeHIVTestedField","itemsGivenToClientField","selfTestsGivenToClientField","hivTestKitDetailsField","visitTypeField","patientDemographics","service","resolveObs","mapStrToOptions","StartHtsEncounter","async","f","computedData","saveObsOffline","savePersonOffline","synchronizeRecord","Offline","id","PersonField","resolvePerson","observations","encounterName","encounterTypeID","meta","router","push","getSelfKitCount","_find","find","items_given_to_client","label","value","helpText","type","FieldType","TT_SELECT","isRequired","finalComputedValue","v","tag","obs","buildValueCoded","options","TT_SELECT_GRID","condition","accesspoint_type","summaryMapValue","buildValueText","toString","config","columnsPerRow","person","TT_NUMBER","validation","val","parseInt","test","isNaN","birthdate","DateHelper","estimateDateFromAge","birthdate_estimated","gender","TT_AGE_INPUT","last_hiv_result","maxDaysAllowed","maxWeeksAllowed","maxMonthsAllowed","other","timeUnit","length","buildObs","date","excludeUnits","TT_ADHERENCE_INPUT","every","d","some","maxSelfKits","maxMaleCondoms","maxFemaleCondoms","maxFRS","toLowerCase","isEmpty","filter","map","buildValueNumber","noFloat","titles","initKits","getLotNo","getExpiryDate","TestKit","TT_INPUT_ARRAY","columns","init","_v$other","incomplete","x","KitProp","HIV_SELF_KIT","defaultOutput","Array","from","buildValueDate","data","parentObs","childObs","l","child","Promise","all","test_kit","kitNameOption","onclick","r","index","t","listData","keyboard","TT_TEXT","forEach","i","kitLotNoOption","kitExpiryDateOption","TT_FULL_DATE","Date","toDate","monthsFromNow","dayjs","diff","kits","generateRows","count","isArray","slice","_el$other","el","estimate","someIncomplete","broadcast","rows","channel","newValue","oldValue","col","_col$other","broadcastlistener","update","disabled","userOptionField","otherRows","JSON","stringify","_f$last_hiv_result","HIVStatus","selectionList","selection","title","preset","size","genderOptionField","resultOptionField","ageOptionField","_d$other","age","buildNumericEstimate","estimatedDOB","numericKeypad","isEstimate","toastWarning","toggleButton","strictNumbers","approachOptionField","self_test_kits","TT_HIDDEN","computedValue","name","getGivenNameField","getFamilyNameField","getHomeDistrictField","getHomeTaField","getHomeVillageField","getCurrentDistrictField","getCurrentTAfield","getCurrentVillageField","getCellNumberField","__exports__","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","Object","required","methods","formData","this","$emit","mapToOption","listOptions","item","computedForm","attr","values","isPlainObject","Validation","isName","form","given_name","names","PersonService","searchGivenName","family_name","searchFamilyName","getGenderField","customOptions","getDobConfig","includeHelpText","summaryLabel","minDate","HisDate","maxDate","getSessionDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","getHomeRegionField","group","requireNext","getRegions","_f$home_region","home_region","dynamicHelpText","_f$home_region2","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","slot","color","onClick","c","field","filtered","ok","alertConfirmation","address","LocationService","createAddress","toUpperCase","showKeyboard","isFilterDataViaApi","footerBtns","getTraditionalAuthorities","home_district","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","_f$home_region3","current_region","match","_f$current_region","current_district","_f$current_region2","current_traditional_authority","number","split","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","getFacilityLocationField","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","reduce","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","person_id","getPersonAttributeOptions","patient","Patientservice","prop","getPatientInfoString","getID","getNationalID","npid","show","Service","getProgramName","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","resolve","getFromStorage","reject","parse","deleteFromStorage","removeItem","saveToStorage","setItem","IndexedDBStorage","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","get","onerror","error","filters","openCursor","cursor","filteredData","continue","put","delete","entries","isInteger","toLower","includes","getUserProp","setUserProp","UserProp","getSelectedTests","req","trim","e","console","defaultKits","kitName","UNIGOLD","lotNo","expiryDate","testGroup","visible","userProp","DETERMINE","BIOLINE","SYPHILIS","HEPATITIS","selectedKits","TEST_KIT_USER_PROPERTY","prevKits","kit","k","saveKits","offlineStorage","facilities","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-46a750d8.a03b0509.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsItemsGivenService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 196, providerID)\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Self Test Registration\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: `/`\n      }, null, 8, [\"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent, ref } from \"vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { find, isEmpty } from \"lodash\";\nimport keyboard, { numericKeypad, selectionList } from \"@/utils/PopupKeyboard\";\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport dayjs from \"dayjs\";\nimport { HtsItemsGivenService } from \"../../services/hts_items_given\";\nimport { toDate } from \"@/utils/Strs\";\nimport DateHelper from \"@/utils/Date\"\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { KitProp, TestKit } from \"../../composables/testKits\";\nimport { Offline } from  \"@/composables/offline\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { StartHtsEncounter } from \"@/apps/HTS/composables/HtsFormEncounter\";\nimport router from \"@/router\";\n\nexport default defineComponent({\n  components: { IonPage, HisStandardForm },\n  setup() {\n    const fields = ref<Field[]>([\n      ...[\n        accessPointTypeField(),\n        facilityAccessPointField(),\n        communityAccessPoints(),\n        genderField(),\n        ageField(),\n        pregnancyStatusField(),\n        lastHivTestResultField(),\n        lastTimeHIVTestedField(),\n        itemsGivenToClientField(),\n        selfTestsGivenToClientField(),\n        hivTestKitDetailsField(),\n        visitTypeField(),\n      ],\n      ...patientDemographics()\n    ])\n    const service = new HtsItemsGivenService(-1);\n\n    const { resolveObs, mapStrToOptions } = StartHtsEncounter()\n\n    async function onFinish(f: any, computedData: any) {\n      const { saveObsOffline, savePersonOffline, synchronizeRecord } = Offline()\n      const id = savePersonOffline(\n        'Self test client registration',\n        PersonField.resolvePerson(computedData), \n        []\n      )\n      saveObsOffline({\n        id,\n        observations: (await resolveObs(computedData, \"reg\")),\n        encounterName: \"Self-test kit register\",\n        encounterTypeID: service.encounterTypeID,\n        meta: f\n      })\n      synchronizeRecord(id)\n      router.push(`/`);\n    }\n\n    function getSelfKitCount(f: Record<string, any>) {\n      return (\n        find(f.items_given_to_client || [], { label: \"Self-Test Kit\" })\n          ?.value || 0\n      );\n    }\n    \n    function accessPointTypeField(): Field {\n      return {\n        id: \"accesspoint_type\",\n        helpText: \"Distribution point type\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: service.buildValueCoded(\"HTS Access Type\", v.value),\n          };\n        },\n        options: () => {\n          return mapStrToOptions([\"Health Facility\", \"Community\"]);\n        },\n      };\n    }\n    \n    function facilityAccessPointField(): Field {\n      return {\n        id: \"facility_access_points\",\n        helpText: \"Health facility distribution point\",\n        type: FieldType.TT_SELECT_GRID,\n        isRequired: () => true,\n        condition: (f: any) => f.accesspoint_type.value === \"Health Facility\",\n        summaryMapValue: (v: Option) => {\n          return v;\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: service.buildValueText(\n              \"Location where test took place\",\n              v.value.toString()\n            ),\n          };\n        },\n        config: {\n          columnsPerRow: 2\n        },\n        options: () => {\n          return [\n            {label: \"1 | VCT\", value: \"VCT\"},\n            {label: \"2 | ANC\", value: \"ANC First Visit\"},\n            {label: \"3 | Inpatient\", value: \"Inpatient\"},\n            {label: \"4 | STI\", value: \"STI\"},\n            {label: \"5 | PMTCT-Follow-up (ANC FUP, Mat, Post-nat, BF)\", value: \"PMTCT FUP\"},\n            {label: \"6 | Index\", value: \"Index\"},\n            {label: \"7 | Paediatric\", value: \"Paediatric\"},\n            {label: \"8 | VMMC\", value: \"VMMC\"},\n            {label: \"9 | Malnutrition\", value: \"Malnutrition\"},\n            {label: \"10 | TB\", value: \"TB\"},\n            {label: \"11 | OPD\", value: \"OPD\"},\n            {label: \"12 | Other PITC (PrEP, dental e.t.c)\", value: \"Other\"},\n            {label: \"18 | SNS (Social Network Strategies)\", value: \"SNS\"},\n          ];\n        },\n      };\n    }\n\n    function communityAccessPoints(): Field {\n      return {\n        id: \"community_access_points\",\n        helpText: \"Community distribution points\",\n        type: FieldType.TT_SELECT,\n        condition: (f: any) => f.accesspoint_type.value === \"Community\",\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: service.buildValueText(\n              \"Location where test took place\",\n              `${v.value}`\n            ),\n          };\n        },\n         options: () => {\n          return [\n            {label: \"13 | VCT\", value: \"VCT\"},\n            {label: \"14 | Index\", value: \"Index\"},\n            {label: \"15 | VMMC\", value: \"VMMC\"},\n            {label: \"16 | Other\", value: \"Other\"},\n            {label: \"17 | SNS\", value: \"SNS\"},\n            {label: \"19 | Mobile\", value: \"Mobile\"},\n          ];\n        },\n      };\n    }\n\n    function genderField(): Field {\n      return {\n        id: \"gender\",\n        helpText: \"Recipient's Sex\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            person: v.value,\n          };\n        },\n        options: () => {\n          return [\n            { label: \"Female\", value: \"F\" },\n            { label: \"Male\", value: \"M\" },\n          ];\n        },\n      };\n    }\n\n    function ageField(): Field {\n      return {\n        id: \"birthdate\",\n        helpText: \"Recipient's age\",\n        type: FieldType.TT_NUMBER,\n        isRequired: () => true,\n        validation: (v: Option) => {\n          const val = parseInt(`${v.value}`)\n          if (/unknown/i.test(`${v.value}`)) return null\n          if (val <= 10 || val >= 125 || isNaN(val)) {\n            return [\"Invalid Age\"];\n          }\n          return null;\n        },\n        finalComputedValue: (v: any) => {\n          return {\n            person: {\n              birthdate: DateHelper.estimateDateFromAge(v.value),\n              birthdate_estimated: true,\n            },\n          };\n        },\n      };\n    }\n\n    function pregnancyStatusField(): Field {\n      return {\n        id: \"pregnancy_status\",\n        helpText: \"Pregnancy Status\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) => f.gender.value === \"F\",\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: service.buildValueCoded(\"Pregnancy status\", v.value),\n          };\n        },\n        options: () => {\n          return [\n            { label: \"Non-pregnant\", value: \"Not Pregnant / Breastfeeding\" },\n            { label: \"Pregnant\", value: \"Pregnant woman\" },\n            { label: \"Breastfeeding\", value: \"Breastfeeding\" },\n          ];\n        },\n      };\n    }\n\n    function lastHivTestResultField(): Field {\n      return {\n        id: \"last_hiv_result\",\n        helpText: \"Recipient's Last HIV Test Results\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            tag: \"reg\",\n            obs: service.buildValueCoded(\n              \"Previous HIV Test Results\",\n              v.value\n            ),\n          };\n        },\n        options: () => {\n          return mapStrToOptions([\n            \"Never Tested\",\n            \"Negative\",\n            \"Positive NOT on ART\",\n            \"Positive on ART\",\n            \"Inconclusive\",\n          ]);\n        },\n      };\n    }\n\n    function lastTimeHIVTestedField(): Field {\n      return {\n        id: \"last_time_hiv_tested\",\n        helpText: \"Time since last HIV test\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_hiv_result.value && f.last_hiv_result.value != \"Never Tested\",\n        isRequired: () => true,\n        validation: (v: Option, f: any) => {\n          const maxDaysAllowed = 90;\n          const maxWeeksAllowed = 12;\n          const maxMonthsAllowed = 24;\n          if (parseInt(`${v.other.value}`) <= 0 && !/day/i.test(v.other.timeUnit)) {\n            return [`Enter ${v.other.timeUnit} greater than zero`];\n          }\n           if(v.other.timeUnit === 'Days' && parseInt(`${v.other.value}`) > maxDaysAllowed) {\n            return [`Enter ${v.other.timeUnit} less than ${maxDaysAllowed}, use Weeks Instead`];\n          }\n          if(v.other.timeUnit === 'Weeks' && parseInt(`${v.other.value}`) > maxWeeksAllowed) {\n            return [`Enter ${v.other.timeUnit} less than ${maxWeeksAllowed}, use Months Instead`];\n          }\n          if(v.other.timeUnit === 'Months' && parseInt(`${v.other.value}`) > maxMonthsAllowed) {\n            return [`Enter ${v.other.timeUnit} less than ${maxMonthsAllowed}, use Years Instead`];\n          }\n          if(v.other.timeUnit === 'Years' && parseInt(`${v.other.value}`) > parseInt(f.birthdate.value)) {\n            return [ `${\n                v.label\n              } is greater than client's age of ${f.birthdate.value} Years`];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          return null;\n        },\n        finalComputedValue: (v: any) => {\n          return {\n            tag: \"reg\",\n            obs: service.buildObs(\"Time of HIV test\", {\n              'value_datetime': v.other.date,\n              'value_text': v.value\n            })\n          }\n        },\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    }\n\n    function itemsGivenToClientField(): Field {\n      return {\n        id: \"items_given_to_client\",\n        helpText: \"Items given to the client\",\n        type: FieldType.TT_ADHERENCE_INPUT,\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v,\n        validation: (v: Option[]) => {\n          if (v.every((d) => d.value === \"\")) {\n            return [\"Values cannot be empty\"];\n          }\n          if (\n            v.some(\n              (d) => /self-test/i.test(d.label) && (!d.value || parseInt(`${d.value}`) <= 0)\n            )\n          ) {\n            return [`Please enter number of self kits to give client`];\n          }\n          const maxSelfKits = 3;\n          const maxMaleCondoms = 99;\n          const maxFemaleCondoms = 99;\n          const maxFRS = 5;\n          if (\n            v.some((d) => /self-test/i.test(d.label) && parseInt(`${d.value}`) > maxSelfKits)\n          ) {\n            return [\n              `Cannot distribute more than ${maxSelfKits} Self-test kits. Please adjust the number accordingly`,\n            ];\n          }\n          if (\n            v.some((d) => d.label == 'Male condoms' && parseInt(`${d.value}`) > maxMaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxMaleCondoms} Male Condoms. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => d.label == 'Female condoms' && parseInt(`${d.value}`) > maxFemaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFemaleCondoms} Female Condoms. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => /frs/i.test(d.label.toLowerCase()) && parseInt(`${d.value}`) > maxFRS)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFRS} FRS. Please adjust the number accordingly`,\n            ];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          if (!isEmpty(f.items_given_to_client)) {\n            return f.items_given_to_client;\n          }\n          return [\n            { label: \"Self-Test Kit\", value: \"\" },\n            { label: \"Male condoms\", value: \"\" },\n            { label: \"Female condoms\", value: \"\" },\n            { label: \"FRS\", value: \"\" },\n          ] as Option[];\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            tag: \"reg\",\n            obs: v\n              .filter((d: Option) => d.value)\n              .map((d: Option) =>\n                service.buildValueNumber(d.label, parseInt(`${d.value}`))\n              ),\n          };\n        },\n        config: {\n          noFloat: true,\n          titles: {\n            label: \"Item\",\n            value: \"Quantity\",\n          },\n        },\n      };\n    }\n\n    function hivTestKitDetailsField(): Field {\n      const { \n        initKits, \n        getLotNo, \n        getExpiryDate \n      } = TestKit()\n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        //summaryMapValue: (v: Option) => v?.other?.fields,\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        init: async () => {\n          await initKits()\n          return true\n        },\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v?.other?.fields,\n        validation: (v: Option[]) => {\n          const incomplete = v\n            .map((d: Option) => d.other.fields)\n            .some((d: Option[]) => d.some((x: Option) => x.value === \"\"));\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        condition: () => !getLotNo(KitProp.HIV_SELF_KIT),\n        defaultOutput: (f: any) => {\n          if (getSelfKitCount(f) >= 1 && getLotNo(KitProp.HIV_SELF_KIT)) {\n            return Array.from({ length: getSelfKitCount(f) }).map(() => {\n              return {\n                label: KitProp.HIV_SELF_KIT,\n                value: getLotNo(KitProp.HIV_SELF_KIT),\n                other: {\n                  fields: [\n                    {\n                      label: \"Kit name\",\n                      value: KitProp.HIV_SELF_KIT,\n                      other: {\n                        obs: () => service.buildValueText(\"Kit name\", KitProp.HIV_SELF_KIT)\n                      }\n                    },\n                    {\n                      label: \"KitLot No.\",\n                      value: getLotNo(KitProp.HIV_SELF_KIT),\n                      other: {\n                        obs: () => service.buildValueText(\"Kit lot number\",\n                          getLotNo(KitProp.HIV_SELF_KIT)\n                        )\n                      }\n                    },\n                    {\n                      label: \"Kit Expiry date\",\n                      value: getExpiryDate(KitProp.HIV_SELF_KIT),\n                      other: {\n                        obs: () => service.buildValueDate(\"kit expiry date\",\n                          getExpiryDate(KitProp.HIV_SELF_KIT)\n                        )\n                      }\n                    }\n                  ]\n                }\n              }\n            })\n          }\n        },\n        finalComputedValue: (v: Option[]) => {\n          const data = v.map((d) => d.other.fields);\n          return {\n            obs: data.map(async (options: Option[]) => {\n              const [parentObs, ...childObs] = options\n                .filter((l: Option) => typeof l.other.obs === \"function\")\n                .map((d: Option) => d.other.obs(d));\n              return {\n                ...(await parentObs),\n                child: await Promise.all(childObs),\n              };\n            }),\n          };\n        },\n        options: async (f: any) => {\n          if (f.test_kit != null) return f.test_kit;\n          const kitNameOption = () => ({\n            label: \"Kit Name\",\n            value: KitProp.HIV_SELF_KIT,\n            other: {\n              obs: (v: Option) =>\n                service.buildValueText(\"Kit name\", v.value as string),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"name\",\n                    helpText: \"Kit Name\",\n                    type: FieldType.TT_TEXT,\n                    isRequired: () => true\n                  },\n                  (v: Option) => {\n                    val.value = v.value;\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/name/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          });\n          const kitLotNoOption = () => ({\n            label: \"Kit Lot No.\",\n            value: getLotNo(KitProp.HIV_SELF_KIT),\n            other: {\n              obs: (v: Option) =>\n                service.buildValueNumber(\n                  \"Kit lot number\",\n                  v.value as number\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard({\n                  id: 'lot',\n                  helpText: 'Enter Lot Number',\n                  type: FieldType.TT_TEXT,\n                  isRequired: () => true\n                }, \n                (v: Option) => {\n                  val.value = v.value\n                  // Use first row's Lot number to update other Lot numbers which are empty\n                  if (index === 0) {\n                    listData.forEach((i: Option) => {\n                      i.other.fields.forEach((d: Option) => {\n                        if (/lot/i.test(d.label) && d.value === '') {\n                          d.value = val.value\n                        }\n                      })\n                    })\n                  }\n                })\n              },\n            },\n          });\n          const kitExpiryDateOption = () => ({\n            label: \"Kit Expiry Date\",\n            value: getExpiryDate(KitProp.HIV_SELF_KIT),\n            other: {\n              obs: (v: Option) =>\n                service.buildValueDate(\n                  \"kit expiry date\",\n                  v.value as string\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(service.date),\n                        ];\n                      }\n                      const monthsFromNow = dayjs(v.label).diff(service.date, \"month\")\n                      if (monthsFromNow <= 2) {\n                        return [\"It's not advisable to use a test kit that will expire in less than 2 months\"]\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => {\n                    val.value = v.value\n                    // Use first row's expiry date to update other expiry dates\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/expiry/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          })\n          const kits = getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"\",\n                value: \"\",\n                other: {\n                  fields: [\n                   kitNameOption(),\n                   kitLotNoOption(),\n                   kitExpiryDateOption(),\n                  ],\n                },\n              };\n            });\n            if (Array.isArray(f.test_kit)) {\n              if (kits < f.test_kit.length) {\n                return f.test_kit.slice(0, kits);\n              } else if (kits > f.test_kit.length) {\n                return [\n                  ...f.test_kit,\n                  ...generateRows(\n                    kits - f.test_kit.length\n                  ),\n                ];\n              } else {\n                return f.test_kit;\n              }\n          }\n          return generateRows();\n        },\n      };\n    }\n    \n    function selfTestsGivenToClientField(): Field {\n      return {\n        id: \"self_test_kits\",\n        helpText: \"Self-test kit users\",\n        type: FieldType.TT_INPUT_ARRAY,\n        isRequired: () => true,\n        condition: (f: any) =>\n          f.items_given_to_client.some(\n            (d: Option) => /self-test/i.test(d.label) && parseInt(`${d.value}`) > 0\n          ),\n        finalComputedValue: (v: Option[]) => {\n          return {\n            tag: \"reg\",\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d.value, d));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        summaryMapValue: (v: Option) => v.other.fields.map((d: Option) => {\n          const el = {...d}\n          if (el.label === 'Age' && el?.other?.estimate) {\n            el.value = `${el.value} (Estimated)`\n          }\n          return el\n        }),\n        config: {\n          columns: [\n            { label: \"End-User\" },\n            { label: \"Sex\" },\n            { label: \"Age\" },\n            { label: \"Approach\" },\n            { label: \"Result\"}\n          ],\n        },\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 4;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          const broadcast = (rows: Option[], channel: string, newValue: string|number, oldValue: string|number) => {\n            rows.forEach(col => {\n              if (typeof col?.other?.broadcastlistener === \"function\") {\n                const update = col.other.broadcastlistener(channel, newValue, oldValue)\n                if (update) {\n                  col.value = update.value\n                  col.disabled = update.disabled\n                }\n              }\n            })\n          }\n          const userOptionField = () => ({\n            label: \"User\",\n            value: \"\",\n            other: {\n              obs: (v: string) => service.buildValueCoded(\"Self-test end user\", v),\n              onclick: async (\n                val: Option,\n                rows: Option[],\n                index: number,\n                i: number,\n                listData: Option[]\n              ) => {\n                const otherRows = listData.filter((_: any, i) => i != index);\n                const options = [];\n                if (!/Self/.test(JSON.stringify(otherRows))) {\n                  const HIVStatus = f.last_hiv_result?.value;\n                  if(!/positive/.test(HIVStatus.toLowerCase())) options.push(\"Self\");\n                }\n                selectionList(\n                  [...options, \"Sexual partner\", \"Caretaker for child\", \"Other\"],\n                  (selection: string) => {\n                    broadcast(rows, 'User', selection, val.value)\n                    val.value = selection;\n                  },\n                  {\n                    title: \"Select End-User\",\n                    preset: val != null ? val.value : \"\",\n                    size: \"small-modal\",\n                  }\n                );\n              },\n            },\n          });\n          const genderOptionField = () => ({\n            label: \"Sex\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string, oldValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { value: f.gender.label, disabled: true }\n                  }\n                  if (oldValue === 'Self') {\n                    return { value: '', disabled: false }\n                  }\n                }\n              },\n              obs: (v: string) => service.buildValueCoded(\"Gender of contact\", v),\n              onclick: (val: Option) => {\n                selectionList(\n                  [\"Female\", \"Male\"],\n                  (selection: string) => val.value = selection,\n                  {\n                    title: \"Select sex\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                )\n              }\n            },\n          });\n          const resultOptionField = () => ({\n            label: \"Result\",\n            value: \"N/A\",\n            other: {\n              obs: (v: string) => {\n                if (v && !/n\\/a/i.test(`${v}`)) {\n                  return service.buildValueCoded('Test 1', v)\n                }\n              },\n              onclick: (val: Option, rows: Option[]) => {\n                selectionList([\n                  'Negative',\n                  'Positive',\n                  'N/A'\n                ], \n                (selection: string) => {\n                  broadcast(rows, 'Result', selection, val.value)\n                  val.value = selection\n                }, {\n                  title: 'Directly-assisted HIV Result'\n                })\n              }\n            }\n          })\n          const ageOptionField = () => ({\n            label: \"Age\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { value: `${f.birthdate.value}`, disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string, d: Option) => {\n                const age = parseInt(v)\n                if (d?.other?.estimate) {\n                  return service.buildNumericEstimate('Age of contact', age)\n                } else {\n                  const estimatedDOB = DateHelper.estimateDateFromAge(age)\n                  return service.buildObs(\"Age of contact\", {\n                      'value_datetime': estimatedDOB,\n                      'value_numeric': age\n                  })\n                }\n              },\n              onclick: (val: Option) => {\n                numericKeypad((age: number | string, isEstimate: boolean | undefined) => {\n                  if (age && parseInt(`${age}`) >= 125) {\n                    val.value =''\n                    return toastWarning(`Age exceeds maximum human life expectancy of 124 years`)\n                  }\n                  val.value = age\n                  val.other.estimate = isEstimate\n                }, \n                {\n                  title: 'Age',\n                  preset: ' ',\n                  toggleButton: \"Age is estimated?\",\n                  noFloat: true,\n                  strictNumbers: true\n                });\n              },\n            },\n          });\n          const approachOptionField = () => ({\n            label: \"Approach\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue != 'Self') {\n                    return { value: \"Un-assisted\", disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string) => service.buildValueCoded(\"Self-test approach\", v),\n              onclick: (val: Option, rows: any[]) => {\n                selectionList(\n                  [\"Directly-assisted\", \"Un-assisted\"],\n                  (v: string) => {\n                    broadcast(rows, 'Approach', v, val.value)\n                    val.value = v\n                  },\n                  {\n                    title: \"Select approach\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const kits = getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"item\",\n                value: \"N/A\",\n                other: {\n                  fields: [\n                    userOptionField(),\n                    genderOptionField(),\n                    ageOptionField(),\n                    approachOptionField(),\n                    resultOptionField()\n                  ],\n                },\n              };\n            });\n          if (Array.isArray(f.self_test_kits)) {\n            if (kits < f.self_test_kits.length) {\n              return f.self_test_kits.slice(0, kits);\n            } else if (kits > f.self_test_kits.length) {\n              return [\n                ...f.self_test_kits,\n                ...generateRows(\n                  kits - f.self_test_kits.length\n                ),\n              ];\n            } else {\n              return f.self_test_kits;\n            }\n          }\n          return generateRows();\n        },\n      };\n    }\n\n    function visitTypeField(): Field {\n      return {\n        id: \"visit_type\",\n        helpText: \"Visit Type\",\n        type: FieldType.TT_HIDDEN,\n        isRequired: () => true,\n        computedValue: (v: Option) => {\n          return {\n            tag: 'reg',\n            obs: service.buildValueCoded(\"Visit type\", \"Self test distribution\")\n          }\n        },\n      }\n    }\n\n    function patientDemographics(): Field[] {\n      return [\n        (() => {\n          const name = PersonField.getGivenNameField();\n          name.validation = () => {\n            return true;\n          };\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getFamilyNameField();\n          name.type = FieldType.TT_HIDDEN;\n          name.validation = () => {\n            return true;\n          };\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeDistrictField();\n          name.type = FieldType.TT_HIDDEN;\n\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeTaField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeVillageField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentDistrictField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentTAfield();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentVillageField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCellNumberField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n      ];\n    }\n\n    return {\n      onFinish,\n      fields\n    }\n  }\n});\n","import { render } from \"./HtsESelfTestRegister.vue?vue&type=template&id=828e0c9e&ts=true\"\nimport script from \"./HtsESelfTestRegister.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsESelfTestRegister.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Region of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'District of current residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'District of current residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'TA of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Village of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","import { Service } from \"@/services/service\";\nimport { find, isEmpty } from \"lodash\";\nimport { ref } from \"vue\";\nimport UserProp from \"@/composables/userproperty\"\n\nexport enum KitProp {\n    TEST_KIT_USER_PROPERTY = 'hts_user_assigned_kits',\n    HIV_SELF_KIT = 'HIV self-kit',\n    SYPHILIS = 'Syphilis',\n    HEPATITIS = 'Hepatitis B',\n    BIOLINE = 'Bioline',\n    DETERMINE = 'Determine',\n    UNIGOLD = 'Unigold'\n}\n\nexport function TestKit() {\n    const kits = ref<any>([])\n    const { getUserProp, setUserProp } = UserProp()\n\n    const getSelectedTests = async () => {\n        try {\n            const req = await getUserProp('HTS_PROGRAMS')\n            return `${req||''}`.split(',').map((prop: string) => prop.trim())\n        } catch (e) {\n            console.error(`${e}`)\n        }\n        return []\n    }\n\n    const initKits = async () => {\n        const defaultKits = [\n            {\n                kitName: KitProp.UNIGOLD,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.DETERMINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.BIOLINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.HIV_SELF_KIT,\n                lotNo: '',\n                expiryDate: '',\n                visible: true\n            },\n            {\n                kitName: KitProp.SYPHILIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Syphilis Test\"\n            },\n            {\n                kitName: KitProp.HEPATITIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Hepatitis B Test\"\n            }\n        ]\n        try {\n            const selectedKits = await getSelectedTests()\n            const req: any = await getUserProp(KitProp.TEST_KIT_USER_PROPERTY)\n            const prevKits = JSON.parse(req||'')\n\n            defaultKits.forEach((kit: any) => {\n                if (kit.userProp && !isEmpty(selectedKits)) {\n                    kit.visible = selectedKits.includes(kit.userProp)\n                }\n                const preset = find(prevKits, { kitName: kit.kitName })\n                if (preset) {\n                    kit.lotNo = preset.lotNo\n                    kit.expiryDate = preset.expiryDate\n                }\n            })\n            kits.value = defaultKits.filter((k: any) => k.visible)\n        } catch (e) {\n            kits.value = defaultKits\n            console.error(`${e}`)\n        }\n        \n    }\n\n    const getLotNo = (kitName: KitProp) => {\n        const data = find(kits.value, { kitName })\n        if (data) {\n            if(new Date(data.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return data.lotNo\n        } \n        return ''\n    }\n\n    const getExpiryDate = (kitName: KitProp) => {\n        const date = find(kits.value, { kitName })\n        if (date) {\n            if (new Date(date.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return date.expiryDate\n        }\n        return ''\n    }\n\n    const saveKits = () => setUserProp(KitProp.TEST_KIT_USER_PROPERTY, JSON.stringify(kits.value))\n\n    return {\n        kits,\n        initKits,\n        saveKits,\n        getLotNo,\n        getExpiryDate\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}