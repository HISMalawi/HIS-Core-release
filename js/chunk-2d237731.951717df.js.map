{"version":3,"sources":["webpack:///./src/apps/LOS/views/OrderTests.vue?1f71","webpack:///./src/apps/LOS/views/OrderTests.vue","webpack:///./src/apps/LOS/views/OrderTests.vue?93f0"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onSubmit","defineComponent","mixins","EncounterMixinVue","data","patientID","service","activityType","watch","handler","query","params","this","patient_id","type","PatientLabService","getClinianGivenNameField","getClinianFamilyNameField","getFacililityLocationField","getReasonForTestField","getTestSpecimensField","getTestSelectionField","getTestCombinationField","immediate","deep","methods","_","computed","placeOrder","req","printSpecimenLabel","order_id","$router","push","id","helpText","FieldType","TT_SELECT","defaultValue","getLocationName","validation","val","Validation","required","options","filter","getFacilities","computedValue","label","config","showKeyboard","isFilterDataViaApi","field","PersonField","getGivenNameField","proxyID","condition","appearInSummary","getFamilyNameField","summaryMapValue","v","f","value","given_name","ConceptService","getCachedConceptID","OrderService","getSpecimens","map","d","name","concept_id","activeSpecimen","TT_GRID_SELECTOR","c","listData","specimen","getTestTypesBySpecimen","t","isChecked","other","tests","length","yesNoOptions","__exports__"],"mappings":"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","file":"js/chunk-2d237731.951717df.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport {getFacilities} from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PatientLabService } from \"@/apps/LOS/services/patient_lab_service\"\nimport { OrderService } from \"@/services/order_service\"\nimport { ConceptService } from '@/services/concept_service'\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { isEmpty } from 'lodash'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        patientID: -1,\n        service: {} as any,\n        fields: [] as Field[],\n        activityType: '' as 'DRAW_SAMPLES' | 'ORDER_TESTS',\n    }),\n    watch: {\n        '$route': {\n            handler({query, params}: any) {\n                if (query && params) {\n                    this.patientID = params.patient_id\n                    this.activityType = query.type\n                    this.service = new PatientLabService(this.patientID)\n                    this.fields = [\n                        this.getClinianGivenNameField(),\n                        this.getClinianFamilyNameField(),\n                        this.getFacililityLocationField(),\n                        this.getReasonForTestField(),\n                        this.getTestSpecimensField(),\n                        this.getTestSelectionField(),\n                        this.getTestCombinationField()\n                    ]\n                }\n            },\n            immediate: true,\n            deep: true\n        },\n    },\n    methods: {\n        async onSubmit(_: any, computed: any) {\n            const req = await this.service.placeOrder(computed)\n            if (req) {\n                await this.service.printSpecimenLabel(req[0].order_id)\n                this.$router.push(`/patient/dashboard/${this.patientID}`)\n            } \n        },\n        getFacililityLocationField(): Field {\n            return {\n                id: 'target_lab',\n                helpText: 'Requesting location',\n                type: FieldType.TT_SELECT,\n                defaultValue: () => PatientLabService.getLocationName(),\n                validation: (val: Option) => Validation.required(val),\n                options: (_: any, filter='') => getFacilities(filter),\n                computedValue: (val: Option) => val.label,\n                config: {\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            }\n        },\n        getClinianGivenNameField(): Field {\n            const field = PersonField.getGivenNameField()\n            field.helpText = 'Requesting clinician - First name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.appearInSummary = () => false\n            return field\n        },\n        getClinianFamilyNameField(): Field {\n            const field = PersonField.getFamilyNameField()\n            field.helpText = 'Requesting clinician - Last name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.summaryMapValue = (v: any, f: any) => {\n                return {\n                    label: 'Clinician name', \n                    value: `${f.given_name.value} ${v.value}`\n                }\n            },\n            field.computedValue = (v: Option, f: any) => `${f.given_name.value} ${v.value}`\n            return field\n        },\n        getReasonForTestField(): Field {\n            return {\n                id: 'reason_for_test_id',\n                helpText: 'Reason for test',\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: any) => ConceptService.getCachedConceptID(\n                    val.value, true\n                ),\n                options: () => [\n                    {label: 'Routine', value: 'Routine'},\n                    {label: 'Targeted', value: 'Targeted'},\n                    {label: 'Confirmatory', value: 'Confirmatory'},\n                    {label: 'Repeat / Missing', value: 'Repeat / Missing'},\n                    {label: 'Stat', value: 'Stat'}\n                ]\n            }\n        },\n        getTestSpecimensField(): Field {\n            return { \n                id: 'specimen',\n                helpText: 'Select specimen',\n                type: FieldType.TT_SELECT,\n                condition: () => this.activityType === 'DRAW_SAMPLES',\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (v: Option) => ({'concept_id': v.value}),\n                options: async () => {\n                    const req = await OrderService.getSpecimens('')\n                    return req.map((d: any) => ({\n                        label: d.name, \n                        value: d.concept_id\n                    }))\n                },\n                config: {\n                    showKeyboard: true\n                }\n            }\n        },\n        getTestSelectionField(): Field {\n            let activeSpecimen = ''\n            return {\n                id: 'tests',\n                helpText: 'Select tests',\n                type: FieldType.TT_GRID_SELECTOR,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: Array<Option>) => {\n                    return val.map(v => ({'concept_id': v.value}))\n                },\n                options: async (f: any, c: any, listData: Option[]) => {\n                    if (f.specimen && f.specimen.label != activeSpecimen) {\n                        activeSpecimen = f.specimen.label\n                        const req = await OrderService.getTestTypesBySpecimen(\n                            f.specimen.label\n                        )\n                        return req.map((t: any) => ({\n                            label: t.name,\n                            value: t.concept_id,\n                            isChecked: false,\n                            other: t\n                        }))\n                    } else {\n                        return listData\n                    }\n                }\n            }\n        },\n        getTestCombinationField(): Field {\n            return {\n                id: 'combine_tests',\n                helpText: 'Combine test(s) in one order',\n                type: FieldType.TT_SELECT,\n                computedValue: (val: Option) => val.value === 'Yes',\n                condition: (f: any) => f.tests.length > 1,\n                validation: (val: Option) => Validation.required(val),\n                options: () => this.yesNoOptions()\n            }\n        }\n    }\n})\n","import { render } from \"./OrderTests.vue?vue&type=template&id=59c3af0c&ts=true\"\nimport script from \"./OrderTests.vue?vue&type=script&lang=ts\"\nexport * from \"./OrderTests.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}