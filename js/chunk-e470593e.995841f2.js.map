{"version":3,"sources":["webpack:///./src/apps/ART/services/adherence_service.ts","webpack:///./src/apps/ART/services/htn_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue?4744"],"names":["AdherenceService","patientID","providerID","lastDrugs","lastReceiptDate","date","Date","this","setDate","getDate","d","HisDate","toStandardHisFormat","AppEncounterService","getJson","drugs","reduce","receiptDate","drug","order","start_date","htnDrugs","BPManagementService","htnDrugReferences","map","drug_id","filter","includes","isEmpty","orderId","pillCount","buildValueNumber","drugId","adherence","getConceptID","concept","getSessionDate","given","pills","expected","Math","round","equivalentDailyDose","startDate","frequency","timeUnit","daysGone","calcTimeElapsed","parseFloat","toString","date1","dayjs","diff","actual","exp","HTN_SESSION_KEY","ObservationService","getFirstValueNumber","getFirstValueCoded","query","drugID","postJson","state","HCZ","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","notes","Enalapril","remaining","Amlodipine","Atenolol","sbp","dbp","bpTrail","Object","values","sort","a","b","bp","getBpGrade","firstRecentGrade","secondRecentGrade","FlowState","dformat","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","facts","ready","watch","handler","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","states","split","username","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getCachedApiDate","getBirthdate","$route","toUpperCase","usernameA","usernameB","p","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","isCondition","ignored","undefined","prop","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","mixins","EncounterMixinVue","drugObs","askReasonForPoorAdherence","calculationAgreementObs","saveAdherence","createEncounter","saveObservationList","toastWarning","buildAdherenceReport","lastVisit","getReceiptDate","daysElapsed","timeElapse","rowColors","indexes","class","cellColors","columns","rows","forEach","formatFrequency","expectedPills","calcPillsExpected","calculateAdherence","quantity","pillsBrought","adherenceStatus","isAdherenceGood","unAccountedDoses","calculateUnaccountedOrMissed","equivalent_daily_dose","row","match","calculateExpected","getAdherenceFields","checkDrugsBefore","id","helpText","FieldType","TT_ADHERENCE_INPUT","init","loadPreviousDrugs","receivedDrugsBefore","validation","val","Validation","empty","unload","buildAdherenceObs","order_id","buildPillCountObs","fdata","pills_brought","getLastDrugs","TT_TABLE_VIEWER","config","hiddenFooterBtns","TT_SELECT","buildValueCoded"],"mappings":"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","file":"js/chunk-e470593e.995841f2.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { DrugInterface } from \"@/interfaces/Drug\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { BPManagementService } from \"./htn_service\"\nimport dayjs from \"dayjs\"\n\nexport class AdherenceService extends AppEncounterService {\n    lastDrugs: Array<DrugInterface>\n    lastReceiptDate: string\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 68, providerID) //TODO: Use encounter type reference name\n        this.lastDrugs = []\n        this.lastReceiptDate = ''\n    }\n\n    async loadPreviousDrugs() {\n        const date = new Date(this.date)\n        date.setDate(date.getDate() - 1) // we don't want current date to count\n        const d = (date: string | Date) => HisDate.toStandardHisFormat(date)\n        const drugs = await AppEncounterService.getJson(\n            `patients/${this.patientID}/drugs_received`, { date: d(date) }\n        )      \n        if (drugs) {\n            this.lastReceiptDate = drugs.reduce((receiptDate: string | null,  drug: any) => {\n                return !receiptDate || (new Date(d(drug.order.start_date)) > new Date(receiptDate))\n                    ?  d(drug.order.start_date)\n                    : receiptDate\n            }, null)\n            const htnDrugs = BPManagementService.htnDrugReferences().map((d: any) => d.drug_id)\n            this.lastDrugs = drugs.filter((drug: DrugInterface) => \n               !htnDrugs.includes(drug.drug['drug_id']) && d(drug.order.start_date) === this.lastReceiptDate\n            )\n        }\n    }\n\n    getReceiptDate() { return this.lastReceiptDate }\n\n    getLastDrugs() { return this.lastDrugs }\n\n    receivedDrugsBefore() { return !isEmpty(this.lastDrugs) }\n\n    buildPillCountObs(orderId: number, pillCount: number) {\n        return this.buildValueNumber('Number of tablets brought to clinic', pillCount, null, orderId)\n    }\n\n    async buildAdherenceObs(orderId: number, drugId: number, adherence: number) {\n        const concept = await AppEncounterService.getConceptID('Drug adherence', true)\n        return {\n            'concept_id': concept,\n            'value_numeric': adherence,\n            'value_drug': drugId,\n            'value_modifier': '%',\n            'order_id': orderId,\n            'person_id': this.patientID,\n            'obs_datetime': AppEncounterService.getSessionDate()\n        }\n    }\n\n    isAdherenceGood(adherence: number) {\n        return adherence >= 95 && adherence <= 105\n    }\n\n    calculateAdherence(given: number, pills: number, expected: number) {\n        return Math.round(100 * (given - pills) / (given - expected));\n    }\n\n    calculateExpected(\n        given: number, \n        equivalentDailyDose: number, \n        startDate: string, \n        frequency: 'QOD' | 'QW'\n    ) {\n        const timeUnit = frequency === 'QW' ? 'week' : 'day'\n        const daysGone = this.calcTimeElapsed(startDate, timeUnit);\n        return (given - (daysGone * parseFloat(equivalentDailyDose.toString())));\n    }\n\n    calcTimeElapsed(date1: string, timeUnit: 'week' | 'day') {\n        return dayjs(this.date).diff(date1, timeUnit)\n    }\n\n    calculateUnaccountedOrMissed(expected: string, actual: string) {\n        const exp = (parseFloat(expected) - parseFloat(actual));\n        return (exp < 0 ? ((exp * -1) + ' missed') : (exp + ' unacc'));\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ObservationService } from \"@/services/observation_service\"\n\nexport enum HTN_SESSION_KEY {\n  Prescription = \"htnPrescription\"\n}\n\nexport class BPManagementService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n      super(patientID, 48, providerID) //TODO: Use encounter type reference name'\n    }\n\n    static getBpGrade(sbp: number, dbp: number) {\n      if ((sbp < 140) && (dbp < 90)) {\n        return \"normal\"\n      }\n      else if ((sbp >= 140 && sbp < 160) || (dbp >= 100 && dbp < 110)) {\n        return \"grade 1\"\n      }\n      else if ((sbp >= 180 && dbp > 110) || sbp >= 180) {\n        return \"grade 3\"\n      }\n      else if ((sbp >= 160 && sbp < 180) || (dbp >= 110)) {\n        return \"grade 2\"\n      }\n      return 'N/A'\n    }\n\n    /**\n     * BP is normointensive if two most recent consecutive tests are normal\n     * @param bpTrail \n     * @returns\n    */\n    static isBpNormotensive(bpTrail: any) {\n      const [ firstRecentGrade, secondRecentGrade ] = Object.values(bpTrail)\n        .sort((a: any, b: any) => a.date < b.date ? 1 : 0)\n        .map((bp: any) => this.getBpGrade(bp.sbp, bp.dbp))\n      return firstRecentGrade === 'normal' && secondRecentGrade === 'normal'\n    }\n\n    getSystolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Systolic blood pressure')\n    }\n\n    getDiastolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Diastolic blood pressure')\n    }\n\n    async onBpDrugs() {\n      const query = await ObservationService.getFirstValueCoded(this.patientID, 'Treatment status')\n      return query ? query === 'Yes' : false\n    }\n  \n    async getBPTrail() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/bp_trail`);\n    }\n    async getCurrentDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/current_bp_drugs`);\n    }\n    async getLastDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/last_bp_drugs_dispensation`);\n    }\n    async getAdherence(drugID: number, pills: number) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/remaining_bp_drugs`, {\n        'drug_id': drugID,\n        pills: pills\n      });\n    }\n    async enrollPatient(state: any) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/update_or_create_htn_state`, state);\n    }\n    static htnDrugReferences() {\n      return [\n        { \n          'drug_id': 275,\n          'drug_name': \"HCZ (25mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 942,\n          'drug_name': \"Enalapril (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 943,\n          'drug_name': \"Enalapril (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 558,\n          'drug_name': \"Amlodipine (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 559,\n          'drug_name': \"Amlodipine (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 117,\n          'drug_name': \"Atenolol (50mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 11,\n          'drug_name': \"Atenolol(100mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        }\n      ]\n    }\n    getDrugs() {\n        return {\n        HCZ: {\n          drugs: [\n            {\n              drugName: \"HCZ (25mg tablet)\",\n              drugID: 275,\n              amount: '25mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Enalapril: {\n          drugs: [\n            {\n              drugName: \"Enalapril (5mg tablet)\",\n              drugID: 942,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Enalapril (10mg tablet)\",\n              drugID: 943,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Amlodipine: {\n          drugs: [\n            {\n              drugName: \"Amlodipine (5mg tablet)\",\n              drugID: 558,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Amlodipine (10mg tablet)\",\n              drugID: 559,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Atenolol: {\n          drugs: [\n            {\n              drugName: \"Atenolol (50mg tablet)\",\n              drugID: 117,\n              amount: '50mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Atenolol(100mg tablet)\",\n              drugID: 11,\n              amount: '100mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n      }\n    }\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning } from \"@/utils/Alerts\"\nimport { AdherenceService } from \"@/apps/ART/services/adherence_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from 'lodash'\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        adherence: {} as any,\n        drugObs: [] as any,\n        askReasonForPoorAdherence: false,\n        calculationAgreementObs: [] as any,\n    }),\n    methods: {\n        async saveAdherence() {\n            await this.adherence.createEncounter()\n            const data = await Promise.all([...this.drugObs, ...this.calculationAgreementObs])\n            const obs = await this.adherence.saveObservationList(data)\n\n            if (!obs) return toastWarning('Unable to save patient observations')\n        },\n        buildAdherenceReport(data: any) {\n            const lastVisit = this.adherence.getReceiptDate()\n            const daysElapsed = this.adherence.calcTimeElapsed(lastVisit, 'day')\n            const timeElapse = ` Last visit: ${HisDate.toStandardHisDisplayFormat(lastVisit)} \n                (${daysElapsed} Days Elapsed)`\n            const rowColors = [{ indexes: [0, 3, 6], class: 'adherence-col-bg' }]\n            const cellColors: any = []\n            const columns = [timeElapse]\n            const rows = [\n                ['Prescription'],\n                ['Tabs given'],\n                ['Tabs per'],\n                ['Tabs remaining'],\n                ['Expected'],\n                ['Actual (counted)'],\n                ['Adherence'],\n                ['Doses missed/ Unaccounted for'],\n                ['Doses consumed'],\n                ['Art Adherence']\n            ]        \n            data.forEach((order: any, index: number) => {\n                const frequency = this.formatFrequency(order.frequency)\n                const expectedPills = this.calcPillsExpected(order)\n                const adherence = this.adherence.calculateAdherence(\n                    order.quantity, order.pillsBrought, expectedPills\n                )\n                const adherenceStatus = this.adherence.isAdherenceGood(adherence) \n                    ? 'Good adherence' \n                    : 'Explore problem'\n                const unAccountedDoses = this.adherence.calculateUnaccountedOrMissed(\n                    expectedPills, order.pillsBrought\n                )\n                columns.push(order.drug.name)\n                rows[0].push('')\n                rows[1].push(order.quantity)\n                rows[2].push(`${order.equivalent_daily_dose} <b>${frequency}</b>`)\n                rows[3].push('')\n                rows[4].push(expectedPills < 0 ? 0 : expectedPills)\n                rows[5].push(order.pillsBrought)\n                rows[6].push('')\n                rows[7].push(unAccountedDoses)\n                rows[8].push(`${adherence}%`)\n                rows[9].push(adherenceStatus)\n\n                cellColors.push({ \n                    index: index+1,\n                    row: 9, \n                    class: adherenceStatus.match(/good/i) ? 'adherence-txt-good' : 'adherence-txt-bad' \n                })\n            })\n            return [\n                { \n                    label: 'Selected Medication', \n                    value:'Table', \n                    other: { columns, rows, rowColors, cellColors }\n                }      \n            ]\n        },\n        formatFrequency(frequency: string) {\n            return `${frequency}`.match(/qod/i) \n                    ? 'QOD'\n                    : `${frequency}`.match(/weekly/i) \n                    ? 'QW'\n                    : frequency\n        },\n        calcPillsExpected(d: any) {\n            return this.adherence.calculateExpected(\n                d.quantity, \n                d.equivalent_daily_dose, \n                d.order.start_date,\n                this.formatFrequency(d.frequency) as 'QOD' | 'QW'\n            )\n        },\n        getAdherenceFields(checkDrugsBefore=false): Array<Field> {\n            return [\n                {\n                    id: 'pills_brought',\n                    helpText: 'Pills remaining (brought to clinic)',\n                    type: FieldType.TT_ADHERENCE_INPUT,\n                    init: async () => {\n                        this.adherence = new AdherenceService(this.patientID, this.providerID)\n                        await this.adherence.loadPreviousDrugs()\n                        return true\n                    },\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    validation: (val: any) => {\n                        if (Validation.required(val)) return ['No drugs available']\n\n                        const empty = val.map((i: Option) => i.value === '')\n                        \n                        return  empty.some(Boolean) ? ['Some values are missing'] : null\n                    },\n                    unload: async (data: any) => {\n                        this.drugObs = []\n                        data.forEach(async(val: Option) => {\n                            const {drug, order } = val.other\n                            const data = { ...val.other, pillsBrought: val.value }\n                            const adherence = this.adherence.calculateAdherence(\n                                data.quantity, data.pillsBrought, this.calcPillsExpected(data)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildAdherenceObs(order.order_id, drug.drug_id, adherence)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildPillCountObs(order.order_id, val.value)\n                            )\n\n                            if (!this.askReasonForPoorAdherence) {\n                                this.askReasonForPoorAdherence = !this.adherence.isAdherenceGood(data)\n                            }\n                        })\n                    },\n                    options: (fdata: any) => {\n                        if (!isEmpty(fdata.pills_brought)) {\n                            return fdata.pills_brought\n                        }\n                        return this.adherence.getLastDrugs().map((data: any) => ({\n                            label: data.drug.name,\n                            value: '',\n                            other: {\n                                ...data\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: \"adherence_report\",\n                    helpText: \"ART adherence\",\n                    type: FieldType.TT_TABLE_VIEWER,\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    options: (d: any) => this.buildAdherenceReport(\n                        d.pills_brought.map((i: Option) => ({ \n                            ...i.other, pillsBrought: i.value\n                        }))\n                    ),\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    }\n                },\n                {\n                    id: \"agree_with_calculation\",\n                    helpText: \"Agree with adherence calculation\",\n                    type: FieldType.TT_SELECT,\n                    condition: () => this.askReasonForPoorAdherence,\n                    validation: (val: Option) => Validation.required(val),\n                    unload: ({ value }: Option) => {\n                        this.calculationAgreementObs = [ this.adherence.buildValueCoded(\n                            'Reason for poor treatment adherence', value\n                        )]\n                    },\n                    options: () => [\n                        { label: 'Yes', value: 'Yes' },\n                        { label: 'No', value: 'No' }\n                    ]\n                }\n            ]\n        }\n    }\n})\n","import script from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}