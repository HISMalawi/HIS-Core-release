{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/LabResults.vue?3f7e","webpack:///./src/apps/ANC/anc_global_props.ts","webpack:///./src/apps/ANC/Services/anc_lab_result_service.ts","webpack:///./src/apps/ANC/Views/Encounters/LabResults.vue","webpack:///./src/apps/ANC/Views/Encounters/LabResults.vue?9f2f"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","formFields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","ANC_GLOBAL_PROP","AncLabResultService","patientID","providerID","hivStatus","artStatus","arvNumber","arvStartDate","isPregnancyTestDone","isSubsequentVisit","this","match","AppEncounterService","getFirstValueNumber","sys","ds","Service","getJson","programID","res","getFirstValueCoded","recencyEssayActivated","GlobalPropertyService","isProp","RECENCY_ESSAY_ACTIVATED","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","riskOfPreclampsia","service","watch","ready","handler","loadSubsequentVisit","loadArtStatus","ANC_PROP","getFields","immediate","methods","computedData","resolveObs","obs","createEncounter","saveObservationList","nextTask","id","helpText","type","FieldType","TT_SUMMARY","condition","isHivPositive","options","label","value","getHivStatus","getArtStatus","HisDate","toStandardHisDisplayFormat","getArvStartDate","getArvNumber","TT_MULTIPLE_YES_NO","f","lab_results","isPrengnacyTestDone","push","toYesNoOption","concept","validation","v","Validation","required","computedValue","map","d","buildValueCoded","other","TT_SELECT","inArray","mapStrToOptions","generateDateFields","minDate","patient","getBirthdate","maxDate","getDate","estimation","allowUnknown","prev_hiv_test_result","computeValue","date","buildValueDate","yesNoOptions","TT_TEXT","buildValueText","on_art","recency_essay","TT_MULTIPLE_SELECT","find","onValueUpdate","listData","l","isChecked","hivPos","toOption","urine","isAtRiskOfPreEclampsia","alertConfirmation","header","cancelBtnLabel","confirmBtnLabel","ok","config","footerBtns","name","slot","onClickComponentEvents","refreshOptions","o","onClick","exitsForm","available_test_results","includes","hiv_status","on_art_1","TT_NUMBER","validateSeries","rangeOf","buildValueNumber","buildOptionsOnce","available_urine_tests","__exports__"],"mappings":"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","file":"js/chunk-2d21f489.92343dc7.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { GlobalPropertyService } from \"@/services/global_property_service\"\n\nexport enum ANC_GLOBAL_PROP {\n    RECENCY_ESSAY_ACTIVATED = 'recency_essay_activated'\n}\n\nfunction recencyEssayActivated() {\n    return GlobalPropertyService.isProp(`${ANC_GLOBAL_PROP.RECENCY_ESSAY_ACTIVATED}=Yes`)\n}\n\nexport default {\n    recencyEssayActivated\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { Service } from \"@/services/service\";\n\nexport class AncLabResultService extends AppEncounterService {\n    hivStatus: string;\n    artStatus: string;\n    arvNumber: string;\n    arvStartDate: string;\n    isSubsequentVisit: boolean;\n    isPregnancyTestDone: boolean;\n    constructor(patientID: number, providerID: number){\n        super(patientID, 32, providerID)\n        this.hivStatus = ''\n        this.artStatus = ''\n        this.arvNumber = ''\n        this.arvStartDate = ''\n        this.isPregnancyTestDone = false\n        this.isSubsequentVisit = false\n    }\n\n    getHivStatus() {\n        return this.hivStatus\n    }\n\n    getArtStatus() {\n        return this.artStatus\n    }\n\n    getArvNumber() {\n        return this.arvNumber\n    } \n\n    getArvStartDate() {\n        return this.arvStartDate\n    }\n\n    isHivPositive() {\n        return this.hivStatus.match(/positive/i) ? true : false\n    }\n\n    async isAtRiskOfPreEclampsia() {\n        const sys = await AppEncounterService.getFirstValueNumber(this.patientID, 'Systolic blood pressure')\n        const ds = await AppEncounterService.getFirstValueNumber(this.patientID, 'Diastolic blood pressure')\n        return sys && ds && sys >= 140 && ds >= 90\n    }\n\n    async loadSubsequentVisit() {\n        const res: any = await Service.getJson(`programs/${this.programID}/patients/${this.patientID}/subsequent_visit`)\n        if (res) {\n            this.hivStatus = res['hiv_status']\n            /**\n             * On new pregnancies for existing patients, HIV status is empty even if the patient is positive!! \n             * So we need to check concepts if the patient is really positive\n             */\n            if (!this.hivStatus) {\n                const res = await this.getFirstValueCoded('HIV status')\n                this.hivStatus = `${res}`.match(/positive/i) ? 'Positive' : ''\n            }\n            this.isSubsequentVisit = res['subsequent_visit']\n            this.isPregnancyTestDone = res['pregnancy_test']\n        }\n    }\n\n    async loadArtStatus() {\n        const res = await Service.getJson(`programs/${this.programID}/patients/${this.patientID}/art_hiv_status`)\n        if (res) {\n            this.hivStatus = res['hiv_status'] || this.hivStatus\n            this.artStatus = res['art_status'] || ''\n            this.arvNumber = res['arv_number'] || ''\n            this.arvStartDate = res['arv_start_date'] || ''\n        }\n    }\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncLabResultService } from \"@/apps/ANC/Services/anc_lab_result_service\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { ObsValue } from '@/services/observation_service'\nimport { generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper'\nimport HisDate from \"@/utils/Date\"\nimport ANC_PROP from \"@/apps/ANC/anc_global_props\"\nimport { alertConfirmation } from '@/utils/Alerts'\nimport { find } from 'lodash'\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    arvNumber: '' as string,\n    hivStatus: '' as string,\n    artStatus: '' as string,\n    arvStartDate: '' as string,\n    recencyEssayActivated: false as boolean,\n    riskOfPreclampsia: null as boolean | null,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n            this.service = new AncLabResultService(this.patientID, this.providerID)\n            await this.service.loadSubsequentVisit()\n            await this.service.loadArtStatus()\n            this.recencyEssayActivated = await ANC_PROP.recencyEssayActivated()\n            this.formFields = this.getFields()\n        } \n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData)\n      await this.service.createEncounter()\n      await this.service.saveObservationList(obs as ObsValue[])\n      this.nextTask()\n    },\n    getFields(): Field[] {\n        return [\n            {\n                id: 'art_summary',\n                helpText: 'ART Summary',\n                type: FieldType.TT_SUMMARY,\n                condition: () => this.service.isHivPositive(),\n                options: () => {\n                    return [\n                        {\n                            label: 'HIV Status', \n                            value: `\n                                <b style=\"color:${this.service.isHivPositive() ? 'red': 'green'}\">\n                                    ${this.service.getHivStatus()}\n                                </b>\n                            `\n                        },\n                        {\n                            label: 'On Art', value: this.service.getArtStatus() || 'N/A'\n                        },\n                        {\n                            label: 'Art Start date', value: HisDate.toStandardHisDisplayFormat(this.service.getArvStartDate()) || 'N/A'\n                        },\n                        {\n                            label: 'ARV Number', value: this.service.getArvNumber() || 'N/A'\n                        }\n                    ]\n                }\n            },\n            {\n                id: 'lab_results',\n                helpText: 'Lab Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: () => !this.service.isPregnancyTestDone && !this.hivStatus,\n                options: (f: any) => {\n                    if (f.lab_results) {\n                        return f.lab_results\n                    }\n                    const options: Option[] = []\n                    if (!this.service.isPrengnacyTestDone) {\n                        options.push(this.toYesNoOption('Pregnancy test done', { concept: 'B-HCG'}))\n                    }\n                    if (!this.service.hivStatus) {\n                        options.push(this.toYesNoOption('Previous HIV test done', { concept: 'Previous HIV test done'}))\n                    }\n                    return options\n                },\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option[]) => v.map(d => this.service.buildValueCoded(d.other.concept, d.value))\n            },\n            {\n                id: 'prev_hiv_test_result',\n                helpText: 'Previous HIV test results',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => this.inArray(\n                    f.lab_results, (v: Option) => v.label === 'Previous HIV test done' && v.value === 'Yes'), \n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive',\n                        'Inconclusive',\n                        'Unknown'\n                    ])\n                },\n                computedValue: (v: Option) => this.service.buildValueCoded('Previous HIV Test Results', v.value)\n            },\n            ...generateDateFields({\n                id: 'prev_hiv_test_date',\n                helpText: 'Previous HIV test',\n                required: true,\n                minDate: () => this.patient.getBirthdate(),\n                maxDate: () => this.service.getDate(),\n                estimation: {\n                    allowUnknown: false\n                },\n                condition: (f: any) => f.prev_hiv_test_result?.value ? true : false,\n                computeValue: (date: string) => this.service.buildValueDate('Previous HIV Test Date', date)\n            }),\n            {\n                id: 'on_art',\n                helpText: 'Patient on ART',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('On Art', v.value),\n                condition: (f: any) => f.prev_hiv_test_result.value === 'Positive',\n                options: () => this.yesNoOptions()\n            },\n            {\n                id: 'arv_number',\n                helpText: 'ARV Number',\n                type: FieldType.TT_TEXT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueText('Art number', v.value),\n                condition: (f: any) => f.on_art.value === 'Yes'\n            },\n            {\n                id: 'recency_essay',\n                helpText: 'Rapid Recency Essay - Asante Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: (f: any) => f.prev_hiv_test_result.value === 'Positive' && this.recencyEssayActivated,\n                computedValue: (v: Option[]) => v ? v.map(d => this.service.buildValueCoded(d.label, d.value)) : null,\n                options: (f: any) => {\n                    if (f.recency_essay) return f.recency_essay\n                    return [\n                        this.toYesNoOption('Line 1. Control Line Present'),\n                        this.toYesNoOption('Line 2. Positive Verification Line Present'),\n                        this.toYesNoOption('Line 3. Long-Term Line Present')\n                    ]\n                }\n            },\n            {\n                id: 'available_test_results',\n                helpText: 'Available Lab Tests',\n                type: FieldType.TT_MULTIPLE_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option[]) => {\n                    if (find(v, { label: 'None'})) {\n                        return this.service.buildValueCoded('Lab test done', 'No')\n                    }\n                    return null\n                },\n                onValueUpdate(listData: Option[], value: Option) {\n                    return listData.map(l => {\n                        if (value.value === 'None' && l.value !='None') {\n                            l.isChecked = false\n                        }\n                        if (value.value != 'None' && value.isChecked && l.value === 'None') {\n                            l.isChecked = false\n                        }\n                        return l\n                    })\n                },\n                options: async (f: any) => {\n                    const options: Option[] = []\n                    const hivPos = !this.service.isHivPositive() ? f.prev_hiv_test_result?.value === 'Positive' : true\n                    if (!hivPos) {\n                        options.push(this.toOption('HIV'))\n                    }\n                    options.push(this.toOption('HB'))\n                    options.push(this.toOption('Syphilis'))\n                    options.push(this.toOption('Malaria'))\n                    options.push(this.toOption('Blood Group'))\n                    const urine: Option = {\n                        label: 'Urine',\n                        value: 'Urine',\n                        isChecked: false\n                    }\n                    if (this.riskOfPreclampsia === null) {\n                        this.riskOfPreclampsia = await this.service.isAtRiskOfPreEclampsia()\n                        if (this.riskOfPreclampsia) {\n                            const ok: boolean = await alertConfirmation(\n                                'Select urine test to conduct urine protein test', {\n                                header: 'Client is at risk of pre-eclampsia.',\n                                cancelBtnLabel: 'Remind later',\n                                confirmBtnLabel: 'Select Urine Test'\n                            })\n                            urine.isChecked = ok\n                        }\n                    }\n                    return [...options, urine, this.toOption('None')]\n                },\n                config: {\n                    footerBtns: [\n                        {\n                            name: \"None\",\n                            slot: \"end\",\n                            onClickComponentEvents: {\n                                refreshOptions: (_: any, listData: Option[]) => {\n                                    return listData.map(o => {\n                                        o.isChecked = o.label === 'None'\n                                        return o\n                                    })\n                                }\n                            },\n                            onClick: () => 'None'\n                        }\n                    ]\n                },\n                exitsForm: (f: any) => find(f.available_test_results, {label: 'None'}),\n            },\n            {\n                id: 'hiv_status',\n                helpText: 'HIV Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('HIV'),\n                computedValue: (v: Option) => this.service.buildValueCoded('HIV status', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive',\n                        'Inconclusive'\n                    ])\n                }\n            },\n            {\n                id: 'on_art_1',\n                helpText: 'Patient on ART',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.hiv_status.value === 'Positive',\n                computedValue: (v: Option) => this.service.buildValueCoded('On Art', v.value),\n                options: () => this.yesNoOptions()\n            },\n            {\n                id: 'arv_number_1',\n                helpText: 'ARV Number',\n                type: FieldType.TT_TEXT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueText('Art number', v.value),\n                condition: (f: any) => f.on_art_1.value === 'Yes'\n            },\n            {\n                id: 'recency_essay_1',\n                helpText: 'Rapid Recency Essay - Asante Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: (f: any) => f.hiv_status.value === 'Positive' && this.recencyEssayActivated,\n                computedValue: (v: Option[]) => v ? v.map(d => this.service.buildValueCoded(d.label, d.value)) : null,                \n                options: () => {\n                    return [\n                        this.toYesNoOption('Line 1. Control Line Present'),\n                        this.toYesNoOption('Line 2. Positive Verification Line Present'),\n                        this.toYesNoOption('Line 3. Long-term Line Present')\n                    ]\n                }\n            },\n            {\n                id: 'hb_result',\n                helpText: 'HB Test Result (g/dl)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 2, 16)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('HB Test Result', v.value),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('HB'),\n            },\n            {\n                id: 'syphilis',\n                helpText: 'Syphilis Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('Syphilis Test Result', v.value),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Syphilis'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive'\n                    ])\n                }\n            },\n            {\n                id: 'malaria',\n                helpText: 'Malaria Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Malaria'),\n                computedValue: (v: Option) => this.service.buildValueCoded('Malaria Test Result', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive'\n                    ])\n                }\n            },\n            {\n                id: 'blood_group',\n                helpText: 'Blood Group Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Blood Group'),\n                computedValue: (v: Option) => this.service.buildValueText('Blood group', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"A+\",\n                        \"A-\",\n                        \"B+\",\n                        \"B-\",\n                        \"AB+\",\n                        \"AB-\",\n                        \"O+\",\n                        \"O-\"\n                    ])\n                }\n            },\n            {\n                id: 'available_urine_tests',\n                helpText: 'Available Urine Tests Results',\n                type: FieldType.TT_MULTIPLE_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Urine'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Protein\",\n                        \"Glucose\",\n                        \"WBC\",\n                        \"RBC\",\n                        \"Nitrate\"\n                    ])\n                },\n                config: {\n                    buildOptionsOnce: true\n                }\n            },\n            {\n                id: 'protein',\n                helpText: 'Urine Protein Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Protein'),\n                computedValue: (v: Option) => this.service.buildValueText('Urine protein', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Negative\",\n                        \"(+)\",\n                        \"+\",\n                        \"++\",\n                        \"+++\",\n                        \"++++\",\n                    ])\n                }\n            },\n            {\n                id: 'glucose',\n                helpText: 'Glucose Test Result (mg/dl)',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Glucose'),\n                computedValue: (v: Option) => this.service.buildValueText('Blood glucose', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Normal\",\n                        \"+\",\n                        \"++\",\n                        \"+++\"\n                    ])\n                }\n            },\n            {\n                id: 'wbc',\n                helpText: 'White Blood Cells Test Result (cmm)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 1000000)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('White blood cells', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('WBC'),\n            },\n            {\n                id: 'rbc',\n                helpText: 'Red Blood Cells Test Result (cmm)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 1000000)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('Red blood cells', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('RBC'),\n            },\n            {\n                id: 'nitrate',\n                helpText: 'Nitrate Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('Urine Nitrate Test', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Nitrate'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Negative\",\n                        \"Trace\",\n                        \"Positive\"\n                    ])\n                }\n            }\n        ]\n    }\n  }\n})\n","import { render } from \"./LabResults.vue?vue&type=template&id=3f9cce64&ts=true\"\nimport script from \"./LabResults.vue?vue&type=script&lang=ts\"\nexport * from \"./LabResults.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}