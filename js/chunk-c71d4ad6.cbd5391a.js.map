{"version":3,"sources":["webpack:///./src/services/patient_lab_result_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/HTS/views/encounters/HtsDBSResult.vue?fc5d","webpack:///./src/apps/HTS/views/encounters/HtsDBSResult.vue","webpack:///./src/apps/HTS/views/encounters/HtsDBSResult.vue?61e4","webpack:///./src/utils/GuidelineEngine.ts"],"names":["PatientLabResultService","AppEncounterService","constructor","patientId","super","this","patientID","testTypeID","resultDate","testID","createLabResult","measures","postJson","encounterID","date","getTestID","getTestTypeID","setTestTypeID","test","setResultDate","setTestID","getTestsWithoutResults","OrderService","getOrders","status","getTestIndicators","getJson","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","providerID","facts","age","gender","isEnrolledInProgam","formLabel","ready","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","isOnline","isOfflineMode","getOfflinePerson","person","birthdate","dayjs","ProgramService","getSessionDate","diff","saveObsOffline","encounterTypeID","formdata","obs","labOrders","observations","id","uploadStatus","meta","resolveObs","computedData","enc","createEncounter","saveObservationList","callback","error","Error","formData","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","toastDanger","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","_","IonPage","mixins","EncounterMixinVue","lab","watch","handler","ordersWithoutResultsField","resultField","resultDateField","immediate","f","c","result","result_date","orders","helpText","FieldType","TT_SELECT","init","r","specimen","tests","some","t","isRequired","accession_number","toDate","order_date","concept_id","TT_FULL_DATE","validation","orderDate","format","STANDARD_DATE_FORMAT","Date","TT_TEXT","config","customKeyboard","onValue","toastWarning","finalComputedValue","indicator","substring","value_modifier","charAt","value_type","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info"],"mappings":"4LAGM,MAAOA,UAAgCC,OAKzCC,YAAYC,GACRC,MAAMD,EAAW,IAAG,+JACpBE,KAAKC,UAAYH,EACjBE,KAAKE,YAAc,EACnBF,KAAKG,WAAa,GAClBH,KAAKI,QAAU,EAGnBC,gBAAgBC,GACZ,OAAOV,OAAoBW,SAAS,aAAaP,KAAKI,iBAAkB,CACpE,aAAgBJ,KAAKQ,YACrBC,KAAMT,KAAKG,WACXG,aAIRI,YACI,OAAOV,KAAKI,OAGhBO,gBACI,OAAOX,KAAKE,WAGhBU,cAAcC,GACVb,KAAKE,WAAaW,EAGtBC,cAAcL,GACVT,KAAKG,WAAaM,EAGtBM,UAAUF,GACNb,KAAKI,OAASS,EAGlBG,yBACI,OAAOC,OAAaC,UAAUlB,KAAKC,UAAW,CAC1CkB,OAAQ,UAIhBC,oBACE,OAAOH,OAAaI,QAClB,6BAA8B,CAC9B,aAAgBrB,KAAKE,gB,oECjDjBoB,E,yEAAZ,SAAYA,GACRA,iCACAA,+CACAA,uDACAA,6CACAA,yBACAA,kBANJ,CAAYA,MAAS,KAQrB,MAAMC,EAAWC,GAAcC,OAAQC,2BAA2BF,GAErDG,EAA2D,CACpE,qEAAsE,CAClEC,SAAU,EACVC,QAAS,CACLC,MAAOC,OAASC,uBACZ,MAAMC,QAAeC,eACjB,6BACA,mBAAmBX,EAAQS,GAC3B,qEACA,CACI,CAAEG,KAAM,SAAUC,KAAM,MAAOC,MAAO,WACtC,CAAEF,KAAM,iBAAkBC,KAAM,MAAOC,MAAO,WAC9C,CAAEF,KAAM,kBAAmBC,KAAM,MAAOC,MAAO,YAGvD,MAAkB,WAAXJ,EACDX,EAAUgB,wBACC,mBAAXL,EACAX,EAAUiB,uBACVjB,EAAUkB,WAGxBC,WAAY,CACRC,QAAQA,GACJ,MAAmB,iBAAZA,GAEXV,iBAAiBW,GAAmB,YAAEC,IAClC,OAAOA,GAAeD,KAIlC,+DAAgE,CAC5Df,SAAU,EACVC,QAAS,CACLC,MAAOC,OAASc,YAAWD,kBACvB,MAAMX,QAAeC,eACjB,6BAA8B,GAC9B,gBAAgBX,EAAQqB,iCAA2CrB,EAAQsB,KAC3E,CACI,CAAEV,KAAM,SAAUC,KAAM,MAAOC,MAAO,UACtC,CAAEF,KAAM,sBAAuBC,KAAM,MAAOC,MAAO,aAG3D,MAAkB,wBAAXJ,EACDX,EAAUwB,oBACVxB,EAAUgB,0BAGxBG,WAAY,CACRI,UAAUA,GAAmB,YAAED,IAC3B,OAAOA,EAAcC,KAIjC,oDAAqD,CACjDjB,SAAU,EACVC,QAAS,CACLkB,UAAWhB,OAASiB,YAAWC,gBAAeL,cAAaM,cACvD,MAAMC,QAAcC,eAChB,gCAAgCH,EAChC,QAAQ1B,EAAQqB,iBAA2BrB,EAAQ2B,KACnDF,EACA,CACI,CAAEb,KAAM,SAAUE,MAAO,SAAUD,KAAM,QAASiB,KAAM,WACxD,CAAElB,KAAM,UAAWC,KAAM,MAAOiB,KAAM,YAG9C,MAAwB,WAAjBF,EAAMlB,OACP,CAAEqB,OAAQ,EAAGC,UAAWjC,EAAUgB,yBAClC,CAAEgB,MAAOH,EAAMJ,UAAWQ,UAAWjC,EAAUkC,gBAG7Df,WAAY,CACRgB,UAAUC,GACN,OAAOA,M,6GCvERC,+BAAgB,CAC3BC,WAAY,CAAEC,wBACdC,KAAM,KAAM,CACRC,UAAW,KACXC,QAAS,GACTC,OAAQ,GACRhE,UAAW,GACXiE,YAAa,EACblB,UAAW,GACXmB,MAAO,CACHC,KAAM,EACNC,OAAQ,GACRxB,UAAW,GACXD,YAAa,GACbM,QAAS,GACToB,oBAAoB,EACpBrB,cAAe,MACfD,UAAW,GACXS,WAAW,EACXf,QAAS,GACTV,iBAAkB,IAEtBuC,UAAW,GACXC,OAAO,IAEXC,UACQzE,KAAK0E,OAAOC,OAAOC,aACnB5E,KAAK+D,UAAY/D,KAAK0E,OAAOC,OAAOC,WACpC5E,KAAKC,UAAY4E,SAAS,GAAG7E,KAAK0E,OAAOC,OAAOC,YAC5C5E,KAAK8E,YACL9E,KAAK+E,kBAELC,OAAMC,IAAI,iBAAkB,CAAEhF,UAAWD,KAAKC,YACzCiF,KAAKC,IACFnF,KAAKgE,QAAUmB,EACVC,qBAAQpF,KAAKgE,UACdqB,iBAAUC,aAAatF,KAAKgE,SAEhChE,KAAKuF,oBAAoBL,KAAK,KAC1BlF,KAAKwF,2BAA2BN,KAAK,KACjClF,KAAKwE,OAAQ,IACdiB,MAAOC,GAAMC,QAAQC,IAAIF,MAC7BD,MAAM,KACDzF,KAAK8E,aACL9E,KAAK+E,wBAOjCc,SAAU,CACNC,oBAA8B,OAAO9F,KAAK+F,wBAE9CC,QAAS,CACLlB,YACI,OAAQmB,OAAS3C,OAAS4C,OAAc5C,OAE5C2C,WACI,OAAOA,OAAS3C,OAEpB4C,gBACI,OAAOA,OAAc5C,OAEzByB,kBACI,MAAM,iBAAEoB,GAAqBd,iBACvBe,EAASD,EAAiBnG,KAAK+D,WAChCqC,IACLpG,KAAKmE,MAAMtB,UAAYuD,EAAOC,UAC9BrG,KAAKmE,MAAMC,IAAMkC,IAAMC,OAAeC,kBAAkBC,KACpDzG,KAAKmE,MAAMtB,UAAW,SAE1B7C,KAAKmE,MAAME,OAAS+B,EAAO/B,OAC3BrE,KAAKwE,OAAQ,IAEjBkC,eAAeC,EAAyBC,EAAeC,EAAUC,EAA4B3F,EAAO,WAChGkE,iBAAUqB,eAAe,CACrBK,aAAcF,EACdG,GAAIhH,KAAK+D,UACTkD,aAAc9F,EACd8B,cAAejD,KAAK0E,OAAOvC,KAC3BwE,gBAAiBA,EACjBO,KAAMN,EACNE,eAGR,kCAAkCnC,EAAO,IACrC,MAAMkC,QAAY7G,KAAKmH,WAAWxC,EAAOyC,cACzC,IAAIjG,EAAS,UACb,IACI,MAAMkG,EAAM,IAAIzH,OACZI,KAAKC,UACL0E,EAAOgC,gBACP3G,KAAKkE,kBAEEmD,EAAIC,yBACAD,EAAIE,oBAAoBV,KAC/B1F,EAAS,WAGc,oBAApBwD,EAAO6C,gBACR7C,EAAO6C,SAASH,GAE5B,MAAO3B,GAEDvE,EADA,gCAAgCN,KAAK,GAAG6E,GAC/B,eAEA,YAEbC,QAAQ8B,MAAM,GAAG/B,GAErB,GAAe,cAAXvE,EACA,MAAM,IAAIuG,MAAM,sBAEpB1H,KAAK0G,eACD/B,EAAOgC,gBACPhC,EAAOgD,SACPd,EACAlC,EAAOmC,UACP3F,GAECwD,EAAOiD,cAAc5H,KAAK6H,YAEnCC,aAAaC,EAAkBpD,EAAO,MAClC,MAAMqD,EAAc,GAmBpB,GAlBAA,EAAO1G,EAAUkC,cAAiBT,IAC9B,MAAQkF,GAAalF,EAAUmF,MAAM,KAC/BC,EAAWC,kBAAKpI,KAAKgD,UAAW,CAAEiF,aAExC,OADIE,IAAUnI,KAAKkE,WAAaiE,EAASE,WAClC/G,EAAUkB,UAErBwF,EAAO1G,EAAUwB,qBAAuB,KACpC9C,KAAKsI,QAAQC,KAAK,kDAAkDvI,KAAKC,WAClEqB,EAAUkH,MAErBR,EAAO1G,EAAUiB,wBAA0B,KACvCvC,KAAKsI,QAAQC,KAAK,qBAAqBvI,KAAKC,WACrCqB,EAAUkH,MAErBR,EAAO1G,EAAUgB,yBAA2B,KACxCtC,KAAKyI,uBACEnH,EAAUkH,MAEjBT,KAASC,EACT,OAAOA,EAAOD,GAAOpD,IAG7B,iCACI,MAAM+D,EAAWC,eAAkB3I,KAAKmE,MAAOxC,GAC/C,IAAI,MAAMiH,KAASF,EAAU,SACzB,MAAMG,EAAUH,EAASE,GACzB,GAAW,OAAPC,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAShH,eAAO,OAAhB,EAAkBC,MAAO,OACzB,MAAMX,EAASnB,KAAK8H,mBAA2B,OAAPe,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAShH,eAAO,WAAT,EAAP,EAAkBC,MAAM9B,KAAKmE,SACrE,GAAIhD,IAAWG,EAAUkH,KAAM,OAEnC,GAAW,OAAPK,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAShH,eAAO,OAAhB,EAAkBkB,UAAW,OAC7B,MAAMA,QAAyB,OAAP8F,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAShH,eAAO,WAAT,EAAP,EAAkBkB,UAAU/C,KAAKmE,QACzDnE,KAAK8H,aAAa/E,EAAUQ,UAAWR,EAAUO,UAI7D,0BACI,IACI,MAAMwF,QAAgB9D,OAAMC,IAAI,kBAAmB,CAAEhF,UAAWD,KAAKC,YACrED,KAAKmE,MAAMG,mBAAqBwE,EAAQC,YAAcxC,OAAeyC,eACrEhJ,KAAKmE,MAAMzB,QAAUoG,EAAQpG,QAC7B1C,KAAKmE,MAAMnC,iBAAmB8G,EAAQnG,UACxC,MAAO+C,GACLC,QAAQ8B,MAAM/B,GACduD,eAAY,GAAGvD,GAEnB1F,KAAKmE,MAAMvB,YAAc2D,OAAeC,iBACxCxG,KAAKmE,MAAMjB,QAAUqD,OAAe2C,mBACpClJ,KAAKmE,MAAMV,UAAY8C,OAAe7C,QACtC1D,KAAKmE,MAAMtB,UAAY7C,KAAKgE,QAAQmF,eACpCnJ,KAAKmE,MAAMC,IAAMpE,KAAKgE,QAAQoF,SAC9BpJ,KAAKmE,MAAMlB,cAAgBjD,KAAK0E,OAAOvC,KACjCnC,KAAK0E,OAAOvC,KAAKkH,WAAWC,cAC5B,MACF/C,OAAe7C,UACf1D,KAAKgD,gBAAkBgC,OAAMC,IAAI,aACjCjF,KAAKmE,MAAMnB,UAAYhD,KAAKgD,UACvBuG,KAAK,CAACC,EAAQC,KACX,MAAMC,EAAYF,EAAEvB,SAASqB,cACvBK,EAAYF,EAAExB,SAASqB,cAC7B,OAAOI,EAAYC,GAAa,EAAID,EAAYC,EAAa,EAAI,IAEpEC,IAAKC,IAAU,MACZ,IAAI1H,EAAO,GAAG0H,EAAE5B,SAChB,IAAK7C,qBAAS,OAADyE,QAAC,IAADA,GAAS,QAAR,EAADA,EAAGzD,cAAM,WAAR,EAAD,EAAW0D,OAAQ,OAC5B,MAAQC,IAAuB,QAAR,EAAAF,EAAEzD,cAAM,aAAR,EAAU0D,QAAS,GAC1C3H,GAAQ,KAAK4H,EAAWC,cAAcD,EAAWE,eAErD,OAAO9H,MAIvB+H,SAASC,EAAeC,EAAM,IAC1B,MAAO,CACHD,QACA7G,MAAO6G,EACPC,UAGRC,gBAAgBC,GACZ,OAAOA,EAAMV,IAAIW,GAAkB,kBAANA,GAA+B,kBAANA,EAC/C,CAAEJ,MAAOI,EAAGjH,MAAOiH,GAAMA,IAGpCxE,sBACI,MAAO,sBAAsB/F,KAAK0E,OAAOC,OAAOC,YAEpD6D,uBACI,OAAOzI,KAAKsI,QAAQC,KAAK,CAACiC,KAAMxK,KAAK+F,yBAEzC,wBACW0E,OAAkBC,OAAO,CAC5BC,iBAAiB,EACjBC,QAAS,0BACTC,UACJ,IACI,MAAM7D,EAAKhH,KAAK+D,WAAa/D,KAAKC,gBAC5B4H,eAASb,EAAIhH,KAAKsI,QAAStI,KAAK0E,QACxC,MAAOgB,GACLC,QAAQ8B,MAAM/B,GAElB+E,OAAkBK,SAAS5F,KAAK6F,GAAKA,GAAKN,OAAkBO,YAEhEC,eACI,MAAO,CACH,CAAEd,MAAO,MAAO7G,MAAO,OACvB,CAAE6G,MAAO,KAAM7G,MAAO,QAG9B4H,cAAcf,EAAeC,EAAW,IACpC,MAAO,CACHD,QACA7G,MAAO,GACP8G,MAAO,IACAA,EACHe,OAAQnL,KAAKiL,kBAIzBG,WAAWC,GACP,OAAOA,EAAQzB,IAAK0B,IACT,CAAEnB,MAAOmB,EAAQhI,MAAOgI,MAGvCC,qBAAqBF,GACjB,MAAMG,EAAkB,GACxB,IAAI,MAAMF,KAAUD,GACS,mBAAdC,EAAO,IACVA,EAAO,KAGfE,EAAMjD,KAAKvI,KAAKkK,SAASoB,EAAO,KAEpC,OAAOE,GAEXC,sBACI,MAAO,CACH,CAAEtB,MAAO,MAAO7G,MAAO,OACvB,CAAE6G,MAAO,KAAM7G,MAAO,MACtB,CAAE6G,MAAO,UAAW7G,MAAO,aAGnC6D,WAAWN,EAAU6E,EAAI,IACrB,MAAMP,EAAcQ,OAAOR,OAAOtE,GAC7B+E,OAAQpK,GAAWA,IAAMA,EAAEkK,MAAQA,GAAe,KAARA,IAC1CG,OAAO,CAACC,EAAYC,KACjB,MAAMjI,EAAOiI,EAAIlF,IAAMkF,EAAIlF,IAAMkF,EAQjC,OAPIC,MAAMC,QAAQnI,GACdgI,EAAQA,EAAMI,OAAOpI,GACE,oBAATA,EACdgI,EAAMvD,KAAKzE,KAEXgI,EAAMvD,KAAKzE,GAERgI,GACJ,IACX,OAAOK,QAAQC,IAAIjB,IAEvBkB,QAAQC,EAAiBC,GACrB,IACI,OAAOD,EAAIV,OAAQrB,GAAWgC,EAAWhC,IAAIiC,OAAS,EACxD,MAAO9G,GACL,OAAO,IAGf+G,eAAehK,GACX,IACI,IAAI,MAAM8H,KAAK9H,EAAY,CACvB,MAAMiK,EAAYjK,EAAW8H,KAE7B,GAAImC,EAAW,OAAOA,GAE5B,MAAOhH,GACL,MAAO,CAACA,QCxTxB,MAAMiH,EAAc,EAEL,U,kDCHT,SAAUC,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQC,yBAAcC,yBAAaC,qCAAyBR,EAAKS,UAAW,CAC1ErJ,OAAQ4I,EAAK5I,OACbsJ,YAAaV,EAAKU,YAClBC,YAAaX,EAAKW,YAClBC,sBAAuBZ,EAAKY,sBAC5BC,WAAYb,EAAKc,SACjBA,SAAUd,EAAKe,eACfC,UAAWhB,EAAKiB,SACf,KAAM,GAAI,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN5FnK,+BAAgB,CAC3BxB,KAAM,kBACNyB,WAAY,CAAEmK,wBACdC,MAAO,CACH,WACA,WAEJlK,KAAM,KAAM,CACRwJ,SAAU,sBAEdW,MAAO,CACHL,eAAgB,CACZM,KAAMC,UAEVZ,YAAa,CACTW,KAAME,QACNC,SAAS,GAEbb,YAAa,CACTU,KAAMI,QAEVrK,OAAQ,CACJiK,KAAMvC,OACN4C,UAAU,GAEdd,sBAAuB,CACnBS,KAAMI,OACNC,UAAU,IAGlBvI,QAAS,CACL2H,SAAShG,EAAeP,GACpBpH,KAAKwO,MAAM,WAAY7G,EAAUP,IAErC0G,QAAQvD,GACJvK,KAAKwO,MAAM,UAAWjE,O,qBCnClC,MAAMoC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD,U,yDCLT,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMuB,EAA+BC,8BAAkB,qBACjDC,EAAsBD,8BAAkB,YAE9C,OAAQvB,yBAAcC,yBAAauB,EAAqB,KAAM,CAC5DN,QAASO,qBAAS,IAAM,CACtBC,yBAAaJ,EAA8B,CACzClK,UAAW,aACXN,OAAQ4I,EAAK5I,OACb2J,eAAgBf,EAAKc,SACrBF,sBAAuBZ,EAAK/G,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,4BAE3CgJ,EAAG,I,yHCFQnL,+BAAgB,CAC9BC,WAAY,CAAEmL,gBACdC,OAAQ,CAACC,QACTnL,KAAM,KAAM,CACXoL,IAAK,KAENC,MAAO,CACN3K,MAAO,CACN4K,QAAQ5K,GACHA,IACHxE,KAAKkP,IAAM,IAAIvP,OAAwBK,KAAKC,WAC5CD,KAAKiE,OAAS,CACbjE,KAAKqP,4BACLrP,KAAKsP,cACLtP,KAAKuP,qBAIRC,WAAW,IAGbxJ,QAAS,CACR,eAAeyJ,EAAQC,GACtB1P,KAAKkP,IAAInO,UAAU2O,EAAEC,OAAOvP,QAC5BJ,KAAKkP,IAAIpO,cAAc2O,EAAEG,YAAYzF,aAC/BnK,KAAKkP,IAAI5H,wBACTtH,KAAKkP,IAAI7O,gBAAgB,CAACqP,EAAEC,OAAOrP,WACzCN,KAAK6H,YAENwH,4BACC,IAAIQ,EAAgB,GACpB,MAAO,CACN7I,GAAI,SACJ8I,SAAU,mBACV5B,KAAM6B,OAAUC,UAChBC,KAAMlO,UACL8N,SAAgB7P,KAAKkP,IAAIlO,0BACvB4K,OAAQsE,GAAW,OAAOrP,KAAKqP,EAAEC,SAAShO,OAAS+N,EAAEE,MAAMC,KAC1DC,GAAW,cAAczP,KAAKyP,EAAEnO,OAAsB,OAAbmO,EAAEX,UAEvC,GAERY,WAAY,KAAM,EAClBlF,QAAUoE,GACO,MAAZA,EAAEI,OAAuBJ,EAAEI,OACxBA,EAAOjG,IAAK0G,IAClB,MAAMzP,EAAOuH,kBAAKkI,EAAEF,MAAO,CAAEjO,KAAM,mBACnC,MAAO,CACNgI,MAAO,IAAImG,EAAEE,oBAAoBC,eAAOH,EAAEI,cAC1CpN,MAAOzC,EAAK8P,WACZvG,MAAO,CACNhK,OAAQS,EAAKmG,SAOnBuI,kBACC,MAAO,CACNvI,GAAI,cACJ8I,SAAU,cACV5B,KAAM6B,OAAUa,aAChBL,WAAY,KAAM,EAClB7D,UAAY+C,GAAWA,EAAEI,OAAOvM,MAChCuN,WAAY,CAAC9F,EAAW0E,KACvB,MAAMqB,EAAYxK,IAAMmJ,EAAEI,OAAOzF,MAAMsG,YAAYK,OAAOC,QAC1D,OAAI,IAAIC,KAAKlG,EAAEZ,OAAS,IAAI8G,KAAKH,GACzB,CAAC,eAAe/F,EAAEZ,8CAA8C2G,KAEjE,QAIVxB,cACC,MAAO,CACNtI,GAAI,SACJ8I,SAAU,oBACV5B,KAAM6B,OAAUmB,QAChBX,WAAY,KAAM,EAClBY,OAAQ,CACPC,eAAgB,CACf,CACC,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1B,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAK,IAAK,KAEZ,CACC,CAAE,aAIL1E,UAAY+C,GAAWA,EAAEI,OAAOvM,MAChC+N,QAAUtG,KACJ,qBAAqBlK,KAAK,GAAGkK,EAAEzH,SACnCgO,eAAa,qEACN,GAITC,mBAAoB,CAACxG,EAAW0E,KACxB,CACNrP,OAAQqP,EAAEI,OAAOzF,MAAMhK,OACvBE,SAAU,CACTkR,UAAW,CACVb,WAAYlB,EAAEI,OAAOvM,OAEtBA,MAAOuB,UAAS,GAAGkG,EAAEzH,OAAQmO,UAAU,IACvCC,gBAAgB,GAAG3G,EAAEzH,OAAQqO,OAAO,GACpCC,WAAY,kB,qBCtHnB,MAAMjF,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD,gB,8ECsBf,SAASiF,EAAY1N,EAA4B1B,GAC7C,MAAMsF,EAAQ,GACR+J,EAAU,EAAE,EAAG,GAAI,UAAMC,GAE/B,IAAI,MAAMC,KAAQvP,EAAY,CAC1B,KAAMuP,KAAQ7N,GACV,SAEJ,MAAMb,EAAQa,EAAM6N,GAChBF,EAAQG,SAAS3O,GACjByE,EAAMQ,MAAK,GAIfR,EAAMQ,KAAK9F,EAAWuP,GAAM1O,EAAOa,IAEvC,OAAO4D,EAAMmK,MAAM9D,SAQvB,SAAS+D,EAAezJ,GACpB,OAAOA,EAASa,KAAK,CAACC,EAAGC,IAAOD,EAAE5H,UAAY6H,EAAE7H,UAAa4H,EAAE5H,SAAW6H,EAAE7H,UAAY,EAAI,GAGhG,SAASwQ,EAAa1J,GAClB,OAAOA,EAASa,KAAK,CAACC,EAAGC,IAAOD,EAAE6I,QAAU5I,EAAE4I,QAAW7I,EAAE6I,OAAS5I,EAAE4I,QAAU,EAAI,GAgBlF,SAAU1J,EACZxE,EACAmO,EACAC,EAAO,GACPC,EAAY,GACZC,EAAO,YACP,MAAMC,EAAU,GAChB,IAAI,MAAMC,KAAkBL,EAAY,CACpC,MAAMxO,EAA2BwO,EAAWK,GACtCC,EAAoB,CACrB9O,EAAKyO,QAAUA,GAAUzO,EAAKyO,QAAUA,EACxCzO,EAAK0O,aAAeA,GACd1O,EAAK0O,aAAeA,GAG3BI,EAAkBvC,KAAKjC,UAIvByD,EAAY1N,EAAOL,EAAKrB,cACxBqB,EAAK+O,MAAQF,EACT7O,EAAKgP,cACLhP,EAAKgP,YAAYC,KAAOjP,EAAKgP,YAAYE,KAAK7O,IAElDuO,EAAQnK,KAAKzE,IAGrB,MAAkB,aAAX2O,EAAwBN,EAAeO,GAAWN,EAAaM","file":"js/chunk-c71d4ad6.cbd5391a.js","sourcesContent":["import { OrderService } from '@/services/order_service'\nimport { AppEncounterService } from './app_encounter_service';\n\nexport class PatientLabResultService extends AppEncounterService {\n    patientID: number;\n    testTypeID: number;\n    resultDate: string;\n    testID: number;\n    constructor(patientId: number) {\n        super(patientId, 57)\n        this.patientID = patientId\n        this.testTypeID = -1\n        this.resultDate = ''\n        this.testID = -1\n    }\n\n    createLabResult(measures: Array<any>) {\n        return AppEncounterService.postJson(`lab/tests/${this.testID}/results`, {\n            'encounter_id': this.encounterID,\n            date: this.resultDate,\n            measures\n        })\n    }\n\n    getTestID() {\n        return this.testID\n    }\n\n    getTestTypeID() {\n        return this.testTypeID\n    }\n\n    setTestTypeID(test: number) {\n        this.testTypeID = test\n    }\n\n    setResultDate(date: string) {\n        this.resultDate = date\n    }\n\n    setTestID(test: number) {\n        this.testID = test\n    }   \n\n    getTestsWithoutResults() {\n        return OrderService.getOrders(this.patientID, {\n            status: 'drawn'\n        })\n    }\n\n    getTestIndicators() {\n      return OrderService.getJson(\n        `lab/test_result_indicators`, {\n        'test_type_id': this.testTypeID\n      })\n    }\n\n    \n}\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const { getOfflinePerson } = Offline()\n            const person = getOfflinePerson(this.offlineID)\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        saveObsOffline(encounterTypeID: number, formdata: any, obs: any, labOrders=undefined as any, status='Pending') {\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: encounterTypeID,\n                meta: formdata,\n                labOrders\n            })\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            try {\n                const enc = new AppEncounterService(\n                    this.patientID,\n                    params.encounterTypeID, \n                    this.providerID\n                )\n                if ((await enc.createEncounter())) {\n                    if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                        status = 'Success'\n                    }\n                }\n                if (typeof params.callback === 'function') {\n                    await params.callback(enc)\n                }\n            } catch (e) {\n                if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                    status = 'NetworkError'\n                } else {\n                    status = 'Exception'\n                }\n                console.error(`${e}`)\n            }\n            if (status === 'Exception') {\n                throw new Error('Unable to proceed!')\n            }\n            this.saveObsOffline(\n                params.encounterTypeID, \n                params.formData,\n                obs,\n                params.labOrders,\n                status\n            )\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"DBS Result\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { STANDARD_DATE_FORMAT } from \"@/utils/Date\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { PatientLabResultService } from \"@/services/patient_lab_result_service\"\nimport { toDate } from \"@/utils/Strs\";\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { find } from \"lodash\";\nimport dayjs from \"dayjs\";\n\nexport default defineComponent({\n\tcomponents: { IonPage },\n\tmixins: [EncounterMixinVue],\n\tdata: () => ({\n\t\tlab: {} as PatientLabResultService\n\t}),\n\twatch: {\n\t\tready: {\n\t\t\thandler(ready: boolean) {\n\t\t\t\tif (ready) {\n\t\t\t\t\tthis.lab = new PatientLabResultService(this.patientID)\n\t\t\t\t\tthis.fields = [\n\t\t\t\t\t\tthis.ordersWithoutResultsField(),\n\t\t\t\t\t\tthis.resultField(),\n\t\t\t\t\t\tthis.resultDateField()\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t},\n\t\t\timmediate: true\n\t\t}\n\t},\n\tmethods: {\n\t\tasync onFinish(f: any, c: any) {\n\t\t\tthis.lab.setTestID(c.result.testID)\n\t\t\tthis.lab.setResultDate(f.result_date.label)\n\t\t\tawait this.lab.createEncounter()\n\t\t\tawait this.lab.createLabResult([c.result.measures])\n\t\t\tthis.nextTask();\n\t\t},\n\t\tordersWithoutResultsField(): Field {\n\t\t\tlet orders: any[] = []\n\t\t\treturn {\n\t\t\t\tid: 'orders',\n\t\t\t\thelpText: \"Select DBS Order\",\n\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\tinit: async () => {\n\t\t\t\t\torders = (await this.lab.getTestsWithoutResults())\n\t\t\t\t\t\t.filter((r: any) => /dbs/i.test(r.specimen.name) && r.tests.some(\n\t\t\t\t\t\t\t(t: any) => /viral load/i.test(t.name) && t.result === null)\n\t\t\t\t\t\t)\n\t\t\t\t\treturn true\n\t\t\t\t},\n\t\t\t\tisRequired: () => true,\n\t\t\t\toptions: (f: any) => {\n\t\t\t\t\tif (f.orders != null) return f.orders\n\t\t\t\t\treturn orders.map((t: any) => {\n\t\t\t\t\t\tconst test = find(t.tests, { name: 'HIV viral load' })\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tlabel: `#${t.accession_number} ${toDate(t.order_date)}`,\n\t\t\t\t\t\t\tvalue: test.concept_id,\n\t\t\t\t\t\t\tother: { \n\t\t\t\t\t\t\t\ttestID: test.id\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tresultDateField(): Field {\n\t\t\treturn {\n\t\t\t\tid: 'result_date',\n\t\t\t\thelpText: \"Result date\",\n\t\t\t\ttype: FieldType.TT_FULL_DATE,\n\t\t\t\tisRequired: () => true,\n\t\t\t\tcondition: (f: any) => f.orders.value,\n\t\t\t\tvalidation: (v: Option, f: any) => {\n\t\t\t\t\tconst orderDate = dayjs(f.orders.other.order_date).format(STANDARD_DATE_FORMAT)\n\t\t\t\t\tif (new Date(v.label) > new Date(orderDate)) {\n\t\t\t\t\t\treturn [`Result date ${v.label} cannot be greater than order date of ${orderDate}`]\n\t\t\t\t\t}\n\t\t\t\t\treturn null\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tresultField(): Field {\n\t\t\treturn {\n\t\t\t\tid: 'result',\n\t\t\t\thelpText: \"Viral load result\",\n\t\t\t\ttype: FieldType.TT_TEXT,\n\t\t\t\tisRequired: () => true,\n\t\t\t\tconfig: {\n\t\t\t\t\tcustomKeyboard: [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t['1', '2', '3'],\n\t\t\t\t\t\t\t['4', '5', '6', '=', '<', '>'],\n\t\t\t\t\t\t\t['7', '8', '9', '.'],\n\t\t\t\t\t\t\t['',  '0', '']\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t[ 'Delete']\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\tcondition: (f: any) => f.orders.value,\n\t\t\t\tonValue: (v: Option) => {\n\t\t\t\t\tif (!/^(=|<|>)([0-9]*)$/m.test(`${v.value}`)) {\n\t\t\t\t\t\ttoastWarning('You must enter a modifer and numbers only. i.e =90 / >19 / < 750')\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t\treturn true\n\t\t\t\t},\n\t\t\t\tfinalComputedValue: (v: Option, f: any) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttestID: f.orders.other.testID,\n\t\t\t\t\t\tmeasures: {\n\t\t\t\t\t\t\tindicator: {\n\t\t\t\t\t\t\t\tconcept_id: f.orders.value\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: parseInt(`${v.value}`.substring(1)),\n\t\t\t\t\t\t\tvalue_modifier: `${v.value}`.charAt(0),\n\t\t\t\t\t\t\tvalue_type: 'numeric'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n});\n","import { render } from \"./HtsDBSResult.vue?vue&type=template&id=1779e9a2&ts=true\"\nimport script from \"./HtsDBSResult.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsDBSResult.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}