{"version":3,"sources":["webpack:///./src/services/person_attributes_service.ts","webpack:///./src/services/patient_registration_service.ts","webpack:///./src/apps/HTS/services/hts_items_given.ts","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue?efb3","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue?5019","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/composables/testKits.ts","webpack:///./src/services/person_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["PersonAttributeService","Service","constructor","super","attributes","postJson","PatientRegistrationService","this","personId","getPersonID","setPersonID","personID","person","personAttributes","createPerson","createPersonAttributes","patient","createPatient","printPatient","updatePerson","PersonService","update","data","create","person_id","ProgramService","index","PatientPrintoutService","printNidLbl","HtsItemsGivenService","AppEncounterService","patientID","providerID","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","service","watch","ready","handler","accessPointTypeField","facilityAccessPointField","communityAccessPoints","genderField","ageField","pregnancyStatusField","lastHivTestResultField","lastTimeHIVTestedField","itemsGivenToClientField","selfTestsGivenToClientField","hivTestKitDetailsField","visitTypeField","patientDemographics","immediate","methods","computedData","PersonField","resolvePerson","registration","Patientservice","registerBasicPatient","createEncounter","saveObservationList","resolveObs","$router","push","getSelfKitCount","f","items_given_to_client","label","value","id","helpText","type","FieldType","TT_SELECT","isRequired","finalComputedValue","v","tag","obs","buildValueCoded","options","mapStrToOptions","TT_SELECT_GRID","condition","accesspoint_type","summaryMapValue","buildValueText","toString","config","columnsPerRow","TT_NUMBER","validation","test","isNaN","birthdate","DateHelper","estimateDateFromAge","birthdate_estimated","gender","TT_AGE_INPUT","last_hiv_result","maxDaysAllowed","maxWeeksAllowed","maxMonthsAllowed","parseInt","other","timeUnit","length","buildObs","date","excludeUnits","TT_ADHERENCE_INPUT","every","d","some","maxSelfKits","maxMaleCondoms","maxFemaleCondoms","maxFRS","toLowerCase","isEmpty","filter","map","buildValueNumber","noFloat","titles","initKits","getLotNo","getExpiryDate","TestKit","TT_INPUT_ARRAY","columns","init","async","incomplete","x","KitProp","HIV_SELF_KIT","defaultOutput","Array","from","buildValueDate","parentObs","childObs","l","child","Promise","all","test_kit","kitNameOption","onclick","val","r","t","listData","keyboard","TT_TEXT","forEach","i","kitLotNoOption","kitExpiryDateOption","TT_FULL_DATE","Date","toDate","monthsFromNow","dayjs","diff","kits","generateRows","count","isArray","slice","el","estimate","someIncomplete","broadcast","rows","channel","newValue","oldValue","col","broadcastlistener","disabled","userOptionField","otherRows","JSON","stringify","HIVStatus","selectionList","selection","title","preset","size","genderOptionField","resultOptionField","ageOptionField","age","buildNumericEstimate","estimatedDOB","numericKeypad","isEstimate","toastWarning","toggleButton","strictNumbers","approachOptionField","self_test_kits","TT_HIDDEN","computedValue","name","getGivenNameField","getFamilyNameField","getHomeDistrictField","getHomeTaField","getHomeVillageField","getCurrentDistrictField","getCurrentTAfield","getCurrentVillageField","getCellNumberField","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","facts","isEnrolledInProgam","route","params","patient_id","toUpperCase","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","cancelDestination","patientDashboardUrl","runflowState","state","states","username","split","provider","find","EXIT","gotoPatientDashboard","findings","matchToGuidelines","finding","status","program","programID","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","sort","a","b","usernameA","usernameB","p","names","latestName","given_name","family_name","toOption","items","path","loadingController","backdropDismiss","message","present","nextTask","getTop","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","Object","reduce","accum","cur","concat","inArray","arr","expression","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","formData","$emit","mapToOption","listOptions","item","computedForm","attr","isPlainObject","Validation","isName","form","searchGivenName","searchFamilyName","getGenderField","customOptions","getDobConfig","includeHelpText","summaryLabel","minDate","maxDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","getHomeRegionField","group","requireNext","getRegions","dynamicHelpText","home_region","match","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","onClick","c","field","filtered","ok","alertConfirmation","address","LocationService","createAddress","showKeyboard","isFilterDataViaApi","footerBtns","defaultComputedOutput","getTraditionalAuthorities","home_district","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","current_region","current_district","current_traditional_authority","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","getFacilityLocationField","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","getPersonAttributeOptions","prop","getPatientInfoString","getID","getNationalID","npid","show","getProgramName","isCondition","ignored","undefined","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","description","text","info","ref","getSelectedTests","req","getJson","property","property_value","trim","defaultKits","kitName","UNIGOLD","lotNo","expiryDate","testGroup","visible","userProp","DETERMINE","BIOLINE","SYPHILIS","HEPATITIS","selectedKits","TEST_KIT_USER_PROPERTY","prevKits","parse","kit","k","saveKits","res","putJson","facilities","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-5a6bc157.1865b53c.js","sourcesContent":["import { Service } from \"./service\"\n\nexport interface NewAttribute {\n    person_id: number;\n    person_attribute_type_id: number;\n    value: number | string;\n}\n\nexport class PersonAttributeService extends Service { \n    constructor() {\n        super()\n    }\n\n    static create(attributes: Array<NewAttribute>) { \n        return super.postJson('/person_attributes', attributes) \n    }\n}\n","import { Service } from \"./service\"\nimport { ProgramService } from \"@/services/program_service\";\nimport { Person } from \"@/interfaces/person\"\nimport { PersonService } from \"@/services/person_service\"\nimport { PersonAttributeService } from '@/services/person_attributes_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\n\nexport class PatientRegistrationService extends Service {\n    personId: number\n    constructor() {\n        super()\n        this.personId = 0\n    }\n\n    getPersonID() {\n        return this.personId\n    }\n\n    setPersonID(personID: number) {\n        this.personId = personID\n    }\n\n    async registerPatient(person: any, personAttributes: any) {\n        await this.createPerson(person)\n        await this.createPersonAttributes(personAttributes)\n        const patient = await this.createPatient()\n        await this.printPatient()\n        return patient\n    }\n\n    async registerBasicPatient(person: any) {\n        await this.createPerson(person)\n        return this.createPatient()\n    }\n\n    async registerGuardian(person: any) {\n        return this.createPerson(person)\n    }\n\n    updatePerson(person: any) {\n       return new PersonService(person).update(this.personId)\n    }\n\n    async createPerson(person: any) {\n        const data: Person = await new PersonService(person).create()\n        this.personId = data.person_id\n        return data\n    }\n\n    createPatient() {\n        return ProgramService.createPatient(this.personId)\n    }\n\n    async createPersonAttributes(attributes: Array<any>) {\n        for(const index in attributes) {\n            await PersonAttributeService.create({\n                ...attributes[index],\n                'person_id': this.personId\n            })\n        }\n    }\n\n    printPatient() {\n        return new PatientPrintoutService(this.personId).printNidLbl()\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsItemsGivenService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 196, providerID)\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Self Test Registration\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: `/`\n      }, null, 8, [\"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { find, isEmpty } from \"lodash\";\nimport keyboard, { numericKeypad, selectionList } from \"@/utils/PopupKeyboard\";\nimport { ObsValue } from \"@/services/observation_service\";\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport dayjs from \"dayjs\";\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport { HtsItemsGivenService } from \"../../services/hts_items_given\";\nimport { toDate } from \"@/utils/Strs\";\nimport DateHelper from \"@/utils/Date\"\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { KitProp, TestKit } from \"../../composables/testKits\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler() {\n        this.service = new HtsItemsGivenService(-1);\n        this.fields = [\n          ...[\n            this.accessPointTypeField(),\n            this.facilityAccessPointField(),\n            this.communityAccessPoints(),\n            this.genderField(),\n            this.ageField(),\n            this.pregnancyStatusField(),\n            this.lastHivTestResultField(),\n            this.lastTimeHIVTestedField(),\n            this.itemsGivenToClientField(),\n            this.selfTestsGivenToClientField(),\n            this.hivTestKitDetailsField(),\n            this.visitTypeField(),\n          ],\n          ...this.patientDemographics(),\n        ];\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const person = await PersonField.resolvePerson(computedData);\n      const registration: any = new PatientRegistrationService();\n      new Patientservice(await registration.registerBasicPatient(person));\n      this.service.patientID = registration.getPersonID();\n      await this.service.createEncounter();\n      await this.service.saveObservationList(\n        (await this.resolveObs(computedData, \"reg\")) as ObsValue[]\n      );\n      this.$router.push(`/`);\n    },\n    getSelfKitCount(f: Record<string, any>) {\n      return (\n        find(f.items_given_to_client || [], { label: \"Self-Test Kit\" })\n          ?.value || 0\n      );\n    },\n    accessPointTypeField(): Field {\n      return {\n        id: \"accesspoint_type\",\n        helpText: \"Distribution point type\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueCoded(\"HTS Access Type\", v.value),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\"Health Facility\", \"Community\"]);\n        },\n      };\n    },\n    facilityAccessPointField(): Field {\n      return {\n        id: \"facility_access_points\",\n        helpText: \"Health facility distribution point\",\n        type: FieldType.TT_SELECT_GRID,\n        isRequired: () => true,\n        condition: (f: any) => f.accesspoint_type.value === \"Health Facility\",\n        summaryMapValue: (v: Option) => {\n          return v;\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              v.value.toString()\n            ),\n          };\n        },\n        config: {\n          columnsPerRow: 2\n        },\n        options: () => {\n          return [\n            {label: \"1 | VCT\", value: \"VCT\"},\n            {label: \"2 | ANC\", value: \"ANC First Visit\"},\n            {label: \"3 | Inpatient\", value: \"Inpatient\"},\n            {label: \"4 | STI\", value: \"STI\"},\n            {label: \"5 | PMTCT-Follow-up (ANC FUP, Mat, Post-nat, BF)\", value: \"PMTCT FUP\"},\n            {label: \"6 | Index\", value: \"Index\"},\n            {label: \"7 | Paediatric\", value: \"Paediatric\"},\n            {label: \"8 | VMMC\", value: \"VMMC\"},\n            {label: \"9 | Malnutrition\", value: \"Malnutrition\"},\n            {label: \"10 | TB\", value: \"TB\"},\n            {label: \"11 | OPD\", value: \"OPD\"},\n            {label: \"12 | Other PITC (PrEP, dental e.t.c)\", value: \"Other\"},\n            {label: \"18 | SNS (Social Network Strategies)\", value: \"SNS\"},\n          ];\n        },\n      };\n    },\n    communityAccessPoints(): Field {\n      return {\n        id: \"community_access_points\",\n        helpText: \"Community distribution points\",\n        type: FieldType.TT_SELECT,\n        condition: (f: any) => f.accesspoint_type.value === \"Community\",\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              `${v.value}`\n            ),\n          };\n        },\n         options: () => {\n          return [\n            {label: \"13 | VCT\", value: \"VCT\"},\n            {label: \"14 | Index\", value: \"Index\"},\n            {label: \"15 | VMMC\", value: \"VMMC\"},\n            {label: \"16 | Other\", value: \"Other\"},\n            {label: \"17 | SNS\", value: \"SNS\"},\n            {label: \"19 | Mobile\", value: \"Mobile\"},\n          ];\n        },\n      };\n    },\n    genderField(): Field {\n      return {\n        id: \"gender\",\n        helpText: \"Recipient's Sex\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            person: v.value,\n          };\n        },\n        options: () => {\n          return [\n            { label: \"Female\", value: \"F\" },\n            { label: \"Male\", value: \"M\" },\n          ];\n        },\n      };\n    },\n    ageField(): Field {\n      return {\n        id: \"birthdate\",\n        helpText: \"Recipient's age\",\n        type: FieldType.TT_NUMBER,\n        isRequired: () => true,\n        validation: (v: Option) => {\n          if (/unknown/i.test(`${v.value}`)) return null\n          if (v.value <= 10 || v.value >= 125 || isNaN(v.value as number)) {\n            return [\"Invalid Age\"];\n          }\n          return null;\n        },\n        finalComputedValue: (v: any) => {\n          return {\n            person: {\n              birthdate: DateHelper.estimateDateFromAge(v.value),\n              birthdate_estimated: true,\n            },\n          };\n        },\n      };\n    },\n    pregnancyStatusField(): Field {\n      return {\n        id: \"pregnancy_status\",\n        helpText: \"Pregnancy Status\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) => f.gender.value === \"F\",\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueCoded(\"Pregnancy status\", v.value),\n          };\n        },\n        options: () => {\n          return [\n            { label: \"Non-pregnant\", value: \"Not Pregnant / Breastfeeding\" },\n            { label: \"Pregnant\", value: \"Pregnant woman\" },\n            { label: \"Breastfeeding\", value: \"Breastfeeding\" },\n          ];\n        },\n      };\n    },\n    lastHivTestResultField(): Field {\n      return {\n        id: \"last_hiv_result\",\n        helpText: \"Recipient's Last HIV Test Results\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueCoded(\n              \"Previous HIV Test Results\",\n              v.value\n            ),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\n            \"Never Tested\",\n            \"Negative\",\n            \"Positive NOT on ART\",\n            \"Positive on ART\",\n            \"Inconclusive\",\n          ]);\n        },\n      };\n    },\n    lastTimeHIVTestedField(): Field {\n      return {\n        id: \"last_time_hiv_tested\",\n        helpText: \"Time since last HIV test\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_hiv_result.value && f.last_hiv_result.value != \"Never Tested\",\n        isRequired: () => true,\n        validation: (v: Option, f: any) => {\n          const maxDaysAllowed = 90;\n          const maxWeeksAllowed = 12;\n          const maxMonthsAllowed = 24;\n          if (parseInt(`${v.other.value}`) <= 0 && !/day/i.test(v.other.timeUnit)) {\n            return [`Enter ${v.other.timeUnit} greater than zero`];\n          }\n           if(v.other.timeUnit === 'Days' && parseInt(`${v.other.value}`) > maxDaysAllowed) {\n            return [`Enter ${v.other.timeUnit} less than ${maxDaysAllowed}, use Weeks Instead`];\n          }\n          if(v.other.timeUnit === 'Weeks' && parseInt(`${v.other.value}`) > maxWeeksAllowed) {\n            return [`Enter ${v.other.timeUnit} less than ${maxWeeksAllowed}, use Months Instead`];\n          }\n          if(v.other.timeUnit === 'Months' && parseInt(`${v.other.value}`) > maxMonthsAllowed) {\n            return [`Enter ${v.other.timeUnit} less than ${maxMonthsAllowed}, use Years Instead`];\n          }\n          if(v.other.timeUnit === 'Years' && parseInt(`${v.other.value}`) > parseInt(f.birthdate.value)) {\n            return [ `${\n                v.label\n              } is greater than client's age of ${f.birthdate.value} Years`];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          return null;\n        },\n        finalComputedValue: (v: any) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildObs(\"Time of HIV test\", {\n              'value_datetime': v.other.date,\n              'value_text': v.value\n            })\n          }\n        },\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    },\n    itemsGivenToClientField(): Field {\n      return {\n        id: \"items_given_to_client\",\n        helpText: \"Items given to the client\",\n        type: FieldType.TT_ADHERENCE_INPUT,\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v,\n        validation: (v: Option[]) => {\n          if (v.every((d) => d.value === \"\")) {\n            return [\"Values cannot be empty\"];\n          }\n          if (\n            v.some(\n              (d) => /self-test/i.test(d.label) && (!d.value || d.value <= 0)\n            )\n          ) {\n            return [`Please enter number of self kits to give client`];\n          }\n          const maxSelfKits = 3;\n          const maxMaleCondoms = 30;\n          const maxFemaleCondoms = 30;\n          const maxFRS = 5;\n          if (\n            v.some((d) => /self-test/i.test(d.label) && d.value > maxSelfKits)\n          ) {\n            return [\n              `Cannot distribute more than ${maxSelfKits} Self-test kits. Please adjust the number accordingly`,\n            ];\n          }\n          if (\n            v.some((d) => d.label == 'Male condoms' && d.value > maxMaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxMaleCondoms} Male Condoms. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => d.label == 'Female condoms' && d.value > maxFemaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFemaleCondoms} Female Condoms. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => /frs/i.test(d.label.toLowerCase()) && d.value > maxFRS)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFRS} FRS. Please adjust the number accordingly`,\n            ];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          if (!isEmpty(f.items_given_to_client)) {\n            return f.items_given_to_client;\n          }\n          return [\n            { label: \"Self-Test Kit\", value: \"\" },\n            { label: \"Male condoms\", value: \"\" },\n            { label: \"Female condoms\", value: \"\" },\n            { label: \"FRS\", value: \"\" },\n          ] as Option[];\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            tag: \"reg\",\n            obs: v\n              .filter((d: Option) => d.value)\n              .map((d: Option) =>\n                this.service.buildValueNumber(d.label, parseInt(`${d.value}`))\n              ),\n          };\n        },\n        config: {\n          noFloat: true,\n          titles: {\n            label: \"Item\",\n            value: \"Quantity\",\n          },\n        },\n      };\n    },\n    hivTestKitDetailsField(): Field {\n      const { \n        initKits, \n        getLotNo, \n        getExpiryDate \n      } = TestKit()\n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        //summaryMapValue: (v: Option) => v?.other?.fields,\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        init: async () => {\n          await initKits()\n          return true\n        },\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v?.other?.fields,\n        validation: (v: Option[]) => {\n          const incomplete = v\n            .map((d: Option) => d.other.fields)\n            .some((d: Option[]) => d.some((x: Option) => x.value === \"\"));\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        condition: () => !getLotNo(KitProp.HIV_SELF_KIT),\n        defaultOutput: (f: any) => {\n          if (this.getSelfKitCount(f) >= 1 && getLotNo(KitProp.HIV_SELF_KIT)) {\n            return Array.from({ length: this.getSelfKitCount(f) }).map(() => {\n              return {\n                label: KitProp.HIV_SELF_KIT,\n                value: getLotNo(KitProp.HIV_SELF_KIT),\n                other: {\n                  fields: [\n                    {\n                      label: \"Kit name\",\n                      value: KitProp.HIV_SELF_KIT,\n                      other: {\n                        obs: () => this.service.buildValueText(\"Kit name\", KitProp.HIV_SELF_KIT)\n                      }\n                    },\n                    {\n                      label: \"KitLot No.\",\n                      value: getLotNo(KitProp.HIV_SELF_KIT),\n                      other: {\n                        obs: () => this.service.buildValueText(\"Kit lot number\",\n                          getLotNo(KitProp.HIV_SELF_KIT)\n                        )\n                      }\n                    },\n                    {\n                      label: \"Kit Expiry date\",\n                      value: getExpiryDate(KitProp.HIV_SELF_KIT),\n                      other: {\n                        obs: () => this.service.buildValueDate(\"kit expiry date\",\n                          getExpiryDate(KitProp.HIV_SELF_KIT)\n                        )\n                      }\n                    }\n                  ]\n                }\n              }\n            })\n          }\n        },\n        finalComputedValue: (v: Option[]) => {\n          const data = v.map((d) => d.other.fields);\n          return {\n            obs: data.map(async (options: Option[]) => {\n              const [parentObs, ...childObs] = options\n                .filter((l: Option) => typeof l.other.obs === \"function\")\n                .map((d: Option) => d.other.obs(d));\n              return {\n                ...(await parentObs),\n                child: await Promise.all(childObs),\n              };\n            }),\n          };\n        },\n        options: async (f: any) => {\n          if (f.test_kit != null) return f.test_kit;\n          const kitNameOption = () => ({\n            label: \"Kit Name\",\n            value: KitProp.HIV_SELF_KIT,\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueText(\"Kit name\", v.value as string),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"name\",\n                    helpText: \"Kit Name\",\n                    type: FieldType.TT_TEXT,\n                    isRequired: () => true\n                  },\n                  (v: Option) => {\n                    val.value = v.value;\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/name/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          });\n          const kitLotNoOption = () => ({\n            label: \"Kit Lot No.\",\n            value: getLotNo(KitProp.HIV_SELF_KIT),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueNumber(\n                  \"Kit lot number\",\n                  v.value as number\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard({\n                  id: 'lot',\n                  helpText: 'Enter Lot Number',\n                  type: FieldType.TT_TEXT,\n                  isRequired: () => true\n                }, \n                (v: Option) => {\n                  val.value = v.value\n                  // Use first row's Lot number to update other Lot numbers which are empty\n                  if (index === 0) {\n                    listData.forEach((i: Option) => {\n                      i.other.fields.forEach((d: Option) => {\n                        if (/lot/i.test(d.label) && d.value === '') {\n                          d.value = val.value\n                        }\n                      })\n                    })\n                  }\n                })\n              },\n            },\n          });\n          const kitExpiryDateOption = () => ({\n            label: \"Kit Expiry Date\",\n            value: getExpiryDate(KitProp.HIV_SELF_KIT),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueDate(\n                  \"kit expiry date\",\n                  v.value as string\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(this.service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(this.service.date),\n                        ];\n                      }\n                      const monthsFromNow = dayjs(v.label).diff(this.service.date, \"month\")\n                      if (monthsFromNow <= 2) {\n                        return [\"It's not advisable to use a test kit that will expire in less than 2 months\"]\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => {\n                    val.value = v.value\n                    // Use first row's expiry date to update other expiry dates\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/expiry/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          })\n          const kits = this.getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"\",\n                value: \"\",\n                other: {\n                  fields: [\n                   kitNameOption(),\n                   kitLotNoOption(),\n                   kitExpiryDateOption(),\n                  ],\n                },\n              };\n            });\n            if (Array.isArray(f.test_kit)) {\n              if (kits < f.test_kit.length) {\n                return f.test_kit.slice(0, kits);\n              } else if (kits > f.test_kit.length) {\n                return [\n                  ...f.test_kit,\n                  ...generateRows(\n                    kits - f.test_kit.length\n                  ),\n                ];\n              } else {\n                return f.test_kit;\n              }\n          }\n          return generateRows();\n        },\n      };\n    },\n    selfTestsGivenToClientField(): Field {\n      return {\n        id: \"self_test_kits\",\n        helpText: \"Self-test kit users\",\n        type: FieldType.TT_INPUT_ARRAY,\n        isRequired: () => true,\n        condition: (f: any) =>\n          f.items_given_to_client.some(\n            (d: Option) => /self-test/i.test(d.label) && d.value > 0\n          ),\n        finalComputedValue: (v: Option[]) => {\n          return {\n            tag: \"reg\",\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d.value, d));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        summaryMapValue: (v: Option) => v.other.fields.map((d: Option) => {\n          const el = {...d}\n          if (el.label === 'Age' && el?.other?.estimate) {\n            el.value = `${el.value} (Estimated)`\n          }\n          return el\n        }),\n        config: {\n          columns: [\n            { label: \"End-User\" },\n            { label: \"Sex\" },\n            { label: \"Age\" },\n            { label: \"Approach\" },\n            { label: \"Result\"}\n          ],\n        },\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 4;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          const broadcast = (rows: Option[], channel: string, newValue: string|number, oldValue: string|number) => {\n            rows.forEach(col => {\n              if (typeof col?.other?.broadcastlistener === \"function\") {\n                const update = col.other.broadcastlistener(channel, newValue, oldValue)\n                if (update) {\n                  col.value = update.value\n                  col.disabled = update.disabled\n                }\n              }\n            })\n          }\n          const userOptionField = () => ({\n            label: \"User\",\n            value: \"\",\n            other: {\n              obs: (v: string) => this.service.buildValueCoded(\"Self-test end user\", v),\n              onclick: async (\n                val: Option,\n                rows: Option[],\n                index: number,\n                i: number,\n                listData: Option[]\n              ) => {\n                const otherRows = listData.filter((_: any, i) => i != index);\n                const options = [];\n                if (!/Self/.test(JSON.stringify(otherRows))) {\n                  const HIVStatus = f.last_hiv_result?.value;\n                  if(!/positive/.test(HIVStatus.toLowerCase())) options.push(\"Self\");\n                }\n                selectionList(\n                  [...options, \"Sexual partner\", \"Other\"],\n                  (selection: string) => {\n                    broadcast(rows, 'User', selection, val.value)\n                    val.value = selection;\n                  },\n                  {\n                    title: \"Select End-User\",\n                    preset: val != null ? val.value : \"\",\n                    size: \"small-modal\",\n                  }\n                );\n              },\n            },\n          });\n          const genderOptionField = () => ({\n            label: \"Sex\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string, oldValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { value: f.gender.label, disabled: true }\n                  }\n                  if (oldValue === 'Self') {\n                    return { value: '', disabled: false }\n                  }\n                }\n              },\n              obs: (v: string) => this.service.buildValueCoded(\"Gender of contact\", v),\n              onclick: (val: Option) => {\n                selectionList(\n                  [\"Female\", \"Male\"],\n                  (selection: string) => val.value = selection,\n                  {\n                    title: \"Select sex\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                )\n              }\n            },\n          });\n          const resultOptionField = () => ({\n            label: \"Result\",\n            value: \"N/A\",\n            other: {\n              obs: (v: string) => {\n                if (v && !/n\\/a/i.test(`${v}`)) {\n                  return this.service.buildValueCoded('Test 1', v)\n                }\n              },\n              onclick: (val: Option, rows: Option[]) => {\n                selectionList([\n                  'Negative',\n                  'Positive',\n                  'N/A'\n                ], \n                (selection: string) => {\n                  broadcast(rows, 'Result', selection, val.value)\n                  val.value = selection\n                }, {\n                  title: 'Directly-assisted HIV Result'\n                })\n              }\n            }\n          })\n          const ageOptionField = () => ({\n            label: \"Age\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { value: `${f.birthdate.value}`, disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string, d: Option) => {\n                const age = parseInt(v)\n                if (d?.other?.estimate) {\n                  return this.service.buildNumericEstimate('Age of contact', age)\n                } else {\n                  const estimatedDOB = DateHelper.estimateDateFromAge(age)\n                  return this.service.buildObs(\"Age of contact\", {\n                      'value_datetime': estimatedDOB,\n                      'value_numeric': age\n                  })\n                }\n              },\n              onclick: (val: Option) => {\n                numericKeypad((age: number | string, isEstimate: boolean | undefined) => {\n                  if (age && parseInt(`${age}`) >= 125) {\n                    val.value =''\n                    return toastWarning(`Age exceeds maximum human life expectancy of 124 years`)\n                  }\n                  val.value = age\n                  val.other.estimate = isEstimate\n                }, \n                {\n                  title: 'Age',\n                  preset: ' ',\n                  toggleButton: \"Age is estimated?\",\n                  noFloat: true,\n                  strictNumbers: true\n                });\n              },\n            },\n          });\n          const approachOptionField = () => ({\n            label: \"Approach\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue != 'Self') {\n                    return { value: \"Un-assisted\", disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string) => this.service.buildValueCoded(\"Self-test approach\", v),\n              onclick: (val: Option, rows: any[]) => {\n                selectionList(\n                  [\"Directly-assisted\", \"Un-assisted\"],\n                  (v: string) => {\n                    broadcast(rows, 'Approach', v, val.value)\n                    val.value = v\n                  },\n                  {\n                    title: \"Select approach\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const kits = this.getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"item\",\n                value: \"N/A\",\n                other: {\n                  fields: [\n                    userOptionField(),\n                    genderOptionField(),\n                    ageOptionField(),\n                    approachOptionField(),\n                    resultOptionField()\n                  ],\n                },\n              };\n            });\n          if (Array.isArray(f.self_test_kits)) {\n            if (kits < f.self_test_kits.length) {\n              return f.self_test_kits.slice(0, kits);\n            } else if (kits > f.self_test_kits.length) {\n              return [\n                ...f.self_test_kits,\n                ...generateRows(\n                  kits - f.self_test_kits.length\n                ),\n              ];\n            } else {\n              return f.self_test_kits;\n            }\n          }\n          return generateRows();\n        },\n      };\n    },\n    visitTypeField(): Field {\n      return {\n        id: \"visit_type\",\n        helpText: \"Visit Type\",\n        type: FieldType.TT_HIDDEN,\n        isRequired: () => true,\n        computedValue: (v: Option) => {\n          return {\n            tag: 'reg',\n            obs: this.service.buildValueCoded(\"Visit type\", \"Self test distribution\")\n          }\n        },\n      }\n    },\n    patientDemographics(): Field[] {\n      return [\n        (() => {\n          const name = PersonField.getGivenNameField();\n          name.validation = () => {\n            return true;\n          };\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getFamilyNameField();\n          name.type = FieldType.TT_HIDDEN;\n          name.validation = () => {\n            return true;\n          };\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeDistrictField();\n          name.type = FieldType.TT_HIDDEN;\n\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeTaField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeVillageField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentDistrictField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentTAfield();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentVillageField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCellNumberField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n      ];\n    },\n  },\n});\n","import { render } from \"./HtsESelfTestRegister.vue?vue&type=template&id=482d568d&ts=true\"\nimport script from \"./HtsESelfTestRegister.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsESelfTestRegister.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            dynamicHelpText: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Current Region of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'Current District of Residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'Current TA of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Current Village of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Service } from \"@/services/service\";\nimport { find } from \"lodash\";\nimport { ref } from \"vue\";\n\nexport enum KitProp {\n    TEST_KIT_USER_PROPERTY = 'hts_user_assigned_kits',\n    HIV_SELF_KIT = 'HIV self-kit',\n    SYPHILIS = 'Syphilis',\n    HEPATITIS = 'Hepatitis B',\n    BIOLINE = 'Bioline',\n    DETERMINE = 'Determine',\n    UNIGOLD = 'Unigold'\n}\n\nexport function TestKit() {\n    const kits = ref<any>([])\n\n    const getSelectedTests = async () => {\n        try {\n            const req = await Service.getJson('user_properties', {\n                property: \"HTS_PROGRAMS\"\n            })\n            return req.property_value.split(',').map((prop: string) => prop.trim())\n        } catch (e) {\n            console.error(`${e}`)\n        }\n        return\n    }\n\n    const initKits = async () => {\n        const defaultKits = [\n            {\n                kitName: KitProp.UNIGOLD,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.DETERMINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.BIOLINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.HIV_SELF_KIT,\n                lotNo: '',\n                expiryDate: '',\n                visible: true\n            },\n            {\n                kitName: KitProp.SYPHILIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Syphilis Test\"\n            },\n            {\n                kitName: KitProp.HEPATITIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Hepatitis B Test\"\n            }\n        ]\n        try {\n            const selectedKits = await getSelectedTests()\n\n            const req = await Service.getJson('user_properties', {\n                property: KitProp.TEST_KIT_USER_PROPERTY\n            })\n\n            const prevKits = JSON.parse(req.property_value)\n\n            defaultKits.forEach((kit: any) => {\n                if (kit.userProp) {\n                    kit.visible = selectedKits.includes(kit.userProp)\n                }\n                const preset = find(prevKits, { kitName: kit.kitName })\n                if (preset) {\n                    kit.lotNo = preset.lotNo\n                    kit.expiryDate = preset.expiryDate\n                }\n            })\n            kits.value = defaultKits.filter((k: any) => k.visible)\n        } catch (e) {\n            kits.value = defaultKits\n            console.error(`${e}`)\n        }\n        \n    }\n\n    const getLotNo = (kitName: KitProp) => {\n        const data = find(kits.value, { kitName })\n        if (data) {\n            if(new Date(data.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return data.lotNo\n        } \n        return ''\n    }\n\n    const getExpiryDate = (kitName: KitProp) => {\n        const date = find(kits.value, { kitName })\n        if (date) {\n            if (new Date(date.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return date.expiryDate\n        }\n        return ''\n    }\n\n    const saveKits = async () => {\n        const res = await Service.postJson('user_properties', { \n            property: KitProp.TEST_KIT_USER_PROPERTY,\n            property_value: JSON.stringify(kits.value)\n        })\n        return res ? true : false\n    }\n\n    return {\n        kits,\n        initKits,\n        saveKits,\n        getLotNo,\n        getExpiryDate\n    }\n}\n","import { Person } from \"@/interfaces/person\"\nimport { Service } from \"./service\"\n\nexport interface NewPerson {\n    person_id?: number;\n    given_name: string;\n    family_name: string;\n    gender: string;\n    birthdate: string;\n    birthdate_estimated: boolean;\n    home_district: string;\n    home_traditional_authority: string;\n    home_village: string;\n    current_district: string;\n    current_traditional_authority: string;\n    current_village: string;\n    landmark: string;\n    cell_phone_number: string;\n    occupation: string;\n    facility_name: string;\n    patient_type?: string;\n    relationship?: string;\n}\n\nexport class PersonService extends Service{\n    person: Person | NewPerson\n    constructor(person: NewPerson | Person){\n        super()\n        this.person = person\n    }\n\n    create() { return Service.postJson('/people', this.person) }\n\n    update(id: number) { return Service.putJson(`people/${id}`, {\n        ...this.person, 'program_id': Service.getProgramID()\n    })}\n\n    static searchFamilyName(name: string) {\n        return super.getJson('/search/family_name', {'search_string': name})\n    }\n\n    static searchGivenName(name: string) {\n        return super.getJson('/search/given_name', {'search_string': name})\n    }\n\n    static async getPersonFullName(personId: string | number) {\n        const names = await super.getJson(`/people/${personId}/names`)\n        return names && names.length ? names[0].given_name + ' ' + names[0].family_name : ''\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}