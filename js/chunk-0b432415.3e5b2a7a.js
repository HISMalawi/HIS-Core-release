(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-0b432415"],{"5f2c":function(t,e,s){"use strict";s.d(e,"a",(function(){return u}));var r=s("cc6f"),i=s("71c3"),a=(s("13d5"),s("1c74"));class n extends a["e"]{constructor(){super()}static async fetchAvailableDrugStock(t){const e=await this.getJson("pharmacy/items",{drug_id:t});if(e&&e.length>0)return e.reduce((t,e)=>t+e.current_quantity,0)}}var o=s("d1ca");const d={11:[30],21:[25],22:[60],24:[30,60,90,100],30:[90],39:[60],73:[120],74:[60],76:[1e3],297:[30,60,90],576:[30,60,90],613:[60],731:[60],732:[60],733:[60],734:[30],735:[30],736:[60],738:[60],931:[30,60,90],932:[30],954:[60],963:[30,60,90],968:[60],969:[30],971:[30,60,90],976:[60],977:[30],982:[30],983:[30,90],1039:[30,60,90],1043:[60],1044:[30],1056:[24],1216:[3,6,12]};class u extends r["a"]{constructor(t,e){super(t,54,e),this.drugHistory=[],this.currentDrugOrder=[],this.useDrugManagement=!1}setIsDrugManagementEnabled(t){this.useDrugManagement=t}async loadDrugManagementEnabled(){this.useDrugManagement=await o["b"].drugManagementEnabled()}getDrugHistory(){return this.drugHistory}getCurrentOrder(){return this.currentDrugOrder}buildDispensations(t,e,s){const r=[];for(let i=0;i<s;i++)r.push({drug_order_id:t,date:this.date,quantity:e/s});return r}saveDispensations(t){return r["a"].postJson("/dispensations",{dispensations:t,program_id:r["a"].getProgramID()})}async voidOrder(t){return r["a"].void("/dispensations/"+t,{})}async loadDrugHistory(){try{const t=await i["a"].getDrugOrderHistory(this.patientID);t&&(this.drugHistory=t)}catch(t){console.warn(t)}}async loadCurrentDrugOrder(){const t=await i["a"].getDrugOrders(this.patientID);if(t){if(this.useDrugManagement){const e=t.map(async t=>(t["available_stock"]=await n.fetchAvailableDrugStock(t.drug.drug_id),t));return void(this.currentDrugOrder=await Promise.all(e))}this.currentDrugOrder=t}}getDrugPackSizes(t){return t in d?d[t]:[30,60,90]}calcCompletePack(t,e){const s=t.barcodes.sort((t,e)=>t.tabs-e.tabs);if(0==s.length||0==e)return e;for(const i in s){const{tabs:t}=s[i];if(parseInt(t)>=e)return t}const r=parseInt(s[s.length-1].tabs);return r}}},"71c3":function(t,e,s){"use strict";s.d(e,"a",(function(){return i}));var r=s("1c74");class i extends r["e"]{constructor(){super()}static create(t){return this.postJson("drug_orders",t)}static updateDispensationOrders(t){return this.postJson("dispensations",{program_id:this.getProgramID(),dispensations:t.map(t=>({date:this.getSessionDate(),drug_order_id:t["order_id"],quantity:t["quantity"]}))})}static getDrugOrderHistory(t){return this.getJson("drug_orders",{patient_id:t})}static getDrugOrders(t){return this.getJson("drug_orders",{patient_id:t,date:this.getSessionDate(),program_id:this.getProgramID()})}static getAllDrugOrders(t,e=1e3){return this.getJson("drug_orders",{patient_id:t,program_id:r["e"].getProgramID(),page_size:e})}static getLastDrugsReceived(t){return this.getJson(`patients/${t}/last_drugs_received`,{date:this.getSessionDate(),program_id:this.getProgramID()})}static getDrugDosages(t,e,s=this.getSessionDate()){const r={drug_id:e,date:s};return this.getJson(`programs/${this.getProgramID()}/patients/${t}/drug_doses`,r)}static getOrderByPatient(t,e){return this.getJson("/drug_orders",{patient_id:t,program_id:this.getProgramID(),...e})}}},"9e6a":function(t,e,s){"use strict";s.r(e);var r=s("7a23");function i(t,e,s,i,a,n){const o=Object(r["resolveComponent"])("his-standard-form");return Object(r["openBlock"])(),Object(r["createBlock"])(o,{fields:t.fields,skipSummary:!0,cancelDestinationPath:t.cancelDestination},null,8,["fields","cancelDestinationPath"])}var a=s("d95e"),n=s("b5e4"),o=s("5f2c"),d=s("2ef0"),u=s("7365"),c=s("9283"),g=s("8e8b"),p=Object(r["defineComponent"])({mixins:[u["a"]],data:()=>({dispensation:{}}),watch:{ready:{handler(t){t&&(this.dispensation=new o["a"](this.patientID,this.providerID),this.fields=this.getFields())},immediate:!0}},methods:{saveDispensations(t){return this.dispensation.saveDispensations(this.buildDispensations(t))},buildDispensations(t){var e;if(!Object(d["isEmpty"])(null===(e=t.other)||void 0===e?void 0:e.dispenses)){let e=[];return t.other.dispenses.forEach(([s,r])=>{e=[...e,...this.dispensation.buildDispensations(t.other.order_id,s,r)]}),e}return this.dispensation.buildDispensations(t.other.order_id,parseInt(t.value.toString()),1)},async buildMedicationHistory(){return await this.dispensation.loadDrugHistory(),this.dispensation.getDrugHistory().sort((t,e)=>{const s=new Date(t.order.start_date),r=new Date(e.order.start_date);return r-s}).map(t=>({medication:t.drug.name,date:c["b"].toStandardHisDisplayFormat(t.order.start_date),amount:t.quantity}))},buildOrderOptions(){return this.dispensation.getCurrentOrder().map(t=>({label:t.drug.name,value:t.quantity||0,other:{order:t,drug_id:t.drug.drug_id,order_id:t.order.order_id,available_stock:t.available_stock||"-",amount_needed:this.calculateCompletePack(t),pack_sizes:this.getPackSizesRows(t.drug.drug_id,t.available_stock||0)}}))},getPackSizesRows(t,e){const s=this.dispensation.getDrugPackSizes(t);return s.map(t=>{const s=e>0?Math.floor(e/t):"-";return[t,s,0,0]})},calculateCompletePack(t){const e=parseFloat(t.amount_needed)-(t.quantity||0);return e<=0?0:this.dispensation.calcCompletePack(t,e)},isDoneDispensing(t){return t.map(t=>0!=t.value).every(Boolean)},async isValidDispensation(t){let e=!0;const s=parseInt(t.value.toString()),r=t.other["amount_needed"],i=s/r*100;return i>110&&(e=await Object(n["a"])("Are you sure you want to dispense over 110% of the prescribed pill count?")),i<100&&(e=await Object(n["a"])("Are you sure you want to dispense less than 100% of the prescribe amount?")),e},getFields(){return[{id:"dispenses",helpText:"Dispensation",type:a["b"].TT_DISPENSATION_INPUT,init:async()=>(this.dispensation.setIsDrugManagementEnabled(await g["a"].get("IS_ART_DRUG_MANAGEMENT_ENABLED")),await this.dispensation.loadCurrentDrugOrder(),!0),onValueUpdate:async(t,e)=>-1!=t.value&&this.isDoneDispensing(e)?this.$router.push({name:"appointment"}):(t.other["amount_needed"]=t.other["amount_needed"]-(parseInt(t.value.toString())||0),t.other["amount_needed"]<0&&(t.other["amount_needed"]=0),await this.dispensation.loadCurrentDrugOrder(),this.buildOrderOptions()),onValue:async(t,e)=>{if(-1===t.value){const e=await this.dispensation.voidOrder(t.other.order_id);return!e}if(!e){const e=await this.isValidDispensation(t);if(!e)return!1}const s=await this.saveDispensations(t);return!!s||(Object(n["e"])("Unable to save dispensation"),!1)},config:{isDrugManagementEnabled:()=>this.dispensation.useDrugManagement,medicationHistory:()=>this.buildMedicationHistory(),toolbarInfo:[{label:"Name",value:this.patient.getFullName()},{label:"Gender",value:this.patient.getGender()},{label:"Date Of Birth",value:c["b"].toStandardHisDisplayFormat(this.patient.getBirthdate())}],hiddenFooterBtns:["Clear","Finish"]},options:()=>this.buildOrderOptions()}]}}}),l=s("6b0d"),h=s.n(l);const D=h()(p,[["render",i]]);e["default"]=D}}]);
//# sourceMappingURL=chunk-0b432415.3e5b2a7a.js.map