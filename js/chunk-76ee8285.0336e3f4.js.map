{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/OPD/views/encounters/Diagnosis.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","PatientDiagnosisService","AppEncounterService","constructor","patientID","providerID","filter","page","limit","conceptSetId","ConceptService","getConceptID","getJson","id","name","ClinicalNotesService","super","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","activeField","notesService","diagnosisService","malariaTestResult","watch","ready","isReady","this","OrderService","getLatestMalariaTestResult","getFields","immediate","deep","methods","_","computedData","createEncounter","diagnosisData","resolveObs","saveObservationList","notesData","isEmpty","nextTask","mapListToOptions","list","map","item","label","value","other","concept_id","isChecked","sort","a","b","malaria","find","o","alertConfirmation","helpText","type","FieldType","TT_INFINITE_SCROLL_MULTIPLE_SELECT","validation","Validation","required","options","async","getDiagnosis","beforeNext","checkMalariaResult","computedValue","tag","obs","buildValueCodedFromConceptId","summaryMapValue","config","isFilterDataViaApi","showKeyboard","TT_TEXT","buildValueText","__exports__"],"mappings":"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","file":"js/chunk-76ee8285.0336e3f4.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ClinicalNotesService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 105, providerID) \n    }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientDiagnosisService } from \"@/apps/OPD/services/patient_diagnosis_service\"\nimport { ClinicalNotesService } from \"@/apps/OPD/services/clinical_notes_service\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { isEmpty } from 'lodash';\nimport { ConceptName } from '@/interfaces/conceptName';\nimport { OrderService } from '@/services/order_service';\nimport { alertConfirmation } from '@/utils/Alerts';\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    activeField: '',\n    notesService: {} as any,\n    diagnosisService: {} as any,\n    malariaTestResult: 'No' as string\n  }),\n  watch: {\n    ready: {\n      async handler(isReady: boolean) {\n        if(isReady){\n          this.malariaTestResult = await OrderService.getLatestMalariaTestResult(this.patientID)\n          this.notesService = new ClinicalNotesService(this.patientID, this.providerID)\n          this.diagnosisService = new PatientDiagnosisService(this.patientID, this.providerID)\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true,\n      deep: true\n    }\n  },\n  methods: {\n    async onSubmit(_: any, computedData: any){\n      await this.diagnosisService.createEncounter()\n      \n      const diagnosisData = await this.resolveObs({...computedData}, 'diagnosis')      \n      await this.diagnosisService.saveObservationList(diagnosisData)\n\n      const notesData = await this.resolveObs({...computedData}, 'notes')\n      if(!isEmpty(notesData)) {\n        await this.notesService.createEncounter()\n        await this.notesService.saveObservationList(notesData)\n      }\n\n      this.nextTask()        \n    },\n    mapListToOptions(list: ConceptName[]){\n      if(isEmpty(list)) return []\n      return list.map(item => ({\n        label: item.name, value: item.name, other: item.concept_id, isChecked: false\n      })).sort((a, b) => a.label < b.label ? -1 : a.label > b.label ? 1 : 0)\n    },\n    async checkMalariaResult(data: Array<any>){\n      const malaria = data.find(o => o.label === 'Malaria')      \n      if(malaria) {\n        if(this.malariaTestResult === \"Positive\") return true\n        return await alertConfirmation(`Patient has ${this.malariaTestResult} malaria test result. Do you want to continue?`)\n      }\n      return true\n    },\n    getFields(): Array<Field>{\n      return [\n        {\n          id: 'primary_diagnosis',\n          helpText: 'Select primary diagnosis',\n          type: FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n          validation: (data: any) => Validation.required(data),\n          options: async (_, filter='', page=1, limit=10) => this.mapListToOptions(\n            await PatientDiagnosisService.getDiagnosis(filter, page, limit)\n          ),\n          beforeNext: async (data: any) => await this.checkMalariaResult(data),\n          computedValue: (options: Array<Option>) => ({\n            tag: 'diagnosis',\n            obs: options.map(({other}) => \n              this.diagnosisService.buildValueCodedFromConceptId('Primary diagnosis', other))\n          }),\n          summaryMapValue: ({ value }: Option) => ({\n            value,\n            label: \"Primary diagnosis\"\n          }),\n          config: {\n            isFilterDataViaApi: true,\n            showKeyboard: true,\n          }\n        },\n        {\n          id: 'secondary_diagnosis',\n          helpText: 'Select secondary diagnosis',\n          type: FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n          options: async (_, filter='', page=1, limit=10) => this.mapListToOptions(\n            await PatientDiagnosisService.getDiagnosis(filter, page, limit)\n          ),\n          beforeNext: async (data: any) => await this.checkMalariaResult(data),\n          computedValue: (options: Array<Option>) => ({\n            tag: 'diagnosis',\n            obs: options.map(({other}) => \n              this.diagnosisService.buildValueCodedFromConceptId('Secondary diagnosis', other))\n          }),\n          summaryMapValue: ({ value }: Option) => ({\n            value,\n            label: \"Secondary diagnosis\"\n          }),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          }\n        },\n        {\n          id: 'clinical_notes',\n          helpText: 'Clinical notes',\n          type: FieldType.TT_TEXT,\n          computedValue: ({value}: Option) => ({\n            tag: 'notes',\n            obs: this.notesService.buildValueText('Clinical notes construct', value)\n          })\n        },\n      ]\n    }\n  }\n})\n","import { render } from \"./Diagnosis.vue?vue&type=template&id=0d6d0dc7&ts=true\"\nimport script from \"./Diagnosis.vue?vue&type=script&lang=ts\"\nexport * from \"./Diagnosis.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}