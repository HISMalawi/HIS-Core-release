{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HTSDBsOrder.vue?1eb4","webpack:///./src/apps/HTS/services/hts_dbs_order.ts","webpack:///./src/apps/HTS/views/encounters/HTSDBsOrder.vue","webpack:///./src/apps/HTS/views/encounters/HTSDBsOrder.vue?8078","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","HtsDbsOrder","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","isDBSsampleCollected","dbsSpecimenID","immediate","methods","formData","computedData","labOrders","undefined","dbs_sample_collection","buildDBSOrder","dbs_specimen_id","saveFormEncounterAndProceed","encounterTypeID","callback","async","createDBSOrder","accessionNumber","concept_id","getCachedConceptID","specimenConcept","reason","specimenID","order","LabOrderService","encounter","createEncounter","orders","OrderService","buildLabOrders","saveOrdersArray","encounter_id","id","helpText","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","obs","buildValueCoded","options","label","value","values","yesNoOptions","TT_BARCODE","requireNext","condition","f","test","buildValueText","config","hiddenFooterBtns","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","facts","age","gender","isEnrolledInProgam","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","patientDashboardUrl","isOnline","isOfflineMode","getOfflinePerson","person","birthdate","dayjs","ProgramService","getSessionDate","diff","saveObsOffline","formdata","status","observations","uploadStatus","meta","resolveObs","enc","saveObservationList","error","Error","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","toastDanger","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","dismiss","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","isCondition","ignored","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-2a19e2a2.958676a7.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"DBS Order\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsDbsOrder extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 199, providerID)\n    }\n}\n","\n  import EncounterMixinVue from \"@/views/EncounterMixin.vue\";\n  import { FieldType } from \"@/components/Forms/BaseFormElements\";\n  import { defineComponent } from \"vue\";\n  import { IonPage } from \"@ionic/vue\";\n  import { Field, Option } from \"@/components/Forms/FieldInterface\";\n  import { LabOrderService } from \"@/apps/ART/services/lab_order_service\";\n  import { OrderService } from \"@/services/order_service\";\n  import { HtsDbsOrder } from \"../../services/hts_dbs_order\";\n  \n  export default defineComponent({\n    components: { IonPage },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n      service: {} as HtsDbsOrder,\n    }),\n    watch: {\n      ready: {\n        handler(ready: boolean) {\n          if (ready) {\n            this.service = new HtsDbsOrder(\n              this.patientID,\n              this.providerID\n            );\n            this.fields = [\n              this.isDBSsampleCollected(),\n              this.dbsSpecimenID()\n            ];\n          }\n        },\n        immediate: true,\n      },\n    },\n    methods: {\n      onFinish(formData: any, computedData: any) {\n        let labOrders: any = undefined;\n        if (formData.dbs_sample_collection === 'Yes') {\n          labOrders = this.buildDBSOrder(formData.dbs_specimen_id)\n        }\n        this.saveFormEncounterAndProceed({\n          encounterTypeID: this.service.encounterTypeID,\n          formData,\n          computedData,\n          labOrders,\n          callback: async () => {\n            if (labOrders) {\n              await this.createDBSOrder(formData.dbs_specimen_id)\n            }\n          }\n        })\n      },\n      buildDBSOrder(accessionNumber: string) {\n        return [{\n          concept_id: HtsDbsOrder.getCachedConceptID('HIV viral load'),\n          specimenConcept: HtsDbsOrder.getCachedConceptID(\"DBS (Free drop to DBS card)\", true),\n          accessionNumber,\n          reason: 'Routine',\n        }]\n      },\n      async createDBSOrder(specimenID: string) {\n        const order = new LabOrderService(this.patientID, this.providerID)\n        const encounter = await order.createEncounter()\n        if (encounter) {\n          const orders = OrderService.buildLabOrders(encounter, this.buildDBSOrder(specimenID))\n          await OrderService.saveOrdersArray(encounter?.encounter_id, orders)\n        }\n      },\n      isDBSsampleCollected(): Field {\n        return {\n          id: \"dbs_sample_collection\",\n          helpText: \"DBS Sample\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          finalComputedValue: (v: any) => {\n            return {\n              obs: this.service.buildValueCoded(\"Is DBS Sample Collected\", v),\n            };\n          },\n          options: () => {\n            return [\n              {\n                label: \"Is DBS Sample Collected?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        };\n      },\n      dbsSpecimenID(): Field {\n        return {\n          id: \"dbs_specimen_id\",\n          helpText: \"DBS Specimen ID\",\n          type: FieldType.TT_BARCODE,\n          requireNext: false,\n          condition: (f: any) => /yes/i.test(`${f.dbs_sample_collection}`),\n          finalComputedValue: (v: Option) => {\n            return {\n              obs: this.service.buildValueText(\"DBS Specimen ID\", `${v}`),\n            };\n          },\n          config: {\n            hiddenFooterBtns: [\n              'Clear'\n            ]\n          },\n          isRequired: () => true\n        };\n      },\n    },\n  });\n  ","import { render } from \"./HTSDBsOrder.vue?vue&type=template&id=20454348&ts=true\"\nimport script from \"./HTSDBsOrder.vue?vue&type=script&lang=ts\"\nexport * from \"./HTSDBsOrder.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const { getOfflinePerson } = Offline()\n            const person = getOfflinePerson(this.offlineID)\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        saveObsOffline(encounterTypeID: number, formdata: any, obs: any, labOrders=undefined as any, status='Pending') {\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: encounterTypeID,\n                meta: formdata,\n                labOrders\n            })\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            try {\n                const enc = new AppEncounterService(\n                    this.patientID,\n                    params.encounterTypeID, \n                    this.providerID\n                )\n                if ((await enc.createEncounter())) {\n                    if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                        status = 'Success'\n                    }\n                }\n                if (typeof params.callback === 'function') {\n                    await params.callback(enc)\n                }\n            } catch (e) {\n                if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                    status = 'NetworkError'\n                } else {\n                    status = 'Exception'\n                }\n                console.error(`${e}`)\n            }\n            if (status === 'Exception') {\n                throw new Error('Unable to proceed!')\n            }\n            this.saveObsOffline(\n                params.encounterTypeID, \n                params.formData,\n                obs,\n                params.labOrders,\n                status\n            )\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}