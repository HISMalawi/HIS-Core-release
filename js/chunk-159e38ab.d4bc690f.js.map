{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/SurgicalHistory.vue?f129","webpack:///./src/apps/ANC/Services/anc_surgical_history_service.ts","webpack:///./src/apps/ANC/Views/Encounters/SurgicalHistory.vue","webpack:///./src/apps/ANC/Views/Encounters/SurgicalHistory.vue?59dd","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","formFields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","AncSurgicalHistoryService","AppEncounterService","constructor","patientID","providerID","super","ConceptService","getConceptsByCategory","sort","a","b","name","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","getFields","immediate","methods","computedData","obs","resolveObs","anc","createEncounter","saveObservationList","nextTask","surgeryOptions","onMap","surgicalHistoryOptions","map","h","label","value","isChecked","id","helpText","type","FieldType","TT_MULTIPLE_SELECT","validation","v","Validation","required","onValueUpdate","list","option","i","noneIndex","findIndex","computedValue","find","buildValueText","buildValueCoded","options","config","footerBtns","onClickComponentEvents","refreshOptions","onClick","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","endTime","elapsedTime","minutes","userAgentObs","getPlatformName","durationObs","buildValueNumber","error","toastWarning","enc","encounterTypeID","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","runflowState","state","states","username","split","provider","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","usernameA","usernameB","p","_p$person","names","_p$person2","latestName","toOption","other","mapStrToOptions","items","path","yesNoOptions","toYesNoOption","values","mapOptions","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-159e38ab.d4bc690f.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { ConceptService } from \"@/services/concept_service\";\n\nexport class AncSurgicalHistoryService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 83, providerID)\n    }\n\n    static surgicalHistoryOptions() {\n        return ConceptService.getConceptsByCategory('anc_surgical_history')\n            .sort((a, b) => a.name > b.name ? 1 : -1)\n    }\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncSurgicalHistoryService} from \"@/apps/ANC/Services/anc_surgical_history_service\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { find, findIndex } from 'lodash'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) this.formFields = this.getFields()\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData)\n      const anc = new AncSurgicalHistoryService(this.patientID, this.providerID)\n      await anc.createEncounter()\n      await anc.saveObservationList(obs as ObsValue[])\n      this.nextTask()\n    },\n    surgeryOptions(onMap: (v: Option) => Option) {\n      return [\n        ...AncSurgicalHistoryService.surgicalHistoryOptions(), \n        { name: 'None'}\n      ].map(h =>(onMap({\n          label: h.name,\n          value: 'Yes',\n          isChecked: false\n      })))\n    },\n    getFields() {\n      return [\n        {\n          id: 'history',\n          helpText: 'Previous Surgical Procedure(s) Done',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          validation: (v: Option[]) => Validation.required(v),\n          onValueUpdate: (list: Option[], option: Option) => {\n            if (option.label === 'None' && option.isChecked) {\n                return list.map(i => {\n                    if (i.label != \"None\") i.isChecked = false;\n                    return i\n                })\n            } else if (option.label != 'None' && option.isChecked){\n                const noneIndex = findIndex(list, { label: \"None\" });\n                list[noneIndex].isChecked = false; \n            }\n            return list\n          },\n          computedValue: (v: Option[]) => {\n            if (find(v, { label: 'None' })) {\n              return AncSurgicalHistoryService.buildValueText('Procedure done', 'None')\n            }\n            return v.map(i => AncSurgicalHistoryService.buildValueCoded(i.label, `${i.value}`))\n          },\n          options: () => this.surgeryOptions(i => i),\n          config: {\n            footerBtns: [\n              {\n                \"name\": \"None\",\n                \"slot\": \"end\",\n                onClickComponentEvents: {\n                  refreshOptions: () => this.surgeryOptions(i => {\n                    i.isChecked = i.label === 'None'\n                    return i\n                  })\n                },\n                onClick: () => \"None\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./SurgicalHistory.vue?vue&type=template&id=487f2895&ts=true\"\nimport script from \"./SurgicalHistory.vue?vue&type=script&lang=ts\"\nexport * from \"./SurgicalHistory.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}