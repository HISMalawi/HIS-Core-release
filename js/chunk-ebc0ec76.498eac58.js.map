{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsContact.vue?f599","webpack:///./src/apps/HTS/services/hts_contact_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsContact.vue","webpack:///./src/apps/HTS/views/encounters/HtsContact.vue?fe26","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","HtsContactService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","push","discussPartnerField","contactIndexPageField","immediate","methods","formData","computedData","saveFormEncounterAndProceed","encounterTypeID","buildDateObs","conceptName","date","isEstimate","obs","match","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","buildValueCoded","options","label","value","values","yesNoOptions","context","TT_TABLE_VIEWER","onload","c","condition","f","discuss_partner","validation","parseInt","async","contact_index_page","rows","other","contacts","formFields","contactRegistrationWorflowForm","modal","MultiStepPopupForm","length","rowID","given_name","val","family_name","relation_to_contact","birth_date","name","color","action","KeyboardInput","TT_SUMMARY","Object","keys","filter","map","d","valLabel","find","modalController","dismiss","alertConfirmation","splice","findIndex","r","child","resolveObs","onDidDismiss","columns","reduce","a","concat","config","footerBtns","slot","onClick","fdata","PersonField","getGivenNameField","getFamilyNameField","TT_SELECT","mapStrToOptions","dob","getDobConfig","ageThreshold","computeValue","age","HisDate","getAgeInYears","buildValueNumber","minDate","dayjs","facts","birthDate","add","format","maxDate","subtract","generateDateFields","gender","getGenderField","cell","getCellNumberField","contact_hiv_status","ipv_status","contact_consent","notification_means","TT_DATE_PICKER","defaultValue","toDate","infoItems","getCurrentRegionField","onClickComponentEvents","setValue","computedValue","getCurrentDistrictField","defaultComputedOutput","undefined","test","current_region","defaultOutput","toOption","district","getCurrentTAfield","currentTA","getCurrentVillageField","village","TT_NOTE","self_testkit_given","TT_TEXT","frs_given","contact_on_art","required","getDate","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","tag","__exports__","FlowState","dformat","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","isEnrolledInProgam","created","$route","params","patient_id","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","patientDashboardUrl","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","error","toastWarning","enc","createEncounter","saveObservationList","callback","toastDanger","saveObsOffline","observations","uploadStatus","meta","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","b","usernameA","usernameB","p","names","latestName","items","i","path","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","accum","cur","Array","isArray","Promise","all","inArray","arr","expression","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","$emit","mapToOption","listOptions","item","resolvePerson","computedForm","attr","isPlainObject","Validation","isName","form","PersonService","searchGivenName","searchFamilyName","customOptions","includeHelpText","summaryLabel","estimateDateFromAge","allowUnknownMonthDay","AGE_ESTIMATE_FIELD","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","dynamicHelpText","home_region","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","field","filtered","ok","address","LocationService","createAddress","getHomeTaField","showKeyboard","isFilterDataViaApi","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","home_village","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","getFacilityLocationField","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","birthdate_estimated","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","getNationalID","npid","show","Service","getProgramName","isCondition","ignored","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-ebc0ec76.498eac58.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Contact tracing\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsContactService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 195, providerID)\n    }\n}\n","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport {\n  Field,\n  Option,\n} from \"@/components/Forms/FieldInterface\";\nimport { IonPage, modalController } from \"@ionic/vue\";\nimport { HtsContactService } from \"@/apps/HTS/services/hts_contact_service\";\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport {\n  EstimationFieldType,\n  generateDateFields,\n} from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport KeyboardInput, { MultiStepPopupForm } from \"@/utils/PopupKeyboard\";\nimport HisDate from \"@/utils/Date\";\nimport { alertConfirmation } from \"@/utils/Alerts\";\nimport { find } from \"lodash\";\nimport { toDate } from \"@/utils/Strs\";\nimport dayjs from 'dayjs';\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsContactService(this.patientID, this.providerID);\n          this.fields.push(this.discussPartnerField());\n          this.fields.push(this.contactIndexPageField());\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    onFinish(formData: any, computedData: any) {\n      this.saveFormEncounterAndProceed({\n        encounterTypeID: this.service.encounterTypeID,\n        formData,\n        computedData,\n      })\n    },\n    buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n      let obs = {};\n      if (date.match(/unknown/i)) {\n        obs = this.service.buildValueText(conceptName, \"Unknown\");\n      } else if (isEstimate) {\n        obs = this.service.buildValueDateEstimated(conceptName, date);\n      } else {\n        obs = this.service.buildValueDate(conceptName, date);\n      }\n      return obs;\n    },\n    discussPartnerField(): Field {\n      return {\n        id: \"discuss_partner\",\n        helpText: \"Discuss Partner\",\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            obs: this.service.buildValueCoded(\"Consent Confirmation\", v),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Does the client consent to discuss contact?\",\n              value: \"\",\n              values: this.yesNoOptions(),\n            },\n          ];\n        },\n      };\n    },\n    contactIndexPageField(): Field {\n      let context: any = null;\n      return {\n        id: \"contact_index_page\",\n        helpText: \"Registered contacts\",\n        type: FieldType.TT_TABLE_VIEWER,\n        onload: (c: any) => (context = c),\n        condition: (f: any) => f.discuss_partner === \"Yes\",\n        isRequired: () => true,\n        validation: (v: Option[]) => {\n          if (parseInt(`${v[0].value}`) <= 0) {\n            return [\"Contact list is empty!!. Please register some\"];\n          }\n          return null;\n        },\n        options: async (f: any) => {\n          let data: any = {};\n          if (f.contact_index_page != null) {\n            data = f.contact_index_page[0] || {};\n          }\n          const rows: Array<any> = [...(data?.other?.rows || [])];\n          const contacts: Record<string, any> = {\n            ...(data?.other?.contacts || {}),\n          };\n          const formFields = this.contactRegistrationWorflowForm();\n          const modal = await MultiStepPopupForm(formFields, {\n            formLabel: `Contact Registration #${rows.length + 1}`,\n            onFinish: async (_: any, computedData: any) => {\n              const rowID = rows.length + 1;\n              rows.push([\n                rowID,\n                `${computedData.given_name.val} ${computedData.family_name.val}`,\n                computedData.relation_to_contact.val,\n                computedData.birth_date.val + \" years\",\n                {\n                  name: \"View\",\n                  type: \"button\",\n                  color: \"primary\",\n                  action: async () => {\n                    KeyboardInput(\n                      {\n                        id: \"summary_view\",\n                        helpText: \"More details\",\n                        type: FieldType.TT_SUMMARY,\n                        options: () => {\n                          return Object.keys(computedData)\n                            .filter((v: any) => computedData[v].val)\n                            .map((d: any) => {\n                              return {\n                                value: computedData[d].val,\n                                label:\n                                  computedData[d].valLabel ||\n                                  find(formFields, { id: d })?.helpText,\n                              };\n                            }) as Option[];\n                        },\n                      },\n                      () => modalController.dismiss()\n                    );\n                  },\n                },\n                {\n                  name: \"Remove\",\n                  type: \"button\",\n                  color: \"danger\",\n                  action: async () => {\n                    if (\n                      await alertConfirmation(\n                        \" Are you sure you want to remove contact?\"\n                      )\n                    ) {\n                      delete context.data[0].other.contacts[rowID];\n                      context.data[0].label = `${\n                        parseInt(`${context.data[0].label}`) - 1\n                      }`;\n                      context.data[0].value = parseInt(context.data[0].label);\n                      context.data[0].other.rows.splice(\n                        context.data[0].other.rows.findIndex(\n                          (r: any) => r[0] === rowID\n                        ),\n                        1\n                      );\n                    }\n                  },\n                },\n              ]);\n              contacts[rowID] = {\n                ...(await this.service.buildValueText(\n                  \"Patient contacts construct\",\n                  `${computedData.given_name.val} ${computedData.family_name.val}`\n                )),\n                child: await this.resolveObs(computedData),\n              };\n              modalController.dismiss();\n            },\n          });\n          await modal.onDidDismiss();\n          return [\n            {\n              label: `${rows.length}`,\n              value: `${rows.length}`,\n              other: {\n                columns: [\"ID\", \"Name\", \"Relation\", \"Age\"],\n                contacts,\n                rows,\n              },\n            },\n          ];\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: Object.values(v[0].other.contacts).reduce(\n              (a: any, c: any) => a.concat(c),\n              []\n            ),\n          };\n        },\n        config: {\n          footerBtns: [\n            {\n              name: \"Add New\",\n              slot: \"end\",\n              color: \"success\",\n              onClick: async () =>\n                (context.data = await context.options(context.fdata)),\n            },\n          ],\n        },\n      };\n    },\n    contactRegistrationWorflowForm(): Field[] {\n      return [\n        (() => {\n          const name = PersonField.getGivenNameField();\n          name.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\n                \"First name of contact\",\n                v.value\n              ),\n            };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getFamilyNameField();\n          name.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Last name of contact\", v.value),\n            };\n          };\n          return name;\n        })(),\n         {\n          id: \"relation_to_contact\",\n          helpText: \"Contact is a ___\",\n          type: FieldType.TT_SELECT,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\n                \"Relationships of contact\",\n                v.value as string\n              ),\n            };\n          },\n          isRequired: () => true,\n          options: () => {\n            return this.mapStrToOptions([\n              \"Sexual Partner\",\n              \"Biological Children\",\n              \"Biological Parents\",\n            ]);\n          },\n        },\n        ...(() => {\n          const dob = PersonField.getDobConfig(false);\n          const ageThreshold = 14;\n          dob.helpText = \"Contact Birth\";\n          dob.computeValue = (date: string) => {\n            const age = HisDate.getAgeInYears(date);\n            return {\n              valLabel: \"Age\",\n              val: age,\n              obs: this.service.buildValueNumber(\"Age of contact\", age),\n            };\n          };\n          dob.minDate = (f: any) => {\n            let minDate = \"\"\n            if (f.relation_to_contact.value === \"Biological Children\") {\n              minDate = dayjs(this.facts.birthDate).add(ageThreshold, \"year\").format(\"YYYY-MM-DD\");\n            }\n            return minDate\n          }\n          dob.maxDate = (f: any) => {\n            let maxDate = \"\"\n            if (f.relation_to_contact.value === \"Biological Parents\") {\n              maxDate = dayjs(this.facts.birthDate).subtract(ageThreshold, \"year\").format(\"YYYY-MM-DD\");\n            }\n            return maxDate\n          };\n          return generateDateFields(dob);\n        })(),\n        (() => {\n          const gender = PersonField.getGenderField([\n            { label: \"Male\", value: \"M\" },\n            { label: \"Female Non Pregnant\", value: \"FNP\" },\n            { label: \"Female Pregnant\", value: \"FP\" },\n            { label: \"Female Breastfeeding\", value: \"FBf\" },\n          ]);\n          gender.helpText = 'Sex of contact'\n          gender.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Gender of contact\", v.value),\n            };\n          };\n          return gender;\n        })(),\n         (() => {\n          const cell: Field = PersonField.getCellNumberField();\n          cell.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Contact phone number\", v.value),\n            };\n          };\n          return cell;\n        })(),\n        {\n          id: \"contact_hiv_status\",\n          helpText: \"HIV Status of the contact\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\"Contact HIV tested\", v.value),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\"Positive\", \"Negative\", \"Unknown\"]);\n          },\n        },\n        {\n          id: \"last_time_hiv_tested\",\n          helpText: \"When was Contact's Last HIV Test\",\n          type: FieldType.TT_SELECT,\n          condition: (f: any) => f.contact_hiv_status.value && \n            f.contact_hiv_status.value != 'Unknown',\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => {\n            return {\n              obs: this.service.buildValueText(\n                \"Contact HIV test date\",\n                `${v.value} ago`\n              ),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\n              \"A year or more ago\",\n              \"Less than a year ago\",\n            ]);\n          },\n        },\n        {\n          id: \"ipv_status\",\n          helpText: \"IPV Status\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"IPV Status\", v.value),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\"Risk\", \"No Risk\"]);\n          },\n        },\n        {\n          id: \"contact_consent\",\n          helpText: \"Consent to reach out to the contact\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => f.ipv_status.value === \"No Risk\",\n          finalComputedValue: (val: any) => {\n            return {\n              val,\n              obs: this.service.buildValueCoded(\n                \"Consent to contact the contact\",\n                val\n              ),\n            };\n          },\n          options: () => {\n            return [\n              {\n                label: \"Does the client consent to reach out to the contact?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"notification_means\",\n          helpText: \"Recommended mode of Notification\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          condition: (f: any) => f.contact_consent === \"Yes\",\n          options: () => this.mapStrToOptions([\"Active\", \"Passive\"]),\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\"Notification Means\", v.value),\n            };\n          },\n        },\n        {\n          id: \"referral_type\",\n          helpText: \"Referral Type\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\"Referral type\", v.value),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\n              \"Provider referral\",\n              \"Contact referral\",\n              \"Dual referral\",\n            ]);\n          },\n        },\n        {\n          id: \"set_appointment\",\n          helpText: \"Appointment Date (Within 2 weeks)\",\n          type: FieldType.TT_DATE_PICKER,\n          isRequired: () => true,\n          defaultValue: () => this.service.date,\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          finalComputedValue: (val: any) => {\n            return {\n              val: toDate(val.value),\n              obs: this.service.buildValueDate(\n                \"Contact appointment date\",\n                val.value\n              ),\n            };\n          },\n          config: {\n            minDate: () => this.service.date,\n            maxDate: () => dayjs(this.service.date).add(15, \"day\").toDate(),\n            infoItems: (date: string) => {\n              return [\n                {\n                  label: \"User set appointment\",\n                  value: toDate(date),\n                },\n              ];\n            },\n          },\n        },\n        {\n          id: \"testing_location\",\n          helpText: \"Testing Location\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueText(\n              \"Contact Appointment location\",\n              v.value\n            ),\n          }),\n          options: () => {\n            return this.mapStrToOptions([\n              \"Facility\",\n              \"Home/Other Facility\"\n            ]);\n          },\n          condition: (f: any) => f.notification_means.value === \"Active\",\n        },\n        {\n          ...PersonField.getCurrentRegionField(),\n          helpText: \"Contact's Current Region of Residence\",\n          config: {\n            footerBtns: [\n              {\n                name: \"Same as index\",\n                slot: \"end\",\n                onClickComponentEvents: {\n                  setValue: () => 'Same as index'\n                },\n                onClick: () => \"Same as index\"\n              }\n            ]\n          },\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\"Contact current region\", v.label),\n          })\n        },\n        {\n          ...PersonField.getCurrentDistrictField(),\n          helpText: \"Contact's Current District of Residence\",\n          defaultComputedOutput: undefined,\n          condition: (f: any) => !/same as index/i.test(f.current_region.label) &&\n            f.notification_means.value === \"Active\",\n          defaultOutput: (f: any) => {\n            if (/Same as index/i.test(f.current_region.label)) {\n              return this.toOption(this.facts.district)\n            }\n          },\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\n              \"Contact current district\",\n              v.label\n            ),\n          }),\n        },\n        {\n          ...PersonField.getCurrentTAfield(),\n          helpText: \"Contact's Current TA of Residence\",\n          defaultComputedOutput: undefined,\n          condition: (f: any) => !/foreign|same as index/i.test(`${f.current_region.label}`) && \n            f.notification_means.value === \"Active\",\n          defaultOutput: (f: any) => {\n            if (/Same as index/i.test(f.current_region.label)) {\n              return this.toOption(this.facts.currentTA)\n            }\n          },\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\"Contact current TA\", v.label),\n          }),\n        },\n        {\n          ...PersonField.getCurrentVillageField(),\n          helpText: \"Contact's Current Village of Residence\",\n          defaultComputedOutput: undefined,\n          condition: (f: any) => !/foreign|same as index/i.test(`${f.current_region.label}`) &&\n            f.notification_means.value === \"Active\",\n          defaultOutput: (f: any) => {\n            if (/Same as index/i.test(f.current_region.label)) {\n              return this.toOption(this.facts.village)\n            }\n          },\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\n              \"Contact current village\",\n              v.value\n            ),\n          }),\n        },\n        {\n          id: \"contact_address\",\n          helpText: \"Physical address\",\n          type: FieldType.TT_NOTE,\n          isRequired: () => true,\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          finalComputedValue: (v: Option) => ({\n            val: v.value,\n            obs: this.service.buildValueText(\n              \"Contact physical address\",\n              v.value\n            ),\n          }),\n        },\n        {\n          id: \"self_testkit_given\",\n          helpText: \"Contact Self Test Kit Given\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => {\n            return (\n              f.contact_consent === \"No\" ||\n              f.notification_means.value === \"Passive\"\n            );\n          },\n          finalComputedValue: (v: any) => ({\n            obs: this.service.buildValueCoded(\"Self-Test kit given\", v),\n          }),\n          options: () => {\n            return [\n              {\n                label:\n                  \"Was a self test kit given to the Index for their contact?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"reason_for_not_giving_self_testkit\",\n          helpText: \"Reason for not providing a self test (Optional)\",\n          type: FieldType.TT_NOTE,\n          condition: (f: any) => f.self_testkit_given === \"No\",\n          finalComputedValue: (v: Option) => {\n            if (!v) return;\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\n                \"Reason for not giving self-test kit\",\n                v.value\n              ),\n            };\n          },\n        },\n        {\n          id: \"frs_given\",\n          helpText: \"FRS Given\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => false,\n          condition: (f: any) => f.notification_means.value === \"Passive\",\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueCoded(\"FRS given\", v),\n          }),\n          options: () => {\n            return [\n              {\n                label: \"Was FRS given to the Index client for their contact?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"reason_for_not_giving_frs\",\n          helpText: \"Reason for not providing FRS\",\n          type: FieldType.TT_TEXT,\n          isRequired: () => true,\n          condition: (f: any) => f.frs_given === \"No\",\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueText(\n              \"Reason for not giving FRS\",\n              v.value\n            ),\n          }),\n        },\n        {\n          id: \"contact_on_art\",\n          helpText: \"On ART\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => false,\n          condition: (f: any) =>\n            f.contact_hiv_status.value &&\n            f.contact_hiv_status.value === \"Positive\",\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueCoded(\n              \"Contact ever registered at ART clinic\",\n              v\n            ),\n          }),\n          options: () => {\n            return [\n              {\n                label: \"Is the Contact on ART?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"index_contact\",\n          helpText: \"Contact Indexing\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"No\",\n          options: () => {\n            return [\n              {\n                label: \"Do you want to convert the contact to an index client?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueCoded(\"Index patient\", v),\n          }),\n        },\n        {\n          id: \"art_start_location\",\n          helpText: \"Contact ART start location?\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueText(\n              \"Contact location of ART initiation\",\n              v.value\n            ),\n          }),\n          options: () => {\n            return this.mapStrToOptions([\n              \"Same Health Facility\",\n              \"Other Health Facility\"\n            ]);\n          },\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"Yes\",\n        },\n        ...generateDateFields(\n          {\n            id: \"date_started_art\",\n            helpText: \"Contact Art Start\",\n            required: true,\n            condition: (f: any) =>\n              f.contact_on_art && f.contact_on_art === \"Yes\",\n            minDate: () => this.facts.birthDate,\n            maxDate: () => this.service.getDate(),\n            estimation: {\n              allowUnknown: true,\n              estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD,\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                isEstimate,\n                obs: this.buildDateObs(\n                  \"Contact Date ART started\",\n                  date,\n                  isEstimate\n                ),\n              };\n            },\n          },\n          this.service.getDate()\n        ),\n        {\n          id: \"contact_art_number\",\n          helpText: \"Contact ART number\",\n          type: FieldType.TT_TEXT,\n          isRequired: () => true,\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"Yes\",\n          computedValue: (d: Option) => ({\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Contact ART number at previous location\",\n              d.value\n            ),\n          }),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./HtsContact.vue?vue&type=template&id=74e9764a&ts=true\"\nimport script from \"./HtsContact.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsContact.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            try {\n                obs = await this.resolveObs(params.computedData)\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            dynamicHelpText: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Current Region of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'Current District of Residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'Current TA of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Current Village of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}