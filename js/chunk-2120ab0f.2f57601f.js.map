{"version":3,"sources":["webpack:///./src/apps/ART/services/reception_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/apps/ART/views/encounters/Reception.vue?68fe","webpack:///./src/apps/ART/views/encounters/Reception.vue","webpack:///./src/apps/ART/views/encounters/Reception.vue?06c9","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/utils/GuidelineEngine.ts"],"names":["ReceptionService","patientID","providerID","sitePrefix","this","GLOBAL_PROP","identifier","ProgramService","postJson","arv","AppEncounterService","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","facts","ready","watch","handler","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","split","username","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","activeField","onFinishAction","onFinish","skipSummary","cancelDestinationPath","mixins","EncounterMixinVue","reception","hasARVNumber","suggestedNumber","patientType","getFields","formData","computedData","createEncounter","encounter","toastWarning","registrationObs","saveObservationList","capture_arv","createArvNumber","arv_number","invalidate","toastSuccess","guardianPresent","who_is_present","getGuardian","id","helpText","type","FieldType","TT_MULTIPLE_YES_NO","validation","val","Validation","required","neitherOr","anyEmpty","computedValue","buildValueCoded","concept","onValueUpdate","active","o","form","property","TT_SELECT","requireNext","init","ARVNumber","getPatientIdentifier","PatientTypeService","loadPatientType","getType","TT_TEXT","loadSitePrefix","getNextSuggestedARVNumber","j","replace","f","defaultValue","config","prependValue","artApp","HisApp","getActiveApp","programPatientIdentifiers","arvType","prefix","_resolveDynamicComponent","formType","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"8QAIaA,EAAb,wDAEI,WAAYC,EAAmBC,GAAkB,oCAC7C,cAAMD,EAAW,GAAIC,GACrB,EAAKC,WAAa,GAF2B,EAFrD,oDAOI,WACI,OAAOC,KAAKD,aARpB,qFAWI,8GAC4BE,OAAYF,aADxC,OACIC,KAAKD,WADT,uDAXJ,sFAeI,SAAgBG,GACZ,OAAOC,OAAeC,SAAS,wBAAyB,CACpD,WAAcJ,KAAKH,UACnB,gBAAmB,EACnBK,iBAnBZ,4BAuBI,SAAeG,GACX,gBAAUL,KAAKD,WAAf,gBAAiCM,OAxBzC,GAAsCC,S,sCCA1BC,E,iPAAZ,SAAYA,GACRA,iCACAA,+CACAA,uDACAA,6CACAA,yBACAA,kBANJ,CAAYA,MAAS,KAQrB,IAAMC,EAAU,SAACC,GAAD,OAAeC,OAAQC,2BAA2BF,IAErDG,EAA2D,CACpE,qEAAsE,CAClEC,SAAU,EACVC,QAAS,CACLC,MAAO,WAAF,8CAAE,8GAASC,EAAT,EAASA,iBAAT,SACkBC,eACjB,6BADgC,0BAEbT,EAAQQ,IAC3B,qEACA,CACI,CAAEE,KAAM,SAAUC,KAAM,MAAOC,MAAO,WACtC,CAAEF,KAAM,iBAAkBC,KAAM,MAAOC,MAAO,WAC9C,CAAEF,KAAM,kBAAmBC,KAAM,MAAOC,MAAO,YARpD,cACGC,EADH,yBAWe,WAAXA,EACDd,EAAUe,wBACC,mBAAXD,EACAd,EAAUgB,uBACVhB,EAAUiB,UAfb,2CAAF,sDAAE,IAkBXC,WAAY,CACRC,QADQ,SACAA,GACJ,MAAmB,iBAAZA,GAEXV,iBAJQ,SAISW,EAJT,GAIgD,IAAlBC,EAAkB,EAAlBA,YAClC,OAAOA,GAAeD,KAIlC,+DAAgE,CAC5Dd,SAAU,EACVC,QAAS,CACLC,MAAO,WAAF,8CAAE,gHAASc,EAAT,EAASA,UAAWD,EAApB,EAAoBA,YAApB,SACkBX,eACjB,6BAA8B,GADE,uBAEhBT,EAAQoB,GAFQ,uCAEmCpB,EAAQqB,IAC3E,CACI,CAAEX,KAAM,SAAUC,KAAM,MAAOC,MAAO,UACtC,CAAEF,KAAM,sBAAuBC,KAAM,MAAOC,MAAO,aANxD,cACGC,EADH,yBASe,wBAAXA,EACDd,EAAUuB,oBACVvB,EAAUe,yBAXb,2CAAF,sDAAE,IAcXG,WAAY,CACRI,UADQ,SACEA,EADF,GACyC,IAAlBD,EAAkB,EAAlBA,YAC3B,OAAOA,EAAcC,KAIjC,oDAAqD,CACjDhB,SAAU,EACVC,QAAS,CACLiB,UAAW,WAAF,8CAAE,oHAASC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,cAAeL,EAAnC,EAAmCA,YAAaM,EAAhD,EAAgDA,QAAhD,SACaC,eAAmB,gCAAD,OACFF,GADE,eAE1BzB,EAAQoB,GAFkB,uBAESpB,EAAQ0B,IACnDF,EACA,CACI,CAAEd,KAAM,SAAUE,MAAO,SAAUD,KAAM,QAASiB,KAAM,WACxD,CAAElB,KAAM,UAAWC,KAAM,MAAOiB,KAAM,YAPvC,cACDC,EADC,yBAUiB,WAAjBA,EAAMhB,OACP,CAAEiB,OAAQ,EAAGC,UAAWhC,EAAUe,yBAClC,CAAEgB,MAAOD,EAAMN,UAAWQ,UAAWhC,EAAUiC,eAZ9C,2CAAF,sDAAE,IAeff,WAAY,CACRgB,UADQ,SACEC,GACN,OAAOA,M,gDC5ERC,+BAAgB,CAC3BC,WAAY,CAAEC,wBACdC,KAAM,iBAAO,CACTC,QAAS,GACTC,OAAQ,GACRnD,UAAW,GACXC,YAAa,EACbkC,UAAW,GACXiB,MAAO,CACHrB,YAAa,GACbM,QAAS,GACTD,cAAe,MACfD,UAAW,GACXS,WAAW,EACXZ,UAAW,GACXH,QAAS,GACTV,iBAAkB,IAEtBkC,OAAO,IAEXC,MAAO,CACJ,OAAU,CACLC,QADK,SACGC,GAAU,WACXA,EAAMC,OAAOC,YAAcvD,KAAKH,WAAawD,EAAMC,OAAOC,aACzDvD,KAAKH,UAAY2D,SAASH,EAAMC,OAAOC,YACvCE,OAAMC,IAAI,iBAAkB,CAAE7D,UAAWG,KAAKH,YACzC8D,MAAK,SAAAC,GACF,EAAKb,QAAUa,EACf,EAAKC,oBAAoBF,MAAK,WAC1B,EAAKG,2BAA2BH,MAAK,WACjC,EAAKT,OAAQ,aAMrCa,WAAW,EACXC,MAAM,IAGdC,SAAU,CACNC,kBADM,WAEF,OAAOlE,KAAKmE,wBAGpBC,QAAS,CACLC,aADK,SACQC,GAA6B,WAAXhB,EAAW,uDAAJ,KAC5BiB,EAAc,GAmBpB,GAlBAA,EAAOhE,EAAUiC,cAAgB,SAACT,GAC9B,MAAqBA,EAAUyC,MAAM,KAArC,sBAAQC,EAAR,KACMC,EAAWC,kBAAK,EAAK3C,UAAW,CAAEyC,aAExC,OADIC,IAAU,EAAK5E,WAAa4E,EAASE,WAClCrE,EAAUiB,UAErB+C,EAAOhE,EAAUuB,qBAAuB,WAEpC,OADA,EAAK+C,QAAQC,KAAb,yDAAoE,EAAKjF,YAClEU,EAAUwE,MAErBR,EAAOhE,EAAUgB,wBAA0B,WAEvC,OADA,EAAKsD,QAAQC,KAAb,4BAAuC,EAAKjF,YACrCU,EAAUwE,MAErBR,EAAOhE,EAAUe,yBAA2B,WAExC,OADA,EAAK0D,uBACEzE,EAAUwE,MAEjBT,KAASC,EACT,OAAOA,EAAOD,GAAOhB,IAGvBQ,yBAzBD,WAyByB,8KACpBmB,EAAWC,eAAkB,EAAKjC,MAAOrC,GADrB,6BAEPqE,GAFO,iDAEhBE,EAFgB,WAGhBC,EAAUH,EAASE,GAHH,OAIlBC,QAJkB,IAIlBA,GAJkB,UAIlBA,EAAStE,eAJS,QAIlB,EAAkBC,MAJA,6BAKH,EALG,gBAKsBqE,QALtB,IAKsBA,GALtB,UAKsBA,EAAStE,eAL/B,aAKsB,EAAkBC,MAAM,EAAKkC,OALnD,sBAKZoC,EALY,KAKEhB,aALF,gBAMdgB,IAAW9E,EAAUwE,KANP,6DAQlBK,QARkB,IAQlBA,GARkB,UAQlBA,EAAStE,eARS,QAQlB,EAAkBiB,UARA,yCASMqD,QATN,IASMA,GATN,UASMA,EAAStE,eATf,aASM,EAAkBiB,UAAU,EAAKkB,OATvC,QASZlB,EATY,OAUlB,EAAKsC,aAAatC,EAAUQ,UAAWR,EAAUO,OAV/B,sEAcxBuB,kBAvCD,WAuCkB,uLAEOJ,OAAMC,IAAI,kBAAmB,CAAE7D,UAAW,EAAKA,YAFtD,OAETyF,EAFS,OAGf,EAAKrC,MAAMvB,QAAU4D,EAAQ5D,QAC7B,EAAKuB,MAAMjC,iBAAmBsE,EAAQ3D,UAJvB,mDAMf4D,QAAQC,MAAR,MACAC,eAAY,GAAD,cAPI,WASnB,EAAKxC,MAAMrB,YAAczB,OAAeuF,iBACxC,EAAKzC,MAAMf,QAAU/B,OAAewF,mBACpC,EAAK1C,MAAMR,UAAYtC,OAAeuC,QACtC,EAAKO,MAAMpB,UAAY,EAAKkB,QAAQ6C,eACpC,EAAK3C,MAAMhB,cAAgB,EAAK4D,OAAO3E,KACjC,EAAK2E,OAAO3E,KAAK4E,WAAWC,cAC5B,OACF5F,OAAeuC,QAhBA,kCAiBQe,OAAMC,IAAI,aAjBlB,QAiBf,EAAK1B,UAjBU,OAkBf,EAAKiB,MAAMjB,UAAY,EAAKA,UACvBgE,MAAK,SAACC,EAAQC,GACX,IAAMC,EAAYF,EAAExB,SAASsB,cACvBK,EAAYF,EAAEzB,SAASsB,cAC7B,OAAOI,EAAYC,GAAa,EAAID,EAAYC,EAAa,EAAI,KAEpEC,KAAI,SAACC,GAAU,MACRpF,EAAO,GAAH,OAAMoF,EAAE7B,UAChB,IAAK8B,qBAAO,OAACD,QAAD,IAACA,GAAD,UAACA,EAAGE,cAAJ,aAAC,EAAWC,OAAQ,OAC5B,GAAuB,UAAAH,EAAEE,cAAF,eAAUC,QAAS,GAA1C,sBAAQC,EAAR,KACAxF,GAAQ,KAAJ,OAASwF,EAAWC,WAApB,YAAkCD,EAAWE,YAA7C,KAER,OAAO1F,KA9BA,4DAkCvB2F,SAzEK,SAyEIC,GAAuB,IAARC,EAAQ,uDAAF,GAC1B,MAAO,CACHD,QACAxE,MAAOwE,EACPC,UAGRC,gBAhFK,SAgFWC,GACZ,OAAOA,EAAMZ,KAAI,SAAAa,GAAC,MAAK,CAACJ,MAAOI,EAAG5E,MAAO4E,OAE7C/C,oBAnFK,WAoFD,mCAA6BnE,KAAKH,YAEtCmF,qBAtFK,WAuFD,OAAOhF,KAAK6E,QAAQC,KAAK,CAACqC,KAAMnH,KAAKmE,yBAEzCiD,SAzFK,WA0FD,OAAOA,eAASpH,KAAKH,UAAWG,KAAK6E,UAEzCwC,aA5FK,WA6FD,MAAO,CACH,CAAEP,MAAO,MAAOxE,MAAO,OACvB,CAAEwE,MAAO,KAAMxE,MAAO,QAG9BgF,cAlGK,SAkGSR,GAA4B,IAAbC,EAAa,uDAAF,GACpC,MAAO,CACHD,QACAxE,MAAO,GACPyE,MAAO,iCACAA,GADF,IAEDQ,OAAQvH,KAAKqH,mBAIzBG,WA5GK,SA4GMC,GACP,OAAOA,EAAQpB,KAAI,SAACqB,GAChB,MAAO,CAAEZ,MAAOY,EAAQpF,MAAOoF,OAGvCC,oBAjHK,WAkHD,MAAO,CACH,CAAEb,MAAO,MAAOxE,MAAO,OACvB,CAAEwE,MAAO,KAAMxE,MAAO,MACtB,CAAEwE,MAAO,UAAWxE,MAAO,aAGnCsF,WAxHK,SAwHMC,GAAgB,IAANC,EAAM,uDAAF,GACfP,EAAcQ,OAAOR,OAAOM,GAC7BG,QAAO,SAACvH,GAAD,OAAYA,IAAMA,EAAEqH,MAAQA,GAAe,KAARA,MAC1CG,QAAO,SAACC,EAAYC,GACjB,IAAMrF,EAAOqF,EAAIN,IAAMM,EAAIN,IAAMM,EAQjC,OAPIC,MAAMC,QAAQvF,GACdoF,EAAQA,EAAMI,OAAOxF,GACE,oBAATA,EACdoF,EAAMpD,KAAKhC,KAEXoF,EAAMpD,KAAKhC,GAERoF,IACJ,IACX,OAAOK,QAAQC,IAAIjB,IAEvBkB,QAxIK,SAwIGC,EAAiBC,GACrB,IACI,OAAOD,EAAIV,QAAO,SAACd,GAAD,OAAYyB,EAAWzB,MAAI0B,OAAS,EACxD,MAAOC,GACL,OAAO,IAGfC,eA/IK,SA+IUrH,GACX,IACI,IAAI,IAAMyF,KAAKzF,EAAY,CACvB,IAAMsH,EAAYtH,EAAWyF,KAE7B,GAAI6B,EAAW,OAAOA,GAE5B,MAAOF,GACL,MAAO,CAACA,QC7MxB,MAAMG,EAAc,EAEL,U,2DCHT,SAAUC,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,IAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DxG,OAAQkG,EAAKlG,OACb4G,YAAaV,EAAKU,YAClBC,eAAgBX,EAAKY,SACrBC,aAAa,EACbC,sBAAuBd,EAAKhF,mBAC3B,KAAM,EAAG,CAAC,SAAU,cAAe,iBAAkB,0B,8LCI3CvB,+BAAgB,CAC7BsH,OAAQ,CAACC,QACTtH,WAAY,CAAEC,wBACdC,KAAM,iBAAO,CACXqH,UAAW,GACXP,YAAa,GACbQ,cAAc,EACdC,gBAAiB,GACjBC,YAAa,KAEfnH,MAAO,CACLD,MAAO,CACLE,QADK,SACGF,GACDA,IACLlD,KAAKmK,UAAY,IAAIvK,OAAiBI,KAAKH,UAAWG,KAAKF,YAC3DE,KAAKgD,OAAShD,KAAKuK,cAErBxG,WAAW,IAGfK,QAAS,CACD0F,SADC,SACQU,EAAeC,GAAiB,sLACrB,EAAKN,UAAUO,kBADM,UACvCC,EADuC,OAGxCA,EAH0C,CAAF,wCAGtBC,eAAa,+BAHS,uBAKf,EAAKhD,WAAW6C,EAAc,OALf,cAKvCI,EALuC,iBAO3B,EAAKV,UAAUW,oBAAoBD,GAPR,WAOvChD,EAPuC,OASxCA,EAT0C,CAAF,yCAS5B+C,eAAa,yBATe,YAWzCJ,EAASO,aAA8C,QAA/BP,EAASO,YAAYzI,MAXJ,kCAYzB,EAAK6H,UAAUa,gBAAgBP,EAAaQ,YAZnB,WAYrC5K,EAZqC,OAatCA,EAbwC,CAAF,yCAa1BuK,eAAa,8BAba,QAc3CnH,OAAMyH,WAAW,kBAd0B,WAgB7CC,eAAa,qBACPC,EAAkBzG,kBAAK6F,EAASa,eAAgB,CAAE/I,MAAO,MAAOwE,MAAO,uBACzEsE,EAlB2C,CAAF,4BAmBvC7E,aAnBuC,UAmBxB,EAAKxD,QAAQuI,cAnBW,iFAoBlC,EAAKzG,QAAQC,KAAb,iCAA4C,EAAKjF,aApBf,QAuB7C,EAAKuH,WAvBwC,+CAyB/CmD,UA1BO,WA0BE,WACP,MAAO,CACL,CACEgB,GAAI,iBACJC,SAAU,gBACVC,KAAMC,OAAUC,mBAChBC,WAAY,SAACC,GAAD,OAAcC,OAAWC,SAASF,IAAQC,OAAWE,UAAUH,IAAQC,OAAWG,SAASJ,IACvGK,cAAe,SAACzL,GACd,MAAO,CACLqH,IAAK,MACLD,IAAKpH,EAAE4F,KAAI,gBAAGU,EAAH,EAAGA,MAAOzE,EAAV,EAAUA,MAAV,OAA8B,EAAK6H,UAAUgC,gBAAgBpF,EAAMqF,QAAS9J,QAG3F+J,cAAe,WAAF,8CAAE,WAAO5E,EAAmB6E,GAA1B,0GACN7E,EAAQpB,KAAI,SAAAkG,GAIjB,OAHID,EAAOxF,OAASyF,EAAEzF,OAA0B,OAAjBwF,EAAOhK,QACpCiK,EAAEjK,MAAQ,OAELiK,MALI,2CAAF,wDAAE,GAQf9E,QAAS,SAAC+E,GACR,OAAIA,EAAKnB,eAAuBmB,EAAKnB,eAC9B,CACL,CACEvE,MAAO,mBACPxE,MAAO,GACPyE,MAAO,CACLqF,QAAS,kBACTK,SAAU,kBACVlF,OAAQ,EAAKF,iBAGjB,CACEP,MAAO,oBACPxE,MAAO,GACPyE,MAAO,CACLqF,QAAS,mBACTK,SAAU,mBACVlF,OAAQ,EAAKF,oBAMvB,CACEkE,GAAI,cACJC,SAAU,sBACVC,KAAMC,OAAUgB,UAChBC,aAAa,EACbC,KAAM,WAAF,8CAAE,2GACEC,EAAY,EAAK9J,QAAQ+J,qBAAqB,GAClC,KAAdD,IAAkB,EAAKzC,cAAe,GAC1C,EAAKE,YAAc,IAAIyC,OAAmB,EAAKlN,UAAW,EAAKC,YAH3D,SAIE,EAAKwK,YAAY0C,kBAJnB,iCAKG,GALH,2CAAF,qDAAE,GAONjE,UAAW,kBAAO,EAAKqB,cAA+C,gBAA/B,EAAKE,YAAY2C,WACxDrB,WAAY,SAACC,GAAD,OAAcC,OAAWC,SAASF,IAC9CpE,QAAS,kBAAM,EAAKJ,iBAEtB,CACEkE,GAAI,aACJC,SAAU,aACVC,KAAMC,OAAUwB,QAChBN,KAAM,WAAF,8CAAE,oHACE,EAAKzC,UAAUgD,iBADjB,UAEC,EAAK/C,aAFN,gCAGcjK,OAAeiN,4BAH7B,OAGIC,EAHJ,OAIF,EAAKhD,gBAAkBgD,EAAEpC,WAAWqC,QAAQ,WAAY,IAJtD,iCAMG,GANH,2CAAF,qDAAE,GAQNpB,cAAe,YAAsB,IAAnB5J,EAAmB,EAAnBA,MAChB,OAAOA,GAETsJ,WAAY,SAACC,GAAD,OAAcC,OAAWC,SAASF,IAC9C9C,UAAW,SAACwE,GAAD,OAAa,EAAKnD,cAAwC,QAAxBmD,EAAExC,YAAYzI,OAC3DkL,aAAc,kBAAM,EAAKnD,iBACzBoD,OAAQ,CACNC,aAAc,WACZ,IAAMC,EAASC,OAAOC,eACtB,GAAIF,GAAUA,EAAOG,0BAA2B,CAC9C,IAAMC,EAAUJ,EAAOG,0BAA0B,cACjD,OAAOC,EAAQC,SAEjB,MAAO,W,qBC9IrB,MAAMhF,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD,gB,kDCLT,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,OAAQG,yBAAcC,yBAAasE,qCAAyB/E,EAAKgF,UAAW,CAC1ElL,OAAQkG,EAAKlG,OACb+G,YAAab,EAAKa,YAClBH,YAAaV,EAAKU,YAClBI,sBAAuBd,EAAKc,sBAC5BmE,WAAYjF,EAAKY,SACjBA,SAAUZ,EAAKW,eACfuE,UAAWlF,EAAKmF,SACf,KAAM,EAAG,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN3F1L,+BAAgB,CAC3BzB,KAAM,kBACN0B,WAAY,CAAE0L,wBACdC,MAAO,CACH,WACA,WAEJzL,KAAM,iBAAO,CACToL,SAAU,sBAEdM,MAAO,CACH3E,eAAgB,CACZ4B,KAAMgD,UAEV1E,YAAa,CACT0B,KAAMiD,QACNC,SAAS,GAEb/E,YAAa,CACT6B,KAAMmD,QAEV5L,OAAQ,CACJyI,KAAM1D,OACNgE,UAAU,GAEd/B,sBAAuB,CACnByB,KAAMmD,OACN7C,UAAU,IAGlB3H,QAAS,CACL0F,SADK,SACIU,EAAeC,GACpBzK,KAAK6O,MAAM,WAAYrE,EAAUC,IAErC4D,QAJK,SAIGnH,GACJlH,KAAK6O,MAAM,UAAW3H,O,qBCnClC,MAAM8B,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD,U,8JCsBf,SAAS6F,EAAY7L,EAA4BxB,GAC7C,IAAM6C,EAAQ,GACRyK,EAAU,EAAE,EAAG,GAAI,UAAMC,GAE/B,IAAI,IAAMC,KAAQxN,EACd,GAAMwN,KAAQhM,EAAd,CAGA,IAAMX,EAAQW,EAAMgM,GAChBF,EAAQG,SAAS5M,GACjBgC,EAAMQ,MAAK,GAIfR,EAAMQ,KAAKrD,EAAWwN,GAAM3M,EAAOW,IAEvC,OAAOqB,EAAM6K,MAAMT,SAQvB,SAASU,EAAenK,GACpB,OAAOA,EAASe,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEpF,UAAYqF,EAAErF,UAAaoF,EAAEpF,SAAWqF,EAAErF,UAAY,EAAI,KAGhG,SAASwO,EAAapK,GAClB,OAAOA,EAASe,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEqJ,QAAUpJ,EAAEoJ,QAAWrJ,EAAEqJ,OAASpJ,EAAEoJ,QAAU,EAAI,KAgBlF,SAAUpK,EACZjC,EACAsM,GAG0C,IAF1CC,EAE0C,uDAFnC,GACPC,EAC0C,uDAD9B,GACZC,EAA0C,uDAAnC,WACDC,EAAU,GAChB,IAAI,IAAMC,KAAkBL,EAAY,CACpC,IAAMzM,EAA2ByM,EAAWK,GACtCC,EAAoB,CACrB/M,EAAK0M,QAAUA,GAAU1M,EAAK0M,QAAUA,EACxC1M,EAAK2M,aAAeA,GACd3M,EAAK2M,aAAeA,GAG3BI,EAAkBC,KAAKpB,UAIvBI,EAAY7L,EAAOH,EAAKrB,cACxBqB,EAAKiN,MAAQH,EACT9M,EAAKkN,cACLlN,EAAKkN,YAAYC,KAAOnN,EAAKkN,YAAYE,KAAKjN,IAElD0M,EAAQ7K,KAAKhC,IAGrB,MAAkB,aAAX4M,EAAwBN,EAAeO,GAAWN,EAAaM","file":"js/chunk-2120ab0f.2f57601f.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ProgramService } from \"@/services/program_service\";\nimport GLOBAL_PROP from \"@/apps/GLOBAL_APP/global_prop\";\n\nexport class ReceptionService extends AppEncounterService {\n    sitePrefix: string\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 51, providerID) //TODO: Use encounter type reference name'\n        this.sitePrefix = ''\n    }\n\n    getSitePrefix() {\n        return this.sitePrefix\n    }\n\n    async loadSitePrefix() {\n        this.sitePrefix = await GLOBAL_PROP.sitePrefix();\n    }\n\n    createArvNumber(identifier: string) {\n        return ProgramService.postJson(\"/patient_identifiers/\", {\n            'patient_id': this.patientID,  \n            'identifier_type': 4,\n            identifier,\n        })\n    }\n\n    buildArvNumber(arv: number) {\n        return `${this.sitePrefix}-ARV-${arv}`    \n    }\n}\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { ReceptionService } from \"@/apps/ART/services/reception_service\"\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { toastWarning, toastSuccess } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport HisApp from \"@/apps/app_lib\"\nimport { find, isEmpty } from \"lodash\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    reception: {} as any,\n    activeField: \"\",\n    hasARVNumber: true,\n    suggestedNumber: \"\" as any,\n    patientType: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler(ready: any) {\n        if (!ready) return\n        this.reception = new ReceptionService(this.patientID, this.providerID)\n        this.fields = this.getFields();\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computedData: any) {\n      const encounter = await this.reception.createEncounter()\n\n      if (!encounter) return toastWarning('Unable to create encounter')\n\n      const registrationObs = await this.resolveObs(computedData, 'obs')\n\n      const obs = await this.reception.saveObservationList(registrationObs)\n\n      if (!obs) return toastWarning('Unable to create Obs')\n\n      if (formData.capture_arv && formData.capture_arv.value === 'Yes') {\n        const arv = await this.reception.createArvNumber(computedData.arv_number)\n        if (!arv) return toastWarning('Unable to save Arv number')\n        Store.invalidate('ACTIVE_PATIENT')\n      }\n      toastSuccess('Encounter created')\n      const guardianPresent = find(formData.who_is_present, { value: 'Yes', label: 'Guardian present?'})\n      if (guardianPresent) {\n        if (isEmpty((await this.patient.getGuardian()))) {\n          return this.$router.push(`/guardian/registration/${this.patientID}`)\n        } \n      }\n      this.nextTask()\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"who_is_present\",\n          helpText: \"HIV reception\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          validation: (val: any) => Validation.required(val) || Validation.neitherOr(val) || Validation.anyEmpty(val),\n          computedValue: (d: Array<Option>) => {\n            return {\n              tag: 'obs',\n              obs: d.map(({ other, value }: Option) => this.reception.buildValueCoded(other.concept, value))\n            }\n          },\n          onValueUpdate: async (options: Option[], active: Option) => {\n            return options.map(o => {\n              if (active.label != o.label && active.value === 'No') {\n                o.value = \"Yes\"\n              }\n              return o\n            })\n          },\n          options: (form: any) => {\n            if (form.who_is_present) return form.who_is_present as Option[]\n            return [\n              {\n                label: \"Patient present?\",\n                value: \"\",\n                other: {\n                  concept: \"Patient Present\",\n                  property: \"patient_present\",\n                  values: this.yesNoOptions(),\n                },\n              },\n              {\n                label: \"Guardian present?\",\n                value: \"\",\n                other: {\n                  concept: \"Guardian Present\",\n                  property: \"guardian_present\",\n                  values: this.yesNoOptions(),\n                },\n              }\n            ]\n          }\n        },\n        {\n          id: \"capture_arv\",\n          helpText: \"Capture ARV Number?\",\n          type: FieldType.TT_SELECT,\n          requireNext: true,\n          init: async() => {\n            const ARVNumber = this.patient.getPatientIdentifier(4);\n            if (ARVNumber === \"\") this.hasARVNumber = false;\n            this.patientType = new PatientTypeService(this.patientID, this.providerID);\n            await this.patientType.loadPatientType()\n            return true\n          },\n          condition: () => !this.hasARVNumber && this.patientType.getType() === \"New patient\",\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n        },\n        {\n          id: \"arv_number\",\n          helpText: \"ART number\",\n          type: FieldType.TT_TEXT,\n          init: async() => {\n            await this.reception.loadSitePrefix()\n            if (!this.hasARVNumber) {\n              const j = await ProgramService.getNextSuggestedARVNumber();\n              this.suggestedNumber = j.arv_number.replace(/^\\D+|\\s/g, \"\");\n            }\n            return true\n          },\n          computedValue: ({ value }: Option) => {\n            return value\n          },\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => !this.hasARVNumber && f.capture_arv.value === \"Yes\",\n          defaultValue: () => this.suggestedNumber,\n          config: {\n            prependValue: () => {\n              const artApp = HisApp.getActiveApp()\n              if (artApp && artApp.programPatientIdentifiers) {\n                const arvType = artApp.programPatientIdentifiers['ARV Number']\n                return arvType.prefix()\n              }\n              return ''\n            }\n          }\n        }\n      ]\n    }\n  }\n});\n","import { render } from \"./Reception.vue?vue&type=template&id=73d30112&ts=true\"\nimport script from \"./Reception.vue?vue&type=script&lang=ts\"\nexport * from \"./Reception.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}