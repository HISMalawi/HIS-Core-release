{"version":3,"sources":["webpack:///./src/utils/ReportDateSelectionPrompt.ts","webpack:///./src/apps/CxCa/views/reports/pepfar/CXCA_SCRN_Report.vue?25a9","webpack:///./src/apps/CxCa/views/reports/pepfar/CXCA_SCRN_Report.vue","webpack:///./src/apps/CxCa/views/reports/pepfar/CXCA_SCRN_Report.vue?cac5","webpack:///./src/apps/CxCa/services/reports/cxca_report_service.ts"],"names":["DatePeriodInputType","HtsReportPreference","ReportPreferences","reactive","datePeriodInputType","localStorage","getItem","PERIOD_INPUT_TYPE","MULTI_FIELD_DATE","DateSelection","params","MultiStepPopupForm","generateDateFields","id","helpText","required","minDate","maxDate","Service","getSessionDate","condition","estimation","allowUnknown","computeValue","date","_","c","start_date","proxyID","type","FieldType","TT_FULL_DATE","validation","v","Date","value","toDate","computedValue","SINGLE_DATE_INPUT_FIELD","defaultValue","f","label","TT_DATE_PICKER","CALENDAR_FIELD","StandardValidations","config","infoItems","end_date","persistInfoItems","onFinish","async","modalController","dismiss","period","e","toastDanger","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_loading","_resolveComponent","_component_v2Datatable","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","isLoading","message","title","csvQuarter","subtitle","columns","columnData","reportData","rowsPerPage","onConfigure","configure","onRefresh","generate","ref","startDate","endDate","defineComponent","components","IonPage","IonLoading","v2Datatable","setup","drilldown","patientIdentifiers","create","component","DrillPatientIds","backdropDismiss","cssClass","componentProps","getTop","then","present","span","thRowspan","exportable","thColspan","secondaryLabel","data","first_time_screened","negative","length","tdClick","column","age_group","positive","suspected","rescreened_after_prev_visit","post_treatment_followup","toastWarning","report","CxCaReportService","getClinicReport","slice","map","index","gender","aggregateIndicators","indicator","getCounts","statusIndicator","reduce","totals","record","concat","push","sDate","eDate","periodstr","onMounted","__exports__","constructor","super","this","programID","getProgramID","getPepfarReport","reportName","getReport","getMohReport","getDateIntervalPeriod","HisDate","toStandardHisDisplayFormat","setStartDate","setEndDate","getReportPeriod","url","getJson","buildRequest","payload","minDuration","quarters","year","getCurrentYear","i","name","start","end"],"mappings":"kHAAA,sCAWYA,EAMAC,EAjBZ,6GAWA,SAAYD,GACRA,8CACAA,+BACAA,iDAHJ,CAAYA,MAAmB,KAM/B,SAAYC,GACRA,qDADJ,CAAYA,MAAmB,KAIxB,MAAMC,EAAoBC,sBAAS,CACtCC,oBAAqBC,aAAaC,QAAQL,EAAoBM,oBAAsBP,EAAoBQ,mBA4BtG,SAAUC,EAAcC,GAC1BC,eAAmB,IACZC,eAAmB,CAClBC,GAAI,aACJC,SAAU,QACVC,UAAU,EACVC,QAAS,KAAY,OAANN,QAAM,IAANA,OAAM,EAANA,EAAQM,UAAW,GAClCC,QAAS,KAAY,OAANP,QAAM,IAANA,OAAM,EAANA,EAAQO,UAAWC,OAAQC,iBAC1CC,UAAW,IAAOlB,EAAkBE,sBAAwBJ,EAAoBQ,iBAChFa,WAAY,CACRC,cAAc,GAElBC,aAAeC,GAAiBA,OAEjCZ,eAAmB,CAClBC,GAAI,WACJC,SAAU,MACVC,UAAU,EACVC,QAAS,CAACS,EAAQC,IAAWA,EAAEC,WAC/BV,QAAS,KAAY,OAANP,QAAM,IAANA,OAAM,EAANA,EAAQO,UAAWC,OAAQC,iBAC1CC,UAAW,IAAOlB,EAAkBE,sBAAwBJ,EAAoBQ,iBAChFa,WAAY,CACRC,cAAc,GAElBC,aAAeC,GAAiBA,IAEpC,CACIX,GAAI,iBACJe,QAAS,aACTd,SAAU,aACVe,KAAMC,OAAUC,aAChBC,WAAaC,IACT,IAAKA,EAAG,MAAO,CAAC,oBAEhB,MAAMhB,EAAUP,EAAOO,SAAWC,OAAQC,iBAC1C,OAAIT,EAAOM,SAAW,IAAIkB,KAAKD,EAAEE,OAAS,IAAID,KAAKxB,EAAOM,SAC/C,CAAC,GAAGoB,eAAO,GAAGH,EAAEE,uCAAyCC,eAAO1B,EAAOM,YAE9EC,GAAW,IAAIiB,KAAKD,EAAEE,OAAS,IAAID,KAAKjB,GACjC,CAAC,GAAGmB,eAAO,GAAGH,EAAEE,sCAAwCC,eAAOnB,MAEnE,MAEXoB,cAAgBJ,GAAcA,EAAEE,MAChCf,UAAW,IAAMlB,EAAkBE,sBAAwBJ,EAAoBsC,yBAEnF,CACIzB,GAAI,eACJe,QAAS,WACTd,SAAU,WACVe,KAAMC,OAAUC,aAChBQ,aAAeC,GAAWA,EAAEb,WAAWQ,MACvCH,WAAY,CAACC,EAAWO,KACpB,IAAKP,EAAG,MAAO,CAAC,oBAEhB,MAAMhB,EAAUP,EAAOO,SAAWC,OAAQC,iBAC1C,OAAIqB,EAAEb,WAAWQ,OAAS,IAAID,KAAKD,EAAEE,OAAS,IAAID,KAAKM,EAAEb,WAAWQ,OACzD,CAAC,GAAGC,eAAO,GAAGH,EAAEE,uCAAyCC,eAAOI,EAAEb,WAAWQ,UAEpFlB,GAAW,IAAIiB,KAAKD,EAAEE,OAAS,IAAID,KAAKjB,GACjC,CAAC,GAAGmB,eAAO,GAAGH,EAAEE,sCAAwCC,eAAOnB,MAEnE,MAEXoB,cAAgBJ,GAAcA,EAAEQ,MAChCrB,UAAW,IAAMlB,EAAkBE,sBAAwBJ,EAAoBsC,yBAEnF,CACIzB,GAAI,sBACJe,QAAS,aACTd,SAAU,aACVe,KAAMC,OAAUY,eAChBL,cAAgBJ,GAAcA,EAC9Bb,UAAW,IAAMlB,EAAkBE,sBAAwBJ,EAAoB2C,eAC/EX,WAAaC,GAAcW,OAAoB7B,SAASkB,GACxDY,OAAQ,CACJ7B,QAAS,IAAMN,EAAOM,SAAW,KACjCC,QAAS,IAAMP,EAAOO,SAAWC,OAAQC,iBACzC2B,UAAW,CAACtB,EAAcgB,IACf,CACH,CAAEC,MAAO,aAAcN,MAAOC,eAAOZ,IAAS,KAC9C,CAAEiB,MAAO,WAAYN,MAAOC,eAAOI,EAAEO,WAAa,MAG1DC,kBAAkB,IAG1B,CACInC,GAAI,oBACJe,QAAS,WACTd,SAAU,WACVe,KAAMC,OAAUY,eAChBV,WAAaC,GAAcW,OAAoB7B,SAASkB,GACxDM,aAAeC,GAAWA,EAAEb,WAAWQ,MACvCE,cAAgBJ,GAAcA,EAC9Bb,UAAW,IAAMlB,EAAkBE,sBAAwBJ,EAAoB2C,eAC/EE,OAAQ,CACJ7B,QAAUwB,GAAWA,EAAEb,WAAWQ,MAClClB,QAAS,IAAMP,EAAOO,SAAWC,OAAQC,iBACzC2B,UAAW,CAACtB,EAAcgB,IACf,CACH,CAAEC,MAAO,aAAcN,MAAOC,eAAOI,EAAEb,aAAe,KACtD,CAAEc,MAAO,WAAYN,MAAOC,eAAOZ,KAG3CwB,kBAAkB,KAI9B,CACIC,SAAUC,MAAOV,EAAQd,KACrByB,QAAgBC,UAChB,IACI,MAAMC,EAAS,GAAGjB,eAAOV,EAAEC,kBAAkBS,eAAOV,EAAEqB,YACtDrC,EAAOuC,SAASvB,EAAEC,WAAYD,EAAEqB,SAAUM,GAC5C,MAAOC,GACLC,eAAY,+B,2DCpKtB,SAAUC,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAAyBC,8BAAkB,eAC3CC,EAAyBD,8BAAkB,eAC3CE,EAAsBF,8BAAkB,YAE9C,OAAQG,yBAAcC,yBAAaF,EAAqB,KAAM,CAC5DG,QAASC,qBAAS,IAAM,CACtBC,yBAAaR,EAAwB,CACnC,UAAWN,EAAKe,UAChBC,QAAS,kBACR,KAAM,EAAG,CAAC,YACbF,yBAAaN,EAAwB,CACnCS,MAAO,mBACPC,WAAYlB,EAAKkB,WACjBC,SAAUnB,EAAKJ,OACfwB,QAASpB,EAAKoB,QACdC,WAAYrB,EAAKsB,WACjBC,YAAa,GACbC,YAAaxB,EAAKyB,UAClBC,UAAW,IAAM1B,EAAK2B,YACrB,KAAM,EAAG,CAAC,aAAc,WAAY,UAAW,aAAc,cAAe,gBAEjF3D,EAAG,I,4GCbP,MAAMsD,EAAaM,iBAAS,IACtBC,EAAYD,iBAAI,IAChBE,EAAUF,iBAAI,IACdhC,EAASgC,iBAAI,IACbb,EAAYa,kBAAI,GAChBV,EAAaU,iBAAI,IACRG,mCAAgB,CAC3BC,WAAY,CACRC,eACAC,kBACAC,oBAEJC,QACI,MAAMC,EAAY5C,MAAOwB,EAAeqB,YAC7B5C,QAAgB6C,OAAO,CAC1BC,UAAWC,OACXC,iBAAiB,EACjBC,SAAU,cACVC,eAAgB,CACZ3B,QACAE,SAAUvB,EACV0C,qBACA9C,SAAU,IAAME,QAAgBmD,SAASC,KAAKtE,GAAKA,GAAKkB,QAAgBC,eAE5EoD,WAKF3B,EAAsC,CACxC,CACI,CACIpC,MAAO,IACP4C,IAAK,QACLoB,KAAM,CACFC,UAAW,IAGnB,CACIjE,MAAO,YACP4C,IAAK,YACLoB,KAAM,CACFC,UAAW,IAGnB,CACIjE,MAAO,SACP4C,IAAK,SACLsB,YAAY,EACZF,KAAM,CACFC,UAAW,IAGnB,CACIjE,MAAO,oBACP4C,IAAK,GACLoB,KAAM,CACFG,UAAW,IAGnB,CACInE,MAAO,qCACP4C,IAAK,GACLoB,KAAM,CACFG,UAAW,IAGnB,CACInE,MAAO,2BACP4C,IAAK,GACLoB,KAAM,CACFG,UAAW,KAIvB,CACI,CACInE,MAAO,WACP4C,IAAK,+BACLwB,eAAgB,0BAChB1E,MAAQ2E,GAAcA,EAAKC,oBAAoBC,SAASC,OACxDC,QAAS,EAAGC,SAAQL,UAAkChB,EAClD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKC,oBAAoBC,WAG/E,CACIvE,MAAO,WACP4C,IAAK,+BACLwB,eAAgB,+BAChB1E,MAAQ2E,GAAcA,EAAKC,oBAAoBM,SAASJ,OACxDC,QAAS,EAAGC,SAAQL,UAAkChB,EAClD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKC,oBAAoBM,WAG/E,CACI5E,MAAO,mBACP4C,IAAK,uCACLwB,eAAgB,iCAChB1E,MAAQ2E,GAAcA,EAAKC,oBAAoBO,UAAUL,OACzDC,QAAS,EAAGC,SAAQL,UAAkChB,EAClD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKC,oBAAoBO,YAG/E,CACI7E,MAAO,WACP4C,IAAK,uCACLwB,eAAgB,uCAChB1E,MAAQ2E,GAAcA,EAAKS,4BAA4BP,SAASC,OAChEC,QAAS,EAAGC,SAAQL,UAAkChB,EAClD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKS,4BAA4BP,WAGvF,CACIvE,MAAO,WACP4C,IAAK,uCACLwB,eAAgB,uCAChB1E,MAAQ2E,GAAcA,EAAKS,4BAA4BF,SAASJ,OAChEC,QAAS,EAAGC,SAAQL,UAAkChB,EAClD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKS,4BAA4BF,WAGvF,CACI5E,MAAO,mBACP4C,IAAK,wCACLwB,eAAgB,wCAChB1E,MAAQ2E,GAAcA,EAAKS,4BAA4BD,UAAUL,OACjEC,QAAS,EAAGC,SAAQL,UAAkChB,EAClD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKS,4BAA4BD,YAGvF,CACI7E,MAAO,WACP4C,IAAK,mCACLwB,eAAgB,oCAChB1E,MAAQ2E,GAAcA,EAAKU,wBAAwBR,SAASC,OAC5DC,QAAS,EAAGC,SAAQL,UAAkChB,EAClD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKU,wBAAwBR,WAGnF,CACIvE,MAAO,WACP4C,IAAK,mCACLwB,eAAgB,qCAChB1E,MAAQ2E,GAAcA,EAAKU,wBAAwBH,SAASJ,OAC5DC,QAAS,EAAGC,SAAQL,UAAkChB,EAClD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKU,wBAAwBH,WAGnF,CACI5E,MAAO,mBACP4C,IAAK,oCACLwB,eAAgB,sCAChB1E,MAAQ2E,GAAcA,EAAKU,wBAAwBF,UAAUL,OAC7DC,QAAS,EAAGC,SAAQL,UAAkChB,EAClD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKU,wBAAwBF,cASrFlC,EAAWlC,UACb,IAAMoC,EAAUnD,QAASoD,EAAQpD,MAAQ,OAAOsF,eAAa,qCAC7DjD,EAAUrC,OAAQ,EAClB4C,EAAW5C,MAAQ,GACnB,MAAMuF,EAAS,IAAIC,OACnBD,EAAOpC,UAAYA,EAAUnD,MAC7BuF,EAAOnC,QAAUA,EAAQpD,MACzB,IACI4C,EAAW5C,aAAeuF,EAAOE,gBAAgB,cAC5CC,MAAM,GACNC,IAAI,CAAChB,EAAWiB,KACbjB,EAAKiB,MAAQA,EAAQ,EACrBjB,EAAKkB,OAAS,SACPlB,IAEf,MAAMmB,EAAuBC,IAIrB,MAAMC,EAAaC,GACRrD,EAAW5C,MAAMkG,OAAO,CAACC,EAAaC,IAClCD,EAAOE,OAAOD,EAAOL,GAAWE,IAAoB,IAC5D,IAEP,MAAO,CACHf,SAAUc,EAAU,YACpBnB,SAAUmB,EAAU,YACpBb,UAAWa,EAAU,eAGjCpD,EAAW5C,MAAMsG,KAAK,CAClBrB,UAAY,MACZY,OAAQ,SACRD,MAAOhD,EAAW5C,MAAM8E,OAAS,EACjCF,oBAAqBkB,EAAoB,uBACzCT,wBAAyBS,EAAoB,2BAC7CV,4BAA6BU,EAAoB,iCAGvD,MAAO3E,GACLC,eAAY,8BAEhBiB,EAAUrC,OAAQ,GAMhB+C,EAAY,IAAMzE,eAAc,CAClCwC,SAAU,CAACyF,EAAeC,EAAeC,KACrCtD,EAAUnD,MAAQuG,EAClBnD,EAAQpD,MAAQwG,EAChBtF,EAAOlB,MAAQ,WAAWyG,KAC1BjE,EAAWxC,MAAQ,GAAGC,eAAOkD,EAAUnD,aAAaC,eAAOmD,EAAQpD,SACnEiD,OASR,OAFAyD,uBAAU,KAAO9D,EAAW5C,MAAM8E,QAAU/B,KAErC,CACHL,UACAL,YACAO,aACA1B,SACAsB,aACAS,WACAF,gB,qBC/OZ,MAAM4D,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAStF,KAErD,gB,wHCYT,MAAOmE,UAA0BzG,OAKnC6H,cACIC,QAAO,yJACPC,KAAK1D,QAAU,GACf0D,KAAK3D,UAAY,GACjB2D,KAAKzH,KAAON,OAAQC,iBACpB8H,KAAKC,UAAYhI,OAAQiI,eAG7BC,gBAAgBC,GACZ,OAAOJ,KAAKK,UAAU,cAAe,CAAC,YAAeD,IAEzDzB,gBAAgByB,GACZ,OAAOJ,KAAKK,UAAU,oBAAqB,CAAC,YAAeD,IAE/DE,aAAaF,GACT,OAAOJ,KAAKK,UAAU,oBAAqB,CAAC,YAAeD,IAG/DG,wBACI,MAAO,GAAGC,OAAQC,2BAA2BT,KAAK3D,gBAAgBmE,OAAQC,2BAA2BT,KAAK1D,WAG9GoE,aAAarE,GACT2D,KAAK3D,UAAYA,EAGrBsE,WAAWrE,GACP0D,KAAK1D,QAAUA,EAKnBsE,kBACI,OAAOZ,KAAK3D,WAAa2D,KAAK1D,QAC3B,GAAGkE,OAAQC,2BAA2BT,KAAK3D,gBAAgBmE,OAAQC,2BAA2BT,KAAK1D,WACnG,IAGP+D,UAAUQ,EAAapJ,EAAO,IAC1B,OAAOQ,OAAQ6I,QAAQD,EAAKb,KAAKe,aAAatJ,IAGlDsJ,aAAanH,EAA8B,IACvC,MAAMoH,EAAe,CAAC,KAAQhB,KAAKzH,KAAM,WAAc,IAKvD,OAJIyH,KAAK3D,WAAa2D,KAAK1D,UACvB0E,EAAQ,cAAgBhB,KAAK3D,UAC7B2E,EAAQ,YAAchB,KAAK1D,SAExB,IAAK0E,KAAYpH,GAG5B,yBAAyBqH,EAAa,GAClC,MAAMC,EAAoC,GAC1C,IAAIC,EAAOX,OAAQY,iBACnB,IAAI,IAAIC,EAAE,EAAGA,EAAIJ,IAAeI,EAC5BH,EAAS1B,KAAK,CAAE8B,KAAM,MAAMH,EAAQI,MAAUJ,EAAH,SAAiBK,IAAQL,EAAH,WACjED,EAAS1B,KAAK,CAAE8B,KAAM,MAAMH,EAAQI,MAAUJ,EAAH,SAAiBK,IAAQL,EAAH,WACjED,EAAS1B,KAAK,CAAE8B,KAAM,MAAMH,EAAQI,MAAUJ,EAAH,SAAiBK,IAAQL,EAAH,WACjED,EAAS1B,KAAK,CAAE8B,KAAM,MAAMH,EAAQI,MAAUJ,EAAH,SAAiBK,IAAQL,EAAH,aAC/DA,EAEN,OAAOD","file":"js/chunk-1ab32a4a.6b96bc65.js","sourcesContent":["import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Service } from \"@/services/service\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { toDate } from \"@/utils/Strs\"\nimport { MultiStepPopupForm } from \"@/utils/PopupKeyboard\"\nimport { toastDanger } from \"@/utils/Alerts\"\nimport { modalController } from \"@ionic/vue\"\nimport { reactive } from \"vue\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\n\nexport enum DatePeriodInputType {\n    MULTI_FIELD_DATE = 'Multipage date fields',\n    CALENDAR_FIELD = 'Calendar',\n    SINGLE_DATE_INPUT_FIELD = 'Single page date'\n}\n\nexport enum HtsReportPreference {\n    PERIOD_INPUT_TYPE = 'hts_report_date_period_type'\n}\n\nexport const ReportPreferences = reactive({\n    datePeriodInputType: localStorage.getItem(HtsReportPreference.PERIOD_INPUT_TYPE) || DatePeriodInputType.MULTI_FIELD_DATE\n} as any)\n\nexport function DateSelectionPreference() {\n    MultiStepPopupForm([\n        {\n            id: 'date_field_type',\n            helpText: 'Date input preference',\n            type: FieldType.TT_SELECT,\n            defaultValue: () => ReportPreferences.datePeriodInputType,\n            options: () => {\n                return [\n                    { label: 'Calendar', value: DatePeriodInputType.CALENDAR_FIELD },\n                    { label: 'Single page date', value: DatePeriodInputType.SINGLE_DATE_INPUT_FIELD},\n                    { label: 'Multipage date fields', value: DatePeriodInputType.MULTI_FIELD_DATE },\n                ]\n            }\n        }\n    ],\n    {\n        onFinish: (f: any) => {\n            ReportPreferences.datePeriodInputType = f.date_field_type.value\n            localStorage.setItem(HtsReportPreference.PERIOD_INPUT_TYPE, ReportPreferences.datePeriodInputType)\n            modalController.dismiss()\n        }\n    })\n}\n\nexport function DateSelection(params: any) {\n    MultiStepPopupForm([\n        ...generateDateFields({\n            id: 'start_date',\n            helpText: 'Start',\n            required: true,\n            minDate: () => params?.minDate || '',\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date \n        }),\n        ...generateDateFields({\n            id: 'end_date',\n            helpText: 'End',\n            required: true,\n            minDate: (_: any, c: any) => c.start_date,\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date\n        }),\n        {\n            id: 'alt_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_FULL_DATE,\n            validation: (v: Option) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (params.minDate && new Date(v.value) < new Date(params.minDate)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(params.minDate)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.value,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'alt_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_FULL_DATE,\n            defaultValue: (f: any) => f.start_date.value,\n            validation: (v: Option, f: any) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (f.start_date.value && new Date(v.value) < new Date(f.start_date.value)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(f.start_date.value)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.label,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'calendar_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_DATE_PICKER,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            validation: (v: Option) => StandardValidations.required(v),\n            config: {\n                minDate: () => params.minDate || null,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(date) || '-' },\n                        { label: 'End Date', value: toDate(f.end_date) || '-'}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        },\n        {\n            id: 'calendar_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_DATE_PICKER,\n            validation: (v: Option) => StandardValidations.required(v),\n            defaultValue: (f: any) => f.start_date.value,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            config: {\n                minDate: (f: any) => f.start_date.value,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(f.start_date) || '-' },\n                        { label: 'End Date', value: toDate(date)}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        }\n    ], \n    {\n        onFinish: async (f: any, c: any) => {\n            modalController.dismiss()\n            try {\n                const period = `${toDate(c.start_date)} to ${toDate(c.end_date)}`\n                params.onFinish(c.start_date, c.end_date, period)\n            } catch (e) {\n                toastDanger(\"An error has occurred\")\n            }\n        }\n    })\n}","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_loading = _resolveComponent(\"ion-loading\")!\n  const _component_v2Datatable = _resolveComponent(\"v2Datatable\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_loading, {\n        \"is-open\": _ctx.isLoading,\n        message: \"Please wait...\"\n      }, null, 8, [\"is-open\"]),\n      _createVNode(_component_v2Datatable, {\n        title: \"CXCA SCRN Report\",\n        csvQuarter: _ctx.csvQuarter,\n        subtitle: _ctx.period,\n        columns: _ctx.columns,\n        columnData: _ctx.reportData,\n        rowsPerPage: 25,\n        onConfigure: _ctx.configure,\n        onRefresh: () => _ctx.generate()\n      }, null, 8, [\"csvQuarter\", \"subtitle\", \"columns\", \"columnData\", \"onConfigure\", \"onRefresh\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent, ref, onMounted } from 'vue';\nimport { IonPage, IonLoading, modalController } from \"@ionic/vue\"\nimport v2Datatable from \"@/components/DataViews/tables/v2PocDatatable/TableView.vue\"\nimport { v2ColumnDataInterface, v2ColumnInterface } from '@/components/DataViews/tables/v2PocDatatable/types';\nimport { CxCaReportService } from \"@/apps/CxCa/services/reports/cxca_report_service\"\nimport { DateSelection } from \"@/utils/ReportDateSelectionPrompt\"\nimport { toastDanger, toastWarning } from '@/utils/Alerts';\nimport DrillPatientIds from '../../../../../components/DrillPatientIds.vue';\nimport { toDate } from '@/utils/Strs';\n\nconst reportData = ref<any>([])\nconst startDate = ref('')\nconst endDate = ref('')\nconst period = ref('')\nconst isLoading = ref(false)\nconst csvQuarter = ref('')\nexport default defineComponent({\n    components: {\n        IonPage,\n        IonLoading,\n        v2Datatable,\n    },\n    setup() {\n        const drilldown = async (title: string, patientIdentifiers: number[]) => {\n            (await modalController.create({\n                component: DrillPatientIds,\n                backdropDismiss: false,\n                cssClass: 'large-modal',\n                componentProps: {\n                    title,\n                    subtitle: period,\n                    patientIdentifiers,\n                    onFinish: () => modalController.getTop().then(v => v && modalController.dismiss())\n                }\n            })).present()\n        }\n        /**\n         * Table column definition and value mapping\n         */\n        const columns: Array<v2ColumnInterface[]> = [\n            [\n                {\n                    label: \"#\",\n                    ref: \"index\",\n                    span: {\n                        thRowspan: 2\n                    }\n                },\n                {\n                    label: \"Age group\",\n                    ref: \"age_group\",\n                    span: {\n                        thRowspan: 2,\n                    }\n                },\n                {\n                    label: \"Gender\",\n                    ref: \"gender\",\n                    exportable: false,\n                    span: {\n                        thRowspan: 2\n                    }\n                },\n                {\n                    label: \"1st time screened\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3\n                    }\n                },\n                {\n                    label: \"Rescreened after previous negative\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3\n                    }\n                },\n                {\n                    label: \"Post-treatment follow-up\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3\n                    }\n                }\n            ],\n            [\n                {\n                    label: \"Negative\",\n                    ref: 'first_time_screened_negative',\n                    secondaryLabel: \"1st screened (Negative)\",\n                    value: (data: any) => data.first_time_screened.negative.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.first_time_screened.negative\n                    )\n                },\n                {\n                    label: \"Positive\",\n                    ref: 'first_time_screened_positive',\n                    secondaryLabel: \"1st time screened (Positive)\",\n                    value: (data: any) => data.first_time_screened.positive.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.first_time_screened.positive\n                    )\n                },\n                {\n                    label: \"Suspected Cancer\",\n                    ref: 'first_time_screened_suspected_cancer',\n                    secondaryLabel: \"1st screened(Suspected cancer)\",\n                    value: (data: any) => data.first_time_screened.suspected.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.first_time_screened.suspected\n                    )\n                },\n                {\n                    label: \"Negative\",\n                    ref: 'rescreened_after_prev_visit_negative',\n                    secondaryLabel: \"Rescreen after prev visit (Negative)\",\n                    value: (data: any) => data.rescreened_after_prev_visit.negative.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.rescreened_after_prev_visit.negative\n                    )\n                },\n                {\n                    label: \"Positive\",\n                    ref: 'rescreened_after_prev_visit_positive',\n                    secondaryLabel: \"Rescreen after prev visit (Positive)\",\n                    value: (data: any) => data.rescreened_after_prev_visit.positive.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.rescreened_after_prev_visit.positive\n                    )\n                },\n                {\n                    label: \"Suspected cancer\",\n                    ref: 'rescreened_after_prev_visit_suspected',\n                    secondaryLabel: \"Rescreen after prev visit (Suspected)\",\n                    value: (data: any) => data.rescreened_after_prev_visit.suspected.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.rescreened_after_prev_visit.suspected\n                    )\n                },\n                {\n                    label: \"Negative\",\n                    ref: 'post_treatment_followup_negative',\n                    secondaryLabel: \"Post-treatment followup(Negative)\",\n                    value: (data: any) => data.post_treatment_followup.negative.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.post_treatment_followup.negative\n                    )\n                },\n                {\n                    label: \"Positive\",\n                    ref: \"post_treatment_followup_positive\",\n                    secondaryLabel: \"Post-treatment followup (Positive)\",\n                    value: (data: any) => data.post_treatment_followup.positive.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.post_treatment_followup.positive\n                    )\n                },\n                {\n                    label: \"Suspected cancer\",\n                    ref: \"post_treatment_followup_suspected\",\n                    secondaryLabel: \"Post-treatment followup (Suspected)\",\n                    value: (data: any) => data.post_treatment_followup.suspected.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.post_treatment_followup.suspected\n                    )\n                }\n            ]\n        ]\n\n        /**\n         * Generates report by start date and end date\n         */\n        const generate = async () => {\n            if (!(startDate.value && endDate.value)) return toastWarning('Start date and end date required!')\n            isLoading.value = true\n            reportData.value = []\n            const report = new CxCaReportService()\n            report.startDate = startDate.value\n            report.endDate = endDate.value\n            try {\n                reportData.value = (await report.getClinicReport('CXCA SCRN'))                    \n                    .slice(5)\n                    .map((data: any, index: any) => {\n                        data.index = index + 1\n                        data.gender = \"Female\"\n                        return data\n                    })\n                const aggregateIndicators = (indicator: \n                    'first_time_screened' |\n                    'post_treatment_followup' | \n                    'rescreened_after_prev_visit') => {\n                        const getCounts = (statusIndicator: 'positive' | 'negative' | 'suspected') => {\n                            return reportData.value.reduce((totals: any, record: any) => {\n                                return totals.concat(record[indicator][statusIndicator] || [])\n                            }, [])\n                        }\n                        return {\n                            positive: getCounts('positive'),\n                            negative: getCounts('negative'),\n                            suspected: getCounts('suspected')\n                        }\n                }\n                reportData.value.push({ \n                    age_group : 'All',\n                    gender: 'Female',\n                    index: reportData.value.length + 1,\n                    first_time_screened: aggregateIndicators('first_time_screened'),\n                    post_treatment_followup: aggregateIndicators('post_treatment_followup'),\n                    rescreened_after_prev_visit: aggregateIndicators('rescreened_after_prev_visit')\n\n                })\n            } catch (e) {\n                toastDanger(\"Unable to generate report!\")\n            }\n            isLoading.value = false\n        }\n\n        /**\n         * Loads a dialogue to allow users to configure start and end date\n         */\n        const configure = () => DateSelection({\n            onFinish: (sDate: string, eDate: string, periodstr: string) => {\n                startDate.value = sDate\n                endDate.value = eDate\n                period.value = `Period (${periodstr})`\n                csvQuarter.value = `${toDate(startDate.value)} to ${toDate(endDate.value)}`\n                generate()\n            }\n        })\n\n        /**\n         * Initialization code when the report is empty!\n         */\n        onMounted(() => !reportData.value.length && configure())\n\n        return {\n            columns,\n            isLoading,\n            reportData,\n            period,\n            csvQuarter,\n            generate,\n            configure\n        }\n    }\n})\n","import { render } from \"./CXCA_SCRN_Report.vue?vue&type=template&id=b3e06f92&ts=true\"\nimport script from \"./CXCA_SCRN_Report.vue?vue&type=script&lang=ts\"\nexport * from \"./CXCA_SCRN_Report.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\n\n\nexport const AGE_GROUPS = [\n    '15-19 years', '20-24 years',\n    '25-29 years', '30-34 years',\n    '35-39 years', '40-44 years',\n    '45-49 years', '50 plus years'\n]\n\n\nexport class CxCaReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getPepfarReport(reportName: string) {\n        return this.getReport('pepfar_cxca', {'report_name': reportName})\n    }\n    getClinicReport(reportName: string) {\n        return this.getReport('screened_for_cxca', {'report_name': reportName})\n    }\n    getMohReport(reportName: string) {\n        return this.getReport('screened_for_cxca', {'report_name': reportName})\n    }\n    \n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n   \n\n    getReportPeriod() {\n        return this.startDate && this.endDate\n         ? `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n         : '-'\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': 24}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        return { ...payload, ...config }\n    }\n\n    static getReportQuarters(minDuration= 4) {\n        const quarters: Array<QuarterInterface> = []\n        let year = HisDate.getCurrentYear()\n        for(let i=0; i < minDuration; ++i) {\n            quarters.push({ name: `Q4 ${year}`, start: `${year}-10-01`, end: `${year}-12-31` })\n            quarters.push({ name: `Q3 ${year}`, start: `${year}-07-01`, end: `${year}-09-30` })\n            quarters.push({ name: `Q2 ${year}`, start: `${year}-04-01`, end: `${year}-06-30` })\n            quarters.push({ name: `Q1 ${year}`, start: `${year}-01-01`, end: `${year}-03-31` })\n            --year\n        }\n        return quarters\n    }\n\n}"],"sourceRoot":""}