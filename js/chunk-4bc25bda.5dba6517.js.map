{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/encounters/Adherence.vue","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue"],"names":["HTN_SESSION_KEY","BPManagementService","AppEncounterService","constructor","patientID","providerID","sbp","dbp","bpTrail","firstRecentGrade","secondRecentGrade","Object","values","sort","a","b","date","map","bp","getBpGrade","getSystolicBp","ObservationService","getFirstValueNumber","getDiastolicBp","query","getFirstValueCoded","getJson","drugID","pills","postJson","state","getDrugs","HCZ","drugs","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","adherence","notes","Enalapril","remaining","Amlodipine","Atenolol","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","skipSummary","fields","onFinishAction","onSubmit","cancelDestinationPath","cancelDestination","defineComponent","mixins","AdherenceMixinVue","watch","ready","getAdherenceFields","immediate","methods","saveAdherence","nextTask","__exports__","AdherenceService","super","this","lastDrugs","lastReceiptDate","Date","setDate","getDate","d","HisDate","toStandardHisFormat","reduce","receiptDate","drug","order","start_date","htnDrugs","htnDrugReferences","drug_id","filter","includes","getReceiptDate","getLastDrugs","receivedDrugsBefore","isEmpty","buildPillCountObs","orderId","pillCount","buildValueNumber","drugId","concept","getConceptID","getSessionDate","isAdherenceGood","calculateAdherence","given","expected","Math","round","calculateExpected","equivalentDailyDose","startDate","frequency","timeUnit","daysGone","calcTimeElapsed","parseFloat","toString","date1","dayjs","diff","calculateUnaccountedOrMissed","actual","exp","EncounterMixinVue","data","drugObs","askReasonForPoorAdherence","calculationAgreementObs","createEncounter","Promise","all","obs","saveObservationList","toastWarning","buildAdherenceReport","lastVisit","daysElapsed","timeElapse","toStandardHisDisplayFormat","rowColors","indexes","class","cellColors","columns","rows","forEach","index","formatFrequency","expectedPills","calcPillsExpected","quantity","pillsBrought","adherenceStatus","unAccountedDoses","push","name","equivalent_daily_dose","row","match","label","value","other","checkDrugsBefore","id","helpText","type","FieldType","TT_ADHERENCE_INPUT","init","async","loadPreviousDrugs","condition","validation","val","Validation","required","empty","i","some","Boolean","unload","buildAdherenceObs","order_id","options","fdata","pills_brought","TT_TABLE_VIEWER","config","hiddenFooterBtns","TT_SELECT","buildValueCoded"],"mappings":"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","file":"js/chunk-4bc25bda.5dba6517.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { DrugInterface } from \"@/interfaces/Drug\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { BPManagementService } from \"./htn_service\"\nimport dayjs from \"dayjs\"\n\nexport class AdherenceService extends AppEncounterService {\n    lastDrugs: Array<DrugInterface>\n    lastReceiptDate: string\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 68, providerID) //TODO: Use encounter type reference name\n        this.lastDrugs = []\n        this.lastReceiptDate = ''\n    }\n\n    async loadPreviousDrugs() {\n        const date = new Date(this.date)\n        date.setDate(date.getDate() - 1) // we don't want current date to count\n        const d = (date: string | Date) => HisDate.toStandardHisFormat(date)\n        const drugs = await AppEncounterService.getJson(\n            `patients/${this.patientID}/drugs_received`, { date: d(date) }\n        )      \n        if (drugs) {\n            this.lastReceiptDate = drugs.reduce((receiptDate: string | null,  drug: any) => {\n                return !receiptDate || (new Date(d(drug.order.start_date)) > new Date(receiptDate))\n                    ?  d(drug.order.start_date)\n                    : receiptDate\n            }, null)\n            const htnDrugs = BPManagementService.htnDrugReferences().map((d: any) => d.drug_id)\n            this.lastDrugs = drugs.filter((drug: DrugInterface) => \n               !htnDrugs.includes(drug.drug['drug_id']) && d(drug.order.start_date) === this.lastReceiptDate\n            )\n        }\n    }\n\n    getReceiptDate() { return this.lastReceiptDate }\n\n    getLastDrugs() { return this.lastDrugs }\n\n    receivedDrugsBefore() { return !isEmpty(this.lastDrugs) }\n\n    buildPillCountObs(orderId: number, pillCount: number) {\n        return this.buildValueNumber('Number of tablets brought to clinic', pillCount, null, orderId)\n    }\n\n    async buildAdherenceObs(orderId: number, drugId: number, adherence: number) {\n        const concept = await AppEncounterService.getConceptID('Drug adherence', true)\n        return {\n            'concept_id': concept,\n            'value_numeric': adherence,\n            'value_drug': drugId,\n            'value_modifier': '%',\n            'order_id': orderId,\n            'person_id': this.patientID,\n            'obs_datetime': AppEncounterService.getSessionDate()\n        }\n    }\n\n    isAdherenceGood(adherence: number) {\n        return adherence >= 95 && adherence <= 105\n    }\n\n    calculateAdherence(given: number, pills: number, expected: number) {\n        return Math.round(100 * (given - pills) / (given - expected));\n    }\n\n    calculateExpected(\n        given: number, \n        equivalentDailyDose: number, \n        startDate: string, \n        frequency: 'QOD' | 'QW'\n    ) {\n        const timeUnit = frequency === 'QW' ? 'week' : 'day'\n        const daysGone = this.calcTimeElapsed(startDate, timeUnit);\n        return (given - (daysGone * parseFloat(equivalentDailyDose.toString())));\n    }\n\n    calcTimeElapsed(date1: string, timeUnit: 'week' | 'day') {\n        return dayjs(this.date).diff(date1, timeUnit)\n    }\n\n    calculateUnaccountedOrMissed(expected: string, actual: string) {\n        const exp = (parseFloat(expected) - parseFloat(actual));\n        return (exp < 0 ? ((exp * -1) + ' missed') : (exp + ' unacc'));\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning } from \"@/utils/Alerts\"\nimport { AdherenceService } from \"@/apps/ART/services/adherence_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from 'lodash'\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        adherence: {} as any,\n        drugObs: [] as any,\n        askReasonForPoorAdherence: false,\n        calculationAgreementObs: [] as any,\n    }),\n    methods: {\n        async saveAdherence() {\n            await this.adherence.createEncounter()\n            const data = await Promise.all([...this.drugObs, ...this.calculationAgreementObs])\n            const obs = await this.adherence.saveObservationList(data)\n\n            if (!obs) return toastWarning('Unable to save patient observations')\n        },\n        buildAdherenceReport(data: any) {\n            const lastVisit = this.adherence.getReceiptDate()\n            const daysElapsed = this.adherence.calcTimeElapsed(lastVisit, 'day')\n            const timeElapse = ` Last visit: ${HisDate.toStandardHisDisplayFormat(lastVisit)} \n                (${daysElapsed} Days Elapsed)`\n            const rowColors = [{ indexes: [0, 3, 6], class: 'adherence-col-bg' }]\n            const cellColors: any = []\n            const columns = [timeElapse]\n            const rows = [\n                ['Prescription'],\n                ['Tabs given'],\n                ['Tabs per'],\n                ['Tabs remaining'],\n                ['Expected'],\n                ['Actual (counted)'],\n                ['Adherence'],\n                ['Doses missed/ Unaccounted for'],\n                ['Doses consumed'],\n                ['Art Adherence']\n            ]        \n            data.forEach((order: any, index: number) => {\n                const frequency = this.formatFrequency(order.frequency)\n                const expectedPills = this.calcPillsExpected(order)\n                const adherence = this.adherence.calculateAdherence(\n                    order.quantity, order.pillsBrought, expectedPills\n                )\n                const adherenceStatus = this.adherence.isAdherenceGood(adherence) \n                    ? 'Good adherence' \n                    : 'Explore problem'\n                const unAccountedDoses = this.adherence.calculateUnaccountedOrMissed(\n                    expectedPills, order.pillsBrought\n                )\n                columns.push(order.drug.name)\n                rows[0].push('')\n                rows[1].push(order.quantity)\n                rows[2].push(`${order.equivalent_daily_dose} <b>${frequency}</b>`)\n                rows[3].push('')\n                rows[4].push(expectedPills < 0 ? 0 : expectedPills)\n                rows[5].push(order.pillsBrought)\n                rows[6].push('')\n                rows[7].push(unAccountedDoses)\n                rows[8].push(`${adherence}%`)\n                rows[9].push(adherenceStatus)\n\n                cellColors.push({ \n                    index: index+1,\n                    row: 9, \n                    class: adherenceStatus.match(/good/i) ? 'adherence-txt-good' : 'adherence-txt-bad' \n                })\n            })\n            return [\n                { \n                    label: 'Selected Medication', \n                    value:'Table', \n                    other: { columns, rows, rowColors, cellColors }\n                }      \n            ]\n        },\n        formatFrequency(frequency: string) {\n            return `${frequency}`.match(/qod/i) \n                    ? 'QOD'\n                    : `${frequency}`.match(/weekly/i) \n                    ? 'QW'\n                    : frequency\n        },\n        calcPillsExpected(d: any) {\n            return this.adherence.calculateExpected(\n                d.quantity, \n                d.equivalent_daily_dose, \n                d.order.start_date,\n                this.formatFrequency(d.frequency) as 'QOD' | 'QW'\n            )\n        },\n        getAdherenceFields(checkDrugsBefore=false): Array<Field> {\n            return [\n                {\n                    id: 'pills_brought',\n                    helpText: 'Pills remaining (brought to clinic)',\n                    type: FieldType.TT_ADHERENCE_INPUT,\n                    init: async () => {\n                        this.adherence = new AdherenceService(this.patientID, this.providerID)\n                        await this.adherence.loadPreviousDrugs()\n                        return true\n                    },\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    validation: (val: any) => {\n                        if (Validation.required(val)) return ['No drugs available']\n\n                        const empty = val.map((i: Option) => i.value === '')\n                        \n                        return  empty.some(Boolean) ? ['Some values are missing'] : null\n                    },\n                    unload: async (data: any) => {\n                        this.drugObs = []\n                        data.forEach(async(val: Option) => {\n                            const {drug, order } = val.other\n                            const data = { ...val.other, pillsBrought: val.value }\n                            const adherence = this.adherence.calculateAdherence(\n                                data.quantity, data.pillsBrought, this.calcPillsExpected(data)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildAdherenceObs(order.order_id, drug.drug_id, adherence)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildPillCountObs(order.order_id, val.value)\n                            )\n\n                            if (!this.askReasonForPoorAdherence) {\n                                this.askReasonForPoorAdherence = !this.adherence.isAdherenceGood(data)\n                            }\n                        })\n                    },\n                    options: (fdata: any) => {\n                        if (!isEmpty(fdata.pills_brought)) {\n                            return fdata.pills_brought\n                        }\n                        return this.adherence.getLastDrugs().map((data: any) => ({\n                            label: data.drug.name,\n                            value: '',\n                            other: {\n                                ...data\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: \"adherence_report\",\n                    helpText: \"ART adherence\",\n                    type: FieldType.TT_TABLE_VIEWER,\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    options: (d: any) => this.buildAdherenceReport(\n                        d.pills_brought.map((i: Option) => ({ \n                            ...i.other, pillsBrought: i.value\n                        }))\n                    ),\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    }\n                },\n                {\n                    id: \"agree_with_calculation\",\n                    helpText: \"Agree with adherence calculation\",\n                    type: FieldType.TT_SELECT,\n                    condition: () => this.askReasonForPoorAdherence,\n                    validation: (val: Option) => Validation.required(val),\n                    unload: ({ value }: Option) => {\n                        this.calculationAgreementObs = [ this.adherence.buildValueCoded(\n                            'Reason for poor treatment adherence', value\n                        )]\n                    },\n                    options: () => [\n                        { label: 'Yes', value: 'Yes' },\n                        { label: 'No', value: 'No' }\n                    ]\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Adherence.vue?vue&type=template&id=071c48e6&ts=true\"\nimport script from \"./Adherence.vue?vue&type=script&lang=ts\"\nexport * from \"./Adherence.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import script from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}