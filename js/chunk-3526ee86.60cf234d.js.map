{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/reports/pepfar/disaggregated.vue"],"names":["DisaggregatedReportService","ArtReportService","constructor","gender","ageGroup","AGE_GROUPS","initialize","rebuildOutcome","req","getCohort","temp_disaggregated","setAgeGroup","setInitialization","isInit","setRebuildOutcome","isRebuild","setGender","getGender","getReport","getTxIpt","getTxCurrTB","getRegimenDistribution","PatientReportService","getBookedAppointments","date","getJson","programID","getViralLoadResults","range","getOtherOutcome","outcome","getPatientVisitTypes","getClientsDueForVl","getClientRentention","getExternalConsultationClients","getMissedAppointments","getPregnantWomen","getArchivingCandidates","CohortVar","MohCohortReportService","super","this","regenerate","cohortUrl","setRegenerate","getCohortDrillDown","resourceId","id","requestCohort","params","ajxGet","qaurterRequestParams","name","quarter","datePeriodRequestParams","startDate","endDate","getCachedCohortValues","cache","sessionStorage","getItem","MOH_CACHE","conf","JSON","parse","start_date","end_date","data","cacheCohort","values","setItem","stringify","validateIndicators","validations","callback","cachedValues","errors","Object","keys","reduce","key","indicator","find","validation","indicatorValue","contents","param","condition","check","parseInt","push","error","render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","title","period","rows","fields","columns","reportPrefix","config","showIndex","validationErrors","showValidationStatus","canValidate","hasServerSideCaching","headerInfoList","headerList","onReportConfiguration","onPeriod","_","defineComponent","mixins","ReportMixin","components","ReportTemplate","IonPage","table","thTxt","thNum","REGIMENS","map","r","rowDataRefs","dataRefLabels","aggregations","mohCohort","maleFemaleAgeGroupData","sortIndexes","initiated","created","getDateDurationFields","computed","sort","a","b","i","concat","watch","doIt","validateReport","methods","rebuildCache","report","setQuarter","setStartDate","setEndDate","getDateIntervalPeriod","init","toastWarning","setTableRows","setHeaderInfoList","getTotals","compareFunction","filter","items","item","addAggregation","col","group","totals","row","distribution","refs","forEach","drill","totalAlive","match","label","value","length","other","onclick","runTableDrill","setFemaleRows","setMaleRows","setTotalMalesRow","setFemalePregnantRows","setFemaleBreastFeedingRows","setFemaleNotPregnantRows","getColumnLabel","prop","res","sortIndex","maleTD","column","columnDescription","accum","cur","columnName","td","isPregnant","patientID","includes","fnpTD","setRows","category","ageGroups","otherAgeGroup","txNew","txCurr","txGivenIpt","txScreenTB","cohort","isEmpty","getValue","formatGender","getRegimenRows","p","s","__exports__"],"mappings":"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","file":"js/chunk-3526ee86.60cf234d.js","sourcesContent":["import { find } from \"lodash\";\nimport { ArtReportService } from \"./art_report_service\";\n\nexport enum CohortVar {\n    MOH_CACHE = 'mohCache'\n}\n\nexport interface CohortValidationInterface {\n    param: number | string;\n    error: (indicator: number, param: number) => string;\n    check: (indicator: number, param: number) => boolean;\n}\n\nexport class MohCohortReportService extends ArtReportService {\n    regenerate: boolean;\n    constructor() {\n        super()\n        this.regenerate = false\n    }\n\n    private cohortUrl() {\n        return `programs/${this.programID}/reports/cohort`\n    }\n\n    setRegenerate(regenerate: boolean) {\n        this.regenerate = regenerate\n    }\n\n    getCohortDrillDown(resourceId: string) {\n        return ArtReportService.getJson('cohort_report_drill_down', {\n            id: resourceId,\n            date: this.date,\n            'program_id': this.programID\n        })\n    }\n\n    requestCohort(params: any) {\n        return ArtReportService.ajxGet(\n            this.cohortUrl(), params\n        )\n    }\n\n    qaurterRequestParams() {\n        return { \n            name: this.quarter, \n            regenerate: this.regenerate \n        }\n    }\n\n    datePeriodRequestParams() {\n        return {\n            name: `Cohort-${this.startDate}-${this.endDate}`,\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            regenerate: this.regenerate\n        }\n    }\n\n    getCachedCohortValues() {\n        const cache = sessionStorage.getItem(CohortVar.MOH_CACHE)\n        if (cache) {\n            const conf = JSON.parse(cache)\n            if (conf.start_date === this.startDate \n                && conf.end_date === this.endDate\n                || conf.quarter === this.quarter) {\n                return conf.data\n            }\n        }\n    }\n\n    cacheCohort(values: any) {\n        sessionStorage.setItem(\n            CohortVar.MOH_CACHE, \n            JSON.stringify({\n                'start_date': this.startDate,\n                'end_date': this.endDate,\n                'quarter': this.quarter,\n                'data': values\n        }))\n    }\n\n    validateIndicators(validations: Record<string, CohortValidationInterface>, callback: Function) {\n        const cachedValues = this.getCachedCohortValues()\n        if (cachedValues) {\n            const errors = Object.keys(validations)\n                .reduce((errors: Array<any>, key: string) => {\n                    const indicator: any = find(cachedValues, { name: key })\n                    const validation: any = validations[key]\n                    const indicatorValue: any = indicator ? indicator.contents : null\n                    const param = validation.param as number\n                    const condition = validation.check(parseInt(indicatorValue), param)\n                    if (condition) errors.push(\n                        validation.error(indicatorValue, param)\n                    )\n                    return errors\n                }, [])\n            return callback(errors)\n        }\n        return -1\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_report_template = _resolveComponent(\"report-template\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_report_template, {\n        title: _ctx.title,\n        period: _ctx.period,\n        rows: _ctx.rows,\n        fields: _ctx.fields,\n        columns: _ctx.columns,\n        reportPrefix: \"PEPFAR\",\n        config: {\n                showIndex: true\n            },\n        validationErrors: _ctx.errors,\n        showValidationStatus: _ctx.canValidate,\n        hasServerSideCaching: true,\n        headerInfoList: _ctx.headerList,\n        onReportConfiguration: _ctx.onPeriod\n      }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"validationErrors\", \"showValidationStatus\", \"headerInfoList\", \"onReportConfiguration\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { isEmpty } from \"lodash\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { IonPage } from \"@ionic/vue\"\nimport { AGE_GROUPS } from \"@/apps/ART/services/reports/patient_report_service\"\nimport { toastWarning } from '@/utils/Alerts'\nimport { MohCohortReportService } from \"@/apps/ART/services/reports/moh_cohort_service\"\nimport { DisaggregatedReportService } from \"@/apps/ART/services/reports/disaggregated_service\"\nimport { REGIMENS } from \"@/apps/ART/services/reports/regimen_report_service\"\n\nexport default defineComponent({\n    mixins: [ReportMixin],\n    components: { ReportTemplate, IonPage },\n    data: () => ({\n        title: 'PEPFAR Disaggregated Report',\n        headerList: [] as Option[],\n        errors: [] as string[],\n        columns: [\n            [\n                table.thTxt('Age group'),\n                table.thTxt('Gender'),\n                table.thNum('Tx new (new on ART)'),\n                table.thNum('TX curr (receiving ART)'),\n                table.thNum('TX curr (received IPT)'),\n                table.thNum('TX curr (screened for TB)'),\n                ...(REGIMENS.map(r => table.thNum(r))),\n                table.thNum('Unknown'),\n                table.thNum('Total (regimen)')\n            ]\n        ],\n        rowDataRefs: [\n            'txNew', \n            'txCurr', \n            'txGivenIpt', \n            'txScreenTB', \n            ...REGIMENS,\n            'N/A', \n            'regimenTotals'\n        ],\n        dataRefLabels: {\n           'txNew': 'Tx new (new on ART)',\n           'txCurr': 'Tx curr (receiving ART)',\n           'txGivenIpt': 'TX curr (received IPT)',\n           'txScreenTB': 'TX curr (screened for TB)',\n           'N/A': 'Unknown',\n           'regimenTotals': 'Regimen Totals'\n        } as any,\n        aggregations: [] as Array<any>,\n        mohCohort: {} as any,\n        maleFemaleAgeGroupData: {} as any,\n        canValidate: false as boolean,\n        sortIndexes: {} as Record<string | number, Array<any>>,\n        initiated: false as boolean\n    }),\n    created() {\n        this.fields = this.getDateDurationFields()\n    },\n    computed: {\n        rows(): Array<any> {\n            return Object.keys(this.sortIndexes)\n                .sort((a, b) => parseInt(a) - parseInt(b))\n                .reduce((r: any, i: any) => r.concat(this.sortIndexes[i]), [])\n        }\n    },\n    watch: {\n        async canValidate(doIt: boolean) {\n            if (doIt) await this.validateReport()\n        }\n    },\n    methods: {\n        async onPeriod(_: any, config: any, rebuildCache=true) {\n            this.errors = []\n            this.maleFemaleAgeGroupData = {}\n            this.sortIndexes = {}\n            this.aggregations = []\n            this.canValidate = false\n            this.report = new DisaggregatedReportService()\n            this.mohCohort = new MohCohortReportService()\n            this.report.setQuarter('pepfar')\n            this.report.setStartDate(config.start_date)\n            this.report.setEndDate(config.end_date)\n            this.mohCohort.setStartDate(config.start_date)\n            this.mohCohort.setEndDate(config.end_date)\n            this.period = this.report.getDateIntervalPeriod()\n            this.report.setRebuildOutcome(!this.initiated || rebuildCache)\n            const isInit = await this.report.init()\n            if (!isInit) {\n                return toastWarning('Unable to initialise report')\n            }\n            await this.setTableRows()\n            this.setHeaderInfoList()\n            this.canValidate = true\n            this.initiated = true\n        },\n        getTotals(compareFunction: Function){\n            return this.aggregations\n                .filter(i => compareFunction(i))\n                .reduce((items, item) => items.concat(item.data), [])\n        },\n        addAggregation(col: string, gender: string, data = []) {\n            this.aggregations.push({ col, gender, data })\n        },\n        async getRegimenRows(group: string, gender: string) {\n            let totals: any = []\n            const row: any = []\n            const distribution = await this.report.getRegimenDistribution()\n            const refs = [...REGIMENS, 'N/A']\n            refs.forEach((i: any) => {\n                if (distribution[i]) totals = totals.concat(distribution[i])\n                row.push(this.drill(distribution[i], `Regimen ${i} | ${group} | ${gender}`))\n                this.addAggregation(i, gender, distribution[i])\n            })\n            row.push(this.drill(totals, `Regimen Totals | ${group} | ${gender}`))\n            this.addAggregation('regimenTotals', gender, totals)\n            return row\n        },\n        setHeaderInfoList() {\n            const totalAlive = this.getTotals((i: any) => i.col === 'txCurr' && i.gender.match(/male|female/i))\n            this.headerList = [\n                { \n                    label: 'Total Alive and on ART', \n                    value: totalAlive.length,\n                    other: {\n                        onclick: () => this.runTableDrill(totalAlive, 'Total Alive and on ART')\n                    }\n                }\n            ]\n        },\n        async setTableRows() {\n            await this.setFemaleRows(1)\n            await this.setMaleRows(2)\n            await this.setTotalMalesRow(3)\n            await this.setFemalePregnantRows(4)\n            await this.setFemaleBreastFeedingRows(6)\n            await this.setFemaleNotPregnantRows(5)\n        },\n        getColumnLabel(col: string) {\n            return col in this.dataRefLabels ? this.dataRefLabels[col] : col\n        },\n        async getValue(prop: string, gender: string, data: any) {\n            let res: any = []\n            switch(prop) {\n                case 'tx_given_ipt':\n                    res = await this.report.getTxIpt()\n                    break;\n                case 'tx_screened_for_tb':\n                    res = await this.report.getTxCurrTB()\n                    break;\n                default:\n                    res = gender in data ? data[gender][prop] : []\n                    break;\n            }\n            return res\n        },\n        setTotalMalesRow(sortIndex: number) {\n            const maleTD = (column: string, columnDescription: string) => {\n                const data = this.aggregations.filter((a: any) => a.gender === 'Male' && a.col === column)\n                    .reduce((accum: any, cur: any) => accum.concat(cur.data), []) \n                return this.drill(data, columnDescription)\n            }\n            const rows: any = this.rowDataRefs.map(columnName => \n                maleTD(columnName, `${this.getColumnLabel(columnName)} | All Male`)\n            )\n            this.sortIndexes[sortIndex] = [[table.td('All'), table.td('Male'), ...rows]]\n        },\n        setFemaleNotPregnantRows(sortIndex: number) {\n            // Gets all pregnant females from a particular column and checks if given patient ID \n            // Is in the list\n            const isPregnant = (patientID: number, column: string) => this.aggregations\n                .filter((a: any) => a.gender.match(/fp|fbf/i) && a.col === column)\n                .reduce((accum: any, cur: any) => accum.concat(cur.data || []), [])\n                .includes(patientID)\n            // Get total sum of all females by a particular column\n            const fnpTD = (column: string, columnDescription: string) => {\n                const data = this.aggregations.filter((a: any) => a.gender === 'Female' && a.col === column)\n                    .reduce((accum: any, cur: any) => accum.concat(cur.data.filter((i: any) => !isPregnant(i, column))), [])\n                return this.drill(data, columnDescription)\n            }\n            const rows: any = this.rowDataRefs.map(column => \n                fnpTD(column, `${this.getColumnLabel(column)} | FNP`)\n            )\n            this.sortIndexes[sortIndex] = [[table.td('All'), table.td('FNP'), ...rows]]\n        },\n        setFemaleRows(sortIndex: number) {\n            this.report.setGender('female')\n            return this.setRows(sortIndex, 'F', AGE_GROUPS, 'Female')\n        },\n        setMaleRows(sortIndex: number) {\n            this.report.setGender('male')\n            return this.setRows(sortIndex, 'M', AGE_GROUPS, 'Male')\n        },\n        setFemalePregnantRows(sortIndex: number) {\n            this.report.setGender('pregnant')\n            return this.setRows(sortIndex, 'F', ['All'], 'FP', 'Pregnant')\n        },\n        setFemaleBreastFeedingRows(sortIndex: number) {\n            this.report.setGender('breastfeeding')\n            return this.setRows(sortIndex, 'F', ['All'], 'FBf', 'Breastfeeding')\n        },\n        async setRows(sortIndex: number, category: string, ageGroups: string[], gender: string, otherAgeGroup='') {\n            for(const i in ageGroups) {\n                let txNew = []\n                let txCurr= []\n                let txGivenIpt = []\n                let txScreenTB = []\n\n                const group = otherAgeGroup || ageGroups[i]\n\n                this.report.setAgeGroup(group)\n\n                if (!(group in this.maleFemaleAgeGroupData)) {\n                    const cohort = await this.report.getCohort()\n                    this.report.setRebuildOutcome(false)\n                    this.maleFemaleAgeGroupData[group] = !isEmpty(cohort) ? cohort[group] : {}\n                }\n\n                if (!isEmpty(this.maleFemaleAgeGroupData[group])) {\n                    const value = (prop: string) => this.getValue(\n                        prop, category, this.maleFemaleAgeGroupData[group]\n                    )\n                    txNew = await value('tx_new')\n                    txCurr= await value('tx_curr')\n                    txGivenIpt = await value('tx_given_ipt')\n                    txScreenTB = await value('tx_screened_for_tb')\n                    this.addAggregation('txNew', gender, txNew)\n                    this.addAggregation('txCurr',gender, txCurr)\n                    this.addAggregation('txGivenIpt',gender, txGivenIpt)\n                    this.addAggregation('txScreenTB',gender, txScreenTB)\n                }\n\n                if (!this.sortIndexes[sortIndex]) this.sortIndexes[sortIndex] = []\n\n                this.sortIndexes[sortIndex].push([\n                    table.td(ageGroups[i]),\n                    table.td(this.formatGender(gender)),\n                    this.drill(txNew, `Tx new (new on ART) | ${group} | ${gender}`),\n                    this.drill(txCurr, `Tx curr (receiving ART) | ${group} | ${gender}`),\n                    this.drill(txGivenIpt, `TX curr (received IPT) | ${group} | ${gender}`),\n                    this.drill(txScreenTB, `TX curr (screened for TB) | ${group} | ${gender}`),\n                    ...(await this.getRegimenRows(group, gender))\n                ])\n            }\n        },\n        validateReport() {\n            const validations: any = {\n                'initiated_on_art_first_time': {\n                    param: this.getTotals((i: any) => i.col === 'txNew' && i.gender.match(/male|female/i)).length,\n                    check: (i: number, p: number) => i != p,\n                    error: (i: number, p: number) => `\n                        MOH cohort initiated on ART first time <b>(${i})</b> is not matching Tx New <b>(${p})</b>\n                    `\n                },\n                'initial_pregnant_females_all_ages': {\n                    param: this.getTotals((i: any) => i.col === 'txNew' && i.gender === 'FP').length,\n                    check: (i: number, p: number) => i != p,\n                    error: (i: number, p: number) => `\n                        MOH cohort initial pregnant females all ages \n                        <b>(${i})</b> is not matching with TX new Pregnant women <b>${p}</b>\n                    `\n                },\n                'males_initiated_on_art_first_time': {\n                    param: this.getTotals((i: any) => i.col === 'txNew' && i.gender === 'Male').length,\n                    check: (i: number, p: number) => i != p,\n                    error: (i: number, p: number) => `\n                        MoH Cohort males initiated on ART first time <b>(${i})</b>\n                        is not matching with TX new All male <b>(${p})</b>\n                    `\n                }\n            }\n            const s = this.mohCohort.validateIndicators(validations, (errors: string[]) => this.errors = errors)\n            if (s === -1) this.errors = ['Report not validated. Run the MoH cohort report for similar reporting period and then run this report']\n        }\n    }\n})\n","import { render } from \"./disaggregated.vue?vue&type=template&id=c8e82cb8&ts=true\"\nimport script from \"./disaggregated.vue?vue&type=script&lang=ts\"\nexport * from \"./disaggregated.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}