{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/Diagnosis.vue?95dd","webpack:///./src/apps/OPD/services/patient_diagnosis_service.ts","webpack:///./src/apps/OPD/services/clinical_notes_service.ts","webpack:///./src/apps/OPD/views/encounters/Diagnosis.vue","webpack:///./src/apps/OPD/views/encounters/Diagnosis.vue?2a3c"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","PatientDiagnosisService","patientID","providerID","filter","page","limit","conceptSetId","ConceptService","getConceptID","AppEncounterService","getJson","id","name","ClinicalNotesService","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","activeField","notesService","diagnosisService","malariaTestResult","watch","ready","handler","isReady","OrderService","getLatestMalariaTestResult","getFields","immediate","deep","methods","_","computedData","createEncounter","resolveObs","diagnosisData","saveObservationList","notesData","isEmpty","nextTask","mapListToOptions","list","map","item","label","value","other","concept_id","isChecked","sort","a","b","checkMalariaResult","malaria","find","o","alertConfirmation","helpText","type","FieldType","TT_INFINITE_SCROLL_MULTIPLE_SELECT","validation","Validation","required","options","getDiagnosis","beforeNext","computedValue","tag","obs","buildValueCodedFromConceptId","summaryMapValue","config","isFilterDataViaApi","showKeyboard","TT_TEXT","buildValueText","__exports__"],"mappings":"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","file":"js/chunk-76ee8285.b4ab2873.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ConceptService } from '@/services/concept_service';\n\nexport class PatientDiagnosisService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 8, providerID) \n    }\n\n    static async getDiagnosis(filter='', page=1, limit=10) {\n        const conceptSetId = ConceptService.getConceptID('Qech outpatient diagnosis list')\n        return AppEncounterService.getJson('diagnosis', {\n            id: conceptSetId,\n            name: filter,\n            page: page,\n            'page_size': limit\n        })\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ClinicalNotesService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 105, providerID) \n    }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientDiagnosisService } from \"@/apps/OPD/services/patient_diagnosis_service\"\nimport { ClinicalNotesService } from \"@/apps/OPD/services/clinical_notes_service\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { isEmpty } from 'lodash';\nimport { ConceptName } from '@/interfaces/conceptName';\nimport { OrderService } from '@/services/order_service';\nimport { alertConfirmation } from '@/utils/Alerts';\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    activeField: '',\n    notesService: {} as any,\n    diagnosisService: {} as any,\n    malariaTestResult: 'No' as string\n  }),\n  watch: {\n    ready: {\n      async handler(isReady: boolean) {\n        if(isReady){\n          this.malariaTestResult = await OrderService.getLatestMalariaTestResult(this.patientID)\n          this.notesService = new ClinicalNotesService(this.patientID, this.providerID)\n          this.diagnosisService = new PatientDiagnosisService(this.patientID, this.providerID)\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true,\n      deep: true\n    }\n  },\n  methods: {\n    async onSubmit(_: any, computedData: any){\n      await this.diagnosisService.createEncounter()\n      \n      const diagnosisData = await this.resolveObs({...computedData}, 'diagnosis')      \n      await this.diagnosisService.saveObservationList(diagnosisData)\n\n      const notesData = await this.resolveObs({...computedData}, 'notes')\n      if(!isEmpty(notesData)) {\n        await this.notesService.createEncounter()\n        await this.notesService.saveObservationList(notesData)\n      }\n\n      this.nextTask()        \n    },\n    mapListToOptions(list: ConceptName[]){\n      if(isEmpty(list)) return []\n      return list.map(item => ({\n        label: item.name, value: item.name, other: item.concept_id, isChecked: false\n      })).sort((a, b) => a.label < b.label ? -1 : a.label > b.label ? 1 : 0)\n    },\n    async checkMalariaResult(data: Array<any>){\n      const malaria = data.find(o => o.label === 'Malaria')      \n      if(malaria) {\n        if(this.malariaTestResult === \"Positive\") return true\n        return await alertConfirmation(`Patient has ${this.malariaTestResult} malaria test result. Do you want to continue?`)\n      }\n      return true\n    },\n    getFields(): Array<Field>{\n      return [\n        {\n          id: 'primary_diagnosis',\n          helpText: 'Select primary diagnosis',\n          type: FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n          validation: (data: any) => Validation.required(data),\n          options: async (_, filter='', page=1, limit=10) => this.mapListToOptions(\n            await PatientDiagnosisService.getDiagnosis(filter, page, limit)\n          ),\n          beforeNext: async (data: any) => await this.checkMalariaResult(data),\n          computedValue: (options: Array<Option>) => ({\n            tag: 'diagnosis',\n            obs: options.map(({other}) => \n              this.diagnosisService.buildValueCodedFromConceptId('Primary diagnosis', other))\n          }),\n          summaryMapValue: ({ value }: Option) => ({\n            value,\n            label: \"Primary diagnosis\"\n          }),\n          config: {\n            isFilterDataViaApi: true,\n            showKeyboard: true,\n          }\n        },\n        {\n          id: 'secondary_diagnosis',\n          helpText: 'Select secondary diagnosis',\n          type: FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n          options: async (_, filter='', page=1, limit=10) => this.mapListToOptions(\n            await PatientDiagnosisService.getDiagnosis(filter, page, limit)\n          ),\n          beforeNext: async (data: any) => await this.checkMalariaResult(data),\n          computedValue: (options: Array<Option>) => ({\n            tag: 'diagnosis',\n            obs: options.map(({other}) => \n              this.diagnosisService.buildValueCodedFromConceptId('Secondary diagnosis', other))\n          }),\n          summaryMapValue: ({ value }: Option) => ({\n            value,\n            label: \"Secondary diagnosis\"\n          }),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          }\n        },\n        {\n          id: 'clinical_notes',\n          helpText: 'Clinical notes',\n          type: FieldType.TT_TEXT,\n          computedValue: ({value}: Option) => ({\n            tag: 'notes',\n            obs: this.notesService.buildValueText('Clinical notes construct', value)\n          })\n        },\n      ]\n    }\n  }\n})\n","import { render } from \"./Diagnosis.vue?vue&type=template&id=0d6d0dc7&ts=true\"\nimport script from \"./Diagnosis.vue?vue&type=script&lang=ts\"\nexport * from \"./Diagnosis.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}