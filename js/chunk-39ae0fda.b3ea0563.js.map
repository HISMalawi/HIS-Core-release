{"version":3,"sources":["webpack:///./src/apps/ART/services/consultation_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/views/encounters/hypertension_diagnosis.vue?bd9d","webpack:///./src/apps/ART/views/encounters/hypertension_diagnosis.vue","webpack:///./src/apps/ART/views/encounters/hypertension_diagnosis.vue?50f9"],"names":["ConsultationService","AppEncounterService","constructor","patientID","providerID","super","getFamilyPlanningMethods","getJson","this","obs","ObservationService","getFirstObs","value_text","match","obsInValidPeriod","getDrugSideEffects","getProgramID","date","getClient","getFirstValueCoded","req","id","isEmpty","lastScreened","duration","dayjs","diff","secondCheck","getFirstValueText","isTL","value_coded","tlObs","fpObs","drugs","uniqueDrugs","forEach","drug","drug_inventory_id","familyPlanningMethods","label","values","familyPlanningLogic","selected","map","data","value","isChecked","disabled","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","offlineID","patient","fields","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","ProgramService","getSessionDate","current_district","current_village","current_traditional_authority","status","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","names","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","mixins","EncounterMixinVue","consultation","watch","handler","getFields","immediate","_","back","helpText","FieldType","TT_SELECT","validation","val","Validation","computedValue","v","buildValueCoded","generateDateFields","f","has_hypertension","estimation","allowUnknown","computeValue","buildValueDate"],"mappings":"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","file":"js/chunk-39ae0fda.b3ea0563.js","sourcesContent":["import { DrugInterface } from \"@/interfaces/Drug\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { ObservationService } from \"@/services/observation_service\";\nimport dayjs from \"dayjs\";\nimport { isEmpty } from \"lodash\";\nimport { DrugOrderService } from \"@/services/drug_order_service\"\n\nexport class ConsultationService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 53, providerID);\n  }\n  getFamilyPlanningMethods() {\n    return [\n      \"ORAL CONTRACEPTIVE PILLS\",\n      \"DEPO-PROVERA\",\n      \"INTRAUTERINE CONTRACEPTION\",\n      \"CONTRACEPTIVE IMPLANT\",\n      \"MALE CONDOMS\",\n      \"FEMALE CONDOMS\",\n      \"TUBAL LIGATION\",\n      \"NONE\",\n    ];\n  }\n\n  async getTptTreatmentStatus() {\n    return AppEncounterService.getJson(`/patients/${this.patientID}/tpt_status`)\n  }\n\n  async patientHitMenopause() {\n    const obs = await ObservationService.getFirstObs(\n      this.patientID, 'Why does the woman not use birth control', \n    )\n    return obs && typeof obs?.value_text === 'string'\n      ? (obs.value_text.match(/menopause/i) ? true : false)\n      && AppEncounterService.obsInValidPeriod(obs)\n      : false\n  }\n\n  async hasTreatmentHistoryObs() {\n    const obs = await ObservationService.getFirstObs(this.patientID, 'Previous TB treatment history')\n    return obs && AppEncounterService.obsInValidPeriod(obs)\n  }\n\n  getDrugSideEffects() {\n    return AppEncounterService.getJson(`programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/medication_side_effects`, { \n      date: this.date \n    })\n  }\n\n  getClient() {\n    return AppEncounterService.getFirstValueCoded(this.patientID, 'Patient present');\n  }\n\n  async clientDueForCxCa() {\n    const req: any = await AppEncounterService.getJson(`last_cxca_screening_details`, {\n      id: this.patientID, date: this.date\n    })\n    if (!isEmpty(req)) {\n      const lastScreened = req['date_screened']\n      const duration = dayjs(this.date).diff(lastScreened, 'years')\n      return duration >= 1\n    }\n    return true\n  }\nasync clientHasHadAHysterectomy() {\n    const req: any = await AppEncounterService.getFirstValueCoded(this.patientID, 'Reason for NOT offering CxCa'); \n    if(req === \"Hysterectomy\") {\n      return true\n    }\n    const secondCheck: any = await AppEncounterService.getFirstValueText(this.patientID, 'Treatment'); \n    if(secondCheck === \"Hysterectomy\") {\n      return true\n    }\n    return false\n  }\n  async getTLObs() {\n    const isTL = ((obs: any) => obs && obs.value_coded === 'Tubal ligation' && AppEncounterService.obsInValidPeriod(obs))\n    const tlObs = await AppEncounterService.getFirstObs(this.patientID, 'Family planning')\n    if (isTL(tlObs)) {\n      return isTL(tlObs)\n    } else  {\n      const fpObs = await AppEncounterService.getFirstObs(this.patientID, 'Method of family planning')\n      return isTL(fpObs)\n    }\n  }\n  async getPreviousDrugs() {\n\n    const drugs = await AppEncounterService.getJson(\n      `patients/${this.patientID}/drugs_received`\n    )\n\n    if (!drugs) return\n\n    const uniqueDrugs = {} as any\n    drugs.forEach((drug: DrugInterface) => {\n      uniqueDrugs[drug.drug_inventory_id] = drug;\n    })\n    return uniqueDrugs;\n  }\n  familyPlanningMethods(label: string, values: any[]) {\n    const familyPlanningLogic: any = {\n      \"ORAL CONTRACEPTIVE PILLS\": {\n        \"DEPO-PROVERA\": 'N', \"INTRAUTERINE CONTRACEPTION\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"DEPO-PROVERA\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"INTRAUTERINE CONTRACEPTION\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"INTRAUTERINE CONTRACEPTION\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"CONTRACEPTIVE IMPLANT\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"MALE CONDOMS\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'Y', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'Y',\n        'CONTRACEPTIVE IMPLANT': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'Y', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'Y'\n      },\n      \"FEMALE CONDOMS\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'Y', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'Y',\n        'CONTRACEPTIVE IMPLANT': 'Y', 'MALE CONDOMS': 'Y', 'RYTHM METHOD': 'Y', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'Y'\n      },\n      \"RYTHM METHOD\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'CONTRACEPTIVE IMPLANT': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"TUBAL LIGATION\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'N', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'N', 'RYTHM METHOD': 'N',\n        'VASECTOMY': 'N',\n      },\n      \"VASECTOMY\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'Y', 'RYTHM METHOD': 'N',\n        'TUBAL LIGATION': 'N'\n      },\n      \"NONE\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'N', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'N', 'RYTHM METHOD': 'N',\n        'TUBAL LIGATION': 'N'\n      }\n    }\n    const selected = familyPlanningLogic[label];\n    return values.map(data => {\n      if (selected[data.label] === \"N\") {\n        return {\n          label: data.label,\n          value: data.value,\n          isChecked: false,\n          disabled: true,\n        }\n      }\n      else {\n        return {\n          label: data.label,\n          value: data.value,\n          isChecked: data.isChecked,\n          disabled: false,\n        }\n      }\n\n    })\n  }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\nimport { LabOrderService } from '@/apps/ART/services/lab_order_service'\nimport { OrderService } from '@/services/order_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    skipSummary: true,\n    onFinishAction: _ctx.onFinish\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { ConsultationService } from \"@/apps/ART/services/consultation_service\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport { ObservationService } from \"@/services/observation_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    consultation: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready)  {\n          this.consultation = new ConsultationService(this.patientID, this.providerID)\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      await this.consultation.createEncounter();\n      const obs = await this.resolveObs(computedData)\n      await this.consultation.saveObservationList(obs)\n      this.$router.back()\n    },\n    getFields(): Field[] {\n      return [\n        {\n          id: \"has_hypertension\",\n          helpText: \"Does the patient have hypertension\",\n          type: FieldType.TT_SELECT,\n          options: () => this.yesNoOptions(),\n          validation: (val: any) => Validation.required(val),\n          computedValue: (v: Option) => ObservationService.buildValueCoded(\"Patient has hypertension\", `${v.value}`),\n        },\n        ...generateDateFields(\n          {\n            condition: (f: any) => f.has_hypertension.value === 'Yes',\n            id: \"hypertension_diagnosis\",\n            helpText: \"Date the patient was diagnosed with hypertension\",\n            required: true,\n            estimation: {\n              allowUnknown: false\n            },\n            computeValue: (date: string) =>  ObservationService.buildValueDate(\"Hypertension diagnosis date\", date)\n          },\n          ConsultationService.getSessionDate()\n        )\n      ]\n    }\n  }\n})\n","import { render } from \"./hypertension_diagnosis.vue?vue&type=template&id=2396c654&ts=true\"\nimport script from \"./hypertension_diagnosis.vue?vue&type=script&lang=ts\"\nexport * from \"./hypertension_diagnosis.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}