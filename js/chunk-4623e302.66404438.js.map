{"version":3,"sources":["webpack:///./src/views/NewUser.vue?1f76","webpack:///./src/views/NewUser.vue","webpack:///./src/views/NewUser.vue?b037","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","key","formKey","fields","skipSummary","activeField","fieldComponent","onOnIndex","$event","onFinishAction","onFinish","defineComponent","components","HisStandardForm","data","app","App","getActiveApp","activity","presets","programs","userData","isSessionPasswordChange","form","watch","route","query","includes","this","update_password","toUserData","UserService","getCurrentUser","getAvailableApps","getFields","immediate","deep","methods","f","computeValues","create","update","$router","push","hts_provider_code","setUserProperty","HTS_PROVIDER_CODE","value","id","Store","invalidate","$nextTick","e","RecordConflictError","isEmpty","errors","toastWarning","toastDanger","user","createUser","person","updateUser","getProgramName","find","programID","applicationName","mapToOption","listOptions","map","item","label","getAllRoles","filter","r","role","split","other","userObj","names","user_id","given_name","family_name","username","roles","HisDate","toStandardHisDisplayFormat","date_created","deactivated_on","p","editConditionCheck","attributes","toLcase","val","toString","toLowerCase","helpText","type","FieldType","TT_SELECT","condition","isAdmin","validation","Validation","required","unload","options","async","users","getAllUsers","u","config","showKeyboard","TT_TABLE_VIEWER","dynamicHelpText","created","c","table","_this$app","statusRowIndex","columns","deactivateButton","status","name","style","width","fontWeight","color","action","deactivateUser","rows","toastSuccess","activateUser","navButton","targetField","rowBtns","length","join","providerCode","getUserProperty","console","error","hiddenFooterBtns","overrideDefaultFooterBtns","nextBtn","onClick","back","TT_TEXT","computedValue","defaultValue","isName","PersonService","searchGivenName","searchFamilyName","getRoles","proxyID","v","i","defaultComputedOutput","TT_MULTIPLE_SELECT","program","isChecked","validateSeries","hasLengthRangeOf","casing","TT_YES_NO","isRequired","beforeNext","select_user","_this$app2","canEditHtsCodeOnReigster","some","every","Boolean","editHtsCodeInEditMode","values","TT_HIDDEN","_f$username","has_hts_provider_code","userPropertyExists","providerCodeRegisteredWithDHA","test","inputType","verify_password","new_password","__exports__","_resolveDynamicComponent","formType","cancelDestinationPath","onOnFinish","onIndex","TouchScreenForm","emits","props","Function","default","String","Object","formData","computedData","$emit"],"mappings":"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","file":"js/chunk-4623e302.66404438.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    key: _ctx.formKey,\n    fields: _ctx.fields,\n    skipSummary: true,\n    activeField: _ctx.fieldComponent,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    onFinishAction: _ctx.onFinish\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { UserService } from \"@/services/user_service\"\nimport { PersonService } from \"@/services/person_service\"\nimport HisDate from \"@/utils/Date\"\nimport { toastWarning, toastSuccess, toastDanger } from \"@/utils/Alerts\"\nimport { RecordConflictError } from \"@/services/service\";\nimport { isEmpty } from \"lodash\";\nimport { find } from \"lodash\";\nimport Store from \"@/composables/ApiStore\"\nimport App from \"@/apps/app_lib\"\nimport { HTS_PROVIDER_CODE } from \"@/constants\"\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    app: App.getActiveApp(),\n    formKey: 0 as number,\n    fields: [] as Array<Field>,\n    activity: '' as 'edit' | 'add',\n    presets: {} as any,\n    programs: {} as any,\n    userData: {} as any,\n    fieldComponent: '' as string,\n    isSessionPasswordChange: false as boolean,\n    activeField: '' as string,\n    form: {} as Record<string, Option> | Record<string, null>\n  }),\n  watch: {\n    '$route': {\n        async handler(route: any) {\n            if (!route) {\n                return\n            }\n            const { query } = route\n            if (['edit', 'add'].includes(query.activity)) {\n                this.activity = query.activity\n            } else {\n                this.activity = 'add'\n            }\n            /**\n             * Jump straight to update the current user's password\n             */\n            if (query.update_password) {\n                this.userData = this.toUserData(\n                    (await UserService.getCurrentUser())\n                )\n                this.isSessionPasswordChange = true\n                this.activeField = 'new_password'\n                this.fieldComponent = this.activeField\n            }\n            this.programs = UserService.getAvailableApps()\n            this.fields = this.getFields()\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    async onFinish(f: any, computeValues: any) {\n        try {\n            switch(this.activity) {\n                case 'add':\n                    await this.create(computeValues)\n                    this.activity = 'edit'\n                    break;\n                case 'edit':\n                    await this.update(computeValues)\n                    if (this.isSessionPasswordChange) {\n                        this.$router.push('/')\n                    }\n                    break;\n            }\n            if (f.hts_provider_code) {\n                await UserService.setUserProperty(\n                    HTS_PROVIDER_CODE, \n                    f.hts_provider_code.value,\n                    this.userData.id\n                )\n            }\n            Store.invalidate('PROVIDERS')\n            this.activeField = 'user_info'\n            this.$nextTick(() => this.fieldComponent = this.activeField)\n            this.formKey += 1\n        } catch (e) {\n            if (e instanceof RecordConflictError && !isEmpty(e.errors)) {\n                toastWarning(e.errors)\n            } else {\n                toastDanger(`${e}`)\n            }\n        }\n    },\n    async create(data: any) {\n        const { user } = await UserService.createUser(data)\n        if (user) {\n            return this.userData = this.toUserData(user)\n        }\n        throw 'Unable to create new user, Possibly the user already exists or incorrect info was entered'\n    },\n    async update(data: any) {\n        const person = await UserService.updateUser(this.userData.id, data)\n        if (person) {\n            return this.userData = this.toUserData(person)\n        }\n        throw 'Unable to update user, possibly server error or incorrect information entered'\n    },\n    getProgramName(id: number) {\n        const app = find(this.programs, { programID: id })\n        return app ? app.applicationName : ''\n    },\n    mapToOption(listOptions: Array<string>): Array<Option> {\n        return listOptions.map((item: any) => ({ label: item, value: item })) \n    },\n    async getRoles() {\n        return (await UserService.getAllRoles()).filter((r: any) => {\n            try {\n                return !this.userData.role.split(',').includes(r.role)\n            } catch(e) {\n                return true\n            }\n        }).map((r: any) => ({\n            label: r.role,\n            value: r.role,\n            other: r\n        }))\n    },\n    toUserData(userObj: any) {\n        const names = userObj.person.names[0]\n        return {\n            'id': userObj.user_id,\n            'given_name': names.given_name,\n            'family_name': names.family_name,\n            'username': userObj.username,\n            'role': userObj.roles.map((r: any) => r.role),\n            'created': HisDate.toStandardHisDisplayFormat(userObj.date_created),\n            'status': userObj.deactivated_on ? 'Inactive' : 'Active',\n            'programs': userObj.programs.map((p: any) => p['program_id'])\n        }\n    },\n    editConditionCheck(attributes=[] as Array<string>): boolean {\n        if (this.activity === 'edit') {\n            return attributes.includes(this.activeField)\n        }\n        return true\n    },\n    toLcase(val: Option): string {\n        return val.value.toString().toLowerCase()\n    },\n    getFields: function(): Array<Field> {\n        return [\n            {\n                id: 'select_user',\n                helpText: \"Select Username\",\n                type: FieldType.TT_SELECT,\n                condition: () => this.activity === 'edit' \n                    && UserService.isAdmin(),\n                validation: (val: any) => Validation.required(val),\n                unload: ({other}: Option) => this.userData = this.toUserData(other),\n                options: async () => {\n                    const users: any = await UserService.getAllUsers()\n                    return users.map((u: any) => ({\n                        label: u.username,\n                        value: u.user_id,\n                        other: u\n                    }))\n                },\n                config: {\n                    showKeyboard: true\n                }\n            },\n            {\n                id: 'user_info',\n                helpText: 'User information',\n                type: FieldType.TT_TABLE_VIEWER,\n                dynamicHelpText: () => `User: ${this.userData.username} | Added On: ${this.userData.created}`,\n                condition: () => this.activity === 'edit' && UserService.isAdmin(),\n                options: async (f: any, c: any, table: any) => {\n                    const statusRowIndex = 3\n                    const columns = ['Attributes', 'Values', 'Actions']\n                    const deactivateButton = (status: string) => ({\n                        name: status === 'Active' ? 'Deactivate' : 'Activate' ,\n                        type: 'button',\n                        style: { width: '65%', fontWeight: 'bold' },\n                        color: status === 'Active' ? 'danger' : 'success',\n                        action: async () => {\n                            try {\n                                if (status === 'Active') {\n                                    await UserService.deactivateUser(this.userData.id)\n                                    this.userData.status = 'Inactive'\n                                    table.rows[statusRowIndex] = ['Status', 'Inactive', deactivateButton('Inactive')],\n                                    toastSuccess('User has been deactivated', 400)\n                                }\n                                if (status === 'Inactive') {\n                                    await UserService.activateUser(this.userData.id)\n                                    this.userData.status = 'Active'\n                                    table.rows[statusRowIndex] = ['Status', 'Active', deactivateButton('Active')],\n                                    toastSuccess('User has been activated', 400)\n                                }\n                            } catch(e) {\n                                toastWarning(`${e}`)\n                            }\n                        }\n                    })\n                    const navButton = (name: string, targetField: string) => ({ \n                        name, \n                        type: 'button',\n                        color: 'light',\n                        style: {\n                            fontWeight: 'bold',\n                            width: '65%'\n                        },\n                        action: () => {\n                            this.activeField = targetField\n                            this.fieldComponent = this.activeField\n                        }\n                    })\n                    const rowBtns = [navButton('Add/Append Role', 'roles')]\n                    if (this.userData.role.length > 1) {\n                        rowBtns.push(navButton('Remove Role', 'remove_roles'))\n                    }\n                    const rows = [\n                        ['<b>Name</b>', `${this.userData.given_name} ${this.userData.family_name}`, navButton('Edit Name', 'given_name'), ''],\n                        ['<b>Password</b>', '*******', navButton('Change password', 'new_password'), ''],\n                        ['<b>Role</b>', this.userData.role.join('<br/>'), ...rowBtns],\n                        ['<b>Status</b>', this.userData.status,  deactivateButton(this.userData.status), ''],\n                        ['<b>Programs</b>', this.userData.programs.map((p: number) => this.getProgramName(p)).join('<br/>'),\n                            navButton('Edit Program', 'programs'), ''],\n                    ]\n                    if (this.app?.applicationName === 'ITS') {\n                        let providerCode = 'N/A'\n                        try {\n                            providerCode = (await UserService.getUserProperty(HTS_PROVIDER_CODE, this.userData.id))['property_value']\n                        } catch (e) {\n                            console.error(e)\n                        }\n                        rows.push(['<b>Provider Code</b>', providerCode, navButton('Update', 'has_hts_provider_code'), ''])\n                    }\n                    return [{\n                        label: '',\n                        value: '',\n                        other: { columns, rows }\n                    }]\n                },\n                config: {\n                    hiddenFooterBtns: [\n                        'Clear',\n                    ],\n                    overrideDefaultFooterBtns: {\n                        nextBtn: {\n                            name: 'Finish',\n                            onClick: () => this.$router.back()\n                        }\n                    }\n                }\n            },\n            {\n                id: 'given_name',\n                helpText: 'First name',\n                type: FieldType.TT_TEXT,\n                computedValue: (val: Option) => val.value,\n                defaultValue: () => this.userData.given_name,\n                condition: () => this.editConditionCheck(['given_name']) && UserService.isAdmin(),\n                validation: (val: any) => Validation.isName(val),\n                options: async (form: any) => {\n                    if (!form.given_name || form.given_name.value === null) return []\n\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return this.mapToOption(names)\n                }\n            },\n            {\n                id: 'family_name',\n                helpText: \"Last name\",\n                type: FieldType.TT_TEXT,\n                computedValue: (val: Option) => val.value,\n                defaultValue: () => this.userData.family_name,\n                validation: (val: any) => Validation.isName(val),\n                condition: () => this.editConditionCheck(['given_name']) && UserService.isAdmin(),\n                options: async (form: any) => {\n                    if (!form.family_name || form.family_name.value === null) return []\n\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return this.mapToOption(names)\n                }\n            },\n            {\n                id: 'roles',\n                helpText: \"Role\",\n                type: FieldType.TT_SELECT,\n                computedValue: (val: Option) => [val.value],\n                condition: () => this.editConditionCheck(['roles']) && UserService.isAdmin(),\n                validation: (val: any) => Validation.required(val),\n                options: () => this.getRoles(),\n                config: {\n                    showKeyboard: true\n                }\n            },\n            {\n                id: 'remove_roles',\n                helpText: \"Remove Roles\",\n                proxyID: 'roles',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: () => this.editConditionCheck(['remove_roles']) && UserService.isAdmin() && this.activity === 'edit',\n                computedValue: (v: Option) => this.userData.role.filter((i: string) => i != v.label),\n                options: () => this.mapToOption(this.userData.role),\n                config: {\n                    showKeyboard: true\n                }\n            },\n            {\n                id: 'must_append_roles',\n                helpText: \"Would you like to append role?\",\n                type: FieldType.TT_SELECT,\n                computedValue: (val: Option) => val.label === 'Yes' ? true : false,\n                condition: () => this.activity === 'edit' \n                    && this.editConditionCheck(['roles']) \n                    && UserService.isAdmin(),\n                defaultComputedOutput: () => false,\n                validation: (val: any) => Validation.required(val),\n                    options: () => [\n                    {\n                        label: 'Yes', value: 'true'\n                    },\n                    {\n                        label: 'No', value: 'false'\n                    }\n                ]\n            },\n            {\n                id: 'programs',\n                helpText: \"Select Apps\",\n                type: FieldType.TT_MULTIPLE_SELECT,\n                condition: () => UserService.isAdmin() && this.editConditionCheck(['programs']),\n                validation: (val: Option[]) => Validation.required(val),\n                computedValue: (val: Option[]) => val.map((i: Option) => i.value),\n                options: () => {\n                    return this.programs.map((program: any) => {\n                        let isChecked = false\n                        if (this.activity === 'edit') {\n                            isChecked = this.userData.programs.includes(program.programID)\n                        }\n                        return {\n                            label: program.applicationName,\n                            value: program.programID,\n                            isChecked: isChecked\n                        }\n                    })\n                },\n            },\n            {\n                id: 'username',\n                helpText: \"Username\",\n                type: FieldType.TT_TEXT,\n                condition: () => this.editConditionCheck(['nothing to see here']) \n                    && UserService.isAdmin(),\n                computedValue: (val: Option) => this.toLcase(val),\n                validation: (val: any) => Validation.validateSeries([\n                    () => Validation.required(val),\n                    () => Validation.hasLengthRangeOf(val, 4, 15)\n                ]),\n                config: {\n                    casing: 'lowercase'\n                }\n            },\n            {\n                id: 'has_hts_provider_code',\n                helpText: 'HTS Provider code',\n                type: FieldType.TT_YES_NO,\n                isRequired: () => true,\n                beforeNext: async (v: string, f: any) => {\n                    if (v === 'No') {\n                        const username = f.select_user != null\n                            ? f.select_user.label\n                            : f.username != null \n                            ? f.username.value\n                            : '01010'\n                        await toastWarning('HTS provider code assigned is '  + username)\n                    }\n                    return true\n                },\n                condition: (f: any) => {\n                    const canEditHtsCodeOnReigster = [\n                        this.activity === 'add',\n                        f.programs.some((p: Option) => p.label === 'ITS'),\n                        f.roles.label === 'Provider'\n                    ].every(Boolean)\n                    const editHtsCodeInEditMode = [\n                        this.activity === 'edit',\n                        UserService.isAdmin(),\n                        this.app?.applicationName === 'ITS',\n                        this.editConditionCheck(['has_hts_provider_code'])\n                    ].every(Boolean)\n                    return canEditHtsCodeOnReigster || editHtsCodeInEditMode\n                },\n                options: () => {\n                    return [\n                        {\n                            label: \"Does user have HTS Code?\",\n                            values: [\n                                { label: \"Yes\", value: \"Yes\" },\n                                { label: \"No\", value: \"No\" }\n                            ]\n                        }\n                    ] as any\n                }\n            },\n            {\n                id: \"username_provider_code\",\n                proxyID: 'hts_provider_code',\n                helpText: \"HTS Provider code\",\n                type: FieldType.TT_HIDDEN,\n                computedValue: (v: Option) => v.value,\n                defaultValue: (f: any) => {\n                    const value = f.username?.value || f.select_user.label\n                    return { label: value, value }\n                },\n                condition: (f: any) => f.has_hts_provider_code === 'No' && \n                    this.editConditionCheck(['has_hts_provider_code'])\n            },\n            {\n                id: \"official_hts_provider_code\",\n                proxyID: 'hts_provider_code',\n                helpText: 'HTS Provider code',\n                type: FieldType.TT_TEXT,\n                isRequired: () => true,\n                computedValue: (v: Option) => v.value,\n                condition: (f: any) => f.has_hts_provider_code === 'Yes' &&\n                    this.editConditionCheck(['has_hts_provider_code']),\n                beforeNext: async(v: Option) => {\n                    if ((await UserService.userPropertyExists(HTS_PROVIDER_CODE, `${v.value}`))) {\n                        toastWarning('Provider code already registered!')\n                        return false\n                    }\n                    if (!(await UserService.providerCodeRegisteredWithDHA(`${v.value}`))) {\n                        toastWarning('Provider code is not registered with DHA')\n                        return false\n                    }\n                    return true\n                },\n                validation: (v: Option) => {\n                    if (/^[a-zA-Z0-9]{4}$/i.test(`${v.value}`)) {\n                        return null\n                    }\n                    return ['Invalid provider code format'] \n                }\n            },\n            {\n                id: 'new_password',\n                proxyID: \"password\",\n                helpText: \"New Password\",\n                type: FieldType.TT_TEXT,\n                computedValue: (val: Option) => this.toLcase(val),\n                condition: () => this.editConditionCheck(['new_password']),\n                validation: (val: any) => Validation.validateSeries([\n                    () => Validation.required(val),\n                    () => Validation.hasLengthRangeOf(val, 4, 15)\n                ]),\n                config: {\n                    inputType: 'password'\n                }\n            },\n            {\n                id: 'verify_password',\n                proxyID: \"password\",\n                helpText: \"Confirm Password\",\n                type: FieldType.TT_TEXT,\n                computedValue: (val: Option) => this.toLcase(val),\n                condition: () => this.editConditionCheck(['new_password']),\n                validation: (val: any, f: any) => Validation.validateSeries([\n                    () => Validation.required(val),\n                    () => {\n                        if (this.toLcase(f.verify_password) != this.toLcase(f.new_password))\n                            return ['New password does not match current password']\n                    }\n                ]),\n                config: {\n                    inputType: 'password'\n                }\n            }\n        ]\n    }\n  }\n})\n","import { render } from \"./NewUser.vue?vue&type=template&id=3ed4f710&ts=true\"\nimport script from \"./NewUser.vue?vue&type=script&lang=ts\"\nexport * from \"./NewUser.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}