{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/apps/HTS/views/encounters/HtsTesting.vue?6bd7","webpack:///./src/apps/HTS/services/hts_testing_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsTesting.vue","webpack:///./src/apps/HTS/views/encounters/HtsTesting.vue?f681","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","isEnrolledInProgam","formLabel","ready","watch","handler","route","params","patient_id","this","toUpperCase","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","nextTask","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","onFinishAction","onFinish","cancelDestinationPath","_","HtsTestingService","AppEncounterService","constructor","super","getRecentAccesspoint","getFirstValueCoded","IonPage","mixins","EncounterMixinVue","service","accessPointTypeField","facilityAccessPointField","communityAccessPoints","testsOfferedField","lastHivTestResultField","lastHivTestTypeField","lastTimeHIVTestedField","arvHistoryField","drugTakenField","mostRecentDrugHiddenField","timeSinceDrugTaken","clientRiskCategoryField","testResultsField","hivTestKitDetailsField","hivResultHiddenField","hivPatientCategoryField","f","computedData","createEncounter","saveObservationList","PatientProgramService","enrollProgram","invalidate","inclonclusiveResultDialog","testOffered","formData","test","tests_offered","some","result","test_results","id","helpText","type","FieldType","TT_SELECT","isRequired","finalComputedValue","buildValueCoded","TT_SELECT_GRID","accesspoint_type","buildValueText","config","columnsPerRow","TT_MULTIPLE_SELECT","buildOptionsOnce","includes","last_hiv_result","defaultOutput","defaultComputedOutput","TT_AGE_INPUT","beforeNext","monthsAgoInt","validation","timeUnit","Date","date","getAge","buildObs","excludeUnits","TT_MULTIPLE_YES_NO","concept","last_taken_drugs","TT_HIDDEN","defaultValue","fdata","value_text","value_datetime","kitInformationUpdated","SESSION_KIT_NAMES","SESSION_KIT_ID","kitHistory","JSON","parse","sessionStorage","getItem","kitOptions","getSessionKitValue","testName","attr","TT_INPUT_ARRAY","t","columns","someIncomplete","count","x","incomplete","alertConfirmation","mem","c","forEach","l","setItem","stringify","parentObs","childObs","child","testResults","kitNameOption","kitName","clearable","usefontBold","kitLotNoOption","buildValueNumber","onclick","val","keyboard","TT_TEXT","kitExpiryDateOption","buildValueDate","TT_FULL_DATE","toDate","enteredKits","test_kit","existingOption","shortName","isStatus","summaryMapValue","resultMap","isInconclusive","isPositive","onValueUpdate","results","testOneIsPositive","testTwoIsPositive","disable","disabled","r","category","undefined","accessPoint","resultModel","prevResults","defaultOption","existingResult","appearInSummary","onload","hasLastTestPerfomed","last_hiv_perfomed","hasLastHivResult","testOneResult","testTwoResult","testThreeResult","testOneRepeat","isCommunity","lastHIVResult","lastTestPerfomed","inconclusiveNegativeForPreviousPositiveProfessional","Negative","Positive","Inconclusive","keys","finalResult","key","every","Boolean","hivStatusCategory","hiv_result","newHivStatus","clientAge","lastHivResult","lastTypeOfTestPerformed","lastTimeHivTestedInMonths","last_time_hiv_tested","hivCategoryRef","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","String","required","$emit","isCondition","ignored","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info"],"mappings":"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","file":"js/chunk-155b4dd8.da1880fd.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Testing\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsTestingService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 197, providerID)\n    }\n\n    getRecentAccesspoint() {\n        return this.getFirstValueCoded('HTS Access Type')\n    }\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport { ObsValue } from \"@/services/observation_service\";\nimport { HtsTestingService } from \"@/apps/HTS/services/hts_testing_service\";\nimport { alertConfirmation } from \"@/utils/Alerts\";\nimport { infoActionSheet } from \"@/utils/ActionSheets\";\nimport { PatientProgramService } from \"@/services/patient_program_service\";\nimport Store from \"@/composables/ApiStore\";\nimport keyboard from \"@/utils/PopupKeyboard\";\nimport { find, isEmpty } from \"lodash\";\nimport { toDate } from \"@/utils/Strs\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsTestingService,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsTestingService(this.patientID, this.providerID);\n          this.fields = [\n            this.accessPointTypeField(),\n            this.facilityAccessPointField(),\n            this.communityAccessPoints(),\n            this.testsOfferedField(),\n            this.lastHivTestResultField(),\n            this.lastHivTestTypeField(),\n            this.lastTimeHIVTestedField(),\n            this.arvHistoryField(),\n            this.drugTakenField(),\n            this.mostRecentDrugHiddenField(),\n            this.timeSinceDrugTaken(),\n            this.clientRiskCategoryField(),\n            this.testResultsField(),\n            this.hivTestKitDetailsField(),\n            this.hivResultHiddenField(),\n            this.hivPatientCategoryField()\n          ];\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      const obs = await this.resolveObs(computedData);\n      await this.service.createEncounter();\n      await this.service.saveObservationList(obs as ObsValue[]);\n      if (!this.facts.isEnrolledInProgam) {\n        await new PatientProgramService(this.patientID).enrollProgram();\n        Store.invalidate(\"PATIENT_PROGRAM\");\n      }\n      this.nextTask();\n    },\n    inclonclusiveResultDialog() {\n      return infoActionSheet(\n        \"Reschedule test\",\n        \"\",\n        \"HIV result is inconclusive, schedule another test in 2 weeks\",\n        [{ name: \"Ok\", slot: \"start\" }]\n      );\n    },\n    testOffered(formData: any, test: string) {\n      return formData.tests_offered.some((v: Option) => v.value === test);\n    },\n    result(formData: any, test: string) {\n      return find(formData.test_results, { other: { id: test } }) || {}\n    },\n    accessPointTypeField(): Field {\n      return {\n        id: \"accesspoint_type\",\n        helpText: \"Access point type\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\"HTS Access Type\", v.value),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\"Health Facility\", \"Community\"]);\n        },\n      };\n    },\n    facilityAccessPointField(): Field {\n      return {\n        id: \"facility_access_points\",\n        helpText: \"Health facility access points\",\n        type: FieldType.TT_SELECT_GRID,\n        isRequired: () => true,\n        condition: (f: any) => f.accesspoint_type.value === \"Health Facility\",\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              `${v.value}`\n            ),\n          };\n        },\n        config: {\n          columnsPerRow: 2\n        },\n        options: () => {\n          return this.toConditionalOptions([\n            [\"VCT\"],\n            [\"ANC First Visit\"],\n            [\"Inpatient\"],\n            [\"STI\"],\n            [\"PMTCT FUP\"],\n            [\"Index\"],\n            [\"Paediatric\"],\n            [\"VMMC\"],\n            [\"Malnutrition\"],\n            [\"TB\"],\n            [\"OPD\"],\n            [\"Other PITC\"],\n            [\"SNS\"],\n          ]);\n        },\n      };\n    },\n    communityAccessPoints(): Field {\n      return {\n        id: \"community_access_points\",\n        helpText: \"Community access points\",\n        type: FieldType.TT_SELECT,\n        condition: (f: any) => f.accesspoint_type.value === \"Community\",\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              `${v.value}`\n            ),\n          };\n        },\n        options: () => {\n          return this.toConditionalOptions([\n            [\"VCT\"],\n            [\"Index\"],\n            [\"VMMC\"],\n            [\"Other\"],\n            [\"SNS\"],\n            [\"Mobile\"],\n          ]);\n        },\n      };\n    },\n    testsOfferedField(): Field {\n      return {\n        id: \"tests_offered\",\n        helpText: \"Tests to be offered today?\",\n        type: FieldType.TT_MULTIPLE_SELECT,\n        isRequired: () => true,\n        options: (f: any) => {\n          return this.mapStrToOptions([\n            'HIV',\n            'Syphilis',\n            'Hepatitis B'\n          ])\n        },\n        config: {\n          buildOptionsOnce: true\n        },\n      };\n    },\n    lastHivTestResultField(): Field {\n      return {\n        id: \"last_hiv_result\",\n        helpText: \"Last HIV Test\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Previous HIV Test Results\",\n              v.value\n            ),\n          };\n        },\n        options: () => {\n          return this.toConditionalOptions([\n            [\"Never Tested\"],\n            [\"Negative\"],\n            [\"Positive\"],\n            [\"Exposed infant\"],\n            [\"Invalid or inconclusive\"],\n          ]);\n        },\n      };\n    },\n    lastHivTestTypeField(): Field {\n      return {\n        id: \"last_hiv_perfomed\",\n        helpText: \"Last HIV test performed\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) =>\n          ![\"Never Tested\", \"Exposed infant\"].includes(f.last_hiv_result.value),\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Previous HIV test done\",\n              v.value\n            ),\n          };\n        },\n        defaultOutput: (f: any) => {\n          if (/exposed infant/i.test(f.last_hiv_result.value)) {\n            return {\n              label: \"Professional\",\n              value: \"Professional\",\n            };\n          }\n          return undefined;\n        },\n        defaultComputedOutput: (f: any) => {\n          if (/exposed infant/i.test(f.last_hiv_result.value)) {\n            return {\n              obs: this.service.buildValueCoded(\n                \"Previous HIV test done\",\n                \"Professional\"\n              ),\n            };\n          }\n          return undefined;\n        },\n        options: (f: any) => {\n          return this.toConditionalOptions([\n            [\"Self\"],\n            [\n              \"Initial professional\",\n              !/Negative|Inconclusive/i.test(f.last_hiv_result.value),\n            ],\n            [\"Professional\"],\n          ]);\n        },\n      };\n    },\n    lastTimeHIVTestedField(): Field {\n      return {\n        id: \"last_time_hiv_tested\",\n        helpText: \"Time since last HIV test\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_hiv_result.value && f.last_hiv_result.value != \"Never Tested\",\n        isRequired: () => true,\n        beforeNext: async (v: Option, f: any) => {\n          if (v.other.monthsAgoInt >= 12 && !this.testOffered(f, \"HIV\")) {\n            await infoActionSheet(\n              \"Recommendation Alert\",\n              \"\",\n              \"Please consider testing client for HIV\",\n              [\n                {\n                  name: \"Ok\",\n                  slot: \"start\",\n                  color: \"primary\",\n                },\n              ]\n            );\n          }\n          return true;\n        },\n        validation: (v: Option) => {\n          if (parseInt(`${v.other.value}`) <= 0 && !/day/i.test(v.other.timeUnit)) {\n            return [`Enter ${v.other.timeUnit} greater than zero`];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          if (new Date(v.other.date) < new Date(this.patient.getBirthdate())) {\n            return [\n              `${\n                v.label\n              } is greater than client's age of ${this.patient.getAge()} Years`,\n            ];\n          }\n          return null;\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildObs(\"Time of HIV test\", {\n              'value_datetime': v.other.date,\n              'value_text': v.value\n            })\n          }\n        },\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    },\n    arvHistoryField(): Field {\n      return {\n        id: \"last_taken_drugs\",\n        helpText: \"Ever taken the following drugs?\",\n        type: FieldType.TT_MULTIPLE_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v.map((d) =>\n              this.service.buildValueCoded(d.other.concept, d.value)\n            ),\n          };\n        },\n        options: (f: any) => {\n          if (f.last_taken_drugs) return f.last_taken_drugs;\n          return [\n            this.toYesNoOption(\"PrEP or infant NVP\", {\n              concept: \"Taken Prep before\",\n            }),\n            this.toYesNoOption(\"ART\", { concept: \"Taken ARV Before\" }),\n            this.toYesNoOption(\"PEP\", { concept: \"Taken PEP before\" }),\n          ];\n        },\n      };\n    },\n    drugTakenField(): Field {\n      /**\n       * Select Most recent drug from list of drugs\n       */\n      return {\n        id: \"drug_taken\",\n        helpText: \"Most recent drug taken\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) =>\n          f.last_taken_drugs.filter((d: Option) => d.value === \"Yes\").length >\n          1,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Most recent drug taken\",\n              v.value\n            ),\n          };\n        },\n        options: (f: any) => {\n          return f.last_taken_drugs\n            .filter((d: Option) => d.value === \"Yes\")\n            .map((d: Option) => this.toOption(d.label));\n        },\n      };\n    },\n    mostRecentDrugHiddenField(): Field {\n      /**\n       * Automatically determines recent drug if only one drug is Yes\n       */\n      return {\n        id: \"most_recent_drug\",\n        helpText: \"Most recent drug\",\n        type: FieldType.TT_HIDDEN,\n        condition: (f: any) =>\n          f.last_taken_drugs.filter((d: Option) => d.value === \"Yes\").length ===\n          1,\n        defaultValue: (fdata?) => {\n          return find(fdata.last_taken_drugs, { value: \"Yes\" });\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Most recent drug taken\",\n              v.value\n            ),\n          };\n        },\n      };\n    },\n    timeSinceDrugTaken(): Field {\n      return {\n        id: \"time_since_last_drug_taken\",\n        helpText: \"Time since last taken medication\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_taken_drugs.some((d: Option) => d.value === \"Yes\"),\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildObs(\"Time since last taken medication\", {\n              value_text: `${v.value} ago`,\n              value_datetime: v.other.date,\n            }),\n          };\n        },\n        validation: (v: Option) => {\n          if (parseInt(`${v.other.value}`) <= 0 && !/day/i.test(v.other.timeUnit)) {\n            return [`Enter ${v.other.timeUnit} greater than zero`];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          if (new Date(v.other.date) < new Date(this.patient.getBirthdate())) {\n            return [\n              `${\n                v.label\n              } is greater than client's age of ${this.patient.getAge()} Years`,\n            ];\n          }\n          return null;\n        },\n        isRequired: () => true,\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    },\n    clientRiskCategoryField(): Field {\n      return {\n        id: \"client_risk_category\",\n        helpText: \"Client Risk Category\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\"client risk category\", v.value),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\n            \"Low risk\",\n            \"On-going risk\",\n            \"High risk event in last 3 months\",\n            \"Risk assessment not done\",\n          ]);\n        },\n      };\n    },\n    hivTestKitDetailsField(): Field {\n      let kitInformationUpdated = false\n      const SESSION_KIT_NAMES = \"htsProfessionalKitNames\";\n      const SESSION_KIT_ID = \"htsProfessionalKitData\";\n      let kitHistory: any = JSON.parse(\n        sessionStorage.getItem(SESSION_KIT_ID) || \"{}\"\n      );\n      let kitOptions: Option[] | [] = JSON.parse(\n        sessionStorage.getItem(SESSION_KIT_NAMES) || \"[]\"\n      );\n      const getSessionKitValue = (testName: string, attr: string) => {\n        if (kitHistory[testName]) return kitHistory[testName][attr] || \"\";\n        return \"\";\n      };\n      \n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        condition: (f: any) => f.test_results.some((t: Option) => t.value != \"\"),\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 3;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        beforeNext: async () => {\n          if (!kitInformationUpdated && !isEmpty(kitHistory)) {\n            if (!(await alertConfirmation('Are you sure you want to proceed without updating testkits?'))) {\n              return false\n            }\n          }\n          return true\n        },\n        finalComputedValue: (v: Option[]) => {\n          // Cache stuff in session storage taking advantage when creating computed values\n          const mem: any = v.reduce((a: any, c: any) => {\n            if (!a[c.label]) a[c.label] = {};\n            c.other.fields.forEach(\n              (l: Option) => (a[c.label][l.label] = l.value)\n            );\n            return a;\n          }, kitHistory);\n          sessionStorage.setItem(SESSION_KIT_NAMES, JSON.stringify(kitOptions));\n          sessionStorage.setItem(SESSION_KIT_ID, JSON.stringify(mem));\n          return {\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        options: async (f: any) => {\n          const testResults: Option[] = Array.isArray(f.test_results) ? f.test_results : [];\n          const kitNameOption = (kitName: string) => ({\n            label: \"Kit Name\",\n            value: kitName,\n            clearable: false,\n            other: {\n              usefontBold: true,\n              obs: (v: Option) => this.service.buildValueText(\"Kit name\", v.value as string),\n            }\n          });\n          const kitLotNoOption = (d: Option) => ({\n            label: \"Kit Lot No.\",\n            value: getSessionKitValue(d.label, \"Kit Lot No.\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueNumber(\"Kit lot number\", v.value as number),\n              onclick: (val: Option) => {\n                keyboard({\n                  id: 'lot',\n                  helpText: 'Enter Lot Number',\n                  type: FieldType.TT_TEXT,\n                  isRequired: () => true\n                }, \n                (v: Option) => {\n                  val.value = v.value\n                  kitInformationUpdated = true\n                })\n              },\n            },\n          });\n          const kitExpiryDateOption = (d: Option) => ({\n            label: \"Kit Expiry Date\",\n            value: getSessionKitValue(d.label, \"Kit Expiry Date\"),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueDate(\"kit expiry date\", v.value as string),\n              onclick: (val: Option) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(this.service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(this.service.date),\n                        ];\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => {\n                    val.value = v.value\n                    kitInformationUpdated = true\n                  }\n                );\n              },\n            },\n          });\n          const enteredKits = f.test_kit === null ? [] : f.test_kit;\n          return testResults\n            .filter((t) => t.value != \"\")\n            .map((t) => {\n              const existingOption = find(enteredKits, { label: t.label });\n              if (existingOption) return existingOption;\n              return {\n                label: t.label,\n                value: \"\",\n                other: {\n                  fields: [\n                    kitNameOption(t.other.shortName),\n                    kitLotNoOption(t),\n                    kitExpiryDateOption(t)\n                  ]\n                }\n              };\n            });\n        },\n      };\n    },\n    testResultsField(): Field {\n      const isStatus = (l: Option[], test: string, status: string) =>\n        find(l, {\n          value: status,\n          other: { id: test },\n        })\n          ? true\n          : false;\n      return {\n        id: \"test_results\",\n        helpText: \"Test results\",\n        type: FieldType.TT_MULTIPLE_YES_NO,\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => {\n          const resultMap: Record<string, string> = {\n            \"Positive\": \"Reactive\",\n            \"Negative\": \"Non-reactive\"\n          }\n          if (v.value != \"\") {\n            return {\n              label: v.label, \n              value: resultMap[v.value] || v.value\n            } \n          }\n        },\n        beforeNext: async (v: Option[], f: any) => {\n          const isInconclusive = (isStatus(v, \"test_2\", \"Negative\") &&\n              isStatus(v, \"test_1_repeat\", \"Positive\")) ||\n            (isStatus(v, \"test_2\", \"Positive\") &&\n              isStatus(v, \"test_3\", \"Negative\"))\n          if (/inconclusive/i.test(f.last_hiv_result.value) && isInconclusive) {\n            await infoActionSheet(\n              \"Inconclusive Re-Test Result\",\n              \"\",\n              \"Please collect DBS sample.\",\n              [{ name: \"Ok\", slot: \"start\" }]\n            );\n            return true\n          }\n          if (isInconclusive) {\n            await this.inclonclusiveResultDialog();\n            return true\n          }\n          const isPositive = isStatus(v, \"test_1\", \"Positive\") && \n            isStatus(v, \"test_2\", \"Positive\") &&\n            isStatus(v, \"test_3\", \"Positive\")\n          \n          if (isPositive && this.patient.getAge() <= 0) {\n            await infoActionSheet(\n              \"<12 months old all HIV tests reactive\",\n              \"\",\n              \"Please collect DBS sample for EID\",\n              [{ name: \"Ok\", slot: \"start\" }]\n            );\n          }\n          return true;\n        },\n        onValueUpdate: (l: Option[], v: any, f: any) => {\n          // Manage Three test algorithm for HIV results\n          if (\n            this.testOffered(f, \"HIV\") &&\n            f.accesspoint_type.value === \"Health Facility\"\n          ) {\n            const results: Option[] = [...l];\n            const testOneIsPositive = isStatus(results, \"test_1\", \"Positive\");\n            const testTwoIsPositive = isStatus(results, \"test_2\", \"Positive\");\n            const disable = (test: string, disabled: boolean) => {\n              results.forEach((r) => {\n                if (r.other.id === test) {\n                  r.disabled = disabled;\n                  if (disabled) r.value = \"\";\n                }\n              });\n            };\n            if (testOneIsPositive) {\n              disable(\"test_2\", false);\n            } else {\n              disable(\"test_2\", true);\n              disable(\"test_3\", true);\n              disable(\"test_1_repeat\", true);\n              return results;\n            }\n            if (testOneIsPositive && testTwoIsPositive) {\n              disable(\"test_3\", false);\n              disable(\"test_1_repeat\", true);\n              return results;\n            }\n            if (\n              testOneIsPositive &&\n              !testTwoIsPositive &&\n              l.some((d) => d.other.id === \"test_2\" && d.value != \"\")\n            ) {\n              disable(\"test_1_repeat\", false);\n              disable(\"test_3\", true);\n            }\n            return results;\n          }\n          return l;\n        },\n        validation: (v: Option[]) => {\n          if (v.some((d) => d.value === \"\" && !d.disabled)) {\n            return [\"Result entry incomplete!\"];\n          }\n          return null;\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v\n              .filter((d) => d.value && typeof d.other.obs === \"function\")\n              .map((d) => d.other.obs(d)),\n          };\n        },\n        condition: (f: any) => f.tests_offered.length,\n        options: (f: any) => {\n          const option = (params = {} as any) => {\n            return {\n              label: params.name,\n              value: \"\",\n              disabled:\n                typeof params?.disabled === \"boolean\" ? params.disabled : false,\n              other: {\n                id: params?.id || \"\",\n                concept: params?.concept || \"\",\n                shortName: params?.shortName || \"\",\n                category: params?.category || \"\",\n                obs: typeof params?.obs === \"function\" ? params.obs : undefined,\n                accessPoint: params?.accessPoint || \"*\",\n                values: [\n                  { label: \"Reactive\", value: \"Positive\" }, \n                  { label: \"Non-reactive\", value: \"Negative\" }\n                ]\n              }\n            }\n          }\n          const resultModel: Option[] = [\n            option({\n              id: \"test_1\",\n              name: \"HIV Test 1 (Determine)\",\n              category: \"HIV\",\n              shortName: \"Determine\",\n              concept: \"Test 1\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: \"test_2\",\n              name: \"HIV Test 2 (Unigold)\",\n              category: \"HIV\",\n              disabled: true,\n              accessPoint: \"Health Facility\",\n              shortName: \"Unigold\",\n              concept: \"Test 2\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: \"test_1_repeat\",\n              name: \"HIV Test 1 (Determine) Repeat\",\n              category: \"HIV\",\n              disabled: true,\n              shortName: \"Determine (Repeat)\",\n              accessPoint: \"Health Facility\",\n              concept: \"Immediate Repeat Test 1 Result\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: \"test_3\",\n              name: \"HIV Test 3 (Bioline)\",\n              category: \"HIV\",\n              disabled: true,\n              shortName: \"Bioline\",\n              accessPoint: \"Health Facility\",\n              concept: \"Test 3\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              name: \"Syphilis Test Result\",\n              category: \"Syphilis\",\n              shortName: \"Syphilis\",\n              concept: \"Syphilis Test Result\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              name: \"Hepatitis B Test Result\",\n              category: \"Hepatitis B\",\n              shortName: \"Hepatitis B\",\n              concept: \"Hepatitis B Test Result\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n          ];\n          const accessPoint = f.accesspoint_type.value;\n          const prevResults = Array.isArray(f.test_results)\n            ? f.test_results\n            : [];\n          // Merge previous entered results to default result model\n          const results: Option[] = resultModel.reduce(\n            (all: any, defaultOption: Option) => {\n              const existingResult = find(prevResults, {\n                label: defaultOption.label,\n              });\n              if (existingResult) {\n                if (\n                  existingResult.other.accessPoint != \"*\" &&\n                  existingResult.other.accessPoint != accessPoint\n                ) {\n                  existingResult.value = \"\";\n                }\n                all.push(existingResult);\n              } else {\n                all.push(defaultOption);\n              }\n              return all;\n            },\n            [] as Option[]\n          );\n          // Filter options by selected tests offered and access point field values\n          return f.tests_offered.reduce((all: Option[], c: Option) => {\n            const options: Option[] = results.filter(\n              (r: Option) =>\n                r.other.category === c.value &&\n                (r.other.accessPoint === accessPoint ||\n                  r.other.accessPoint === \"*\")\n            );\n            return options.length ? all.concat(options) : all;\n          }, []);\n        },\n      };\n    },\n    hivResultHiddenField(): Field {\n      let result = \"\";\n      return {\n        id: \"hiv_result\",\n        helpText: \"HIV Result\",\n        type: FieldType.TT_HIDDEN,\n        appearInSummary: () => false,\n        condition: (f: any) => this.testOffered(f, \"HIV\"),\n        onload: (f: any) => {\n          let hasLastTestPerfomed = f.last_hiv_perfomed != null;\n          let hasLastHivResult = f.last_hiv_result != null;\n          let testOneResult = \"\";\n          let testTwoResult = \"\";\n          let testThreeResult = \"\";\n          let testOneRepeat = \"\";\n          const testResults = f.test_results != null ? f.test_results : [];\n          const isCommunity = f.accesspoint_type.value === \"Community\";\n          const lastHIVResult = () => f.last_hiv_result?.value;\n          const lastTestPerfomed = () => f.last_hiv_perfomed?.value;\n          testResults.forEach((r: Option) => {\n            switch (r.other.id) {\n              case \"test_1\":\n                testOneResult = r.value as string;\n                break;\n              case \"test_2\":\n                testTwoResult = r.value as string;\n                break;\n              case \"test_3\":\n                testThreeResult = r.value as string;\n                break;\n              case \"test_1_repeat\":\n                testOneRepeat = r.value as string;\n                break;\n            }\n          });\n          const inconclusiveNegativeForPreviousPositiveProfessional = () =>\n            hasLastHivResult &&\n            hasLastTestPerfomed &&\n            lastHIVResult() === \"Positive\" &&\n            lastTestPerfomed() === \"Professional\" &&\n            (testOneResult === \"Negative\" ||\n              testTwoResult === \"Negative\" ||\n              testThreeResult === \"Negative\");\n          const results: any = {\n            Negative: () => [\n              !inconclusiveNegativeForPreviousPositiveProfessional(),\n              testOneResult === \"Negative\" ||\n                testTwoResult === \"Negative\" ||\n                testThreeResult === \"Negative\" ||\n                testOneRepeat === \"Negative\",\n            ],\n            Positive: () => [!isCommunity, testThreeResult === \"Positive\"],\n            Inconclusive: () => [\n              !isCommunity,\n              inconclusiveNegativeForPreviousPositiveProfessional() ||\n                (testTwoResult === \"Negative\" &&\n                  testOneRepeat === \"Positive\") ||\n                (testTwoResult === \"Positive\" &&\n                  testThreeResult === \"Negative\"),\n            ],\n            \"Refer client to HIV Clinic\": () => [\n              isCommunity,\n              testOneResult === \"Positive\",\n            ],\n          };\n          result = Object.keys(results).reduce((finalResult: any, key: any) => {\n            if (results[key]().every(Boolean)) return key;\n            return finalResult;\n          }, \"Not indicated\");\n        },\n        defaultValue: () => {\n          if (result) return this.toOption(result);\n        },\n        finalComputedValue: () => {\n          if (result) {\n            return {\n              obs: this.service.buildValueCoded(\"HIV status\", result),\n            };\n          }\n        },\n      };\n    },\n    hivPatientCategoryField(): Field {\n      let hivStatusCategory = \"N/A\";\n      return {\n        id: \"patient_category\",\n        helpText: \"Result given to client\",\n        type: FieldType.TT_HIDDEN,\n        onload: (f: any) => {\n          if (!f.hiv_result) return;\n          const newHivStatus = f.hiv_result.value;\n          const clientAge = this.patient.getAge();\n          const lastHivResult = f.last_hiv_result.value;\n          const lastTypeOfTestPerformed =\n            f.last_hiv_perfomed != null ? f.last_hiv_perfomed.value : \"\";\n          const lastTimeHivTestedInMonths =\n            f.last_time_hiv_tested != null\n              ? f.last_time_hiv_tested.other.monthsAgoInt\n              : -1;\n\n          const hivCategoryRef: Record<string, boolean[]> = {\n            \"New exposed infant\": [\n              clientAge <= 0,\n              newHivStatus === \"Positive\",\n              /exposed|inconclusive|negative/i.test(lastHivResult) ||\n                (lastHivResult === \"Positive\" &&\n                  /initial professional|self/i.test(lastTypeOfTestPerformed)),\n            ],\n            \"New Positive\": [\n              newHivStatus === \"Positive\",\n              /never tested|negative|exposed|inconclusive/i.test(\n                lastHivResult\n              ) ||\n                (lastHivResult === \"Positive\" &&\n                  /initial professional|self/i.test(lastTypeOfTestPerformed) &&\n                  lastTimeHivTestedInMonths <= 12),\n            ],\n            \"Confirmatory Positive\": [\n              newHivStatus === \"Positive\",\n              lastHivResult === \"Positive\",\n              lastTypeOfTestPerformed === \"Professional\",\n              lastTimeHivTestedInMonths <= 12,\n            ],\n            \"Confirmatory Inconclusive\": [\n              lastTypeOfTestPerformed === \"Professional\",\n              lastTimeHivTestedInMonths <= 12,\n              newHivStatus === \"Inconclusive\",\n            ],\n            \"New Negative\": [newHivStatus === \"Negative\"],\n            \"New Inconclusive\": [\n              newHivStatus === \"Inconclusive\",\n              (/self/i.test(lastTypeOfTestPerformed) && /invalid/i.test(lastHivResult)) ||\n              /never tested|negative|exposed infant/i.test(lastHivResult) ||\n                (lastHivResult === \"Positive\" &&\n                  /self|initial professional/i.test(lastTypeOfTestPerformed)),\n            ],\n          };\n          hivStatusCategory = Object.keys(hivCategoryRef).reduce(\n            (status: string, key: string) =>\n              hivCategoryRef[key].every(Boolean) ? key : status,\n            \"N/A\"\n          );\n        },\n        defaultValue: () => {\n          if (hivStatusCategory != \"N/A\")\n            return this.toOption(hivStatusCategory);\n        },\n        finalComputedValue: () => {\n          if (hivStatusCategory != \"N/A\") {\n            return {\n              obs: this.service.buildValueCoded(\"HIV group\", hivStatusCategory),\n            };\n          }\n        },\n        condition: (f: any) => f.hiv_result.value,\n      };\n    },\n  },\n});\n","import { render } from \"./HtsTesting.vue?vue&type=template&id=184dd333&ts=true\"\nimport script from \"./HtsTesting.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsTesting.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}