{"version":3,"sources":["webpack:///./src/views/LabResults.vue?3abf","webpack:///./src/services/patient_lab_result_service.ts","webpack:///./src/views/LabResults.vue","webpack:///./src/views/LabResults.vue?cee8","webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","key","hisFormKey","fields","activeField","fieldComponent","skipSummary","onOnIndex","$event","onOnFinish","onFinish","PatientLabResultService","AppEncounterService","constructor","patientId","super","this","patientID","testTypeID","resultDate","testID","createLabResult","measures","postJson","encounterID","date","getTestID","getTestTypeID","setTestTypeID","test","setResultDate","setTestID","getTestsWithoutResults","OrderService","getOrders","status","getTestIndicators","getJson","defineComponent","components","HisStandardForm","data","labResult","patient","selectedTest","testOptions","testIndicators","watch","params","patient_id","initData","getFields","deep","immediate","methods","_","c","Object","values","filter","d","tag","map","value","result_date","createEncounter","Store","invalidate","Math","floor","random","toastSuccess","e","toastDanger","console","error","generateTestIndicatorsFields","reduce","acc","concat","buildTestIndicatorFields","indicatorId","indicatorName","specimen","testId","name","result","modifier","substring","length","isValidVLResult","isOk","alertConfirmation","cancelBtnLabel","confirmBtnLabel","alphaValueIsValid","match","numericValueIsValid","isMalariaResult","id","fieldIndex","condition","f","find","result_indicators","label","every","Boolean","beforeNext","v","validateVLresults","toString","computedValue","type","charAt","parseInt","t","indicator","helpText","FieldType","TT_SELECT","group","appearInSummary","validation","Validation","required","options","TT_TEXT","onValue","toastWarning","config","customKeyboard","orders","i","orderData","testIndex","tests","isEmpty","concept_id","indicators","push","other","accession","accession_number","orderDate","order_date","TT_TABLE_VIEWER","rows","HisDate","toStandardHisDisplayFormat","action","$nextTick","columns","val","overrideDefaultFooterBtns","nextBtn","onClick","$router","back","hiddenFooterBtns","generateDateFields","estimation","allowUnknown","minDate","toStandardHisFormat","maxDate","Service","getSessionDate","computeValue","TT_MULTIPLE_SELECT","__exports__","DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","_resolveDynamicComponent","formType","cancelDestinationPath","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","default","String","formData","computedData","$emit","EstimationFieldType","getYearField","showUnknown","primaryFunctions","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","async","getDefaultDate","form","field","datePart","defaultValue","year","month","day","split","validateMinMax","computed","min","Date","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","StandardValidations","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","ageEstimateRegex","dayjs","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD"],"mappings":"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","file":"js/chunk-021b8aa8.3aeb129f.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    key: _ctx.hisFormKey,\n    fields: _ctx.fields,\n    activeField: _ctx.fieldComponent,\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"fields\", \"activeField\", \"onOnFinish\"]))\n}","import { OrderService } from '@/services/order_service'\nimport { AppEncounterService } from './app_encounter_service';\n\nexport class PatientLabResultService extends AppEncounterService {\n    patientID: number;\n    testTypeID: number;\n    resultDate: string;\n    testID: number;\n    constructor(patientId: number) {\n        super(patientId, 57)\n        this.patientID = patientId\n        this.testTypeID = -1\n        this.resultDate = ''\n        this.testID = -1\n    }\n\n    createLabResult(measures: Array<any>) {\n        return AppEncounterService.postJson(`lab/tests/${this.testID}/results`, {\n            'encounter_id': this.encounterID,\n            date: this.resultDate,\n            measures\n        })\n    }\n\n    getTestID() {\n        return this.testID\n    }\n\n    getTestTypeID() {\n        return this.testTypeID\n    }\n\n    setTestTypeID(test: number) {\n        this.testTypeID = test\n    }\n\n    setResultDate(date: string) {\n        this.resultDate = date\n    }\n\n    setTestID(test: number) {\n        this.testID = test\n    }   \n\n    getTestsWithoutResults() {\n        return OrderService.getOrders(this.patientID, {\n            status: 'drawn'\n        })\n    }\n\n    getTestIndicators() {\n      return OrderService.getJson(\n        `lab/test_result_indicators`, {\n        'test_type_id': this.testTypeID\n      })\n    }\n\n    \n}\n","\nimport { defineComponent } from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { PatientLabResultService } from \"@/services/patient_lab_result_service\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { toastWarning, toastDanger, toastSuccess, alertConfirmation } from \"@/utils/Alerts\"\nimport { find, isEmpty } from 'lodash';\nimport HisDate from \"@/utils/Date\"\nimport { Service } from \"@/services/service\"\nimport { OrderService } from '@/services/order_service';\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        fieldComponent: '' as string,\n        labResult: {} as any,\n        hisFormKey: 0 as number,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        selectedTest: {} as any,\n        testOptions: [] as Array<any>,\n        testIndicators: [] as Array<any>\n    }),\n    watch: {\n        '$route': {\n            async handler({params}: any) {\n                if (params && params.patient_id) {\n                    this.patient = params.patient_id\n                    this.labResult = new PatientLabResultService(this.patient)\n                    await this.initData()\n                    this.fields = this.getFields()\n                }\n            },\n            deep: true,\n            immediate: true\n        }\n    },\n    methods: {\n        async onFinish(_: any, c: any) {\n            try {\n                const measures = Object.values(c)\n                                    .filter((d: any) => d.tag === 'result_indicator' && d.measures)\n                                    .map((d: any) => d.measures)\n                this.labResult.setTestID(this.selectedTest.value)\n                this.labResult.setResultDate(c.result_date)\n                await this.labResult.createEncounter()\n                await this.labResult.createLabResult(measures)\n                Store.invalidate('PATIENT_LAB_ORDERS')\n                this.testOptions = []\n                this.selectedTest = {}\n                this.testIndicators = []\n                await this.initData()\n                this.hisFormKey = Math.floor(Math.random() * 5000)\n                toastSuccess('Lab result saved!')\n            }catch(e) {\n                toastDanger(`${e}`)\n                console.error(e)\n            }\n        },\n        generateTestIndicatorsFields() {\n          return this.testIndicators.reduce((acc: Field[], data: any) => {\n            return acc.concat(this.buildTestIndicatorFields(\n              data.indicatorId,\n              data.indicatorName,\n              data.specimen,\n              data.testId\n            ))\n          }, [] as Field[])\n        },\n        async validateVLresults(name: string, specimen: string, result: string){\n            if (name !== 'HIV viral load') return true\n            const modifier = result.substring(0, 1)\n            const value = result.substring(1, result.length)\n            if(OrderService.isValidVLResult(specimen, modifier, value)) return true\n            const isOk = await alertConfirmation(`Invalid results for ${specimen} HIV viral load`, {\n                cancelBtnLabel: \"Process result\",\n                confirmBtnLabel: \"Re-enter result\"\n            })\n            return !isOk\n        },\n        alphaValueIsValid(value: string) {\n            try {\n                return value.match(/^(>|<|=)(.*)/) ? true : false\n            }catch (e) {\n                return false\n            }\n        },\n        numericValueIsValid(value: string){\n            try {\n                return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n            }catch(e) {\n                return false\n            }\n        },\n        isMalariaResult(name: string) {\n            return name.match(/mrdt|malaria/i) ? true : false\n        },\n        buildTestIndicatorFields(id: number, name: string, specimen: string, test: number): Array<Field> {\n          const fieldIndex = id * test\n            const condition = (f: any) => [\n                this.selectedTest.value === test, \n                find(f.result_indicators, { label: name}) ? true : false\n            ].every(Boolean)\n            const beforeNext = (v: Option) => this.validateVLresults(name, specimen, v.value.toString())\n\n            const computedValue = (v: any, f: any) => {\n                if(v.value === 'Other' && name.match(/HIV viral load/i)) return {}\n                const type = this.isMalariaResult(name) ? 'text' : f[`type_${fieldIndex}`].value\n                const value = this.isMalariaResult(name) ? \"=\" + v.value : v.value.toString()\n                const modifier = value.charAt(0)\n                const result = type === 'numeric' ? parseInt(value.substring(1)) : value.substring(1)\n                const test = f[`result_indicators`].filter((t: any) => t.value === id)[0]\n                return {\n                    tag: 'result_indicator',\n                    measures: {\n                        indicator: {\n                            'concept_id': test.value\n                        },\n                        'value': result,\n                        'value_modifier': modifier,\n                        'value_type': type\n                    },\n                    result,\n                    modifier,\n                    test: test.label\n                }\n            }\n            return [\n                {\n                    id: `type_${fieldIndex}`,\n                    helpText: `Result type (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    condition: (f: any) => condition(f) && !this.isMalariaResult(name),\n                    appearInSummary: () => false,\n                    validation: (v: Option) => Validation.required(v),\n                    options: () => [\n                        {\n                            label: 'Numeric (numbers only)',\n                            value: 'numeric'\n                        },\n                        {\n                            label: 'Alphanumeric(text and numbers)',\n                            value: 'text'\n                        }\n                    ]\n                },\n                {\n                    id: `num_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    computedValue,\n                    beforeNext,\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.numericValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifer and numbers only. i.e =90 / >19 / < 750')\n                            return false\n                        }\n                        return true\n                    },\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'numeric',\n                    config: {\n                        customKeyboard: [\n                            [\n                                ['1', '2', '3'],\n                                ['4', '5', '6', '=', '<', '>'],\n                                ['7', '8', '9', '.'],\n                                ['',  '0', '']\n                            ],\n                            [\n                                [ 'Delete']\n                            ]\n                        ]\n                    }\n                },\n                {\n                    id: `alpha_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.alphaValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifier plus result (for example =LDL)')\n                            return false\n                        }\n                        return true\n                    },\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'text' && !name.match(/HIV viral load/i)\n                },\n                {\n                    id: `VL_alpha_${fieldIndex}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'text' && name.match(/HIV viral load/i),\n                    options: () => [\n                      {\n                        label: 'Collect Another Sample',\n                        value: '=Collect Another Sample'\n                      },\n                      {\n                        label: '<LDL',\n                        value: '<LDL'\n                      },\n                      {\n                        label: '=LDL',\n                        value: '=LDL'\n                      },\n                      {\n                        value: 'Other',\n                        label: 'Other'\n                      }\n                    ]\n                },\n                {\n                    id: `other_VL_alpha_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.alphaValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifier plus result (for example =LDL)')\n                            return false\n                        }\n                        return true\n                    },\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => {\n                      return condition(f) && \n                        f[`type_${fieldIndex}`].value === 'text' && \n                        name.match(/HIV viral load/i)\n                        && f[`VL_alpha_${fieldIndex}`].value === 'Other'\n                    }\n                },\n                {\n                    id: `malaria_result_${fieldIndex}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && this.isMalariaResult(name),\n                    options: () => {\n                        if(name.match(/mrdt/i)) {\n                            return [\n                                {\n                                    label: 'Positive',\n                                    value: 'positive'\n                                },\n                                {\n                                    label: 'Negative',\n                                    value: 'negative'\n                                }\n                            ]\n                        }\n                        return [\n                            {\n                                label: 'Parasites seen',\n                                value: 'parasites seen'\n                            },\n                            {\n                                label: 'No parasites seen',\n                                value: 'no parasites seen'\n                            }\n                        ]\n                    }\n                },\n            ]\n        },\n        async initData() {\n            const orders = await this.labResult.getTestsWithoutResults()\n            for(const i in orders) {\n                const orderData = orders[i]\n                for(const testIndex in orderData.tests) {\n                    const test = orderData.tests[testIndex]\n                    if (!isEmpty(test.result)) {\n                        continue\n                    }\n                    this.labResult.setTestTypeID(test.concept_id)\n                    const indicators = await this.labResult.getTestIndicators()\n                    const testIndicators = indicators.map((i: any) =>({\n                        testId: test.id,\n                        indicatorName: i.name,\n                        indicatorId: i.concept_id,\n                        specimen: orderData.specimen.name,\n                    }))\n                    this.testIndicators = [...this.testIndicators, ...testIndicators]\n                    this.testOptions.push({\n                        label: test.name,\n                        value: test.id,\n                        other: {\n                            accession: orderData.accession_number,\n                            specimen: orderData.specimen.name,\n                            test: test.name,\n                            orderDate: orderData.order_date,\n                            testIndicators\n                        }\n                    })\n                }\n            }\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                  id: 'test_type',\n                  helpText: 'Tests without results',\n                  type: FieldType.TT_TABLE_VIEWER,\n                  options: () => {\n                    const rows = this.testOptions.map((t: Option) => ([\n                        t.other.accession,\n                        t.other.specimen,\n                        t.other.test,\n                        HisDate.toStandardHisDisplayFormat(t.other.orderDate),\n                        {\n                            type: 'button',\n                            name: 'Select',\n                            action: () => {\n                                this.selectedTest = t\n                                this.$nextTick(() => this.fieldComponent = 'year_result_date')\n                            }\n                        }\n                    ]))\n                    return [{\n                        label: '',\n                        value: '',\n                        other: {\n                            rows,\n                            columns:[ 'Acession#', 'Specimen', 'Test', 'Order date']\n                        }\n                    }]\n                  },\n                  validation: (val: Option) => Validation.required(val),\n                  config: {\n                    overrideDefaultFooterBtns: {\n                        nextBtn: {\n                            name: 'Finish',\n                            onClick: () => this.$router.back()\n                        }\n                    },\n                    hiddenFooterBtns: [\n                        'Clear',\n                        'Cancel'\n                    ]\n                  }\n                },\n                ...generateDateFields({\n                    id: 'result_date',\n                    helpText: 'Result',\n                    required: true,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    minDate: () => HisDate.toStandardHisFormat(this.selectedTest.other.orderDate),\n                    maxDate: () => Service.getSessionDate(),\n                    computeValue: (date: string) => date\n                }),\n                {\n                    id: `result_indicators`,\n                    helpText: `Select test result indicators`,\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (v: Option) => Validation.required(v),\n                    options: () => {                       \n                        return this.selectedTest\n                                .other\n                                .testIndicators\n                                .map((i: any) => ({\n                                    label: i.indicatorName,\n                                    value: i.indicatorId\n                                }))\n                    },\n                },\n                ...this.generateTestIndicatorsFields(),\n                {\n                    id: 'entry_confirmation',\n                    helpText: 'Confirm entry',\n                    type: FieldType.TT_TABLE_VIEWER,\n                    options: (_: any, c: any) => {\n                        const rows = Object.values(c)\n                                           .filter((d: any) => \n                                                typeof d === 'object'\n                                                && d != null\n                                                && d.tag === 'result_indicator'\n                                            )\n                                           .map((d: any) => ([d.test, d.modifier, d.result ]))\n                        return [{\n                            label: '',\n                            value: '',\n                            other: {\n                                rows,\n                                columns:[ 'Test', 'Modifier', 'Result']\n                            }\n                        }]\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./LabResults.vue?vue&type=template&id=1dcfb960&ts=true\"\nimport script from \"./LabResults.vue?vue&type=script&lang=ts\"\nexport * from \"./LabResults.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])"],"sourceRoot":""}