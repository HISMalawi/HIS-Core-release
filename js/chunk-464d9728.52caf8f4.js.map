{"version":3,"sources":["webpack:///./src/apps/HTS/services/hts_items_given.ts","webpack:///./src/apps/HTS/views/encounters/HtsItemsGivenToClient.vue?49f7","webpack:///./src/apps/HTS/views/encounters/HtsItemsGivenToClient.vue","webpack:///./src/apps/HTS/views/encounters/HtsItemsGivenToClient.vue?8616","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/HTS/composables/testKits.ts"],"names":["HtsItemsGivenService","AppEncounterService","constructor","patientID","providerID","super","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","patientDashboardUrl","_","defineComponent","components","IonPage","HisStandardForm","setup","ref","service","visitID","htsClient","getEncounter","saveEncounter","StartHtsEncounter","onInitVisit","value","itemsGivenToClientField","itemsGivenHiddenField","selfTestsGivenToClientField","hivTestKitDetailsField","computedData","encounterName","encounterTypeID","async","obs","concept","ObservationService","getFirstValueCoded","getSelfKitCount","f","_find","items_given_to_client","Array","isArray","find","label","id","helpText","type","FieldType","TT_ADHERENCE_INPUT","isRequired","appearInSummary","beforeNext","v","every","d","parseInt","alertConfirmation","validation","maxSelfKits","maxMaleCondoms","maxFemaleCondoms","maxFRS","some","test","toLowerCase","options","isEmpty","items_given_to_client_selection","config","noFloat","titles","TT_HIDDEN","summaryMapValue","defaultValue","filter","finalComputedValue","map","buildValueNumber","buildValueCoded","initKits","getLotNo","getExpiryDate","TestKit","TT_INPUT_ARRAY","columns","init","_v$other","other","incomplete","x","condition","KitProp","HIV_SELF_KIT","data","parentObs","childObs","l","child","Promise","all","defaultOutput","from","length","buildValueText","buildValueDate","test_kit","kitNameOption","onclick","val","r","index","t","listData","keyboard","TT_TEXT","forEach","i","kitLotNoOption","kitExpiryDateOption","TT_FULL_DATE","Date","date","toDate","monthsFromNow","dayjs","diff","kits","generateRows","count","slice","_el$other","el","estimate","someIncomplete","broadcast","rows","channel","newValue","oldValue","col","_col$other","broadcastlistener","update","disabled","userOptionField","JSON","stringify","testingEncounter","HIVStatus","hiv_result","push","selectionList","selection","title","preset","size","genderOptionField","gender","ageOptionField","age","_d$other","buildNumericEstimate","numericKeypad","isEstimate","toastWarning","toggleButton","strictNumbers","approachOptionField","resultOptionField","self_test_kits","__exports__","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","name","TouchScreenForm","emits","props","Function","Boolean","String","Object","required","methods","formData","this","$emit","getUserProp","setUserProp","UserProp","getSelectedTests","req","split","prop","trim","e","console","error","defaultKits","kitName","UNIGOLD","lotNo","expiryDate","testGroup","visible","userProp","DETERMINE","BIOLINE","SYPHILIS","HEPATITIS","selectedKits","TEST_KIT_USER_PROPERTY","prevKits","parse","kit","includes","k","Service","getSessionDate","saveKits"],"mappings":"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","file":"js/chunk-464d9728.52caf8f4.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsItemsGivenService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 196, providerID)\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Items Given\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.patientDashboardUrl()\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent, ref } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { HtsItemsGivenService } from \"../../services/hts_items_given\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport keyboard, { numericKeypad, selectionList } from \"@/utils/PopupKeyboard\";\nimport { find, isEmpty } from \"lodash\";\nimport { alertConfirmation, toastWarning } from \"@/utils/Alerts\";\nimport { toDate } from \"@/utils/Strs\";\nimport dayjs from \"dayjs\";\nimport { ObservationService } from '@/services/observation_service';\nimport { TestKit, KitProp } from \"../../composables/testKits\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { StartHtsEncounter } from \"@/apps/HTS/composables/HtsFormEncounter\";\n\nexport default defineComponent({\n  components: { IonPage, HisStandardForm },\n  setup() {\n    const fields = ref<Field[]>([])\n    const service = new HtsItemsGivenService(-1);\n    const {\n      visitID,\n      htsClient,\n      getEncounter,\n      saveEncounter,\n      patientDashboardUrl\n    } = StartHtsEncounter({\n      onInitVisit: () => {\n        fields.value = [\n          itemsGivenToClientField(),\n          itemsGivenHiddenField(),\n          selfTestsGivenToClientField(),\n          hivTestKitDetailsField(),\n        ]\n      }\n    })\n\n    function onFinish(_: any, computedData: any) {\n      saveEncounter({ \n        encounterName: \"ITEMS GIVEN\",\n        encounterTypeID: service.encounterTypeID, \n        computedData \n      })\n    }\n\n    async function obs(concept: string) { \n      return await ObservationService.getFirstValueCoded(visitID.value as any, concept) || 'Unknown'\n    }\n    \n    function getSelfKitCount(f: Record<string, any>) {\n      if (f.items_given_to_client && Array.isArray(f.items_given_to_client)) {\n        return find(f.items_given_to_client, { label: \"Self-Test Kit\" })?.value || 0;\n      }\n      return 0;\n    }\n\n    function itemsGivenToClientField(): Field {\n      return {\n        id: \"items_given_to_client_selection\",\n        helpText: \"Items given to the client\",\n        type: FieldType.TT_ADHERENCE_INPUT,\n        isRequired: () => true,\n        appearInSummary: () => false,\n        beforeNext: async (v: Option[]) => {\n          if (v.every((d) => d.value === '' || parseInt(`${d.value}`) <= 0)) {\n            if (\n              !(await alertConfirmation(\n                \"Are you sure you want to proceed without giving items to client ?\"\n              ))\n            ) {\n              return false;\n            }\n          }\n          return true;\n        },\n        validation: (v: Option[]) => {\n          const maxSelfKits = 3;\n          const maxMaleCondoms = 99;\n          const maxFemaleCondoms = 99;\n          const maxFRS = 5;\n          if (\n            v.some((d) => /self-test/i.test(d.label) && parseInt(`${d.value}`) > maxSelfKits)\n          ) {\n            return [\n              `Cannot distribute more than ${maxSelfKits} Self-test kits. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => /male condoms/i.test(d.label.toLowerCase()) && parseInt(`${d.value}`) > maxMaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxMaleCondoms} Male Condoms. Please adjust the number accordingly`,\n            ];\n         }if (\n            v.some((d) => d.label == 'Female condoms' && parseInt(`${d.value}`) > maxFemaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFemaleCondoms} Female Condoms. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => /frs/i.test(d.label.toLowerCase()) && parseInt(`${d.value}`) > maxFRS)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFRS} FRS. Please adjust the number accordingly`,\n            ];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          if (!isEmpty(f.items_given_to_client_selection)) {\n            return f.items_given_to_client_selection;\n          }\n          return [\n            { label: \"Self-Test Kit\", value: \"\" },\n            { label: \"Male condoms\", value: \"\" },\n            { label: \"Female condoms\", value: \"\" },\n            { label: \"FRS\", value: \"\" },\n          ] as Option[];\n        },\n        config: {\n          noFloat: true,\n          titles: {\n            label: \"Item\",\n            value: \"Quantity\",\n          },\n        },\n      };\n    }\n    \n    function itemsGivenHiddenField(): Field {\n      return {\n        id: \"items_given_to_client\",\n        helpText: \"Items given\",\n        type: FieldType.TT_HIDDEN,\n        summaryMapValue: (v: Option) => {\n          return {\n            label: `${v.label} given`,\n            value: v.value,\n          };\n        },\n        defaultValue: (f: Record<string, Option[]>) => {\n          if (f.items_given_to_client_selection.every((d) => d.value === '' || parseInt(`${d.value}`) <= 0)) {\n            return {\n              label: \"No items\",\n              value: \"Yes\",\n            };\n          }\n          return f.items_given_to_client_selection.filter((d) => parseInt(`${d.value}`) > 0);\n        },\n        finalComputedValue: (v: Option[] | Option) => {\n          if (Array.isArray(v)) {\n            return {\n              obs: v.map((d: Option) =>\n                service.buildValueNumber(d.label, parseInt(`${d.value}`))\n              ),\n            };\n          }\n          return {\n            obs: service.buildValueCoded(\"None\", \"Yes\"),\n          };\n        },\n      };\n    }\n\n    function hivTestKitDetailsField(): Field {\n      const { \n        initKits, \n        getLotNo, \n        getExpiryDate \n      } = TestKit()\n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        init: async () => {\n          await initKits()\n          return true\n        },\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v?.other?.fields,\n        validation: (v: Option[]) => {\n          const incomplete = v\n            .map((d: Option) => d.other.fields)\n            .some((d: Option[]) => d.some((x: Option) => x.value === \"\"));\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        condition: (f: any) => getSelfKitCount(f) >= 1 && !getLotNo(KitProp.HIV_SELF_KIT),\n        finalComputedValue: (v: Option[]) => {\n          const data = v.map((d) => d.other.fields);\n          return {\n            obs: data.map(async (options: Option[]) => {\n              const [parentObs, ...childObs] = options\n                .filter((l: Option) => typeof l.other.obs === \"function\")\n                .map((d: Option) => d.other.obs(d));\n              return {\n                ...(await parentObs),\n                child: await Promise.all(childObs),\n              };\n            }),\n          };\n        },\n        defaultOutput: (f: any) => {\n          if (getSelfKitCount(f) >= 1 && getLotNo(KitProp.HIV_SELF_KIT)) {\n            return Array.from({ length: getSelfKitCount(f) }).map(() => {\n              return {\n                label: KitProp.HIV_SELF_KIT,\n                value: getLotNo(KitProp.HIV_SELF_KIT),\n                other: {\n                  fields: [\n                    {\n                      label: \"Kit name\",\n                      value: KitProp.HIV_SELF_KIT,\n                      other: {\n                        obs: () => service.buildValueText(\"Kit name\", KitProp.HIV_SELF_KIT)\n                      }\n                    },\n                    {\n                      label: \"KitLot No.\",\n                      value: getLotNo(KitProp.HIV_SELF_KIT),\n                      other: {\n                        obs: () => service.buildValueText(\"Kit lot number\",\n                          getLotNo(KitProp.HIV_SELF_KIT)\n                        )\n                      }\n                    },\n                    {\n                      label: \"Kit Expiry date\",\n                      value: getExpiryDate(KitProp.HIV_SELF_KIT),\n                      other: {\n                        obs: () => service.buildValueDate(\"kit expiry date\",\n                          getExpiryDate(KitProp.HIV_SELF_KIT)\n                        )\n                      }\n                    }\n                  ]\n                }\n              }\n            })\n          }\n        },\n        options: async (f: any) => {\n          if (f.test_kit != null) return f.test_kit;\n          const kitNameOption = () => ({\n            label: \"Kit Name\",\n            value: KitProp.HIV_SELF_KIT,\n            other: {\n              obs: (v: Option) =>\n                service.buildValueText(\"Kit name\", v.value as string),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"name\",\n                    helpText: \"Kit Name\",\n                    type: FieldType.TT_TEXT,\n                    isRequired: () => true\n                  },\n                  (v: Option) => {\n                    val.value = v.value;\n                    // Use first row's Lot number to update other Lot numbers which are empty\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/name/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          });\n          const kitLotNoOption = () => ({\n            label: \"Kit Lot No.\",\n            value: getLotNo(KitProp.HIV_SELF_KIT),\n            other: {\n              obs: (v: Option) =>\n                service.buildValueNumber(\n                  \"Kit lot number\",\n                  v.value as number\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard({\n                  id: 'lot',\n                  helpText: 'Enter Lot Number',\n                  type: FieldType.TT_TEXT,\n                  isRequired: () => true\n                }, \n                (v: Option) => {\n                  val.value = v.value\n                  // Use first row's Lot number to update other Lot numbers which are empty\n                  if (index === 0) {\n                    listData.forEach((i: Option) => {\n                      i.other.fields.forEach((d: Option) => {\n                        if (/lot/i.test(d.label) && d.value === '') {\n                          d.value = val.value\n                        }\n                      })\n                    })\n                  }\n                })\n              },\n            },\n          });\n          const kitExpiryDateOption = () => ({\n            label: \"Kit Expiry Date\",\n            value: getExpiryDate(KitProp.HIV_SELF_KIT),\n            other: {\n              obs: (v: Option) =>\n                service.buildValueDate(\n                  \"kit expiry date\",\n                  v.value as string\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(service.date),\n                        ];\n                      }\n                      const monthsFromNow = dayjs(v.label).diff(service.date, \"month\")\n                      if (monthsFromNow <= 2) {\n                        return [\"It's not advisable to use a test kit that will expire in less than 2 months\"]\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => {\n                    val.value = v.value\n                    // Use first row's expiry date to update other expiry dates\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/expiry/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          })\n          const kits = getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"\",\n                value: \"\",\n                other: {\n                  fields: [\n                   kitNameOption(),\n                   kitLotNoOption(),\n                   kitExpiryDateOption(),\n                  ],\n                },\n              };\n            });\n            if (Array.isArray(f.test_kit)) {\n              if (kits < f.test_kit.length) {\n                return f.test_kit.slice(0, kits);\n              } else if (kits > f.test_kit.length) {\n                return [\n                  ...f.test_kit,\n                  ...generateRows(\n                    kits - f.test_kit.length\n                  ),\n                ];\n              } else {\n                return f.test_kit;\n              }\n          }\n          return generateRows();\n        },\n      };\n    }\n    \n    function selfTestsGivenToClientField(): Field {\n      return {\n        id: \"self_test_kits\",\n        helpText: \"Self-test kit users\",\n        type: FieldType.TT_INPUT_ARRAY,\n        isRequired: () => true,\n        condition: (f: any) =>\n          f.items_given_to_client.some(\n            (d: Option) => /self-test/i.test(d.label) && parseInt(`${d.value}`) > 0\n          ),\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d.value, d));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        summaryMapValue: (v: Option) => v.other.fields.map((d: Option) => {\n          const el = {...d}\n          if (el.label === 'Age' && el?.other?.estimate) {\n            el.value = `${el.value} (Estimated)`\n          }\n          return el\n        }),\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 4;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        config: {\n          columns: [\n            { label: \"End-User\" },\n            { label: \"Sex\" },\n            { label: \"Age\" },\n            { label: \"Approach\" },\n            { label: \"Result\" },\n          ],\n        },\n        options: (f: any) => {\n          const broadcast = (rows: Option[], channel: string, newValue: string|number, oldValue: string|number) => {\n            rows.forEach(col => {\n              if (typeof col?.other?.broadcastlistener === \"function\") {\n                const update = col.other.broadcastlistener(channel, newValue, oldValue)\n                if (update) {\n                  col.value = update.value\n                  col.disabled = update.disabled\n                }\n              }\n            })\n          }\n          const userOptionField = () => ({\n            label: \"User\",\n            value: \"\",\n            other: {\n              obs: (v: string) =>\n                service.buildValueCoded(\"Self-test end user\", v),\n              onclick: async (\n                val: Option,\n                rows: Option[],\n                index: number,\n                i: number,\n                listData: Option[]\n              ) => {\n                const options = [];\n                if (!/Self/.test(JSON.stringify(listData.filter((_: any, i) => i != index)))) {\n                  const testingEncounter = getEncounter('Testing')\n                  const HIVStatus = testingEncounter\n                    ? `${testingEncounter?.hiv_result}`\n                    : await obs(\"HIV status\")\n\n                  if(!/positive/.test(HIVStatus.toLowerCase())) options.push(\"Self\");\n                }\n                selectionList(\n                  [...options, \"Sexual partner\", \"Other\"],\n                  (selection: string) => {\n                    broadcast(rows, 'User', selection, val.value)\n                    val.value = selection;\n                  },\n                  {\n                    title: \"Select End-User\",\n                    preset: val != null ? val.value : \"\",\n                    size: \"small-modal\",\n                  }\n                );\n              },\n            },\n          });\n          const genderOptionField = () => ({\n            label: \"Sex\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string, oldValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { \n                      value: htsClient.gender === 'M' ? \"Male\" : \"Female\", \n                      disabled: true \n                    }\n                  }\n                  if (oldValue === 'Self') {\n                    return { value: '', disabled: false }\n                  }\n                }\n              },\n              obs: (v: string) => service.buildValueCoded(\"Gender of contact\", v),\n              onclick: (val: Option) => {\n                selectionList(\n                  [\"Female\", \"Male\"],\n                  (selection: string) => (val.value = selection),\n                  {\n                    title: \"Select sex\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const ageOptionField = () => ({\n            label: \"Age\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { value: `${htsClient.age}`, disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string, d: Option) => {\n                const age = parseInt(v)\n                if (d?.other?.estimate) {\n                  return service.buildNumericEstimate('Age of contact', age)\n                } else {\n                  return service.buildValueNumber(\"Age of contact\", age)\n                }\n              },\n              onclick: (val: Option) => {\n                numericKeypad((age: number | string, isEstimate: boolean | undefined) => {\n                  if (age && parseInt(`${age}`) >= 125) {\n                    val.value =''\n                    return toastWarning(`Age exceeds maximum human life expectancy of 124 years`)\n                  }\n                  val.value = age\n                  val.other.estimate = isEstimate\n                }, \n                {\n                  title: 'Age',\n                  preset: ' ',\n                  toggleButton: \"Age is estimated?\",\n                  noFloat: true,\n                  strictNumbers: true\n                });\n              },\n            },\n          });\n          const approachOptionField = () => ({\n            label: \"Approach\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue != 'Self') {\n                    return { value: \"Un-assisted\", disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string) => service.buildValueCoded(\"Self-test approach\", v),\n              onclick: (val: Option, rows: Option[]) => {\n                selectionList(\n                  [\"Directly-assisted\", \"Un-assisted\"],\n                  (v: string) => {\n                    broadcast(rows, 'Approach', v, val.value)\n                    val.value = v\n                  },\n                  {\n                    title: \"Select approach\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const resultOptionField = () => ({\n            label: \"Result\",\n            value: \"N/A\",\n            other: {\n              obs: (v: string) => {\n                if (v && !/n\\/a/i.test(`${v}`)) {\n                  return service.buildValueCoded('Test 1', v)\n                }\n              },\n              onclick: (val: Option, rows: Option[]) => {\n                selectionList([\n                  'Negative',\n                  'Positive',\n                  'N/A'\n                ], \n                (selection: string) => {\n                  broadcast(rows, 'Result', selection, val.value)\n                  val.value = selection\n                }, {\n                  title: 'Directly-assisted HIV Result'\n                })\n              }\n            }\n          })\n          const kits = getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"item\",\n                value: \"N/A\",\n                other: {\n                  fields: [\n                    userOptionField(),\n                    genderOptionField(),\n                    ageOptionField(),\n                    approachOptionField(),\n                    resultOptionField()\n                  ],\n                },\n              };\n            });\n          if (Array.isArray(f.self_test_kits)) {\n            if (getSelfKitCount(f) < f.self_test_kits.length) {\n              return f.self_test_kits.slice(0, getSelfKitCount(f));\n            } else if (getSelfKitCount(f) > f.self_test_kits.length) {\n              return [\n                ...f.self_test_kits,\n                ...generateRows(\n                  getSelfKitCount(f) - f.self_test_kits.length\n                ),\n              ];\n            } else {\n              return f.self_test_kits;\n            }\n          }\n          return generateRows();\n        },\n      };\n    }\n    return {\n      patientDashboardUrl,\n      onFinish,\n      fields\n    }\n  }\n});\n","import { render } from \"./HtsItemsGivenToClient.vue?vue&type=template&id=39d783ec&ts=true\"\nimport script from \"./HtsItemsGivenToClient.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsItemsGivenToClient.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"@/services/service\";\nimport { find, isEmpty } from \"lodash\";\nimport { ref } from \"vue\";\nimport UserProp from \"@/composables/userproperty\"\n\nexport enum KitProp {\n    TEST_KIT_USER_PROPERTY = 'hts_user_assigned_kits',\n    HIV_SELF_KIT = 'HIV self-kit',\n    SYPHILIS = 'Syphilis',\n    HEPATITIS = 'Hepatitis B',\n    BIOLINE = 'Bioline',\n    DETERMINE = 'Determine',\n    UNIGOLD = 'Unigold'\n}\n\nexport function TestKit() {\n    const kits = ref<any>([])\n    const { getUserProp, setUserProp } = UserProp()\n\n    const getSelectedTests = async () => {\n        try {\n            const req = await getUserProp('HTS_PROGRAMS')\n            return `${req||''}`.split(',').map((prop: string) => prop.trim())\n        } catch (e) {\n            console.error(`${e}`)\n        }\n        return []\n    }\n\n    const initKits = async () => {\n        const defaultKits = [\n            {\n                kitName: KitProp.UNIGOLD,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.DETERMINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.BIOLINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.HIV_SELF_KIT,\n                lotNo: '',\n                expiryDate: '',\n                visible: true\n            },\n            {\n                kitName: KitProp.SYPHILIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Syphilis Test\"\n            },\n            {\n                kitName: KitProp.HEPATITIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Hepatitis B Test\"\n            }\n        ]\n        try {\n            const selectedKits = await getSelectedTests()\n            const req: any = await getUserProp(KitProp.TEST_KIT_USER_PROPERTY)\n            const prevKits = JSON.parse(req||'')\n\n            defaultKits.forEach((kit: any) => {\n                if (kit.userProp && !isEmpty(selectedKits)) {\n                    kit.visible = selectedKits.includes(kit.userProp)\n                }\n                const preset = find(prevKits, { kitName: kit.kitName })\n                if (preset) {\n                    kit.lotNo = preset.lotNo\n                    kit.expiryDate = preset.expiryDate\n                }\n            })\n            kits.value = defaultKits.filter((k: any) => k.visible)\n        } catch (e) {\n            kits.value = defaultKits\n            console.error(`${e}`)\n        }\n        \n    }\n\n    const getLotNo = (kitName: KitProp) => {\n        const data = find(kits.value, { kitName })\n        if (data) {\n            if(new Date(data.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return data.lotNo\n        } \n        return ''\n    }\n\n    const getExpiryDate = (kitName: KitProp) => {\n        const date = find(kits.value, { kitName })\n        if (date) {\n            if (new Date(date.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return date.expiryDate\n        }\n        return ''\n    }\n\n    const saveKits = () => setUserProp(KitProp.TEST_KIT_USER_PROPERTY, JSON.stringify(kits.value))\n\n    return {\n        kits,\n        initKits,\n        saveKits,\n        getLotNo,\n        getExpiryDate\n    }\n}\n"],"sourceRoot":""}