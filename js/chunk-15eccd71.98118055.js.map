{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/Appointment.vue?1a26","webpack:///./src/apps/ART/views/encounters/Appointment.vue","webpack:///./src/apps/ART/views/encounters/Appointment.vue?9d72","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ART/services/appointment_service.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","appointment","watch","ready","handler","_App$getActiveApp","console","log","App","getActiveApp","applicationName","this","AppointmentService","patientID","providerID","getAppointmentField","immediate","methods","_","computedData","_App$getActiveApp2","createEncounter","saveObservationList","resolveObs","printer","PatientPrintoutService","appsThatDoNotPrint","includes","printVisitSummaryLbl","nextTask","d","date","HisDate","toStandardHisDisplayFormat","exists","strOne","strTwo","RegExp","test","clinicDays","clinicHolidays","appointmentLimit","nextAppointment","drugRunoutDate","dateAppointments","weekDays","id","helpText","type","FieldType","TT_DATE_PICKER","init","async","res","getNextAppointment","appointment_date","drugs_run_out_date","e","warn","delayPromise","alertConfirmation","gotoPatientDashboard","limitRes","ART_GLOBAL_PROP","parseInt","onValue","undefined","getDailiyAppointments","Array","isArray","length","header","cancelBtnLabel","confirmBtnLabel","isEmpty","patient","getAge","adultClinicDays","peadsClinicDays","dayjs","day","validation","val","Validation","required","defaultValue","computedValue","buildValueDate","value","config","hiddenFooterBtns","minDate","maxDate","supValue","infoItems","_App$getActiveApp3","label","__exports__","FlowState","dformat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","offlineID","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","created","$route","params","patient_id","goOffline","initOfflineData","Store","get","then","patientData","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","error","toastWarning","enc","encounterTypeID","callback","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","concat","Promise","all","inArray","arr","expression","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","constructor","super","getJson","paginate","isCondition","ignored","prop","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-15eccd71.98118055.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { alertConfirmation } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue';\nimport {AppointmentService} from '@/apps/ART/services/appointment_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport App from \"@/apps/app_lib\"\nimport { isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\nimport ART_GLOBAL_PROP from \"@/apps/ART/art_global_props\"\nimport dayjs from \"dayjs\";\nimport { delayPromise } from \"@/utils/Timers\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    appointment: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n\n\n        //print out App type\n        console.log(\"The Current App calling this encounter  \",App.getActiveApp()?.applicationName)\n\n        if (ready) {\n          this.appointment = new AppointmentService(this.patientID, this.providerID)\n          this.fields = [\n            this.getAppointmentField()\n          ]\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      await this.appointment.createEncounter()\n      await this.appointment.saveObservationList(\n        (await this.resolveObs(computedData))\n      )\n      const printer = new PatientPrintoutService(this.patientID);\n      // TODO: remove the program checks here\n      const appsThatDoNotPrint = ['CxCa', 'ANC']\n      \n\n      if(!appsThatDoNotPrint.includes(`${App.getActiveApp()?.applicationName}`)) {\n        await printer.printVisitSummaryLbl();\n      }\n      this.nextTask()\n    },\n    getAppointmentField(): Field {\n      const d = (date: string) => HisDate.toStandardHisDisplayFormat(date)\n      const exists = (strOne: string, strTwo: string) => new RegExp(strOne, 'i').test(`${strTwo}`)\n      let clinicDays = ''\n      let clinicHolidays = ''\n      let appointmentLimit = -1\n      let nextAppointment = this.appointment.date\n      let drugRunoutDate: string | null = null\n      const dateAppointments: Record<string, number> = {}\n      const weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n      return {\n        id: \"set_appointment\",\n        helpText: \"Appointments booking\",\n        type: FieldType.TT_DATE_PICKER,\n        init: async () => {\n          try {\n            const res = await this.appointment.getNextAppointment()\n            nextAppointment = res.appointment_date\n            drugRunoutDate = res.drugs_run_out_date\n          } catch(e) {\n            console.warn(e)\n            await delayPromise(400)\n            if (!(await alertConfirmation('Next appointment/drug-runout date is not available, do you want to proceed anyway?'))) {\n              this.gotoPatientDashboard()\n              return true\n            }\n          }\n          const limitRes = (await ART_GLOBAL_PROP.appointmentLimit());\n          appointmentLimit = limitRes ? parseInt(limitRes) : 0\n          return true\n        },\n        onValue: async (date: string) => {\n          console.log(this.appointment)\n          if (dateAppointments[date] === undefined) {\n            const res = await AppointmentService.getDailiyAppointments(date)\n            dateAppointments[date] = Array.isArray(res) ? res.length : 0\n          }\n          if (appointmentLimit >= 1 && dateAppointments[date] >= appointmentLimit) {\n            if((await alertConfirmation(\n              `${dateAppointments[date]} clients were booked on ${d(date)}`, \n              {\n                header: `APPOINTMENT LIMIT (${appointmentLimit}) REACHED`,\n                cancelBtnLabel: \"Proceed\",\n                confirmBtnLabel: \"New date\"\n              }\n            ))) return false;\n          }\n          // Check clinic holidays\n          if (isEmpty(clinicHolidays)) {\n            clinicHolidays = await ART_GLOBAL_PROP.clinicHolidays()\n          }\n          if(exists(date, clinicHolidays)) {\n            if (!(await alertConfirmation(`${d(date)} is a clinic holiday, do you want to set an appointment?`))) \n              return false;\n          }\n          //Check clinic days\n          if (isEmpty(clinicDays)) {\n            clinicDays = this.patient.getAge() >= 18\n              ? (await ART_GLOBAL_PROP.adultClinicDays())\n              : (await ART_GLOBAL_PROP.peadsClinicDays())\n          }\n          if(!exists(weekDays[dayjs(date).day()], clinicDays)){\n            if(!(await alertConfirmation(`${d(date)} is not a clinic day. Do you want to proceed with this date?`))) \n              return false;\n          }\n          return true\n        },\n        validation: (val: any) => Validation.required(val),\n        defaultValue: () => nextAppointment,\n        computedValue: (date: Option) => {\n          return [\n            this.appointment.buildValueDate('Appointment date', date.value),\n            this.appointment.buildValueDate('Estimated date', nextAppointment)\n          ]\n        },\n        config: {\n          hiddenFooterBtns: [\n            'Clear'\n          ],\n          minDate: () => this.appointment.date,\n          maxDate: () => drugRunoutDate,\n          supValue: (date: string) => `${dateAppointments[date]}`,\n          infoItems: (date: string) => {\n\n            if(App.getActiveApp()?.applicationName === 'CxCa'){\n              return [\n                {\n                  label: 'User set appointment date',\n                  value: d(date)\n                },\n                {\n                  label: 'Appointments',\n                  value: dateAppointments[date]\n                },\n                {\n                  label: 'Appointment limit (per/day)',\n                  value: appointmentLimit\n                }\n              ]\n            }else{\n              return [\n                { \n                  label: 'Medication Run out Date',\n                  value: drugRunoutDate ? d(drugRunoutDate) : 'Not available'\n                },\n                {\n                  label: 'User set appointment date',\n                  value: d(date)\n                },\n                {\n                  label: 'Appointments',\n                  value: dateAppointments[date]\n                },\n                {\n                  label: 'Appointment limit (per/day)',\n                  value: appointmentLimit\n                }\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n});\n","import { render } from \"./Appointment.vue?vue&type=template&id=10325229&ts=true\"\nimport script from \"./Appointment.vue?vue&type=script&lang=ts\"\nexport * from \"./Appointment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class AppointmentService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 7, providerID);\n  }\n\n  async getNextAppointment() {\n    return AppEncounterService.getJson(`/programs/${this.programID}/patients/${this.patientID}/next_appointment_date`, {date: this.date})\n  }\n  \n  static async getDailiyAppointments(date: any) {\n    const programID = AppEncounterService.getProgramID();\n    return AppEncounterService.getJson(`/programs/${programID}/booked_appointments`, {date: date, paginate: false})\n  }\n\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}