(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-7094e908"],{"8f57":function(t,e,r){"use strict";r.r(e);var s=r("7a23");function a(t,e,r,a,o,n){const i=Object(s["resolveComponent"])("report-template"),h=Object(s["resolveComponent"])("ion-page");return Object(s["openBlock"])(),Object(s["createBlock"])(h,null,{default:Object(s["withCtx"])(()=>[Object(s["createVNode"])(i,{title:t.title,period:t.period,rows:t.rows,fields:t.fields,columns:t.columns,reportPrefix:"MoH",config:{showIndex:!0},validationErrors:t.errors,showValidationStatus:t.showStatus,headerInfoList:t.headerInfoList,onReportConfiguration:t.onPeriod},null,8,["title","period","rows","fields","columns","validationErrors","showValidationStatus","headerInfoList","onReportConfiguration"])]),_:1})}r("14d9");var o=r("44e3"),n=r("9a5e"),i=r("4ba2"),h=r("9ceb"),d=r("d867"),l=r("b31c"),c=r("ad8d"),u=Object(s["defineComponent"])({mixins:[o["a"]],components:{ReportTemplate:i["a"],IonPage:d["D"]},data:()=>({title:"Moh TX CURR MMD Report",cohort:{},rows:[],headerInfoList:[],totals:new Set,mohCohort:{},errors:[],showStatus:!1,columns:[[h["a"].thTxt("Age group"),h["a"].thTxt("Gender"),h["a"].thNum("# of clients on <3 months of ARVs"),h["a"].thNum("# of clients on 3 - 5 months of ARVs"),h["a"].thNum("# of clients on >= 6 months of ARVs")]],canValidate:!1}),created(){this.fields=this.getDateDurationFields()},watch:{async canValidate(t){t&&await this.validateReport()}},methods:{async onPeriod(t,e){this.canValidate=!1,this.rows=[],this.errors=[],this.showStatus=!1,this.report=new n["a"],this.mohCohort=new l["a"],this.mohCohort.setStartDate(e.start_date),this.mohCohort.setEndDate(e.end_date),this.report.setOrg("moh"),this.report.setStartDate(e.start_date),this.report.setEndDate(e.end_date),this.period=this.report.getDateIntervalPeriod(),await this.setRows(),this.setHeaderInfoList(),this.canValidate=!0,this.showStatus=!0},setHeaderInfoList(){this.headerInfoList=[{label:"Total clients",value:this.totals.size,other:{onclick:()=>this.runTableDrill(Array.from(this.totals),"Total Clients")}}]},getValues(t,e){const r=[],s=[],a=[];for(const o in t){const e=t[o],n=e.prescribed_days;this.totals.add(o),n<90&&r.push(o),n>=90&&n<=150&&s.push(o),n>150&&a.push(o)}return[this.drill(r,e+" < 3 months of Arvs"),this.drill(s,e+" 3-5 months of Arvs"),this.drill(a,e+" > 6 months months of Arvs")]},async setRows(){let t=0,e=0;const r=[],s=[];for(const a in c["a"]){const o=c["a"][a];if("<1 year"===o)t=0,e=0;else if("90 plus years"===o)t=90,e=1e4;else{const[r,s]=o.split("-");t=parseInt(r),e=parseInt(s)}const n=await this.report.getTxCurrMMDReport(t,e);this.report.initArvRefillPeriod(!1),n?(s.push([h["a"].td(o),h["a"].td("Female"),...this.getValues(n["Female"],o+" (F)")]),r.push([h["a"].td(o),h["a"].td("Male"),...this.getValues(n["Male"],o+" (M)")])):(s.push([h["a"].td(o),h["a"].td("Female"),h["a"].td(0),h["a"].td(0),h["a"].td(0)]),r.push([h["a"].td(o),h["a"].td("Male"),h["a"].td(0),h["a"].td(0),h["a"].td(0)])),this.rows=[...s,...r]}},validateReport(){const t={total_alive_and_on_art:{param:this.totals.size,check:(t,e)=>t!=e,error:(t,e)=>`\n                        MoH cohort Alive and on ART clients <b>(${t})</b> is not\n                        matching with total TX MMD clients <b(${e}).</b>\n                    `}},e=this.mohCohort.validateIndicators(t,t=>this.errors=t);-1===e&&(this.errors=["Report not validated. Run the MoH cohort report for similar reporting period and then run this report"])}}}),p=r("6b0d"),m=r.n(p);const f=m()(u,[["render",a]]);e["default"]=f},b31c:function(t,e,r){"use strict";r.d(e,"a",(function(){return i}));var s,a=r("ade3"),o=(r("13d5"),r("14d9"),r("2ef0")),n=r("5969");(function(t){t["MOH_CACHE"]="mohCache"})(s||(s={}));class i extends n["a"]{constructor(){super(),Object(a["a"])(this,"regenerate",void 0),this.regenerate=!1}cohortUrl(){return`programs/${this.programID}/reports/cohort`}setRegenerate(t){this.regenerate=t}getCohortDrillDown(t){return n["a"].getJson("cohort_report_drill_down",{id:t,date:this.date,program_id:this.programID})}requestCohort(t){return n["a"].ajxGet(this.cohortUrl(),t)}qaurterRequestParams(){return{name:this.quarter,regenerate:this.regenerate}}datePeriodRequestParams(){return{name:`Cohort-${this.startDate}-${this.endDate}`,start_date:this.startDate,end_date:this.endDate,regenerate:this.regenerate}}getCachedCohortValues(){const t=sessionStorage.getItem(s.MOH_CACHE);if(t){const e=JSON.parse(t);if(e.start_date===this.startDate&&e.end_date===this.endDate||e.quarter===this.quarter)return e.data}}cacheCohort(t){sessionStorage.setItem(s.MOH_CACHE,JSON.stringify({start_date:this.startDate,end_date:this.endDate,quarter:this.quarter,data:t}))}validateIndicators(t,e){const r=this.getCachedCohortValues();if(r){const s=Object.keys(t).reduce((e,s)=>{const a=Object(o["find"])(r,{name:s}),n=t[s],i=a?a.contents:null,h=n.param,d=n.check(parseInt(i),h);return d&&e.push(n.error(i,h)),e},[]);return e(s)}return-1}}}}]);
//# sourceMappingURL=chunk-7094e908.6ca46d7f.js.map