{"version":3,"sources":["webpack:///./src/apps/ART/services/htn_service.ts","webpack:///./src/apps/ART/views/encounters/BPAdherence.vue?4102","webpack:///./src/apps/ART/views/encounters/BPAdherence.vue","webpack:///./src/apps/ART/views/encounters/BPAdherence.vue?a583","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ART/views/encounters/BPAdherence.vue?6b8d","webpack:///./src/utils/GuidelineEngine.ts"],"names":["HTN_SESSION_KEY","BPManagementService","AppEncounterService","constructor","patientID","providerID","super","sbp","dbp","bpTrail","firstRecentGrade","secondRecentGrade","Object","values","sort","a","b","date","map","bp","this","getBpGrade","getSystolicBp","ObservationService","getFirstValueNumber","getDiastolicBp","query","getFirstValueCoded","getJson","drugID","pills","postJson","state","getDrugs","HCZ","drugs","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","adherence","notes","Enalapril","remaining","Amlodipine","Atenolol","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","_createElementVNode","class","_hoisted_2","key","_hoisted_3","id","style","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_col","_resolveComponent","_component_ion_row","_component_ion_toolbar","_component_ion_header","_component_ion_checkbox","_component_ion_input","_component_view_port","_component_ion_content","_component_ion_button","_component_ion_footer","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","_","_createElementBlock","_Fragment","_renderList","item","itemIndex","_createTextVNode","_toDisplayString","drug","drugIndex","i","checked","disabled","_createCommentVNode","type","modelValue","$event","onClick","launchKeyPad","selectedDrugs","color","size","slot","gotoPatientDashboard","goToPrescription","onFinish","defineComponent","mixins","EncounterMixinVue","components","ViewPort","IonToolbar","IonHeader","IonContent","IonRow","IonInput","IonButton","IonCol","IonFooter","IonPage","IonCheckbox","watch","ready","HTN","getCurrentDrugs","immediate","data","methods","selectNextAction","$router","push","gotoTreatment","htnDrugs","find","htnDrugReferences","sessionStorage","setItem","Prescription","JSON","stringify","modal","optionsActionSheet","name","role","selection","action","removeItem","nextTask","lastDrugs","getLastDrugs","forEach","element","index","drug_id","prototype","hasOwnProperty","call","value_numeric","d","modalController","create","component","HisKeypadVue","backdropDismiss","cssClass","componentProps","strictNumbers","onKeyPress","async","adh","getAdherence","present","computed","reduce","accum","cur","concat","filter","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","providers","encounterName","apiDate","value","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","fields","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","cancelDestination","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","runflowState","states","username","split","provider","person_id","EXIT","findings","matchToGuidelines","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","usernameA","usernameB","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","path","yesNoOptions","toYesNoOption","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Array","isArray","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-4e45c499.d7dc28fa.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ObservationService } from \"@/services/observation_service\"\n\nexport enum HTN_SESSION_KEY {\n  Prescription = \"htnPrescription\"\n}\n\nexport class BPManagementService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n      super(patientID, 48, providerID) //TODO: Use encounter type reference name'\n    }\n\n    static getBpGrade(sbp: number, dbp: number) {\n      if ((sbp < 140) && (dbp < 90)) {\n        return \"normal\"\n      }\n      else if ((sbp >= 140 && sbp < 160) || (dbp >= 100 && dbp < 110)) {\n        return \"grade 1\"\n      }\n      else if ((sbp >= 180 && dbp > 110) || sbp >= 180) {\n        return \"grade 3\"\n      }\n      else if ((sbp >= 160 && sbp < 180) || (dbp >= 110)) {\n        return \"grade 2\"\n      }\n      return 'N/A'\n    }\n\n    /**\n     * BP is normointensive if two most recent consecutive tests are normal\n     * @param bpTrail \n     * @returns\n    */\n    static isBpNormotensive(bpTrail: any) {\n      const [ firstRecentGrade, secondRecentGrade ] = Object.values(bpTrail)\n        .sort((a: any, b: any) => a.date < b.date ? 1 : 0)\n        .map((bp: any) => this.getBpGrade(bp.sbp, bp.dbp))\n      return firstRecentGrade === 'normal' && secondRecentGrade === 'normal'\n    }\n\n    getSystolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Systolic blood pressure')\n    }\n\n    getDiastolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Diastolic blood pressure')\n    }\n\n    async onBpDrugs() {\n      const query = await ObservationService.getFirstValueCoded(this.patientID, 'Treatment status')\n      return query ? query === 'Yes' : false\n    }\n  \n    async getBPTrail() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/bp_trail`);\n    }\n    async getCurrentDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/current_bp_drugs`);\n    }\n    async getLastDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/last_bp_drugs_dispensation`);\n    }\n    async getAdherence(drugID: number, pills: number) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/remaining_bp_drugs`, {\n        'drug_id': drugID,\n        pills: pills\n      });\n    }\n    async enrollPatient(state: any) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/update_or_create_htn_state`, state);\n    }\n    static htnDrugReferences() {\n      return [\n        { \n          'drug_id': 275,\n          'drug_name': \"HCZ (25mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 942,\n          'drug_name': \"Enalapril (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 943,\n          'drug_name': \"Enalapril (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 558,\n          'drug_name': \"Amlodipine (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 559,\n          'drug_name': \"Amlodipine (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 117,\n          'drug_name': \"Atenolol (50mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 11,\n          'drug_name': \"Atenolol(100mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        }\n      ]\n    }\n    getDrugs() {\n        return {\n        HCZ: {\n          drugs: [\n            {\n              drugName: \"HCZ (25mg tablet)\",\n              drugID: 275,\n              amount: '25mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Enalapril: {\n          drugs: [\n            {\n              drugName: \"Enalapril (5mg tablet)\",\n              drugID: 942,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Enalapril (10mg tablet)\",\n              drugID: 943,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Amlodipine: {\n          drugs: [\n            {\n              drugName: \"Amlodipine (5mg tablet)\",\n              drugID: 558,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Amlodipine (10mg tablet)\",\n              drugID: 559,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Atenolol: {\n          drugs: [\n            {\n              drugName: \"Atenolol (50mg tablet)\",\n              drugID: 117,\n              amount: '50mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Atenolol(100mg tablet)\",\n              drugID: 11,\n              amount: '100mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n      }\n    }\n}","import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createBlock as _createBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-15839c59\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", { class: \"his-title\" }, \" BP Drug management \", -1))\nconst _hoisted_2 = {\n  key: 0,\n  class: \"view-port-content\"\n}\nconst _hoisted_3 = {\n  id: \"main-table\",\n  style: {\"width\":\"100%\"}\n}\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", null, \" \", -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"td\", { class: \"td-current td-title\" }, [\n  /*#__PURE__*/_createElementVNode(\"span\", null, \"Current\")\n], -1))\nconst _hoisted_6 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"td\", { class: \"td-remaining td-title\" }, [\n  /*#__PURE__*/_createElementVNode(\"span\", null, \"Pills remaining\")\n], -1))\nconst _hoisted_7 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_8 = {\n  id: \"table-notes\",\n  style: {\"width\":\"100%\"}\n}\nconst _hoisted_9 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"caption\", { style: {\"font-size\":\"1.4em\"} }, \" Adherence summary \", -1))\nconst _hoisted_10 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_11 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"tr\", null, [\n  /*#__PURE__*/_createElementVNode(\"th\", { style: {\"width\":\"25%\"} }, [\n    /*#__PURE__*/_createElementVNode(\"span\", null, \"Drug\")\n  ]),\n  /*#__PURE__*/_createElementVNode(\"th\", { style: {\"width\":\"25%\"} }, [\n    /*#__PURE__*/_createElementVNode(\"span\", null, \"Pills dispensed during last visit\")\n  ]),\n  /*#__PURE__*/_createElementVNode(\"th\", { style: {\"width\":\"25%\"} }, [\n    /*#__PURE__*/_createElementVNode(\"span\", null, \"Expected pills remaining\")\n  ]),\n  /*#__PURE__*/_createElementVNode(\"th\", { style: {\"width\":\"25%\"} }, [\n    /*#__PURE__*/_createElementVNode(\"span\", null, \"Adherence for drug\")\n  ])\n], -1))\nconst _hoisted_12 = { class: \"date-td today-td\" }\nconst _hoisted_13 = { class: \"date-td today-td\" }\nconst _hoisted_14 = { class: \"date-td today-td\" }\nconst _hoisted_15 = { class: \"date-td today-td\" }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_col = _resolveComponent(\"ion-col\")!\n  const _component_ion_row = _resolveComponent(\"ion-row\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_checkbox = _resolveComponent(\"ion-checkbox\")!\n  const _component_ion_input = _resolveComponent(\"ion-input\")!\n  const _component_view_port = _resolveComponent(\"view-port\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_header, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_toolbar, null, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_row, null, {\n                default: _withCtx(() => [\n                  _createVNode(_component_ion_col, null, {\n                    default: _withCtx(() => [\n                      _hoisted_1\n                    ]),\n                    _: 1\n                  })\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_content, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_view_port, null, {\n            default: _withCtx(() => [\n              (_ctx.drugs)\n                ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n                    _createElementVNode(\"table\", _hoisted_3, [\n                      _createElementVNode(\"tr\", null, [\n                        _hoisted_4,\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs, (item, itemIndex) => {\n                          return (_openBlock(), _createElementBlock(\"th\", { key: itemIndex }, [\n                            _createTextVNode(_toDisplayString(itemIndex) + \" \", 1),\n                            _createVNode(_component_ion_row, null, {\n                              default: _withCtx(() => [\n                                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(item.drugs, (drug, drugIndex) => {\n                                  return (_openBlock(), _createBlock(_component_ion_col, {\n                                    class: \"col-borders\",\n                                    key: drugIndex\n                                  }, {\n                                    default: _withCtx(() => [\n                                      _createTextVNode(_toDisplayString(drug.amount || '0mg'), 1)\n                                    ]),\n                                    _: 2\n                                  }, 1024))\n                                }), 128))\n                              ]),\n                              _: 2\n                            }, 1024)\n                          ]))\n                        }), 128))\n                      ]),\n                      _createElementVNode(\"tr\", null, [\n                        _hoisted_5,\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs, (item, itemIndex) => {\n                          return (_openBlock(), _createElementBlock(\"td\", {\n                            class: \"td-current td-value\",\n                            key: itemIndex\n                          }, [\n                            _createVNode(_component_ion_row, null, {\n                              default: _withCtx(() => [\n                                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(item.drugs, (drug, i) => {\n                                  return (_openBlock(), _createBlock(_component_ion_col, { key: i }, {\n                                    default: _withCtx(() => [\n                                      (drug.current)\n                                        ? (_openBlock(), _createBlock(_component_ion_checkbox, {\n                                            key: 0,\n                                            checked: drug.current,\n                                            disabled: \"\"\n                                          }, null, 8, [\"checked\"]))\n                                        : _createCommentVNode(\"\", true)\n                                    ]),\n                                    _: 2\n                                  }, 1024))\n                                }), 128))\n                              ]),\n                              _: 2\n                            }, 1024)\n                          ]))\n                        }), 128))\n                      ]),\n                      _createElementVNode(\"tr\", null, [\n                        _hoisted_6,\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs, (item, itemIndex) => {\n                          return (_openBlock(), _createElementBlock(\"td\", {\n                            key: itemIndex,\n                            class: \"td-current td-value\"\n                          }, [\n                            _createVNode(_component_ion_row, null, {\n                              default: _withCtx(() => [\n                                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(item.drugs, (drug, i) => {\n                                  return (_openBlock(), _createBlock(_component_ion_col, { key: i }, {\n                                    default: _withCtx(() => [\n                                      (drug.dispensed)\n                                        ? (_openBlock(), _createBlock(_component_ion_input, {\n                                            key: 0,\n                                            type: \"number\",\n                                            modelValue: drug.remaining,\n                                            \"onUpdate:modelValue\": ($event: any) => ((drug.remaining) = $event),\n                                            onClick: ($event: any) => (_ctx.launchKeyPad(itemIndex, i))\n                                          }, null, 8, [\"modelValue\", \"onUpdate:modelValue\", \"onClick\"]))\n                                        : _createCommentVNode(\"\", true)\n                                    ]),\n                                    _: 2\n                                  }, 1024))\n                                }), 128))\n                              ]),\n                              _: 2\n                            }, 1024)\n                          ]))\n                        }), 128))\n                      ])\n                    ]),\n                    _hoisted_7,\n                    _createElementVNode(\"table\", _hoisted_8, [\n                      _hoisted_9,\n                      _hoisted_10,\n                      _hoisted_11,\n                      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.selectedDrugs, (drug, i) => {\n                        return (_openBlock(), _createElementBlock(\"tr\", {\n                          key: i,\n                          class: \"dispensation-row\"\n                        }, [\n                          _createElementVNode(\"td\", _hoisted_12, _toDisplayString(drug.drugName), 1),\n                          _createElementVNode(\"td\", _hoisted_13, _toDisplayString(drug.dispensed), 1),\n                          _createElementVNode(\"td\", _hoisted_14, _toDisplayString(drug.expectedRemaining), 1),\n                          _createElementVNode(\"td\", _hoisted_15, _toDisplayString(drug.adherence ? `${drug.adherence} %` : \"?\"), 1)\n                        ]))\n                      }), 128))\n                    ])\n                  ]))\n                : _createCommentVNode(\"\", true)\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_footer, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_toolbar, { color: \"dark\" }, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_button, {\n                size: \"large\",\n                color: \"danger\",\n                slot: \"start\",\n                onClick: _ctx.gotoPatientDashboard\n              }, {\n                default: _withCtx(() => [\n                  _createTextVNode(\" cancel \")\n                ]),\n                _: 1\n              }, 8, [\"onClick\"]),\n              _createVNode(_component_ion_button, {\n                size: \"large\",\n                color: \"primary\",\n                slot: \"end\",\n                onClick: _ctx.goToPrescription\n              }, {\n                default: _withCtx(() => [\n                  _createTextVNode(\" Change drugs \")\n                ]),\n                _: 1\n              }, 8, [\"onClick\"]),\n              _createVNode(_component_ion_button, {\n                size: \"large\",\n                color: \"success\",\n                slot: \"end\",\n                onClick: _ctx.onFinish\n              }, {\n                default: _withCtx(() => [\n                  _createTextVNode(\" Continue \")\n                ]),\n                _: 1\n              }, 8, [\"onClick\"])\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport ViewPort from \"@/components/DataViews/ViewPort.vue\";\nimport {\n  IonToolbar,\n  IonHeader,\n  IonContent,\n  IonRow,\n  IonCol,\n  IonInput,\n  IonButton,\n  modalController,\n  IonFooter,\n  IonPage,\n  IonCheckbox,\n} from \"@ionic/vue\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { BPManagementService, HTN_SESSION_KEY } from \"../../services/htn_service\";\nimport HisKeypadVue from \"@/components/Keyboard/HisKeypad.vue\";\nimport { optionsActionSheet } from \"@/utils/ActionSheets\"\nimport { find } from \"lodash\"\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: {\n    ViewPort,\n    IonToolbar,\n    IonHeader,\n    IonContent,\n    IonRow,\n    IonInput,\n    IonButton,\n    IonCol,\n    IonFooter,\n    IonPage,\n    IonCheckbox,\n  },\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n          this.HTN = new BPManagementService(this.patientID, this.providerID);\n          this.drugs = this.HTN.getDrugs();\n          await this.getCurrentDrugs();\n        }\n      },\n      immediate: true\n    },\n  },\n  data: () => {\n    return {\n      HTN: {} as any,\n      drugs: null as any,\n    };\n  },\n  methods: {\n    onFinish() {\n      this.selectNextAction()\n    },\n    goToPrescription() {\n      this.$router.push(`/art/encounters/bp_prescription/${this.patientID}`);\n    },\n    gotoTreatment() {\n      const htnDrugs = this.selectedDrugs.map((selected: any) =>  \n        find( BPManagementService.htnDrugReferences(), { 'drug_id': selected.drugID})\n      )\n      const data: any = {}\n      data[this.patientID] = htnDrugs\n      sessionStorage.setItem(HTN_SESSION_KEY.Prescription, JSON.stringify(data))\n      this.$router.push(`/art/encounters/prescriptions/${this.patientID}`)\n    },\n    async selectNextAction() {\n      const modal = await optionsActionSheet(\n        'Action confirmation',\n        'Please specify how to proceed with patient',\n        [\n          'Continue with current BP Drugs',\n          'Continue without BP Drugs',\n          'Change BP drugs'\n        ],\n        [\n          { name: 'Cancel', color: 'danger',  slot:'start'},\n          { name: 'Confirm', color: 'primary', slot:'end', role: 'action'}\n        ]\n      )\n      if (modal.selection && modal.action != 'Cancel') {\n        switch(modal.selection) {\n          case 'Continue without BP Drugs':\n            sessionStorage.removeItem(HTN_SESSION_KEY.Prescription)\n            return this.nextTask()\n          case 'Continue with current BP Drugs':\n            return this.gotoTreatment()\n          case 'Change BP drugs':\n            this.goToPrescription()\n        }\n      }\n    },\n    async getCurrentDrugs() {\n      const drugs = await this.HTN.getCurrentDrugs();\n      const lastDrugs = await this.HTN.getLastDrugs();\n      drugs.drugs.forEach((drug: any) => {\n        for (const key in this.drugs) {\n          this.drugs[key].drugs.forEach((element: any, index: any) => {\n            if (drug.drug_id === element.drugID) {\n              this.drugs[key].drugs[index].current = true;\n              this.drugs[key].drugs[index].selected = true;\n              this.drugs[key].selected = drug.drug_id;\n            }\n            const drugName = this.drugs[key].drugs[index].drugName;\n            if (Object.prototype.hasOwnProperty.call(lastDrugs, drugName)) {\n              this.drugs[key].drugs[index].expectedRemaining =\n                lastDrugs[drugName].remaining;\n              this.drugs[key].drugs[index].dispensed =\n                lastDrugs[drugName].value_numeric;\n            }\n          });\n        }\n      });\n    },\n    async launchKeyPad(d: any, index: any) {\n      const modal = await modalController.create({\n        component: HisKeypadVue,\n        backdropDismiss: false,\n        cssClass: \"keypad-modal\",\n        componentProps: {\n          strictNumbers: true,\n          onKeyPress: async (data: any) => {\n            const adh = await this.HTN.getAdherence(\n              this.drugs[d].drugs[index].drugID, data\n            )\n            this.drugs[d].drugs[index].adherence = adh.adherence;\n            this.drugs[d].drugs[index].remaining = data;\n          }\n        }\n      })\n      modal.present();\n    }\n  },\n  computed: {\n    selectedDrugs(): any {\n      return Object.values(this.drugs)\n        .map((d: any) => d.drugs)\n        .reduce((accum: any, cur: any) => accum.concat(cur), [])\n        .filter((d: any) => d.dispensed)\n    }\n  },\n})\n","import { render } from \"./BPAdherence.vue?vue&type=template&id=15839c59&scoped=true&ts=true\"\nimport script from \"./BPAdherence.vue?vue&type=script&lang=ts\"\nexport * from \"./BPAdherence.vue?vue&type=script&lang=ts\"\n\nimport \"./BPAdherence.vue?vue&type=style&index=0&id=15839c59&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-15839c59\"]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./BPAdherence.vue?vue&type=style&index=0&id=15839c59&scoped=true&lang=css\"","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}