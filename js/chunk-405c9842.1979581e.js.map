{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/ARVNumber.vue?aa66","webpack:///./src/apps/ART/views/encounters/ARVNumber.vue","webpack:///./src/apps/ART/views/encounters/ARVNumber.vue?0de6","webpack:///./src/services/identifier_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","patientHasARVNumber","currentArvNumber","prependValue","watch","ready","handler","arvNumber","patient","getArvNumber","a","split","replace","ProgramService","getNextSuggestedARVNumber","suggestedNumber","arv_number","getFields","immediate","methods","formData","newArvNumber","value","$router","back","IdentifierService","arvNumberExists","exists","toastWarning","updateARVNumber","createArvNumber","id","helpText","type","FieldType","TT_TEXT","validation","val","Validation","required","defaultValue","config","initialKb","artApp","HisApp","getActiveApp","programPatientIdentifiers","arvType","prefix","footerBtns","name","slot","color","onClick","__exports__","identifierType","this","Service","getJson","identifier"],"mappings":"uIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,IAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,OAAQV,EAAKU,OACbC,eAAgBX,EAAKY,SACrBC,aAAa,EACbC,sBAAuBd,EAAKe,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,0B,oKCE5BC,+BAAgB,CAC7BC,OAAQ,CAACC,QACTC,WAAY,CAAEC,wBACdC,KAAM,iBAAO,CACXC,qBAAqB,EACrBC,iBAAkB,GAClBC,aAAc,KAEhBC,MAAO,CACLC,MAAO,CACCC,QADD,SACSD,GAAU,qKACjBA,EADmB,CAAF,mDAEhBE,EAAY,EAAKC,QAAQC,eACd,YAAdF,EAHmB,iBAIdG,EAAIH,EAAUI,MAAM,KAC1B,EAAKT,iBAAmBQ,EAAE,GAAGE,QAAQ,WAAY,IACjD,EAAKT,aAAL,UAAuBO,EAAE,GAAzB,YAA+BA,EAAE,GAAjC,KACA,EAAKT,qBAAsB,EAPP,yCASWY,OAAeC,4BAT1B,QASdC,EATc,OAUpB,EAAKb,iBAAmBa,EAAgBC,WAAWJ,QAAQ,WAAY,IAVnD,QAYtB,EAAKvB,OAAS,EAAK4B,YAZG,+CAcxBC,WAAW,IAGfC,QAAS,CACD5B,SADC,SACQ6B,GAAa,mKACpBC,EAAeD,EAAS,cAAcE,MACzCD,IAAiB,EAAKb,QAAQC,eAFP,yCAE8B,EAAKc,QAAQC,QAF3C,uBAGLC,OAAkBC,gBAAgBL,GAH7B,UAGpBM,EAHoB,QAIvBA,EAJyB,CAAF,gBAIfC,eAAa,4BAA6B,KAJ3B,sCAOnB,EAAK3B,oBAPgB,CAAF,iCAQd,EAAKO,QAAQqB,gBAAgBR,GARf,iDASX,EAAKb,QAAQsB,gBAAgBT,GATlB,QAUtB,EAAKE,QAAQC,OAVS,sDAYtBI,eAAa,EAAD,IAZU,8DAgB5BX,UAjBO,WAiBE,WACP,MAAO,CACL,CACEc,GAAI,aACJC,SAAU,oBACVC,KAAMC,OAAUC,QAChBC,WAAY,SAACC,GAAD,OAAcC,OAAWC,SAASF,IAC9CG,aAAc,kBAAM,EAAKtC,kBACzBuC,OAAQ,CACNC,UAAW,MACXvC,aAAc,WACZ,GAAG,EAAKA,aAAc,OAAO,EAAKA,aAClC,IAAMwC,EAASC,OAAOC,eACtB,GAAIF,GAAUA,EAAOG,0BAA2B,CAC9C,IAAMC,EAAUJ,EAAOG,0BAA0B,cACjD,OAAOC,EAAQC,SAEjB,MAAO,IAETC,WAAY,CACV,CACEC,KAAM,kBACNC,KAAM,MACNC,MAAO,SACPC,QAAS,WAAF,8CAAE,WAAOjC,GAAP,iGACD,EAAKZ,QAAQqB,gBAAgB,WAD5B,OAEP,EAAKN,QAAQC,OAFN,2CAAF,sDAAE,Y,qBC3EzB,MAAM8B,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS5E,KAErD,gB,8LCCF+C,EAAb,wDAEI,iDACI,eACA,EAAK8B,gBAAkB,EAF3B,EAFJ,wDAgBI,WACI,OAAOC,KAAKD,iBAjBpB,+BAoBI,SAAkBtB,GACduB,KAAKD,eAAiBtB,IArB9B,sCAwBI,WACI,OAAOwB,OAAQC,QAAR,gCAAiD,CACpD,QAAWF,KAAKD,mBA1B5B,qCA8BI,SAAwBI,GACpB,OAAOF,OAAQC,QAAR,gCAAgD,CACnD,QAAWF,KAAKD,eAChB,WAAcI,OAjC1B,iCAOI,WACI,kEAAqB,+BAR7B,sFAWI,WAA6BpD,GAA7B,oRAC2FA,IAD3F,cACUP,EADV,yBAEWA,EAAK2B,QAFhB,gDAXJ,+DAAuC8B","file":"js/chunk-405c9842.1979581e.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { toastWarning } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport HisApp from \"@/apps/app_lib\"\nimport { IdentifierService } from \"@/services/identifier_service\";\nimport { ProgramService } from \"@/services/program_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    patientHasARVNumber: false,\n    currentArvNumber: \"\" as any,\n    prependValue: \"\" as any,\n  }),\n  watch: {\n    ready: {\n      async handler(ready: any) {\n        if (!ready) return\n        const arvNumber = this.patient.getArvNumber()\n        if(arvNumber !== \"Unknown\") {\n          const a = arvNumber.split('-')\n          this.currentArvNumber = a[2].replace(/^\\D+|\\s/g, \"\")\n          this.prependValue = `${a[0]}-${a[1]}-`\n          this.patientHasARVNumber = true\n        } else {\n          const suggestedNumber =  await ProgramService.getNextSuggestedARVNumber();\n          this.currentArvNumber = suggestedNumber.arv_number.replace(/^\\D+|\\s/g, \"\");\n        }\n        this.fields = this.getFields();\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      const newArvNumber = formData['arv_number'].value\n      if(newArvNumber === this.patient.getArvNumber()) return this.$router.back()\n      const exists = await IdentifierService.arvNumberExists(newArvNumber)\n      if(exists) toastWarning(\"ARV number already exists\", 5000)\n      else {\n        try {\n          if(this.patientHasARVNumber) \n            await this.patient.updateARVNumber(newArvNumber)\n          else await this.patient.createArvNumber(newArvNumber)\n          this.$router.back()\n        } catch (error) {\n          toastWarning(error)\n        }\n      }   \n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"arv_number\",\n          helpText: \"Update ARV Number\",\n          type: FieldType.TT_TEXT,\n          validation: (val: any) => Validation.required(val),\n          defaultValue: () => this.currentArvNumber,\n          config: {\n            initialKb: '0-9',\n            prependValue: () => {\n              if(this.prependValue) return this.prependValue\n              const artApp = HisApp.getActiveApp()\n              if (artApp && artApp.programPatientIdentifiers) {\n                const arvType = artApp.programPatientIdentifiers['ARV Number']\n                return arvType.prefix()\n              }\n              return ''\n            },\n            footerBtns: [\n              {\n                name: \"Void ARV Number\",\n                slot: \"end\",\n                color: 'danger',\n                onClick: async (formData: any) => {\n                  await this.patient.updateARVNumber(\"Unknown\")\n                  this.$router.back()\n                }\n              }\n            ]\n          },\n        }\n      ]\n    }\n  }\n});\n","import { render } from \"./ARVNumber.vue?vue&type=template&id=4ab459be&ts=true\"\nimport script from \"./ARVNumber.vue?vue&type=script&lang=ts\"\nexport * from \"./ARVNumber.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"./service\";\nimport ART from \"@/apps/ART/app\"\n\nexport interface DuplicateIdentifiersInterface {\n    count: number;\n    identifier: string;\n}\n\nexport class IdentifierService extends Service {\n    identifierType: number\n    constructor() {\n        super()\n        this.identifierType = -1\n    }\n \n    static getIdentifierTypes() {\n        return super.getJson('types/patient_identifiers')\n    }\n\n    static async arvNumberExists(arvNumber: string): Promise<boolean> {\n        const data = await super.getJson(`programs/${super.getProgramID()}/lookup_arv_number/${arvNumber}`)\n        return data.exists\n    }\n\n    getIdentifierType() {\n        return this.identifierType\n    }\n\n    setIdentifierType(type: number) {\n        this.identifierType = type\n    }\n\n    getDuplicateIndentifiers(): Promise<DuplicateIdentifiersInterface[]> {\n        return Service.getJson(`search/identifiers/duplicates`, {\n            'type_id': this.identifierType\n        })\n    }\n\n    getPatientsByIdentifier(identifier: string) {\n        return Service.getJson(`search/patients/by_identifier`,{\n            'type_id': this.identifierType,\n            'identifier': identifier\n        })\n    }\n}\n"],"sourceRoot":""}