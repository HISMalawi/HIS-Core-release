{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsCode.vue?298b","webpack:///./src/apps/HTS/views/encounters/HtsCode.vue","webpack:///./src/apps/HTS/views/encounters/HtsCode.vue?0a51","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/services/hts_art_initiation_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","HtsArtInitiationService","patientID","providerID","htsLinkageCodeField","immediate","methods","nextTask","linkageCode","id","helpText","type","FieldType","TT_TEXT_BANNER","init","async","getHtsCode","options","mapStrToOptions","config","footerBtns","name","slot","onClick","printHtsLinkageId","showKeyboard","isFilterDataViaApi","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","facts","age","gender","isEnrolledInProgam","village","district","currentTA","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","patientDashboardUrl","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","obs","resolveObs","computedData","status","enc","AppEncounterService","encounterTypeID","createEncounter","saveObservationList","callback","test","error","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","label","other","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","constructor","super","PrintoutService","code","printoutService","printLbl","Prop","sitePrefix"],"mappings":"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","file":"js/chunk-7b204f29.43e5ae70.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"View HTS Code\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        skipSummary: true,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { HtsArtInitiationService } from \"../../services/hts_art_initiation_service\";\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsArtInitiationService,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsArtInitiationService(\n            this.patientID,\n            this.providerID\n          );\n          this.fields = [this.htsLinkageCodeField()];\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    onFinish() {\n      this.nextTask();\n    },\n    htsLinkageCodeField() {\n      let linkageCode = \"\";\n      return {\n        id: \"linkage_code\",\n        helpText: \"LINKAGE CODE\",\n        type: FieldType.TT_TEXT_BANNER,\n        init: async () => {\n          linkageCode = await this.service.getHtsCode();\n          return true;\n        },\n        options: () => this.mapStrToOptions([linkageCode]),\n        config: {\n          footerBtns: [\n            {\n              name: \"Print\",\n              slot: \"end\",\n              onClick: async () =>\n                await this.service.printHtsLinkageId(linkageCode),\n            },\n          ],\n          showKeyboard: true,\n          isFilterDataViaApi: true,\n        },\n      };\n    },\n  },\n});\n","import { render } from \"./HtsCode.vue?vue&type=template&id=6477ace8&ts=true\"\nimport script from \"./HtsCode.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsCode.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            let created = false\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { PrintoutService } from '@/services/printout_service';\nimport Prop from \"@/apps/GLOBAL_APP/global_prop\";\nexport class HtsArtInitiationService extends AppEncounterService {\n  patientID: number\n  printoutService: PrintoutService = new PrintoutService()\n    \n  constructor(patientID: number, providerID = -1) {\n      super(patientID, 79, providerID);\n      this.patientID = patientID;\n  }\n\n  async printHtsLinkageId(code: string) {\n    await this.printoutService.printLbl(\n      `/patients/${this.patientID}/labels/print_hts_linkage_code/${code}`\n    );\n  }\n\n    async getHtsCode() {\n        return `${(await Prop.sitePrefix()) || 'FAC'}-HTS-${this.patientID}`\n    }\n}\n"],"sourceRoot":""}