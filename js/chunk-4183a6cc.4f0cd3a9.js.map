{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/Registration.vue?9fc0","webpack:///./src/apps/ART/services/registration_service.ts","webpack:///./src/apps/ART/views/encounters/Registration.vue","webpack:///./src/apps/ART/views/encounters/Registration.vue?50ba","webpack:///./src/apps/ART/services/vitals_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","ClinicRegistrationService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","mixins","StagingMixin","data","registration","prescription","dispensation","regimens","customRegimens","vitals","watch","ready","this","canShowStagingFields","VitalsService","showStagingWeightChart","getRegistrationFields","immediate","methods","formData","computedData","fObs","hts","patientType","PatientTypeService","createEncounter","savePatientType","hasStaging","submitStaging","saveObservationList","resolveObs","toastSuccess","nextTask","buildDateObs","conceptName","date","isEstimate","obs","match","buildValueText","buildValueDateEstimated","buildValueDate","hasLinkageCodeField","id","helpText","type","FieldType","TT_YES_NO","isRequired","condition","f","options","label","value","values","yesNoOptions","htsSerialNumber","TT_TEXT","has_linkage_code","finalComputedValue","v","tag","htsDataHiddenField","available","optionData","TT_HIDDEN","init","async","ProgramService","getProgramSummary","hiv_status","toDate","test_result_date","htc_serial_number","other","buildValueCoded","hiv_status_date","getLocationName","ever_received_art","last_date_taken_drugs","obsCondition","error","console","defaultValue","summaryMapValue","filter","d","map","TT_MULTIPLE_YES_NO","validation","validateSeries","Validation","required","anyEmpty","computedValue","forEach","push","isEmpty","followup_agreement","TT_SELECT","generateDateFields","minDate","patient","getBirthdate","maxDate","staging","getDate","received_arvs","estimation","allowUnknown","computeValue","yesNoUnknownOptions","year_date_last_taken_arvs","duration","taken_art_in_last_two_months","HisDate","getDateBeforeByDays","val","ever_registered_at_art_clinic","_","getFacilities","config","showKeyboard","isFilterDataViaApi","initStaging","beforeNext","age","dayjs","diff","setAge","stagingFacts","ageInMonths","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","setDate","TT_NUMBER","has_transfer_letter","buildValueNumber","isNumber","rangeOf","unload","s","weight","height","bmi","BMIService","getBMI","getGender","getAge","isPedaid","medianWh","getMedianWeightHeight","weightPercentile","parseFloat","e","fullValue","modifier","isNotEmptyandFloat","customKeyboard","getStagingFields","new_cd4_percent_available","parseInt","toString","substring","onValue","cd4CountIsValid","toastWarning","CD4_COUNT_PAD_LO","infoActionSheet","name","color","slot","disabled","type_of_confirmatory_hiv_test","timeElapsed","action","confirmatory_hiv_test_location","getStagingSummaryField","__exports__","isNotEmptyandNumber","vital","checkMinMax","min","max","p","length","validateAll","j","validator","isArray","mergeErrors","errors","holder","element","isValidBPReading","isValidBP","split","bpSystolic","bpDiastolic","emptyErrors","minErrors"],"mappings":"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","file":"js/chunk-4183a6cc.4f0cd3a9.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ClinicRegistrationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 9, providerID) //TODO: Use encounter type reference name'\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport StagingMixin from \"@/apps/ART/views/encounters/StagingMixin.vue\"\nimport {ClinicRegistrationService} from \"@/apps/ART/services/registration_service\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { toastWarning, toastSuccess} from \"@/utils/Alerts\"\nimport { VitalsService } from \"@/apps/ART/services/vitals_service\";\nimport { BMIService } from \"@/services/bmi_service\"\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport HisDate from \"@/utils/Date\"\nimport dayjs from \"dayjs\";\nimport { isEmpty } from 'lodash'\nimport { toDate } from '@/utils/Strs'\nimport { ProgramService } from '@/services/program_service'\nimport { PatientTypeService } from '../../services/patient_type_service'\n\nexport default defineComponent({\n    mixins: [StagingMixin],\n    data: () => ({\n        registration: {} as any,\n        prescription: {} as any,\n        dispensation: {} as any,\n        regimens: [] as Option[],\n        customRegimens: [] as Option[],\n        vitals: {} as any,\n    }),\n    watch: {\n        ready: {\n            async handler(ready: any) {\n                if (!ready) return\n                // Hide staging fields defined in StagingMixin by Default\n                this.canShowStagingFields = false\n                this.registration = new ClinicRegistrationService(this.patientID, this.providerID)\n                this.vitals = new VitalsService(this.patientID, this.providerID)\n                this.showStagingWeightChart = false\n                this.fields = this.getRegistrationFields()\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any) {\n            const fObs = {...computedData}\n            if (formData.hts != null) {\n                const patientType  = new PatientTypeService(this.patientID, this.providerID)\n                await patientType.createEncounter()\n                await patientType.savePatientType('New patient')\n            }\n\n            await this.registration.createEncounter()\n\n            if (this.hasStaging(formData)) {\n                await this.submitStaging(computedData)\n                await this.vitals.createEncounter()\n                await this.vitals.saveObservationList(\n                    (await this.resolveObs(fObs, 'vitals'))\n                )\n            }\n\n            await this.registration.saveObservationList(\n                (await this.resolveObs(fObs, 'reg'))\n            )\n\n            toastSuccess('Clinic registration complete!')\n\n            this.nextTask()\n        },\n        buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n            let obs = {}\n            if (date.match(/unknown/i)) {\n                obs = this.registration.buildValueText(conceptName, 'Unknown')\n            } else if (isEstimate) {\n                obs = this.registration.buildValueDateEstimated(conceptName, date)\n            } else {\n                obs = this.registration.buildValueDate(conceptName, date)\n            }\n            return obs\n        },\n        hasLinkageCodeField(): Field {\n            return {\n                id: \"has_linkage_code\",\n                helpText: 'HTS Linkage code',\n                type: FieldType.TT_YES_NO,\n                isRequired: () => true,\n                condition: (f: any) => f.hts === null,\n                options: () => [\n                    {\n                        label: \"Does client have linkage code?\",\n                        value: \"\",\n                        values: this.yesNoOptions(),\n                    }\n                ]\n            }\n        },\n        htsSerialNumber(): Field {\n            return {\n                id: 'hts_serial_number',\n                helpText: 'HTS Linkage code',\n                type: FieldType.TT_TEXT,\n                isRequired: () => true,\n                condition: (f: any) => f.has_linkage_code === 'Yes',\n                finalComputedValue: (v: Option) => {\n                    return {\n                        tag: 'reg',\n                        obs: this.registration.buildValueText('HTC Serial number', v.value)\n                    }\n                }\n            }\n        },\n        htsDataHiddenField(): Field {\n            let available = false\n            let optionData: any = []\n            return {\n                id: 'hts',\n                helpText: 'HTS Information',\n                type: FieldType.TT_HIDDEN,\n                init: async () => {\n                    try {                        \n                        const data: any = await ProgramService.getProgramSummary(this.patientID, 18)\n                        available = data.hiv_status === 'Positive'\n                        if (!available) return true\n                        optionData = [\n                            { \n                                label: 'HIV Status',\n                                value: data.hiv_status\n                            },\n                            { \n                                label: 'Result date',\n                                value: toDate(data.test_result_date),\n                            },\n                            {\n                                label: 'HTS Number',\n                                value: data.htc_serial_number,\n                                other: {\n                                    obs: () => this.registration.buildValueText(\n                                        'HTC Serial number',\n                                        data.htc_serial_number\n                                    )\n                                }\n                            },\n                            { \n                                label: 'Confirmatory test type', \n                                value: 'Rapid test',\n                                other: {\n                                    obs: () => this.registration.buildValueCoded(\n                                        'Confirmatory hiv test type',\n                                        'HIV rapid test'\n                                    )\n                                }\n                            },\n                            {\n                                label: 'Confirmatory test date',\n                                value: toDate(data.hiv_status_date),\n                                other: {\n                                    obs: () => this.registration.buildValueDate(\n                                        'Confirmatory HIV test date', \n                                        data.hiv_status_date\n                                    )\n                                }\n                            },\n                            {\n                                label: 'Confirmatory test location',\n                                value: ClinicRegistrationService.getLocationName(),\n                                other: {\n                                    obs: () => this.registration.buildValueText(\n                                        'Confirmatory HIV test location',\n                                        ClinicRegistrationService.getLocationName()\n                                    )\n                                }\n                            },\n                            { \n                                label: 'Received ART/Prophylaxis before?', \n                                value: data.ever_received_art,\n                                other: {\n                                    obs: () => this.registration.buildValueCoded(\n                                        'Ever received ART', data.ever_received_art\n                                    )\n                                }\n                            },\n                            { \n                                label: 'Last time taken drugs', \n                                value: toDate(data.last_date_taken_drugs),\n                                other: {\n                                    obs: () => this.registration.buildValueDate(\n                                        'Date ART last taken', \n                                        data.last_date_taken_drugs\n                                    ),\n                                    obsCondition: () => data.ever_received_art === 'Yes'\n                                }\n                            }\n                        ]\n                    } catch (error) {\n                        console.error(error)\n                        return false\n                    }\n                    return true\n                },\n                defaultValue() {\n                    return optionData\n                },\n                summaryMapValue: (v: Option) => {\n                    return v\n                },\n                finalComputedValue: (v: Option[]) => {\n                    return {\n                        tag: 'reg',\n                        obs: v.filter(d => d?.other?.obs && (typeof d.other.obsCondition === 'function' \n                                ? d.other.obsCondition()\n                                : true))\n                            .map(d => d.other.obs())\n                    }\n                },\n                condition: () => available\n            }\n        },\n        getRegistrationFields() {\n            return [\n                {\n                    id: 'followup_agreement',\n                    helpText: 'Agrees to follow-up',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    summaryMapValue: ({value, label}: Option) => ({\n                        value,\n                        label: `${label} followup`\n                    }),\n                    validation: (v: any) => this.validateSeries([\n                       () => Validation.required(v), \n                       () => Validation.anyEmpty(v)\n                    ]),\n                    computedValue: (d: Array<Option>) => {\n                        const obs: any = []\n                        d.forEach(({ label, value }: Option) => {\n                            obs.push(this.registration.buildValueCoded(label, value))\n                            obs.push(this.registration.buildValueCoded('Agrees to followup', label))\n                        })\n                        return { tag:'reg', obs }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.followup_agreement)) {\n                            return f.followup_agreement\n                        } else {\n                            return [\n                                {\n                                    label: 'Phone',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                    }\n                                },\n                                {\n                                    label: 'Home visit',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions()\n                                    }\n                                }\n                            ] \n                        }\n                    }\n                },\n                this.htsDataHiddenField(),\n                this.hasLinkageCodeField(),\n                this.htsSerialNumber(),\n                {\n                    id: \"has_linkage_code\",\n                    helpText: 'HTS Linkage number confirmation',\n                    type: FieldType.TT_YES_NO,\n                    summaryMapValue: (v: any) => {\n                        return {\n                            label: \"Has HTS Linkage number?\",\n                            value: v\n                        }\n                    },\n                    validation: (v: string) => Validation.required(v),\n                    options: () => [\n                        {\n                            label: \"Does client have an HTS Linkage number?\",\n                            value: \"\",\n                            values: this.yesNoOptions(),\n                        }\n                    ]\n                },\n                {\n                    id: 'hts_serial_number',\n                    helpText: 'HTS Linkage Number',\n                    type: FieldType.TT_TEXT,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => f.has_linkage_code === 'Yes',\n                    computedValue: (v: Option) => {\n                        return {\n                            tag: 'reg',\n                            obs: this.registration.buildValueText('HTC Serial number', v.value)\n                        }\n                    }\n                },\n                {\n                    id: 'received_arvs',\n                    helpText: 'Ever received ARVs for treatment or prophylaxis?',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({value}: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Ever received ART', value\n                        )\n                    }),\n                    condition: (f: any) => f.hts === null,\n                    validation: (v: any) => Validation.required(v),\n                    options: () => this.yesNoOptions()\n                },\n                ...generateDateFields({\n                    id: 'date_last_taken_arvs',\n                    helpText: 'Last taken ARVS',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) => f.received_arvs.value === 'Yes',\n                    estimation: {\n                        allowUnknown: true\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Date ART last taken', date, isEstimate) \n                        }\n                    }\n                }, this.registration.getDate()),\n                {\n                    id: 'taken_art_in_last_two_months',\n                    helpText: 'Taken ARVs in the last two months?',\n                    type: FieldType.TT_SELECT,\n                    validation: (v: any) => Validation.required(v),\n                    computedValue: ({value}: Option) => {\n                        return {\n                            tag:'reg',\n                            obs: [\n                                this.registration.buildValueCoded(\n                                    'Has the patient taken ART in the last two months', value\n                                )\n                            ]\n                        }\n                    },\n                    options: () => this.yesNoUnknownOptions(),\n                    condition: (f: any) => f.year_date_last_taken_arvs.value === 'Unknown'\n                },\n                {\n                    id: 'taken_art_in_last_two_weeks',\n                    helpText: \"Taken ARV's in the last two weeks?\",\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({ value }: Option, f: any) => {\n                        let date = ''\n                        const obs = []\n                        let duration = -1\n\n                        if (value === 'Yes') {\n                            duration = 14\n                        } else if (f.taken_art_in_last_two_months.value === 'Yes') {\n                            duration = 60\n                        }\n\n                        if (duration > 0) {\n                            date = HisDate.getDateBeforeByDays(this.registration.getDate(), duration)\n                            obs.push(this.registration.buildValueDateEstimated('Date ART last taken', date))\n                        }\n                        return {\n                            date,\n                            tag:'reg',\n                            obs: [\n                                ...obs,\n                                this.registration.buildValueCoded(\n                                    'Has the patient taken ART in the last two weeks', value\n                                )\n                            ]\n                        }\n                    },\n                    validation: (v: any) => Validation.required(v),\n                    condition: (f: any) => f.taken_art_in_last_two_months.value === 'Yes',\n                    options: () => this.yesNoUnknownOptions()\n                },\n                {\n                    id: 'ever_registered_at_art_clinic',\n                    helpText: 'Ever registered at an ART clinic?',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Ever registered at ART clinic', value\n                        )\n                    }),\n                    validation: (v: any) => Validation.required(v),\n                    condition: (f: any) => f.received_arvs.value === 'Yes',\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'location_of_art_initialization',\n                    helpText: 'Location of ART initiation',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({label}: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'Location of ART initiation', label\n                        )\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    options: (_: any, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                ...generateDateFields({\n                    id: 'date_started_art',\n                    helpText: 'Started ART',\n                    required: true,\n                    init: async () => {\n                        await this.initStaging(this.patient)\n                        return true\n                    },\n                    beforeNext: (date: string) => {\n                        const age = dayjs(date).diff(this.patient.getBirthdate(), 'years')\n                        this.staging.setAge(age)\n                        this.stagingFacts.age = age\n                        this.stagingFacts.ageInMonths = age * 12\n                        return true\n                    },\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        this.staging.setDate(date)\n                        this.vitals.setDate(date)\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Date ART started', date, isEstimate) \n                        }\n                    },\n                }, this.registration.getDate()),\n                {\n                    id: 'previous_art_number',\n                    helpText: 'ART number at previous location',\n                    type: FieldType.TT_TEXT,\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    computedValue: (d: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'ART number at previous location', d.value\n                        )\n                    }),\n                    validation: (val: Option) => Validation.required(val)\n                },\n                {\n                    id: 'has_transfer_letter',\n                    helpText: 'Has staging information?',\n                    type: FieldType.TT_SELECT,\n                    validation: (v: any) => Validation.required(v),\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Has transfer letter', value\n                        )\n                    }),\n                    options: () => this.yesNoOptions(),\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                },\n                {\n                    id: 'height',\n                    helpText: 'Height (CM)',\n                    type: FieldType.TT_NUMBER,\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    computedValue: ({ value }: Option) => ({\n                        tag:'vitals',\n                        obs: this.vitals.buildValueNumber('Height', value)\n                    }),\n                    validation: (val: any) => this.validateSeries([\n                        () => Validation.required(val),\n                        () => Validation.isNumber(val),\n                        () => Validation.rangeOf(val, 40, 222)\n                    ])\n                },\n                {\n                    id: 'weight',\n                    helpText: 'Weight (Kg)',\n                    type: FieldType.TT_TEXT,\n                    unload: async (d: any, s: string, f: any) => {\n                        const weight = f.weight.value\n                        const height = f.height.value\n                        const bmi = await BMIService.getBMI(\n                            weight, height, \n                            this.patient.getGender(),\n                            this.patient.getAge()\n                        )\n\n                        this.stagingFacts.bmi = bmi['index']\n\n                        if (!this.staging.isPedaid()) return\n\n                        const medianWh = await this.patient.getMedianWeightHeight()\n\n                        try {\n                            //TODO: this calculation is already defined in patient_service.. must refactor it to make it reusable here\n                            this.stagingFacts.weightPercentile = parseFloat(weight) / (parseFloat(medianWh[\"weight\"])) * 100\n                        } catch (e) {\n                            this.stagingFacts.weightPercentile = 0\n                        }\n                    },\n                    computedValue: ({ value }: Option) => ({\n                        tag:'vitals',\n                        obs: this.vitals.buildValueNumber('weight', value)\n                    }),\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    validation: (val: any) => this.validateSeries([\n                        () => {\n                            const fullValue = {\n                                ...val, other: { modifier: '.' }\n                            }\n                            return this.vitals.isNotEmptyandFloat(fullValue)\n                        },\n                        () => Validation.rangeOf(val, 1, 300)\n                    ]),\n                    config: {\n                        customKeyboard: [\n                            [\n                                ['1', '2', '3', ''],\n                                ['4', '5', '6', ''],\n                                ['7', '8', '9', '.'],\n                                ['',  '0', '' , '']\n                            ],\n                            [\n                                ['Delete']\n                            ]\n                        ]\n                    }\n                },\n                /*** \n                    Start Staging Fields\n                ***/\n                ...this.getStagingFields(),\n                /** \n                    End Staging Fields\n                ***/\n                {\n                    id: 'new_cd4_percent_available',\n                    helpText: 'CD4 percent available',\n                    type: FieldType.TT_SELECT,\n                    options: () => this.yesNoOptions(),\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    validation: (val: any) => Validation.required(val)\n                },\n                {\n                    id: 'cd4_percent',\n                    helpText: 'CD4 Percent',\n                    type: FieldType.TT_TEXT,\n                    condition: (f: any) => f.new_cd4_percent_available.value === 'Yes',\n                    computedValue: ({ value }: Option) => ({\n                        tag:'staging',\n                        obs: this.registration.buildValueNumber(\n                            'CD4 percent', parseInt(value.toString().substring(1)), '%'\n                        )\n                    }),\n                    onValue: (d: Option) => {\n                        if (d.value && !this.staging.cd4CountIsValid(d.value)) {\n                            toastWarning('Cd4 percentage invalid. Use one modifier or start with either of these symbols: >, < or =')\n                            return false\n                        }\n                        return true\n                    },\n                    validation: (val: any) => Validation.required(val),\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Delete']\n                            ]\n                        ]\n                    }\n                },\n                {\n                    id: 'type_of_confirmatory_hiv_test',\n                    helpText: 'Confirmatory HIV test',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: any) => Validation.required(val),\n                    condition: (f: any) => f.hts === null,\n                    onValue: async (val: Option) => {\n                        if (val.value === 'Not done') {\n                            await infoActionSheet(\n                                'Reminder',\n                                'UNKNOWN HIV CONFIRMATORY TEST',\n                                'Please arrange for a confirmatory test',\n                                [\n                                    { name: 'Agreed', color: 'success', slot: 'start'}\n                                ]\n                            )\n                        }\n                        return true\n                    },\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Confirmatory hiv test type', value\n                        )\n                    }),\n                    options: (f: any) => ([\n                        { label: 'Rapid antibody test', value: 'HIV rapid test'},\n                        { label: 'DNA PCR', value: 'HIV DNA polymerase chain reaction'},\n                        { label: 'Not done', value: 'Not done', disabled: f.has_linkage_code === 'Yes' }\n                    ])\n                },\n                {\n                    id: 'confirmatory_hiv_test_location',\n                    helpText: 'Location of confirmatory HIV test',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: (d: any) => (d.ever_registered_at_art_clinic && d.ever_registered_at_art_clinic.value) === \"Yes\"? '' : ClinicRegistrationService.getLocationName(),\n                    computedValue: (d: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'Confirmatory HIV test location', d.label\n                        ) \n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    condition: (f: any) => f.type_of_confirmatory_hiv_test.value != 'Not done',\n                    options: (_: any, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                ...generateDateFields({\n                    id: 'date_of_confirmatory_hiv_test',\n                    helpText: 'Confirmatory HIV test',\n                    beforeNext: async (date: string, formData: any) => {\n                        if (formData.received_arvs.value != 'Yes') {\n                            const timeElapsed = dayjs(this.staging.getDate()).diff(date, 'days')\n                            if (timeElapsed >= 20) {\n                                const action = await infoActionSheet(\n                                    'Data inconsistency warning',\n                                    `Confirmatory Date for newly initiated ART patient is ${timeElapsed} days ago`,\n                                    'Are you sure this is accurate?',\n                                    [\n                                        { name: 'No, Re-enter date', slot: 'start', color: 'success'},\n                                        { name: 'Yes, its accurate', slot: 'end', color: 'danger'}\n                                    ]\n                                )\n                                return action === 'Yes, its accurate'\n                            }\n                        }\n                        return true\n                    },\n                    condition: (f: any) => f.confirmatory_hiv_test_location.value,\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Confirmatory HIV test date', date, isEstimate) \n                        }\n                    },\n                }, this.registration.getDate()),\n                this.getStagingSummaryField('Staging summary')\n            ]\n        }\n    }\n})\n","import { render } from \"./Registration.vue?vue&type=template&id=4f5fcafc&ts=true\"\nimport script from \"./Registration.vue?vue&type=script&lang=ts\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/brian/projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { isArray } from \"lodash\";\nimport { Option } from '@/components/Forms/FieldInterface';\nexport class VitalsService extends AppEncounterService{\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 6, providerID);\n  }\n  isNotEmptyandNumber(vital: Option) {\n    return `${vital.value}`.match(/^-?\\d+\\.?\\d*$/) ? null : [`Invalid entry for ${vital.label}`]\n  }\n  isNotEmptyandFloat(vital: Option) {\n    return `${vital.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/) \n      ? null \n      : [`Invalid entry for ${vital.label}. Don't forget to add a decimal. e.g. 56.2 ${vital.other.modifier}`]\n  }\n  checkMinMax(val: Option, min: number, max: number) {\n    const p = [];\n    if (parseFloat(`${val.value}`) < min) {\n      p.push([`${val.label} entered is less than minimum ${min} ${val?.other?.modifier || ''}`])\n    }\n    if (parseFloat(`${val.value}`) > max) {\n      p.push([`${val.label} entered is greater than maximum ${max} ${val?.other?.modifier || ''}`])\n    }\n    return p.length > 0 ? p : null;\n  }\n  validateAll(vitals: Option[]) {\n    const p: any = [];\n    vitals.map((vital: any) => {\n      const j = this.validator(vital);\n      return isArray(j) ? p.push(j) : null\n    })\n    return p.length > 0 ? p : null;\n  }\n\n  mergeErrors(errors: any[]) {\n    const holder: any = [];\n    errors.forEach(element => {\n      if (isArray(element)) {\n        holder.push(element)\n      }\n    });\n    return holder.length > 0 ? holder : null\n  }\n  isValidBPReading(vital: any) {\n    const p = [];\n    const isValidBP =  `${vital.value}`.match(/^\\d{1,3}\\/\\d{1,3}$/g) ? null : ['Invalid BP reading']\n    p.push(isValidBP);\n    if(isValidBP == null) {\n      const value = `${vital.value}`.split('/');\n      \n      const bpSystolic = {\n        label: 'Systolic',\n        value: value[0]\n      };\n      const bpDiastolic = {\n        label: 'Diastolic',\n        value: value[1]\n      };\n      p.push(this.checkMinMax(bpDiastolic, 30, 200))\n      p.push(this.checkMinMax(bpSystolic, 40, 250))\n    }\n    return this.mergeErrors(p)\n  }\n  validator(vital: Option) {\n    const values = [\n      {\n        name: \"Weight\",\n        validator: (val: Option) => {\n          const emptyErrors = this.isNotEmptyandFloat(val);\n          const minErrors = this.checkMinMax(val, 2.0, 250.0);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      },\n      {\n        name: \"Height\",\n        validator: (val: Option) => {\n          const errors = []\n          errors.push(this.isNotEmptyandNumber(val))\n          errors.push(this.checkMinMax(val, 40, 220))\n          return this.mergeErrors(errors); \n        },\n      }, {\n        name: \"BP\",\n        validator: (val: any) => {\n          return this.isValidBPReading(val)\n        },\n      }, {\n        name: \"Temp\",\n        validator: (val: any) => {\n          const emptyErrors = this.isNotEmptyandNumber(val);\n          const minErrors = this.checkMinMax(val, 30, 42);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      }, {\n        name: \"SP02\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 40, 100);\n          return this.mergeErrors([minErrors]); \n        },\n      }, {\n        name: \"Pulse\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 50, 120);\n          return this.mergeErrors([minErrors]); \n        },\n      }\n    ]\n    const v = values.filter(element => {\n      return element.name === vital.label;\n    });\n    if (v.length > 0) {\n      return v[0].validator(vital);\n    }\n    return null\n  }\n}"],"sourceRoot":""}