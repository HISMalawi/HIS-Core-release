{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/Registration.vue?5eb9","webpack:///./src/apps/ART/views/encounters/Registration.vue","webpack:///./src/apps/ART/views/encounters/Registration.vue?15b0","webpack:///./src/apps/ART/services/registration_service.ts","webpack:///./src/apps/ART/services/vitals_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","defineComponent","mixins","StagingMixin","data","registration","prescription","dispensation","regimens","customRegimens","vitals","watch","ready","handler","canShowStagingFields","ClinicRegistrationService","patientID","providerID","VitalsService","showStagingWeightChart","getRegistrationFields","immediate","methods","formData","computedData","fObs","createEncounter","hasStaging","submitStaging","resolveObs","saveObservationList","toastSuccess","nextTask","buildDateObs","conceptName","date","isEstimate","obs","match","this","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","type","FieldType","TT_MULTIPLE_YES_NO","summaryMapValue","value","label","validation","v","validateSeries","Validation","required","anyEmpty","computedValue","d","forEach","push","buildValueCoded","tag","options","f","isEmpty","followup_agreement","other","values","yesNoOptions","TT_SELECT","generateDateFields","minDate","patient","getBirthdate","maxDate","staging","getDate","condition","received_arvs","estimation","allowUnknown","computeValue","yesNoUnknownOptions","year_date_last_taken_arvs","duration","taken_art_in_last_two_months","HisDate","getDateBeforeByDays","val","ever_registered_at_art_clinic","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","unload","state","age","dayjs","date_started_art","diff","setAge","stagingFacts","ageInMonths","getAge","getAgeInMonths","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","setDate","TT_TEXT","TT_NUMBER","init","initStaging","has_transfer_letter","buildValueNumber","isNumber","rangeOf","s","weight","height","BMIService","getBMI","getGender","bmi","isPedaid","getMedianWeightHeight","medianWh","weightPercentile","parseFloat","e","fullValue","modifier","isNotEmptyandFloat","customKeyboard","getStagingFields","new_cd4_percent_available","parseInt","toString","substring","onValue","cd4CountIsValid","toastWarning","CD4_COUNT_PAD_LO","infoActionSheet","name","color","slot","defaultValue","getLocationName","type_of_confirmatory_hiv_test","beforeNext","timeElapsed","action","confirmatory_hiv_test_location","getStagingSummaryField","__exports__","AppEncounterService","vital","min","max","p","length","map","j","validator","isArray","errors","holder","element","isValidBP","split","bpSystolic","bpDiastolic","checkMinMax","mergeErrors","emptyErrors","minErrors","isNotEmptyandNumber","isValidBPReading"],"mappings":"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","file":"js/chunk-60c91e8c.1de871c2.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport StagingMixin from \"@/apps/ART/views/encounters/StagingMixin.vue\"\nimport {ClinicRegistrationService} from \"@/apps/ART/services/registration_service\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { toastWarning, toastSuccess} from \"@/utils/Alerts\"\nimport { VitalsService } from \"@/apps/ART/services/vitals_service\";\nimport { BMIService } from \"@/services/bmi_service\"\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport HisDate from \"@/utils/Date\"\nimport dayjs from \"dayjs\";\nimport { isEmpty } from 'lodash'\n\nexport default defineComponent({\n    mixins: [StagingMixin],\n    data: () => ({\n        registration: {} as any,\n        prescription: {} as any,\n        dispensation: {} as any,\n        regimens: [] as Option[],\n        customRegimens: [] as Option[],\n        vitals: {} as any,\n    }),\n    watch: {\n        ready: {\n            async handler(ready: any) {\n                if (!ready) return\n                // Hide staging fields defined in StagingMixin by Default\n                this.canShowStagingFields = false\n                this.registration = new ClinicRegistrationService(this.patientID, this.providerID)\n                this.vitals = new VitalsService(this.patientID, this.providerID)\n                this.showStagingWeightChart = false\n                this.fields = this.getRegistrationFields()\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any) {\n            const fObs = {...computedData}\n\n            await this.registration.createEncounter()\n\n            if (this.hasStaging(formData)) {\n                await this.submitStaging(computedData)\n                await this.vitals.createEncounter()\n                await this.vitals.saveObservationList(\n                    (await this.resolveObs(fObs, 'vitals'))\n                )\n            }\n\n            await this.registration.saveObservationList(\n                (await this.resolveObs(fObs, 'reg'))\n            )\n\n            toastSuccess('Clinic registration complete!')\n\n            this.nextTask()\n        },\n        buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n            let obs = {}\n            if (date.match(/unknown/i)) {\n                obs = this.registration.buildValueText(conceptName, 'Unknown')\n            } else if (isEstimate) {\n                obs = this.registration.buildValueDateEstimated(conceptName, date)\n            } else {\n                obs = this.registration.buildValueDate(conceptName, date)\n            }\n            return obs\n        },\n        getRegistrationFields() {\n            return [\n                {\n                    id: 'followup_agreement',\n                    helpText: 'Agrees to follow-up',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    summaryMapValue: ({value, label}: Option) => ({\n                        value,\n                        label: `${label} followup`\n                    }),\n                    validation: (v: any) => this.validateSeries([\n                       () => Validation.required(v), \n                       () => Validation.anyEmpty(v)\n                    ]),\n                    computedValue: (d: Array<Option>) => {\n                        const obs: any = []\n                        d.forEach(({ label, value }: Option) => {\n                            obs.push(this.registration.buildValueCoded(label, value))\n                            obs.push(this.registration.buildValueCoded('Agrees to followup', label))\n                        })\n                        return { tag:'reg', obs }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.followup_agreement)) {\n                            return f.followup_agreement\n                        } else {\n                            return [\n                                {\n                                    label: 'Phone',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                    }\n                                },\n                                {\n                                    label: 'Home visit',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions()\n                                    }\n                                }\n                            ] \n                        }\n                    }\n                },\n                {\n                    id: 'received_arvs',\n                    helpText: 'Ever received ARVs for treatment or prophylaxis?',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({value}: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Ever received ART', value\n                        )\n                    }),\n                    validation: (v: any) => Validation.required(v),\n                    options: () => this.yesNoOptions()\n                },\n                ...generateDateFields({\n                    id: 'date_last_taken_arvs',\n                    helpText: 'Last taken ARVS',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) => f.received_arvs.value === 'Yes',\n                    estimation: {\n                        allowUnknown: true\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Date ART last taken', date, isEstimate) \n                        }\n                    }\n                }, this.registration.getDate()),\n                {\n                    id: 'taken_art_in_last_two_months',\n                    helpText: 'Taken ARVs in the last two months?',\n                    type: FieldType.TT_SELECT,\n                    validation: (v: any) => Validation.required(v),\n                    computedValue: ({value}: Option) => {\n                        return {\n                            tag:'reg',\n                            obs: [\n                                this.registration.buildValueCoded(\n                                    'Has the patient taken ART in the last two months', value\n                                )\n                            ]\n                        }\n                    },\n                    options: () => this.yesNoUnknownOptions(),\n                    condition: (f: any) => f.year_date_last_taken_arvs.value === 'Unknown'\n                },\n                {\n                    id: 'taken_art_in_last_two_weeks',\n                    helpText: \"Taken ARV's in the last two weeks?\",\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({ value }: Option, f: any) => {\n                        let date = ''\n                        const obs = []\n                        let duration = -1\n\n                        if (value === 'Yes') {\n                            duration = 14\n                        } else if (f.taken_art_in_last_two_months.value === 'Yes') {\n                            duration = 60\n                        }\n\n                        if (duration > 0) {\n                            date = HisDate.getDateBeforeByDays(this.registration.getDate(), duration)\n                            obs.push(this.registration.buildValueDateEstimated('Date ART last taken', date))\n                        }\n                        return {\n                            date,\n                            tag:'reg',\n                            obs: [\n                                ...obs,\n                                this.registration.buildValueCoded(\n                                    'Has the patient taken ART in the last two weeks', value\n                                )\n                            ]\n                        }\n                    },\n                    validation: (v: any) => Validation.required(v),\n                    condition: (f: any) => f.taken_art_in_last_two_months.value === 'Yes',\n                    options: () => this.yesNoUnknownOptions()\n                },\n                {\n                    id: 'ever_registered_at_art_clinic',\n                    helpText: 'Ever registered at an ART clinic?',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Ever registered at ART clinic', value\n                        )\n                    }),\n                    validation: (v: any) => Validation.required(v),\n                    condition: (f: any) => f.received_arvs.value === 'Yes',\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'location_of_art_initialization',\n                    helpText: 'Location of ART initiation',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({label}: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'Location of ART initiation', label\n                        )\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    options: (_: any, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                ...generateDateFields({\n                    id: 'date_started_art',\n                    helpText: 'Started ART',\n                    required: true,\n                    unload: (d: any, state: string, f: any, computedData: any) => {\n                        if (state === 'next') {\n                            const age = dayjs(computedData.date_started_art.date)\n                                .diff(this.patient.getBirthdate(), 'years')\n                            this.staging.setAge(age)\n                            this.stagingFacts.age = age\n                            this.stagingFacts.ageInMonths = age * 12\n                        } else {\n                            this.staging.setAge(this.patient.getAge())\n                            this.stagingFacts.age = this.patient.getAge()\n                            this.stagingFacts.ageInMonths = this.patient.getAgeInMonths()\n                        }\n                    },\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        this.staging.setDate(date)\n                        this.vitals.setDate(date)\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Date ART started', date, isEstimate) \n                        }\n                    },\n                }, this.registration.getDate()),\n                {\n                    id: 'previous_art_number',\n                    helpText: 'ART number at previous location',\n                    type: FieldType.TT_TEXT,\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    computedValue: (d: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'ART number at previous location', d.value\n                        )\n                    }),\n                    validation: (val: Option) => Validation.required(val)\n                },\n                {\n                    id: 'has_transfer_letter',\n                    helpText: 'Has staging information?',\n                    type: FieldType.TT_SELECT,\n                    validation: (v: any) => Validation.required(v),\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Has transfer letter', value\n                        )\n                    }),\n                    options: () => this.yesNoOptions(),\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                },\n                {\n                    id: 'height',\n                    helpText: 'Height (CM)',\n                    type: FieldType.TT_NUMBER,\n                    init: async () => {\n                        await this.initStaging(this.patient)\n                        return true\n                    },\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    computedValue: ({ value }: Option) => ({\n                        tag:'vitals',\n                        obs: this.vitals.buildValueNumber('Height', value)\n                    }),\n                    validation: (val: any) => this.validateSeries([\n                        () => Validation.required(val),\n                        () => Validation.isNumber(val),\n                        () => Validation.rangeOf(val, 40, 222)\n                    ])\n                },\n                {\n                    id: 'weight',\n                    helpText: 'Weight (Kg)',\n                    type: FieldType.TT_TEXT,\n                    unload: async (d: any, s: string, f: any) => {\n                        const weight = f.weight.value\n                        const height = f.height.value\n                        const bmi = await BMIService.getBMI(\n                            weight, height, \n                            this.patient.getGender(),\n                            this.patient.getAge()\n                        )\n\n                        this.stagingFacts.bmi = bmi['index']\n\n                        if (!this.staging.isPedaid()) return\n\n                        const medianWh = await this.patient.getMedianWeightHeight()\n\n                        try {\n                            //TODO: this calculation is already defined in patient_service.. must refactor it to make it reusable here\n                            this.stagingFacts.weightPercentile = parseFloat(weight) / (parseFloat(medianWh[\"weight\"])) * 100\n                        } catch (e) {\n                            this.stagingFacts.weightPercentile = 0\n                        }\n                    },\n                    computedValue: ({ value }: Option) => ({\n                        tag:'vitals',\n                        obs: this.vitals.buildValueNumber('weight', value)\n                    }),\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    validation: (val: any) => this.validateSeries([\n                        () => {\n                            const fullValue = {\n                                ...val, other: { modifier: '.' }\n                            }\n                            return this.vitals.isNotEmptyandFloat(fullValue)\n                        },\n                        () => Validation.rangeOf(val, 1, 300)\n                    ]),\n                    config: {\n                        customKeyboard: [\n                            [\n                                ['1', '2', '3', ''],\n                                ['4', '5', '6', ''],\n                                ['7', '8', '9', '.'],\n                                ['',  '0', '' , '']\n                            ],\n                            [\n                                ['Delete']\n                            ]\n                        ]\n                    }\n                },\n                /*** \n                    Start Staging Fields\n                ***/\n                ...this.getStagingFields(),\n                /** \n                    End Staging Fields\n                ***/\n                {\n                    id: 'new_cd4_percent_available',\n                    helpText: 'CD4 percent available',\n                    type: FieldType.TT_SELECT,\n                    options: () => this.yesNoOptions(),\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    validation: (val: any) => Validation.required(val)\n                },\n                {\n                    id: 'cd4_percent',\n                    helpText: 'CD4 Percent',\n                    type: FieldType.TT_TEXT,\n                    condition: (f: any) => f.new_cd4_percent_available.value === 'Yes',\n                    computedValue: ({ value }: Option) => ({\n                        tag:'staging',\n                        obs: this.registration.buildValueNumber(\n                            'CD4 percent', parseInt(value.toString().substring(1)), '%'\n                        )\n                    }),\n                    onValue: (d: Option) => {\n                        if (d.value && !this.staging.cd4CountIsValid(d.value)) {\n                            toastWarning('Cd4 percentage invalid. Use one modifier or start with either of these symbols: >, < or =')\n                            return false\n                        }\n                        return true\n                    },\n                    validation: (val: any) => Validation.required(val),\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Delete']\n                            ]\n                        ]\n                    }\n                },\n                {\n                    id: 'type_of_confirmatory_hiv_test',\n                    helpText: 'Confirmatory HIV test',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: any) => Validation.required(val),\n                    onValue: async (val: Option) => {\n                        if (val.value === 'Not done') {\n                            await infoActionSheet(\n                                'Reminder',\n                                'UNKNOWN HIV CONFIRMATORY TEST',\n                                'Please arrange for a confirmatory test',\n                                [\n                                    { name: 'Agreed', color: 'success', slot: 'start'}\n                                ]\n                            )\n                        }\n                        return true\n                    },\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Confirmatory hiv test type', value\n                        )\n                    }),\n                    options: () => ([\n                        { label: 'Rapid antibody test', value: 'HIV rapid test'},\n                        { label: 'DNA PCR', value: 'HIV DNA polymerase chain reaction'},\n                        { label: 'Not done', value: 'Not done' }\n                    ])\n                },\n                {\n                    id: 'confirmatory_hiv_test_location',\n                    helpText: 'Location of confirmatory HIV test',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: (d: any) => (d.ever_registered_at_art_clinic && d.ever_registered_at_art_clinic.value) === \"Yes\"? '' : ClinicRegistrationService.getLocationName(),\n                    computedValue: (d: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'Confirmatory HIV test location', d.label\n                        ) \n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    condition: (f: any) => f.type_of_confirmatory_hiv_test.value != 'Not done',\n                    options: (_: any, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                ...generateDateFields({\n                    id: 'date_of_confirmatory_hiv_test',\n                    helpText: 'Confirmatory HIV test',\n                    beforeNext: async (date: string, formData: any) => {\n                        if (formData.received_arvs.value != 'Yes') {\n                            const timeElapsed = dayjs(this.staging.getDate()).diff(date, 'days')\n                            if (timeElapsed >= 20) {\n                                const action = await infoActionSheet(\n                                    'Data inconsistency warning',\n                                    `Confirmatory Date for newly initiated ART patient is ${timeElapsed} days ago`,\n                                    'Are you sure this is accurate?',\n                                    [\n                                        { name: 'No, Re-enter date', slot: 'start', color: 'success'},\n                                        { name: 'Yes, its accurate', slot: 'end', color: 'danger'}\n                                    ]\n                                )\n                                return action === 'Yes, its accurate'\n                            }\n                        }\n                        return true\n                    },\n                    condition: (f: any) => f.confirmatory_hiv_test_location.value,\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Confirmatory HIV test date', date, isEstimate) \n                        }\n                    },\n                }, this.registration.getDate()),\n                this.getStagingSummaryField('Staging summary')\n            ]\n        }\n    }\n})\n","import { render } from \"./Registration.vue?vue&type=template&id=64e5583a&ts=true\"\nimport script from \"./Registration.vue?vue&type=script&lang=ts\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ClinicRegistrationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 9, providerID) //TODO: Use encounter type reference name'\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { isArray } from \"lodash\";\nimport { Option } from '@/components/Forms/FieldInterface';\nexport class VitalsService extends AppEncounterService{\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 6, providerID);\n  }\n  isNotEmptyandNumber(vital: Option) {\n    return `${vital.value}`.match(/^-?\\d+\\.?\\d*$/) ? null : [`Invalid entry for ${vital.label}`]\n  }\n  isNotEmptyandFloat(vital: Option) {\n    return `${vital.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/) \n      ? null \n      : [`Invalid entry for ${vital.label}. Don't forget to add a decimal. e.g. 56.2 ${vital.other?.modifier || ''}`]\n  }\n  checkMinMax(val: Option, min: number, max: number) {\n    const p = [];\n    if (parseFloat(`${val.value}`) < min) {\n      p.push([`${val.label} entered is less than minimum ${min} ${val?.other?.modifier || ''}`])\n    }\n    if (parseFloat(`${val.value}`) > max) {\n      p.push([`${val.label} entered is greater than maximum ${max} ${val?.other?.modifier || ''}`])\n    }\n    return p.length > 0 ? p : null;\n  }\n  validateAll(vitals: Option[]) {\n    const p: any = [];\n    vitals.map((vital: any) => {\n      const j = this.validator(vital);\n      return isArray(j) ? p.push(j) : null\n    })\n    return p.length > 0 ? p : null;\n  }\n\n  mergeErrors(errors: any[]) {\n    const holder: any = [];\n    errors.forEach(element => {\n      if (isArray(element)) {\n        holder.push(element)\n      }\n    });\n    return holder.length > 0 ? holder : null\n  }\n  isValidBPReading(vital: any) {\n    const p = [];\n    const isValidBP =  `${vital.value}`.match(/^\\d{1,3}\\/\\d{1,3}$/g) ? null : ['Invalid BP reading']\n    p.push(isValidBP);\n    if(isValidBP == null) {\n      const value = `${vital.value}`.split('/');\n      \n      const bpSystolic = {\n        label: 'Systolic',\n        value: value[0]\n      };\n      const bpDiastolic = {\n        label: 'Diastolic',\n        value: value[1]\n      };\n      p.push(this.checkMinMax(bpDiastolic, 30, 200))\n      p.push(this.checkMinMax(bpSystolic, 40, 250))\n    }\n    return this.mergeErrors(p)\n  }\n  validator(vital: Option) {\n    const values = [\n      {\n        name: \"Weight\",\n        validator: (val: Option) => {\n          const emptyErrors = this.isNotEmptyandFloat(val);\n          const minErrors = this.checkMinMax(val, 2.0, 250.0);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      },\n      {\n        name: \"Height\",\n        validator: (val: Option) => {\n          const errors = []\n          errors.push(this.isNotEmptyandNumber(val))\n          errors.push(this.checkMinMax(val, 40, 220))\n          return this.mergeErrors(errors); \n        },\n      }, {\n        name: \"BP\",\n        validator: (val: any) => {\n          return this.isValidBPReading(val)\n        },\n      }, {\n        name: \"Temp\",\n        validator: (val: any) => {\n          const emptyErrors = this.isNotEmptyandNumber(val);\n          const minErrors = this.checkMinMax(val, 30, 42);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      }, {\n        name: \"SP02\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 40, 100);\n          return this.mergeErrors([minErrors]); \n        },\n      }, {\n        name: \"Pulse\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 50, 120);\n          return this.mergeErrors([minErrors]); \n        },\n      }\n    ]\n    const v = values.filter(element => {\n      return element.name === vital.label;\n    });\n    if (v.length > 0) {\n      return v[0].validator(vital);\n    }\n    return null\n  }\n}"],"sourceRoot":""}