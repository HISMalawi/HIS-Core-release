{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/composables/storage.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/apps/LOS/views/OrderTests.vue?0f29","webpack:///./src/apps/LOS/views/OrderTests.vue","webpack:///./src/apps/LOS/views/OrderTests.vue?0c48"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","saveObsOffline","observations","id","uploadStatus","encounterTypeID","meta","formData","labOrders","synchronizeRecord","skipNextTask","nextOfflineFlow","error","toastWarning","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","toastDanger","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","toOption","label","other","mapStrToOptions","items","i","path","task","nextPatientWorkflowActivity","patientUrl","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","mapToOption","listOptions","item","resolvePerson","computedForm","attr","isPlainObject","getGivenNameField","helpText","FieldType","TT_TEXT","computedValue","val","validation","Validation","isName","form","PersonService","searchGivenName","getFamilyNameField","searchFamilyName","getGenderField","customOptions","TT_SELECT","getDobConfig","includeHelpText","summaryLabel","minDate","estimateDateFromAge","maxDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","date","isEstimate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","summaryMapValue","v","f","_f$home_region","test","home_region","dynamicHelpText","_f$home_region2","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","onClick","c","field","filtered","ok","alertConfirmation","address","LocationService","createAddress","getHomeTaField","config","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","getCurrentDistrictField","_f$home_region3","current_region","match","getCurrentTAfield","_f$current_region","getCurrentVillageField","_f$current_region2","getCellNumberField","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","getFacilityLocationField","_","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","homeDistrict","homeVillage","homeTA","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","show","Service","getProgramName","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","constructor","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","onerror","filters","openCursor","cursor","filteredData","continue","put","delete","entries","every","isInteger","toLower","includes","isCondition","ignored","undefined","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","offlineStorage","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village_id","_component_his_standard_form","_resolveComponent","onSubmit","mixins","EncounterMixinVue","service","activityType","watch","handler","query","PatientLabService","getClinianGivenNameField","getClinianFamilyNameField","getFacililityLocationField","getReasonForTestField","getTestSpecimensField","getTestSelectionField","getTestCombinationField","immediate","deep","req","placeOrder","printSpecimenLabel","order_id","defaultValue","getLocationName","PersonField","ConceptService","getCachedConceptID","OrderService","getSpecimens","concept_id","activeSpecimen","TT_GRID_SELECTOR","listData","specimen","getTestTypesBySpecimen","t","isChecked","tests"],"mappings":"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","file":"js/chunk-d705048e.28e7fdac.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n                Offline().saveObsOffline({\n                    observations: obs,\n                    id: this.offlineID,\n                    uploadStatus: status,\n                    encounterName: this.$route.name,\n                    encounterTypeID: params.encounterTypeID,\n                    meta: params.formData,\n                    labOrders: params.labOrders,\n                    created\n                }, created)\n                Offline().synchronizeRecord(this.offlineID)\n                if (!params.skipNextTask) this.nextOfflineFlow()\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            // if (!this.isOfflineMode()) {\n            //     try {\n            //         const enc = new AppEncounterService(\n            //             this.patientID,\n            //             params.encounterTypeID, \n            //             this.providerID\n            //         )\n            //         if ((await enc.createEncounter())) {\n            //             if ((await enc.saveObservationList(obs as ObsValue[]))) {\n            //                 status = 'Success'\n            //             }\n            //         }\n            //         if (typeof params.callback === 'function') {\n            //             await params.callback(enc)\n            //         }\n            //         created = true\n            //     } catch (e) {\n            //         created = false\n            //         if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n            //             status = 'NetworkError'\n            //         } else {\n            //             status = 'Exception'\n            //             console.error(`Exception while saving an encounter: ${e}`)\n            //         }\n            //     }\n            //     if (status === 'Exception') {\n            //         return toastDanger(\"An error has occured!\")\n            //     }\n            // }\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextOfflineFlow() {\n            const task = Offline().nextPatientWorkflowActivity(this.patientID)\n            if (!task || !task.patientUrl) return this.$router.push(`/patient/dashboard/${this.patientID}`)\n            return this.$router.push(`${task.patientUrl}/${this.patientID}`) \n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Region of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'District of current residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'District of current residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'TA of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Village of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport {getFacilities} from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PatientLabService } from \"@/apps/LOS/services/patient_lab_service\"\nimport { OrderService } from \"@/services/order_service\"\nimport { ConceptService } from '@/services/concept_service'\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { isEmpty } from 'lodash'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        patientID: -1,\n        service: {} as any,\n        fields: [] as Field[],\n        activityType: '' as 'DRAW_SAMPLES' | 'ORDER_TESTS',\n    }),\n    watch: {\n        '$route': {\n            handler({query, params}: any) {\n                if (query && params) {\n                    this.patientID = params.patient_id\n                    this.activityType = query.type\n                    this.service = new PatientLabService(this.patientID)\n                    this.fields = [\n                        this.getClinianGivenNameField(),\n                        this.getClinianFamilyNameField(),\n                        this.getFacililityLocationField(),\n                        this.getReasonForTestField(),\n                        this.getTestSpecimensField(),\n                        this.getTestSelectionField(),\n                        this.getTestCombinationField()\n                    ]\n                }\n            },\n            immediate: true,\n            deep: true\n        },\n    },\n    methods: {\n        async onSubmit(_: any, computed: any) {\n            const req = await this.service.placeOrder(computed)\n            if (req) {\n                await this.service.printSpecimenLabel(req[0].order_id)\n                this.$router.push(`/patient/dashboard/${this.patientID}`)\n            } \n        },\n        getFacililityLocationField(): Field {\n            return {\n                id: 'target_lab',\n                helpText: 'Requesting location',\n                type: FieldType.TT_SELECT,\n                defaultValue: () => PatientLabService.getLocationName(),\n                validation: (val: Option) => Validation.required(val),\n                options: (_: any, filter='') => getFacilities(filter),\n                computedValue: (val: Option) => val.label,\n                config: {\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            }\n        },\n        getClinianGivenNameField(): Field {\n            const field = PersonField.getGivenNameField()\n            field.helpText = 'Requesting clinician - First name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.appearInSummary = () => false\n            return field\n        },\n        getClinianFamilyNameField(): Field {\n            const field = PersonField.getFamilyNameField()\n            field.helpText = 'Requesting clinician - Last name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.summaryMapValue = (v: any, f: any) => {\n                return {\n                    label: 'Clinician name', \n                    value: `${f.given_name.value} ${v.value}`\n                }\n            },\n            field.computedValue = (v: Option, f: any) => `${f.given_name.value} ${v.value}`\n            return field\n        },\n        getReasonForTestField(): Field {\n            return {\n                id: 'reason_for_test_id',\n                helpText: 'Reason for test',\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: any) => ConceptService.getCachedConceptID(\n                    val.value, true\n                ),\n                options: () => [\n                    {label: 'Routine', value: 'Routine'},\n                    {label: 'Targeted', value: 'Targeted'},\n                    {label: 'Confirmatory', value: 'Confirmatory'},\n                    {label: 'Repeat / Missing', value: 'Repeat / Missing'},\n                    {label: 'Stat', value: 'Stat'}\n                ]\n            }\n        },\n        getTestSpecimensField(): Field {\n            return { \n                id: 'specimen',\n                helpText: 'Select specimen',\n                type: FieldType.TT_SELECT,\n                condition: () => this.activityType === 'DRAW_SAMPLES',\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (v: Option) => ({'concept_id': v.value}),\n                options: async () => {\n                    const req = await OrderService.getSpecimens('')\n                    return req.map((d: any) => ({\n                        label: d.name, \n                        value: d.concept_id\n                    }))\n                },\n                config: {\n                    showKeyboard: true\n                }\n            }\n        },\n        getTestSelectionField(): Field {\n            let activeSpecimen = ''\n            return {\n                id: 'tests',\n                helpText: 'Select tests',\n                type: FieldType.TT_GRID_SELECTOR,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: Array<Option>) => {\n                    return val.map(v => ({'concept_id': v.value}))\n                },\n                options: async (f: any, c: any, listData: Option[]) => {\n                    if (f.specimen && f.specimen.label != activeSpecimen) {\n                        activeSpecimen = f.specimen.label\n                        const req = await OrderService.getTestTypesBySpecimen(\n                            f.specimen.label\n                        )\n                        return req.map((t: any) => ({\n                            label: t.name,\n                            value: t.concept_id,\n                            isChecked: false,\n                            other: t\n                        }))\n                    } else {\n                        return listData\n                    }\n                }\n            }\n        },\n        getTestCombinationField(): Field {\n            return {\n                id: 'combine_tests',\n                helpText: 'Combine test(s) in one order',\n                type: FieldType.TT_SELECT,\n                computedValue: (val: Option) => val.value === 'Yes',\n                condition: (f: any) => f.tests.length > 1,\n                validation: (val: Option) => Validation.required(val),\n                options: () => this.yesNoOptions()\n            }\n        }\n    }\n})\n","import { render } from \"./OrderTests.vue?vue&type=template&id=59c3af0c&ts=true\"\nimport script from \"./OrderTests.vue?vue&type=script&lang=ts\"\nexport * from \"./OrderTests.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}