{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/reports/pepfar/TxCurrMl.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","title","period","rows","fields","columns","config","showIndex","reportPrefix","onReportConfiguration","onPeriod","_","defineComponent","mixins","ReportMixin","components","ReportTemplate","IonPage","data","drillData","table","thTxt","cohort","created","this","getDateDurationFields","methods","report","TxReportService","setStartDate","start_date","setEndDate","end_date","getDateIntervalPeriod","getTxMlReport","setRows","drilldown","patients","context","asyncRows","async","getTxMMDClientLevelData","remapTxClientLevelData","map","d","drugs","drug","tableView","name","quantity","dose","dataView","td","id","tdDate","dob","dispenseDate","join","value","length","tdLink","drilldownAsyncRows","gender","contexts","i","AGE_GROUPS","group","cohortData","drillContext","drillable","push","e","__exports__"],"mappings":"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","file":"js/chunk-2d2219e6.57a4040c.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_report_template = _resolveComponent(\"report-template\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_report_template, {\n        title: _ctx.title,\n        period: _ctx.period,\n        rows: _ctx.rows,\n        fields: _ctx.fields,\n        columns: _ctx.columns,\n        config: {\n                showIndex: true\n            },\n        reportPrefix: \"PEPFAR\",\n        onReportConfiguration: _ctx.onPeriod\n      }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"onReportConfiguration\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport { TxReportService } from '@/apps/ART/services/reports/tx_report_service'\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { IonPage } from \"@ionic/vue\"\nimport { AGE_GROUPS } from \"@/apps/ART/services/reports/patient_report_service\"\n\nexport default defineComponent({\n    mixins: [ReportMixin],\n    components: { ReportTemplate, IonPage },\n    data: () => ({\n        title: 'PEPFAR Curr Ml Report',\n        rows: [] as Array<any>,\n        drillData: {} as any,\n        columns: [\n            [\n                table.thTxt('Age group'),\n                table.thTxt('Gender'),\n                table.thTxt('Died'),\n                table.thTxt('IIT <3 mo'),\n                table.thTxt('IIT 3-5 mo'),\n                table.thTxt('IIT 6+ mo'),\n                table.thTxt('Transferred out'),\n                table.thTxt('Refused (Stopped)')\n            ]\n        ],\n        cohort: {} as any\n    }),\n    created() {\n        this.fields = this.getDateDurationFields()\n    },\n    methods: {\n        async onPeriod(_: any, config: any) {\n            this.rows = []\n            this.report = new TxReportService()\n            this.report.setStartDate(config.start_date)\n            this.report.setEndDate(config.end_date)\n            this.period = this.report.getDateIntervalPeriod()\n            this.cohort = await this.report.getTxMlReport()\n            await this.setRows('F')\n            await this.setRows('M')\n        },\n        drilldown(patients: Array<number>, context: string) {\n            const columns = [\n                [\n                    table.thTxt('ARV#'), \n                    table.thTxt('DOB'), \n                    table.thTxt('Dispensed'), \n                    table.thTxt('ARVs')\n                ]\n            ]\n            const asyncRows = async () => {\n                if (context in this.drillData) return this.drillData[context]\n\n                const data = await this.report.getTxMMDClientLevelData(patients)\n\n                if (!data) return []\n\n                const rows = this.report\n                    .remapTxClientLevelData(data)\n                    .map((d: any) => {\n                        const drugs: any = d.drugs.map((drug: any) => {\n                            const tableView = `\n                                <table style='width: 100%;'> \n                                    <td style='width: 65%;'>${drug.name}</td>\n                                    <td style='width: 30%;'>(${drug.quantity}, ${drug.dose} a day)</td>\n                                </table>`\n                            const dataView = `${drug.name} (Quantity: ${drug.quantity} Dose: ${drug.dose})`\n                            return { tableView, dataView }\n                        })\n                        return [\n                            table.td(d.id || 'N/A'),\n                            table.tdDate(d.dob),\n                            table.tdDate(d.dispenseDate),\n                            table.td(drugs.map((d: any) => d.tableView).join('<p/>'), \n                            { \n                                value: drugs.map((d: any) => d.dataView).join('|')\n                            })\n                        ]\n                    })\n                this.drillData[context] = rows\n                return rows\n            }\n            if (patients.length <= 0) {\n                return table.td(0)\n            }\n            return table.tdLink(patients.length, () => this.drilldownAsyncRows(context, columns, asyncRows))\n        },\n        async setRows(gender: string) {\n            const contexts: any = [\n                'Defaulted (new registration)',\n                'Defaulted (old registration)',\n                'Died',\n                'Stopped',\n                'Tranferred out',\n                'Unknown'\n            ]\n            for(const i in AGE_GROUPS) {\n                const group = AGE_GROUPS[i]\n                try {\n                    const cohortData = this.cohort[group][gender]\n                    const drillContext = `${gender} ${group}`\n                    const drillable = cohortData.map(\n                        (d: Array<number>, i: number) => this.drilldown(d, `${drillContext} ${contexts[i]}`)\n                    )\n                    this.rows.push([\n                        table.td(group),\n                        table.td(gender),\n                        ...drillable\n                    ])\n                }catch(e) {\n                    this.rows.push([\n                        table.td(group), \n                        table.td(gender), \n                        table.td(0), \n                        table.td(0), \n                        table.td(0), \n                        table.td(0), \n                        table.td(0), \n                        table.td(0) \n                    ])\n                }\n            }\n        }\n    }\n})\n","import { render } from \"./TxCurrMl.vue?vue&type=template&id=25e2991a&ts=true\"\nimport script from \"./TxCurrMl.vue?vue&type=script&lang=ts\"\nexport * from \"./TxCurrMl.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}