{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue?29dd","webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue?4118","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","patientType","watch","patient","handler","PatientTypeService","patientID","providerID","loadPatientType","getFields","deep","methods","formData","getFacilities","filter","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","mapOptions","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","facts","ready","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","computed","patientDashboardUrl","runflowState","state","states","split","username","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","computedData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","LocationService","facilities","f","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-449ba214.de9ed1e4.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    patientType: {} as any,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.patientType = new PatientTypeService(\n          this.patientID,\n          this.providerID\n        );\n        await this.patientType.loadPatientType();\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      //       const encounter = await this.patientType.createEncounter();\n      //       if (!encounter) return toastWarning(\"Unable to create encounter\");\n      //       this.patientType.setLocationName(formData?.location?.label);\n      //       this.patientType.setPatientType(formData?.patient_type?.value);\n      //       await this.patientType.save();\n      //       toastSuccess(\"Observations and encounter created!\");\n      //       this.nextTask();\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"via_test_results\",\n          helpText: \"VIA test results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Negative\",\n              \"Positive\",\n              \"Suspect\",\n            ]);\n          },\n        },\n        {\n          id: \"pap_smear\",\n          helpText: \"PAP Smear Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"PAP Smear normal\",\n              \"PAP Smear abnormal\"\n            ]);\n          },\n        },\n        {\n          id: \"hpv_dna\",\n          helpText: \"HPV DNA Test Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"HPV negative\",\n              \"HPV positive\"\n            ]);\n          },\n        },\n        {\n          id: \"speculum_exam\",\n          helpText: \"Speculum Exam Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Visible Lesion\",\n              \"No Visible lesion\",\n              \"Other gynaecological condition\",\n            ]);\n          },\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaResult.vue?vue&type=template&id=59ae6bcf&ts=true\"\nimport script from \"./CxCaResult.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaResult.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n"],"sourceRoot":""}