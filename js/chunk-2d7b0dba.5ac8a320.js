(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d7b0dba"],{7365:function(t,e,a){"use strict";a("14d9"),a("13d5");var i,n=a("7a23"),s=a("ad60"),o=a("2ef0"),r=a("0fa1"),c=a("7f35"),l=a("9283");(function(t){t["SET_PROVIDER"]="SET_PROVIDER",t["CHANGE_SESSION_DATE"]="change_session_date",t["GO_TO_PATIENT_DASHBOARD"]="go_to_patient_dashboard",t["CHANGE_PATIENT_OUTCOME"]="change_outcome",t["CONTINUE"]="continue",t["EXIT"]="exit"})(i||(i={}));const u=t=>l["b"].toStandardHisDisplayFormat(t),d={"Warn if attempting to create new encounters for a deceased patient":{priority:1,actions:{alert:async({outcomeStartDate:t})=>{const e=await Object(c["a"])("Data Integrity Issue Found","Patient died on "+u(t),"Proceeding with this outcome might affect accuracy of some reports",[{name:"Cancel",slot:"end",color:"primary"},{name:"Change outcome",slot:"end",color:"primary"},{name:"Continue Anyway",slot:"end",color:"danger"}]);return"Cancel"===e?i.GO_TO_PATIENT_DASHBOARD:"Change outcome"===e?i.CHANGE_PATIENT_OUTCOME:i.CONTINUE}},conditions:{outcome(t){return"Patient died"===t},outcomeStartDate(t,{sessionDate:e}){return e>=t}}},"A patient's date of birth must not be less than Session Date":{priority:2,actions:{alert:async({birthDate:t,sessionDate:e})=>{const a=await Object(c["a"])("Data integrity issue found","",`Session date ${u(e)} is less than birth date of ${u(t)}`,[{name:"Cancel",slot:"end",color:"danger"},{name:"Change session date",slot:"end",color:"success"}]);return"Change session date"===a?i.CHANGE_SESSION_DATE:i.GO_TO_PATIENT_DASHBOARD}},conditions:{birthDate(t,{sessionDate:e}){return e<t}}},"Select Encounter provider when in back data entry":{priority:3,actions:{selection:async({providers:t,encounterName:e,sessionDate:a,apiDate:n})=>{const s=await Object(c["c"])("Please select a provider for "+e,`BDE: ${u(a)} | Current: ${u(n)}`,t,[{name:"Cancel",color:"danger",slot:"start",role:"default"},{name:"Confirm",slot:"end",role:"action"}]);return"Cancel"===s.action?{value:-1,flowState:i.GO_TO_PATIENT_DASHBOARD}:{value:s.selection,flowState:i.SET_PROVIDER}}},conditions:{isBdeMode(t){return t}}}};var h=a("c21d"),p=a("7920"),m=a("b5e4"),v=a("8e8b"),f=a("b432"),b=a("5a0c"),g=a.n(b),D=a("cc6f"),T=a("2ed9"),C=Object(n["defineComponent"])({components:{HisStandardForm:p["a"]},data:()=>({offlineID:null,patient:{},fields:[],patientID:"",providerID:-1,providers:[],encounterStartTime:null,facts:{age:-1,gender:"",birthDate:"",sessionDate:"",apiDate:"",isEnrolledInProgam:!1,encounterName:"N/A",providers:[],isBdeMode:!1,outcome:"",outcomeStartDate:"",village:"",district:"",currentTA:""},formLabel:"",ready:!1}),created(){this.$route.params.patient_id&&(this.offlineID=this.$route.params.patient_id,this.patientID=parseInt(""+this.$route.params.patient_id),this.goOffline()?this.initOfflineData():v["a"].get("ACTIVE_PATIENT",{patientID:this.patientID}).then(t=>{this.patient=t,Object(o["isEmpty"])(this.patient)||Object(f["a"])().cachePatient(this.patient),this.setEncounterFacts().then(()=>{this.checkEncounterGuidelines().then(()=>{this.ready=!0,this.setStartTime()}).catch(t=>console.log(t))}).catch(()=>{this.goOffline()&&this.initOfflineData()})}))},computed:{cancelDestination(){return this.patientDashboardUrl()}},methods:{setStartTime(){this.encounterStartTime=(new Date).getTime()},goOffline(){return!f["c"].value||f["b"].value},isOnline(){return f["c"].value},isOfflineMode(){return f["b"].value},initOfflineData(){var t;const e=Object(f["a"])().findByID(this.offlineID),a=null===e||void 0===e||null===(t=e.personParams)||void 0===t?void 0:t.person;a&&(this.facts.birthDate=a.birthdate,this.facts.age=g()(s["a"].getSessionDate()).diff(this.facts.birthDate,"years"),this.facts.district=a.current_district,this.facts.village=a.current_village,this.facts.currentTA=a.current_traditional_authority,this.facts.gender=a.gender,this.ready=!0,this.setStartTime())},async saveFormEncounterAndProceed(t={}){let e="Pending",a=!1,i=null;const n=(new Date).getTime(),s=(n-this.encounterStartTime)/1e3,o=s/60;try{const e=await D["a"].buildValueText("Device",Object(T["f"])()),a=await D["a"].buildValueNumber("Review Time",o);i=[...await this.resolveObs(t.computedData),e,a]}catch(r){return console.error(""+r),Object(m["e"])("Unable to resolve observations")}if(!this.isOfflineMode()){try{const n=new D["a"](this.patientID,t.encounterTypeID,this.providerID);await n.createEncounter()&&await n.saveObservationList(i)&&(e="Success"),"function"===typeof t.callback&&await t.callback(n),a=!0}catch(r){a=!1,/NetworkError|Failed to fetch/i.test(""+r)?e="NetworkError":(e="Exception",console.error("Exception while saving an encounter: "+r))}if("Exception"===e)return Object(m["c"])("An error has occured!")}Object(f["a"])().saveObsOffline({observations:i,id:this.offlineID,uploadStatus:e,encounterName:this.$route.name,encounterTypeID:t.encounterTypeID,meta:t.formData,labOrders:t.labOrders,created:a},a),t.skipNextTask||this.nextTask()},runflowState(t,e=null){const a={};if(a[i.SET_PROVIDER]=t=>{const[e]=t.split(" "),a=Object(o["find"])(this.providers,{username:e});return a&&(this.providerID=a.person_id),i.CONTINUE},a[i.CHANGE_SESSION_DATE]=()=>(this.$router.push("/session/date?patient_dashboard_redirection_id="+this.patientID),i.EXIT),a[i.CHANGE_PATIENT_OUTCOME]=()=>(this.$router.push("/patient/programs/"+this.patientID),i.EXIT),a[i.GO_TO_PATIENT_DASHBOARD]=()=>(this.gotoPatientDashboard(),i.EXIT),t in a)return a[t](e)},async checkEncounterGuidelines(){const t=Object(h["a"])(this.facts,d);for(const o in t){var e,a;const r=t[o];if(null!==r&&void 0!==r&&null!==(e=r.actions)&&void 0!==e&&e.alert){var n;const t=this.runflowState(await(null===r||void 0===r||null===(n=r.actions)||void 0===n?void 0:n.alert(this.facts)));if(t===i.EXIT)return}if(null!==r&&void 0!==r&&null!==(a=r.actions)&&void 0!==a&&a.selection){var s;const t=await(null===r||void 0===r||null===(s=r.actions)||void 0===s?void 0:s.selection(this.facts));this.runflowState(t.flowState,t.value)}}},async setEncounterFacts(){try{const t=await v["a"].get("PATIENT_PROGRAM",{patientID:this.patientID});this.facts.isEnrolledInProgam=t.programID===s["a"].getProgramID(),this.facts.outcome=t.outcome,this.facts.outcomeStartDate=t.startDate}catch(t){console.error(t),Object(m["c"])(""+t)}this.facts.currentTA=this.patient.getCurrentTA(),this.facts.district=this.patient.getCurrentDistrict(),this.facts.village=this.patient.getCurrentVillage(),this.facts.sessionDate=s["a"].getSessionDate(),this.facts.apiDate=s["a"].getCachedApiDate(),this.facts.isBdeMode=s["a"].isBDE(),this.facts.birthDate=this.patient.getBirthdate(),this.facts.age=this.patient.getAge(),this.facts.encounterName=this.$route.name?this.$route.name.toString().toUpperCase():"N/A",s["a"].isBDE()&&(this.providers=await v["a"].get("PROVIDERS"),this.facts.providers=this.providers.sort((t,e)=>{const a=t.username.toUpperCase(),i=e.username.toUpperCase();return a<i?-1:a>i?1:0}).map(t=>{var e;let a=""+t.username;if(!Object(o["isEmpty"])(null===t||void 0===t||null===(e=t.person)||void 0===e?void 0:e.names)){var i;const[e]=(null===(i=t.person)||void 0===i?void 0:i.names)||[];a+=` (${e.given_name} ${e.family_name})`}return a}))},toOption(t,e={}){return{label:t,value:t,other:e}},mapStrToOptions(t){return t.map(t=>"string"===typeof t||"number"===typeof t?{label:t,value:t}:t)},patientDashboardUrl(){return"/patient/dashboard/"+this.$route.params.patient_id},gotoPatientDashboard(){return this.$router.push({path:this.patientDashboardUrl()})},async nextTask(){try{const t=this.offlineID||this.patientID;await Object(r["b"])(t,this.$router,this.$route)}catch(t){console.error("Workflow error "+t),this.gotoPatientDashboard()}},yesNoOptions(){return[{label:"Yes",value:"Yes"},{label:"No",value:"No"}]},toYesNoOption(t,e={}){return{label:t,value:"",other:{...e,values:this.yesNoOptions()}}},mapOptions(t){return t.map(t=>({label:t,value:t}))},toConditionalOptions(t){const e=[];for(const a of t)("boolean"!==typeof a[1]||a[1])&&e.push(this.toOption(a[0]));return e},yesNoUnknownOptions(){return[{label:"Yes",value:"Yes"},{label:"No",value:"No"},{label:"Unknown",value:"Unknown"}]},resolveObs(t,e=""){const a=Object.values(t).filter(t=>t&&(t.tag===e||""===e)).reduce((t,e)=>{const a=e.obs?e.obs:e;return Array.isArray(a)?t=t.concat(a):"function"===typeof a?t.push(a()):t.push(a),t},[]);return Promise.all(a)},inArray(t,e){try{return t.filter(t=>e(t)).length>0}catch(a){return!1}},validateSeries(t){try{for(const e in t){const a=t[e]();if(a)return a}}catch(e){return[e]}}}});const O=C;e["a"]=O},7920:function(t,e,a){"use strict";var i=a("7a23");function n(t,e,a,n,s,o){return Object(i["openBlock"])(),Object(i["createBlock"])(Object(i["resolveDynamicComponent"])(t.formType),{fields:t.fields,skipSummary:t.skipSummary,activeField:t.activeField,cancelDestinationPath:t.cancelDestinationPath,onOnFinish:t.onFinish,onFinish:t.onFinishAction,onOnIndex:t.onIndex},null,40,["fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onOnIndex"])}var s=a("9441"),o=Object(i["defineComponent"])({name:"HisStandardForm",components:{TouchScreenForm:s["a"]},emits:["onFinish","onIndex"],data:()=>({formType:"touch-screen-form"}),props:{onFinishAction:{type:Function},skipSummary:{type:Boolean,default:!1},activeField:{type:String},fields:{type:Object,required:!0},cancelDestinationPath:{type:String,required:!1}},methods:{onFinish(t,e){this.$emit("onFinish",t,e)},onIndex(t){this.$emit("onIndex",t)}}}),r=a("6b0d"),c=a.n(r);const l=c()(o,[["render",n]]);e["a"]=l},c21d:function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));a("14d9");function i(t,e){const a=[],i=[-1,"",null,void 0];for(const n in e){if(!(n in t))continue;const s=t[n];i.includes(s)?a.push(!1):a.push(e[n](s,t))}return a.every(Boolean)}function n(t){return t.sort((t,e)=>t.priority&&e.priority&&t.priority<e.priority?-1:1)}function s(t){return t.sort((t,e)=>t.weight&&e.weight&&t.weight>e.weight?-1:1)}function o(t,e,a="",o="",r="priority"){const c=[];for(const n in e){const s=e[n],r=[s.target&&a&&s.target!=a,s.targetEvent&&o&&s.targetEvent!=o];r.some(Boolean)||i(t,s.conditions)&&(s.title=n,s.description&&(s.description.text=s.description.info(t)),c.push(s))}return"priority"===r?n(c):s(c)}},e7aa:function(t,e,a){"use strict";a.r(e);var i=a("7a23");function n(t,e,a,n,s,o){const r=Object(i["resolveComponent"])("his-standard-form");return Object(i["openBlock"])(),Object(i["createBlock"])(r,{fields:t.fields,onFinishAction:t.onFinish,skipSummary:!1,cancelDestinationPath:t.cancelDestination},null,8,["fields","onFinishAction","cancelDestinationPath"])}a("14d9");var s=a("d95e"),o=a("7920"),r=a("2706"),c=a("7365"),l=a("ade3"),u=a("cc6f");class d extends u["a"]{constructor(t,e){super(t,181,e),Object(l["a"])(this,"hivStatus",void 0),Object(l["a"])(this,"artStatus",void 0),Object(l["a"])(this,"arvNumber",void 0),Object(l["a"])(this,"arvStartDate",void 0),this.hivStatus="",this.artStatus="",this.arvNumber="",this.arvStartDate=""}getHivStatus(){return this.hivStatus}getArtStatus(){return this.artStatus}getArvNumber(){return this.arvNumber}getArvStartDate(){return this.arvStartDate}isHivPositive(){return!!this.hivStatus.match(/positive/i)}async loadArtStatus(){const t=await u["a"].getJson(`programs/12/patients/${this.patientID}/art_hiv_status`);t&&(this.hivStatus=t["hiv_status"]||this.hivStatus,this.artStatus=t["art_status"]||"",this.arvNumber=t["arv_number"]||"",this.arvStartDate=t["arv_start_date"]||"")}}var h=a("b5e4"),p=a("b446"),m=a("e86e"),v=a("8158"),f=a("23e6"),b=a("ad60"),g=Object(i["defineComponent"])({mixins:[c["a"]],components:{HisStandardForm:o["a"]},data:()=>({assessment:{},obs:[],showHIVQuestions:!0,alreadyEnrolled:!1,offerCxCa:!1}),watch:{patient:{async handler(){this.assessment=new d(this.patientID,this.providerID);new f["a"](await f["a"].findByID(this.patientID));const t=await b["a"].getProgramInformation(this.patientID);"Continue follow-up"===t.current_outcome&&(this.alreadyEnrolled=!0),v["a"].getConceptsByCategory("reason_for_no_cxca"),await this.assessment.loadArtStatus();this.assessment.getHivStatus();""!==this.assessment.getHivStatus()&&(this.showHIVQuestions=!1),"Positive"===this.assessment.getHivStatus()&&(this.showHIVQuestions=!1),await this.setOfferCxCa(),this.fields=await this.getFields()},deep:!0}},methods:{async onFinish(t,e){const a=await this.assessment.createEncounter();if(!a)return Object(h["e"])("Unable to create encounter");const i=[];Object.keys(e).forEach(t=>{i.push(e[t].obs)});const n=await Promise.all([...this.obs,...i]),s=await this.assessment.saveObservationList(n);if(!s)return Object(h["e"])("Unable to save patient observations");Object(h["d"])("Observations and encounter created!"),this.nextTask()},async setOfferCxCa(){const t=await this.assessment.getFirstValueCoded("Offer CxCa");return this.offerCxCa=t&&"Yes"===t,this.offerCxCa||this.obs.push(this.assessment.buildValueCoded("Ever had CxCa","No")),!0},hasHIVStatus(){return""!==this.assessment.getHivStatus},enterPreviousCxCaData(t){const e="Yes"===t.ever_had_cxca.value,a="Yes"===t.results_available.value;return e&&a},getFacilities(t=""){return Object(m["b"])(t)},getReasonsForNoCxcaOptions(){return v["a"].getConceptsByCategory("reason_for_no_cxca").map(t=>({label:t.name,value:t.name,other:{c:t}}))},getFields(){return[{id:"reason_for_visit",helpText:"Reason for visit",type:s["b"].TT_SELECT,validation:t=>r["a"].required(t),options:()=>[{label:"Initial screening",value:"Initial screening"},{label:"Postponed treatmment",value:"Postponed treatment"},{label:"One year subsequent check-up after treatment",value:"One year subsequent check-up after treatment"},{label:"Subsequent screening",value:"Subsequent screening"},{label:"Problem visit after treatment",value:"Problem visit after treatment"},{label:"Referral",value:"Referral"}],computedValue:t=>({obs:this.assessment.buildValueCoded("Reason for visit",t.value)})},{id:"hiv_status",helpText:"HIV status",type:s["b"].TT_SELECT,condition:()=>this.showHIVQuestions,validation:t=>r["a"].required(t),options:()=>[{label:"Positive on ART",value:"Positive on ART"},{label:"Positive Not on ART",value:"Positive Not on ART"},{label:"Negative",value:"Negative"},{label:"Never tested",value:"Never tested"},{label:"Prefers Not to disclose",value:"Undisclosed"}],computedValue:t=>({obs:this.assessment.buildValueCoded("HIV status",t.value)})},...Object(p["b"])({id:"hiv_test_date",helpText:"HIV test result date",required:!0,condition:t=>t.hiv_status.value.match(/Negative|ART/i),minDate:()=>this.patient.getBirthdate(),maxDate:()=>this.assessment.getDate(),estimation:{allowUnknown:!0,estimationFieldType:p["a"].MONTH_ESTIMATE_FIELD},computeValue:(t,e)=>({date:t,tag:"cxca screening",isEstimate:e,obs:this.assessment.buildValueDate("HIV test date",t,e)})},this.assessment.getDate()),{id:"ever_had_cxca",helpText:"Ever had CxCa screening",type:s["b"].TT_SELECT,condition:t=>"Initial screening"!==t.reason_for_visit.value&&0==this.alreadyEnrolled,options:()=>this.yesNoOptions(),validation:t=>r["a"].required(t),computedValue:t=>({obs:this.assessment.buildValueCoded("Ever had CxCa",t.value)})},{id:"results_available",helpText:"Results available?",type:s["b"].TT_SELECT,validation:t=>r["a"].required(t),condition:t=>"Initial screening"!==t.reason_for_visit.value&&"No"!==t.ever_had_cxca.value,options:()=>this.yesNoOptions(),computedValue:t=>({obs:this.assessment.buildValueCoded("CxCa test results",t.value)})},{id:"location",helpText:"CxCa screening location",type:s["b"].TT_SELECT,validation:t=>r["a"].required(t),options:(t,e="")=>this.getFacilities(e),config:{showKeyboard:!0,isFilterDataViaApi:!0},condition:t=>this.enterPreviousCxCaData(t),computedValue:t=>({obs:this.assessment.buildValueText("Previous CxCa location",t.value)})},...Object(p["b"])({id:"cxca_date",helpText:"Previous CxCa test",required:!0,minDate:()=>this.patient.getBirthdate(),maxDate:()=>this.assessment.getDate(),estimation:{allowUnknown:!1},condition:t=>this.enterPreviousCxCaData(t),computeValue:(t,e)=>({date:t,tag:"cxca screening",isEstimate:e,obs:this.assessment.buildValueDate("cxca test date",t)})},this.assessment.getDate()),{id:"previous_screening_method",helpText:"Previous screening method",type:s["b"].TT_SELECT,validation:t=>r["a"].required(t),condition:t=>this.enterPreviousCxCaData(t),options:()=>[{label:"VIA",value:"VIA"},{label:"PAP Smear",value:"PAP Smear"},{label:"HPV DNA",value:"HPV DNA"},{label:"Speculum Exam",value:"Speculum Exam"}],computedValue:t=>({obs:this.assessment.buildValueCoded("Previous CxCa screening method",t.value)})},{id:"offer_CxCa",helpText:"Offer CxCa screening today",type:s["b"].TT_SELECT,validation:t=>r["a"].required(t),options:()=>this.yesNoOptions(),computedValue:t=>({obs:this.assessment.buildValueCoded("Offer CxCa",t.value)})},{id:"screening_method",helpText:"Screening method being offered",type:s["b"].TT_SELECT,validation:t=>r["a"].required(t),condition:t=>"Yes"===t.offer_CxCa.value,options:()=>[{label:"VIA",value:"VIA"},{label:"PAP Smear",value:"PAP Smear"},{label:"HPV DNA",value:"HPV DNA"},{label:"Speculum Exam",value:"Speculum Exam"}],computedValue:t=>({obs:this.assessment.buildValueCoded("CxCa screening method",t.value)})},{id:"offer_family_planning",helpText:"Offer Family Planning ?",type:s["b"].TT_SELECT,validation:t=>r["a"].required(t),options:()=>this.yesNoOptions(),computedValue:t=>({obs:this.assessment.buildValueCoded("Family planning",t.label)})},{id:"reason_for_no_cxca",helpText:"Reason for NOT offering CxCa screening",type:s["b"].TT_SELECT,validation:t=>r["a"].required(t),condition:t=>"No"===t.offer_CxCa.value,options:()=>this.getReasonsForNoCxcaOptions(),computedValue:t=>({obs:this.assessment.buildValueCoded("Reason for NOT offering CxCa",t.value)})}]}}}),D=a("6b0d"),T=a.n(D);const C=T()(g,[["render",n]]);e["default"]=C},e86e:function(t,e,a){"use strict";a.d(e,"b",(function(){return s})),a.d(e,"d",(function(){return o})),a.d(e,"c",(function(){return r})),a.d(e,"f",(function(){return c})),a.d(e,"e",(function(){return l})),a.d(e,"a",(function(){return u})),a.d(e,"g",(function(){return d})),a.d(e,"h",(function(){return h}));var i=a("5713"),n=a("2ef0");async function s(t=""){const e=await i["a"].getFacilities({name:t});return e.filter(t=>!Object(n["isEmpty"])(t)&&""!=t.name.trim()).map(t=>({label:t.name,value:t.location_id,other:t}))}async function o(t=""){const e=await i["a"].getLabs({search_name:t});return e.map(t=>({label:t,value:t}))}async function r(t=""){const e=await i["a"].getFacilities({name:t,tag:"Facility adult sections"});return e.map(t=>({label:t.name,value:t.name,other:t}))}async function c(){const t=await i["a"].getSpecialistClinics();return t.map(t=>({label:t.name,value:t.name,other:t}))}async function l(){const t=await i["a"].getRegions();return t.map(t=>({label:t.name,value:t.region_id,other:t}))}async function u(t){const e=await i["a"].getDistricts(t);return e.map(t=>({label:t.name,value:t.district_id,other:t}))}async function d(t,e=""){const a=await i["a"].getTraditionalAuthorities(t,e);return a.map(t=>({label:t.name,value:t.traditional_authority_id,other:t}))}async function h(t,e=""){const a=await i["a"].getVillages(t,e);return a.map(t=>({label:t.name,value:t.village_id,other:t}))}}}]);
//# sourceMappingURL=chunk-2d7b0dba.5ac8a320.js.map