{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsCircumcisionStatus.vue?d2d0","webpack:///./src/apps/HTS/views/encounters/HtsCircumcisionStatus.vue","webpack:///./src/apps/HTS/views/encounters/HtsCircumcisionStatus.vue?d198","webpack:///./src/apps/HTS/services/hts_circumcision_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","HtsCircumcisionService","patientID","providerID","htsMaleCircumcisedField","immediate","methods","formData","computedData","saveFormEncounterAndProceed","encounterTypeID","id","helpText","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","obs","buildValueCoded","options","label","value","values","yesNoOptions","__exports__","AppEncounterService","constructor","super","getRecentCircumcisionStatus","getFirstValueCoded","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","error","toastWarning","enc","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-31c5e014.1435d938.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Circumcision status\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        skipSummary: true,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { Field } from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport { HtsCircumcisionService } from \"@/apps/HTS/services/hts_circumcision_service\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsCircumcisionService,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsCircumcisionService(\n            this.patientID,\n            this.providerID\n          );\n          this.fields = [this.htsMaleCircumcisedField()];\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    onFinish(formData: any, computedData: any) {\n      this.saveFormEncounterAndProceed({\n        encounterTypeID: this.service.encounterTypeID,\n        formData,\n        computedData,\n      })\n    },\n    htsMaleCircumcisedField(): Field {\n      return {\n        id: \"hts_male_circumcised\",\n        helpText: \"Circumcision status\",\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            obs: this.service.buildValueCoded(\"Circumcision status\", v),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Is client circumcised?\",\n              value: \"\",\n              values: this.yesNoOptions(),\n            },\n          ];\n        },\n      };\n    },\n  },\n});\n","import { render } from \"./HtsCircumcisionStatus.vue?vue&type=template&id=1d7aa605&ts=true\"\nimport script from \"./HtsCircumcisionStatus.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsCircumcisionStatus.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsCircumcisionService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 158, providerID)\n    }\n\n    getRecentCircumcisionStatus() {\n        return this.getFirstValueCoded('Circumcision status')\n    }\n}\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\nimport { LabOrderService } from '@/apps/ART/services/lab_order_service'\nimport { OrderService } from '@/services/order_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}