{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/Registration.vue?43ca","webpack:///./src/apps/OPD/services/patient_registration_service.ts","webpack:///./src/constants/index.ts","webpack:///./src/apps/OPD/views/encounters/Registration.vue","webpack:///./src/apps/OPD/views/encounters/Registration.vue?8474"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","PatientVisitRegistrationService","patientID","providerID","AppEncounterService","MALAWI_NATIONAL_ID_TYPE","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","registrationService","watch","ready","handler","isReady","patient","getID","getFields","immediate","deep","methods","formData","computedData","asignNID","createEncounter","encounter","toastWarning","resolveObs","registrationData","saveObservationList","registrationObs","nextTask","nidAvailable","nid","value","updateMWNationalId","mwIdExists","Patientservice","findByOtherID","people","length","id","helpText","type","FieldType","TT_SELECT","validation","Validation","required","computedValue","v","obs","buildValueCoded","options","label","buildValueText","condition","visit_type","getFacilities","config","showKeyboard","isFilterDataViaApi","getMWNationalID","yesNoUnknownOptions","appearInSummary","TT_TEXT","isMWNationalID","national_id_available","beforeNext","field","toString","summaryMapValue","casing","isChildBearing","__exports__"],"mappings":"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","file":"js/chunk-770d622c.f893c32c.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class PatientVisitRegistrationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 104, providerID) \n    }\n}\n","export const MALAWI_NATIONAL_ID_TYPE = 28;","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientVisitRegistrationService } from \"@/apps/OPD/services/patient_registration_service\"\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { toastWarning } from '@/utils/Alerts';\nimport { Patientservice } from '@/services/patient_service';\nimport { MALAWI_NATIONAL_ID_TYPE } from '@/constants';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        registrationService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.registrationService = new PatientVisitRegistrationService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            await this.asignNID(formData)\n            const encounter = await this.registrationService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create registration encounter')\n            \n            const registrationData = await this.resolveObs({...computedData})\n            const registrationObs = await this.registrationService.saveObservationList(registrationData)\n            if (!registrationObs) return toastWarning('Unable to save observations')\n\n            this.nextTask()        \n        },\n        async asignNID(formData: any) {\n            const nidAvailable = formData['national_id_available']\n            const nid = formData['national_id']\n            if(nidAvailable && nidAvailable.value === 'Yes') {\n                await this.patient.updateMWNationalId(nid.value)\n            }\n        },\n        async mwIdExists(nid: string) {\n            if(!nid) return false\n            const people = await Patientservice.findByOtherID(MALAWI_NATIONAL_ID_TYPE, nid)\n            return people.length > 0\n        },\n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'visit_type',\n                    helpText: 'Type of visit',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: (v: Option) => ({ obs: this.registrationService.buildValueCoded('Type of visit', v.value)}),\n                    options: () => {\n                        return [\n                            { label: 'New', value: 'New patient' },\n                            { label: 'Referral', value: 'Referral' },\n                            { label: 'Re-visiting', value: 'Re-visiting' },\n                        ]\n                    }\n                },\n                {\n                    id: 'referring_facility_name',\n                    helpText: 'Referred from',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ label }: Option) => ({obs: this.registrationService.buildValueText('Referred from', label)}),\n                    condition: (fields: any) => fields.visit_type.value === 'Referral',\n                    options: () => getFacilities(''),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                {\n                    id: 'national_id_available',\n                    helpText: 'National ID Available',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    condition: () => this.patient.getMWNationalID() === 'Unknown',\n                    options: () => this.yesNoUnknownOptions(),\n                    appearInSummary: () => false\n                },\n                {\n                    id: 'national_id',\n                    helpText: 'Enter National ID',\n                    type: FieldType.TT_TEXT,\n                    validation: (value: Option) => Validation.isMWNationalID(value),\n                    condition: (fields: any) => fields.national_id_available.value === 'Yes',\n                    beforeNext: async (field: Option) => {\n                        if(field.value && (await this.mwIdExists(field.value.toString()))){\n                            toastWarning('National ID already exists')\n                            return false\n                        }\n                        return true\n                    },\n                    summaryMapValue: ({ value }: Option) => ({\n                        value,\n                        label: 'National ID'\n                    }),\n                    config: {\n                        casing: 'uppercase'\n                    }\n                },\n                {\n                    id: 'patient_pregnant',\n                    helpText: 'Patient pregnant',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({value}: Option) => ({obs: this.registrationService.buildValueCoded('PATIENT PREGNANT', value)}),\n                    condition: () => this.patient.isChildBearing(),\n                    options: () => this.yesNoUnknownOptions(),\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Registration.vue?vue&type=template&id=6d385c05&ts=true\"\nimport script from \"./Registration.vue?vue&type=script&lang=ts\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}