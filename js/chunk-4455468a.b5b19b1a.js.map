{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/Vaccination.vue?1080","webpack:///./src/apps/ANC/Services/anc_dispensing_service.ts","webpack:///./src/apps/ANC/Views/Encounters/Vaccination.vue","webpack:///./src/apps/ANC/Views/Encounters/Vaccination.vue?4841","webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ANC/Services/anc_treatment_service.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","formFields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","AncDispensationService","AppEncounterService","constructor","patientID","providerID","super","saveNoDispensationObs","this","saveValueTextObs","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","getFields","immediate","methods","f","computedData","prescription","action","nextTask","id","helpText","type","FieldType","TT_YES_NO","validation","v","finalComputedValue","test","value","async","AncTreatmentService","createEncounter","updateVaccinationOrder","options","label","values","yesNoOptions","__exports__","DrugOrderService","Service","orders","postJson","getProgramID","dispensations","map","order","getSessionDate","getJson","pageSize","drugID","date","params","patientId","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","created","$route","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","error","toastWarning","enc","encounterTypeID","saveObservationList","callback","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","DRUG_FREQUENCIES","vaccinationDrugObj","dispensed","dispenseVaccinationDrug","orderID","order_id","updateDispensationOrders","createOrders","create","getEncounterID","drugs","o","buildDrugOrderObj","dispensation","forEach","quantity","frequency","duration","drug_inventory_id","drug","expiryDate","setDate","getDate","dose","dailyEquivalentDose","parseFloat","toStandardHisFormat","drug_name","units","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-4455468a.b5b19b1a.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\n\nexport class AncDispensationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 54, providerID)\n    }\n\n    saveNoDispensationObs() {\n        return this.saveValueTextObs(\n            'Tetanus Diphtheria', 'Not dispensed'\n        )\n    }\n\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncDispensationService} from \"@/apps/ANC/Services/anc_dispensing_service\"\nimport { AncTreatmentService } from \"@/apps/ANC/Services/anc_treatment_service\"\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { IonPage } from \"@ionic/vue\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.formFields = this.getFields()\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      await computedData.prescription.action()\n      this.nextTask()\n    },\n    getFields() : Field[] {\n      return [\n        {\n          id: 'prescription',\n          helpText: 'Vaccination',\n          type: FieldType.TT_YES_NO,\n          validation: (v: string) => !v ?  ['Value is required'] : null,\n          finalComputedValue: (v: Option) => {\n            if (/true/i.test(`${v.value}`)) {\n              return {\n                action: async () => {\n                  const service = new AncTreatmentService(this.patientID, this.providerID)\n                  await service.createEncounter()\n                  await service.updateVaccinationOrder()\n                }\n              }\n            }\n\n            return {\n              action: async () => {\n                const service = new AncDispensationService(this.patientID, this.providerID)\n                await service.createEncounter()\n                await service.saveNoDispensationObs()\n              }\n            }\n          },\n          options: () => ([\n            {\n              label: 'TD given today?',\n              values: this.yesNoOptions()\n            }\n          ] as any)\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Vaccination.vue?vue&type=template&id=25ca2083&ts=true\"\nimport script from \"./Vaccination.vue?vue&type=script&lang=ts\"\nexport * from \"./Vaccination.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { find, isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface AncTreatmentDrugObject {\n    'id': number;\n    'drug_name': string;\n    'dose': string;\n    'duration': number;\n    'frequency': string;\n    'units': string;\n}\n\nexport const DRUG_FREQUENCIES: Record<string, number> = { \n    'Once a day (OD)' : 1,\n    'Twice a day (BD)': 2,\n    'Three a day (TDS)': 3,\n    'Four times a day (QID)' : 4,\n    'Five times a day (5X/D)' : 5,\n    'Six times a day (Q4HRS)' : 6,\n    'In the morning (QAM)' : 0.5,\n    'Once a week (QWK)' : 0.14,\n    'Once a month' : 0.03,\n    'Twice a month' : 0.071\n}\n\nexport class AncTreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 25, providerID)\n    }\n\n    vaccinationDrugObj() {\n        return {\n            'drug_inventory_id': 609,\n            'dose': 0.5,\n            'equivalent_daily_dose': 0.5,\n            'frequency': \"Once a day (od)\",\n            'start_date': this.date,\n            'auto_expire_date': this.date,\n            'instructions': \"Once a day\",\n            'units': \"ml\"\n        }\n    }\n\n    async updateVaccinationOrder() {\n        const dispensed = await this.dispenseVaccinationDrug()\n        if (!isEmpty(dispensed)) {\n            const orderID = dispensed[0].order_id\n            return DrugOrderService.updateDispensationOrders([{'order_id': orderID, 'quantity' : 1}])\n        }\n        throw 'Unable to dispense'\n    }\n\n    dispenseVaccinationDrug() {\n        return this.createOrders([this.vaccinationDrugObj()])\n    }\n\n    createOrders(orders: any) {\n        return DrugOrderService.create({\n            'drug_orders': orders,\n            'encounter_id': this.getEncounterID(),\n        })\n    }\n\n    async submitTreatment(drugs: AncTreatmentDrugObject[]) {\n        await this.createEncounter()\n        const orders = await this.createOrders(drugs.map(o => this.buildDrugOrderObj(o)))\n        const dispensation = new AppEncounterService(this.patientID, 54, this.providerID)\n        await dispensation.createEncounter()\n        drugs.forEach(o => {\n            const quantity: number = DRUG_FREQUENCIES[o.frequency] * o.duration\n            orders.forEach((order: any) => { \n                if (order.drug_inventory_id === o.id) {\n                    order.quantity = quantity\n                }\n            })\n        })\n        await DrugOrderService.updateDispensationOrders(orders)\n    }\n\n    buildDrugOrderObj(drug: AncTreatmentDrugObject) {\n        const startDate = new Date(this.date)\n        const expiryDate = startDate.setDate(startDate.getDate() + parseInt(`${drug.duration}`))\n        const dose: any = drug.dose || DRUG_FREQUENCIES[drug.frequency]\n        const dailyEquivalentDose =  parseFloat(dose) * DRUG_FREQUENCIES[drug.frequency] \n        return {\n            'drug_inventory_id': drug.id,\n            'dose': dose,\n            'equivalent_daily_dose': dailyEquivalentDose,\n            'frequency': drug.frequency,\n            'start_date': this.date,\n            'auto_expire_date': HisDate.toStandardHisFormat(new Date(expiryDate)),\n            'instructions': drug.drug_name + ':' + drug.dose + ' ' + drug.units + ' ' + drug.frequency + 'days',\n            'units': drug.units\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}