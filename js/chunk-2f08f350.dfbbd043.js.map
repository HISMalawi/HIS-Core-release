{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/views/EncounterMixin.vue","webpack:///./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./src/apps/LOS/views/OrderTests.vue"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","isCondition","ignored","undefined","prop","includes","every","Boolean","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","onFinishAction","onSubmit","mixins","EncounterMixinVue","service","activityType","query","this","type","PatientLabService","getClinianGivenNameField","getClinianFamilyNameField","getFacililityLocationField","getReasonForTestField","getTestSpecimensField","getTestSelectionField","getTestCombinationField","_","req","placeOrder","printSpecimenLabel","order_id","id","helpText","FieldType","TT_SELECT","defaultValue","getLocationName","validation","val","Validation","required","getFacilities","computedValue","config","showKeyboard","isFilterDataViaApi","field","PersonField","getGivenNameField","proxyID","appearInSummary","getFamilyNameField","summaryMapValue","v","f","ConceptService","getCachedConceptID","async","OrderService","getSpecimens","concept_id","activeSpecimen","TT_GRID_SELECTOR","c","listData","specimen","getTestTypesBySpecimen","t","isChecked","tests"],"mappings":"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","file":"js/chunk-2f08f350.dfbbd043.js","sourcesContent":["/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport {getFacilities} from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PatientLabService } from \"@/apps/LOS/services/patient_lab_service\"\nimport { OrderService } from \"@/services/order_service\"\nimport { ConceptService } from '@/services/concept_service'\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { isEmpty } from 'lodash'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        patientID: -1,\n        service: {} as any,\n        fields: [] as Field[],\n        activityType: '' as 'DRAW_SAMPLES' | 'ORDER_TESTS',\n    }),\n    watch: {\n        '$route': {\n            handler({query, params}: any) {\n                if (query && params) {\n                    this.patientID = params.patient_id\n                    this.activityType = query.type\n                    this.service = new PatientLabService(this.patientID)\n                    this.fields = [\n                        this.getClinianGivenNameField(),\n                        this.getClinianFamilyNameField(),\n                        this.getFacililityLocationField(),\n                        this.getReasonForTestField(),\n                        this.getTestSpecimensField(),\n                        this.getTestSelectionField(),\n                        this.getTestCombinationField()\n                    ]\n                }\n            },\n            immediate: true,\n            deep: true\n        },\n    },\n    methods: {\n        async onSubmit(_: any, computed: any) {\n            const req = await this.service.placeOrder(computed)\n            if (req) {\n                await this.service.printSpecimenLabel(req[0].order_id)\n                this.$router.push(`/patient/dashboard/${this.patientID}`)\n            } \n        },\n        getFacililityLocationField(): Field {\n            return {\n                id: 'target_lab',\n                helpText: 'Requesting location',\n                type: FieldType.TT_SELECT,\n                defaultValue: () => PatientLabService.getLocationName(),\n                validation: (val: Option) => Validation.required(val),\n                options: (_: any, filter='') => getFacilities(filter),\n                computedValue: (val: Option) => val.label,\n                config: {\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            }\n        },\n        getClinianGivenNameField(): Field {\n            const field = PersonField.getGivenNameField()\n            field.helpText = 'Requesting clinician - First name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.appearInSummary = () => false\n            return field\n        },\n        getClinianFamilyNameField(): Field {\n            const field = PersonField.getFamilyNameField()\n            field.helpText = 'Requesting clinician - Last name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.summaryMapValue = (v: any, f: any) => {\n                return {\n                    label: 'Clinician name', \n                    value: `${f.given_name.value} ${v.value}`\n                }\n            },\n            field.computedValue = (v: Option, f: any) => `${f.given_name.value} ${v.value}`\n            return field\n        },\n        getReasonForTestField(): Field {\n            return {\n                id: 'reason_for_test_id',\n                helpText: 'Reason for test',\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: any) => ConceptService.getCachedConceptID(\n                    val.value, true\n                ),\n                options: () => [\n                    {label: 'Routine', value: 'Routine'},\n                    {label: 'Targeted', value: 'Targeted'},\n                    {label: 'Confirmatory', value: 'Confirmatory'},\n                    {label: 'Repeat / Missing', value: 'Repeat / Missing'},\n                    {label: 'Stat', value: 'Stat'}\n                ]\n            }\n        },\n        getTestSpecimensField(): Field {\n            return { \n                id: 'specimen',\n                helpText: 'Select specimen',\n                type: FieldType.TT_SELECT,\n                condition: () => this.activityType === 'DRAW_SAMPLES',\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (v: Option) => ({'concept_id': v.value}),\n                options: async () => {\n                    const req = await OrderService.getSpecimens('')\n                    return req.map((d: any) => ({\n                        label: d.name, \n                        value: d.concept_id\n                    }))\n                },\n                config: {\n                    showKeyboard: true\n                }\n            }\n        },\n        getTestSelectionField(): Field {\n            let activeSpecimen = ''\n            return {\n                id: 'tests',\n                helpText: 'Select tests',\n                type: FieldType.TT_GRID_SELECTOR,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: Array<Option>) => {\n                    return val.map(v => ({'concept_id': v.value}))\n                },\n                options: async (f: any, c: any, listData: Option[]) => {\n                    if (f.specimen && f.specimen.label != activeSpecimen) {\n                        activeSpecimen = f.specimen.label\n                        const req = await OrderService.getTestTypesBySpecimen(\n                            f.specimen.label\n                        )\n                        return req.map((t: any) => ({\n                            label: t.name,\n                            value: t.concept_id,\n                            isChecked: false,\n                            other: t\n                        }))\n                    } else {\n                        return listData\n                    }\n                }\n            }\n        },\n        getTestCombinationField(): Field {\n            return {\n                id: 'combine_tests',\n                helpText: 'Combine test(s) in one order',\n                type: FieldType.TT_SELECT,\n                computedValue: (val: Option) => val.value === 'Yes',\n                condition: (f: any) => f.tests.length > 1,\n                validation: (val: Option) => Validation.required(val),\n                options: () => this.yesNoOptions()\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","import { render } from \"./OrderTests.vue?vue&type=template&id=59c3af0c&ts=true\"\nimport script from \"./OrderTests.vue?vue&type=script&lang=ts\"\nexport * from \"./OrderTests.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}