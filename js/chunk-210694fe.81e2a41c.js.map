{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ANC/Views/Encounters/LabResults.vue"],"names":["DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","EstimationFieldType","label","value","getYearField","id","name","showUnknown","primaryFunctions","push","helpText","appearInSummary","type","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","getDefaultDate","form","field","datePart","defaultValue","date","year","month","day","split","d","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","minDate","min","Date","maxDate","max","generateDateFields","refDate","fullDate","yearValue","monthValue","dayValue","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","condition","buildHelpTextDate","part","parts","default","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","data","proxyID","unload","v","toString","validation","c","required","StandardValidations","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","val","computeValue","isEstimate","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","AGE_ESTIMATE_FIELD","dayjs","Service","getSessionDate","subtract","MONTH_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","_withCtx","_createVNode","fields","formFields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","ANC_GLOBAL_PROP","recencyEssayActivated","GlobalPropertyService","isProp","RECENCY_ESSAY_ACTIVATED","defineComponent","components","IonPage","mixins","EncounterMixinVue","arvNumber","hivStatus","artStatus","arvStartDate","riskOfPreclampsia","service","watch","ready","this","AncLabResultService","patientID","providerID","loadSubsequentVisit","loadArtStatus","ANC_PROP","getFields","immediate","methods","computedData","obs","resolveObs","createEncounter","saveObservationList","printLabResults","nextTask","TT_SUMMARY","isHivPositive","getHivStatus","getArtStatus","getArvStartDate","getArvNumber","TT_MULTIPLE_YES_NO","isPregnancyTestDone","lab_results","isPrengnacyTestDone","toYesNoOption","concept","Validation","map","buildValueCoded","other","inArray","mapStrToOptions","patient","getBirthdate","getDate","prev_hiv_test_result","buildValueDate","yesNoOptions","buildValueText","on_art","recency_essay","TT_MULTIPLE_SELECT","find","onValueUpdate","listData","l","isChecked","async","hivPos","toOption","urine","isAtRiskOfPreEclampsia","ok","alertConfirmation","header","cancelBtnLabel","confirmBtnLabel","footerBtns","slot","onClickComponentEvents","refreshOptions","o","onClick","exitsForm","available_test_results","hiv_status","on_art_1","validateSeries","rangeOf","buildValueNumber","buildOptionsOnce","available_urine_tests","__exports__"],"mappings":"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","file":"js/chunk-210694fe.81e2a41c.js","sourcesContent":["import { GlobalPropertyService } from \"@/services/global_property_service\"\n\nexport enum ANC_GLOBAL_PROP {\n    RECENCY_ESSAY_ACTIVATED = 'recency_essay_activated'\n}\n\nfunction recencyEssayActivated() {\n    return GlobalPropertyService.isProp(`${ANC_GLOBAL_PROP.RECENCY_ESSAY_ACTIVATED}=Yes`)\n}\n\nexport default {\n    recencyEssayActivated\n}","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncLabResultService } from \"@/apps/ANC/Services/anc_lab_result_service\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { ObsValue } from '@/services/observation_service'\nimport { generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper'\nimport HisDate from \"@/utils/Date\"\nimport ANC_PROP from \"@/apps/ANC/anc_global_props\"\nimport { alertConfirmation } from '@/utils/Alerts'\nimport { find } from 'lodash'\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    arvNumber: '' as string,\n    hivStatus: '' as string,\n    artStatus: '' as string,\n    arvStartDate: '' as string,\n    recencyEssayActivated: false as boolean,\n    riskOfPreclampsia: null as boolean | null,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n            this.service = new AncLabResultService(this.patientID, this.providerID)\n            await this.service.loadSubsequentVisit()\n            await this.service.loadArtStatus()\n            this.recencyEssayActivated = await ANC_PROP.recencyEssayActivated()\n            this.formFields = this.getFields()\n        } \n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData)\n      await this.service.createEncounter()\n      await this.service.saveObservationList(obs as ObsValue[])\n      await this.service.printLabResults()\n      this.nextTask()\n    },\n    getFields(): Field[] {\n        return [\n            {\n                id: 'art_summary',\n                helpText: 'ART Summary',\n                type: FieldType.TT_SUMMARY,\n                condition: () => this.service.isHivPositive(),\n                options: () => {\n                    return [\n                        {\n                            label: 'HIV Status', \n                            value: `\n                                <b style=\"color:${this.service.isHivPositive() ? 'red': 'green'}\">\n                                    ${this.service.getHivStatus()}\n                                </b>\n                            `\n                        },\n                        {\n                            label: 'On Art', value: this.service.getArtStatus() || 'N/A'\n                        },\n                        {\n                            label: 'Art Start date', value: HisDate.toStandardHisDisplayFormat(this.service.getArvStartDate()) || 'N/A'\n                        },\n                        {\n                            label: 'ARV Number', value: this.service.getArvNumber() || 'N/A'\n                        }\n                    ]\n                }\n            },\n            {\n                id: 'lab_results',\n                helpText: 'Lab Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: () => !this.service.isPregnancyTestDone && !this.hivStatus,\n                options: (f: any) => {\n                    if (f.lab_results) {\n                        return f.lab_results\n                    }\n                    const options: Option[] = []\n                    if (!this.service.isPrengnacyTestDone) {\n                        options.push(this.toYesNoOption('Pregnancy test done', { concept: 'B-HCG'}))\n                    }\n                    if (!this.service.hivStatus) {\n                        options.push(this.toYesNoOption('Previous HIV test done', { concept: 'Previous HIV test done'}))\n                    }\n                    return options\n                },\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option[]) => v.map(d => this.service.buildValueCoded(d.other.concept, d.value))\n            },\n            {\n                id: 'prev_hiv_test_result',\n                helpText: 'Previous HIV test results',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => this.inArray(\n                    f.lab_results, (v: Option) => v.label === 'Previous HIV test done' && v.value === 'Yes'), \n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive',\n                        'Inconclusive',\n                        'Unknown'\n                    ])\n                },\n                computedValue: (v: Option) => this.service.buildValueCoded('Previous HIV Test Results', v.value)\n            },\n            ...generateDateFields({\n                id: 'prev_hiv_test_date',\n                helpText: 'Previous HIV test',\n                required: true,\n                minDate: () => this.patient.getBirthdate(),\n                maxDate: () => this.service.getDate(),\n                estimation: {\n                    allowUnknown: false\n                },\n                condition: (f: any) => f.prev_hiv_test_result?.value ? true : false,\n                computeValue: (date: string) => this.service.buildValueDate('Previous HIV Test Date', date)\n            }),\n            {\n                id: 'on_art',\n                helpText: 'Patient on ART',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('On Art', v.value),\n                condition: (f: any) => f.prev_hiv_test_result.value === 'Positive',\n                options: () => this.yesNoOptions()\n            },\n            {\n                id: 'arv_number',\n                helpText: 'ARV Number',\n                type: FieldType.TT_TEXT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueText('Art number', v.value),\n                condition: (f: any) => f.on_art.value === 'Yes'\n            },\n            {\n                id: 'recency_essay',\n                helpText: 'Rapid Recency Essay - Asante Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: (f: any) => f.prev_hiv_test_result.value === 'Positive' && this.recencyEssayActivated,\n                computedValue: (v: Option[]) => v ? v.map(d => this.service.buildValueCoded(d.label, d.value)) : null,\n                options: (f: any) => {\n                    if (f.recency_essay) return f.recency_essay\n                    return [\n                        this.toYesNoOption('Line 1. Control Line Present'),\n                        this.toYesNoOption('Line 2. Positive Verification Line Present'),\n                        this.toYesNoOption('Line 3. Long-Term Line Present')\n                    ]\n                }\n            },\n            {\n                id: 'available_test_results',\n                helpText: 'Available Lab Tests',\n                type: FieldType.TT_MULTIPLE_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option[]) => {\n                    if (find(v, { label: 'None'})) {\n                        return this.service.buildValueCoded('Lab test done', 'No')\n                    }\n                    return null\n                },\n                onValueUpdate(listData: Option[], value: Option) {\n                    return listData.map(l => {\n                        if (value.value === 'None' && l.value !='None') {\n                            l.isChecked = false\n                        }\n                        if (value.value != 'None' && value.isChecked && l.value === 'None') {\n                            l.isChecked = false\n                        }\n                        return l\n                    })\n                },\n                options: async (f: any) => {\n                    const options: Option[] = []\n                    const hivPos = !this.service.isHivPositive() ? f.prev_hiv_test_result?.value === 'Positive' : true\n                    if (!hivPos) {\n                        options.push(this.toOption('HIV'))\n                    }\n                    options.push(this.toOption('HB'))\n                    options.push(this.toOption('Syphilis'))\n                    options.push(this.toOption('Malaria'))\n                    options.push(this.toOption('Blood Group'))\n                    const urine: Option = {\n                        label: 'Urine',\n                        value: 'Urine',\n                        isChecked: false\n                    }\n                    if (this.riskOfPreclampsia === null) {\n                        this.riskOfPreclampsia = await this.service.isAtRiskOfPreEclampsia()\n                        if (this.riskOfPreclampsia) {\n                            const ok: boolean = await alertConfirmation(\n                                'Select urine test to conduct urine protein test', {\n                                header: 'Client is at risk of pre-eclampsia.',\n                                cancelBtnLabel: 'Remind later',\n                                confirmBtnLabel: 'Select Urine Test'\n                            })\n                            urine.isChecked = ok\n                        }\n                    }\n                    return [...options, urine, this.toOption('None')]\n                },\n                config: {\n                    footerBtns: [\n                        {\n                            name: \"None\",\n                            slot: \"end\",\n                            onClickComponentEvents: {\n                                refreshOptions: (_: any, listData: Option[]) => {\n                                    return listData.map(o => {\n                                        o.isChecked = o.label === 'None'\n                                        return o\n                                    })\n                                }\n                            },\n                            onClick: () => 'None'\n                        }\n                    ]\n                },\n                exitsForm: (f: any) => find(f.available_test_results, {label: 'None'}),\n            },\n            {\n                id: 'hiv_status',\n                helpText: 'HIV Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('HIV'),\n                computedValue: (v: Option) => this.service.buildValueCoded('HIV status', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive',\n                        'Inconclusive'\n                    ])\n                }\n            },\n            {\n                id: 'on_art_1',\n                helpText: 'Patient on ART',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.hiv_status.value === 'Positive',\n                computedValue: (v: Option) => this.service.buildValueCoded('On Art', v.value),\n                options: () => this.yesNoOptions()\n            },\n            {\n                id: 'arv_number_1',\n                helpText: 'ARV Number',\n                type: FieldType.TT_TEXT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueText('Art number', v.value),\n                condition: (f: any) => f.on_art_1.value === 'Yes'\n            },\n            {\n                id: 'recency_essay_1',\n                helpText: 'Rapid Recency Essay - Asante Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: (f: any) => f.hiv_status.value === 'Positive' && this.recencyEssayActivated,\n                computedValue: (v: Option[]) => v ? v.map(d => this.service.buildValueCoded(d.label, d.value)) : null,                \n                options: () => {\n                    return [\n                        this.toYesNoOption('Line 1. Control Line Present'),\n                        this.toYesNoOption('Line 2. Positive Verification Line Present'),\n                        this.toYesNoOption('Line 3. Long-term Line Present')\n                    ]\n                }\n            },\n            {\n                id: 'hb_result',\n                helpText: 'HB Test Result (g/dl)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 2, 16)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('HB Test Result', v.value),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('HB'),\n            },\n            {\n                id: 'syphilis',\n                helpText: 'Syphilis Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('Syphilis Test Result', v.value),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Syphilis'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive'\n                    ])\n                }\n            },\n            {\n                id: 'malaria',\n                helpText: 'Malaria Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Malaria'),\n                computedValue: (v: Option) => this.service.buildValueCoded('Malaria Test Result', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive'\n                    ])\n                }\n            },\n            {\n                id: 'blood_group',\n                helpText: 'Blood Group Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Blood Group'),\n                computedValue: (v: Option) => this.service.buildValueText('Blood group', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"A+\",\n                        \"A-\",\n                        \"B+\",\n                        \"B-\",\n                        \"AB+\",\n                        \"AB-\",\n                        \"O+\",\n                        \"O-\"\n                    ])\n                }\n            },\n            {\n                id: 'available_urine_tests',\n                helpText: 'Available Urine Tests Results',\n                type: FieldType.TT_MULTIPLE_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Urine'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Protein\",\n                        \"Glucose\",\n                        \"WBC\",\n                        \"RBC\",\n                        \"Nitrate\"\n                    ])\n                },\n                config: {\n                    buildOptionsOnce: true\n                }\n            },\n            {\n                id: 'protein',\n                helpText: 'Urine Protein Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Protein'),\n                computedValue: (v: Option) => this.service.buildValueText('Urine protein', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Negative\",\n                        \"(+)\",\n                        \"+\",\n                        \"++\",\n                        \"+++\",\n                        \"++++\",\n                    ])\n                }\n            },\n            {\n                id: 'glucose',\n                helpText: 'Glucose Test Result (mg/dl)',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Glucose'),\n                computedValue: (v: Option) => this.service.buildValueText('Blood glucose', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Normal\",\n                        \"+\",\n                        \"++\",\n                        \"+++\"\n                    ])\n                }\n            },\n            {\n                id: 'wbc',\n                helpText: 'White Blood Cells Test Result (cmm)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 1000000)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('White blood cells', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('WBC'),\n            },\n            {\n                id: 'rbc',\n                helpText: 'Red Blood Cells Test Result (cmm)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 1000000)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('Red blood cells', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('RBC'),\n            },\n            {\n                id: 'nitrate',\n                helpText: 'Nitrate Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('Urine Nitrate Test', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Nitrate'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Negative\",\n                        \"Trace\",\n                        \"Positive\"\n                    ])\n                }\n            }\n        ]\n    }\n  }\n})\n","import { render } from \"./LabResults.vue?vue&type=template&id=43205c6e&ts=true\"\nimport script from \"./LabResults.vue?vue&type=script&lang=ts\"\nexport * from \"./LabResults.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}