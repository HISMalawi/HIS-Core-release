{"version":3,"sources":["webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/views/HostConfig.vue?d3f6","webpack:///./src/views/HostConfig.vue","webpack:///./src/views/HostConfig.vue?fef3"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","this","$emit","i","__exports__","_component_his_standard_form","_resolveComponent","NETWORK_PRESETS","HisStandardForm","$router","back","usingCustomIp","_formData$presets","_formData$presets2","presets","value","test","uniqueNetworkPresets","presetHash","reduce","a","c","site","trim","toUpperCase","keys","map","n","protocol","ip","port","loading","loadingController","create","message","backdropDismiss","present","ApiClient","setLocalStorage","res","healthCheck","dismiss","status","conf","expandPath","toastWarning","e","console","warn","clearLocalStorage","getFields","id","helpText","FieldType","TT_SELECT","init","async","networkSites","JSON","parse","localStorage","getItem","fetch","ok","json","concat","error","beforeNext","v","other","runHealthCheck","isRequired","condition","length","options","label","requireNext","validation","val","Validation","f","TT_IP_ADDRESS","isIPAddress","ipAddress","ip_address","TT_TEXT","config","customKeyboard","NUMBER_PAD_LO","TT_YES_NO","values","to_save_host","setItem","stringify","isUsingLocalStorage","action","infoActionSheet","slot","color","excluions","removeOnly","showConfigNotice"],"mappings":"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","file":"js/chunk-46397160.16d8480d.js","sourcesContent":["import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\";\nimport ApiClient from \"@/services/api_client\";\nimport { infoActionSheet } from \"@/utils/ActionSheets\";\nimport { toastWarning } from \"@/utils/Alerts\"\nimport { loadingController } from \"@ionic/vue\"\n\nconst NETWORK_PRESETS = 'network_presets'\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  methods: {\n    onFinish() {\n      this.$router.back();\n    },\n    usingCustomIp(formData: any) {\n      if (formData.presets?.value) {\n        return /custom/i.test(`${formData.presets?.value}`)\n      }\n      return true\n    },\n    uniqueNetworkPresets(presets: any[]) {\n      const presetHash = presets.reduce((a, c) => {\n        return { ...a, [`${c.site}`.trim().toUpperCase()]: c  }\n      }, {})\n      return Object.keys(presetHash).map((n) => presetHash[n])\n    },\n    async runHealthCheck(protocol: string, ip: string, port: string) {\n      const loading = await loadingController.create({\n        message: 'Please wait...',\n        backdropDismiss: false\n      })\n\n      await loading.present()\n      \n      ApiClient.setLocalStorage(protocol, ip, port);\n\n      const res = await ApiClient.healthCheck()\n\n      loadingController.dismiss()\n\n      if (!(res && res.status === 200) || !res) {\n        try {\n          const conf =  await ApiClient.expandPath(\"_health\")\n          toastWarning(`Unable to connect to: ${conf}`)\n        } catch (e) {\n          console.warn(e)\n        }\n        this.clearLocalStorage()\n        return false\n      }\n      return true\n    },\n    getFields() {\n      this.fields = [\n        {\n          id: \"presets\",\n          helpText: \"Network sites\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            this.networkSites = JSON.parse(localStorage.getItem(NETWORK_PRESETS)||'[]')\n            try {\n              const res = await fetch('/config.json')\n              if (res.ok) {\n                const data = await res.json()\n                this.networkSites = this.uniqueNetworkPresets(\n                  (data?.networkSites||[]).concat(this.networkSites)\n                )\n              }\n            } catch (e) {\n              console.error(e)\n            }\n            return true\n          },\n          beforeNext: async (v: any) => {\n            if (v.value != 'custom') {\n              const { protocol, ip, port } = v.other\n              return (await this.runHealthCheck(protocol, ip, port))\n            }\n            return true\n          },\n          isRequired: () => true,\n          condition: () => this.networkSites.length,\n          options: () => [\n            ...this.networkSites.map((n: any) => {\n              return { label: n.site, value: n.ip, other: n }\n            }),\n            { label: \"Custom Configuration\", value: \"custom\" }\n          ]\n        },\n        {\n          id: \"protocol\",\n          helpText: \"Select Protocol\",\n          type: FieldType.TT_SELECT,\n          requireNext: false,\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => this.usingCustomIp(f),\n          options: () => [\n            {\n              label: 'HTTP',\n              value: 'http'\n            },\n            {\n              label: 'HTTPS',\n              value: 'https'\n            }\n          ]\n        },\n        {\n          id: \"ip_address\",\n          helpText: \"Enter IP Address\",\n          type: FieldType.TT_IP_ADDRESS,\n          condition: (f: any) => this.usingCustomIp(f),\n          validation: (val: any) => Validation.required(val) || Validation.isIPAddress(val)\n        },\n        {\n          id: \"port\",\n          helpText: \"Enter Port\",\n          beforeNext: async (v: any, f: any) => {\n            const protocol = f.protocol.value;\n            const ipAddress = f.ip_address.value;\n            const port = f.port.value;\n            return (await this.runHealthCheck(protocol, ipAddress, port))\n          },\n          condition: (f: any) => this.usingCustomIp(f),\n          validation: (val: any) => Validation.required(val),\n          type: FieldType.TT_TEXT,\n          config: {\n            customKeyboard: [\n              NUMBER_PAD_LO,\n              [[\"Delete\"]],\n            ],\n          },\n        },\n        {\n          id: \"to_save_host\",\n          helpText: \"Host preset\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => this.usingCustomIp(f), \n          options: () => [\n            {\n              label: 'Do you want to save this configuration preset?',\n              values: [\n                {\n                  label: \"Yes\",\n                  value: \"Yes\"\n                },\n                {\n                  label: \"No\",\n                  value: \"No\"\n                }\n              ]\n            }\n          ] as any\n        },\n        {\n          id: \"configuration_name\",\n          helpText: \"Configuration name\",\n          type: FieldType.TT_TEXT,\n          condition: (f: any) => f.to_save_host === 'Yes',\n          isRequired: () => true,\n          beforeNext: (v: any, f: any) => {\n            const presets = this.networkSites.concat([\n              { site: v.label, ip: f.ip_address.value,  protocol: f.protocol.value, port: f.port.value }\n            ])\n            localStorage.setItem(NETWORK_PRESETS, JSON.stringify(\n              this.uniqueNetworkPresets(presets)\n            ))\n            return true\n          }\n        }\n      ];\n    },\n    async showConfigNotice() {\n      if (this.isUsingLocalStorage()) {\n        const action = await infoActionSheet(\n          \"Config notice\",\n          `The system is currently using user specified configurations. \\\n                Do you wish to reset back to server configurations?`,\n          \"\",\n          [\n            { name: \"Reset configurations\", slot: \"start\", color: \"success\" },\n            { name: \"New configurations\", slot: \"end\" },\n          ]\n        );\n\n        if (action === \"Reset configurations\") {\n          this.clearLocalStorage();\n          this.$router.back();\n        }\n      }\n    },\n    isUsingLocalStorage() {\n      if (localStorage.getItem(\"useLocalStorage\") === \"true\") return true;\n      return false;\n    },\n    clearLocalStorage() {\n      const excluions = ['useLocalStorage',\n        'apiURL',\n        'apiPort',\n        'apiProtocol'];\n      ApiClient.removeOnly(excluions);\n    }\n  },\n  data() {\n    return {\n      networkSites: [] as any,\n      fields: [] as any,\n    };\n  },\n  async mounted() {\n    await this.showConfigNotice();\n    this.getFields();\n  },\n});\n","import { render } from \"./HostConfig.vue?vue&type=template&id=2e91ed97&ts=true\"\nimport script from \"./HostConfig.vue?vue&type=script&lang=ts\"\nexport * from \"./HostConfig.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}