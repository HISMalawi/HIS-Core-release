{"version":3,"sources":["webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue?d9c4","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue?0c64","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","this","$emit","i","__exports__","_component_his_standard_form","_resolveComponent","$event","HisStandardForm","drugs","selectedDrugs","barcode","stockService","items","prepDrugs","f","postItems","toastSuccess","$router","push","toastDanger","getFields","id","helpText","FieldType","TT_SELECT","validation","val","Validation","options","label","value","condition","transfer_origination","_","filter","getFacilities","computedValue","config","showKeyboard","isFilterDataViaApi","TT_BARCODE","hiddenFooterBtns","onValue","async","TT_MULTIPLE_SELECT","requireNext","unload","footerBtns","slot","onClick","selectAll","TT_FULL_DATE","TT_BATCH_ENTRY","beforeNext","c","currentFieldContext","drugsToStr","map","b","join","drugsWithoutBatches","drug","entries","d","tins","expiry","batchNumber","productCode","every","partialBatches","e","score","some","isEmpty","partialDrugs","toastWarning","batchlessDrugs","v","TT_TABLE_VIEWER","buildResults","enter_batches","columns","rows","j","shortName","tabs","toNumString","HisDate","toStandardHisDisplayFormat","other","formdata","location","transfer_location","forEach","el","element","drugID","parseInt","date","listData","l","isChecked","formatDrugs","drugList","created","StockService","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-428a91f2.e3f3847f.js","sourcesContent":["import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.activeField=''))\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport HisDate from \"@/utils/Date\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { StockService } from \"./stock_service\";\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { isEmpty } from \"lodash\";\nimport { toNumString } from \"@/utils/Strs\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any,\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      const items = this.prepDrugs(formData);\n      const f = await this.stockService.postItems(items);\n      if (f) {\n        toastSuccess(\"Stock succesfully added\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(\"Could not save stock\");\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"transfer_origination\",\n          helpText: \"Select where stock came from\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          options: () => [\n            {\n              label: \"DHA\",\n              value: \"DHA\",\n            },\n            {\n              label: \"Other location\",\n              value: \"Other location\",\n            },\n          ],\n        },\n        {\n          id: \"transfer_location\",\n          helpText: \"Location\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          condition: (val: any) => val.transfer_origination.value === \"Other location\",\n          options: (_: any, filter = \"\") => getFacilities(filter),\n          computedValue: (val: Option) => val.label,\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n        },\n        {\n          id: \"barcode\",\n          helpText: \"Scan barcode\",\n          type: FieldType.TT_BARCODE,\n\n          config: {\n            hiddenFooterBtns: [\"Clear\", \"Next\"],\n          },\n          onValue: async (id: string) => {\n            this.barcode = id;\n            this.activeField = \"select drugs\";\n          },\n          condition: (val: any) => val.transfer_origination.value === \"DHA\"\n        },\n        {\n          id: \"select drugs\",\n          helpText: \"Select drugs\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          requireNext: true,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.drugs,\n          unload: (val: any) => (this.selectedDrugs = val),\n          config: {\n            showKeyboard: true,\n            footerBtns: [\n              {\n                name: \"Select all\",\n                slot: \"end\",\n                onClick: () => {\n                  this.selectAll(this.drugs);\n                },\n              },\n            ],\n          },\n        },\n        {\n          id: \"date\",\n          helpText: \"Delivery Date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: Option) => Validation.required(val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_ENTRY,\n          options: () => this.selectedDrugs,\n          beforeNext: (_: any, f: any, c: any, {currentFieldContext}: any) => {\n            const drugsToStr = (drugs: any) => drugs.map((b: any, i: number) => `${b.label}`).join(' & ')\n            const drugsWithoutBatches = currentFieldContext.drugs.filter((drug: any) =>\n              drug.entries.map((d: any) => !d.tins && !d.expiry && !d.batchNumber && !d.productCode).every(Boolean)\n            )\n            const partialBatches = currentFieldContext.drugs.filter((drug: any) => {\n              return drug.entries.map((e: any) => {\n                let score = 0\n                if (e.tins) score += 1\n                if (e.expiry) score += 1\n                if (e.batchNumber) score += 1\n                if (e.productCode) score += 1\n                return score >= 1 && score <= 3 \n              }).some(Boolean)\n            })\n            if (!isEmpty(partialBatches)) {\n              const partialDrugs = drugsToStr(partialBatches)\n              toastWarning(`Please fix partial batch entries for drugs: ${partialDrugs}`)\n              return false\n            }\n            if (!isEmpty(drugsWithoutBatches)) {\n              const batchlessDrugs = drugsToStr(drugsWithoutBatches)\n              toastWarning(`The following drug batches are empty: ${batchlessDrugs}`)\n              return false\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"adherence_report\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d.enter_batches),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(d: any) {\n      const columns = [\n        \"Drug\",\n        \"Amount per unit\",\n        \"Total units\",\n        \"Expiry date\",\n        \"Batch number\",\n        \"Product code\"\n      ];\n      const rows = d.map((j: any) => {\n        const d = j.value;\n        return [\n          d.shortName,\n          d.tabs,\n          toNumString(d.tins),\n          HisDate.toStandardHisDisplayFormat(d.expiry),\n          d.batchNumber,\n          d.productCode,\n        ];\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    prepDrugs(formdata: any) {\n      const items: any[] = [];\n      const barcode = this.barcode;\n      const location = formdata.transfer_origination.value === \"DHA\" ? null : formdata.transfer_location.value;\n      formdata.enter_batches.forEach((el: any) => {\n        const element = el.value;\n        items.push({\n          'batch_number': element.batchNumber,\n          'location_id': location,\n          items: [\n            {\n              'product_code': element.productCode,\n              'barcode': barcode,\n              'drug_id': element.drugID,\n              'expiry_date': element.expiry,\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\n              'delivery_date': formdata.date.value,\n            },\n          ],\n        });\n      });\n      return items;\n    },\n    selectAll(listData: Array<Option>) {\n      return listData.map((l) => {\n        l.isChecked = true;\n        return l;\n      });\n    },\n    formatDrugs() {\n      return this.stockService.drugList().map((drug: any) => {\n        return {\n          label: drug.shortName,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n    this.drugs = this.formatDrugs();\n  },\n});\n","import { render } from \"./enter_receipts.vue?vue&type=template&id=a1a800ec&ts=true\"\nimport script from \"./enter_receipts.vue?vue&type=script&lang=ts\"\nexport * from \"./enter_receipts.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n"],"sourceRoot":""}