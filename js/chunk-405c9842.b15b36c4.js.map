{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/encounters/ARVNumber.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","patientHasARVNumber","currentArvNumber","prependValue","watch","ready","arvNumber","this","patient","getArvNumber","a","split","replace","suggestedNumber","ProgramService","getNextSuggestedARVNumber","arv_number","getFields","immediate","methods","formData","newArvNumber","value","$router","back","exists","IdentifierService","arvNumberExists","toastWarning","updateARVNumber","createArvNumber","error","id","helpText","type","FieldType","TT_TEXT","validation","val","Validation","required","defaultValue","config","initialKb","artApp","HisApp","getActiveApp","programPatientIdentifiers","arvType","prefix","footerBtns","name","slot","color","onClick","async","__exports__","Service","constructor","super","identifierType","getJson","getProgramID","getIdentifierType","setIdentifierType","getDuplicateIndentifiers","getPatientsByIdentifier","identifier"],"mappings":"uIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,MAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,OAAQV,EAAKU,OACbC,eAAgBX,EAAKY,SACrBC,aAAa,EACbC,sBAAuBd,EAAKe,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,0B,oGCE5BC,+BAAgB,CAC7BC,OAAQ,CAACC,QACTC,WAAY,CAAEC,wBACdC,KAAM,KAAM,CACVC,qBAAqB,EACrBC,iBAAkB,GAClBC,aAAc,KAEhBC,MAAO,CACLC,MAAO,CACL,cAAcA,GACZ,IAAKA,EAAO,OACZ,MAAMC,EAAYC,KAAKC,QAAQC,eAC/B,GAAiB,YAAdH,EAAyB,CAC1B,MAAMI,EAAIJ,EAAUK,MAAM,KAC1BJ,KAAKL,iBAAmBQ,EAAE,GAAGE,QAAQ,WAAY,IACjDL,KAAKJ,aAAe,GAAGO,EAAE,MAAMA,EAAE,MACjCH,KAAKN,qBAAsB,MACtB,CACL,MAAMY,QAAyBC,OAAeC,4BAC9CR,KAAKL,iBAAmBW,EAAgBG,WAAWJ,QAAQ,WAAY,IAEzEL,KAAKlB,OAASkB,KAAKU,aAErBC,WAAW,IAGfC,QAAS,CACP,eAAeC,GACb,MAAMC,EAAeD,EAAS,cAAcE,MAC5C,GAAGD,IAAiBd,KAAKC,QAAQC,eAAgB,OAAOF,KAAKgB,QAAQC,OACrE,MAAMC,QAAeC,OAAkBC,gBAAgBN,GACvD,GAAGI,EAAQG,eAAa,4BAA6B,UAEnD,IACKrB,KAAKN,0BACAM,KAAKC,QAAQqB,gBAAgBR,SAC1Bd,KAAKC,QAAQsB,gBAAgBT,GACxCd,KAAKgB,QAAQC,OACb,MAAOO,GACPH,eAAaG,KAInBd,YACE,MAAO,CACL,CACEe,GAAI,aACJC,SAAU,oBACVC,KAAMC,OAAUC,QAChBC,WAAaC,GAAaC,OAAWC,SAASF,GAC9CG,aAAc,IAAMlC,KAAKL,iBACzBwC,OAAQ,CACNC,UAAW,MACXxC,aAAc,KACZ,GAAGI,KAAKJ,aAAc,OAAOI,KAAKJ,aAClC,MAAMyC,EAASC,OAAOC,eACtB,GAAIF,GAAUA,EAAOG,0BAA2B,CAC9C,MAAMC,EAAUJ,EAAOG,0BAA0B,cACjD,OAAOC,EAAQC,SAEjB,MAAO,IAETC,WAAY,CACV,CACEC,KAAM,kBACNC,KAAM,MACNC,MAAO,SACPC,QAASC,gBACDhD,KAAKC,QAAQqB,gBAAgB,WACnCtB,KAAKgB,QAAQC,iB,qBC7E/B,MAAMgC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS9E,KAErD,gB,kCCPf,kDAQM,MAAOgD,UAA0B+B,OAEnCC,cACIC,QACApD,KAAKqD,gBAAkB,EAGF,4BACrB,OAAOD,MAAME,QAAQ,6BAGG,6BAACvD,GACzB,MAAMN,QAAa2D,MAAME,QAAQ,YAAYF,MAAMG,oCAAoCxD,KACvF,OAAON,EAAKyB,OAGhBsC,oBACI,OAAOxD,KAAKqD,eAGhBI,kBAAkB9B,GACd3B,KAAKqD,eAAiB1B,EAG1B+B,2BACI,OAAOR,OAAQI,QAAQ,gCAAiC,CACpD,QAAWtD,KAAKqD,iBAIxBM,wBAAwBC,GACpB,OAAOV,OAAQI,QAAQ,gCAAgC,CACnD,QAAWtD,KAAKqD,eAChB,WAAcO","file":"js/chunk-405c9842.b15b36c4.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { toastWarning } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport HisApp from \"@/apps/app_lib\"\nimport { IdentifierService } from \"@/services/identifier_service\";\nimport { ProgramService } from \"@/services/program_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    patientHasARVNumber: false,\n    currentArvNumber: \"\" as any,\n    prependValue: \"\" as any,\n  }),\n  watch: {\n    ready: {\n      async handler(ready: any) {\n        if (!ready) return\n        const arvNumber = this.patient.getArvNumber()\n        if(arvNumber !== \"Unknown\") {\n          const a = arvNumber.split('-')\n          this.currentArvNumber = a[2].replace(/^\\D+|\\s/g, \"\")\n          this.prependValue = `${a[0]}-${a[1]}-`\n          this.patientHasARVNumber = true\n        } else {\n          const suggestedNumber =  await ProgramService.getNextSuggestedARVNumber();\n          this.currentArvNumber = suggestedNumber.arv_number.replace(/^\\D+|\\s/g, \"\");\n        }\n        this.fields = this.getFields();\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      const newArvNumber = formData['arv_number'].value\n      if(newArvNumber === this.patient.getArvNumber()) return this.$router.back()\n      const exists = await IdentifierService.arvNumberExists(newArvNumber)\n      if(exists) toastWarning(\"ARV number already exists\", 5000)\n      else {\n        try {\n          if(this.patientHasARVNumber) \n            await this.patient.updateARVNumber(newArvNumber)\n          else await this.patient.createArvNumber(newArvNumber)\n          this.$router.back()\n        } catch (error) {\n          toastWarning(error)\n        }\n      }   \n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"arv_number\",\n          helpText: \"Update ARV Number\",\n          type: FieldType.TT_TEXT,\n          validation: (val: any) => Validation.required(val),\n          defaultValue: () => this.currentArvNumber,\n          config: {\n            initialKb: '0-9',\n            prependValue: () => {\n              if(this.prependValue) return this.prependValue\n              const artApp = HisApp.getActiveApp()\n              if (artApp && artApp.programPatientIdentifiers) {\n                const arvType = artApp.programPatientIdentifiers['ARV Number']\n                return arvType.prefix()\n              }\n              return ''\n            },\n            footerBtns: [\n              {\n                name: \"Void ARV Number\",\n                slot: \"end\",\n                color: 'danger',\n                onClick: async (formData: any) => {\n                  await this.patient.updateARVNumber(\"Unknown\")\n                  this.$router.back()\n                }\n              }\n            ]\n          },\n        }\n      ]\n    }\n  }\n});\n","import { render } from \"./ARVNumber.vue?vue&type=template&id=4ab459be&ts=true\"\nimport script from \"./ARVNumber.vue?vue&type=script&lang=ts\"\nexport * from \"./ARVNumber.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"./service\";\nimport ART from \"@/apps/ART/app\"\n\nexport interface DuplicateIdentifiersInterface {\n    count: number;\n    identifier: string;\n}\n\nexport class IdentifierService extends Service {\n    identifierType: number\n    constructor() {\n        super()\n        this.identifierType = -1\n    }\n \n    static getIdentifierTypes() {\n        return super.getJson('types/patient_identifiers')\n    }\n\n    static async arvNumberExists(arvNumber: string): Promise<boolean> {\n        const data = await super.getJson(`programs/${super.getProgramID()}/lookup_arv_number/${arvNumber}`)\n        return data.exists\n    }\n\n    getIdentifierType() {\n        return this.identifierType\n    }\n\n    setIdentifierType(type: number) {\n        this.identifierType = type\n    }\n\n    getDuplicateIndentifiers(): Promise<DuplicateIdentifiersInterface[]> {\n        return Service.getJson(`search/identifiers/duplicates`, {\n            'type_id': this.identifierType\n        })\n    }\n\n    getPatientsByIdentifier(identifier: string) {\n        return Service.getJson(`search/patients/by_identifier`,{\n            'type_id': this.identifierType,\n            'identifier': identifier\n        })\n    }\n}\n"],"sourceRoot":""}