{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue?29dd","webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue?aa30","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","patientType","watch","patient","this","PatientTypeService","patientID","providerID","loadPatientType","getFields","deep","methods","formData","getFacilities","filter","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","mapOptions","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","offlineID","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","patientDashboardUrl","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","obs","resolveObs","computedData","status","enc","AppEncounterService","encounterTypeID","createEncounter","saveObservationList","callback","test","error","toastDanger","saveObsOffline","observations","uploadStatus","meta","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","facilities","LocationService","f","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-449ba214.7e2eed69.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    patientType: {} as any,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.patientType = new PatientTypeService(\n          this.patientID,\n          this.providerID\n        );\n        await this.patientType.loadPatientType();\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      //       const encounter = await this.patientType.createEncounter();\n      //       if (!encounter) return toastWarning(\"Unable to create encounter\");\n      //       this.patientType.setLocationName(formData?.location?.label);\n      //       this.patientType.setPatientType(formData?.patient_type?.value);\n      //       await this.patientType.save();\n      //       toastSuccess(\"Observations and encounter created!\");\n      //       this.nextTask();\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"via_test_results\",\n          helpText: \"VIA test results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Negative\",\n              \"Positive\",\n              \"Suspect\",\n            ]);\n          },\n        },\n        {\n          id: \"pap_smear\",\n          helpText: \"PAP Smear Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"PAP Smear normal\",\n              \"PAP Smear abnormal\"\n            ]);\n          },\n        },\n        {\n          id: \"hpv_dna\",\n          helpText: \"HPV DNA Test Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"HPV negative\",\n              \"HPV positive\"\n            ]);\n          },\n        },\n        {\n          id: \"speculum_exam\",\n          helpText: \"Speculum Exam Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Visible Lesion\",\n              \"No Visible lesion\",\n              \"Other gynaecological condition\",\n            ]);\n          },\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaResult.vue?vue&type=template&id=59ae6bcf&ts=true\"\nimport script from \"./CxCaResult.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaResult.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            let created = false\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}