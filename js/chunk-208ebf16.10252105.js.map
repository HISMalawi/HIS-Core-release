{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/services/person_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/apps/LOS/views/OrderTests.vue?1f71","webpack:///./src/apps/LOS/views/OrderTests.vue","webpack:///./src/apps/LOS/views/OrderTests.vue?8a98"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","isEnrolledInProgam","formLabel","ready","watch","handler","route","params","patient_id","this","toUpperCase","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","nextTask","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","mapToOption","listOptions","item","resolvePerson","computedForm","attr","isPlainObject","getGivenNameField","id","helpText","FieldType","TT_TEXT","computedValue","val","validation","Validation","isName","form","PersonService","searchGivenName","getFamilyNameField","searchFamilyName","getGenderField","customOptions","TT_SELECT","getDobConfig","includeHelpText","summaryLabel","minDate","estimateDateFromAge","maxDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","date","isEstimate","birthdate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","dynamicHelpText","f","home_region","match","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","onClick","c","field","toastWarning","filtered","ok","alertConfirmation","address","LocationService","createAddress","getHomeTaField","config","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","defaultComputedOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","test","home_village","onClickComponentEvents","setValue","getCurrentDistrictField","current_region","getCurrentTAfield","current_district","getCurrentVillageField","current_traditional_authority","getCellNumberField","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","getFacilityLocationField","_","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","gender","birthdate_estimated","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","getNationalID","npid","show","Service","getProgramName","isCondition","ignored","undefined","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","constructor","super","postJson","update","putJson","getJson","personId","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id","_component_his_standard_form","_resolveComponent","onSubmit","mixins","EncounterMixinVue","service","activityType","query","PatientLabService","getClinianGivenNameField","getClinianFamilyNameField","getFacililityLocationField","getReasonForTestField","getTestSpecimensField","getTestSelectionField","getTestCombinationField","req","placeOrder","printSpecimenLabel","order_id","defaultValue","getLocationName","PersonField","summaryMapValue","ConceptService","getCachedConceptID","OrderService","getSpecimens","concept_id","activeSpecimen","TT_GRID_SELECTOR","listData","specimen","getTestTypesBySpecimen","t","isChecked","tests"],"mappings":"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","file":"js/chunk-208ebf16.10252105.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            dynamicHelpText: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Current Region of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'Current District of Residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'Current TA of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Current Village of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Person } from \"@/interfaces/person\"\nimport { Service } from \"./service\"\n\nexport interface NewPerson {\n    person_id?: number;\n    given_name: string;\n    family_name: string;\n    gender: string;\n    birthdate: string;\n    birthdate_estimated: boolean;\n    home_district: string;\n    home_traditional_authority: string;\n    home_village: string;\n    current_district: string;\n    current_traditional_authority: string;\n    current_village: string;\n    landmark: string;\n    cell_phone_number: string;\n    occupation: string;\n    facility_name: string;\n    patient_type?: string;\n    relationship?: string;\n}\n\nexport class PersonService extends Service{\n    person: Person | NewPerson\n    constructor(person: NewPerson | Person){\n        super()\n        this.person = person\n    }\n\n    create() { return Service.postJson('/people', this.person) }\n\n    update(id: number) { return Service.putJson(`people/${id}`, {\n        ...this.person, 'program_id': Service.getProgramID()\n    })}\n\n    static searchFamilyName(name: string) {\n        return super.getJson('/search/family_name', {'search_string': name})\n    }\n\n    static searchGivenName(name: string) {\n        return super.getJson('/search/given_name', {'search_string': name})\n    }\n\n    static async getPersonFullName(personId: string | number) {\n        const names = await super.getJson(`/people/${personId}/names`)\n        return names && names.length ? names[0].given_name + ' ' + names[0].family_name : ''\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport {getFacilities} from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PatientLabService } from \"@/apps/LOS/services/patient_lab_service\"\nimport { OrderService } from \"@/services/order_service\"\nimport { ConceptService } from '@/services/concept_service'\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { isEmpty } from 'lodash'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        patientID: -1,\n        service: {} as any,\n        fields: [] as Field[],\n        activityType: '' as 'DRAW_SAMPLES' | 'ORDER_TESTS',\n    }),\n    watch: {\n        '$route': {\n            handler({query, params}: any) {\n                if (query && params) {\n                    this.patientID = params.patient_id\n                    this.activityType = query.type\n                    this.service = new PatientLabService(this.patientID)\n                    this.fields = [\n                        this.getClinianGivenNameField(),\n                        this.getClinianFamilyNameField(),\n                        this.getFacililityLocationField(),\n                        this.getReasonForTestField(),\n                        this.getTestSpecimensField(),\n                        this.getTestSelectionField(),\n                        this.getTestCombinationField()\n                    ]\n                }\n            },\n            immediate: true,\n            deep: true\n        },\n    },\n    methods: {\n        async onSubmit(_: any, computed: any) {\n            const req = await this.service.placeOrder(computed)\n            if (req) {\n                await this.service.printSpecimenLabel(req[0].order_id)\n                this.$router.push(`/patient/dashboard/${this.patientID}`)\n            } \n        },\n        getFacililityLocationField(): Field {\n            return {\n                id: 'target_lab',\n                helpText: 'Requesting location',\n                type: FieldType.TT_SELECT,\n                defaultValue: () => PatientLabService.getLocationName(),\n                validation: (val: Option) => Validation.required(val),\n                options: (_: any, filter='') => getFacilities(filter),\n                computedValue: (val: Option) => val.label,\n                config: {\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            }\n        },\n        getClinianGivenNameField(): Field {\n            const field = PersonField.getGivenNameField()\n            field.helpText = 'Requesting clinician - First name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.appearInSummary = () => false\n            return field\n        },\n        getClinianFamilyNameField(): Field {\n            const field = PersonField.getFamilyNameField()\n            field.helpText = 'Requesting clinician - Last name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.summaryMapValue = (v: any, f: any) => {\n                return {\n                    label: 'Clinician name', \n                    value: `${f.given_name.value} ${v.value}`\n                }\n            },\n            field.computedValue = (v: Option, f: any) => `${f.given_name.value} ${v.value}`\n            return field\n        },\n        getReasonForTestField(): Field {\n            return {\n                id: 'reason_for_test_id',\n                helpText: 'Reason for test',\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: any) => ConceptService.getCachedConceptID(\n                    val.value, true\n                ),\n                options: () => [\n                    {label: 'Routine', value: 'Routine'},\n                    {label: 'Targeted', value: 'Targeted'},\n                    {label: 'Confirmatory', value: 'Confirmatory'},\n                    {label: 'Repeat / Missing', value: 'Repeat / Missing'},\n                    {label: 'Stat', value: 'Stat'}\n                ]\n            }\n        },\n        getTestSpecimensField(): Field {\n            return { \n                id: 'specimen',\n                helpText: 'Select specimen',\n                type: FieldType.TT_SELECT,\n                condition: () => this.activityType === 'DRAW_SAMPLES',\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (v: Option) => ({'concept_id': v.value}),\n                options: async () => {\n                    const req = await OrderService.getSpecimens('')\n                    return req.map((d: any) => ({\n                        label: d.name, \n                        value: d.concept_id\n                    }))\n                },\n                config: {\n                    showKeyboard: true\n                }\n            }\n        },\n        getTestSelectionField(): Field {\n            let activeSpecimen = ''\n            return {\n                id: 'tests',\n                helpText: 'Select tests',\n                type: FieldType.TT_GRID_SELECTOR,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: Array<Option>) => {\n                    return val.map(v => ({'concept_id': v.value}))\n                },\n                options: async (f: any, c: any, listData: Option[]) => {\n                    if (f.specimen && f.specimen.label != activeSpecimen) {\n                        activeSpecimen = f.specimen.label\n                        const req = await OrderService.getTestTypesBySpecimen(\n                            f.specimen.label\n                        )\n                        return req.map((t: any) => ({\n                            label: t.name,\n                            value: t.concept_id,\n                            isChecked: false,\n                            other: t\n                        }))\n                    } else {\n                        return listData\n                    }\n                }\n            }\n        },\n        getTestCombinationField(): Field {\n            return {\n                id: 'combine_tests',\n                helpText: 'Combine test(s) in one order',\n                type: FieldType.TT_SELECT,\n                computedValue: (val: Option) => val.value === 'Yes',\n                condition: (f: any) => f.tests.length > 1,\n                validation: (val: Option) => Validation.required(val),\n                options: () => this.yesNoOptions()\n            }\n        }\n    }\n})\n","import { render } from \"./OrderTests.vue?vue&type=template&id=59c3af0c&ts=true\"\nimport script from \"./OrderTests.vue?vue&type=script&lang=ts\"\nexport * from \"./OrderTests.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}