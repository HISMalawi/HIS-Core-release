{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ART/views/encounters/Vitals.vue?3109","webpack:///./src/apps/ART/views/encounters/Vitals.vue","webpack:///./src/apps/ART/views/encounters/Vitals.vue?9c95","webpack:///./src/apps/ART/services/vitals_service.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","saveObsOffline","observations","id","uploadStatus","encounterTypeID","meta","formData","labOrders","synchronizeRecord","skipNextTask","nextOfflineFlow","error","toastWarning","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","toastDanger","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","toOption","label","other","mapStrToOptions","items","i","path","task","nextPatientWorkflowActivity","patientUrl","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","_component_his_standard_form","_resolveComponent","onOnskip","$event","mixins","EncounterMixinVue","app","HisApp","getActiveApp","hasBPinfo","finalHeightValue","recentHeight","recentHeightObsID","HTNEnabled","optionWhiteList","hasHTNObs","vitals","weightForHeight","medianWeightandHeight","canEditHeight","patientAgeAtPrevRecordedHeight","watch","handler","init","immediate","VitalsService","getGender","getFields","getOptions","modifier","icon","visible","o","includes","canCheckWeightHeight","canCheckBp","encounter","createEncounter","buildObs","saveObservationList","toastSuccess","mapObs","sanitizeVitals","element","on_htn_medication","splitBP","forEach","bpSystolic","bpDiastolic","getBMI","weight","getVal","height","currentWeightPercentile","parseFloat","toFixed","currentHeightPercentile","currentHeightRounded","Math","floor","medianWeightHeight","weightForHeightPercentile","isNaN","BMI","BMIService","calculateBMI","val","key","j","validateVitals","l","checkRequiredVitals","v","validateAll","helpText","FieldType","TT_SELECT","_this$app","applicationName","getAll","validation","Validation","TT_VITALS_ENTRY","query","vital_options","lastHeight","getRecentHeightObs","getMedianWeightHeight","getWeightForHeightValues","beforeNext","heightOption","enteredHeight","prevHeight","prevHeightBtnTxt","newHeightBtnTxt","alertConfirmation","voidObs","config","hiddenFooterBtns","onUpdateAlertStatus","weightOption","result","onChangeOption","activeItem","errs","validator","constructor","super","isNotEmptyandNumber","vital","match","isNotEmptyandFloat","checkMinMax","min","max","_val$other","_val$other2","mergeErrors","errors","holder","isValidBPReading","isValidBP","emptyErrors","minErrors","isCondition","ignored","undefined","prop","every","sortByPriority","sortByWeight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-25532402.f7940707.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n                Offline().saveObsOffline({\n                    observations: obs,\n                    id: this.offlineID,\n                    uploadStatus: status,\n                    encounterName: this.$route.name,\n                    encounterTypeID: params.encounterTypeID,\n                    meta: params.formData,\n                    labOrders: params.labOrders,\n                    created\n                }, created)\n                Offline().synchronizeRecord(this.offlineID)\n                if (!params.skipNextTask) this.nextOfflineFlow()\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            // if (!this.isOfflineMode()) {\n            //     try {\n            //         const enc = new AppEncounterService(\n            //             this.patientID,\n            //             params.encounterTypeID, \n            //             this.providerID\n            //         )\n            //         if ((await enc.createEncounter())) {\n            //             if ((await enc.saveObservationList(obs as ObsValue[]))) {\n            //                 status = 'Success'\n            //             }\n            //         }\n            //         if (typeof params.callback === 'function') {\n            //             await params.callback(enc)\n            //         }\n            //         created = true\n            //     } catch (e) {\n            //         created = false\n            //         if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n            //             status = 'NetworkError'\n            //         } else {\n            //             status = 'Exception'\n            //             console.error(`Exception while saving an encounter: ${e}`)\n            //         }\n            //     }\n            //     if (status === 'Exception') {\n            //         return toastDanger(\"An error has occured!\")\n            //     }\n            // }\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextOfflineFlow() {\n            const task = Offline().nextPatientWorkflowActivity(this.patientID)\n            if (!task || !task.patientUrl) return this.$router.push(`/patient/dashboard/${this.patientID}`)\n            return this.$router.push(`${task.patientUrl}/${this.patientID}`) \n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onOnskip: _cache[0] || (_cache[0] = ($event: any) => (_ctx.activeField = '')),\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { VitalsService } from \"@/apps/ART/services/vitals_service\";\nimport { alertConfirmation, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { BMIService } from \"@/services/bmi_service\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { find, isEmpty } from \"lodash\";\nimport HisApp from \"@/apps/app_lib\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport dayjs from \"dayjs\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    app: HisApp.getActiveApp() as any,\n    activeField: \"\",\n    age: null as any,\n    gender: null as any,\n    hasBPinfo: false,\n    finalHeightValue: null as number | null,\n    recentHeight: null,\n    recentHeightObsID: -1,\n    HTNEnabled: false,\n    optionWhiteList: [] as string[],\n    hasHTNObs: false,\n    vitals: {} as any,\n    weightForHeight: {} as any,\n    medianWeightandHeight: {} as any,\n    canEditHeight: false as boolean,\n    patientAgeAtPrevRecordedHeight: -1 as number\n  }),\n  watch: {\n    ready: {\n      handler(ready) {\n        if (ready) this.init()\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    init() {\n      this.vitals = new VitalsService(this.patientID, this.providerID);\n      this.age = this.patient.getAge();\n      this.gender = this.patient.getGender();\n      this.fields = this.getFields();\n    },\n    getOptions() {\n      let recentHeight = ''\n      if (this.recentHeight) {\n        if (this.age > 18 || this.patientAgeAtPrevRecordedHeight >= 18 ) {\n          recentHeight = this.recentHeight || ''\n        }\n      }\n      const options = [\n        {\n          label: \"Weight\",\n          value: \"\",\n          other: {\n            modifier: \"KG\",\n            icon: \"weight\",\n            required: true,\n          },\n        },\n        {\n          label: \"Height\",\n          value: `${recentHeight}`,\n          other: {\n            modifier: \"CM\",\n            icon: \"height\",\n            recentHeight: this.recentHeight,\n            visible: this.canEditHeight,\n            required: this.canEditHeight\n          },\n        },\n        { label: \"BP\", value: \"\", other: { modifier: \"mmHG\", icon: \"bp\" } },\n        {\n          label: \"Temp\",\n          value: \"\",\n          other: { modifier: \"°C\", icon: \"temp\" },\n        },\n        {\n          label: \"SP02\",\n          value: \"\",\n          other: { modifier: \"%\", icon: \"spo2\" },\n        },\n        {\n          label: \"Pulse\",\n          value: \"\",\n          other: { modifier: \"BPM\", icon: \"pulse-rate\" },\n        },\n        {\n          label: \"Age\",\n          value: this.age,\n          other: { modifier: \"Years old\", icon: \"\", visible: false },\n        }\n      ]\n\n      if (!isEmpty(this.optionWhiteList)) {\n        return options.filter((o: any) => this.optionWhiteList.includes(o.label))\n          .map((o: any) => {\n            o.other.required = true\n            return o\n          })\n      }\n      return options\n    },\n    canCheckWeightHeight() {\n      return isEmpty(this.optionWhiteList) || this.optionWhiteList.includes('Height') \n        && this.optionWhiteList.includes('Weight')\n    },\n    canCheckBp() {\n      return isEmpty(this.optionWhiteList) || this.optionWhiteList.includes('BP')\n    },\n    async onFinish(formData: any) {\n      const encounter = await this.vitals.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create treatment encounter\");\n\n      const obs = await this.buildObs(formData);\n      const observations = await this.vitals.saveObservationList(obs);\n\n      if (!observations) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      this.nextTask();\n    },\n    async buildObs(formData: any) {\n      const observations: any = await this.mapObs(\n        this.sanitizeVitals(formData.vitals).filter(\n          (element) => element.label !== \"BP\"\n        ).map((e: any) => {\n          if (e.label === 'Height' && e.other.visible && this.finalHeightValue) {\n            e.value = this.finalHeightValue\n          }\n          return e\n        })\n      );\n      if (this.HTNEnabled && !this.hasHTNObs && formData.on_htn_medication) {\n        const obs = await this.vitals.buildValueText(\n          \"Treatment status\",\n          formData.on_htn_medication.value\n        );\n        observations.push(obs);\n      }\n      return observations;\n    },\n    splitBP(formData: Option[]) {\n      const p: Option[] = [];\n      formData.forEach((element) => {\n        if (element.label === \"BP\") {\n          const value = `${element.value}`.split(\"/\");\n          const bpSystolic = value[0];\n          const bpDiastolic = value[1];\n\n          p.push({ label: \"Systolic\", value: bpSystolic });\n          p.push({ label: \"Diastolic\", value: bpDiastolic });\n        }\n      });\n      return p;\n    },\n    getBMI(formData: Option[]) {\n      const weight = this.getVal(formData, \"Weight\");\n      const height = this.getVal(formData, \"Height\");\n      const obs: any = [];\n      if (this.age <= 14) {\n        const currentWeightPercentile = (\n          (weight / parseFloat(this.medianWeightandHeight[\"weight\"])) *\n          100\n        ).toFixed(0);\n        const currentHeightPercentile = (\n          (height / parseFloat(this.medianWeightandHeight[\"height\"])) *\n          100\n        ).toFixed(0);\n        const currentHeightRounded =\n          (height % Math.floor(height) < 0.5 ? 0 : 0.5) + Math.floor(height);\n        const medianWeightHeight =\n          this.weightForHeight[currentHeightRounded.toFixed(1)];\n        const weightForHeightPercentile = (\n          (weight / medianWeightHeight) *\n          100\n        ).toFixed(0);\n        if(!isNaN(parseFloat(weightForHeightPercentile))) {\n          obs.push({\n            label: \"Weight for height percent of median\",\n            value: weightForHeightPercentile,\n          });\n        }\n        obs.push({\n          label: \"Weight for age percent of median\",\n          value: currentWeightPercentile,\n        });\n        obs.push({\n          label: \"Height for age percent of median\",\n          value: currentHeightPercentile,\n        });\n      } else {\n        const BMI = BMIService.calculateBMI(weight, height);\n        obs.push({ label: \"BMI\", value: BMI });\n      }\n      return obs;\n    },\n    getVal(formData: Option[], val: string): number {\n      const value = formData.filter((key: any) => key.label === val);\n      return value[0].value === \"\" ? 0 : parseFloat(`${value[0].value}`);\n    },\n    async mapObs(vitals: any) {\n      const j = vitals.map(async (element: any) => {\n        const obs = await this.vitals.buildValueNumber(\n          element.label,\n          element.value\n        );\n        return obs;\n      });\n      return Promise.all(j);\n    },\n    validateVitals(vitals: any) {\n      const l = this.checkRequiredVitals(vitals);\n      if (l.length > 0) {\n        return l.map((val) => {\n          return [`${val.label} can not be empty`];\n        });\n      }\n      const v = this.sanitizeVitals(vitals);\n      return this.vitals.validateAll(v);\n    },\n    sanitizeVitals(vitals: Array<Option>) {\n      let p = vitals.filter((element) => {\n        if (element.label === \"Height\" && element.other.required == false) {\n          return false;\n        }\n        return element.value !== \"\" && element.label !== \"Age\";\n      })\n      if (this.canCheckBp()) {\n        p = p.concat(this.splitBP(p))\n      }\n      if (this.canCheckWeightHeight()){\n        p = p.concat(this.getBMI(vitals))\n      }\n      return p\n    },\n    checkRequiredVitals(vitals: Array<Option>) {\n      return vitals.filter((element) => {\n        return element.value === \"\" && element.other.required === true;\n      });\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"on_htn_medication\",\n          helpText: \"Already taking drugs for blood pressure?\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            if (this.app?.applicationName === 'ART') {\n              this.HTNEnabled = await Store.get('IS_ART_HTN_ENABLED')\n              if (this.HTNEnabled) {\n                await VitalsService.getAll(this.patientID, \"Treatment status\").then(\n                  (data: any) => {\n                    this.hasHTNObs = data && data.length > 0;\n                  }\n                )\n              }\n            }\n            return true\n          },\n          validation: (val: any) => Validation.required(val),\n          condition: () => {\n            return this.HTNEnabled && !this.hasHTNObs;\n          },\n          options: () => [\n            {\n              label: \"Yes\",\n              value: \"BP Drugs started\",\n            },\n            {\n              label: \"No\",\n              value: \"Not on BP Drugs\",\n            },\n          ],\n        },\n        {\n          id: \"vitals\",\n          helpText: \"Vitals entry\",\n          type: FieldType.TT_VITALS_ENTRY,\n          init: async () => {\n            const optionWhiteList = this.$route.query.vital_options as string\n            if (optionWhiteList) this.optionWhiteList = optionWhiteList.split(',')\n            if (this.canCheckWeightHeight()) {\n              const lastHeight = await this.patient.getRecentHeightObs();\n              if (!isEmpty(lastHeight)) {\n                this.patientAgeAtPrevRecordedHeight = dayjs(lastHeight['obs_datetime'])\n                  .diff(this.patient.getBirthdate(), 'year')\n                this.recentHeight = lastHeight['value_numeric'];\n                this.recentHeightObsID = lastHeight['obs_id'];\n                /**\n                 * For a scenario where a patient's height was last updated when they were a minor\n                 * and they return as an adult, provide an option to update their height.\n                 */\n                this.canEditHeight = this.patientAgeAtPrevRecordedHeight < 18 || this.age < 18\n              } else {\n                this.canEditHeight = true\n              }\n              if (this.age <= 14) {\n                this.medianWeightandHeight = await this.patient.getMedianWeightHeight();\n                this.weightForHeight = await ProgramService.getWeightForHeightValues();\n              }\n            }\n            return true\n          },\n          validation: (value: any) => this.validateVitals(value),\n          beforeNext: async (val: Option[]) => {\n            const heightOption = find(val, { label: \"Height\" });\n            if (heightOption && this.recentHeight && heightOption.other.visible) {\n              const enteredHeight = parseInt(`${heightOption.value || 0}`);\n              const prevHeight = parseInt(`${this.recentHeight || 0}`);\n\n              /** Warn if inconsistent height is detected */\n              if (enteredHeight < prevHeight) {\n                const prevHeightBtnTxt = `Use ${prevHeight} CM`\n                const newHeightBtnTxt = `Use ${enteredHeight} CM`\n                const action = await infoActionSheet(\n                  `Previous Height \"${prevHeight} CM\"`,\n                  `Current Height \"${enteredHeight} CM\"`,\n                  `Inconsistent Height Reading (Height can not be lower than previous height of \" ${this.recentHeight} \"CM. Please SELECT the correct height.)`,\n                  [\n                    {\n                      name: prevHeightBtnTxt,\n                      slot: 'start',\n                      color: 'success'\n                    },\n                    {\n                      name: newHeightBtnTxt,\n                      slot: 'end',\n                      color: 'danger'\n                    }\n                  ]\n                )\n                if (action === newHeightBtnTxt && this.recentHeightObsID) {\n                  if ((await alertConfirmation(\n                    `Do you want to void height observation for ${prevHeight}`\n                  ))) {\n                    await VitalsService.voidObs(this.recentHeightObsID)\n                  }\n                } else {\n                  this.finalHeightValue = prevHeight\n                }\n              }\n            }\n            return true\n          },\n          config: {\n            hiddenFooterBtns : [\n              'Clear'\n            ],\n            onUpdateAlertStatus: async (params: Option[]) => {\n              const weightOption = find(params, { label: 'Weight'})\n              const heightOption = find(params, { label: 'Height'})\n\n              if (!(weightOption && heightOption)) return\n\n              const weight = parseFloat(weightOption.value as string)\n              const height = parseFloat(heightOption.value as string)\n\n              if (weight <= 0 || height <=0) return { \n                label: 'BMI',\n                value: 'N/A',\n                color: '', \n                status: ''\n              }\n\n              const BMI = await BMIService.getBMI(weight, height, this.gender, this.age);\n\n              return {\n                label: 'BMI',\n                value: BMI.index,\n                color: BMI.color, \n                status: BMI.result\n              }\n            },\n            onChangeOption: (activeItem: any) => {\n              if (!activeItem.value && activeItem.other.required) {\n                throw `Value for ${activeItem.label} is required`\n              }else if (activeItem.value) {\n                const errs = this.vitals.validator(activeItem)\n                if(errs && errs.length) throw errs\n              }\n            }\n          },\n          options: () => this.getOptions(),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./Vitals.vue?vue&type=template&id=0953bc40&ts=true\"\nimport script from \"./Vitals.vue?vue&type=script&lang=ts\"\nexport * from \"./Vitals.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { isArray } from \"lodash\";\nimport { Option } from '@/components/Forms/FieldInterface';\nexport class VitalsService extends AppEncounterService{\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 6, providerID);\n  }\n  isNotEmptyandNumber(vital: Option) {\n    return `${vital.value}`.match(/^-?\\d+\\.?\\d*$/) ? null : [`Invalid entry for ${vital.label}`]\n  }\n  isNotEmptyandFloat(vital: Option) {\n    return `${vital.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/) \n      ? null \n      : [`Invalid entry for ${vital.label}. Don't forget to add a decimal. e.g. 56.2 ${vital.other.modifier}`]\n  }\n  checkMinMax(val: Option, min: number, max: number) {\n    const p = [];\n    if (parseFloat(`${val.value}`) < min) {\n      p.push([`${val.label} entered is less than minimum ${min} ${val?.other?.modifier || ''}`])\n    }\n    if (parseFloat(`${val.value}`) > max) {\n      p.push([`${val.label} entered is greater than maximum ${max} ${val?.other?.modifier || ''}`])\n    }\n    return p.length > 0 ? p : null;\n  }\n  validateAll(vitals: Option[]) {\n    const p: any = [];\n    vitals.map((vital: any) => {\n      const j = this.validator(vital);\n      return isArray(j) ? p.push(j) : null\n    })\n    return p.length > 0 ? p : null;\n  }\n\n  mergeErrors(errors: any[]) {\n    const holder: any = [];\n    errors.forEach(element => {\n      if (isArray(element)) {\n        holder.push(element)\n      }\n    });\n    return holder.length > 0 ? holder : null\n  }\n  isValidBPReading(vital: any) {\n    const p = [];\n    const isValidBP =  `${vital.value}`.match(/^\\d{1,3}\\/\\d{1,3}$/g) ? null : ['Invalid BP reading']\n    p.push(isValidBP);\n    if(isValidBP == null) {\n      const value = `${vital.value}`.split('/');\n      \n      const bpSystolic = {\n        label: 'Systolic',\n        value: value[0]\n      };\n      const bpDiastolic = {\n        label: 'Diastolic',\n        value: value[1]\n      };\n      p.push(this.checkMinMax(bpDiastolic, 30, 200))\n      p.push(this.checkMinMax(bpSystolic, 40, 250))\n    }\n    return this.mergeErrors(p)\n  }\n  validator(vital: Option) {\n    const values = [\n      {\n        name: \"Weight\",\n        validator: (val: Option) => {\n          const emptyErrors = this.isNotEmptyandFloat(val);\n          const minErrors = this.checkMinMax(val, 2.0, 250.0);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      },\n      {\n        name: \"Height\",\n        validator: (val: Option) => {\n          const errors = []\n          errors.push(this.isNotEmptyandNumber(val))\n          errors.push(this.checkMinMax(val, 40, 220))\n          return this.mergeErrors(errors); \n        },\n      }, {\n        name: \"BP\",\n        validator: (val: any) => {\n          return this.isValidBPReading(val)\n        },\n      }, {\n        name: \"Temp\",\n        validator: (val: any) => {\n          const emptyErrors = this.isNotEmptyandNumber(val);\n          const minErrors = this.checkMinMax(val, 30, 42);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      }, {\n        name: \"SP02\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 40, 100);\n          return this.mergeErrors([minErrors]); \n        },\n      }, {\n        name: \"Pulse\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 50, 120);\n          return this.mergeErrors([minErrors]); \n        },\n      }\n    ]\n    const v = values.filter(element => {\n      return element.name === vital.label;\n    });\n    if (v.length > 0) {\n      return v[0].validator(vital);\n    }\n    return null\n  }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}