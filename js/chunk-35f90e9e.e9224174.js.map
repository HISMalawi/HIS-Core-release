{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsArtInitiation.vue?9e23","webpack:///./src/apps/HTS/views/encounters/HtsArtInitiation.vue","webpack:///./src/apps/HTS/views/encounters/HtsArtInitiation.vue?6380","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/composables/storage.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/services/hts_art_initiation_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","HtsArtInitiationService","patientID","providerID","referralForArtInitiation","intendedArtSiteField","artAppointmentDataField","htsLinkageCodeField","hiddenArtReferralOutcomeStatusField","immediate","methods","formData","computedData","saveFormEncounterAndProceed","encounterTypeID","id","helpText","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","obs","buildValueText","options","label","value","values","yesNoOptions","TT_SELECT","filter","getFacilities","condition","f","is_referral","defaultValue","getLocationName","config","footerBtns","name","slot","onClickComponentEvents","setValue","onClick","showKeyboard","isFilterDataViaApi","TT_DATE_PICKER","date","d","buildValueDate","minDate","infoItems","toDate","hiddenFooterBtns","invalidLinkageCode","TT_LINKAGE_CODE","validation","_v$other","other","isValidLinkageCode","uniq","concat","map","TT_HIDDEN","toOption","buildValueCoded","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","getPlatformName","durationObs","buildValueNumber","resolveObs","error","toastWarning","enc","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","_p$person","names","_p$person2","latestName","mapStrToOptions","items","i","path","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","reduce","accum","cur","Array","isArray","Promise","all","inArray","arr","expression","length","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","constructor","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","onerror","filters","openCursor","cursor","filteredData","continue","put","delete","item","entries","every","isInteger","toLower","includes","isCondition","ignored","undefined","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","super","PrintoutService","code","printoutService","printLbl","getFirstValueText","validLinkID","linkID","mapping","A","C","H","K","L","N","P","W","X","Y","regex","match","exec","bookNo","pageNo","rowNo","checkDigit","isNaN","hasOwnProperty","offlineStorage","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village_id"],"mappings":"uIAEM,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAA+BC,8BAAkB,qBACjDC,EAAsBD,8BAAkB,YAE9C,OAAQE,yBAAcC,yBAAaF,EAAqB,KAAM,CAC5DG,QAASC,qBAAS,IAAM,CACtBC,yBAAaP,EAA8B,CACzCQ,UAAW,uBACXC,OAAQf,EAAKe,OACbC,eAAgBhB,EAAKiB,SACrBC,sBAAuBlB,EAAKmB,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,4BAE3CC,EAAG,I,wFCDQC,+BAAgB,CAC7BC,WAAY,CAAEC,gBACdC,OAAQ,CAACC,QACTC,KAAMA,KAAA,CACJC,QAAS,KAEXC,MAAO,CACLC,MAAO,CACLC,QAAQD,GACFA,IACFE,KAAKJ,QAAU,IAAIK,OACjBD,KAAKE,UAAYF,KAAKG,YAExBH,KAAKhB,OAAS,CACZgB,KAAKI,2BACLJ,KAAKK,uBACLL,KAAKM,0BACLN,KAAKO,sBACLP,KAAKQ,yCAIXC,WAAW,IAGfC,QAAS,CACPxB,SAASyB,EAAeC,GACtBZ,KAAKa,4BAA4B,CAC/BC,gBAAiBd,KAAKJ,QAAQkB,gBAC9BH,WACAC,kBAGJR,2BACE,MAAO,CACLW,GAAI,cACJC,SAAU,mCACVC,KAAMC,OAAUC,UAChBC,WAAYA,KAAM,EAClBC,mBAAqBC,IACZ,CACLC,IAAKvB,KAAKJ,QAAQ4B,eAAe,eAAgBF,KAGrDG,QAASA,IACA,CACL,CACEC,MAAO,+BACPC,MAAO,GACPC,OAAQ5B,KAAK6B,mBAMvBxB,uBACE,MAAO,CACLU,GAAI,WACJC,SAAU,wBACVC,KAAMC,OAAUY,UAChBV,WAAYA,KAAM,EAClBC,mBAAoBA,EAAGK,YAAoB,CACzCH,IAAKvB,KAAKJ,QAAQ4B,eAAe,oBAAqBE,KAExDD,QAASA,CAACpC,EAAQ0C,EAAS,KAAOC,eAAcD,GAChDE,UAAYC,GAA6B,QAAlBA,EAAEC,YACzBC,aAAcA,IAAMnC,OAAwBoC,kBAC5CC,OAAQ,CACNC,WAAY,CACV,CACEC,KAAM,OACNC,KAAM,MACNC,uBAAwB,CACtBC,SAAUA,IAAM1C,OAAwBoC,mBAE1CO,QAASA,IAAM,OAGnBC,cAAc,EACdC,oBAAoB,KAI1BxC,0BACE,MAAO,CACLS,GAAI,uBACJC,SAAU,oCACVC,KAAMC,OAAU6B,eAChB3B,WAAYA,KAAM,EAClBgB,aAAcA,IAAMpC,KAAKJ,QAAQoD,KACjCf,UAAYC,GAA6B,QAAlBA,EAAEC,YACzBd,mBAAqB4B,IACZ,CACL1B,IAAKvB,KAAKJ,QAAQsD,eAAe,mBAAoB,GAAGD,EAAEtB,SAG9DW,OAAQ,CACNa,QAASA,IAAMnD,KAAKJ,QAAQoD,KAC5BI,UAAYJ,GACH,CACL,CACEtB,MAAO,uBACPC,MAAO0B,eAAOL,KAIpBM,iBAAkB,CAAC,YAIzB/C,sBACE,IAAIgD,EAA+B,GACnC,MAAO,CACLxC,GAAI,eACJC,SAAU,eACVC,KAAMC,OAAUsC,gBAChBpC,WAAYA,KAAM,EAClBqC,WAAanC,IAAa,IAAAoC,EACxB,OAAM,OAADpC,QAAC,IAADA,GAAQ,QAAPoC,EAADpC,EAAGqC,aAAK,IAAAD,GAARA,EAAUE,mBAIR,MAHLL,EAAqBM,kBAAKN,EAAmBO,OAAO,GAAGxC,EAAEK,QAClD,CAAC,mCAIZM,UAAYC,GAA6B,QAAlBA,EAAEC,YACzBd,mBAAqBC,IACZ,CACLC,IAAK,CACHvB,KAAKJ,QAAQ4B,eAAe,oBAAqB,GAAGF,EAAEK,UACnD4B,EAAmBQ,IAAKhD,GAAOf,KAAKJ,QAAQ4B,eAAe,UAAWT,SAMnFP,sCACE,MAAO,CACLO,GAAI,oBACJC,SAAU,cACVC,KAAMC,OAAU8C,UAChB5B,aAAcA,IACLpC,KAAKiE,SAAS,WAEvB5C,mBAAqBC,IACZ,CACLC,IAAKvB,KAAKJ,QAAQsE,gBAChB,mCACA5C,EAAEK,c,qBC5JhB,MAAMwC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASnG,KAErD,gB,0DCHHoG,E,yEAAZ,SAAYA,GACRA,EAAA,+BACAA,EAAA,6CACAA,EAAA,qDACAA,EAAA,2CACAA,EAAA,uBACAA,EAAA,gBANJ,CAAYA,MAAS,KAQrB,MAAMC,EAAWpB,GAAcqB,OAAQC,2BAA2BtB,GAErDuB,EAA2D,CACpE,qEAAsE,CAClEC,SAAU,EACVC,QAAS,CACLC,MAAOC,OAASC,uBACZ,MAAMC,QAAeC,eACjB,6BACA,mBAAmBV,EAAQQ,GAC3B,qEACA,CACI,CAAErC,KAAM,SAAUC,KAAM,MAAOuC,MAAO,WACtC,CAAExC,KAAM,iBAAkBC,KAAM,MAAOuC,MAAO,WAC9C,CAAExC,KAAM,kBAAmBC,KAAM,MAAOuC,MAAO,YAGvD,MAAkB,WAAXF,EACDV,EAAUa,wBACC,mBAAXH,EACAV,EAAUc,uBACVd,EAAUe,WAGxBC,WAAY,CACRC,QAAQA,GACJ,MAAmB,iBAAZA,GAEXR,iBAAiBS,GAAmB,YAAEC,IAClC,OAAOA,GAAeD,KAIlC,+DAAgE,CAC5Db,SAAU,EACVC,QAAS,CACLC,MAAOC,OAASY,YAAWD,kBACvB,MAAMT,QAAeC,eACjB,6BAA8B,GAC9B,gBAAgBV,EAAQkB,iCAA2ClB,EAAQmB,KAC3E,CACI,CAAEhD,KAAM,SAAUC,KAAM,MAAOuC,MAAO,UACtC,CAAExC,KAAM,sBAAuBC,KAAM,MAAOuC,MAAO,aAG3D,MAAkB,wBAAXF,EACDV,EAAUqB,oBACVrB,EAAUa,0BAGxBG,WAAY,CACRI,UAAUA,GAAmB,YAAED,IAC3B,OAAOA,EAAcC,KAIjC,oDAAqD,CACjDf,SAAU,EACVC,QAAS,CACLgB,UAAWd,OAASe,YAAWC,gBAAeL,cAAaM,cACvD,MAAMC,QAAcC,eAChB,gCAAgCH,EAChC,QAAQvB,EAAQkB,iBAA2BlB,EAAQwB,KACnDF,EACA,CACI,CAAEnD,KAAM,SAAUwC,MAAO,SAAUvC,KAAM,QAASuD,KAAM,WACxD,CAAExD,KAAM,UAAWC,KAAM,MAAOuD,KAAM,YAG9C,MAAwB,WAAjBF,EAAMhB,OACP,CAAEnD,OAAQ,EAAGsE,UAAW7B,EAAUa,yBAClC,CAAEtD,MAAOmE,EAAMJ,UAAWO,UAAW7B,EAAU8B,gBAG7Dd,WAAY,CACRe,UAAUC,GACN,OAAOA,M,6GCvER9G,+BAAgB,CAC3BC,WAAY,CAAE8G,wBACd1G,KAAMA,KAAA,CACF2G,UAAW,KACXC,QAAS,GACTvH,OAAQ,GACRkB,UAAW,GACXC,YAAa,EACbwF,UAAW,GACXa,mBAAoB,KACpBC,MAAO,CACHC,KAAM,GACNC,UAAW,GACXC,WAAY,GACZC,KAAM,EACNC,OAAQ,GACRtB,UAAW,GACXuB,gBAAgB,EAChBxB,YAAa,GACbM,QAAS,GACTmB,oBAAoB,EACpBpB,cAAe,MACfD,UAAW,GACXQ,WAAW,EACXd,QAAS,GACTR,iBAAkB,GAClBoC,QAAS,GACTC,SAAU,GACVC,UAAW,IAEfpI,UAAW,GACXe,OAAO,IAEXsH,UACQpH,KAAKqH,OAAOC,OAAOC,aACnBvH,KAAKsG,UAAYtG,KAAKqH,OAAOC,OAAOC,WACpCvH,KAAKE,UAAYsH,SAAS,GAAGxH,KAAKqH,OAAOC,OAAOC,YAC5CvH,KAAKyH,YACLzH,KAAK0H,kBAELC,OAAMC,IAAI,iBAAkB,CAAE1H,UAAWF,KAAKE,YACzC2H,KAAKC,IACF9H,KAAKuG,QAAUuB,EACVC,qBAAQ/H,KAAKuG,UACdyB,iBAAUC,aAAajI,KAAKuG,SAEhCvG,KAAKkI,oBAAoBL,KAAK,KAC1B7H,KAAKmI,2BAA2BN,KAAK,KACjC7H,KAAKF,OAAQ,EACbE,KAAKoI,iBACNC,MAAOC,GAAMC,QAAQC,IAAIF,MAC7BD,MAAM,KACDrI,KAAKyH,aACLzH,KAAK0H,wBAOjCe,SAAU,CACNrJ,oBAA8B,OAAOY,KAAK0I,wBAE9ChI,QAAS,CACL0H,eACIpI,KAAKwG,oBAAqB,IAAImC,MAAOC,WAEzCnB,YACI,OAAQoB,OAASlH,OAASmH,OAAcnH,OAE5CkH,WACI,OAAOA,OAASlH,OAEpBmH,gBACI,OAAOA,OAAcnH,OAEzB+F,kBAAe,IAAAqB,EAAAC,EAAAC,EACX,MAAMC,EAAUlB,iBAAUmB,SAASnJ,KAAKsG,WAClC8C,EAAgB,OAAPF,QAAO,IAAPA,GAAqB,QAAdH,EAAPG,EAASG,oBAAY,IAAAN,OAAA,EAArBA,EAAuBK,OACjCA,IACLpJ,KAAKyG,MAAMjB,UAAY4D,EAAOE,UAC9BtJ,KAAKyG,MAAMI,IAAM0C,IAAMC,OAAeC,kBAAkBC,KACpD1J,KAAKyG,MAAMjB,UAAW,SAE1BxF,KAAKyG,MAAMM,gBAAwB,OAAPmC,QAAO,IAAPA,GAAqB,QAAdF,EAAPE,EAASG,oBAAY,IAAAL,OAAA,EAArBA,EAAuBI,OAAOO,uBAAuB,EACjF3J,KAAKyG,MAAMC,KAAc,OAAPwC,QAAO,IAAPA,GAAqB,QAAdD,EAAPC,EAASG,oBAAY,IAAAJ,OAAA,EAArBA,EAAuBvC,KACzC1G,KAAKyG,MAAME,UAAYyC,EAAOQ,WAC9B5J,KAAKyG,MAAMG,WAAawC,EAAOS,YAC/B7J,KAAKyG,MAAMS,SAAWkC,EAAOU,iBAC7B9J,KAAKyG,MAAMQ,QAAUmC,EAAOW,gBAC5B/J,KAAKyG,MAAMU,UAAYiC,EAAOY,8BAC9BhK,KAAKyG,MAAMK,OAASsC,EAAOtC,OAC3B9G,KAAKF,OAAQ,EACbE,KAAKoI,iBAET,kCAAkCd,EAAO,IACrC,IAAI2C,EAAS,UACT7C,GAAU,EACV7F,EAAM,KACV,MAAM2I,GAAU,IAAIvB,MAAOC,UACrBuB,GAAeD,EAAUlK,KAAKwG,oBAAsB,IACpD4D,EAAUD,EAAc,GAC9B,IACI,MAAME,QAAqBC,OAAoB9I,eAC3C,SAAU+I,kBAERC,QAAoBF,OAAoBG,iBAC1C,cAAeL,GAEnB7I,EAAM,UAAWvB,KAAK0K,WAAWpD,EAAO1G,cAAgByJ,EAAcG,GACxE,MAAOlC,GAEL,OADAC,QAAQoC,MAAM,GAAGrC,GACVsC,eAAa,kCAExB,IAAK5K,KAAK8I,gBAAiB,CACvB,IACI,MAAM+B,EAAM,IAAIP,OACZtK,KAAKE,UACLoH,EAAOxG,gBACPd,KAAKG,kBAEE0K,EAAIC,yBACAD,EAAIE,oBAAoBxJ,KAC/B0I,EAAS,WAGc,oBAApB3C,EAAO0D,gBACR1D,EAAO0D,SAASH,GAE1BzD,GAAU,EACZ,MAAOkB,GACLlB,GAAU,EACN,gCAAgC6D,KAAK,GAAG3C,GACxC2B,EAAS,gBAETA,EAAS,YACT1B,QAAQoC,MAAM,wCAAwCrC,IAG9D,GAAe,cAAX2B,EACA,OAAOiB,eAAY,yBAG3BlD,iBAAUmD,eAAe,CACrBC,aAAc7J,EACdR,GAAIf,KAAKsG,UACT+E,aAAcpB,EACdrE,cAAe5F,KAAKqH,OAAO7E,KAC3B1B,gBAAiBwG,EAAOxG,gBACxBwK,KAAMhE,EAAO3G,SACb4K,UAAWjE,EAAOiE,UAClBnE,WACDA,GACEE,EAAOkE,cAAcxL,KAAKyL,YAEnCC,aAAaC,EAAkBrE,EAAO,MAClC,MAAMsE,EAAc,GAmBpB,GAlBAA,EAAOxH,EAAU8B,cAAiBR,IAC9B,MAAQmG,GAAanG,EAAUoG,MAAM,KAC/BC,EAAWC,kBAAKhM,KAAK2F,UAAW,CAAEkG,aAExC,OADIE,IAAU/L,KAAKG,WAAa4L,EAASE,WAClC7H,EAAUe,UAErByG,EAAOxH,EAAUqB,qBAAuB,KACpCzF,KAAKkM,QAAQC,KAAK,kDAAkDnM,KAAKE,WAClEkE,EAAUgI,MAErBR,EAAOxH,EAAUc,wBAA0B,KACvClF,KAAKkM,QAAQC,KAAK,qBAAqBnM,KAAKE,WACrCkE,EAAUgI,MAErBR,EAAOxH,EAAUa,yBAA2B,KACxCjF,KAAKqM,uBACEjI,EAAUgI,MAEjBT,KAASC,EACT,OAAOA,EAAOD,GAAOrE,IAG7B,iCACI,MAAMgF,EAAWC,eAAkBvM,KAAKyG,MAAOjC,GAC/C,IAAI,MAAMgI,KAASF,EAAU,KAAAG,EAAAC,EACzB,MAAMC,EAAUL,EAASE,GACzB,GAAW,OAAPG,QAAO,IAAPA,GAAgB,QAATF,EAAPE,EAASjI,eAAO,IAAA+H,GAAhBA,EAAkB9H,MAAO,KAAAiI,EACzB,MAAM3C,EAASjK,KAAK0L,mBAA2B,OAAPiB,QAAO,IAAPA,GAAgB,QAATC,EAAPD,EAASjI,eAAO,IAAAkI,OAAA,EAAhBA,EAAkBjI,MAAM3E,KAAKyG,SACrE,GAAIwD,IAAW7F,EAAUgI,KAAM,OAEnC,GAAW,OAAPO,QAAO,IAAPA,GAAgB,QAATD,EAAPC,EAASjI,eAAO,IAAAgI,GAAhBA,EAAkBhH,UAAW,KAAAmH,EAC7B,MAAMnH,QAAyB,OAAPiH,QAAO,IAAPA,GAAgB,QAATE,EAAPF,EAASjI,eAAO,IAAAmI,OAAA,EAAhBA,EAAkBnH,UAAU1F,KAAKyG,QACzDzG,KAAK0L,aAAahG,EAAUO,UAAWP,EAAU/D,UAI7D,0BACI,IACI,MAAMmL,QAAgBnF,OAAMC,IAAI,kBAAmB,CAAE1H,UAAWF,KAAKE,YACrEF,KAAKyG,MAAMO,mBAAqB8F,EAAQC,YAAcvD,OAAewD,eACrEhN,KAAKyG,MAAMpB,QAAUyH,EAAQzH,QAC7BrF,KAAKyG,MAAM5B,iBAAmBiI,EAAQxH,UACxC,MAAOgD,GACLC,QAAQoC,MAAMrC,GACd4C,eAAY,GAAG5C,GAEnBtI,KAAKyG,MAAMC,KAAO1G,KAAKuG,QAAQ0G,gBAC/BjN,KAAKyG,MAAME,UAAY3G,KAAKuG,QAAQ2G,eACpClN,KAAKyG,MAAMG,WAAa5G,KAAKuG,QAAQ4G,gBACrCnN,KAAKyG,MAAMU,UAAYnH,KAAKuG,QAAQ6G,eACpCpN,KAAKyG,MAAMS,SAAWlH,KAAKuG,QAAQ8G,qBACnCrN,KAAKyG,MAAMQ,QAAUjH,KAAKuG,QAAQ+G,oBAClCtN,KAAKyG,MAAMlB,YAAciE,OAAeC,iBACxCzJ,KAAKyG,MAAMZ,QAAU2D,OAAe+D,mBACpCvN,KAAKyG,MAAMN,UAAYqD,OAAepD,QACtCpG,KAAKyG,MAAMjB,UAAYxF,KAAKuG,QAAQiH,eACpCxN,KAAKyG,MAAMI,IAAM7G,KAAKuG,QAAQkH,SAC9BzN,KAAKyG,MAAMb,cAAgB5F,KAAKqH,OAAO7E,KACjCxC,KAAKqH,OAAO7E,KAAKkL,WAAWC,cAC5B,MACFnE,OAAepD,UACfpG,KAAK2F,gBAAkBgC,OAAMC,IAAI,aACjC5H,KAAKyG,MAAMd,UAAY3F,KAAK2F,UACvBiI,KAAK,CAACC,EAAQC,KACX,MAAMC,EAAYF,EAAEhC,SAAS8B,cACvBK,EAAYF,EAAEjC,SAAS8B,cAC7B,OAAOI,EAAYC,GAAa,EAAID,EAAYC,EAAa,EAAI,IAEpEjK,IAAKkK,IAAU,IAAAC,EACZ,IAAI1L,EAAO,GAAGyL,EAAEpC,SAChB,IAAK9D,qBAAS,OAADkG,QAAC,IAADA,GAAS,QAARC,EAADD,EAAG7E,cAAM,IAAA8E,OAAA,EAATA,EAAWC,OAAQ,KAAAC,EAC5B,MAAQC,IAAuB,QAARD,EAAAH,EAAE7E,cAAM,IAAAgF,OAAA,EAARA,EAAUD,QAAS,GAC1C3L,GAAQ,KAAK6L,EAAWzE,cAAcyE,EAAWxE,eAErD,OAAOrH,MAIvByB,SAASvC,EAAeiC,EAAM,IAC1B,MAAO,CACHjC,QACAC,MAAOD,EACPiC,UAGR2K,gBAAgBC,GACZ,OAAOA,EAAMxK,IAAIyK,GAAkB,kBAANA,GAA+B,kBAANA,EAC/C,CAAE9M,MAAO8M,EAAG7M,MAAO6M,GAAMA,IAGpC9F,sBACI,MAAO,sBAAsB1I,KAAKqH,OAAOC,OAAOC,YAEpD8E,uBACI,OAAOrM,KAAKkM,QAAQC,KAAK,CAACsC,KAAMzO,KAAK0I,yBAEzC,iBACI,IACI,MAAM3H,EAAKf,KAAKsG,WAAatG,KAAKE,gBAC5BuL,eAAS1K,EAAIf,KAAKkM,QAASlM,KAAKqH,QACxC,MAAOiB,GACLC,QAAQoC,MAAM,kBAAqBrC,GACnCtI,KAAKqM,yBAGbxK,eACI,MAAO,CACH,CAAEH,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,KAAMC,MAAO,QAG9B+M,cAAchN,EAAeiC,EAAW,IACpC,MAAO,CACHjC,QACAC,MAAO,GACPgC,MAAO,IACAA,EACH/B,OAAQ5B,KAAK6B,kBAIzB8M,WAAWlN,GACP,OAAOA,EAAQsC,IAAK6K,IACT,CAAElN,MAAOkN,EAAQjN,MAAOiN,MAGvCC,qBAAqBpN,GACjB,MAAMqN,EAAkB,GACxB,IAAI,MAAMF,KAAUnN,GACS,mBAAdmN,EAAO,IACVA,EAAO,KAGfE,EAAM3C,KAAKnM,KAAKiE,SAAS2K,EAAO,KAEpC,OAAOE,GAEXC,sBACI,MAAO,CACH,CAAErN,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,KAAMC,MAAO,MACtB,CAAED,MAAO,UAAWC,MAAO,aAGnC+I,WAAWnJ,EAAUyN,EAAI,IACrB,MAAMpN,EAAcqN,OAAOrN,OAAOL,GAC7BQ,OAAQkB,GAAWA,IAAMA,EAAE+L,MAAQA,GAAe,KAARA,IAC1CE,OAAO,CAACC,EAAYC,KACjB,MAAMzP,EAAOyP,EAAI7N,IAAM6N,EAAI7N,IAAM6N,EAQjC,OAPIC,MAAMC,QAAQ3P,GACdwP,EAAQA,EAAMrL,OAAOnE,GACE,oBAATA,EACdwP,EAAMhD,KAAKxM,KAEXwP,EAAMhD,KAAKxM,GAERwP,GACJ,IACX,OAAOI,QAAQC,IAAI5N,IAEvB6N,QAAQC,EAAiBC,GACrB,IACI,OAAOD,EAAI3N,OAAQyM,GAAWmB,EAAWnB,IAAIoB,OAAS,EACxD,MAAOtH,GACL,OAAO,IAGfuH,eAAezK,GACX,IACI,IAAI,MAAMoJ,KAAKpJ,EAAY,CACvB,MAAMnD,EAAYmD,EAAWoJ,KAE7B,GAAIvM,EAAW,OAAOA,GAE5B,MAAOqG,GACL,MAAO,CAACA,QC1VxB,MAAMnE,EAAc,EAEL,U,kDCHT,SAAUnG,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQI,yBAAcC,yBAAamR,qCAAyB7R,EAAK8R,UAAW,CAC1E/Q,OAAQf,EAAKe,OACbgR,YAAa/R,EAAK+R,YAClBC,YAAahS,EAAKgS,YAClB9Q,sBAAuBlB,EAAKkB,sBAC5B+Q,WAAYjS,EAAKiB,SACjBA,SAAUjB,EAAKgB,eACfkR,UAAWlS,EAAKmS,SACf,KAAM,GAAI,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN5F9Q,+BAAgB,CAC3BkD,KAAM,kBACNjD,WAAY,CAAE8Q,wBACdC,MAAO,CACH,WACA,WAEJ3Q,KAAMA,KAAA,CACFoQ,SAAU,sBAEdQ,MAAO,CACHtR,eAAgB,CACZgC,KAAMuP,UAEVR,YAAa,CACT/O,KAAMwP,QACN7R,SAAS,GAEbqR,YAAa,CACThP,KAAMyP,QAEV1R,OAAQ,CACJiC,KAAMgO,OACN0B,UAAU,GAEdxR,sBAAuB,CACnB8B,KAAMyP,OACNC,UAAU,IAGlBjQ,QAAS,CACLxB,SAASyB,EAAeC,GACpBZ,KAAK4Q,MAAM,WAAYjQ,EAAUC,IAErCwP,QAAQ5B,GACJxO,KAAK4Q,MAAM,UAAWpC,O,qBCnClC,MAAMrK,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASnG,KAErD,U,geCJf,MAAM6S,YAAc,UACdC,QAAU,aAIHC,eAAiBA,CAACC,YAAyB,qBAC/CC,KAAK,OAAOD,iBAGf,MAAOE,aACXC,gBAAgBC,GACd,MAAMzR,EAAO0R,aAAaC,QAAQF,GAClC,OAAIzR,EACK4P,QAAQgC,SAAQ,GAElBhC,QAAQgC,SAAQ,GAGzBC,eAAeJ,GACb,OAAO,IAAI7B,QAAQ,CAACgC,EAASE,KAC3B,MAAM9R,EAAO0R,aAAaC,QAAQF,GAClC,GAAIzR,EACF,OAAO4R,EAAQG,KAAKC,MAAMhS,IAE5B4R,EAAQ,MAIZK,kBAAkBR,GAEhB,OADAC,aAAaQ,WAAWT,IACjB,EAGTU,cAAcV,EAAazR,GAEzB,OADA0R,aAAaU,QAAQX,EAAKM,KAAKM,UAAUrS,KAClC,GAIL,MAAOsS,iBAGXC,cAAAC,sIAAA,kBACE,MAAMC,EAAcC,UAAUC,KAAKxB,QAAS,GAC5CsB,EAAYG,gBAAkB,WAC5BH,EAAYI,OAAOC,kBAAkB5B,cAEvCuB,EAAYM,UAAY,KACtB1S,KAAK2S,GAAKP,EAAYI,QAI1BrB,gBAAgBC,GACd,OAAO,IAAI7B,QAAQ,CAACgC,EAASE,KAC3B,MAAMmB,EAAU5S,KAAK2S,GAClBE,YAAYhC,aACZiC,YAAYjC,aACZjJ,IAAIwJ,GACPwB,EAAQF,UAAY,KAClBnB,EAAQqB,EAAQJ,SAElBI,EAAQG,QAAU,KAChBtB,EAAOmB,EAAQjI,UAKrB6G,eAAeJ,EAAa4B,GAC1B,OAAO,IAAIzD,QAAQ,CAACgC,EAASE,KAC3B,MAAMmB,EAAU5S,KAAK2S,GAClBE,YAAYhC,aACZiC,YAAYjC,aACZoC,aACHL,EAAQF,UAAY,KAClB,MAAMQ,EAASN,EAAQJ,OACnBU,GACEA,EAAO9B,MAAQA,GAEfG,EADEyB,EACMG,aAAaD,EAAQF,GAErBE,EAAOvR,MAAMhC,MAGzBuT,EAAOE,YAEP7B,EAAQ,KAGZqB,EAAQG,QAAU,KAChBtB,EAAO,YAKbK,cAAcV,EAAazR,GAKzB,OAJAK,KAAK2S,GACFE,YAAYhC,YAAa,aACzBiC,YAAYjC,aACZwC,IAAI1T,EAAMyR,IACN,EAGTQ,kBAAkBR,GAKhB,OAJApR,KAAK2S,GACFE,YAAYhC,YAAa,aACzBiC,YAAYjC,aACZyC,OAAOlC,IACH,GAIX,SAAS+B,aAAaD,EAA4BF,GAChD,OAAOjR,sDAAOmR,EAAOvR,MAAQ4R,GACpBtE,OAAOuE,QAAQR,GAASS,MAAM,EAAErC,EAAKzP,KACtC+R,yDAAUH,EAAKnC,KACTzP,GAAS4R,EAAKnC,KAASzP,GAEvBA,GAASgS,uDAAQJ,EAAKnC,IAAMwC,SAASD,uDAAQhS,Q,8EC3F7D,SAASkS,EAAYpN,EAA4BrB,GAC7C,MAAMuG,EAAQ,GACRmI,EAAU,EAAE,EAAG,GAAI,UAAMC,GAE/B,IAAI,MAAMC,KAAQ5O,EAAY,CAC1B,KAAM4O,KAAQvN,GACV,SAEJ,MAAM9E,EAAQ8E,EAAMuN,GAChBF,EAAQF,SAASjS,GACjBgK,EAAMQ,MAAK,GAIfR,EAAMQ,KAAK/G,EAAW4O,GAAMrS,EAAO8E,IAEvC,OAAOkF,EAAM8H,MAAMhD,SAQvB,SAASwD,EAAe3H,GACpB,OAAOA,EAASsB,KAAK,CAACC,EAAGC,IAAOD,EAAEpJ,UAAYqJ,EAAErJ,UAAaoJ,EAAEpJ,SAAWqJ,EAAErJ,UAAY,EAAI,GAGhG,SAASyP,EAAa5H,GAClB,OAAOA,EAASsB,KAAK,CAACC,EAAGC,IAAOD,EAAEsG,QAAUrG,EAAEqG,QAAWtG,EAAEsG,OAASrG,EAAEqG,QAAU,EAAI,GAgBlF,SAAU5H,EACZ9F,EACA2N,EACAC,EAAO,GACPC,EAAY,GACZC,EAAO,YACP,MAAMC,EAAU,GAChB,IAAI,MAAMC,KAAkBL,EAAY,CACpC,MAAMzU,EAA2ByU,EAAWK,GACtCC,EAAoB,CACrB/U,EAAK0U,QAAUA,GAAU1U,EAAK0U,QAAUA,EACxC1U,EAAK2U,aAAeA,GACd3U,EAAK2U,aAAeA,GAG3BI,EAAkBC,KAAKlE,UAIvBoD,EAAYpN,EAAO9G,EAAKyF,cACxBzF,EAAKiV,MAAQH,EACT9U,EAAKkV,cACLlV,EAAKkV,YAAYC,KAAOnV,EAAKkV,YAAYE,KAAKtO,IAElD+N,EAAQrI,KAAKxM,IAGrB,MAAkB,aAAX4U,EAAwBN,EAAeO,GAAWN,EAAaM,K,4GClGpE,MAAOvU,UAAgCqK,OAI3C4H,YAAYhS,EAAmBC,GAAa,GACxC6U,MAAM9U,EAAW,GAAIC,GAAYgS,eAAA,yBAAAA,eAAA,uBAHF,IAAI8C,QAInCjV,KAAKE,UAAYA,EAGrB,wBAAwBgV,SAChBlV,KAAKmV,gBAAgBC,SACzB,aAAapV,KAAKE,2CAA2CgV,KAI/D,mBACE,aAAclV,KAAKqV,kBAAkB,sBAAuB,cAGhEC,YAAYC,GACV,MAAMC,EAAqC,CACzCC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GAGCC,EAAQ,mDACRC,EAAQD,EAAME,KAAKd,GAEzB,IAAKa,EACH,MAAO,CAAC,yBAGV,MAAME,EAAS9O,SAAS4O,EAAM,GAAI,IAC5BG,EAAS/O,SAAS4O,EAAM,GAAI,IAC5BI,EAAQhP,SAAS4O,EAAM,GAAI,IAC3BK,EAAaL,EAAM,GAGzB,OAAIA,EAAM,GAAGxG,SAAW0G,EAAO5I,WAAWkC,QAAUwG,EAAM,GAAGxG,SAAW4G,EAAM9I,WAAWkC,QAAUwG,EAAM,GAAGxG,SAAW2G,EAAO7I,WAAWkC,OAChI,CAAC,4EAKR8G,MAAMJ,IACNI,MAAMH,IACNG,MAAMF,IACNF,EAAS,GACTA,EAAS,MACTC,EAAS,GACTA,EAAS,KACTC,EAAQ,GACRA,EAAQ,GAED,CAAC,sDAKLhB,EAAQmB,eAAeF,GAIrB,KAHE,CAAC,0B,kCCvEd,iUAKA,MAAMG,EAAiB7F,iBAEhBnM,eAAe5C,EAAcD,EAAO,IACvC,IAAI8U,QAAmBD,EAAepF,eAAe,YAAa,CAAEhP,KAAMT,IAE1E,OADIgG,IAAQ8O,KAAaA,QAAmBC,OAAgB9U,cAAc,CAACQ,KAAMT,KAC1E8U,EAAW9U,OAAQG,IAAY6F,IAAQ7F,IAAsB,IAAhBA,EAAEM,KAAKuU,QACtDhT,IAAKiT,IAAa,CACftV,MAAOsV,EAASxU,KAChBb,MAAOqV,EAASC,YAChBtT,MAAOqT,KAIZpS,eAAesS,EAAiBnV,EAAO,IAC1C,MAAM8U,QAAmBC,OAAgBK,QAAQ,CAAC,YAAepV,IACjE,OAAO8U,EAAW9S,IAAKiT,IAAa,CAC5BtV,MAAOsV,EACPrV,MAAOqV,KAIZpS,eAAewS,EAAiBrV,EAAO,IAC1C,MAAMsV,QAAcP,OAAgB9U,cAAc,CAC9CQ,KAAMT,EACNiN,IAAK,4BAGT,OAAOqI,EAAMtT,IAAKuT,IAAS,CACvB5V,MAAO4V,EAAK9U,KACZb,MAAO2V,EAAK9U,KACZmB,MAAO2T,KAIR1S,eAAe2S,IAClB,MAAMC,QAAgBV,OAAgBS,uBACtC,OAAOC,EAAQzT,IAAK0T,IAAW,CAC3B/V,MAAO+V,EAAOjV,KACdb,MAAO8V,EAAOjV,KACdmB,MAAO8T,KAIR7S,eAAe8S,IAClB,IAAIC,QAAgBf,EAAepF,eAAe,UAAW,IAI7D,OAHIzJ,IAAQ4P,KACRA,QAAgBb,OAAgBY,cAE7BC,EAAQ5T,IAAK6T,IAAW,CAC3BlW,MAAOkW,EAAOpV,KACdb,MAAOiW,EAAOC,UACdlU,MAAOiU,KAIRhT,eAAekT,EAAaC,GAC/B,IAAIC,QAAkBpB,EAAepF,eAAe,YAAa,CAAE,UAAauG,IAEhF,OADIhQ,IAAQiQ,KAAYA,QAAkBlB,OAAgBgB,aAAaC,IAChEC,EAAUjU,IAAKmD,IAAa,CAC/BxF,MAAOwF,EAAS1E,KAChBb,MAAOuF,EAAS+Q,YAChBtU,MAAOuD,KAIRtC,eAAesT,EAA0BC,EAAoB3V,EAAK,IACrE,IAAI4V,QAAYxB,EAAepF,eAAe,0BAA2B,CACrEyG,YAAaE,EAAY3V,SAG7B,OADIuF,IAAQqQ,KAAMA,QAAYtB,OAAgBoB,0BAA0BC,EAAY3V,IAC7E4V,EAAIrU,IAAKsU,IAAO,CACnB3W,MAAO2W,EAAG7V,KACVb,MAAO0W,EAAGC,yBACV3U,MAAO0U,KAIRzT,eAAe2T,EAAYC,EAAgChW,EAAK,IACnE,IAAIiW,QAAiB7B,EAAepF,eAAe,WAAY,CAC3D8G,yBAA0BE,EAAwBhW,SAGtD,OADIuF,IAAQ0Q,KAAWA,QAAiB3B,OAAgByB,YAAYC,EAAwBhW,IACrFiW,EAAS1U,IAAKkD,IAAY,CAC7BvF,MAAOuF,EAAQzE,KACfb,MAAOsF,EAAQyR,WACf/U,MAAOsD","file":"js/chunk-35f90e9e.e9224174.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"ART (Re-) Initiation\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport {\n  Field,\n  Option,\n} from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport { HtsArtInitiationService } from \"../../services/hts_art_initiation_service\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { toDate } from \"@/utils/Strs\";\nimport { uniq } from \"lodash\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsArtInitiationService,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsArtInitiationService(\n            this.patientID,  this.providerID\n          );\n          this.fields = [\n            this.referralForArtInitiation(),\n            this.intendedArtSiteField(),\n            this.artAppointmentDataField(),\n            this.htsLinkageCodeField(),\n            this.hiddenArtReferralOutcomeStatusField(),\n          ];\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    onFinish(formData: any, computedData: any) {\n      this.saveFormEncounterAndProceed({\n        encounterTypeID: this.service.encounterTypeID,\n        formData,\n        computedData,\n      })\n    },\n    referralForArtInitiation(): Field {\n      return {\n        id: \"is_referral\",\n        helpText: \"Referral for ART (Re-)Initiation\",\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            obs: this.service.buildValueText(\"ART referral\", v),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Do you want to refer client?\",\n              value: \"\",\n              values: this.yesNoOptions(),\n            },\n          ];\n        },\n      };\n    },\n    intendedArtSiteField(): Field {\n      return {\n        id: \"art_site\",\n        helpText: \"Intended Site for ART\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: ({ label }: Option) => ({\n          obs: this.service.buildValueText(\"Referral location\", label),\n        }),\n        options: (_: any, filter = \"\") => getFacilities(filter),\n        condition: (f: any) => f.is_referral === \"Yes\",\n        defaultValue: () => HtsArtInitiationService.getLocationName(),\n        config: {\n          footerBtns: [\n            {\n              name: \"Here\",\n              slot: \"end\",\n              onClickComponentEvents: {\n                setValue: () => HtsArtInitiationService.getLocationName()\n              },\n              onClick: () => null,\n            },\n          ],\n          showKeyboard: true,\n          isFilterDataViaApi: true,\n        },\n      };\n    },\n    artAppointmentDataField(): Field {\n      return {\n        id: \"art_appointment_date\",\n        helpText: \"Appointment Date for ART Referral\",\n        type: FieldType.TT_DATE_PICKER,\n        isRequired: () => true,\n        defaultValue: () => this.service.date,\n        condition: (f: any) => f.is_referral === \"Yes\",\n        finalComputedValue: (d: Option) => {\n          return {\n            obs: this.service.buildValueDate(\"Appointment date\", `${d.value}`),\n          };\n        },\n        config: {\n          minDate: () => this.service.date,\n          infoItems: (date: string) => {\n            return [\n              {\n                label: \"Set appointment date\",\n                value: toDate(date),\n              },\n            ];\n          },\n          hiddenFooterBtns: [\"Clear\"],\n        },\n      };\n    },\n    htsLinkageCodeField() {\n      let invalidLinkageCode: string[] = []\n      return {\n        id: 'linkage_code',\n        helpText: 'LINKAGE CODE',\n        type: FieldType.TT_LINKAGE_CODE,\n        isRequired: () => true,\n        validation: (v: Option) => {\n          if (!v?.other?.isValidLinkageCode) {\n            invalidLinkageCode = uniq(invalidLinkageCode.concat(`${v.value}`))\n            return ['Invalid Scanform linkage code']\n          }\n          return null\n        },\n        condition: (f: any) => f.is_referral === \"Yes\",\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: [\n              this.service.buildValueText('HTC Serial number', `${v.value}`),\n              ...invalidLinkageCode.map((id) => this.service.buildValueText('Invalid', id))\n            ]\n          }\n        }\n      }\n    },\n    hiddenArtReferralOutcomeStatusField() {\n      return {\n        id: \"art_outcome_field\",\n        helpText: \"Art outcome\",\n        type: FieldType.TT_HIDDEN,\n        defaultValue: () => {\n          return this.toOption(\"Unknown\");\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Antiretroviral status or outcome\",\n              v.value\n            ),\n          };\n        },\n      };\n    },\n  },\n});\n","import { render } from \"./HtsArtInitiation.vue?vue&type=template&id=034993ce&ts=true\"\nimport script from \"./HtsArtInitiation.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsArtInitiation.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { PrintoutService } from '@/services/printout_service';\nimport Prop from \"@/apps/GLOBAL_APP/global_prop\";\nexport class HtsArtInitiationService extends AppEncounterService {\n  patientID: number\n  printoutService: PrintoutService = new PrintoutService()\n    \n  constructor(patientID: number, providerID = -1) {\n      super(patientID, 79, providerID);\n      this.patientID = patientID;\n  }\n\n  async printHtsLinkageId(code: string) {\n    await this.printoutService.printLbl(\n      `/patients/${this.patientID}/labels/print_hts_linkage_code/${code}`\n    );\n  }\n\n    async getHtsCode() {\n      return (await this.getFirstValueText('HTC serial number'))||'Un-assigned'\n    }\n  \n  validLinkID(linkID: string): Array<string> | null {\n    const mapping: { [key: string]: number } = {\n      A: 0,\n      C: 1,\n      H: 2,\n      K: 3,\n      L: 4,\n      N: 5,\n      P: 6,\n      W: 7,\n      X: 8,\n      Y: 9,\n    };\n\n    const regex = /^(\\d{1,4})-(\\d{1,3})-(\\d{1,2})-([A-CE-HK-NP-Y])$/;\n    const match = regex.exec(linkID);\n\n    if (!match) {\n      return [\"Invalid LinkID format\"]\n    }\n\n    const bookNo = parseInt(match[1], 10);\n    const pageNo = parseInt(match[2], 10);\n    const rowNo = parseInt(match[3], 10);\n    const checkDigit = match[4];\n\n    // book no and row no should not have leading zeros\n    if (match[1].length !== bookNo.toString().length || match[3].length !== rowNo.toString().length || match[2].length !== pageNo.toString().length) {\n      return [\"Invalid LinkID, book number and row number should not have leading zeros\"];\n    }\n\n    // Validate book number, page number, and row number\n    if (\n      isNaN(bookNo) ||\n      isNaN(pageNo) ||\n      isNaN(rowNo) ||\n      bookNo < 1 ||\n      bookNo > 9999 ||\n      pageNo < 1 ||\n      pageNo > 999 ||\n      rowNo < 1 ||\n      rowNo > 99\n    ) {\n      return [\"Invalid LinkID format on book, page, or row number\"];\n    }\n\n    // Validate check digit\n    // eslint-disable-next-line no-prototype-builtins\n    if (!mapping.hasOwnProperty(checkDigit)) {\n      return [\"Invalid check digit\"];\n    }\n\n    return null;\n  }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}