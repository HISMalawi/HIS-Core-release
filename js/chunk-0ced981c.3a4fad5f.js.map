{"version":3,"sources":["webpack:///./src/apps/ANC/Views/DataManagement/AncDrugSet.vue?7b18","webpack:///./src/apps/ANC/Views/DataManagement/AncDrugSet.vue","webpack:///./src/apps/ANC/Views/DataManagement/AncDrugSet.vue?4973","webpack:///./src/apps/ANC/Services/anc_treatment_service.ts","webpack:///./src/apps/ANC/Services/anc_drug_set.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","key","hisFormKey","activeField","fieldComponent","skipSummary","fields","onOnIndex","$event","onOnFinish","onFinish","_","defineComponent","components","HisStandardForm","IonPage","data","allDrugs","service","created","this","getFields","methods","computedData","AncDrugSetService","saveDrugSet","toastSuccess","$router","back","toastWarning","id","helpText","type","FieldType","TT_TEXT","computedValue","v","value","validation","Validation","validateSeries","required","match","TT_MULTIPLE_SELECT","config","showKeyboard","options","isEmpty","DrugService","getDrugs","map","d","label","name","other","TT_ANC_DRUGSET_INPUT","quantity","frequency","every","Boolean","fdata","drug_selection","drugFrequencies","Object","keys","DRUG_FREQUENCIES","k","__exports__","AncTreatmentService","patientID","providerID","date","dispenseTTV","dispensed","orderID","order_id","DrugOrderService","updateDispensationOrders","createOrders","ttvDrugObj","orders","create","getEncounterID","drugs","createEncounter","o","buildDrugOrderObj","dispensation","AppEncounterService","forEach","duration","order","drug_inventory_id","drug","startDate","Date","expiryDate","setDate","getDate","parseInt","dose","dailyEquivalentDose","parseFloat","HisDate","toStandardHisFormat","drug_name","units","drugSet","Service","getSessionDate","postJson","setID","void","getJson","reduce","sets","setKey","description","push","a"],"mappings":"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","file":"js/chunk-0ced981c.3a4fad5f.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        key: _ctx.hisFormKey,\n        activeField: _ctx.fieldComponent,\n        skipSummary: true,\n        fields: _ctx.fields,\n        onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n        onOnFinish: _ctx.onFinish\n      }, null, 8, [\"activeField\", \"fields\", \"onOnFinish\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {\n    IonPage\n} from \"@ionic/vue\"\nimport { isEmpty } from 'lodash';\nimport { DrugService } from '@/services/drug_service';\nimport { DRUG_FREQUENCIES } from \"@/apps/ANC/Services/anc_treatment_service\";\nimport { NewDrugSet, AncDrugSetService } from \"@/apps/ANC/Services/anc_drug_set\";\nimport { toastSuccess, toastWarning } from '@/utils/Alerts';\n\nexport default defineComponent({\n    components: { HisStandardForm, IonPage },\n    data: () => ({\n        hisFormKey: 0 as number,\n        fields: [] as Array<Field>,\n        allDrugs: [] as Array<Option>,\n        fieldComponent: '' as string,\n        service: {} as any\n    }),\n    created() {\n        this.fields = this.getFields()\n    },\n    methods: {\n        async onFinish(_: any, computedData: NewDrugSet) {\n            try {\n                if ((await AncDrugSetService.saveDrugSet(computedData))) {\n                    toastSuccess('Drugset saved successfully');\n                    return this.$router.back()\n                }\n                toastWarning('Unable to save drugset')\n            } catch (e) {\n                toastWarning(`${e}`)\n            }\n        },\n        getFields() {\n            return [\n                {\n                    id: 'name',\n                    helpText: 'Enter drug set name',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (v: Option) => v.value,\n                    validation: (v: Option) => Validation.validateSeries([\n                        () => Validation.required(v),\n                        () => !`${v.value}`.match(/^([a-zA-Z_ ]{2,17})'?-?([a-zA-Z_ ]{1,17})$/)\n                            ? ['Enter a valid drug set name.']\n                            : null\n                    ]),\n\n                },\n                {\n                    id: 'description',\n                    helpText: 'Drug set description',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (v: Option) => v.value,\n                    validation: (v: Option) => Validation.validateSeries([\n                        () => Validation.required(v),\n                        () => !`${v.value}`.match(/^([a-zA-Z_ ]{2,100})'?-?([a-zA-Z_ ]{1,100})$/)\n                            ? ['Enter a valid drug set description']\n                            : null\n                    ]) \n                },\n                {\n                    id: 'drug_selection',\n                    helpText: 'Select drugs to add',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (v: Option[]) => Validation.required(v),\n                    config: {\n                        showKeyboard: true\n                    },\n                    options: async () => {\n                        if (isEmpty(this.allDrugs)) {\n                            this.allDrugs = (await DrugService.getDrugs({\n                                'page_size': 1000\n                            })).map((d: any) => ({\n                                label: d.name,\n                                value: d.id,\n                                other: {\n                                    'drug': d.name,\n                                    'quantity': 0,\n                                    'frequency': '',\n                                }\n                            }))\n                        }\n                        return this.allDrugs as Option[]\n                    }\n                },\n                {\n                    id: 'drugs',\n                    helpText: 'Set drugs',\n                    type: FieldType.TT_ANC_DRUGSET_INPUT,\n                    computedValue: (v: Option[]) => v.map(d => d.other), \n                    validation: (v: Option[]) => Validation.validateSeries([\n                        () =>  Validation.required(v),\n                        () => !v.map(d => d.other.quantity && d.other.frequency).every(Boolean)\n                                ? ['Data is not complete']\n                                : null\n                    ]),\n                    options: (fdata: any) => fdata.drug_selection as Option[],\n                    config: {\n                        drugFrequencies: Object.keys(DRUG_FREQUENCIES)\n                            .map((k: string) => ({ label: k, value: k }))\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./AncDrugSet.vue?vue&type=template&id=a2705bc2&ts=true\"\nimport script from \"./AncDrugSet.vue?vue&type=script&lang=ts\"\nexport * from \"./AncDrugSet.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { find, isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface AncTreatmentDrugObject {\n    'id': number;\n    'drug_name': string;\n    'dose': string;\n    'duration': number;\n    'frequency': string;\n    'units': string;\n}\n\nexport const DRUG_FREQUENCIES: Record<string, number> = { \n    'Once a day (OD)' : 1,\n    'Twice a day (BD)': 2,\n    'Three a day (TDS)': 3,\n    'Four times a day (QID)' : 4,\n    'Five times a day (5X/D)' : 5,\n    'Six times a day (Q4HRS)' : 6,\n    'In the morning (QAM)' : 0.5,\n    'Once a week (QWK)' : 0.14,\n    'Once a month' : 0.03,\n    'Twice a month' : 0.071\n}\n\nexport class AncTreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 25, providerID)\n    }\n\n    ttvDrugObj() {\n        return {\n            'drug_inventory_id': 609,\n            'dose': 0.5,\n            'equivalent_daily_dose': 0.5,\n            'frequency': \"Once a day (od)\",\n            'start_date': this.date,\n            'auto_expire_date': this.date,\n            'instructions': \"Once a day\",\n            'units': \"ml\"\n        }\n    }\n\n    async updateTTvOrder() {\n        const dispensed = await this.dispenseTTV()\n        if (!isEmpty(dispensed)) {\n            const orderID = dispensed[0].order_id\n            return DrugOrderService.updateDispensationOrders([{'order_id': orderID, 'quantity' : 1}])\n        }\n        throw 'Unable to dispense'\n    }\n\n    dispenseTTV() {\n        return this.createOrders([this.ttvDrugObj()])\n    }\n\n    createOrders(orders: any) {\n        return DrugOrderService.create({\n            'drug_orders': orders,\n            'encounter_id': this.getEncounterID(),\n        })\n    }\n\n    async submitTreatment(drugs: AncTreatmentDrugObject[]) {\n        await this.createEncounter()\n        const orders = await this.createOrders(drugs.map(o => this.buildDrugOrderObj(o)))\n        const dispensation = new AppEncounterService(this.patientID, 54, this.providerID)\n        await dispensation.createEncounter()\n        drugs.forEach(o => {\n            const quantity: number = DRUG_FREQUENCIES[o.frequency] * o.duration\n            orders.forEach((order: any) => { \n                if (order.drug_inventory_id === o.id) {\n                    order.quantity = quantity\n                }\n            })\n        })\n        await DrugOrderService.updateDispensationOrders(orders)\n    }\n\n    buildDrugOrderObj(drug: AncTreatmentDrugObject) {\n        const startDate = new Date(this.date)\n        const expiryDate = startDate.setDate(startDate.getDate() + parseInt(`${drug.duration}`))\n        const dose: any = drug.dose || DRUG_FREQUENCIES[drug.frequency]\n        const dailyEquivalentDose =  parseFloat(dose) * DRUG_FREQUENCIES[drug.frequency] \n        return {\n            'drug_inventory_id': drug.id,\n            'dose': dose,\n            'equivalent_daily_dose': dailyEquivalentDose,\n            'frequency': drug.frequency,\n            'start_date': this.date,\n            'auto_expire_date': HisDate.toStandardHisFormat(new Date(expiryDate)),\n            'instructions': drug.drug_name + ':' + drug.dose + ' ' + drug.units + ' ' + drug.frequency + 'days',\n            'units': drug.units\n        }\n    }\n}","import { Service } from \"@/services/service\";\n\nexport interface AncDrugSetDrugs {\n    drug: number;\n    drug_name?: string;\n    quantity: number;\n    duration?: number;\n    frequency: string;\n}\n\nexport interface NewDrugSet {\n    id?: number;\n    datetime?: string;\n    name: string;\n    description: string;\n    drugs: AncDrugSetDrugs[];\n}\n\nexport class AncDrugSetService extends Service {\n    static saveDrugSet(drugSet: NewDrugSet) {\n        const data  = {...drugSet}\n        data['datetime'] = Service.getSessionDate()\n        return this.postJson('/drug_sets', drugSet)\n    }\n\n    static voidDrugSet(setID: number) {\n        return this.void(`/drug_sets/${setID}`, { date: this.getSessionDate()})\n    }\n\n    static async getDrugSets() {\n        const data = await this.getJson('drug_sets')\n        if (data) {\n            return Object.keys(data['set_names'])\n                .reduce((sets: Array<any>, setKey: string) => {\n                    const name = data['set_names'][setKey]\n                    const description = data['set_descriptions'][setKey]\n                    const drugs = data['drug_sets'][setKey]\n                    sets.push({\n                        id: parseInt(setKey),\n                        name,\n                        description,\n                        drugs: Object.keys(drugs).reduce(\n                            (a: any, k: string) => [\n                                ...a, { \n                                    'id': parseInt(k), ...drugs[k],\n                                    'drug_name': drugs[k].drug_name,\n                                    'duration': parseInt(drugs[k].duration),\n                                    'frequency': drugs[k].frequency,\n                                    'units': drugs[k].units,\n                                }], []\n                        )\n                    })\n                    return sets\n                }, [])\n        }\n        return []\n    }\n}"],"sourceRoot":""}