{"version":3,"sources":["webpack:///./src/apps/LOS/views/Reports/TestRequestedReport.vue?16c7","webpack:///./src/apps/LOS/views/Reports/TestRequestedReport.vue","webpack:///./src/apps/LOS/views/Reports/TestRequestedReport.vue?9052"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_openBlock","_createBlock","title","period","rows","fields","columns","canExportCsv","canExportPDf","reportReady","onReportConfiguration","onPeriod","defineComponent","mixins","ReportMixin","components","ReportTemplate","data","cohort","reportType","patientLevelColumns","table","thTxt","disaggregatedColumns","created","this","report","LabReportService","getFormFields","methods","type","tests","getDateIntervalPeriod","value","setDisaggregatedRows","setPatientLevelRows","getDateDurationFields","id","helpText","FieldType","TT_MULTIPLE_SELECT","options","async","_","x","config","setStartDate","start_date","setEndDate","end_date","getSamplesDrawnReport","availableTests","buildAvailableTests","buildAvailableTestOptions","TT_SELECT","label","orders","forEach","order","test","push","testName","result","length","other","results","males","females","concat","map","i","ageGroupIndex","AGE_GROUPS","group","maleRow","td","femaleRow","filterByGender","gender","filter","age_group","patient_id","drill","sortByArvNumber","d","arv_number","tdDate","birthdate","order_date","join","reason_for_test","__exports__"],"mappings":"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","file":"js/chunk-2d2297b9.f474ab02.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_report_template = _resolveComponent(\"report-template\")!\n\n  return (_openBlock(), _createBlock(_component_report_template, {\n    title: _ctx.title,\n    period: _ctx.period,\n    rows: _ctx.rows,\n    fields: _ctx.fields,\n    columns: _ctx.columns,\n    canExportCsv: true,\n    canExportPDf: true,\n    reportReady: _ctx.reportReady,\n    onReportConfiguration: _ctx.onPeriod\n  }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"reportReady\", \"onReportConfiguration\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { LabReportService } from \"@/apps/ART/services/reports/lab_report_service\"\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport { AGE_GROUPS } from \"@/apps/ART/services/reports/patient_report_service\"\nimport { FieldType } from '@/components/Forms/BaseFormElements'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { Option } from '@/components/Forms/FieldInterface'\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\n\nexport default defineComponent({\n    mixins: [ReportMixin],\n    components: { ReportTemplate },\n    data: () => ({\n        title: 'Tests requested',\n        rows: [] as Array<any>,\n        cohort: [] as Array<any>,\n        reportType: '' as string,\n        reportReady: false as boolean,\n        columns: [] as Array<any>,\n        patientLevelColumns:[ \n            [\n                table.thTxt('ARV#'), \n                table.thTxt('Gender'), \n                table.thTxt('Birthdate'), \n                table.thTxt('Ordered Date'), \n                table.thTxt('Test'), \n                table.thTxt('Reason')\n            ]\n        ],\n        disaggregatedColumns: [\n            table.thTxt('Age group'), \n            table.thTxt('Gender')\n        ]\n    }),\n    created() {\n        this.report = new LabReportService()\n        this.fields = this.getFormFields()\n    },\n    methods: {\n        async onPeriod({type, tests}: any) {\n            this.reportReady = true\n            this.rows = []\n            this.period = this.report.getDateIntervalPeriod()\n            this.reportType = type.value\n            if (this.reportType === 'disaggregated') {\n                this.setDisaggregatedRows(tests)\n            } else if (this.reportType === 'patient_level') {\n                this.setPatientLevelRows(tests)\n            }\n        },\n        getFormFields(): Array<Field> {\n            return [\n                ...this.getDateDurationFields(),\n                {\n                    id: 'tests',\n                    helpText: 'Test(s) Requested',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: async (_: any, x: any, config: any) => {\n                        this.report.setStartDate(config.start_date)\n                        this.report.setEndDate(config.end_date)\n                        const data = await this.report.getSamplesDrawnReport()\n                        const availableTests = this.buildAvailableTests(data)\n                        return this.buildAvailableTestOptions(availableTests)\n                    } \n                },\n                {\n                    id: 'type',\n                    helpText: 'Select report type',\n                    type: FieldType.TT_SELECT,\n                    options: () => [\n                        {\n                            label: 'Disaggregated',\n                            value: 'disaggregated',\n                        },\n                        {\n                            label: 'Patient level',\n                            value: 'patient_level',\n                        }\n                    ]\n                }\n            ]\n        },\n        buildAvailableTests(orders: any) {\n            const tests: Record<string, any> = {}\n            orders.forEach((order: any) => {\n                order.tests.forEach((test: any) => {\n                    if (!(test in tests)) {\n                        tests[test] = []\n                    }\n                    tests[test].push(order)\n                })\n            })\n            return tests\n        },\n        buildAvailableTestOptions(availableTests: Record<string, any>) {\n            const options: Array<Option> = []\n            for(const testName in availableTests) {\n                const result = availableTests[testName]\n                options.push({\n                    label: testName,\n                    value: result.length,\n                    other: result\n                })\n            }\n            return options\n        },\n        setDisaggregatedRows(results: Array<Option>) {\n            const males = []\n            const females = []\n            this.columns = [this.disaggregatedColumns.concat(results.map((i: any) => table.thTxt(i.label)))]\n            for(const ageGroupIndex in AGE_GROUPS) {\n                const group = AGE_GROUPS[ageGroupIndex]\n                const maleRow: any = [table.td(group), table.td('M')]\n                const femaleRow: any = [table.td(group), table.td('F')]\n                results.forEach(({other}: Option) => {\n                    const filterByGender = (gender: 'F' | 'M') => {\n                        return other.filter(\n                            (i: any) => i.gender === gender && i.age_group === group\n                        ).map((i: any) => i.patient_id)\n                    }\n                    maleRow.push(this.drill(filterByGender('M'), `Males of ${group}`))\n                    femaleRow.push(this.drill(filterByGender('F'), `Females of ${group}`))\n                })\n                males.push(maleRow)\n                females.push(femaleRow)\n                this.rows = [...females, ...males]\n            }\n        },\n        setPatientLevelRows(results: Array<Option>) {\n            this.columns = this.patientLevelColumns\n            results.forEach(({other}: Option)  => {\n                this.sortByArvNumber(other).forEach((d: any) => {\n                    this.rows.push([\n                        table.td(d.arv_number),\n                        table.td(d.gender),\n                        table.tdDate(d.birthdate),\n                        table.tdDate(d.order_date),\n                        table.td(d.tests.join(',')),\n                        table.td(d.reason_for_test)\n                    ])\n                })\n            })\n        }\n    }\n})\n","import { render } from \"./TestRequestedReport.vue?vue&type=template&id=4afd9e67&ts=true\"\nimport script from \"./TestRequestedReport.vue?vue&type=script&lang=ts\"\nexport * from \"./TestRequestedReport.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}