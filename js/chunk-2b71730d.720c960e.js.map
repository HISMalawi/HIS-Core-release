{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaOutcome.vue?d79d","webpack:///./src/apps/CxCa/services/CxCaOutcomeService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaOutcome.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaOutcome.vue?53ab","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","OutcomeService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","outcome","watch","patient","this","getFields","deep","methods","formData","encounter","createEncounter","toastWarning","programID","ProgramService","getProgramID","workflows","getProgramWorkflows","select_referral_outcome","value","flows","forEach","w","states","f","conceptID","program_workflow_state_id","conceptName","concept","concept_names","name","state","getLocationName","date","getSessionDate","saveState","createState","referralObs","cancerObs","select_cancer_treatment","rOb","buildValueCoded","obList","match","cOb","push","saveObservationList","toastSuccess","nextTask","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","label","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","offlineID","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","dayjs","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","enc","encounterTypeID","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","labOrders","skipNextTask","runflowState","username","split","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-2b71730d.720c960e.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class OutcomeService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 184, providerID) //TODO: Use encounter type reference name'\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { ProgramService } from \"@/services/program_service\";\nimport {ProgramWorkflow} from \"@/interfaces/program_workflow\"\nimport {OutcomeService} from \"@/apps/CxCa/services/CxCaOutcomeService\"\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    outcome: {} as any,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.outcome = new OutcomeService(\n          this.patientID,\n          this.providerID\n        );\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      const encounter = await this.outcome.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const programID = ProgramService.getProgramID();\n      const workflows: ProgramWorkflow[] = await ProgramService.getProgramWorkflows(ProgramService.getProgramID());\n      const outcome = formData.select_referral_outcome.value;\n      const flows = {} as any;\n      workflows.forEach(w => {\n        w.states.forEach(f => {\n          const conceptID = f.program_workflow_state_id;\n          const conceptName = f.concept.concept_names[0].name;\n          flows[conceptName] = conceptID;\n        })\n      })\n      const state = {\n        'location_id': ProgramService.getLocationName(),\n        state: flows[outcome],\n        date: ProgramService.getSessionDate()\n      }\n      const saveState = await ProgramService.createState(this.patientID, programID, state);\n      if(!saveState) return toastWarning('Unable to update state')\n      const referralObs = formData.select_referral_outcome.value;\n      const cancerObs = formData.select_cancer_treatment.value;\n      const rOb = await this.outcome.buildValueCoded('Outcome', referralObs);\n      const obList = [rOb];\n      if(cancerObs.match(/cancer/)) {\n        const cOb = await this.outcome.buildValueCoded('Cancer treatment', cancerObs);\n        obList.push(cOb);\n      }\n\n      const obs = await this.outcome.saveObservationList(obList);\n      toastSuccess(\"Observations and encounter created!\");\n      this.nextTask();\n    },\n\n    getFields(): any {\n      return [\n        {\n          id: \"select_referral_outcome\",\n          helpText: `Referral outcome`,\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return [\n              {\n                label: \"Cancer of cervix\",\n                value: \"Cancer of cervix\",\n              },\n              {\n                label: \"Continue follow-up\",\n                value: \"Continue follow-up\",\n              },\n              {\n                label: \"Discharged uninfected\",\n                value: \"Discharged uninfected\",\n              },\n              {\n                label: \"Treatment complete\",\n                value: \"Treatment complete\",\n              },\n            ];\n          },\n        },\n        {\n          id: \"select_cancer_treatment\",\n          helpText: \"Select cancer treatment\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return [\n              {\n                label: \"Surgery\",\n                value: \"Surgery\",\n              },\n              {\n                label: \"Palliative Care\",\n                value: \"Palliative Care\",\n              },\n              {\n                label: \"Discharged\",\n                value: \"Discharged\",\n              },\n              {\n                label: \"Other\",\n                value: \"Other\",\n              },\n            ];\n          },\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaOutcome.vue?vue&type=template&id=3317e905&ts=true\"\nimport script from \"./CxCaOutcome.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaOutcome.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}