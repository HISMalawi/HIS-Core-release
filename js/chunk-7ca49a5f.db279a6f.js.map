{"version":3,"sources":["webpack:///./src/views/NewUser.vue?79ce","webpack:///./src/views/NewUser.vue","webpack:///./src/views/NewUser.vue?c13e","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/services/person_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","key","formKey","fields","skipSummary","activeField","fieldComponent","onOnIndex","$event","onFinishAction","onFinish","defineComponent","components","HisStandardForm","data","activity","presets","programs","userData","isSessionPasswordChange","form","watch","handler","route","query","includes","update_password","UserService","getCurrentUser","toUserData","getAvailableApps","getFields","immediate","deep","methods","_","computeValues","create","update","$router","push","Store","invalidate","$nextTick","RecordConflictError","isEmpty","errors","toastWarning","toastDanger","createUser","user","updateUser","id","person","getProgramName","app","find","this","programID","applicationName","mapToOption","listOptions","map","item","label","value","getRoles","getAllRoles","filter","r","role","split","e","other","userObj","names","user_id","given_name","family_name","username","roles","HisDate","toStandardHisDisplayFormat","date_created","deactivated_on","p","editConditionCheck","attributes","toLcase","val","toString","toLowerCase","helpText","type","FieldType","TT_SELECT","condition","isAdmin","validation","Validation","required","unload","options","getAllUsers","users","u","config","showKeyboard","TT_TABLE_VIEWER","dynamicHelpText","created","f","c","table","statusRowIndex","columns","deactivateButton","status","name","style","width","fontWeight","color","action","deactivateUser","rows","toastSuccess","activateUser","navButton","targetField","rowBtns","length","join","hiddenFooterBtns","overrideDefaultFooterBtns","nextBtn","onClick","back","TT_TEXT","computedValue","defaultValue","isName","PersonService","searchGivenName","searchFamilyName","proxyID","v","i","defaultComputedOutput","TT_MULTIPLE_SELECT","program","isChecked","validateSeries","hasLengthRangeOf","casing","inputType","verify_password","new_password","__exports__","_resolveDynamicComponent","formType","cancelDestinationPath","onOnFinish","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","Object","formData","computedData","$emit","Service","postJson","putJson","getProgramID","personId"],"mappings":"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","file":"js/chunk-7ca49a5f.db279a6f.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    key: _ctx.formKey,\n    fields: _ctx.fields,\n    skipSummary: true,\n    activeField: _ctx.fieldComponent,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    onFinishAction: _ctx.onFinish\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { UserService } from \"@/services/user_service\"\nimport { PersonService } from \"@/services/person_service\"\nimport HisDate from \"@/utils/Date\"\nimport { toastWarning, toastSuccess, toastDanger } from \"@/utils/Alerts\"\nimport { RecordConflictError } from \"@/services/service\";\nimport { isEmpty } from \"lodash\";\nimport { find } from \"lodash\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    formKey: 0 as number,\n    fields: [] as Array<Field>,\n    activity: '' as 'edit' | 'add',\n    presets: {} as any,\n    programs: {} as any,\n    userData: {} as any,\n    fieldComponent: '' as string,\n    isSessionPasswordChange: false as boolean,\n    activeField: '' as string,\n    form: {} as Record<string, Option> | Record<string, null>\n  }),\n  watch: {\n    '$route': {\n        async handler(route: any) {\n            if (!route) {\n                return\n            }\n            const { query } = route\n            if (['edit', 'add'].includes(query.activity)) {\n                this.activity = query.activity\n            } else {\n                this.activity = 'add'\n            }\n            /**\n             * Jump straight to update the current user's password\n             */\n            if (query.update_password) {\n                this.userData = this.toUserData(\n                    (await UserService.getCurrentUser())\n                )\n                this.isSessionPasswordChange = true\n                this.activeField = 'new_password'\n                this.fieldComponent = this.activeField\n            }\n            this.programs = UserService.getAvailableApps()\n            this.fields = this.getFields()\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computeValues: any) {\n        try {\n            switch(this.activity) {\n                case 'add':\n                    await this.create(computeValues)\n                    this.activity = 'edit'\n                    break;\n                case 'edit':\n                    await this.update(computeValues)\n                    if (this.isSessionPasswordChange) {\n                        this.$router.push('/')\n                    }\n                    break;\n            }\n            Store.invalidate('PROVIDERS')\n            this.activeField = 'user_info'\n            this.$nextTick(() => this.fieldComponent = this.activeField)\n            this.formKey += 1\n        } catch (e) {\n            if (e instanceof RecordConflictError && !isEmpty(e.errors)) {\n                toastWarning(e.errors)\n            } else {\n                toastDanger(`${e}`)\n            }\n        }\n    },\n    async create(data: any) {\n        const { user } = await UserService.createUser(data)\n        if (user) {\n            return this.userData = this.toUserData(user)\n        }\n        throw 'Unable to create new user, Possibly the user already exists or incorrect info was entered'\n    },\n    async update(data: any) {\n        const person = await UserService.updateUser(this.userData.id, data)\n        if (person) {\n            return this.userData = this.toUserData(person)\n        }\n        throw 'Unable to update user, possibly server error or incorrect information entered'\n    },\n    getProgramName(id: number) {\n        const app = find(this.programs, { programID: id })\n        return app ? app.applicationName : ''\n    },\n    mapToOption(listOptions: Array<string>): Array<Option> {\n        return listOptions.map((item: any) => ({ label: item, value: item })) \n    },\n    async getRoles() {\n        return (await UserService.getAllRoles()).filter((r: any) => {\n            try {\n                return !this.userData.role.split(',').includes(r.role)\n            } catch(e) {\n                return true\n            }\n        }).map((r: any) => ({\n            label: r.role,\n            value: r.role,\n            other: r\n        }))\n    },\n    toUserData(userObj: any) {\n        const names = userObj.person.names[0]\n        return {\n            'id': userObj.user_id,\n            'given_name': names.given_name,\n            'family_name': names.family_name,\n            'username': userObj.username,\n            'role': userObj.roles.map((r: any) => r.role),\n            'created': HisDate.toStandardHisDisplayFormat(userObj.date_created),\n            'status': userObj.deactivated_on ? 'Inactive' : 'Active',\n            'programs': userObj.programs.map((p: any) => p['program_id'])\n        }\n    },\n    editConditionCheck(attributes=[] as Array<string>): boolean {\n        if (this.activity === 'edit') {\n            return attributes.includes(this.activeField)\n        }\n        return true\n    },\n    toLcase(val: Option): string {\n        return val.value.toString().toLowerCase()\n    },\n    getFields: function(): Array<Field> {\n        return [\n            {\n                id: 'select_user',\n                helpText: \"Select Username\",\n                type: FieldType.TT_SELECT,\n                condition: () => this.activity === 'edit' \n                    && UserService.isAdmin(),\n                validation: (val: any) => Validation.required(val),\n                unload: ({other}: Option) => this.userData = this.toUserData(other),\n                options: async () => {\n                    const users: any = await UserService.getAllUsers()\n                    return users.map((u: any) => ({\n                        label: u.username,\n                        value: u.user_id,\n                        other: u\n                    }))\n                },\n                config: {\n                    showKeyboard: true\n                }\n            },\n            {\n                id: 'user_info',\n                helpText: 'User information',\n                type: FieldType.TT_TABLE_VIEWER,\n                dynamicHelpText: () => `User: ${this.userData.username} | Added On: ${this.userData.created}`,\n                condition: () => this.activity === 'edit' && UserService.isAdmin(),\n                options: async (f: any, c: any, table: any) => {\n                    const statusRowIndex = 3\n                    const columns = ['Attributes', 'Values', 'Actions']\n                    const deactivateButton = (status: string) => ({\n                        name: status === 'Active' ? 'Deactivate' : 'Activate' ,\n                        type: 'button',\n                        style: { width: '65%', fontWeight: 'bold' },\n                        color: status === 'Active' ? 'danger' : 'success',\n                        action: async () => {\n                            try {\n                                if (status === 'Active') {\n                                    await UserService.deactivateUser(this.userData.id)\n                                    this.userData.status = 'Inactive'\n                                    table.rows[statusRowIndex] = ['Status', 'Inactive', deactivateButton('Inactive')],\n                                    toastSuccess('User has been deactivated', 400)\n                                }\n                                if (status === 'Inactive') {\n                                    await UserService.activateUser(this.userData.id)\n                                    this.userData.status = 'Active'\n                                    table.rows[statusRowIndex] = ['Status', 'Active', deactivateButton('Active')],\n                                    toastSuccess('User has been activated', 400)\n                                }\n                            } catch(e) {\n                                toastWarning(e)\n                            }\n                        }\n                    })\n                    const navButton = (name: string, targetField: string) => ({ \n                        name, \n                        type: 'button',\n                        color: 'light',\n                        style: {\n                            fontWeight: 'bold',\n                            width: '65%'\n                        },\n                        action: () => {\n                            this.activeField = targetField\n                            this.fieldComponent = this.activeField\n                        }\n                    })\n                    const rowBtns = [navButton('Add/Append Role', 'roles')]\n                    if (this.userData.role.length > 1) {\n                        rowBtns.push(navButton('Remove Role', 'remove_roles'))\n                    }\n                    const rows = [\n                        ['<b>Name</b>', `${this.userData.given_name} ${this.userData.family_name}`, navButton('Edit Name', 'given_name'), ''],\n                        ['<b>Password</b>', '*******', navButton('Change password', 'new_password'), ''],\n                        ['<b>Role</b>', this.userData.role.join('<br/>'), ...rowBtns],\n                        ['<b>Status</b>', this.userData.status,  deactivateButton(this.userData.status), ''],\n                        ['<b>Programs</b>', this.userData.programs.map((p: number) => this.getProgramName(p)).join('<br/>'),  \n                            navButton('Edit Program', 'programs'), ''],\n                    ]\n                    return [{\n                        label: '',\n                        value: '',\n                        other: { columns, rows }\n                    }]\n                },\n                config: {\n                    hiddenFooterBtns: [\n                        'Clear',\n                    ],\n                    overrideDefaultFooterBtns: {\n                        nextBtn: {\n                            name: 'Finish',\n                            onClick: () => this.$router.back()\n                        }\n                    }\n                }\n            },\n            {\n                id: 'given_name',\n                helpText: 'First name',\n                type: FieldType.TT_TEXT,\n                computedValue: (val: Option) => val.value,\n                defaultValue: () => this.userData.given_name,\n                condition: () => this.editConditionCheck(['given_name']) && UserService.isAdmin(),\n                validation: (val: any) => Validation.isName(val),\n                options: async (form: any) => {\n                    if (!form.given_name || form.given_name.value === null) return []\n\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return this.mapToOption(names)\n                }\n            },\n            {\n                id: 'family_name',\n                helpText: \"Last name\",\n                type: FieldType.TT_TEXT,\n                computedValue: (val: Option) => val.value,\n                defaultValue: () => this.userData.family_name,\n                validation: (val: any) => Validation.isName(val),\n                condition: () => this.editConditionCheck(['given_name']) && UserService.isAdmin(),\n                options: async (form: any) => {\n                    if (!form.family_name || form.family_name.value === null) return []\n\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return this.mapToOption(names)\n                }\n            },\n            {\n                id: 'roles',\n                helpText: \"Role\",\n                type: FieldType.TT_SELECT,\n                computedValue: (val: Option) => [val.value],\n                condition: () => this.editConditionCheck(['roles']) && UserService.isAdmin(),\n                validation: (val: any) => Validation.required(val),\n                options: () => this.getRoles(),\n                config: {\n                    showKeyboard: true\n                }\n            },\n            {\n                id: 'remove_roles',\n                helpText: \"Remove Roles\",\n                proxyID: 'roles',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: () => this.editConditionCheck(['remove_roles']) && UserService.isAdmin() && this.activity === 'edit',\n                computedValue: (v: Option) => this.userData.role.filter((i: string) => i != v.label),\n                options: () => this.mapToOption(this.userData.role),\n                config: {\n                    showKeyboard: true\n                }\n            },\n            {\n                id: 'must_append_roles',\n                helpText: \"Would you like to append role?\",\n                type: FieldType.TT_SELECT,\n                computedValue: (val: Option) => val.label === 'Yes' ? true : false,\n                condition: () => this.activity === 'edit' \n                    && this.editConditionCheck(['roles']) \n                    && UserService.isAdmin(),\n                defaultComputedOutput: () => false,\n                validation: (val: any) => Validation.required(val),\n                    options: () => [\n                    {\n                        label: 'Yes', value: 'true'\n                    },\n                    {\n                        label: 'No', value: 'false'\n                    }\n                ]\n            },\n            {\n                id: 'programs',\n                helpText: \"Select Apps\",\n                type: FieldType.TT_MULTIPLE_SELECT,\n                condition: () => UserService.isAdmin() && this.editConditionCheck(['programs']),\n                validation: (val: Option[]) => Validation.required(val),\n                computedValue: (val: Option[]) => val.map((i: Option) => i.value),\n                options: () => {\n                    return this.programs.map((program: any) => {\n                        let isChecked = false\n                        if (this.activity === 'edit') {\n                            isChecked = this.userData.programs.includes(program.programID)\n                        }\n                        return {\n                            label: program.applicationName,\n                            value: program.programID,\n                            isChecked: isChecked\n                        }\n                    })\n                },\n            },\n            {\n                id: 'username',\n                helpText: \"Username\",\n                type: FieldType.TT_TEXT,\n                condition: () => this.editConditionCheck(['nothing to see here']) \n                    && UserService.isAdmin(),\n                computedValue: (val: Option) => this.toLcase(val),\n                validation: (val: any) => Validation.validateSeries([\n                    () => Validation.required(val),\n                    () => Validation.hasLengthRangeOf(val, 4, 15)\n                ]),\n                config: {\n                    casing: 'lowercase'\n                },\n            },\n            {\n                id: 'new_password',\n                proxyID: \"password\",\n                helpText: \"New Password\",\n                type: FieldType.TT_TEXT,\n                computedValue: (val: Option) => this.toLcase(val),\n                condition: () => this.editConditionCheck(['new_password']),\n                validation: (val: any) => Validation.validateSeries([\n                    () => Validation.required(val),\n                    () => Validation.hasLengthRangeOf(val, 4, 15)\n                ]),\n                config: {\n                    inputType: 'password'\n                }\n            },\n            {\n                id: 'verify_password',\n                proxyID: \"password\",\n                helpText: \"Confirm Password\",\n                type: FieldType.TT_TEXT,\n                computedValue: (val: Option) => this.toLcase(val),\n                condition: () => this.editConditionCheck(['new_password']),\n                validation: (val: any, f: any) => Validation.validateSeries([\n                    () => Validation.required(val),\n                    () => {\n                        if (this.toLcase(f.verify_password) != this.toLcase(f.new_password))\n                            return ['New password does not match current password']\n                    }\n                ]),\n                config: {\n                    inputType: 'password'\n                }\n            }\n        ]\n    }\n  }\n})\n","import { render } from \"./NewUser.vue?vue&type=template&id=6d6ac90f&ts=true\"\nimport script from \"./NewUser.vue?vue&type=script&lang=ts\"\nexport * from \"./NewUser.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Person } from \"@/interfaces/person\"\nimport { Service } from \"./service\"\n\nexport interface NewPerson {\n    person_id?: number;\n    given_name: string;\n    family_name: string;\n    gender: string;\n    birthdate: string;\n    birthdate_estimated: boolean;\n    home_district: string;\n    home_traditional_authority: string;\n    home_village: string;\n    current_district: string;\n    current_traditional_authority: string;\n    current_village: string;\n    landmark: string;\n    cell_phone_number: string;\n    occupation: string;\n    facility_name: string;\n    patient_type?: string;\n    relationship?: string;\n}\n\nexport class PersonService extends Service{\n    person: Person | NewPerson\n    constructor(person: NewPerson | Person){\n        super()\n        this.person = person\n    }\n\n    create() { return Service.postJson('/people', this.person) }\n\n    update(id: number) { return Service.putJson(`people/${id}`, {\n        ...this.person, 'program_id': Service.getProgramID()\n    })}\n\n    static searchFamilyName(name: string) {\n        return super.getJson('/search/family_name', {'search_string': name})\n    }\n\n    static searchGivenName(name: string) {\n        return super.getJson('/search/given_name', {'search_string': name})\n    }\n\n    static async getPersonFullName(personId: string | number) {\n        const names = await super.getJson(`/people/${personId}/names`)\n        return names && names.length ? names[0].given_name + ' ' + names[0].family_name : ''\n    }\n}\n"],"sourceRoot":""}