{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/radiology.vue?1e1a","webpack:///./src/apps/OPD/views/encounters/radiology.vue","webpack:///./src/apps/OPD/views/encounters/radiology.vue?dcc5","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/apps/OPD/services/patient_radiology_service.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","_","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","radiologyService","isPacsEnabled","previousRadiologyExaminations","watch","ready","handler","isReady","PatientRadiologyService","patientID","providerID","OPD_GLOBAL_PROP","isPACsEnabled","showPreviousRadiolgy","patient","getFields","immediate","deep","methods","computedData","Promise","all","radiology","createEncounter","obsObj","saveObservationList","savedObsData","printOrders","submitToPacs","console","log","gotoPatientDashboard","getTableData","getPreviousRadiologyExaminations","order","params","url","columns","rows","row","children","accession_number","value_text","moment","obs_datetime","format","push","label","value","other","id","helpText","condition","type","FieldType","TT_TABLE_VIEWER","options","d","config","hiddenFooterBtns","TT_RADIOLOGY_PICKER","validation","Validation","required","this","disableBackBtn","computedValue","map","option","buildValueCoded","parent","buildValueCodedFromConceptId","concept_id","child","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","flowState","SET_PROVIDER","isBdeMode","isBDE","facts","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","computed","patientDashboardUrl","runflowState","state","states","split","username","provider","find","person_id","$router","EXIT","findings","matchToGuidelines","index","finding","status","program","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","isEmpty","person","names","latestName","given_name","family_name","toOption","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","inArray","arr","expression","length","e","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","formData","$emit","patientId","Service","getJson","getRadiologyObs","getID","getThirdpartyApps","thirdpartyapps","app","accessionNumber","obs_id","orders","getFullName","getAge","getGender","getNationalID","getEncounterID","getDate","getUserName","getUserID","getUserRoles","postJson","getAccesionNumber","lastAccessionNumber","observations","ConceptService","getConceptName","value_coded","printService","PrintoutService","patientNationalId","patientName","urls","fullXrayOrder","batchPrintLbls","radiologyType","getConceptSet","AppEncounterService","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-a7c378ee.76391b5d.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        cancelDestinationPath: _ctx.cancelDestination,\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onSubmit\n      }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientRadiologyService } from \"@/apps/OPD/services/patient_radiology_service\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport OPD_GLOBAL_PROP from \"@/apps/OPD/opd_global_props\";\nimport moment from \"dayjs\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    radiologyService: {} as any,\n    isPacsEnabled: false,\n    previousRadiologyExaminations: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(isReady: boolean) {\n        if(isReady){\n          this.radiologyService = new PatientRadiologyService(this.patientID, this.providerID)\n          this.isPacsEnabled = (await OPD_GLOBAL_PROP.isPACsEnabled())\n          this.previousRadiologyExaminations = await this.radiologyService.showPreviousRadiolgy(this.patient)\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true,\n      deep: true\n    }\n  },\n  methods: {\n    async onSubmit(_: any, computedData: any){\n      const data = await Promise.all(computedData.radiology)\n      await this.radiologyService.createEncounter()\n      const obsObj = await this.radiologyService.obsObj(data) \n      const savedObsData = await this.radiologyService.saveObservationList(obsObj)\n      await this.radiologyService.printOrders(savedObsData, this.patient)\n      if(this.isPacsEnabled) {\n        try {\n          await this.radiologyService.submitToPacs(savedObsData, this.patient)\n        } catch (error) {\n          console.log(error)\n        }\n      }\n      this.gotoPatientDashboard()\n    },\n    async getTableData() {\n      const params = await this.radiologyService.getPreviousRadiologyExaminations(this.patient)\n      const data = params.data\n      const url = params.url\n      const columns = ['Accession#','Body Part', 'Order Type', 'Ordered', 'Result']\n      const rows = [] as Array<any>\n      for (const order in data) {\n        const row = [\n          data[order].children[0].accession_number,\n          data[order].value_text,\n          data[order].children[0].value_text,\n          moment(data[order].obs_datetime).format('DD/MMM/YYYY'),\n          `<ion-button slot=\"end\" size=\"large\" href=\"${url}\" color=\"success\">\n            View\n          </ion-button>`\n        ]\n        rows.push(row)\n      }\n      return [\n        {\n          label: '',\n          value: '',\n          other: { columns, rows},\n        },\n      ];\n    },\n    getFields(): Array<Field>{\n      return [\n        {\n          id: 'radiology_results',\n          helpText: 'Previous Radiology Examinations',\n          condition: () => this.previousRadiologyExaminations,\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.getTableData(),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n        {\n          id: 'radiology',\n          helpText: 'Radiology Examination',\n          type: FieldType.TT_RADIOLOGY_PICKER,\n          validation: (data: any) => Validation.required(data),\n          config: {\n            hiddenFooterBtns: [ this.disableBackBtn() ],\n          },\n          computedValue: (options: Option[]) => {\n            return options.map(async (option)=> ({\n              ...(await this.radiologyService.buildValueCoded('Radiology Orders', option.other.parent)),\n              child: (await this.radiologyService.buildValueCodedFromConceptId(option.other.parent, option.other.concept_id))\n            }))\n          },\n        },\n      ]\n    },\n    disableBackBtn() {\n      if(this.previousRadiologyExaminations) {\n        return ''\n      } else return 'Back'\n    }\n  }\n})\n","import { render } from \"./radiology.vue?vue&type=template&id=0acd0010&ts=true\"\nimport script from \"./radiology.vue?vue&type=script&lang=ts\"\nexport * from \"./radiology.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ConceptService } from '@/services/concept_service';\nimport { PrintoutService } from \"@/services/printout_service\";\nimport { Service } from \"@/services/service\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport { isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\";\n\nexport class PatientRadiologyService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 121, providerID) \n  }\n\n  static async getRadiologyList(radiologyType: string, filter = '') {\n    return ConceptService.getConceptSet(radiologyType, filter) \n  }\n\n  async getRadiologyObs(patientId: number) {\n    try {\n      const path = 'radiology/radiology_orders?patient_id='+patientId\n      const data = await Service.getJson(path)\n      return data\n    } catch (error) {\n      return 0\n    }\n  }\n\n  async showPreviousRadiolgy(patient: any): Promise<boolean> {\n    if ( (await this.getRadiologyObs(patient.getID())).length > 0 ) {\n      return true\n    }\n    return false\n  }\n\n  async getPreviousRadiologyExaminations(patient: any): Promise<any>{\n    const thirdpartyapps  =  await Service.getThirdpartyApps()\n    let url = '' \n    for (const app of thirdpartyapps) {\n      if(app.name == 'pacs') {\n        url = app.url\n      }\n    }\n    if (isEmpty(url)) {\n      url = `opd/encounters/radiology/${this.patientID}`\n    }\n    const data =  await this.getRadiologyObs(patient.getID())\n    if(!(data.length > 0)) { \n      return false;\n    } else {\n      return { data: data, url: url}\n    }\n  }\n\n  async submitToPacs(savedObsData: any, patient: any) {\n    let accessionNumber\n    for(const order of savedObsData) {\n      accessionNumber = order.children[0].accession_number\n    }\n    const orders = await Promise.all(savedObsData.map(async (order: any) => ({\n      \"main_value_text\": order.value_text,\n      \"obs_id\": order.obs_id,\n      \"sub_value_text\": order.children[0].value_text\n    })))\n    const patientData = {\n      \"patient_name\": patient.getFullName(),\n      \"patientAge\": patient.getAge(),\n      \"patientDOB\": patient.getBirthdate(),\n      \"patientGender\": patient.getGender(),\n      \"national_id\": patient.getNationalID(),\n      \"person_id\": patient.getID(),\n      \"encounter_id\": this.getEncounterID(),\n      \"date_created\": this.getDate(),\n      \"accession_number\": accessionNumber\n    }\n    const provider = {\n      \"username\": Service.getUserName(),\n      \"userID\": Service.getUserID(),\n      \"userRoles\": Service.getUserRoles(),\n    }\n    return Service.postJson(`radiology/radiology_orders`, {\n      'patient_details': patientData,\n      'physician_details': provider,\n      'radiology_orders': orders\n    }) \n  }\n\n  async getAccesionNumber() {\n    return (await Service.getJson(`sequences/next_accession_number`))['accession_number']\n  }\n\n  async obsObj(data: Array<any>) {\n    const lastAccessionNumber = await this.getAccesionNumber()\n    const observations = [] as Array<any>\n    for (const order of data) {\n      observations.push(\n        {\n          'concept_id': order.concept_id, \n          'value_text':  await ConceptService.getConceptName(order.child.concept_id),\n          child: {\n            'concept_id': order.child.concept_id,\n            'accession_number': lastAccessionNumber,\n            'value_text': await ConceptService.getConceptName(order.child.value_coded)\n          }\n        }\n      )\n    }\n    return observations\n  } \n\n  async printOrders(orders: any, patient: Patientservice) {\n    const printService = new PrintoutService()\n    const patientNationalId = patient.getNationalID()\n    const patientName = patient.getFullName()\n    const urls: string[] = [];\n    for(const order of orders) {\n      const fullXrayOrder = order.value_text +\": \"+ order.children[0].value_text\n      urls.push(`/radiology/barcode`\n        + `?accession_number=${order.children[0].accession_number}`\n        + `&patient_national_id=${patientNationalId}`\n        + `&patient_name=${patientName}`\n        + `&radio_order=${fullXrayOrder}`\n        + `&date_created=${HisDate.toStandardHisDisplayFormat(order.obs_datetime)}`\n      )\n    }\n\n    await printService.batchPrintLbls(urls, true)\n  }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}