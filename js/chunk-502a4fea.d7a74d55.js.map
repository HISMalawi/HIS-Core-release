{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/apps/HTS/views/encounters/HtsTesting.vue?84a4","webpack:///./src/apps/HTS/services/hts_testing_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsTesting.vue","webpack:///./src/apps/HTS/views/encounters/HtsTesting.vue?86a7","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/composables/testKits.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","id","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","onFinishAction","onFinish","cancelDestinationPath","_","HtsTestingService","constructor","super","getRecentAccesspoint","getFirstValueCoded","IonPage","mixins","EncounterMixinVue","service","clientAge","watch","handler","accessPointTypeField","facilityAccessPointField","communityAccessPoints","testsOfferedField","lastHivTestResultField","lastHivTestTypeField","lastTimeHIVTestedField","arvHistoryField","drugTakenField","mostRecentDrugHiddenField","timeSinceDrugTaken","clientRiskCategoryField","testResultsField","hivTestKitDetailsField","hivResultHiddenField","hivPatientCategoryField","immediate","saveFormEncounterAndProceed","PatientProgramService","enrollProgram","invalidate","threeTierHIVtestNotComplete","testingFieldData","testOnePositive","isIncompleteThreeTier","opt","_opt$other","disabled","validateTimeUnit","v","maxDaysAllowed","maxWeeksAllowed","maxMonthsAllowed","timeUnit","date","inclonclusiveResultDialog","testOffered","tests_offered","some","result","test_results","helpText","type","FieldType","TT_SELECT","isRequired","finalComputedValue","buildValueCoded","TT_SELECT_GRID","f","accesspoint_type","config","columnsPerRow","availableTests","TT_MULTIPLE_SELECT","init","getUserProp","UserProp","res","tests","prop","replace","trim","defaultOutput","buildOptionsOnce","includes","last_hiv_result","TT_AGE_INPUT","beforeNext","monthsAgoInt","validation","buildObs","excludeUnits","TT_MULTIPLE_YES_NO","concept","last_taken_drugs","_f$last_hiv_result","drugCount","drug","artSelected","TT_HIDDEN","defaultValue","fdata","value_text","value_datetime","TT_INPUT_ARRAY","t","expiryDate","lotNo","columns","summaryMapValue","someIncomplete","count","x","incomplete","parentObs","childObs","l","child","kits","r","every","buildValueDate","testResults","kitNameOption","kitName","clearable","usefontBold","kitLotNoOption","onclick","val","keyboard","TT_TEXT","kitExpiryDateOption","TT_FULL_DATE","toDate","enteredKits","test_kit","existingOption","shortName","getLotNo","getExpiryDate","initKits","TestKit","isStatus","requireAllValues","resultMap","isInconclusive","isPositive","alertConfirmation","header","onValueUpdate","results","testOneIsPositive","testTwoIsPositive","disable","forEach","_d$other","category","undefined","accessPoint","resultModel","KitProp","DETERMINE","UNIGOLD","BIOLINE","SYPHILIS","HEPATITIS","prevResults","defaultOption","existingResult","c","appearInSummary","onload","hasLastTestPerfomed","last_hiv_perfomed","hasLastHivResult","testOneResult","testTwoResult","testThreeResult","testOneRepeat","isCommunity","lastHIVResult","_f$last_hiv_result2","lastTestPerfomed","_f$last_hiv_perfomed","inconclusiveNegativeForPreviousPositiveProfessional","Incomplete","Negative","Positive","Inconclusive","Positive Initial Professional","keys","finalResult","key","Boolean","hivStatusCategory","hiv_result","newHivStatus","lastHivResult","lastTypeOfTestPerformed","lastTimeHivTestedInMonths","last_time_hiv_tested","hivCategoryRef","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","String","required","$emit","isCondition","ignored","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info","ref","setUserProp","getSelectedTests","req","defaultKits","testGroup","visible","userProp","HIV_SELF_KIT","selectedKits","TEST_KIT_USER_PROPERTY","prevKits","JSON","parse","kit","preset","k","Service","saveKits","stringify"],"mappings":"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","file":"js/chunk-502a4fea.d7a74d55.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Testing\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsTestingService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 197, providerID)\n    }\n\n    getRecentAccesspoint() {\n        return this.getFirstValueCoded('HTS Access Type')\n    }\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport { HtsTestingService } from \"@/apps/HTS/services/hts_testing_service\";\nimport { infoActionSheet } from \"@/utils/ActionSheets\";\nimport { PatientProgramService } from \"@/services/patient_program_service\";\nimport Store from \"@/composables/ApiStore\";\nimport keyboard from \"@/utils/PopupKeyboard\";\nimport { find } from \"lodash\";\nimport { toDate } from \"@/utils/Strs\";\nimport { KitProp, TestKit } from \"../../composables/testKits\";\nimport UserProp from \"@/composables/userproperty\"\nimport { alertConfirmation } from \"@/utils/Alerts\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsTestingService,\n    clientAge: -1\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsTestingService(this.patientID, this.providerID);\n          this.fields = [\n            this.accessPointTypeField(),\n            this.facilityAccessPointField(),\n            this.communityAccessPoints(),\n            this.testsOfferedField(),\n            this.lastHivTestResultField(),\n            this.lastHivTestTypeField(),\n            this.lastTimeHIVTestedField(),\n            this.arvHistoryField(),\n            this.drugTakenField(),\n            this.mostRecentDrugHiddenField(),\n            this.timeSinceDrugTaken(),\n            this.clientRiskCategoryField(),\n            this.testResultsField(),\n            this.hivTestKitDetailsField(),\n            this.hivResultHiddenField(),\n            this.hivPatientCategoryField()\n          ];\n        }\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    onFinish(formData: any, computedData: any) {\n      this.saveFormEncounterAndProceed({\n        encounterTypeID: this.service.encounterTypeID,\n        formData,\n        computedData,\n        callback: async () => {\n          try{\n            await new PatientProgramService(this.patientID).enrollProgram();\n            Store.invalidate(\"PATIENT_PROGRAM\");\n          } catch (e) {\n            console.log(\"Program enrollment error: \" + e)\n          }\n        }\n      })\n    },\n    /**\n     * HIV tests can be marked as incomplete if the client tests Positive\n     * on the first test and does not complete the other three or two tests to confirm the positive results.\n     * This may happen if the facility runsout of test kits or the client walksout without completing \n     * tests.\n     * @param testingFieldData \n     */\n    threeTierHIVtestNotComplete(testingFieldData: Option[]) {\n      let testOnePositive = false\n      let isIncompleteThreeTier = false\n      for (const opt of testingFieldData) {\n        if (opt.other.id === 'test_1' && opt.value === 'Positive') {\n          testOnePositive = true\n        } else if (\n          /test_2|test_1_repeat|test_3/i.test(`${opt?.other?.id}`) && \n          opt.value === '' && !opt.disabled\n        ) {\n          isIncompleteThreeTier = true\n        }\n      } \n      return testOnePositive && isIncompleteThreeTier\n    },\n    validateTimeUnit(v: Option) {\n      const maxDaysAllowed = 90;\n      const maxWeeksAllowed = 12;\n      const maxMonthsAllowed = 24;\n\n      if (parseInt(`${v.other.value}`) <= 0 && !/day/i.test(v.other.timeUnit)) {\n        return [`Enter ${v.other.timeUnit} greater than zero`];\n      }\n      if(v.other.timeUnit === 'Days' && parseInt(`${v.other.value}`) > maxDaysAllowed) {\n        return [`Enter ${v.other.timeUnit} less than ${maxDaysAllowed}, use Weeks Instead`];\n      }\n      if(v.other.timeUnit === 'Weeks' && parseInt(`${v.other.value}`) > maxWeeksAllowed) {\n        return [`Enter ${v.other.timeUnit} less than ${maxWeeksAllowed}, use Months Instead`];\n      }\n      if(v.other.timeUnit === 'Months' && parseInt(`${v.other.value}`) > maxMonthsAllowed) {\n        return [`Enter ${v.other.timeUnit} less than ${maxMonthsAllowed}, use Years Instead`];\n      }\n      if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n        return [`Value ${v.other.value} is invalid!`];\n      }\n      if (new Date(v.other.date) < new Date(this.facts.birthDate)) {\n        return [\n          `${\n            v.label\n          } is greater than client's age of ${this.facts.age} Years`,\n        ];\n      }\n      return null;\n    },\n    inclonclusiveResultDialog() {\n      return infoActionSheet(\n        \"Reschedule test\",\n        \"\",\n        \"HIV result is inconclusive, schedule another test in 2 weeks\",\n        [{ name: \"Ok\", slot: \"start\" }]\n      );\n    },\n    testOffered(formData: any, test: string) {\n      return formData.tests_offered.some((v: Option) => v.value === test);\n    },\n    result(formData: any, test: string) {\n      return find(formData.test_results, { other: { id: test } }) || {}\n    },\n    accessPointTypeField(): Field {\n      return {\n        id: \"accesspoint_type\",\n        helpText: \"Access point type\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\"HTS Access Type\", v.value),\n          };\n        },\n        options: () => {\n          return [\n            {label:\"Health Facility\", value:\"Health Facility\"},\n            { label: \"Community\", value: \"Community\" },\n            { label: \"Facility Referred from Community\", value: \"Health Facility\" }\n          ];\n        },\n      };\n    },\n    facilityAccessPointField(): Field {\n      return {\n        id: \"facility_access_points\",\n        helpText: \"Health facility access points\",\n        type: FieldType.TT_SELECT_GRID,\n        isRequired: () => true,\n        condition: (f: any) => f.accesspoint_type.value === \"Health Facility\",\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              `${v.value}`\n            ),\n          };\n        },\n        config: {\n          columnsPerRow: 2\n        },\n        options: () => {\n          return [\n            {label: \"1 | VCT\", value: \"VCT\"},\n            {label: \"2 | ANC\", value: \"ANC First Visit\"},\n            {label: \"3 | Inpatient\", value: \"Inpatient\"},\n            {label: \"4 | STI\", value: \"STI\"},\n            {label: \"5 | PMTCT-Follow-up (ANC FUP, Mat, Post-nat, BF)\", value: \"PMTCT FUP\"},\n            {label: \"6 | Index\", value: \"Index\"},\n            {label: \"7 | Paediatric\", value: \"Paediatric\"},\n            {label: \"8 | VMMC\", value: \"VMMC\"},\n            {label: \"9 | Malnutrition\", value: \"Malnutrition\"},\n            {label: \"10 | TB\", value: \"TB\"},\n            {label: \"11 | OPD\", value: \"OPD\"},\n            {label: \"12 | Other PITC (PrEP, dental e.t.c)\", value: \"Other\"},\n            {label: \"18 | SNS (Social Network Strategies)\", value: \"SNS\"},\n          ];\n        },\n      };\n    },\n    communityAccessPoints(): Field {\n      return {\n        id: \"community_access_points\",\n        helpText: \"Community access points\",\n        type: FieldType.TT_SELECT,\n        condition: (f: any) => f.accesspoint_type.value === \"Community\",\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              `${v.value}`\n            ),\n          };\n        },\n        options: () => {\n          return [\n            {label: \"13 | VCT\", value: \"VCT\"},\n            {label: \"14 | Index\", value: \"Index\"},\n            {label: \"15 | VMMC\", value: \"VMMC\"},\n            {label: \"16 | Other\", value: \"Other\"},\n            {label: \"17 | SNS\", value: \"SNS\"},\n            {label: \"19 | Mobile\", value: \"Mobile\"},\n          ];\n        },\n      };\n    },\n    testsOfferedField(): Field {\n      let availableTests: string[] = [\n        'HIV',\n        'Syphilis',\n        'Hepatitis B'\n      ]\n      return {\n        id: \"tests_offered\",\n        helpText: \"Tests to be offered today?\",\n        type: FieldType.TT_MULTIPLE_SELECT,\n        init: async () => {\n          try {\n            const { getUserProp } = UserProp()\n            const res = await getUserProp('HTS_PROGRAMS')\n            const tests = res.split(',').filter(\n              (prop: string) => /HIV|syphilis|hepatitis/i.test(prop)\n            ).map((test: string) => test.replace(/test/i, '').trim())\n            if (tests.length >= 1) availableTests = tests\n          } catch (e) {\n            console.error(e)\n            return false\n          }\n          return true\n        },\n        isRequired: () => true,\n        condition: () => availableTests.length > 1,\n        defaultOutput: () => this.mapStrToOptions(availableTests),\n        options: () => this.mapStrToOptions(availableTests),\n        config: {\n          buildOptionsOnce: true\n        },\n      };\n    },\n    lastHivTestResultField(): Field {\n      return {\n        id: \"last_hiv_result\",\n        helpText: \"Last HIV Test\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Previous HIV Test Results\",\n              v.value\n            ),\n          };\n        },\n        options: () => {\n          return this.toConditionalOptions([\n            [\"Never Tested\"],\n            [\"Negative\"],\n            [\"Positive\"],\n            [\"Exposed infant\"],\n            [\"Invalid or inconclusive\"],\n          ]);\n        },\n      };\n    },\n    lastHivTestTypeField(): Field {\n      return {\n        id: \"last_hiv_perfomed\",\n        helpText: \"Last HIV test performed\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) =>\n          ![\"Never Tested\", \"Exposed infant\"].includes(f.last_hiv_result.value),\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Previous HIV test done\",\n              v.value\n            ),\n          };\n        },\n        defaultOutput: (f: any) => {\n          if (/exposed infant/i.test(f.last_hiv_result.value)) {\n            return this.toOption('Professional')\n          }\n        },\n        options: (f: any) => {\n          return this.toConditionalOptions([\n            [\"Self\"],\n            [\n              \"Initial professional\",\n              !/Negative|Inconclusive/i.test(f.last_hiv_result.value),\n            ],\n            [\"Professional\"],\n          ]);\n        },\n      };\n    },\n    lastTimeHIVTestedField(): Field {\n      return {\n        id: \"last_time_hiv_tested\",\n        helpText: \"Time since last HIV test\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_hiv_result.value && f.last_hiv_result.value != \"Never Tested\",\n        isRequired: () => true,\n        beforeNext: async (v: Option, f: any) => {\n          if (v.other.monthsAgoInt >= 12 && !this.testOffered(f, \"HIV\")) {\n            await infoActionSheet(\n              \"Recommendation Alert\",\n              \"\",\n              \"Please consider testing client for HIV\",\n              [\n                {\n                  name: \"Ok\",\n                  slot: \"start\",\n                  color: \"primary\",\n                },\n              ]\n            );\n          }\n          return true;\n        },\n        validation: (v: Option) => this.validateTimeUnit(v),\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildObs(\"Time of HIV test\", {\n              'value_datetime': v.other.date,\n              'value_text': v.value\n            })\n          }\n        },\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    },\n    arvHistoryField(): Field {\n      return {\n        id: \"last_taken_drugs\",\n        helpText: \"Ever taken the following drugs?\",\n        type: FieldType.TT_MULTIPLE_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v.map((d) =>\n              this.service.buildValueCoded(d.other.concept, d.value)\n            ),\n          };\n        },\n        options: (f: any) => {\n          if (f.last_taken_drugs) return f.last_taken_drugs;\n          return [\n            this.toYesNoOption(\"PrEP or infant NVP\", {\n              concept: \"Taken Prep before\",\n            }),\n            ...(()=> {\n              if (`${f.last_hiv_result?.value}` != 'Negative') {\n                return [this.toYesNoOption(\"ART\", { concept: \"Taken ARV Before\" })]\n              }\n              return []\n            })(),\n            this.toYesNoOption(\"PEP\", { concept: \"Taken PEP before\" }),\n          ];\n        },\n      };\n    },\n    drugTakenField(): Field {\n      /**\n       * Select Most recent drug from list of drugs\n       */\n      return {\n        id: \"drug_taken\",\n        helpText: \"Most recent drug taken\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) => {\n          let drugCount = 0 \n          for(const drug of f.last_taken_drugs) {\n            if (drug.label === 'ART' && drug.value === 'Yes') {\n              return false\n            }\n            if (drug.value === 'Yes') ++drugCount\n          }\n          return drugCount > 1\n        },\n        defaultOutput: (f: any) => {\n          const artSelected = f.last_taken_drugs.find((d: Option) => d.label === 'ART')\n          if (artSelected?.value === 'Yes') {\n            return this.toOption('ART')\n          }\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Most recent drug taken\",\n              v.value\n            ),\n          };\n        },\n        options: (f: any) => {\n          return f.last_taken_drugs\n            .filter((d: Option) => d.value === \"Yes\")\n            .map((d: Option) => this.toOption(d.label));\n        },\n      };\n    },\n    mostRecentDrugHiddenField(): Field {\n      /**\n       * Automatically determines recent drug if only one drug is Yes\n       */\n      return {\n        id: \"most_recent_drug\",\n        helpText: \"Most recent drug\",\n        type: FieldType.TT_HIDDEN,\n        condition: (f: any) =>\n          f.last_taken_drugs.filter((d: Option) => d.value === \"Yes\").length ===\n          1,\n        defaultValue: (fdata?) => {\n          return find(fdata.last_taken_drugs, { value: \"Yes\" });\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Most recent drug taken\",\n              v.value\n            ),\n          };\n        },\n      };\n    },\n    timeSinceDrugTaken(): Field {\n      return {\n        id: \"time_since_last_drug_taken\",\n        helpText: \"Time since last taken medication\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_taken_drugs.some((d: Option) => d.value === \"Yes\"),\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildObs(\"Time since last taken medication\", {\n              value_text: `${v.value} ago`,\n              value_datetime: v.other.date,\n            }),\n          };\n        },\n        validation: (v: Option) => this.validateTimeUnit(v),\n        isRequired: () => true,\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    },\n    clientRiskCategoryField(): Field {\n      return {\n        id: \"client_risk_category\",\n        helpText: \"Client Risk Category\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\"client risk category\", v.value),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\n            \"Low risk\",\n            \"On-going risk\",\n            \"High risk event in last 3 months\",\n            \"Risk assessment not done\",\n          ]);\n        },\n      };\n    },\n    hivTestKitDetailsField(): Field {\n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        condition: (f: any) => f.test_results.filter((t: Option) => t.value!='')\n          .some((t: Option) => !(t.other.expiryDate && t.other.lotNo)),\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        summaryMapValue: (v: Option) => {\n          return {\n            label: `Kit: ${v.label}`,\n            value: `Lot No: ${v.value || v.other.fields[1].value}`\n          }\n        },\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 3;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        defaultOutput: (f: any) => {\n          const kits = f.test_results.filter((r: Option) => r.value!='')\n          if (kits.every((t: Option) => t.other.expiryDate && t.other.lotNo)) {\n            return kits.map((v: Option) => {\n              return {\n                label: v.label,\n                value: v.other.lotNo,\n                other: {\n                  fields: [\n                    {\n                      label: 'Kit name',\n                      value: v.label,\n                      other: {\n                        obs: () => this.service.buildValueText(\"Kit name\", v.label as string),\n                      }\n                    },\n                    {\n                      label: 'Kit Lot No',\n                      value: v.other.lotNo,\n                      other: {\n                        obs: () => {\n                          return this.service.buildValueText(\"Kit lot number\", v.other.lotNo as string)\n                        } \n                      }\n                    },\n                    {\n                      label: 'Kit expiry date',\n                      value: v.other.expiryDate,\n                      other: {\n                        obs: () => this.service.buildValueDate(\"kit expiry date\", v.other.expiryDate as string),\n                      }\n                    }\n                  ]\n                }\n              }\n            })\n          }\n        },\n        options: async (f: any) => {\n          const testResults: Option[] = Array.isArray(f.test_results) ? f.test_results : [];\n          const kitNameOption = (kitName: string) => ({\n            label: \"Kit Name\",\n            value: kitName,\n            clearable: false,\n            other: {\n              usefontBold: true,\n              obs: (v: Option) => this.service.buildValueText(\"Kit name\", v.label as string),\n            }\n          });\n          const kitLotNoOption = (lotNo: string) => ({\n            label: \"Kit Lot No.\",\n            value: lotNo,\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueText(\"Kit lot number\", v.value as string),\n              onclick: (val: Option) => {\n                keyboard({\n                  id: 'lot',\n                  helpText: 'Enter Lot Number',\n                  type: FieldType.TT_TEXT,\n                  isRequired: () => true\n                }, \n                (v: Option) => {\n                  val.value = v.value\n                })\n              },\n            },\n          });\n          const kitExpiryDateOption = (expiryDate: string) => ({\n            label: \"Kit Expiry Date\",\n            value: expiryDate,\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueDate(\"kit expiry date\", v.value as string),\n              onclick: (val: Option) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(this.service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(this.service.date),\n                        ];\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => {\n                    val.value = v.value\n                  }\n                );\n              },\n            },\n          });\n          const enteredKits = f.test_kit === null ? [] : f.test_kit;\n          return testResults\n            .filter((t) => t.value != \"\")\n            .map((t) => {\n              const existingOption = find(enteredKits, { label: t.label });\n              if (existingOption) return existingOption;\n              return {\n                label: t.label,\n                value: \"\",\n                other: {\n                  fields: [\n                    kitNameOption(t.other.shortName),\n                    kitLotNoOption(t.other.lotNo),\n                    kitExpiryDateOption(t.other.expiryDate)\n                  ]\n                }\n              };\n            });\n        },\n      };\n    },\n    testResultsField(): Field {\n      const { getLotNo, getExpiryDate, initKits } = TestKit()\n      const isStatus = (l: Option[], test: string, status: string) =>\n        find(l, {\n          value: status,\n          other: { id: test },\n        })\n          ? true\n          : false;\n      return {\n        id: \"test_results\",\n        helpText: \"Test results\",\n        type: FieldType.TT_MULTIPLE_YES_NO,\n        config: {\n          requireAllValues: false\n        },\n        summaryMapValue: (v: Option) => {\n          const resultMap: Record<string, string> = {\n            \"Positive\": \"Reactive\",\n            \"Negative\": \"Non-reactive\"\n          }\n          if (v.value != \"\") {\n            return {\n              label: v.label, \n              value: resultMap[v.value] || v.value\n            } \n          }\n        },\n        beforeNext: async (v: Option[], f: any) => {\n          const isInconclusive = (isStatus(v, \"test_2\", \"Negative\") &&\n              isStatus(v, \"test_1_repeat\", \"Positive\")) ||\n            (isStatus(v, \"test_2\", \"Positive\") &&\n              isStatus(v, \"test_3\", \"Negative\"))\n          if (/inconclusive/i.test(f.last_hiv_result.value) && isInconclusive) {\n            await infoActionSheet(\n              \"Inconclusive Re-Test Result\",\n              \"\",\n              \"Please collect DBS sample.\",\n              [{ name: \"Ok\", slot: \"start\" }]\n            );\n            return true\n          }\n          if (isInconclusive) {\n            await this.inclonclusiveResultDialog();\n            return true\n          }\n          const isPositive = isStatus(v, \"test_1\", \"Positive\") && \n            isStatus(v, \"test_2\", \"Positive\") &&\n            isStatus(v, \"test_3\", \"Positive\")\n          \n          if (isPositive && this.facts.age <= 0) {\n            await infoActionSheet(\n              \"<12 months old all HIV tests reactive\",\n              \"\",\n              \"Please collect DBS sample for EID\",\n              [{ name: \"Ok\", slot: \"start\" }]\n            );\n          }\n\n          if (f.accesspoint_type.value != \"Community\" && this.threeTierHIVtestNotComplete(v)) {\n            if (!(await alertConfirmation(\"Are you sure you want to save incomplete HIV results?\",\n              { header: \"Incomplete HIV results!\" }\n            ))) {\n              return false\n            }\n          }\n\n          return true;\n        },\n        onValueUpdate: (l: Option[], v: any, f: any) => {\n          // Manage Three test algorithm for HIV results\n          if (\n            this.testOffered(f, \"HIV\") &&\n            f.accesspoint_type.value === \"Health Facility\"\n          ) {\n            const results: Option[] = [...l];\n            const testOneIsPositive = isStatus(results, \"test_1\", \"Positive\");\n            const testTwoIsPositive = isStatus(results, \"test_2\", \"Positive\");\n            const disable = (test: string, disabled: boolean) => {\n              results.forEach((r) => {\n                if (r.other.id === test) {\n                  r.disabled = disabled;\n                  if (disabled) r.value = \"\";\n                }\n              });\n            };\n            if (testOneIsPositive) {\n              disable(\"test_2\", false);\n            } else {\n              disable(\"test_2\", true);\n              disable(\"test_3\", true);\n              disable(\"test_1_repeat\", true);\n              return results;\n            }\n            if (testOneIsPositive && testTwoIsPositive) {\n              disable(\"test_3\", false);\n              disable(\"test_1_repeat\", true);\n              return results;\n            }\n            if (\n              testOneIsPositive &&\n              !testTwoIsPositive &&\n              l.some((d) => d.other.id === \"test_2\" && d.value != \"\")\n            ) {\n              disable(\"test_1_repeat\", false);\n              disable(\"test_3\", true);\n            }\n            return results;\n          }\n          return l;\n        },\n        validation: (v: Option[]) => {\n          // Test 1, Test 2 and Test 1 Repeat and Test 3 are optional\n          if (!v || v.some((d) => {\n              return /syphilis|hepatitis|test_1/i.test(`${d?.other?.id}`) && d.value === \"\" && !d.disabled\n          })) {\n            return [\"Result entry incomplete!\"];\n          }\n          return null;\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v\n              .filter((d) => d.value && typeof d.other.obs === \"function\")\n              .map((d) => d.other.obs(d)),\n          };\n        },\n        init: async () => {\n          await initKits()\n          return true\n        },\n        condition: (f: any) => f.tests_offered.length,\n        options: (f: any) => {\n          const option = (params = {} as any) => {\n            return {\n              label: params.name,\n              value: \"\",\n              disabled: typeof params?.disabled === \"boolean\" ? params.disabled : false,\n              other: {\n                id: params?.id || \"\",\n                concept: params?.concept || \"\",\n                shortName: params?.shortName || \"\",\n                category: params?.category || \"\",\n                expiryDate: params?.expiryDate || \"\",\n                lotNo: params?.lotNo || \"\",\n                obs: typeof params?.obs === \"function\" ? params.obs : undefined,\n                accessPoint: params?.accessPoint || \"*\",\n                values: [\n                  { label: \"Reactive\", value: \"Positive\" }, \n                  { label: \"Non-reactive\", value: \"Negative\" }\n                ]\n              }\n            }\n          }\n          const resultModel: Option[] = [\n            option({\n              id: \"test_1\",\n              name: \"HIV Test 1 (Determine)\",\n              category: \"HIV\",\n              shortName: \"Determine\",\n              lotNo: getLotNo(KitProp.DETERMINE),\n              expiryDate: getExpiryDate(KitProp.DETERMINE),\n              concept: \"Test 1\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: \"test_2\",\n              name: \"HIV Test 2 (Unigold)\",\n              category: \"HIV\",\n              disabled: true,\n              accessPoint: \"Health Facility\",\n              shortName: \"Unigold\",\n              concept: \"Test 2\",\n              lotNo: getLotNo(KitProp.UNIGOLD),\n              expiryDate: getExpiryDate(KitProp.UNIGOLD),\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: \"test_1_repeat\",\n              name: \"HIV Test 1 (Determine) Repeat\",\n              category: \"HIV\",\n              disabled: true,\n              shortName: \"Determine (Repeat)\",\n              accessPoint: \"Health Facility\",\n              concept: \"Immediate Repeat Test 1 Result\",\n              lotNo: getLotNo(KitProp.DETERMINE),\n              expiryDate: getExpiryDate(KitProp.DETERMINE),\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: \"test_3\",\n              name: \"HIV Test 3 (Bioline)\",\n              category: \"HIV\",\n              disabled: true,\n              shortName: \"Bioline\",\n              accessPoint: \"Health Facility\",\n              concept: \"Test 3\",\n              lotNo: getLotNo(KitProp.BIOLINE),\n              expiryDate: getExpiryDate(KitProp.BIOLINE),\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: 'syphilis',\n              name: \"Syphilis Test Result\",\n              category: \"Syphilis\",\n              shortName: \"Syphilis\",\n              concept: \"Syphilis Test Result\",\n              lotNo: getLotNo(KitProp.SYPHILIS),\n              expiryDate: getExpiryDate(KitProp.SYPHILIS),\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: 'hepatitis',\n              name: \"Hepatitis B Test Result\",\n              category: \"Hepatitis B\",\n              shortName: \"Hepatitis B\",\n              concept: \"Hepatitis B Test Result\",        \n              lotNo: getLotNo(KitProp.HEPATITIS),\n              expiryDate: getExpiryDate(KitProp.HEPATITIS),\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n          ];\n          const accessPoint = f.accesspoint_type.value;\n          const prevResults = Array.isArray(f.test_results)\n            ? f.test_results\n            : [];\n          // Merge previous entered results to default result model\n          const results: Option[] = resultModel.reduce(\n            (all: any, defaultOption: Option) => {\n              const existingResult = find(prevResults, {\n                label: defaultOption.label,\n              });\n              if (existingResult) {\n                if (\n                  existingResult.other.accessPoint != \"*\" &&\n                  existingResult.other.accessPoint != accessPoint\n                ) {\n                  existingResult.value = \"\";\n                }\n                all.push(existingResult);\n              } else {\n                all.push(defaultOption);\n              }\n              return all;\n            },\n            [] as Option[]\n          );\n          // Filter options by selected tests offered and access point field values\n          return f.tests_offered.reduce((all: Option[], c: Option) => {\n            const options: Option[] = results.filter(\n              (r: Option) =>\n                r.other.category === c.value &&\n                (r.other.accessPoint === accessPoint ||\n                  r.other.accessPoint === \"*\")\n            );\n            return options.length ? all.concat(options) : all;\n          }, []);\n        },\n      };\n    },\n    hivResultHiddenField(): Field {\n      let result = \"\";\n      return {\n        id: \"hiv_result\",\n        helpText: \"HIV Result\",\n        type: FieldType.TT_HIDDEN,\n        appearInSummary: () => false,\n        condition: (f: any) => this.testOffered(f, \"HIV\"),\n        onload: (f: any) => {\n          let hasLastTestPerfomed = f.last_hiv_perfomed != null;\n          let hasLastHivResult = f.last_hiv_result != null;\n          let testOneResult = \"\";\n          let testTwoResult = \"\";\n          let testThreeResult = \"\";\n          let testOneRepeat = \"\";\n          const testResults = (f.test_results||[]);\n          const isCommunity = f.accesspoint_type.value === \"Community\";\n          const lastHIVResult = () => f.last_hiv_result?.value;\n          const lastTestPerfomed = () => f.last_hiv_perfomed?.value;\n          testResults.forEach((r: Option) => {\n            switch (r.other.id) {\n              case \"test_1\":\n                testOneResult = r.value as string;\n                break;\n              case \"test_2\":\n                testTwoResult = r.value as string;\n                break;\n              case \"test_3\":\n                testThreeResult = r.value as string;\n                break;\n              case \"test_1_repeat\":\n                testOneRepeat = r.value as string;\n                break;\n            }\n          });\n          const inconclusiveNegativeForPreviousPositiveProfessional = () =>\n            hasLastHivResult &&\n            hasLastTestPerfomed &&\n            lastHIVResult() === \"Positive\" &&\n            lastTestPerfomed() === \"Professional\" &&\n            (testOneResult === \"Negative\" ||\n              testTwoResult === \"Negative\" ||\n              testThreeResult === \"Negative\");\n          const results: any = {\n            // TODO: Replace \"Incomplete\" with \"Testing not completed\"\n            Incomplete: () => [\n              f.accesspoint_type.value != \"Community\",\n              this.threeTierHIVtestNotComplete(testResults)\n            ],\n            Negative: () => [\n              !inconclusiveNegativeForPreviousPositiveProfessional(),\n              testOneResult === \"Negative\" ||\n                testTwoResult === \"Negative\" ||\n                testThreeResult === \"Negative\" ||\n                testOneRepeat === \"Negative\",\n            ],\n            Positive: () => [!isCommunity, testThreeResult === \"Positive\"],\n            Inconclusive: () => [\n              !isCommunity,\n              inconclusiveNegativeForPreviousPositiveProfessional() ||\n                (testTwoResult === \"Negative\" &&\n                  testOneRepeat === \"Positive\") ||\n                (testTwoResult === \"Positive\" &&\n                  testThreeResult === \"Negative\"),\n            ],\n            \"Positive Initial Professional\": () => [\n              isCommunity,\n              testOneResult === \"Positive\",\n            ],\n          };\n          result = Object.keys(results).reduce((finalResult: any, key: any) => {\n            if (results[key]().every(Boolean)) return key;\n            return finalResult;\n          }, \"Not indicated\");\n        },\n        defaultValue: () => {\n          if (result) return this.toOption(result);\n        },\n        finalComputedValue: () => {\n          if (result) {\n            return {\n              obs: this.service.buildValueCoded(\"HIV status\", result),\n            };\n          }\n        },\n      };\n    },\n    hivPatientCategoryField(): Field {\n      let hivStatusCategory = \"N/A\";\n      return {\n        id: \"patient_category\",\n        helpText: \"Result given to client\",\n        type: FieldType.TT_HIDDEN,\n        onload: (f: any) => {\n          if (!f.hiv_result) return;\n          const newHivStatus = f.hiv_result.value;\n          const clientAge = this.facts.age;\n          const lastHivResult = f.last_hiv_result.value;\n          const lastTypeOfTestPerformed =\n            f.last_hiv_perfomed != null ? f.last_hiv_perfomed.value : \"\";\n          const lastTimeHivTestedInMonths =\n            f.last_time_hiv_tested != null\n              ? f.last_time_hiv_tested.other.monthsAgoInt\n              : -1;\n\n          const hivCategoryRef: Record<string, boolean[]> = {\n            \"New Positive\": [\n              newHivStatus === \"Positive\",\n              /never tested|negative|exposed|inconclusive/i.test(lastHivResult) ||\n                (lastHivResult === \"Positive\" &&\n                  /initial professional|self/i.test(lastTypeOfTestPerformed) &&\n                  lastTimeHivTestedInMonths <= 12),\n            ],\n            \"New exposed infant\": [\n              clientAge <= 0,\n              newHivStatus === \"Positive\",\n            ],\n            \"Positive Re-test\": [\n              newHivStatus === \"Positive\",\n              lastHivResult === \"Positive\",\n              lastTypeOfTestPerformed === \"Professional\"\n            ],\n            \"Inconclusive Re-test\": [\n              lastHivResult === \"Positive\",\n              newHivStatus === \"Inconclusive\",\n              lastTypeOfTestPerformed === \"Professional\"\n            ],\n            \"New Negative\": [\n              newHivStatus === \"Negative\"\n            ],\n            \"New Inconclusive\": [\n              newHivStatus === \"Inconclusive\",\n              (/self/i.test(lastTypeOfTestPerformed) && /invalid/i.test(lastHivResult)) ||\n              /never tested|negative|exposed infant/i.test(lastHivResult) ||\n                (lastHivResult === \"Positive\" &&\n                  /self|initial professional/i.test(lastTypeOfTestPerformed)),\n            ],\n          };\n          hivStatusCategory = Object.keys(hivCategoryRef).reduce(\n            (status: string, key: string) =>\n              hivCategoryRef[key].every(Boolean) ? key : status,\n            \"N/A\"\n          );\n        },\n        defaultValue: () => {\n          if (hivStatusCategory != \"N/A\")\n            return this.toOption(hivStatusCategory);\n        },\n        finalComputedValue: () => {\n          if (hivStatusCategory != \"N/A\") {\n            return {\n              obs: this.service.buildValueCoded(\"HIV group\", hivStatusCategory),\n            };\n          }\n        },\n        condition: (f: any) => f.hiv_result.value,\n      };\n    },\n  },\n});\n","import { render } from \"./HtsTesting.vue?vue&type=template&id=59cf9558&ts=true\"\nimport script from \"./HtsTesting.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsTesting.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Service } from \"@/services/service\";\nimport { find, isEmpty } from \"lodash\";\nimport { ref } from \"vue\";\nimport UserProp from \"@/composables/userproperty\"\n\nexport enum KitProp {\n    TEST_KIT_USER_PROPERTY = 'hts_user_assigned_kits',\n    HIV_SELF_KIT = 'HIV self-kit',\n    SYPHILIS = 'Syphilis',\n    HEPATITIS = 'Hepatitis B',\n    BIOLINE = 'Bioline',\n    DETERMINE = 'Determine',\n    UNIGOLD = 'Unigold'\n}\n\nexport function TestKit() {\n    const kits = ref<any>([])\n    const { getUserProp, setUserProp } = UserProp()\n\n    const getSelectedTests = async () => {\n        try {\n            const req = await getUserProp('HTS_PROGRAMS')\n            return `${req||''}`.split(',').map((prop: string) => prop.trim())\n        } catch (e) {\n            console.error(`${e}`)\n        }\n        return []\n    }\n\n    const initKits = async () => {\n        const defaultKits = [\n            {\n                kitName: KitProp.UNIGOLD,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.DETERMINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.BIOLINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.HIV_SELF_KIT,\n                lotNo: '',\n                expiryDate: '',\n                visible: true\n            },\n            {\n                kitName: KitProp.SYPHILIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Syphilis Test\"\n            },\n            {\n                kitName: KitProp.HEPATITIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Hepatitis B Test\"\n            }\n        ]\n        try {\n            const selectedKits = await getSelectedTests()\n            const req: any = await getUserProp(KitProp.TEST_KIT_USER_PROPERTY)\n            const prevKits = JSON.parse(req||'')\n\n            defaultKits.forEach((kit: any) => {\n                if (kit.userProp && !isEmpty(selectedKits)) {\n                    kit.visible = selectedKits.includes(kit.userProp)\n                }\n                const preset = find(prevKits, { kitName: kit.kitName })\n                if (preset) {\n                    kit.lotNo = preset.lotNo\n                    kit.expiryDate = preset.expiryDate\n                }\n            })\n            kits.value = defaultKits.filter((k: any) => k.visible)\n        } catch (e) {\n            kits.value = defaultKits\n            console.error(`${e}`)\n        }\n        \n    }\n\n    const getLotNo = (kitName: KitProp) => {\n        const data = find(kits.value, { kitName })\n        if (data) {\n            if(new Date(data.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return data.lotNo\n        } \n        return ''\n    }\n\n    const getExpiryDate = (kitName: KitProp) => {\n        const date = find(kits.value, { kitName })\n        if (date) {\n            if (new Date(date.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return date.expiryDate\n        }\n        return ''\n    }\n\n    const saveKits = () => setUserProp(KitProp.TEST_KIT_USER_PROPERTY, JSON.stringify(kits.value))\n\n    return {\n        kits,\n        initKits,\n        saveKits,\n        getLotNo,\n        getExpiryDate\n    }\n}\n"],"sourceRoot":""}