{"version":3,"sources":["webpack:///./src/services/person_attributes_service.ts","webpack:///./src/services/patient_registration_service.ts","webpack:///./src/views/PatientRegistration.vue?cd5f","webpack:///./src/views/PatientRegistration.vue","webpack:///./src/views/PatientRegistration.vue?a9d4"],"names":["PersonAttributeService","attributes","Service","PatientRegistrationService","personId","this","personID","person","personAttributes","createPerson","createPersonAttributes","createPatient","patient","printPatient","PersonService","update","create","data","person_id","ProgramService","index","PatientPrintoutService","printNidLbl","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","onOnIndex","$event","fieldComponent","skipSummary","activeField","fields","onFinishAction","onFinish","_","defineComponent","components","HisStandardForm","IonPage","app","App","getActiveApp","ddeInstance","ddeDocID","ddeIsReassign","currentAddressAttributes","homeAddressAttributes","hasIncompleteData","editPersonData","editPerson","personAttribute","isMilitarySite","presets","registrationSummary","form","ddeEnabled","watch","handler","query","PatientDemographicsExchangeService","edit_person","dde_reassign","doc_id","setPatientID","person_attribute","initEditMode","getFields","immediate","deep","methods","push","personIndexField","givenNameField","familyNameField","genderField","searchResultField","concat","dobFields","homeRegionField","homeDistrictField","homeTAField","homeVillageField","currentRegionField","currentDistrictField","currentTAField","currentVillage","landmarkFields","cellPhoneField","patientTypeField","facilityLocationField","occupationField","regimentField","dateJoinedMilitaryFields","rankField","relationshipField","possibleDuplicatesField","patientRegistrationSummary","isEditMode","Store","get","patientID","parseInt","getAddresses","ancestryDistrict","ancestryTA","ancestryVillage","currentDistrict","currentTA","getGivenName","getFamilyName","getGender","getBirthdate","getPhoneNumber","getClosestLandmark","computedData","PersonField","resolvePerson","nationalIDStatus","appendNationalIDData","resolvePersonAttributes","registration","Patientservice","registerPatient","getPersonID","set","updateMWNationalId","malawiNationalID","onRegisterPatient","$router","$route","exit","relationship","nextTask","Object","assign","given_name","family_name","gender","birthdate","setPersonID","updatePerson","attr","invalidate","back","editConditionCheck","includes","confirmPatient","getDocID","getNationalID","match","assignNpid","printNationalID","delayPromise","toastDanger","getID","values","filter","d","isPlainObject","map","mapToOption","listOptions","item","label","value","name","getGivenNameField","condition","defaultValue","getFamilyNameField","IS_ANC_APP","applicationName","IS_CXCA","getGenderField","requireNext","defaultOutput","defaultComputedOutput","beforeNext","newGender","oldGender","infoActionSheet","slot","color","action","dobConfig","getDobConfig","sdate","getSessionDate","childBearingAgeInYrs","maxDate","dayjs","subtract","format","STANDARD_DATE_FORMAT","generateDateFields","region","getHomeRegionField","district","getHomeDistrictField","homeTA","getHomeTaField","home_region","homeVillage","getHomeVillageField","currentRegion","getCurrentRegionField","getCurrentDistrictField","getCurrentTAfield","current_region","getCurrentVillageField","cellPhone","getCellNumberField","cell_phone_number","facility","getFacilityLocationField","patient_type","landmarks","getLandmarkFields","id","helpText","type","FieldType","TT_SELECT","computedValue","val","validation","Validation","required","options","PatientTypeService","getPatientTypes","init","GLOBAL_PROP","militarySiteEnabled","TT_TEXT","occupation","minDate","HisDate","estimateDateFromAge","WorkflowService","estimation","allowUnknown","computeValue","date","OPD","Registration","TT_PERSON_RESULT_VIEW","dynamicHelpText","appearInSummary","payload","searchDemographics","patients","itemData","getPersonAttributeOptions","other","search","config","hiddenFooterBtns","footerBtns","onClick","state","disabled","onValue","isEmpty","results","createdPerson","duplicatePatients","TT_PERSON_MATCH_VIEW","c","checkPotentialDuplicates","length","toDate","toStandardHisDisplayFormat","score","patient_id","newPerson","foundPerson","comparisons","home_district","home_traditional_authority","visible","f","possible_duplicates","TT_TABLE_VIEWER","editButton","attribute","columns","rows","home_village","current_district","current_traditional_authority","landmark","emptySets","indexes","class","forEach","r","i","isValueEmpty","rowColors","onload","reassignNpid","printNpid","toastWarning","TT_SUMMARY","buildRegistrationSummary","keys","key","replace","m","toUpperCase","x","undefined","nationalIDData","__exports__"],"mappings":"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","file":"js/chunk-20db0db6.1187c4c3.js","sourcesContent":["import { Service } from \"./service\"\n\nexport interface NewAttribute {\n    person_id: number;\n    person_attribute_type_id: number;\n    value: number | string;\n}\n\nexport class PersonAttributeService extends Service { \n    constructor() {\n        super()\n    }\n\n    static create(attributes: Array<NewAttribute>) { \n        return super.postJson('/person_attributes', attributes) \n    }\n}\n","import { Service } from \"./service\"\nimport { ProgramService } from \"@/services/program_service\";\nimport { Person } from \"@/interfaces/person\"\nimport { PersonService } from \"@/services/person_service\"\nimport { PersonAttributeService } from '@/services/person_attributes_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\n\nexport class PatientRegistrationService extends Service {\n    personId: number\n    constructor() {\n        super()\n        this.personId = 0\n    }\n\n    getPersonID() {\n        return this.personId\n    }\n\n    setPersonID(personID: number) {\n        this.personId = personID\n    }\n\n    async registerPatient(person: any, personAttributes: any) {\n        await this.createPerson(person)\n        await this.createPersonAttributes(personAttributes)\n        const patient = await this.createPatient()\n        await this.printPatient()\n        return patient\n    }\n\n    async registerGuardian(person: any) {\n        return this.createPerson(person)\n    }\n\n    updatePerson(person: any) {\n       return new PersonService(person).update(this.personId)\n    }\n\n    async createPerson(person: any) {\n        const data: Person = await new PersonService(person).create()\n        this.personId = data.person_id\n        return data\n    }\n\n    createPatient() {\n        return ProgramService.createPatient(this.personId)\n    }\n\n    async createPersonAttributes(attributes: Array<any>) {\n        for(const index in attributes) {\n            await PersonAttributeService.create({\n                ...attributes[index],\n                'person_id': this.personId\n            })\n        }\n    }\n\n    printPatient() {\n        return new PatientPrintoutService(this.personId).printNidLbl()\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n        skipSummary: true,\n        activeField: _ctx.fieldComponent,\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish\n      }, null, 8, [\"activeField\", \"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport { WorkflowService } from \"@/services/workflow_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\"\nimport App from \"@/apps/app_lib\"\nimport { AppInterface } from \"@/apps/interfaces/AppInterface\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { isValueEmpty } from \"@/utils/Strs\"\nimport { PatientDemographicsExchangeService } from \"@/services/patient_demographics_exchange_service\"\nimport { toastDanger, toastWarning } from \"@/utils/Alerts\"\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { IonPage } from \"@ionic/vue\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport GLOBAL_PROP from \"@/apps/GLOBAL_APP/global_prop\";\nimport dayjs from \"dayjs\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  components: { HisStandardForm, IonPage },\n  data: () => ({\n    app: App.getActiveApp() as AppInterface,\n    ddeInstance: {} as any,\n    ddeDocID: '' as string,\n    ddeIsReassign: false as boolean,\n    skipSummary: false as boolean,\n    currentAddressAttributes: [\n        'current_region',\n        'current_district',\n        'current_village',\n        'current_traditional_authority'\n    ] as string[],\n    homeAddressAttributes: [\n        'home_region',\n        'home_district',\n        'home_traditional_authority',\n        'home_village'\n    ] as string[],\n    hasIncompleteData: false as boolean,\n    patient: {} as any,\n    editPersonData: {} as any,\n    editPerson: -1 as number,\n    personAttribute: '' as string,\n    activeField: '' as string,\n    fieldComponent: '' as string,\n    fields: [] as Array<Field>,\n    isMilitarySite: false,\n    presets: {} as any,\n    registrationSummary: {} as any,\n    form: {} as Record<string, Option> | Record<string, null>,\n    ddeEnabled: false as boolean,\n  }),\n  watch: {\n    '$route': {\n        async handler({query}: any) {\n           this.ddeInstance = new PatientDemographicsExchangeService()\n           if (query.edit_person) {\n                this.ddeIsReassign = query.dde_reassign\n                this.ddeDocID = query.doc_id\n                this.ddeInstance.setPatientID(query.edit_person)\n                if(query.person_attribute) this.personAttribute = query.person_attribute\n                await this.initEditMode(query.edit_person)\n            } else {\n                this.presets = query\n            }\n            this.fields = this.getFields()\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    getFields(): Array<Field> {\n        let fields: Array<Field> = []\n        fields.push(this.personIndexField())\n        fields.push(this.givenNameField())\n        fields.push(this.familyNameField())\n        fields.push(this.genderField())\n        fields.push(this.searchResultField())\n        fields = fields.concat(this.dobFields())\n        fields.push(this.homeRegionField())\n        fields.push(this.homeDistrictField())\n        fields.push(this.homeTAField())\n        fields.push(this.homeVillageField())\n        fields.push(this.currentRegionField())\n        fields.push(this.currentDistrictField())\n        fields.push(this.currentTAField())\n        fields.push(this.currentVillage())\n        fields = fields.concat(this.landmarkFields())\n        fields.push(this.cellPhoneField())\n        fields.push(this.patientTypeField())\n        fields.push(this.facilityLocationField())\n        fields.push(this.occupationField())\n        fields.push(this.regimentField())\n        fields = fields.concat(this.dateJoinedMilitaryFields())\n        fields.push(this.rankField())\n        fields.push(this.relationshipField())\n        fields.push(this.possibleDuplicatesField())\n        fields.push(this.patientRegistrationSummary())\n        return fields\n    },\n    isEditMode() {\n        return this.editPerson >= 1\n    },\n    async initEditMode(personId: number) {\n        this.editPerson = personId\n        this.patient = await Store.get('ACTIVE_PATIENT', { patientID: parseInt(`${this.editPerson}`)})\n        const {\n            ancestryDistrict,\n            ancestryTA,\n            ancestryVillage,\n            currentDistrict,\n            currentTA\n        } = this.patient.getAddresses()\n        this.editPersonData = {\n            'given_name': this.patient.getGivenName(),\n            'family_name': this.patient.getFamilyName(),\n            'gender': this.patient.getGender(),\n            'birthdate': this.patient.getBirthdate(),\n            'home_district': ancestryDistrict,\n            'home_traditional_authority': ancestryTA,\n            'home_village': ancestryVillage,\n            'current_district': currentDistrict,\n            'current_traditional_authority': currentTA,\n            'cell_phone_number': this.patient.getPhoneNumber(),\n            'landmark': this.patient.getClosestLandmark()\n        }\n        this.presets = this.editPersonData\n        this.skipSummary = true\n        if(this.personAttribute) {\n            this.activeField = this.personAttribute\n            this.fieldComponent = this.activeField\n        }\n    },\n    async onFinish(form: Record<string, Option> | Record<string, null>, computedData: any) {\n        if (!this.isEditMode()) {\n            return this.create(form, computedData)\n        } else {\n            return this.update(computedData)\n        }\n    },\n    async create(_: any, computedData: any) {\n        let person: any = PersonField.resolvePerson(computedData)\n        person = this.presets.nationalIDStatus == \"true\" ? this.appendNationalIDData(person) : person\n        const attributes: Array<any> = this.resolvePersonAttributes(computedData)\n        const registration: any = new PatientRegistrationService()\n        const patient = new Patientservice((await registration.registerPatient(person, attributes)))\n        const patientID = registration.getPersonID()\n\n        Store.set('ACTIVE_PATIENT', patient) // update patient store\n \n        if(this.presets.nationalIDStatus == \"true\"){ \n            this.patient = patient\n            await this.patient.updateMWNationalId(this.presets.malawiNationalID)\n        }\n\n        if (this.app.onRegisterPatient) {\n            const exit = await this.app.onRegisterPatient(\n                patientID, person, attributes, this.$router, this.$route\n            )\n            if (exit) return\n        }\n        if (person.relationship === 'Yes') {\n            return this.$router.push(`/guardian/registration/${patientID}`)\n        }\n        await nextTask(patientID, this.$router)\n    },\n    appendNationalIDData(person: any){\n       return Object.assign(person,{\n            'given_name': this.presets.given_name,\n            'family_name': this.presets.family_name,\n            'gender': this.presets.gender,\n            'birthdate': this.presets.birthdate,\n            'birthdate_estimated': false\n        })\n    },\n    async update(computedData: any) {\n        const person: any = PersonField.resolvePerson(computedData)\n        const update = new PatientRegistrationService()\n\n        update.setPersonID(this.editPerson)\n        await update.updatePerson(person)\n        for(const attr in person) {\n            if (attr in this.editPersonData) {\n                this.editPersonData[attr] = person[attr]\n            }\n        }\n        Store.invalidate('ACTIVE_PATIENT')\n        if(!this.personAttribute) return this.fieldComponent = 'edit_user'\n        this.$router.back()\n    },\n    editConditionCheck(attributes=[] as Array<string>): boolean {\n        if (this.isEditMode() && !attributes.includes(this.activeField)) {\n            return false\n        }\n        return true\n    },\n    async confirmPatient() {\n        // Attempt to assign or reassign a patient's NPID if they dont have a valid one\n        if (this.ddeEnabled && (!this.patient.getDocID() \n            || (this.patient.getDocID() && this.patient.getNationalID().match(/unknown/i)))) {\n                try {\n                    await this.patient.assignNpid()\n                    await this.patient.printNationalID()\n                    await delayPromise(300)\n               } catch (e) {\n                    toastDanger(`Failed to assign new NPID: ${e}`)\n                }\n        }\n        this.$router.push(`/patients/confirm?person_id=${this.patient.getID()}`)\n    },\n    resolvePersonAttributes(form: Record<string, Option> | Record<string, null>) {\n        return Object.values(form)\n                    .filter((d: any) => isPlainObject(d) && 'personAttributes' in d)\n                    .map(({personAttributes}: any) => personAttributes)\n    },\n    mapToOption(listOptions: Array<string>): Array<Option> {\n        return listOptions.map((item: any) => ({ label: item, value: item }))\n    },\n    givenNameField(): Field {\n        const name: Field = PersonField.getGivenNameField()\n        name.condition = () => this.editConditionCheck(['given_name']) && this.presets.nationalIDStatus != \"true\"\n        name.defaultValue = () => this.presets.given_name\n        return name\n    },\n    familyNameField(): Field {\n        const name: Field = PersonField.getFamilyNameField()\n        name.condition = () => this.editConditionCheck(['family_name']) && this.presets.nationalIDStatus != \"true\"\n        name.defaultValue = () => this.presets.family_name\n        return name\n    },\n    genderField(): Field {\n        const IS_ANC_APP = this.app.applicationName === 'ANC'\n        const IS_CXCA = this.app.applicationName === 'CxCa'\n        const gender: Field = PersonField.getGenderField()\n        gender.requireNext = this.isEditMode()\n        gender.defaultValue = () => this.presets.gender\n        gender.condition = () => {\n            if (!this.isEditMode() && (IS_ANC_APP || IS_CXCA)) {\n                return false\n            }\n            return this.editConditionCheck(['gender']) && this.presets.nationalIDStatus != \"true\"\n        }\n        if ((IS_ANC_APP || IS_CXCA) && !this.isEditMode()) {\n            gender.defaultOutput = () => ({ label: 'Female', value: 'F' })\n            gender.defaultComputedOutput = () => ({ person: 'F' })\n        } \n\n        gender.beforeNext = async (data: Option) => {\n            /**\n             * Provide warning when changing gender in edit mode\n            */\n            const newGender = data.value\n            const oldGender = this.presets.gender\n            if (this.isEditMode() && newGender != oldGender) {\n                const action = await infoActionSheet(\n                    'Warning',\n                    `Changing gender from ${oldGender} to ${newGender}`,\n                    \"This change will cause data inconsistency and will affect alot of Reports.\",\n                    [\n                        {\n                            name: 'Cancel', slot: 'start'\n                        },\n                        {\n                            name: 'Change gender', slot: 'end', color: 'danger'\n                        }\n                    ]\n                )\n                return action === 'Change gender'\n            }\n            return true\n        }\n        return gender\n    },\n    dobFields(): Array<Field> {\n        const dobConfig = PersonField.getDobConfig()\n        dobConfig.defaultValue = () => this.presets.birthdate\n        dobConfig.condition = () => this.editConditionCheck([\n            'year_birth_date', 'month_birth_date', 'day_birth_date'\n        ])\n        // ANC validation to ensure that we are not registering\n        // Non child bearing youngsters\n        if (this.app.applicationName === 'ANC') {\n            const sdate = Patientservice.getSessionDate()\n            const childBearingAgeInYrs = 12\n            dobConfig.maxDate = () => dayjs(sdate)\n                .subtract(childBearingAgeInYrs, 'years')\n                .format(STANDARD_DATE_FORMAT)\n        }\n        return generateDateFields(dobConfig)\n    },\n    homeRegionField(): Field {\n        const region: Field = PersonField.getHomeRegionField()\n        region.condition = () => this.editConditionCheck(this.homeAddressAttributes)\n        return region\n    },\n    homeDistrictField(): Field {\n        const district: Field = PersonField.getHomeDistrictField()\n        district.condition = () => this.editConditionCheck(this.homeAddressAttributes)\n        return district\n    },\n    homeTAField(): Field {\n        const homeTA: Field = PersonField.getHomeTaField()\n        homeTA.condition = (form: any) => this.editConditionCheck(this.homeAddressAttributes)\n            && !form.home_region.label.match(/foreign/i)\n        return homeTA\n    },\n    homeVillageField(): Field {\n        const homeVillage: Field = PersonField.getHomeVillageField()\n        homeVillage.condition = (form: any) => this.editConditionCheck(this.homeAddressAttributes)\n            && !form.home_region.label.match(/foreign/i)\n        return homeVillage\n    },\n    currentRegionField(): Field {\n        const currentRegion: Field = PersonField.getCurrentRegionField()\n        currentRegion.condition = () => this.editConditionCheck(this.currentAddressAttributes)\n        return currentRegion\n    },\n    currentDistrictField(): Field {\n        const currentDistrict: Field = PersonField.getCurrentDistrictField()\n        currentDistrict.condition = () => this.editConditionCheck(this.currentAddressAttributes)\n        return currentDistrict\n    },\n    currentTAField(): Field {\n        const currentTA: Field = PersonField.getCurrentTAfield()\n        currentTA.condition = (form: any) => this.editConditionCheck(this.currentAddressAttributes)\n            && !form.current_region.label.match(/foreign/i)\n        return currentTA\n    },\n    currentVillage(): Field {\n        const currentVillage: Field = PersonField.getCurrentVillageField()\n        currentVillage.condition = (form: any) => this.editConditionCheck(this.currentAddressAttributes)\n            && !form.current_region.label.match(/foreign/i)\n        return currentVillage\n    },\n    cellPhoneField(): Field {\n        const cellPhone: Field = PersonField.getCellNumberField()\n        cellPhone.condition = () => this.editConditionCheck(['cell_phone_number'])\n        cellPhone.defaultValue = () => this.presets.cell_phone_number\n        return cellPhone\n    },\n    facilityLocationField(): Field {\n       const facility: Field = PersonField.getFacilityLocationField()\n       facility.condition = (form: any) => [\n           'Drug Refill',\n           'External consultation'\n       ].includes(form.patient_type.value)\n       return facility\n    },\n    landmarkFields(): Field[] {\n        const landmarks: Field[] = PersonField.getLandmarkFields()\n        landmarks[0].condition = () => this.editConditionCheck(['default_landmarks'])\n        return landmarks\n    },\n    patientTypeField(): Field {\n        return {\n            id: 'patient_type',\n            helpText: 'Type of patient',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['patient_type'])\n                && this.app.applicationName === 'ART',\n            validation: (val: any) => Validation.required(val),\n            options: () => PatientTypeService.getPatientTypes()\n        }\n    },\n    occupationField(): Field {\n        return {\n            id: 'occupation',\n            helpText: 'Occupation',\n            type: FieldType.TT_SELECT,\n            init: async () => {\n               this.isMilitarySite = await GLOBAL_PROP.militarySiteEnabled()\n               return true \n            },\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['occupation']) && this.isMilitarySite,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.mapToOption([\n                'Military',\n                'Civilian'\n            ])\n        }\n    },\n    regimentField(): Field {\n        return {\n            id: 'person_regiment_id',\n            helpText: 'Regiment ID',\n            type: FieldType.TT_TEXT,\n            computedValue: ({value}: Option) => ({\n                personAttributes: {\n                    'person_attribute_type_id': 35,\n                    'value': value\n                }\n            }),\n            condition: (form: any) => this.editConditionCheck(['person_regiment_id']) && form.occupation && form.occupation.value.match(/Military/i),\n            validation: (val: any) => Validation.required(val)\n        }\n    },\n    rankField(): Field {\n        return {\n            id: 'rank',\n            helpText: 'Rank',\n            type: FieldType.TT_SELECT,\n            validation: (val: any) => Validation.required(val),\n            computedValue: ({value}: Option) => ({\n                personAttributes: {\n                    'person_attribute_type_id': 36,\n                    'value': value\n                }\n            }),\n            condition: (form: any) => this.editConditionCheck(['rank']) && form.occupation && form.occupation.value.match(/Military/i),\n            options: () => this.mapToOption([\n                'First Lieutenant',\n                'Captain',\n                'Major',\n                'Lieutenant Colonel',\n                'Colonel',\n                'Brigadier General',\n                'Lieutenant General',\n                'General',\n                'Private',\n                'Corporal',\n                'Lance Corporal',\n                'Seargent',\n                'Staff Seargent',\n                'Warrant Officer class 1',\n                'Warrant Officer class 2'\n            ])\n        }\n    },\n    dateJoinedMilitaryFields(): Array<Field> {\n        return generateDateFields({\n            id: 'person_date_joined_military',\n            helpText: 'Joined Military',\n            required: true,\n            condition: (form: any) =>  this.editConditionCheck([\n                'year_person_date_joined_military',\n                'month_person_date_joined_military',\n                'day_person_date_joined_military'\n            ]) && form.occupation && form.occupation.value.match(/Military/i),\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => WorkflowService.getSessionDate(),\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => ({\n                date,\n                personAttributes : {\n                    'person_attribute_type_id': 37, 'value': date\n                }\n            })\n        })\n    },\n    relationshipField(): Field {\n        const IS_CXCA = this.app.applicationName === 'CxCa'\n        const OPD = this.app.applicationName === 'OPD'\n        const Registration = this.app.applicationName === 'Registration'\n        return {\n            id: 'relationship',\n            helpText: 'Register guardian?',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['relationship']) && !IS_CXCA && !OPD && !Registration,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.mapToOption(['Yes', 'No'])\n        }\n    },\n    searchResultField(): Field {\n        return {\n            id: 'results',\n            helpText: 'Search results',\n            type: FieldType.TT_PERSON_RESULT_VIEW,\n            init: async () => {\n                if (!this.isEditMode()) { \n                    this.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n                }\n                return true\n            },\n            dynamicHelpText: (form: any) => {\n                return this.presets.nationalIDStatus == \"true\" ?\n                 `Search results for \"${this.presets.given_name} ${this.presets.family_name} | ${this.presets.gender}\"` : \n                 `Search results for \"${form.given_name.value} ${form.family_name.value} | ${form.gender.label}\"`;\n            },\n            appearInSummary: () => false,\n            condition: () => !this.isEditMode(),\n            validation: (val: Option) => Validation.required(val),\n            options: async (form: any) => {\n                let payload;\n                if(this.presets.nationalIDStatus == \"true\"){\n                    this.presets.gender = this.presets.gender == \"Male\" ? \"M\" : \"F\"\n                    payload  = {\n                        'given_name': this.presets.given_name,\n                        'family_name': this.presets.family_name,\n                        'gender': this.presets.gender\n                    } \n                }\n                else{\n                    payload = {\n                        'given_name': form.given_name.value,\n                        'family_name': form.family_name.value,\n                        'gender': form.gender.value\n                    }\n                }\n                // DDE enabled search\n                if (this.ddeEnabled) {\n                    const patients = await this.ddeInstance.searchDemographics(payload)\n                    return patients.map((item: any) => {\n                        const itemData = PersonField.getPersonAttributeOptions(item)\n                        itemData.other.options.push({\n                            label: 'Patient Type',\n                            value: item.patient_type\n                        })\n                        itemData.other.options.push({\n                            label: 'Doc ID',\n                            value: item.doc_id\n                        })\n                        return itemData\n                    })\n                }\n                // Regular search\n                const patients = await Patientservice.search(payload);\n                return patients.map((item: any) => PersonField.getPersonAttributeOptions(item))\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Edit Search',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldComponent = 'given_name'\n                        }\n                    },\n                    {\n                        name: 'New Patient',\n                        slot: 'end',\n                        onClick: () => {\n                            this.presets.nationalIDStatus != \"true\"?\n                            this.fieldComponent = 'year_birth_date':\n                            this.fieldComponent = 'home_region'\n                        }\n                    },\n                    {\n                        name: 'Continue',\n                        color: 'success',\n                        slot: 'end',\n                        state: {\n                            disabled: {\n                                default: () => true,\n                                onValue(_: any,form: any) {\n                                    return isEmpty(form.results)\n                                }\n                            }\n                        },\n                        onClick: (form: any) => {\n                            return this.$router.push(`/patients/confirm?person_id=${form.results.value}`)\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    possibleDuplicatesField(): Field {\n        let createdPerson: any = {}\n        let duplicatePatients: any = {}\n        return {\n            id: 'possible_duplicates',\n            helpText: 'Possible Duplicate(s)',\n            type: FieldType.TT_PERSON_MATCH_VIEW,\n            condition: async (_: any, c: any) => {\n                if (this.ddeEnabled && !this.editPerson) {\n                    createdPerson = PersonField.resolvePerson(c)\n                    duplicatePatients = await this.ddeInstance\n                        .checkPotentialDuplicates(createdPerson)\n                    return duplicatePatients.length >= 1\n                }\n                return false\n            },\n            options: async () => {\n                const toDate = (date: string) => HisDate.toStandardHisDisplayFormat(date)\n                return duplicatePatients.map(({ score, person }: any) => {\n                    const name = `${person.given_name} ${person.family_name}`\n                    return {\n                        label: name,\n                        value: person.patient_id,\n                        other: {\n                            score: `${score * 100}%`,\n                            newPerson: createdPerson,\n                            foundPerson: person,\n                            comparisons: [\n                                [\n                                    'Name',\n                                    `${createdPerson.given_name} ${createdPerson.family_name}`,\n                                    `${person.given_name} ${person.family_name}`\n                                ],\n                                [\n                                    'Gender',\n                                    createdPerson.gender,\n                                    person.gender\n                                ],\n                                [\n                                    'Birthdate',\n                                    toDate(createdPerson.birthdate),\n                                    toDate(person.birthdate)\n                                ],\n                                [\n                                    'Home District',\n                                    createdPerson.home_district,\n                                    person.home_district\n                                ],\n                                [\n                                    'Home TA',\n                                    createdPerson.home_traditional_authority,\n                                    person.home_traditional_authority\n                                ]\n                            ]\n                        }\n                    }\n                })\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Not Duplicate',\n                        slot: 'start',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onValue: (_: any, f: any) => !isEmpty(f.possible_duplicates)\n                            }\n                        },\n                        onClick: () => {\n                            this.fieldComponent = '_NEXT_FIELD_'\n                        }\n                    },\n                    {\n                        name: 'Confirm',\n                        slot: 'end',\n                        color: 'warning',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onValue: (_: any, f: any) => !isEmpty(f.possible_duplicates)\n                            }\n                        },\n                        onClick: (form: any) => {\n                            this.$router.push(`/patients/confirm?person_id=${form.possible_duplicates.value}`)\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    personIndexField(): Field {\n        return {\n            id: 'edit_user',\n            helpText: 'Edit Demographics',\n            type: FieldType.TT_TABLE_VIEWER,\n            init: async () => {\n                if (this.isEditMode()) {\n                    this.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n                }\n                return true\n            },\n            condition: () => this.isEditMode(),\n            options: async () => {\n                const editButton = (attribute: string) => ({\n                    name: 'Edit',\n                    type: 'button',\n                    action: () => {\n                        this.activeField = attribute\n                        this.fieldComponent = this.activeField\n                    }\n                })\n                const columns = ['Attributes', 'Values', 'Edit']\n                const rows = [\n                    ['Given Name', this.editPersonData.given_name, editButton('given_name')],\n                    ['Family Name', this.editPersonData.family_name, editButton('family_name')],\n                    ['Gender', this.editPersonData.gender,  editButton('gender')],\n                    ['Birthdate', HisDate.toStandardHisDisplayFormat(this.editPersonData.birthdate),  editButton('year_birth_date')],\n                    ['Cell Phone Number', this.editPersonData.cell_phone_number, editButton('cell_phone_number')],\n                    ['Home District', this.editPersonData.home_district, editButton('home_region')],\n                    ['Home TA', this.editPersonData.home_traditional_authority,  editButton('home_region')],\n                    ['Home Village', this.editPersonData.home_village,  editButton('home_region')],\n                    ['Current district',this.editPersonData.current_district, editButton('current_region')],\n                    ['Current T/A', this.editPersonData.current_traditional_authority, editButton('current_region')],\n                    ['Landmark', this.editPersonData.landmark, editButton('default_landmarks')],\n                ]\n                // Tag rows with empty values\n                const emptySets: any = {indexes: [], class: 'his-empty-set-color'}\n                rows.forEach((r: any, i: number) => {\n                    if (isValueEmpty(r[1])) \n                        emptySets.indexes.push(i)\n                })\n                this.hasIncompleteData = emptySets.indexes.length >= 1\n                return [{\n                    label: '', \n                    value: '',\n                    other: {\n                        rows,\n                        columns,\n                        rowColors: [emptySets]\n                    }\n                }]\n            },\n            config: {\n                footerBtns: [\n                    /**\n                     * Custom button that Appears when DDE wants to\n                     * Reassign a patient with incomplete data\n                    */\n                    {\n                        name: 'Reassign',\n                        slot: 'end',\n                        color: 'success',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onload: () => (\n                                    this.ddeEnabled\n                                    && this.ddeIsReassign\n                                    && !this.hasIncompleteData\n                                )\n                            }\n                        },\n                        onClick: async () => {\n                            try {\n                                await this.ddeInstance.reassignNpid(this.ddeDocID, this.editPerson)\n                                await this.ddeInstance.printNpid()\n                                this.$router.push(`/patients/confirm?person_id=${this.editPerson}`)\n                            } catch(e) {\n                                toastWarning(`${e}`)\n                            }\n                        }\n                    },\n                    /**\n                     * Custom button that redirects to patient confirmation page\n                     */\n                    {\n                        name: 'Confirm',\n                        slot: 'end',\n                        color: 'warning',\n                        state: {\n                            visible: {\n                                onload: () => !this.ddeIsReassign && !this.hasIncompleteData\n                            }\n                        },\n                        onClick: async () => this.confirmPatient()\n                    }\n                ],\n                hiddenFooterBtns: ['Clear', 'Next']\n            }\n        }\n    },\n    patientRegistrationSummary(): Field \n    {\n        return{\n          id: \"registration_summary\",\n          helpText: \"Summary\",\n          type: FieldType.TT_SUMMARY,\n          condition: () => !this.skipSummary,\n          options: (f: any, c: any) => {  \n                return this.buildRegistrationSummary(c)\n          },\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          }\n        }\n    },\n    buildRegistrationSummary(data: any){\n        data = Object.keys(data).map(function(key, index) {\n            if(data[key] != null){\n                return {\n                'label': key.replace(/_/g,' ').replace(/(^\\w|\\s\\w)/g, m => m.toUpperCase()),\n                'value': key == \"birth_date\" ? data[key]['date'] : data[key]['person']\n                } \n            }\n        });\n        data = data.filter((x: any)=>{\n            return x != undefined\n        })\n\n       const nationalIDData = [\n            {\n                'label': \"Given Name\",\n                'value': this.presets.given_name\n            },\n            {\n                'label': \"Family Name\",\n                'value': this.presets.family_name\n            },\n            {\n                'label': \"Gender\",\n                'value': this.presets.gender\n            },\n            {\n                'label': \"Birthdate\",\n                'value': this.presets.birthdate\n            },\n            {\n                'label': \"Malawi National ID\",\n                'value': this.presets.malawiNationalID\n            } \n        ]\n        if(this.presets.nationalIDStatus == \"true\")\n            data = nationalIDData.concat(data)\n\n        return data\n    }\n  }\n})\n","import { render } from \"./PatientRegistration.vue?vue&type=template&id=38dcc39e&ts=true\"\nimport script from \"./PatientRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./PatientRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}