{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/apps/ART/services/stock_service.ts","webpack:///./src/apps/ART/services/dispensation_service.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/apps/ART/views/encounters/Consultation.vue?11b7","webpack:///./src/components/DataViews/VLReminderModal.vue?3776","webpack:///./src/components/DataViews/VLReminderModal.vue","webpack:///./src/components/DataViews/VLReminderModal.vue?a14d","webpack:///./src/apps/ART/services/lab_service.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?e8f1","webpack:///./src/components/DataViews/SideEffectsModal.vue","webpack:///./src/components/DataViews/SideEffectsModal.vue?d5c5","webpack:///./src/apps/ART/views/encounters/Consultation.vue","webpack:///./src/apps/ART/views/encounters/Consultation.vue?3980","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/components/DataViews/VLReminderModal.vue?947f","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?ca65","webpack:///./src/apps/ART/services/adherence_service.ts","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue?fe45"],"names":["DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","StockService","Service","constructor","super","drugId","stock","this","getJson","length","reduce","accum","pharm","current_quantity","DRUG_PACK_SIZES","DispensationService","AppEncounterService","patientID","providerID","drugHistory","currentDrugOrder","useDrugManagement","setIsDrugManagementEnabled","isEnabled","ART_PROP","drugManagementEnabled","getDrugHistory","getCurrentOrder","buildDispensations","orderId","tabs","totalPacks","dispensations","i","push","date","quantity","saveDispensations","postJson","getProgramID","void","res","DrugOrderService","getDrugOrderHistory","e","console","warn","getDrugOrders","drugs","map","async","d","fetchAvailableDrugStock","drug","drug_id","Promise","all","getDrugPackSizes","calcCompletePack","units","drugOrderBarcodes","barcodes","sort","a","b","parseInt","completePack","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","_component_ion_title","_component_ion_toolbar","_component_ion_header","_component_ion_content","_component_ion_button","_component_ion_footer","_createElementBlock","_Fragment","_createVNode","default","_withCtx","_createTextVNode","_","style","overflowY","background","_createElementVNode","_toDisplayString","artStartDate","monthsOnART","lastOrder","currentRegimen","regimenStartDate","slot","color","size","onClick","$event","closeModal","defineComponent","name","props","VLData","type","Object","required","HisDate","toStandardHisDisplayFormat","earliest_start_date","period_on_art","last_order_date","current_regimen","date_started","methods","val","modalController","dismiss","data","content","components","IonHeader","IonToolbar","IonTitle","IonContent","IonFooter","IonButton","__exports__","ARTLabService","milestone","concept","getConceptID","coded","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","_hoisted_2","class","_hoisted_3","_hoisted_4","_hoisted_5","_component_ion_label","_component_ion_item","_component_ion_list","_component_ion_col","_component_ion_radio","_component_ion_radio_group","_component_ion_row","_component_ion_grid","height","_renderList","sides","index","key","selectSideEffect","detail","_normalizeStyle","activeIndex","label","modelValue","value","drug_inventory_id","_createCommentVNode","postSideEffects","disabled","allSelected","sideEffects","Array","computed","filter","side","mounted","extendedLabsEnabled","appActivities","specimens","reasons","IonLabel","IonList","IonItem","IonRadioGroup","IonRow","mixins","AdherenceMixinVue","HisStandardForm","currentWeight","weightTrail","customRegimens","labOrders","weightLossPercentageNum","lostTenPercentBodyWeight","CxCaEnabled","CxCaStartAge","CxCaMaxAge","DueForCxCa","currentlyPregnant","patientHitMenopause","hasPregnancyObsToday","autoSelect3HP","labOrderFieldContext","consultation","prescription","dispensation","completed3HP","hasTbHistoryObs","allergicToSulphur","TBSuspected","presentedTBSymptoms","askAdherence","lastDrugsReceived","sideEffectsHistory","onPermanentFPMethods","reasonForDecliningTPTObs","malawiSideEffectReasonObs","otherSideEffectReasonObs","wasTransferredIn","dateStartedArt","clientHadAHysterectomy","isNoneClientPatient","tptStatus","customDrugs","watch","ready","handler","ConsultationService","PrescriptionService","getFields","immediate","f","computedData","encounter","createEncounter","toastWarning","computedObs","resolveObs","secondaryObs","isEmpty","savedObs","saveObservationList","drugObs","saveAdherence","toastSuccess","refer_to_clinician","gotoPatientDashboard","nextTask","formData","drugFilters","tptHistory","routine_tb_therapy","RegimenService","getCustomIngridients","match","includes","other","receivedArvs","getFirstValueCoded","transferLetterObs","getFirstObs","toStandardHisFormat","obs_datetime","value_coded","getDate","dateStarted","getFirstValueDatetime","action","infoActionSheet","vals","ProgramService","getPatientVLInfo","eligibile","modal","create","component","VLReminderModal","backdropDismiss","cssClass","componentProps","present","onDidDismiss","launchOrderSelection","waitForVL","orderService","observations","buildDefferedOrder","canScreenCxCa","age","patient","getAge","isFemale","pregnancyEligible","isChildBearing","showCurrentContraceptionMethods","isPregnant","isANCclient","showNewContraceptionMethods","isOnTubalLigation","pregnant_breastfeeding","inArray","p","current_fp_methods","listData","isChecked","infoAlert","noneIndex","findIndex","familyPlanningMethods","currentIndex","disablePrescriptions","buildMedicationOrders","options","o","buildValueCoded","priscribed","medications","declinedFPM","fp_methods","riskOfUnplannedPregnancy","reason_for_no_fpm","showOtherSideEffects","side_effects","hasTBSymptoms","tb_side_effects","isTBSuspect","toString","isAllergicToSulphur","attr","sideEffectReasons","getSideEffectsReasons","undefined","drugInducedConcept","ConceptService","getCachedConceptID","isOtherReason","reason","r","allYes","s","SideEffectsModalVue","getFPMethods","exclusionList","preChecked","getFamilyPlanningMethods","filtered","method","getOptions","preValues","preValue","find","values","yesNoOptions","getContraindications","contraIndications","getConceptsByCategory","getOtherContraindications","lastElement","pop","getTBSymptoms","getReasonsForNoCxcaOptions","c","runAppendOptionParams","prechecked","checkedOptions","appendOptionParams","appendedOptions","option","didCompleted3HP","patientOnTpt","test","tpt","tptAutoSelectionMode","curOption","is3HPorTPT","ipt3HPConflict","checkedDrugs","item","noTpTPresent","every","Boolean","optionsActionSheet","role","buildValueText","selection","medicationOrderOptions","completedTpt","everTakenTpt","disableOption","text","description","show","toOption","tb_treatment","completed","OrderService","formatLabs","Store","get","getSuspendedProgram","id","proxyID","helpText","FieldType","TT_MULTIPLE_SELECT","init","isGuardian","getClient","PatientTypeService","isDrugRefillPatient","Number","getRecentWeight","getTptTreatmentStatus","validation","Validation","computedValue","v","tag","obs","onValueUpdate","list","on3HPValueUpdate","cd","l","condition","exitsForm","generateDateFields","getTransferInStatus","getDateStartedArt","minDate","maxDate","computeValue","setDate","buildValueDate","estimation","allowUnknown","getARVs","config","showKeyboard","TT_NEXT_VISIT_INTERVAL_SELECTION","nextAppointment","intervals","setNextVisitInterval","calculateDateFromInterval","TT_DRUG_TRANSFER_IN","validateSeries","pillsBrought","some","drugID","buildObs","drug_interval","child","date_last_received_arvs","previous_arvs_received","drugName","prevValue","qty","rmndr","TT_LAB_ORDERS","getVlLabData","unload","checkVLReminder","noGivenResults","result_given","alertConfirmation","enc","result","resultIds","encounterID","encounter_id","saveObs","resultID","onload","fieldContext","printOrder","orderID","PatientPrintoutService","printLabOrderLbl","hiddenFooterBtns","footerBtns","visible","getTLObs","TT_MULTIPLE_YES_NO","anyEmpty","concat","TT_WEIGHT_CHART","getWeightHistory","getWeightLossPercentageFromTrail","bmi","getBMI","x","y","weight","TT_TEXT_BANNER","mapStrToOptions","disableFPMethods","checked","TT_SELECT","offer_contraceptives","cervicalCancerScreeningEnabled","start","end","cervicalCancerScreeningAgeBounds","clientDueForCxCa","clientHasHadAHysterectomy","offer_cxca","getBirthdate","getSessionDate","reason_for_no_cxca","isEstimate","buildValueDateEstimated","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","TT_DATA_TABLE","getDrugSideEffects","columns","table","thTxt","rows","keys","k","tdDate","td","drug_induced","cur","getPreviousDrugs","beforeNext","buildSideEffectObs","onValue","checkIfWeightLossIsControlled","onConditionFalse","TT_NOTE","other_side_effects","on_tb_treatment","defaultValue","hasTreatmentHistoryObs","TT_ADHERENCE_INPUT","getTptDrugs","date_started_tpt","titles","getFacilities","isFilterDataViaApi","log","yesNoUnknownOptions","getAdherenceFields","UserService","isNurse","currentOptions","onClickComponentEvents","refreshOptions","btnEvent","btnOutput","getYearField","showUnknown","primaryFunctions","appearInSummary","TT_TEXT","customKeyboard","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","getDefaultDate","form","field","datePart","year","month","day","split","validateMinMax","min","Date","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","buildHelpTextDate","part","parts","partValues","dpart","wl","join","updateHelpTextOnValue","StandardValidations","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","keyboardActions","valueEstimateCondition","estimateType","conditions","ageEstimateRegex","dayjs","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","AdherenceService","lastDrugs","lastReceiptDate","receiptDate","order","start_date","htnDrugs","BPManagementService","htnDrugReferences","getReceiptDate","getLastDrugs","receivedDrugsBefore","buildPillCountObs","pillCount","buildValueNumber","adherence","isAdherenceGood","calculateAdherence","given","pills","expected","Math","round","calculateExpected","equivalentDailyDose","startDate","frequency","timeUnit","daysGone","calcTimeElapsed","parseFloat","date1","diff","calculateUnaccountedOrMissed","actual","exp","EncounterMixinVue","askReasonForPoorAdherence","calculationAgreementObs","buildAdherenceReport","lastVisit","daysElapsed","timeElapse","rowColors","indexes","cellColors","forEach","formatFrequency","expectedPills","calcPillsExpected","adherenceStatus","unAccountedDoses","equivalent_daily_dose","row","checkDrugsBefore","loadPreviousDrugs","empty","buildAdherenceObs","order_id","fdata","pills_brought","TT_TABLE_VIEWER"],"mappings":"gHAAA,wZAAO,MAAMA,EAAiB,CAC1B,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,OACX,CAAC,GAAK,OAAQ,KAELC,EAAgB,CACzB,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,OACX,CAAC,QAAU,IAAK,MAEPC,EAAwB,CACjC,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,OAAQ,IAAK,UAGLC,EAAmB,CAC5B,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAK,IAAK,KAGFC,EAAU,CACnB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC/B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,UACpC,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,GAAK,IAAK,KAGFC,EAAgB,CACzB,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,GAAK,IAAK,KAGFC,EAAkB,CAC3B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC/B,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MACnC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,OAGJC,EAAkB,CAC3B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAGhCC,EAAY,CACrB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,IAAK,IAAK,QAGpCC,EAA4B,CACrC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAEhCC,EAAoB,CAC7B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OACnD,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,SACnD,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,QACnD,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,UAG1CC,EAAkB,CAC3B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,QAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OAAQ,W,kJC7E1C,MAAOC,UAAqBC,OAC9BC,cACIC,QAGJ,qCAAqCC,GACjC,MAAMC,QAAcC,KAAKC,QAAQ,iBAAkB,CAAE,QAAWH,IAChE,GAAIC,GAASA,EAAMG,OAAS,EACxB,OAAOH,EAAMI,OAAO,CAACC,EAAeC,IAAeD,EAAQC,EAAMC,iBAAkB,I,gBCLxF,MAAMC,EAAuC,CAChD,GAAM,CAAE,IACR,GAAM,CAAE,IACR,GAAM,CAAE,IACR,GAAM,CAAE,GAAI,GAAI,GAAI,KACpB,GAAM,CAAE,IACR,GAAM,CAAE,IACR,GAAM,CAAE,KACR,GAAM,CAAE,IACR,GAAM,CAAE,KACR,IAAO,CAAE,GAAI,GAAI,IACjB,IAAO,CAAE,GAAI,GAAI,IACjB,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,GAAI,GAAI,IACjB,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,GAAI,GAAI,IACjB,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,GAAG,GAAG,IACf,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,IACT,IAAO,CAAE,GAAI,IACb,KAAQ,CAAE,GAAG,GAAG,IAChB,KAAQ,CAAE,IACV,KAAQ,CAAE,IACV,KAAQ,CAAE,IACV,KAAQ,CAAC,EAAG,EAAG,KAGb,MAAOC,UAA4BC,OAIrCb,YAAYc,EAAmBC,GAC3Bd,MAAMa,EAAW,GAAIC,GAAW,yIAChCX,KAAKY,YAAc,GACnBZ,KAAKa,iBAAmB,GACxBb,KAAKc,mBAAoB,EAG7BC,2BAA2BC,GACvBhB,KAAKc,kBAAoBE,EAG7B,kCACIhB,KAAKc,wBAA0BG,OAASC,wBAG5CC,iBACI,OAAOnB,KAAKY,YAGhBQ,kBACI,OAAOpB,KAAKa,iBAGhBQ,mBAAmBC,EAAiBC,EAAcC,GAC9C,MAAMC,EAAgB,GACtB,IAAI,IAAIC,EAAE,EAAGA,EAAIF,EAAYE,IACzBD,EAAcE,KAAK,CACf,cAAiBL,EACjBM,KAAM5B,KAAK4B,KACXC,SAAWN,EAAOC,IAG1B,OAAOC,EAGXK,kBAAkBL,GACd,OAAOhB,OAAoBsB,SAAS,iBAAkB,CAClDN,gBACA,WAAchB,OAAoBuB,iBAI1C,gBAAgBV,GACZ,OAAOb,OAAoBwB,KAAK,kBAAkBX,EAAW,IAGjE,wBACI,IACI,MAAMY,QAAYC,OAAiBC,oBAAoBpC,KAAKU,WACxDwB,IAAKlC,KAAKY,YAAcsB,GAC9B,MAAOG,GACLC,QAAQC,KAAKF,IAIrB,6BACI,MAAMH,QAAYC,OAAiBK,cAAcxC,KAAKU,WACtD,GAAIwB,EAAK,CACL,GAAIlC,KAAKc,kBAAmB,CACxB,MAAM2B,EAAQP,EAAIQ,IAAIC,UAClBC,EAAE,yBAA2BlD,EAAamD,wBAAwBD,EAAEE,KAAKC,SAClEH,IAGX,YADA5C,KAAKa,uBAAyBmC,QAAQC,IAAIR,IAG9CzC,KAAKa,iBAAmBqB,GAIhCgB,iBAAiBpD,GACb,OAAIA,KAAUS,EACHA,EAAgBT,GAEpB,CAAC,GAAI,GAAI,IAIpBqD,iBAAiBL,EAAWM,GAExB,MAAMC,EAAoBP,EAAKQ,SAASC,KAAK,CAACC,EAAQC,IAAWD,EAAEjC,KAAOkC,EAAElC,MAC5E,GAAgC,GAA5B8B,EAAkBnD,QAAwB,GAATkD,EAAc,OAAOA,EAC1D,IAAK,MAAM1B,KAAK2B,EAAmB,CAC/B,MAAM,KAAE9B,GAAS8B,EAAkB3B,GACnC,GAAIgC,SAASnC,IAAS6B,EAAO,OAAO7B,EAExC,MAAMoC,EAAeD,SAASL,EAAkBA,EAAkBnD,OAAS,GAAGqB,MAC9E,OAAOoC,K,6DCtIf,gSAeO,MAAMC,EAAiB,CAC1B1E,OACA,CACI,CAAC,GAAI,YAIA2E,EAAe,CACxB1E,OACA,CACI,CAAC,YAII2E,EAAuB,CAChC3E,OACA,CACI,CAAC,SAAU,aAIN4E,EAAwB,CACjC5E,OACA,CACI,CAAC,OACD,CAAC,SAAU,aAIN6E,EAA6B,CACtC7E,OACA,CACI,CAAC,YAII8E,EAAU,CACnB9E,OACA,CACI,CAAC,UAAW,UACZ,CAAC,SAAU,SAIN+E,EAAe,CACxB9E,OACA,CACI,CAAC,aAII+E,EAAS,CAClB9E,OACA,CACI,CAAC,MAAO,UACR,CAAC,SAAU,WACX,CAAC,GAAI,WAIA+E,EAAS,CAClB9E,OACA,CACI,CAAC,GAAI,UACL,CAAC,OAAQ,OACT,CAAC,QAAS,aAOL+E,EAAc,CACvB,CACIC,IAAK,MACLC,SAAUN,GAEd,CACIK,IAAK,OACLC,SAAUX,GAEd,CACIU,IAAK,MACLC,SAAUJ,GAEd,CACIG,IAAK,SACLC,SAAUH,K,2DCpGZ,SAAUI,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,OAAQV,EAAKU,OACbC,eAAgBX,EAAKY,SACrBC,aAAa,EACbC,sBAAuBd,EAAKe,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,0B,wKCRrC,SAAUhB,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMW,EAAuBT,8BAAkB,aACzCU,EAAyBV,8BAAkB,eAC3CW,EAAwBX,8BAAkB,cAC1CY,EAAyBZ,8BAAkB,eAC3Ca,EAAwBb,8BAAkB,cAC1Cc,EAAwBd,8BAAkB,cAEhD,OAAQC,yBAAcc,gCAAoBC,cAAW,KAAM,CACzDC,yBAAaN,EAAuB,KAAM,CACxCO,QAASC,qBAAS,IAAM,CACtBF,yBAAaP,EAAwB,KAAM,CACzCQ,QAASC,qBAAS,IAAM,CACtBF,yBAAaR,EAAsB,KAAM,CACvCS,QAASC,qBAAS,IAAM,CACtBC,6BAAiB,mCAEnBC,EAAG,MAGPA,EAAG,MAGPA,EAAG,IAELJ,yBAAaL,EAAwB,CAAEU,MAAO,CAAEC,UAAW,SAAUC,WAAY,SAAY,CAC3FN,QAASC,qBAAS,IAAM,CACtBM,gCAAoB,IAAK,KAAM,oBAAsBC,6BAAiBjC,EAAKkC,cAAe,GAC1FF,gCAAoB,IAAK,KAAM,kBAAoBC,6BAAiBjC,EAAKmC,aAAc,GACvFH,gCAAoB,IAAK,KAAM,sBAAwBC,6BAAiBjC,EAAKoC,WAAY,GACzFJ,gCAAoB,IAAK,KAAM,iCAAmCC,6BAAiBjC,EAAKqC,gBAAkB,MAAQJ,6BAAiBjC,EAAKsC,kBAAmB,KAE7JV,EAAG,IAELJ,yBAAaH,EAAuB,KAAM,CACxCI,QAASC,qBAAS,IAAM,CACtBF,yBAAaP,EAAwB,KAAM,CACzCQ,QAASC,qBAAS,IAAM,CACtBF,yBAAaJ,EAAuB,CAClCmB,KAAM,MACNC,MAAO,UACPC,KAAM,QACNC,QAASzC,EAAO,KAAOA,EAAO,GAAM0C,GAAiB3C,EAAK4C,WAAW,WACpE,CACDnB,QAASC,qBAAS,IAAM,CACtBC,6BAAiB,eAEnBC,EAAG,IAELJ,yBAAaJ,EAAuB,CAClCmB,KAAM,MACNE,KAAM,QACNC,QAASzC,EAAO,KAAOA,EAAO,GAAM0C,GAAiB3C,EAAK4C,WAAW,UACpE,CACDnB,QAASC,qBAAS,IAAM,CACtBC,6BAAiB,+BAEnBC,EAAG,IAELJ,yBAAaJ,EAAuB,CAClCmB,KAAM,QACNC,MAAO,SACPC,KAAM,QACNC,QAASzC,EAAO,KAAOA,EAAO,GAAM0C,GAAiB3C,EAAK4C,WAAW,WACpE,CACDnB,QAASC,qBAAS,IAAM,CACtBC,6BAAiB,uBAEnBC,EAAG,MAGPA,EAAG,MAGPA,EAAG,KAEJ,ICjEUiB,mCAAgB,CAC7BC,KAAM,QACNC,MAAO,CACLC,OAAQ,CACNC,KAAMC,OACNC,UAAU,IAId,gBACE5H,KAAK2G,aAAekB,OAAQC,2BAA2B9H,KAAKyH,OAAOM,qBACnE/H,KAAK4G,YAAc5G,KAAKyH,OAAOO,cAC/BhI,KAAK6G,UAAY7G,KAAKyH,OAAOQ,gBAAkBJ,OAAQC,2BAA2B9H,KAAKyH,OAAOQ,iBAAmB,MACjHjI,KAAK8G,eAAiB9G,KAAKyH,OAAOS,gBAAgBX,KAAOvH,KAAKyH,OAAOS,gBAAgBX,KAAO,QAC5FvH,KAAK+G,iBAAmBc,OAAQC,2BAA2B9H,KAAKyH,OAAOS,gBAAgBC,eAEzFC,QAAS,CACR,iBAAiBC,SACVC,OAAgBC,QAAQF,KAGhCG,OACE,MAAO,CACLC,QAAS,UACT9B,aAAc,GACdC,YAAa,GACbC,UAAW,GACXC,eAAgB,GAChBC,iBAAkB,KAGtB2B,WAAY,CACVC,iBACAC,kBACAC,gBACAC,kBACAC,iBACAC,oB,iCC3CJ,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS,GAAQ,CAAC,YAAY,qBAE1E,Q,wBCRT,MAAOC,UAAsBzI,OACjCb,YAAYc,EAAmBC,GAC7Bd,MAAMa,EAAW,GAAIC,GAEvB,yBAAyBwI,GACvB,MAAMC,QAAgB3I,OAAoB4I,aAAa,kBACjDC,QAAc7I,OAAoB4I,aAAa,sBAErD,MAAO,CACL,CACE,WAAcD,EACd,WAAc,2BACd,YAAeE,EACf,cAAiBH,K,gBCZzB,MAAMI,EAAeC,IAAMC,yBAAa,mBAAmBD,EAAEA,IAAIE,0BAAcF,GACzEG,EAAa,CAAErD,MAAO,IACtBsD,EAA2BL,EAAa,IAAmB9C,gCAAoB,MAAO,CAAEoD,MAAO,cAAgB,mBAAoB,IACnIC,EAA2BP,EAAa,IAAmB9C,gCAAoB,IAAK,KAAM,sBAAuB,IACjHsD,EAA2BR,EAAa,IAAmB9C,gCAAoB,IAAK,KAAM,uBAAwB,IAClHuD,EAA2BT,EAAa,IAAmB9C,gCAAoB,IAAK,KAAM,MAAO,IAEjG,SAAUjC,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMW,EAAuBT,8BAAkB,aACzCU,EAAyBV,8BAAkB,eAC3CW,EAAwBX,8BAAkB,cAC1CiF,EAAuBjF,8BAAkB,aACzCkF,EAAsBlF,8BAAkB,YACxCmF,EAAsBnF,8BAAkB,YACxCoF,EAAqBpF,8BAAkB,WACvCqF,EAAuBrF,8BAAkB,aACzCsF,EAA6BtF,8BAAkB,mBAC/CuF,EAAqBvF,8BAAkB,WACvCwF,EAAsBxF,8BAAkB,YACxCY,EAAyBZ,8BAAkB,eAC3Ca,EAAwBb,8BAAkB,cAC1Cc,EAAwBd,8BAAkB,cAEhD,OAAQC,yBAAcc,gCAAoBC,cAAW,KAAM,CACzDC,yBAAaN,EAAuB,KAAM,CACxCO,QAASC,qBAAS,IAAM,CACtBF,yBAAaP,EAAwB,KAAM,CACzCQ,QAASC,qBAAS,IAAM,CACtBF,yBAAaR,EAAsB,KAAM,CACvCS,QAASC,qBAAS,IAAM,CACtBC,6BAAiB,mCAEnBC,EAAG,MAGPA,EAAG,MAGPA,EAAG,IAELJ,yBAAaL,EAAwB,CAAEU,MAAO,CAAEC,UAAW,SAAUC,WAAY,SAAY,CAC3FN,QAASC,qBAAS,IAAM,CACtBF,yBAAauE,EAAqB,KAAM,CACtCtE,QAASC,qBAAS,IAAM,CACtBF,yBAAasE,EAAoB,KAAM,CACrCrE,QAASC,qBAAS,IAAM,CACtBF,yBAAamE,EAAoB,CAAElD,KAAM,KAAO,CAC9ChB,QAASC,qBAAS,IAAM,CACtBF,yBAAakE,EAAqB,CAAE7D,MAAO,CAACC,UAAW,OAAQkE,OAAO,SAAW,CAC/EvE,QAASC,qBAAS,IAAM,EACrBlB,wBAAW,GAAOc,gCAAoBC,cAAW,KAAM0E,wBAAYjG,EAAKkG,MAAO,CAACnC,EAAMoC,KAC7E3F,yBAAcC,yBAAagF,EAAqB,CACtDW,IAAKrC,EACLrB,QAAUC,GAAiB3C,EAAKqG,iBAAiBF,GACjDG,QAAQ,EACRzE,MAAO0E,4BAAgBvG,EAAKwG,cAAgBL,EAAQ,eAAgB,iBACnE,CACD1E,QAASC,qBAAS,IAAM,CACtBF,yBAAagE,EAAsB,KAAM,CACvC/D,QAASC,qBAAS,IAAM,CACtBC,6BAAiBM,6BAAiB8B,EAAK0C,OAAQ,KAEjD7E,EAAG,GACF,QAELA,EAAG,GACF,KAAM,CAAC,UAAW,YACnB,QAENA,EAAG,MAGPA,EAAG,IAELJ,yBAAamE,EAAoB,CAAE9D,MAAO,CAACC,UAAW,OAAQkE,OAAO,SAAW,CAC9EvE,QAASC,qBAAS,IAAM,CACtBM,gCAAoB,MAAOkD,EAAY,CACrC1D,yBAAakE,EAAqB,KAAM,CACtCjE,QAASC,qBAAS,IAAM,CACA,OAArB1B,EAAKwG,aACDhG,yBAAcC,yBAAaoF,EAA4B,CACtDO,IAAK,EACLM,WAAY1G,EAAKkG,MAAMlG,EAAKwG,aAAa,UACzC,sBAAuBvG,EAAO,KAAOA,EAAO,GAAM0C,GAAkB3C,EAAKkG,MAAMlG,EAAKwG,aAAa,UAAa7D,IAC7G,CACDlB,QAASC,qBAAS,IAAM,CACtByD,EACAE,GACC7E,wBAAW,GAAOc,gCAAoBC,cAAW,KAAM0E,wBAAYjG,EAAKhC,MAAO,CAACK,EAAMpB,KAC7EuD,yBAAcC,yBAAagF,EAAqB,CAAEW,IAAKnJ,GAAK,CAClEwE,QAASC,qBAAS,IAAM,CACtBF,yBAAagE,EAAsB,KAAM,CACvC/D,QAASC,qBAAS,IAAM,CACtBC,6BAAiBM,6BAAiB5D,EAAKA,KAAKyE,MAAO,KAErDlB,EAAG,GACF,MACHJ,yBAAaoE,EAAsB,CACjCrD,KAAM,QACNoE,MAAOtI,EAAKuI,mBACX,KAAM,EAAG,CAAC,YAEfhF,EAAG,GACF,QACD,MACJ0D,EACA9D,yBAAaiE,EAAqB,KAAM,CACtChE,QAASC,qBAAS,IAAM,CACtBF,yBAAagE,EAAsB,KAAM,CACvC/D,QAASC,qBAAS,IAAM,CACtBC,6BAAiB,6BAEnBC,EAAG,IAELJ,yBAAaoE,EAAsB,CACjCrD,KAAM,QACNoE,MAAO,YAGX/E,EAAG,IAELJ,yBAAaiE,EAAqB,KAAM,CACtChE,QAASC,qBAAS,IAAM,CACtBF,yBAAagE,EAAsB,KAAM,CACvC/D,QAASC,qBAAS,IAAM,CACtBC,6BAAiB,sBAEnBC,EAAG,IAELJ,yBAAaoE,EAAsB,CACjCrD,KAAM,QACNoE,MAAO,WAGX/E,EAAG,MAGPA,EAAG,GACF,EAAG,CAAC,gBACPiF,gCAAoB,IAAI,KAE9BjF,EAAG,MAGP2D,IAEF3D,EAAG,MAGPA,EAAG,MAGPA,EAAG,MAGPA,EAAG,IAELJ,yBAAaH,EAAuB,KAAM,CACxCI,QAASC,qBAAS,IAAM,CACtBF,yBAAaP,EAAwB,KAAM,CACzCQ,QAASC,qBAAS,IAAM,CACtBF,yBAAaJ,EAAuB,CAClCsB,QAAS1C,EAAK4C,WACdL,KAAM,MACNC,MAAO,UACN,CACDf,QAASC,qBAAS,IAAM,CACtBC,6BAAiB,aAEnBC,EAAG,GACF,EAAG,CAAC,YACPJ,yBAAaJ,EAAuB,CAClCsB,QAAS1C,EAAK8G,gBACdvE,KAAM,MACNwE,UAAW/G,EAAKgH,aACf,CACDvF,QAASC,qBAAS,IAAM,CACtBC,6BAAiB,YAEnBC,EAAG,GACF,EAAG,CAAC,UAAW,eAEpBA,EAAG,MAGPA,EAAG,KAEJ,IC5KUiB,mCAAgB,CAC7BC,KAAM,QACNC,MAAO,CACLkE,YAAa,CACXhE,KAAMC,OACNC,UAAU,GAEZnF,MAAO,CACLiF,KAAMiE,MACNzF,QAAS,KAGbkC,QAAS,CACPf,aACEiB,OAAgBC,WAElB,8BACQD,OAAgBC,QAAQvI,KAAK2K,QAErCG,iBAAiBF,GACf5K,KAAKiL,YAAcL,IAIvBgB,SAAU,CACRH,cACE,OAAOzL,KAAK2K,MAAMkB,OAAQC,GAAcA,EAAK,WAAW5L,SAAWF,KAAK2K,MAAMzK,SAGlF6L,UACE/L,KAAK2K,MAAQ3K,KAAK0L,aAEpBlD,OACE,MAAO,CACLC,QAAS,UACTuD,qBAAqB,EACrBC,cAAe,GACftB,MAAO,GACPuB,UAAW,GACXC,QAAS,CAAC,UAAW,WAAY,eAAgB,OAAQ,oBACzDlB,YAAa,OAGjBvC,WAAY,CACVM,iBACAF,kBACAH,iBACAE,gBACAD,kBACAwD,gBACAC,eACAC,eACAC,qBACAC,iB,UC/DJ,MAAM,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS,GAAQ,CAAC,YAAY,qBAE1E,Q,wHCuBAlF,+BAAgB,CAC7BmF,OAAQ,CAACC,QACThE,WAAY,CAAEiE,wBACdnE,KAAM,KAAM,CACVrD,OAAQ,GACRyH,eAAgB,EAChBC,YAAa,GACbC,eAAgB,GAChBC,UAAW,GACXC,wBAAyB,EACzBC,0BAA0B,EAC1BC,aAAa,EACbC,cAAe,EACfC,YAAa,EACbC,YAAY,EACZC,mBAAmB,EACnBC,qBAAqB,EACrBC,sBAAsB,EACtBC,eAAe,EACfC,qBAAsB,GACtBC,aAAc,GACdC,aAAc,GACdC,aAAc,GACdC,cAAc,EACdC,iBAAiB,EACjBC,mBAAmB,EACnBC,aAAa,EACbC,qBAAqB,EACrBC,cAAc,EACdC,kBAAmB,GACnBC,mBAAoB,GACpBC,sBAAsB,EACtBC,yBAA0B,GAC1BC,0BAA2B,GAC3BC,yBAA0B,GAC1BC,kBAAkB,EAClBC,eAAgB,GAChBC,wBAAwB,EACxBC,qBAAqB,EACrBC,UAAW,GACXC,YAAa,KAEfC,MAAO,CACLC,MAAO,CACLC,QAAQ9D,GACFA,IACFpL,KAAK2N,aAAe,IAAIwB,OAAoBnP,KAAKU,UAAWV,KAAKW,YACjEX,KAAK4N,aAAe,IAAIwB,OAAoBpP,KAAKU,UAAWV,KAAKW,YACjEX,KAAK6N,aAAe,IAAIrN,OAAoBR,KAAKU,UAAWV,KAAKW,YACjEX,KAAKmF,OAASnF,KAAKqP,cAGvBC,WAAW,IAGflH,QAAS,CACP,eAAemH,EAAQC,GACrB,MAAMC,QAAkBzP,KAAK2N,aAAa+B,kBAE1C,IAAKD,EAAW,OAAOE,eAAa,8BAEpC,MAAMC,QAAoB5P,KAAK6P,WAAWL,EAAc,gBAElDM,SAAsB9M,QAAQC,IAAI,IACnCjD,KAAKwO,6BACLxO,KAAKyO,yBACRzO,KAAKuO,4BACH1C,OAAQjJ,IAAOmN,qBAAQnN,IAErBoN,QAAiBhQ,KAAK2N,aAAasC,oBAAoB,IACxDL,KAAgBE,IAKrB,GAFKC,qBAAQ/P,KAAKkQ,UAAalQ,KAAK6O,2BAA2B7O,KAAKmQ,iBAE/DH,EAAU,OAAOL,eAAa,uCAEnCS,eAAa,uCAETb,EAAEc,oBAAoD,QAA9Bd,EAAEc,mBAAmBjF,MAC/CpL,KAAKsQ,uBAGPtQ,KAAKuQ,YAEP,kBAAkBC,GAChB,MAAMC,EAAwB,GACxBC,EAAaF,EAASG,mBAAmBvF,MAY/C,OAXI2E,qBAAQ/P,KAAK+O,eACf/O,KAAK+O,kBAAoB6B,OAAeC,wBAEvCH,EAAWI,MAAM,QAClBL,EAAY9O,KAAK,qCACT+O,EAAWK,SAAS,oBAC5BN,EAAY9O,KAAK,qCACjB8O,EAAY9O,KAAK,wBACT+O,EAAWK,SAAS,4BAC5BN,EAAY9O,KAAK,2BAEXoO,qBAAQU,GAOZ,GANAzQ,KAAK+O,YAAYlD,OAAQ/I,GAAc2N,EAAYM,SAASjO,EAAKyE,OAChE7E,IAAKI,IAAS,CACboI,MAAOpI,EAAKyE,KACZ6D,MAAO,GACP4F,MAAOlO,MAIf,4BACE,MAAMmO,QAAqB9B,OAAoB+B,mBAC7ClR,KAAKU,UAAW,qBAEZyQ,QAA0BhC,OAAoBiC,YAClDpR,KAAKU,UAAW,uBAEZkB,EAAOuP,EAAoBtJ,OAAQwJ,oBAAoBF,EAAkBG,cAAgB,GAC/F,OAAOL,GACFA,EAAaH,MAAM,SACnBK,IACA,GAAGA,EAAkBI,aAAcT,MAAM,SACzClP,IAAS5B,KAAK2N,aAAa6D,WAElC,0BACE,MAAMC,QAAoBtC,OAAoBuC,sBAAsB1R,KAAKU,UAAW,oBACpF,OAAO+Q,EAAc5J,OAAQwJ,oBAAoBI,GAAe,IAElE,oCAAoCpJ,GAClC,GAAIrI,KAAKiN,2BACJ,GAAG5E,EAAI6C,OAAQ4F,MAAM,mBACrB,GAAGzI,EAAI+C,OAAQ0F,MAAM,OAAQ,CAChC,MAAMa,QAAeC,eACnB,iBACA,mCAAmC5R,KAAKgN,8DACxC,gBACA,CACE,CAAEzF,KAAM,sBAAuBP,KAAM,QAASC,MAAO,WACrD,CAAEM,KAAM,qBAAsBP,KAAM,MAAOC,MAAO,aAGtDoB,EAAI+C,MAAmB,wBAAXuG,EAAmC,MAAQ,OAG3D,wBACE,MAAME,QAAaC,OAAeC,iBAAiB/R,KAAKU,WACxD,IAAuB,IAAnBmR,EAAKG,UAAoB,CAC3B,MAAMC,QAAc3J,OAAgB4J,OAAO,CACzCC,UAAWC,EACXC,iBAAiB,EACjBC,SAAU,cACVC,eAAgB,CAAE9K,OAAQoK,KAE5BI,EAAMO,UACN,MAAM,KAAEhK,SAAeyJ,EAAMQ,eAC7B,OAAQjK,GACN,IAAK,cACGxI,KAAK0N,qBAAqBgF,uBAChC,MACF,IAAK,aACG1S,KAAK2S,YACX,MACF,IAAK,QACH,MACF,QACE,SAIR,gBAAgBxJ,EAAiB,MAC/B,MAAMyJ,EAAe,IAAI1J,EAAclJ,KAAKU,UAAWV,KAAKW,YACtD8O,QAAkBmD,EAAalD,kBAC/BmD,QAAqBD,EAAaE,mBAAmB3J,GAC3D,IAAKsG,EAAW,OAAOE,eAAa,oCAC9BiD,EAAa3C,oBAAoB4C,IAEzCE,gBACE,MAAMC,EAAMhT,KAAKiT,QAAQC,SACzB,OAAOlT,KAAKiT,QAAQE,YACfnT,KAAKqN,YACLrN,KAAKkN,aACL8F,GAAOhT,KAAKmN,cACZ6F,GAAOhT,KAAKoN,aACXpN,KAAK4O,wBAEbwE,oBACE,OAAOpT,KAAKiT,QAAQI,mBAAqBrT,KAAKsO,sBAEhDgF,gCAAgC9C,GAC9B,OAAQxQ,KAAKoT,sBACPpT,KAAKuN,sBACLvN,KAAKuT,WAAW/C,KAChBxQ,KAAKwT,eAEbC,4BAA4BjD,GAC1B,OACExQ,KAAKoT,sBACJpT,KAAKuN,sBACLvN,KAAKuT,WAAW/C,KAChBxQ,KAAK0T,kBAAkBlD,KACpBxQ,KAAKwT,eAGbD,WAAW/C,GACT,OAAIA,EAASmD,uBACJ3T,KAAK4T,QAAQpD,EAASmD,uBAC3BE,GAAiB,aAAZA,EAAE3I,OAAoC,QAAZ2I,EAAEzI,OAG9BpL,KAAKsN,mBAEdoG,kBAAkBlD,GAChB,OAAOxQ,KAAK4T,QAAQpD,EAASsD,mBAAoBlR,GAAiB,mBAAZA,EAAEwI,QAE1D,uBAAuB2I,EAAyB3I,GAC9C,GAAIA,EAAM4I,WAA6B,SAAhB5I,EAAMF,MAC3B,OAAO6I,EAASrR,IAAKhB,IACJ,QAAXA,EAAEwJ,QACJxJ,EAAEsS,WAAY,EACdtS,EAAE8J,UAAW,GAER9J,IAEJ,GAAmB,QAAf0J,EAAMF,OAAmBE,EAAM4I,UAAW,CAC/C5I,EAAMF,MAAM4F,MAAM,aAAamD,eAAU,wDAC7C,MAAMC,EAAYC,uBAAUJ,EAAU,CAAE7I,MAAO,SAC/C6I,EAASG,GAAWF,WAAY,EAChC,MAAMnC,EAAO7R,KAAK2N,aAAayG,sBAC7BhJ,EAAMF,MACN6I,GAEIM,EAAeF,uBAAUtC,EAAM,CAAE3G,MAAOE,EAAMF,QAEpD,OADA2G,EAAKwC,GAAcL,WAAY,EACxBnC,EAEP,OAAOkC,EAASrR,IAAKhB,IACnBA,EAAE8J,UAAW,EACN9J,KAIb4S,qBAAqBP,EAAyB3I,GAC5C,GAAIA,EAAM4I,WAA6B,sBAAhB5I,EAAMF,MAC3B,OAAO6I,EAASrR,IAAKhB,IACJ,qBAAXA,EAAEwJ,QAA8BxJ,EAAEsS,WAAY,GAC3CtS,IAEJ,GAAmB,qBAAf0J,EAAMF,OAAgCE,EAAM4I,UAAW,CAChE,MAAME,EAAYC,uBAAUJ,EAAU,CAAE7I,MAAO,sBAC/C6I,EAASG,GAAWF,WAAY,EAElC,OAAOD,GAETQ,sBAAsBC,GACpB,GAAIxU,KAAK4T,QAAQY,EAASC,GAAiB,sBAAZA,EAAEvJ,OAC/B,OAAOlL,KAAK2N,aAAa+G,gBAAgB,kBAAmB,MAE9D,MAAMC,EAAa3U,KAAK2N,aAAa+G,gBAAgB,kBAAmB,OAClEE,EAAcJ,EAAQ9R,IAAK+R,GAAKzU,KAAK2N,aAAa+G,gBACtD,oBAAqBD,EAAEvJ,QAEzB,MAAO,CAACyJ,KAAeC,IAEzBC,YAAYrE,GACV,OAAOxQ,KAAK4T,QAAQpD,EAASsE,WAAYlS,GAAiB,SAAZA,EAAEwI,QAC3CpL,KAAK4T,QAAQpD,EAASsD,mBAAoBlR,GAAiB,SAAZA,EAAEwI,QAExD2J,yBAAyBvE,GACvB,MAA4C,mCAArCA,EAASwE,kBAAkB5J,OAEpC6J,qBAAqBzE,GACnB,OAAOxQ,KAAK4T,QAAQpD,EAAS0E,aAActS,GAAiB,UAAZA,EAAEsI,OAAiC,QAAZtI,EAAEwI,QAE3E+J,cAAc3E,GAEZ,OADAxQ,KAAKkO,oBAAsBlO,KAAK4T,QAAQpD,EAAS4E,gBAAiBxS,GAAiB,QAAZA,EAAEwI,OAClEpL,KAAKkO,qBAEdmH,YAAY7M,GAEV,OADAxI,KAAKiO,cAAczF,EAAK4C,MAAMkK,WAAWxE,MAAM,qBACxC9Q,KAAKiO,aAEdsH,oBAAqB/M,GAEnB,OADAxI,KAAKgO,kBAAoBxF,EAAK4C,MAAM0F,MAAM,YAAc,OAAOtI,EAAK4C,MAAM0F,MAAM,QACzE9Q,KAAKgO,mBAEd,yBAAyBxF,EAAgBgN,GACvC,MAAMC,QAA2BzV,KAAK0V,sBAAsBlN,GAI5D,GAFAxI,KAAKwV,GAAQ,QAEaG,IAAtBF,EAAiC,OAAO,EAE5C,IAA0B,GAAtBA,EAAyB,CAC3B,MAAMG,EAAqBC,OAAeC,mBAAmB,gBAAgB,GACvEC,EAAiBC,MAAmB,GAAGA,GAASlF,MAAM,eAC5D9Q,KAAKwV,GAAQC,EAAkB/S,IAAKuT,IAAM,CACxC,WAAcL,EACd,YAAeC,OAAeC,mBAAmBG,EAAE/K,OAAO,GAC1D,WAAc6K,EAAcE,EAAED,QAAU,0BAA4B,KACpE,WAAeD,EAAcE,EAAED,QAAqB,KAAXC,EAAED,UAG/C,OAAO,GAET,4BAA4BtK,GAC1B,MAAMwK,EAASxK,EAAYG,OAAOsK,KAAO,GAAGA,EAAEjL,OAAQ4F,MAAM,WAAwB,QAAVqF,EAAE/K,OAC5E,GAAI8K,EAAOhW,OAAS,EAAG,CACrB,MAAM+R,QAAc3J,OAAgB4J,OAAO,CACzCC,UAAWiE,EACX/D,iBAAiB,EACjBC,SAAU,cACVC,eAAgB,CAAE7G,YAAawK,EAAQzT,MAAOzC,KAAKoO,qBAErD6D,EAAMO,UACN,MAAM,KAAEhK,SAAeyJ,EAAMQ,eAC7B,OAAOjK,EAET,OAAQ,GAEV6N,aAAaC,EAA0B,GAAIC,GACzC,MAAMnO,EAAUpI,KAAK2N,aAAa6I,2BAC5BC,EAAWrO,EAAQyD,OACtBrD,IAAkB8N,EAAcvF,SAASvI,IAE5C,OAAOiO,EAAS/T,IAAKgU,IAAW,CAC9BxL,MAAOwL,EACPtL,MAAOsL,EACP1C,UAAWuC,EAAW7T,IAAKhB,GAAMA,EAAEwJ,OAAO6F,SAAS2F,OAGvDC,WAAWnC,EAAmBoC,GAC5B,OAAOpC,EAAQ9R,IAAK8F,IAClB,MAAMqO,EAAWC,kBAAKF,EAAW,CAAE1L,MAAO1C,IAC1C,MAAO,CACL0C,MAAO1C,EACP4C,MAAOyL,EAAWA,EAASzL,MAAQ,GACnC4F,MAAO,CACL+F,OAAQ/W,KAAKgX,oBAKrBC,qBAAqBL,GACnB,MAAMM,EAAoBrB,OAAesB,sBACvC,oBAAoB,GACpBzU,IAAK8F,GAASA,EAAKjB,MACrB,OAAOvH,KAAK2W,WAAW,IAAIO,EAAmB,SAAUN,IAE1DQ,0BAA0BR,GACxB,MAAMM,EAAoBrB,OAAesB,sBACvC,eAAe,GACfzU,IAAK8F,GAASA,EAAKjB,MAKf8P,EAAcH,EAAkBI,MACtC,OAAOtX,KAAK2W,WAAW,IAAIO,EAAmB,kBAAmB,GAAGG,GAAgBT,IAEtFW,cAAcX,GACZ,MAAMM,EAAoBrB,OAAesB,sBACvC,cAAc,GACdzU,IAAK8F,GAASA,EAAKjB,MACrB,OAAOvH,KAAK2W,WAAW,IAAIO,GAAoBN,IAEjDY,6BACE,OAAO3B,OAAesB,sBAAsB,sBACzCzU,IAAK+U,IAAM,CACVvM,MAAOuM,EAAElQ,KACT6D,MAAOqM,EAAElQ,KACTyJ,MAAO,CACLyG,SAIRC,sBAAsBlD,EAAmBmD,GACvC,MAAMC,EAAiBD,EAAW9L,OAAO4I,GAAKA,EAAET,WAAWtR,IAAI+R,GAAKA,EAAEvJ,OACtE,OAAOsJ,EAAQ9R,IAAI+R,IAAI,MACrB,GAA4C,oBAAhC,OAADA,QAAC,IAADA,GAAQ,QAAP,EAADA,EAAGzD,aAAK,WAAP,EAAD,EAAU6G,oBAAmC,OACtD,MAAMC,EAAmB,OAADrD,QAAC,IAADA,GAAQ,QAAP,EAADA,EAAGzD,aAAK,WAAP,EAAD,EAAU6G,qBAClC,GAA+B,kBAApBC,EAA+B,CACxC,MAAMC,EAAiB,CACrB7M,MAAOuJ,EAAEvJ,MACTE,MAAOqJ,EAAErJ,MACT4F,MAAOyD,EAAEzD,OAQX,OANI8G,EAAgB9D,WAClB+D,EAAO/D,UAAY8D,EAAgB9D,iBAC5B8D,EAAgB9D,WAEvB+D,EAAO/D,UAAY4D,EAAe7G,SAAS0D,EAAEvJ,OAExC,IAAK6M,KAAWD,IAG3B,OAAOrD,KAMXuD,gBAAgBxH,GACd,QAAQxQ,KAAK8N,iBACT0C,EAASG,qBACRH,EAASG,mBAAmBvF,MAAM0F,MAAM,eAG/CmH,aAAazH,GACX,OAAmC,MAA/BA,EAASG,mBACJ,aAAauH,KAAK1H,EAASG,mBAAmBvF,OAEzB,OAAvBpL,KAAK8O,UAAUqJ,MAAiBnY,KAAK8N,cAM9CsK,qBAAqB5H,GACnB,OAAOxQ,KAAKyN,gBAAkBzN,KAAKgY,gBAAgBxH,IAKrD,uBAAuBuD,EAAoBsE,EAAmB7H,GAC5D,MAAM8H,EAAc5W,KAAcA,EAAEwJ,MAAM4F,MAAM,YAG1CyH,EAA0B,MAC9B,MAAMC,EAAezE,EAAS5T,OAC9B,CAACqY,EAAwBC,KACnBH,EAAWG,MACRA,EAAKvN,SAASsN,IAChBC,EAAKzE,WACRwE,EAAa7W,KAAK8W,EAAKvN,OAElBsN,GACN,IACH,OAAOA,EAAazH,SAAS,SACvByH,EAAazH,SAAS,oBACvByH,EAAazH,SAAS,6BAZG,GAgB1B2H,EAAeJ,EAAWD,IAC3BtE,EAASlI,OAAOnK,GAAK4W,EAAW5W,IAAIgB,IAAIhB,IAAMA,EAAEsS,WAChD2E,MAAMC,SAEX,GAAIF,GAAgB1Y,KAAKiY,aAAazH,GAAW,CAC/C,MAAMyB,QAAc4G,eAClB,4BACA,GACA,CACE,mBACA,qCACA,YACA,wBACA,SAEF,CACE,CAAEtR,KAAO,OAAQP,KAAM,QAAS8R,KAAM,YAG1C9Y,KAAKuO,yBAA2BvO,KAAK2N,aAAaoL,eAChD,wCAAyC9G,EAAM+G,gBAGjDhZ,KAAKuO,yBAA2B,GAGlC,GAAIgK,EAAgB,CAClB,MAAM5G,QAAeC,eACnB,qBACA,6CACA,yBACA,CACE,CAAErK,KAAM,gBAAiBP,KAAM,QAASC,MAAO,WAC/C,CAAEM,KAAM,gBAAiBP,KAAM,MAAOC,MAAO,aAGjD,OAAO8M,EAASrR,IAAIhB,IACd4W,EAAW5W,KACbA,EAAEsS,UACW,kBAAXrC,GAA0C,QAAZjQ,EAAEwJ,OACtB,kBAAVyG,GAAyC,4BAAZjQ,EAAEwJ,OAE5BxJ,IAGX,OAAOqS,EAASrR,IAAIhB,KAEM,oBAApB2W,EAAUnN,OACG,4BAAZxJ,EAAEwJ,OACFmN,EAAUrE,WAEgB,4BAApBqE,EAAUnN,OACJ,oBAAZxJ,EAAEwJ,OACFmN,EAAUrE,aAHbtS,EAAEsS,WAAY,GAMTtS,KAGXuX,uBAAuBzI,EAAemH,EAAW,IAC/C,MAAMuB,EAAelZ,KAAKgY,gBAAgBxH,GACpC2I,EAAsC,OAAvBnZ,KAAK8O,UAAUqJ,IAC9B1K,EAAgBzN,KAAKoY,qBAAqB5H,GAE1C4I,EAAiBC,IAAY,CACjC7N,UAAU,EACVwI,WAAW,EACXsF,YAAa,CACXrS,MAAO,SACPsS,KAAM,SACNF,UAIJ,OAAOrZ,KAAK0X,sBAAsB,CAChC1X,KAAKwZ,SAAS,OAAQ,CACpB3B,mBAAoB,KAAM,CACxB7D,UAAWvG,IAAkBzN,KAAKiO,gBAGtCjO,KAAKwZ,SAAS,MAAO,CACnB3B,mBAAoB,KACdpK,GAAkBzN,KAAKiO,aACrBjO,KAAKgO,kBAGJhO,KAAKgO,kBACRoL,EAAc,mBACd,CAAE5N,UAAU,GAJP,CAAEwI,WAAY,KAO3BhU,KAAKwZ,SAAS,kBAAmB,CAC/B3B,mBAAoB,IACdqB,EAAqBE,EAAc,2BACnCpZ,KAAK8O,UAAU2K,aAAqBL,EAAc,6BAClDpZ,KAAKiO,YAAoBmL,EAAc,cACvCpZ,KAAK4M,cAAgB,GAAWwM,EAAc,2BAC9CD,GAAuC,oBAAvBnZ,KAAK8O,UAAUqJ,MAA8BnY,KAAK8O,UAAU4K,UACvEN,EAAc,MAAMpZ,KAAK8O,UAAUqJ,iBAEjB,oBAAvBnY,KAAK8O,UAAUqJ,KAA8BnY,KAAK8O,UAAU4K,eAAhE,EAAkF,CAAE1F,WAAW,KAGnGhU,KAAKwZ,SAAS,0BAA2B,CACvC3B,mBAAoB,IACdqB,EAAqBE,EAAc,2BACnCpZ,KAAK8O,UAAU2K,aAAqBL,EAAc,6BAClDpZ,KAAKiO,YAAoBmL,EAAc,cACvCpZ,KAAK4M,cAAgB,GAAWwM,EAAc,2BAC9CD,GAAuC,4BAAvBnZ,KAAK8O,UAAUqJ,MAAsCnY,KAAK8O,UAAU4K,UAC/EN,EAAc,MAAMpZ,KAAK8O,UAAUqJ,iBAEjB,4BAAvBnY,KAAK8O,UAAUqJ,KAAsCnY,KAAK8O,UAAU4K,UACjE,CAAE1F,UAAWvG,GADsE,CAAEuG,WAAW,KAI3GhU,KAAKwZ,SAAS,MAAO,CACnB3B,mBAAoB,IACdqB,EAAqBE,EAAc,2BACnCpZ,KAAK8O,UAAU2K,aAAqBL,EAAc,6BAClDpZ,KAAKiO,YAAoBmL,EAAc,cACvCD,GAAuC,QAAvBnZ,KAAK8O,UAAUqJ,MAAkBnY,KAAK8O,UAAU4K,UAC3DN,EAAc,MAAMpZ,KAAK8O,UAAUqJ,iBAEjB,QAAvBnY,KAAK8O,UAAUqJ,KAAkBnY,KAAK8O,UAAU4K,eAApD,EAAsE,CAAE1F,WAAW,KAGvFhU,KAAKwZ,SAAS,sBACb7B,IAEL,qBACE,OAAOgC,OAAaC,iBAAkBC,OAAMC,IAAI,0CAA2C,CAAEpZ,UAAWV,KAAKU,cAE/G8S,cACE,MAAgD,QAAzC1B,OAAeiI,uBAExB1K,YACE,MAAO,CACL,CACE2K,GAAI,6BACJC,QAAS,eACTC,SAAU,4CACVxS,KAAMyS,OAAUC,mBAChBC,KAAM1X,UACJ,MAAM2X,EAAuD,aAAnCta,KAAK2N,aAAa4M,YAa5C,OAXEva,KAAK6O,sBADHyL,WAGgCE,OAAmBC,oBAAoBza,KAAKU,WAG5EV,KAAK6O,sBACP7O,KAAK4M,cAAgB8N,aAAc1a,KAAKiT,QAAQ0H,mBAChD3a,KAAKyN,oBAAsBoM,OAAMC,IAAI,0BACrC9Z,KAAK8O,gBAAkB9O,KAAK2N,aAAaiN,wBACzC5a,KAAK8N,aAAsC,OAAvB9N,KAAK8O,UAAUqJ,KAAgBnY,KAAK8O,UAAU4K,YAE7D,GAETmB,WAAarS,GAAcsS,OAAWlT,SAASY,GAC/CuS,cAAgBC,IAAW,CACzBC,IAAK,eACLC,IAAKlb,KAAKuU,sBAAsByG,KAElCG,cAAe,CAACpH,EAAyB3I,EAAemE,KACtD,MAAM6L,EAAOpb,KAAKsU,qBAAqBP,EAAU3I,GACjD,OAAOpL,KAAKqb,iBAAiBD,EAAMhQ,EAAOmE,IAE5CiF,QAAS,CAAChE,EAAeiH,EAAkB6D,EAASC,IAC1CxL,qBAAQwL,GAASvb,KAAKiZ,uBAAuBzI,GAAhC+K,EAEvBC,UAAW,IAAMxb,KAAK6O,oBACtB4M,UAAW,KAAM,MAKhBC,eAAmB,CACpB1B,GAAI,0BACJE,SAAU,wBACVtS,UAAU,EACVyS,KAAM1X,UACJ3C,KAAK0O,uBAA0B1O,KAAK2b,wBAA0B,EAC9D3b,KAAK2O,qBAAuB3O,KAAK4b,qBAC1B,GAETJ,UAAW,IAAMxb,KAAK0O,iBACtBmN,QAAS,IAAM7b,KAAK2O,eACpBmN,QAAS,IAAM9b,KAAK2N,aAAa6D,UACjCuK,aAAena,IACb5B,KAAK4N,aAAaoO,QAAQpa,GACnB,CACLqZ,IAAK,eACLrZ,OACAsZ,IAAKlb,KAAK2N,aAAasO,eACrB,4CAA6Cra,KAInDsa,WAAY,CACVC,cAAc,IAEfnc,KAAK2N,aAAa6D,WACrB,CACEwI,GAAI,yBACJE,SAAU,2BACVxS,KAAMyS,OAAUC,mBAChBW,cAAgBC,GAAgBA,EAAEtY,IAAIE,GAAKA,EAAEoO,OAC7C6J,WAAaG,GAAgBF,OAAWlT,SAASoT,GACjDxG,QAAS7R,UACP,IAAKoN,qBAAQ/P,KAAK8M,gBAAiB,OAAO9M,KAAK8M,eAC/C,MAAM+G,EAAI,IAAIzE,OAAoBpP,KAAKU,UAAWV,KAAKW,YAOvD,OANAX,KAAK8M,sBAAwB+G,EAAEuI,WAC5B1Z,IAAKI,IAAS,CACboI,MAAOpI,EAAKyE,KACZ6D,MAAOtI,EAAKC,QACZiO,MAAO,IAAKlO,MAET9C,KAAK8M,gBAEduP,OAAQ,CACNC,cAAc,GAEhBd,UAAW,IAAMxb,KAAK0O,kBAExB,CACEsL,GAAI,gBACJE,SAAU,yCACVxS,KAAMyS,OAAUoC,iCAChBf,UAAW,IAAMxb,KAAK0O,iBACtBmM,WAAaxS,GAAgByS,OAAWlT,SAASS,GACjD0S,cAAgBnY,GAAcA,EAAEoO,MAAMwL,gBACtChI,QAAS,KACP,MAAMiI,EAAY,CAChB,CAAEvR,MAAO,UAAWE,MAAO,IAC3B,CAAEF,MAAO,UAAWE,MAAO,IAC3B,CAAEF,MAAO,WAAYE,MAAO,IAC5B,CAAEF,MAAO,WAAYE,MAAO,IAC5B,CAAEF,MAAO,WAAYE,MAAO,KAC5B,CAAEF,MAAO,WAAYE,MAAO,KAC5B,CAAEF,MAAO,WAAYE,MAAO,KAC5B,CAAEF,MAAO,WAAYE,MAAO,KAC5B,CAAEF,MAAO,WAAYE,MAAO,KAC5B,CAAEF,MAAO,WAAYE,MAAO,KAC5B,CAAEF,MAAO,YAAaE,MAAO,KAC7B,CAAEF,MAAO,YAAaE,MAAO,KAC7B,CAAEF,MAAO,YAAaE,MAAO,MAE/B,OAAOqR,EAAU/Z,IAAI,EAAEwI,QAAOE,YAC5BpL,KAAK4N,aAAa8O,qBAAqBtR,GACvC,MAAMoR,EAAkBxc,KAAK4N,aAAa+O,4BAC1C,MAAO,CACLzR,QACAE,QACA4F,MAAO,CACL9F,MAAO,2BACPE,MAAOvD,OAAQC,2BAA2B0U,GAC1CA,kBACAxL,MAAO,CACL9F,MAAO,GACPE,MAAO,UAOnB,CACE4O,GAAI,iBACJE,SAAU,qDACVxS,KAAMyS,OAAUyC,oBAChB/B,WAAaG,GAAgBhb,KAAK6c,eAAe,CAC/C,IAAM/B,OAAWlT,SAASoT,GAC1B,IAAMA,EAAEtY,IAAKhB,IAAS,YAAiB,KAAZA,EAAE0J,OAA2C,MAA1B,OAAD1J,QAAC,IAADA,GAAQ,QAAP,EAADA,EAAGsP,aAAK,WAAP,EAAD,EAAU8L,gBACpDC,KAAKnE,SAAW,CAAC,iCAAmC,OAEzDmC,cAAe,CAACC,EAAazL,EAAQkI,KAAW,CAC9CwD,IAAK,eACLC,IAAMF,EAAEtY,IAAIC,UAAiB,YAC3B,MAAMqa,GAAkB,OAADpa,QAAC,IAADA,GAAQ,QAAP,EAADA,EAAGoO,aAAK,OAAM,QAAN,EAAR,EAAUlO,YAAI,WAAb,EAAD,EAAgBC,UAAW,EAClD,MAAO,UACK/C,KAAK2N,aAAasP,SAC1B,uCAAwC,CACtC,WAAcD,EACd,gBAAmB,OAADvF,QAAC,IAADA,OAAC,EAADA,EAAGyF,gBAAiB,KACtC,eAAkB,OAADta,QAAC,IAADA,OAAC,EAADA,EAAGwI,QAAS,IAGjC+R,YAAcnd,KAAK2N,aAAasP,SAC9B,sCAAuC,CACrC,WAAcD,EACd,eAAkB,OAADpa,QAAC,IAADA,GAAQ,QAAP,EAADA,EAAGoO,aAAK,WAAP,EAAD,EAAU8L,gBAAiB,EAC5C,gBAAmB,OAADrF,QAAC,IAADA,GAA0B,QAAzB,EAADA,EAAG2F,+BAAuB,WAAzB,EAAD,EAA4Bxb,OAAQ,YAKhE4S,QAAS,CAACnO,EAAQoR,EAAQ1D,IACjB0D,EAAE4F,uBACN3a,IAAKE,IACJ,MAAM0a,EAAW1a,EAAE,0BAA4BA,EAAE,cAAgBA,EAAE,QAC7D2a,EAAYzG,kBAAK/C,EAAU,CAAE7I,MAAOoS,IAC1C,IAAIE,EAAM,GACNC,EAAQ,GACG,MAAXF,IACFC,EAAe,OAATD,QAAS,IAATA,OAAS,EAATA,EAAWnS,MACjBqS,EAAiB,OAATF,QAAS,IAATA,GAAgB,QAAP,EAATA,EAAWvM,aAAK,WAAP,EAAT,EAAkB8L,cAE5B,MAAO,CACL5R,MAAOoS,EACPlS,MAAOoS,EACPxM,MAAO,CACLlO,KAAMF,EACNka,aAAcW,MAKxBjC,UAAW,IAAMxb,KAAK0O,kBAKxB,CACEsL,GAAI,qBACJE,SAAU,aACVxS,KAAMyS,OAAUuD,cAChBrD,KAAM1X,UACJ3C,KAAK+M,gBAAkB/M,KAAK2d,gBACrB,GAETC,OAAQjb,gBACA3C,KAAK6d,kBAEX,MAAMC,EAAiB9d,KAAK+M,UAAUlB,OAAQoK,GAA8B,OAAnBA,EAAE8H,cAC3D,GAAID,EAAe5d,cAAiB8d,eAAkB,8BAAgC,CACpF,MAAMC,EAAM,IAAIxd,OAAoBT,KAAKU,WAAY,EAAGV,KAAKW,YAEvDua,EAAM4C,EAAe3d,OAAO,CAAC8C,EAAUib,IAAgB,IACxDjb,KAASib,EAAOC,UAAUzb,IAAIC,UAC/Bsb,EAAIG,YAAcF,EAAOG,aAClBJ,EAAIK,cAAeL,EAAIhB,SAAS,yBAA0B,CAC7D,YAAe,MACf,aAAgBsB,QAGrB,UACGvb,QAAQC,IAAIiY,GAGpBlb,KAAK+M,gBAAkB/M,KAAK2d,gBAE9Ba,OAASC,GAAuBze,KAAK0N,qBAAuB+Q,EAC5DjK,QAAS,IACA,CACL,CACEtJ,MAAO,aACPE,MAAO,cACP4F,MAAO,CACL+F,OAAQ/W,KAAK+M,aAKrBsP,OAAQ,CACNqC,WAAaC,GACJ,IAAIC,OAAuB5e,KAAKU,WAAWme,iBAAiBF,GAErEG,iBAAkB,CAAC,SACnBC,WAAY,CACV,CACExX,KAAM,QACNL,KAAM,QACNF,KAAM,MACNC,MAAO,UACP+X,SAAS,EACT7X,QAASxE,UACFoN,qBAAQ/P,KAAK0N,6BACV1N,KAAK0N,qBAAqBgF,4BAO5C,CACEsH,GAAI,yBACJE,SAAU,qCACVG,KAAM1X,UACA3C,KAAKiT,QAAQE,aACXnT,KAAKiT,QAAQI,mBACfrT,KAAKwN,2BAA6BxN,KAAKiT,QAAQzF,uBAC/CxN,KAAKsN,wBAA0BtN,KAAKiT,QAAQM,cAE9CvT,KAAKsO,2BAA6BtO,KAAK2N,aAAasR,aAE/C,GAETzD,UAAW,KAAOxb,KAAKwN,sBAAwBxN,KAAKoT,oBACpD1L,KAAMyS,OAAU+E,mBAChBrE,WAAarS,GACXxI,KAAK6c,eAAe,CAClB,IAAM/B,OAAWlT,SAASY,GAC1B,IAAMsS,OAAWqE,SAAS3W,KAE9BuS,cAAgBC,IAAW,CACzBC,IAAK,eACLC,IAAKF,EAAEtY,IAAIE,GAAK5C,KAAK2N,aAAa+G,gBAAgB9R,EAAEoO,MAAM5H,QAASxG,EAAEwI,QAAQgU,OAC3Epf,KAAKwT,cAAgB,CAACxT,KAAK2N,aAAa+G,gBAAgB,sBAAuB,QAAU,MAG7FF,QAAUhE,IACR,MAAMgE,EAAU,GAoBhB,OAlBKxU,KAAKwT,eAAegB,EAAQ7S,KAAK,CACpCuJ,MAAO,WACPE,MAAO,GACP4F,MAAO,CACL+F,OAAQ/W,KAAKgX,eACb5N,QAAS,yBAIboL,EAAQ7S,KAAK,CACXuJ,MAAO,gBACPE,MAAO,GACP4F,MAAO,CACL+F,OAAQ/W,KAAKgX,eACb5N,QAAS,+BAINoH,EAASmD,wBAA0Ba,IAG9C,CACEwF,GAAI,uBACJE,SAAU,uBACVxS,KAAMyS,OAAUkF,gBAChBhF,KAAM1X,UACJ3C,KAAK6M,kBAAoB7M,KAAKiT,QAAQqM,mBACtCtf,KAAKgN,wBAA0BhN,KAAKiT,QAAQsM,iCAAiCvf,KAAK6M,aAClF7M,KAAKiN,yBAA2BjN,KAAKgN,yBAA2B,IACzD,GAETwH,QAAS7R,UACP,MAAM6c,QAAYxf,KAAKiT,QAAQwM,SACzB1I,EAAS/W,KAAK6M,YACpB,MAAO,CACL,CACE3B,MAAO,qBACPE,MAAO,eACP4F,MAAO,CACLwO,MACAzI,OAAQA,EAAOrU,IAAKE,IAAM,CACxB8c,EAAG7X,OAAQC,2BAA2BlF,EAAEhB,MACxC+d,EAAG/c,EAAEgd,UAEP5M,IAAKhT,KAAKiT,QAAQC,aAK1BmJ,OAAQ,CACNyC,iBAAkB,CAAC,WAGvB,CACE9E,GAAI,iBACJE,SAAU,GACVxS,KAAMyS,OAAU0F,eAChBrE,UAAW,IAAMxb,KAAKsO,qBACtBkG,QAAS,IAAMxU,KAAK8f,gBAAgB,CAClC,yCAGJ,CACE9F,GAAI,qBACJE,SAAU,oCACVxS,KAAMyS,OAAUC,mBAChBC,KAAM1X,UACA3C,KAAKiT,QAAQE,aACfnT,KAAKuN,0BAA4BvN,KAAK2N,aAAaJ,wBAE9C,GAETsN,WAAarS,GAAcsS,OAAWlT,SAASY,GAC/C2S,cAAe,CAACpH,EAAyB3I,IAChCpL,KAAK+f,iBAAiBhM,EAAU3I,GAEzC2P,cAAgBC,IAAW,CACzBC,IAAK,eACLC,IAAKF,EAAEtY,IAAIE,GAAK5C,KAAK2N,aAAa+G,gBAAgB,yBAA0B9R,EAAEwI,UAEhFoQ,UAAYhL,GAAkBxQ,KAAKsT,gCAAgC9C,GACnEgE,QAAS,CAACnO,EAAQ2Z,IAA0BhgB,KAAKqW,aAAa,GAAI2J,IAEpE,CACEhG,GAAI,aACJE,SAAU,uCACVxS,KAAMyS,OAAUC,mBAChBoB,UAAYhL,GAAkBxQ,KAAKyT,4BAA4BjD,GAC/DqK,WAAarS,GAAcsS,OAAWlT,SAASY,GAC/C2S,cAAe,CAACpH,EAAyB3I,IAChCpL,KAAK+f,iBAAiBhM,EAAU3I,GAEzC2P,cAAgBC,IAAW,CACzBC,IAAK,eACLC,IAAKF,EAAEtY,IAAKE,GAAc5C,KAAK2N,aAAa+G,gBAAgB,kCAAmC9R,EAAEwI,UAEnGoJ,QAAS,CAACnO,EAAQ2Z,IAA2BhgB,KAAKqW,aAAa,GAAI2J,IAErE,CACEhG,GAAI,oBACJE,SAAU,oDACVxS,KAAMyS,OAAU8F,UAChBpF,WAAarS,GAAcsS,OAAWlT,SAASY,GAC/CgT,UAAYhL,GAAkBxQ,KAAK6U,YAAYrE,GAC/CuK,cAAgBC,IAAS,CACvBC,IAAK,eACLC,IAAKlb,KAAK2N,aAAaoL,eAAe,2CAA4CiC,EAAE5P,SAEtFoJ,QAAS,IAAMxU,KAAK8f,gBAAgB,CAClC,sBACA,+BACA,iCACA,iCACA,eAGJ,CACE9F,GAAI,6BACJE,SAAU,wDACVxS,KAAMyS,OAAU8F,UAChBpF,WAAarS,GAAcsS,OAAWlT,SAASY,GAC/CuS,cAAgBC,IAAS,CACvBC,IAAK,eACLC,IAAKlb,KAAK2N,aAAaoL,eAAe,sCAAuCiC,EAAE5P,SAEjFoQ,UAAYhL,GAAkBxQ,KAAK+U,yBAAyBvE,GAC5DgE,QAAS,IAAMxU,KAAK8f,gBAAgB,CAClC,6BACA,oBACA,yBACA,wBACA,kDAGJ,CACE9F,GAAI,uBACJE,SAAU,uBACVxS,KAAMyS,OAAU8F,UAChBpF,WAAarS,GAAcsS,OAAWlT,SAASY,GAC/CgT,UAAYhL,GAAkBxQ,KAAK+U,yBAAyBvE,GAC5DuK,cAAgBC,IAAM,CACpBC,IAAK,eACLC,IAAKlb,KAAK2N,aAAa+G,gBAAgB,kCAAmCsG,EAAE5P,SAE9EoJ,QAAS,IAAM,CACb,CAAEtJ,MAAO,WAAYE,MAAO,OAC5B,CAAEF,MAAO,WAAYE,MAAO,MAC5B,CAAEF,MAAO,sBAAuBE,MAAO,yBAG3C,CACE4O,GAAI,uBACJE,SAAU,uBACVxS,KAAMyS,OAAUC,mBAChBS,WAAarS,GAAcsS,OAAWlT,SAASY,GAC/CgT,UAAYhL,GAA0D,aAAxCA,EAAS0P,qBAAqB9U,MAC5D2P,cAAgBC,IAAW,CACzBC,IAAK,eACLC,IAAKF,EAAEtY,IAAIE,GAAK5C,KAAK2N,aAAa+G,gBAAgB9R,EAAEsI,MAAOtI,EAAEwI,UAE/DoJ,QAAS,CAACnO,EAAQ2Z,IAA2BhgB,KAAKqW,aAAa,CAAC,QAAS2J,IAE3E,CACEhG,GAAI,aACJE,SAAU,kCACVxS,KAAMyS,OAAU8F,UAChB5F,KAAM1X,UACJ,GAAI3C,KAAKiT,QAAQE,aACfnT,KAAKkN,kBAAoBjM,OAASkf,iCAC9BngB,KAAKkN,aAAa,CACpB,MAAM,MAAEkT,EAAK,IAAEC,SAAcpf,OAASqf,mCACtCtgB,KAAKoN,WAAaiT,EAClBrgB,KAAKmN,aAAeiT,EACpBpgB,KAAKqN,iBAAmBrN,KAAK2N,aAAa4S,mBAC1CvgB,KAAK4O,6BAAgC5O,KAAK2N,aAAa6S,4BAG3D,OAAO,GAET3F,WAAaG,GAAcF,OAAWlT,SAASoT,GAC/CQ,UAAYjM,GAAWvP,KAAK+S,kBAAoB/S,KAAKuT,WAAWhE,GAChEwL,cAAgBC,IAAS,CACvBC,IAAK,eACLC,IAAKlb,KAAK2N,aAAa+G,gBAAgB,aAAcsG,EAAE5P,SAEzDoJ,QAAS,IAAMxU,KAAKgX,gBAEtB,CACEgD,GAAI,qBACJE,SAAU,+BACVxS,KAAMyS,OAAU8F,UAChBpF,WAAaG,GAAcF,OAAWlT,SAASoT,GAC/CQ,UAAYjM,GAAkC,OAAvBA,EAAEkR,WAAWrV,MACpC2P,cAAgBC,IAAS,CACvBC,IAAK,eACLC,IAAKlb,KAAK2N,aAAa+G,gBAAgB,+BAAgCsG,EAAE5P,SAE3EoJ,QAAS,IAAMxU,KAAKwX,iCAEnBkE,eAAmB,CACpB1B,GAAI,0BACJE,SAAU,qBACVtS,UAAU,EACViU,QAAS,IAAM7b,KAAKiT,QAAQyN,eAC5B5E,QAAS,IAAM3M,OAAoBwR,iBACnCnF,UAAYjM,GAA0C,0BAA/BA,EAAEqR,mBAAmBxV,MAC5C2Q,aAAc,CAACna,EAAcif,IACvBA,EACK,CACL5F,IAAK,eACLC,IAAKlb,KAAK2N,aAAamT,wBAAwB,iBAAkBlf,IAG5D,CACLqZ,IAAK,eACLC,IAAKlb,KAAK2N,aAAasO,eAAe,iBAAkBra,IAI9Dsa,WAAY,CACVC,cAAc,EACd4E,oBAAqBC,OAAoBC,wBAG7C,CACEjH,GAAI,wBACJE,SAAU,2CACVxS,KAAMyS,OAAU+G,cAChB7G,KAAM1X,UACJ3C,KAAKqO,yBAA2BrO,KAAK2N,aAAawT,sBAC3C,GAET9E,OAAQ,CACN+E,QAAS,IAAM,CACb,CACEC,OAAMC,MAAM,QACZD,OAAMC,MAAM,aACZD,OAAMC,MAAM,gBACZD,OAAMC,MAAM,UAGhBC,KAAM,IACG5Z,OAAO6Z,KAAKxhB,KAAKqO,oBACvB3L,IAAK+e,GACJ9Z,OAAOoP,OAAO/W,KAAKqO,mBAAmBoT,IACrC5V,OAAQjJ,IAAYmN,qBAAQnN,EAAE2E,OAC9B7E,IAAKE,GAAW,CACfye,OAAMK,OAAOD,GACbJ,OAAMM,GAAG/e,EAAE2E,MACX8Z,OAAMM,GAAG/e,EAAEgf,aAAe,MAAQ,MAClCP,OAAMM,GAAG/e,EAAEE,SAEd3C,OAAO,CAACC,EAAOyhB,IAAQzhB,EAAMgf,OAAOyC,GAAM,MAIjD,CACE7H,GAAI,eACJE,SAAU,iEACVxS,KAAMyS,OAAU+E,mBAChB7E,KAAM1X,UACJ3C,KAAKoO,wBAA0BpO,KAAK2N,aAAamU,oBAC1C,GAETjH,WAAarS,GACXxI,KAAK6c,eAAe,CAClB,IAAM/B,OAAWlT,SAASY,GAC1B,IAAMsS,OAAWqE,SAAS3W,KAE9BuS,cAAgBC,IAAW,CACzBC,IAAK,eACLC,IAAKF,EAAEtY,IAAIC,UAAQ,UACP3C,KAAK2N,aAAa+G,gBAAgB,0BAA2B9R,EAAEsI,OACzEiS,YAAcnd,KAAK2N,aAAa+G,gBAAgB9R,EAAEsI,MAAOtI,EAAEwI,YAG/D2W,WAAavZ,GAAmBxI,KAAKgiB,mBAAmBxZ,EAAM,6BAC9DgM,QAAS,CAACnO,EAAQ2Z,IAA2BhgB,KAAKiX,qBAAqB+I,IAEzE,CACEhG,GAAI,qBACJE,SAAU,uEACVxS,KAAMyS,OAAU+E,mBAChB+C,QAAStf,gBACD3C,KAAKkiB,8BAA8B7Z,IAClC,GAETmT,UAAYhL,GAAkBxQ,KAAKiV,qBAAqBzE,GACxD2R,iBAAkB,IAAMniB,KAAKyO,yBAA2B,GACxDoM,WAAarS,GACXxI,KAAK6c,eAAe,CAClB,IAAM/B,OAAWlT,SAASY,GAC1B,IAAMsS,OAAWqE,SAAS3W,KAE9BuS,cAAgBC,IAAW,CACzBC,IAAK,eACLC,IAAKF,EAAEnP,OAAOjJ,GAAgB,mBAAXA,EAAEsI,OAClBxI,IAAIC,UAAQ,UACH3C,KAAK2N,aAAa+G,gBAAgB,oBAAqB9R,EAAEsI,OACnEiS,YAAcnd,KAAK2N,aAAa+G,gBAAgB9R,EAAEsI,MAAOtI,EAAEwI,YAG/D2W,WAAavZ,GAAmBxI,KAAKgiB,mBAAmBxZ,EAAM,4BAC9DgM,QAAS,CAACnO,EAAQ2Z,IAA2BhgB,KAAKoX,0BAA0B4I,IAE9E,CACEhG,GAAI,4BACJE,SAAU,mDACVxS,KAAMyS,OAAUiI,QAChBrH,cAAepY,UAAgB,CAC7BsY,IAAK,eACLC,IAAK,UACOlb,KAAK2N,aAAa+G,gBAAgB,oBAAqB,mBACjEyI,YAAcnd,KAAK2N,aAAaoL,eAAe,kBAAmBiC,EAAE5P,UAGxEoQ,UAAYjM,GAAWvP,KAAK4T,QAC1BrE,EAAE8S,mBAAoBzf,GAAiB,oBAAZA,EAAEsI,OAA2C,QAAZtI,EAAEwI,OAEhEyP,WAAaG,GAAcF,OAAWlT,SAASoT,IAEjD,CACEhB,GAAI,kBACJE,SAAU,mBACVxS,KAAMyS,OAAU8F,UAChBpF,WAAarS,GAAcsS,OAAWlT,SAASY,GAC/CuS,cAAgBvS,IAAS,CACvByS,IAAK,eACLC,IAAK,CAAElb,KAAK2N,aAAa+G,gBAAgB,eAAgBlM,EAAK4C,QAAQgU,OAAOpf,KAAKqV,YAAY7M,GAC1F,CAACxI,KAAK2N,aAAa+G,gBAAgB,YAAa,8BAChD,MAENF,QAAS,IAAMxU,KAAKgX,gBAEtB,CACEgD,GAAI,kBACJE,SAAU,yBACVxS,KAAMyS,OAAU+E,mBAChB+C,QAAStf,gBACD3C,KAAKkiB,8BAA8B7Z,IAClC,GAETwS,WAAarS,GACXxI,KAAK6c,eAAe,CAClB,IAAM/B,OAAWlT,SAASY,GAC1B,IAAMsS,OAAWqE,SAAS3W,KAE9BgT,UAAYhL,GAAkBA,EAAS8R,gBAAgBlX,MAAM0F,MAAM,OACnE0D,QAAS,CAACnO,EAAQ2Z,IAA2BhgB,KAAKuX,cAAcyI,GAChEjF,cAAe,CAAClJ,EAAgBrB,KAAkB,CAChDyK,IAAK,eACLC,IAAKrJ,EAAKnP,IAAIC,UAAmB,UACrB3C,KAAK2N,aAAa+G,gBAAgB,uBAAwBlM,EAAK0C,OACzEiS,YAAcnd,KAAK2N,aAAa+G,gBAAgBlM,EAAK0C,MAAO1C,EAAK4C,UAC/DgU,OAAOpf,KAAKmV,cAAc3E,GAAY,GAAK,CAACxQ,KAAK2N,aAAa+G,gBAAgB,YAAa,yBAGnG,CACEsF,GAAI,YACJE,SAAU,YACVxS,KAAMyS,OAAU8F,UAChBpF,WAAarS,GAAcsS,OAAWlT,SAASY,GAC/CgT,UAAYhL,GAAkBxQ,KAAKmV,cAAc3E,GACjD2R,iBAAkB,IAAMniB,KAAKiO,aAAc,EAC3CsU,aAAc,IAAM,eACpBxH,cAAgBvS,IAAS,CACvByS,IAAK,eACLC,IAAKlb,KAAK2N,aAAa+G,gBAAgB,YAAalM,EAAK4C,SAE3D2W,WAAYpf,UACV,GAAI3C,KAAKqV,YAAY7M,GAAO,CAC1B,MAAMmJ,QAAeC,eACnB,YACA,+DACA,GACA,CACE,CAAErK,KAAM,YAAaP,KAAM,QAASC,MAAO,WAC3C,CAAEM,KAAM,UAAWP,KAAM,MAAOC,MAAO,YAG5B,cAAX0K,GAAwB3R,KAAK0N,qBAAqBgF,qBAAqB,CACzE,sBACA,YACA,wBACA,aAGJ,OAAO,GAET8B,QAAS,IAAMxU,KAAK8f,gBAAgB,CAClC,mBACA,eACA,mCAGJ,CACE9F,GAAI,qBACJE,SAAU,sCACVxS,KAAMyS,OAAU8F,UAChB5F,KAAM1X,UACJ3C,KAAK+N,sBAAwB/N,KAAK2N,aAAa6U,0BACxC,GAET3H,WAAarS,GAAcsS,OAAWlT,SAASY,GAC/CgT,UAAW,KAAOxb,KAAK+N,gBACvBgN,cAAgBvS,IAAS,CACvByS,IAAK,eACLC,IAAKlb,KAAK2N,aAAaoL,eAAe,gCAAiCvQ,EAAK4C,SAE9EoJ,QAAUjF,IACR,IAAIiF,EAAoB,GAgBxB,MAfG,MAAM0D,KAAK3I,EAAE+S,gBAAgBlX,SAC9BoJ,EAAU,CACR,mBACA,+BACA,yCAGJA,EAAUA,EAAQ4K,OAAO,CACvB,wDACA,4DACA,gDACA,wDACA,oCACA,2BAEKpf,KAAK8f,gBAAgBtL,QAG7BkH,eAAmB,CACpB1B,GAAI,mBACJE,SAAU,wBACVtS,UAAU,EACViU,QAAS,IAAM7b,KAAKiT,QAAQyN,eAC5B5E,QAAS,IAAM3M,OAAoBwR,iBACnCnF,UAAYjM,GAAWA,EAAEoB,mBAAmBvF,MAAM0F,MAAM,cACxDiL,aAAena,GAAiBA,EAChCsa,WAAY,CACVC,cAAc,EACd4E,oBAAqBC,OAAoBC,wBAG7C,CACEjH,GAAI,qBACJE,SAAU,qBACVtS,UAAU,EACV4T,UAAYjM,GAAWA,EAAEoB,mBAAmBvF,MAAM0F,MAAM,cACxDpJ,KAAMyS,OAAUsI,mBAChBjO,QAAUjF,GAAWvP,KAAK0iB,YAAYnT,GACtCwL,cAAe,CAACtY,EAAiB8M,EAAQkI,KAAW,CAClDwD,IAAK,eACLC,IAAMzY,EAAMC,IAAIC,UAAgB,aAAK3C,KAAK2N,aAAasP,SACrD,qBACA,CACE,YAAkB,OAAJna,QAAI,IAAJA,GAAW,QAAP,EAAJA,EAAMkO,aAAK,WAAP,EAAJ,EAAajO,UAAW,EACtC,gBAAmB,OAAD0U,QAAC,IAADA,OAAC,EAADA,EAAGkL,mBAAoB,KACzC,eAAqB,OAAJ7f,QAAI,IAAJA,OAAI,EAAJA,EAAMsI,QAAS,QAItCiR,OAAQ,CACNuG,OAAQ,CACN1X,MAAO,YACPE,MAAO,sBAIb,CACE4O,GAAI,mBACJE,SAAU,0CACVxS,KAAMyS,OAAU8F,UAChBlF,cAAe,EAAE7P,YAAmB,CAClC+P,IAAI,eACJC,IAAKlb,KAAK2N,aAAaoL,eACrB,6BAA8B7N,KAGlC2P,WAAaxS,GAAayS,OAAWlT,SAASS,GAC9CmT,UAAYjM,GAAWA,EAAEoB,mBAAmBvF,MAAM0F,MAAM,cACxD0D,QAAS,CAACnO,EAAQwF,EAAO,KAAOgX,eAAchX,GAC9CwQ,OAAQ,CACNC,cAAc,EACdwG,oBAAoB,IAGxB,CACE9I,GAAI,sBACJE,SAAU,4BACVxS,KAAMyS,OAAU8F,UAChBpF,WAAarS,GAAcsS,OAAWlT,SAASY,GAC/CuS,cAAgBvS,IAAS,CACvByS,IAAK,eACLC,IAAKlb,KAAK2N,aAAa+G,gBAAgB,sBAAuBlM,EAAK4C,SAErE2W,WAAavZ,IACXxI,KAAKuV,oBAAoB/M,GACzBlG,QAAQygB,IAAI/iB,KAAKgO,oBACV,GAETwG,QAAS,IAAMxU,KAAKgjB,0BAEnBhjB,KAAKijB,oBAAmB,GAC3B,CACEjJ,GAAI,qBACJE,SAAU,qBACVxS,KAAMyS,OAAU8F,UAChBzE,UAAW,IAAM0H,OAAYC,UAC7BtI,WAAarS,GAAcsS,OAAWlT,SAASY,GAC/CuS,cAAgBvS,IAAS,CACvByS,IAAK,eACLC,IAAKlb,KAAK2N,aAAa+G,gBAAgB,qBAAsBlM,EAAK4C,SAEpEoJ,QAAS,IAAMxU,KAAKgX,gBAEtB,CACEgD,GAAI,0BACJC,QAAS,eACTC,SAAU,4CACVxS,KAAMyS,OAAUC,mBAChBC,KAAM1X,UACC3C,KAAK6O,sBACR7O,KAAK4M,cAAgB8N,aAAc1a,KAAKiT,QAAQ0H,mBAChD3a,KAAKyN,oBAAsBoM,OAAMC,IAAI,0BACrC9Z,KAAK8O,gBAAkB9O,KAAK2N,aAAaiN,wBACzC5a,KAAK8N,aAAsC,OAAvB9N,KAAK8O,UAAUqJ,KAAgBnY,KAAK8O,UAAU4K,YAE7D,GAET8B,UAAYjM,IAAYA,EAAEc,qBAAsB,GAAGd,EAAEc,mBAAmBjF,OAAQ0F,MAAM,OACtF+J,WAAarS,GAAiBsS,OAAWlT,SAASY,GAClDuS,cAAgBC,IAAW,CACzBC,IAAK,eACLC,IAAKlb,KAAKuU,sBAAsByG,KAElCG,cAAe,CAACpH,EAAyB3I,EAAeoF,KACtD,MAAM4K,EAAQpb,KAAKsU,qBAAqBP,EAAU3I,GAClD,OAAOpL,KAAKqb,iBAAiBD,EAAMhQ,EAAOoF,IAE5CgE,QAAS,CAAChE,EAAeiH,EAAkB6D,EAAS8H,IAC3CpjB,KAAKiZ,uBAAuBzI,EAAU4S,GAE/C/G,OAAQ,CACN0C,WAAY,CACV,CACExX,KAAM,yBACN8b,uBAAwB,CACtBC,eAAgB,CAACC,EAA0B/O,EAAmBhE,KAC5DxQ,KAAKgO,kBAA2C,aAAvBuV,EAASC,UAC3BxjB,KAAKiZ,uBAAuBzI,EAAUgE,KAGjDrN,QAAS,IACAyK,eACL,mCACA,4CACA,GACA,CACE,CAAErK,KAAM,WAAYP,KAAM,QAASC,MAAO,WAC1C,CAAEM,KAAM,eAAgBP,KAAM,kBCh6CpD,MAAM,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASxC,KAErD,gB,8HCGHwc,E,YCVI,GACZ,CACI9V,MAAO,MACPE,MAAO,GAEX,CACIF,MAAO,MACPE,MAAO,GAEX,CACIF,MAAO,MACPE,MAAO,GAEX,CACIF,MAAO,MACPE,MAAO,GAEX,CACIF,MAAO,MACPE,MAAO,GAEX,CACIF,MAAO,MACPE,MAAO,GAEX,CACIF,MAAO,MACPE,MAAO,GAEX,CACIF,MAAO,MACPE,MAAO,GAEX,CACIF,MAAO,MACPE,MAAO,GAEX,CACIF,MAAO,MACPE,MAAO,IAEX,CACIF,MAAO,MACPE,MAAO,IAEX,CACIF,MAAO,MACPE,MAAO,K,iFDRT,SAAUqY,EAAazJ,EAAYzS,EAAcmc,GAAY,GAC/D,MAAMC,EAAmB,GAEzB,OADID,GAAaC,EAAiBhiB,KAAK,WAChC,CACHqY,KACAE,SAAa3S,EAAH,QACVqc,gBAAiB,KAAM,EACvBlc,KAAMyS,OAAU0J,QAChBxH,OAAQ,CACJyH,eAAgB,CACZ3kB,OACA,CACIwkB,EACA,CAAC,cAOf,SAAUI,EAAc/J,EAAYzS,GACtC,MAAO,CACHyS,KACAE,SAAa3S,EAAH,SACVqc,gBAAiB,KAAM,EACvBlc,KAAMyS,OAAU8F,UAChBzL,QAAS,IAAMwP,GAIjB,SAAUC,EAAYjK,EAAYzS,GACpC,MAAO,CACHyS,KACAE,SAAa3S,EAAH,OACVG,KAAMyS,OAAU+J,gBAChBN,gBAAiB,KAAM,GAIzB,SAAUO,EAA8BnK,EAAYzS,GACtD,MAAO,CACHyS,KACAE,SAAa3S,EAAH,oBACVG,KAAMyS,OAAU8F,UAChB2D,gBAAiB,KAAM,EACvBpP,QAAS,IAAO,CACZ,CAAEtJ,MAAO,eAAgBE,MAAO,KAChC,CAAEF,MAAO,gBAAiBE,MAAO,KACjC,CAAEF,MAAO,gBAAiBE,MAAO,KACjC,CAAEF,MAAO,gBAAiBE,MAAO,KACjC,CAAEF,MAAO,mBAAoBE,MAAO,OAK1C,SAAUgZ,EAAoBpK,EAAYzS,GAC5C,MAAO,CACHyS,KACAE,SAAa3S,EAAH,gBACVG,KAAMyS,OAAUkK,UAChBT,gBAAiB,KAAM,EACvBvH,OAAQ,CACJiI,OAAQtgB,SAKpB,SAASugB,EAAkBpO,GACvB,OAAOzS,SAASyS,GAAK,GAAK,IAAIA,EAAMA,EAGxCxT,eAAe6hB,EAAeC,EAAWC,EAA2BC,GAChE,GAAID,EAAMnC,aAAc,CACpB,MAAM3gB,QAAa8iB,EAAMnC,aAAakC,GACtC,GAAI7iB,EAAM,CACN,MAAOgjB,EAAMC,EAAOC,GAAOljB,EAAKmjB,MAAM,KACtC,OAAOJ,GACH,IAAK,OACD,OAAOC,GAAQ,GACnB,IAAK,QACD,OAAOlhB,SAASmhB,IAAU,GAC9B,IAAK,MACD,OAAOnhB,SAASohB,IAAQ,KAIxC,MAAO,GAGX,SAASliB,EAAEhB,GACP,OAAOiG,OAAQC,2BAA2BlG,GAG9C,SAASojB,EAAepjB,EAAc8iB,EAA2BD,EAAW7Y,GACxE,GAAI8Y,EAAM7I,QAAS,CACf,MAAMoJ,EAAMP,EAAM7I,QAAQ4I,EAAM7Y,GAChC,GAAI,IAAIsZ,KAAKtjB,GAAQ,IAAIsjB,KAAKD,GAC1B,MAAO,CAAC,GAAGriB,EAAEhB,mCAAsCgB,EAAEqiB,MAG7D,GAAIP,EAAM5I,QAAS,CACf,MAAMqJ,EAAMT,EAAM5I,QAAQ2I,EAAM7Y,GAChC,GAAIuZ,GAAO,IAAID,KAAKtjB,GAAQ,IAAIsjB,KAAKC,GACjC,MAAO,CAAC,GAAGviB,EAAEhB,mCAAsCgB,EAAEuiB,OAY3D,SAAUzJ,EAAmBgJ,EAA2BU,EAAQ,IAClE,IAAIC,EAAW,GACXC,EAAY,GACZC,EAAa,GACbC,EAAW,GACXC,GAAkB,EAEtB,MAAMC,EAAS,QAAQhB,EAAM1K,GACvB2L,EAAU,SAASjB,EAAM1K,GACzB4L,EAAQ,OAAOlB,EAAM1K,GACrB6L,EAAgB,gBAAgBnB,EAAM1K,GACtC8L,EAAqB,qBAAqBpB,EAAM1K,GAEhD4K,EAAOnB,EAAaiC,EAAQhB,EAAMxK,SAAUwK,EAAMxI,WAAWC,cAC7D0I,EAAQd,EAAc4B,EAASjB,EAAMxK,UACrC4K,EAAMb,EAAY2B,EAAOlB,EAAMxK,UAE/B6L,EAAc3B,EAAoByB,EAAenB,EAAMxK,UACvD8L,EAAmB7B,EAA8B2B,EAAoBpB,EAAMxK,UAE3E+L,EAAsE,mBAA1CvB,EAAMxI,WAAWgK,sBAC5CxB,EAAMxI,WAAWgK,qBAElBC,EAAqB5W,KACnBA,EAAEmW,IAAWnW,EAAEmW,GAAQta,OACnB,CAAC,WAAW2F,SAASxB,EAAEmW,GAAQta,WAIhCsZ,EAAMlJ,WAAYkJ,EAAMlJ,UAAUjM,IAQvC6W,EAAoB,CAAChb,EAAYib,KACnC,MAAMC,EAAQ,CACV,CAAE5e,KAAM,OAAQ0D,MAAOka,EAAWpf,QAAS,QAC3C,CAAEwB,KAAM,QAAS0D,MAAOma,EAAYrf,QAAS,MAC7C,CAAEwB,KAAM,MAAO0D,MAAOoa,EAAUtf,QAAS,OAE7C,OAAOogB,EAAMnmB,OAAO,CAAComB,EAAiBC,KAClC,MAAMC,EAAK,CAAC,UAAM9Q,EAAW,UAAW,IAcxC,OAbI0Q,IAASG,EAAM9e,KACX+e,EAAG1V,SAAS3F,GACZmb,EAAW5kB,KAAK6kB,EAAMtgB,SAEtBqgB,EAAW5kB,KAAKyJ,GAGhBqb,EAAG1V,SAASyV,EAAMpb,OAClBmb,EAAW5kB,KAAK6kB,EAAMtgB,SAEtBqgB,EAAW5kB,KAAK6kB,EAAMpb,OAGvBmb,GACR,IAAIG,KAAK,MAGU,oBAAfhC,EAAMrK,OAAqBuK,EAAKvK,KAAOqK,EAAMrK,MAGxDuK,EAAK+B,sBAAyBne,GAAc,GAAGoc,EAAK1K,aAAakM,EAAsB,OAAJ5d,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,MAAO,WAEhG0Z,EAAK3K,QAAUyK,EAAM1K,GAErB4K,EAAKhH,OAAU5C,GAAcsK,EAAYtK,EAAE5P,MAAMkK,WAEjDsP,EAAKvI,OAAS,IAAKuI,EAAKvI,UAAWqI,EAAMrI,QAEzCuI,EAAKrC,aAAgBhT,GAAWiV,EAAejV,EAAGmV,EAAO,QAEzDE,EAAKpJ,UAAajM,IAAWmV,EAAMlJ,WAC7BkJ,EAAMlJ,UAAUjM,GAGtBqV,EAAK/J,WAAa,CAACG,EAAWzL,EAAQkI,KAClC,GAAIiN,EAAM9c,UAAYgf,OAAoBhf,SAASoT,GAC/C,MAAO,CAAC,wBAEZ,MAAM4J,EAAO5J,EAAIA,EAAE5P,MAAQ,GAC3B,IAAKsZ,EAAMxI,WAAWC,cACfyI,EAAKtP,WAAWxE,MAAM,YACzB,MAAO,CAAC,kCAGZ,GAAI8T,IAAS,CAAC,WAAW7T,SAAS6T,IAC3BiC,MAAMjC,IACNA,EAAO,KACV,MAAO,CAAC,gBAGZ,GAAIA,GAAiC,oBAAlBF,EAAM7I,QAAwB,CAC7C,MAAMiL,EAAUjf,OAAQkf,QAAQrC,EAAM7I,QAAQtM,EAAGkI,IACjD,GAAI/T,SAASkhB,GAAekC,EACxB,MAAO,CAAC,WAAWlC,kCAAqCkC,KAIhE,GAAIlC,GAAiC,oBAAlBF,EAAM5I,QAAwB,CAC7C,MAAMqJ,EAAMT,EAAM5I,QAAQvM,EAAGkI,GAC7B,GAAI0N,GAAOP,EAAO/c,OAAQkf,QAAQ5B,GAC9B,MAAO,CAAC,WAAWP,6BAAgC/c,OAAQkf,QAAQ5B,MAI3E,OAAO,MAOXP,EAAKoC,gBAAkB,KAAM,CACzB9b,MAAOwZ,EAAMuC,cAAgBvC,EAAMxK,SACnC9O,MAAOia,EAAWziB,EAAEyiB,GAAY,YAKpCT,EAAKhB,gBAAkB,CAACvd,EAAQ6gB,IAAgBA,IAAQxC,EAAM1K,GAO9D4K,EAAK7J,cAAiB1S,IAClB,GAAIgd,EAAU,CACV,MAAOhf,EAAGwe,EAAOC,GAAOO,EAASN,MAAM,KAEvC,OADAM,EAAW,GAAGhd,EAAI+C,SAASyZ,KAASC,IAC7BJ,EAAM3I,aAAasJ,GAAU,GAExC,GAAIhd,GAAqB,YAAdA,EAAI+C,MAEX,OADAia,EAAW,GACJX,EAAM3I,aAAa,WAAW,IAK7C8I,EAAM8B,sBAAyBne,GAAc,GAAGqc,EAAM3K,aAAakM,EAAsB,OAAJ5d,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,MAAO,YAElG2Z,EAAM5K,QAAUyK,EAAM1K,GAEtB6K,EAAMjH,OAAU5C,GAAcuK,EAAahB,EAAkBvJ,EAAE5P,MAAMkK,YAErEuP,EAAMrJ,UAAajM,GAAY4W,EAAkB5W,GAEjDsV,EAAMhK,WAAcG,GAAc4L,OAAoBhf,SAASoT,GAE/D6J,EAAMtC,aAAgBhT,GAAWiV,EAAejV,EAAGmV,EAAO,SAGtDuB,IACApB,EAAMrQ,QAAU,IAAM,IAAIwP,EAAc,CAAE9Y,MAAO,UAAWE,MAAO,aASvEyZ,EAAM9J,cAAgB,CAAC1S,EAAakH,KAEhC,IAAI,GAAGlH,EAAI+C,OAAQ0F,MAAM,YAErB,OADAuU,EAAc9V,EAAEmW,GAAQta,MAAb,SACJsZ,EAAM3I,aAAasJ,GAAU,GAGxC,GAAIA,EAAU,CACV,MAAOT,EAAMve,EAAGye,GAAOO,EAASN,MAAM,KAChCF,EAAQN,EAAkB,GAAGlc,EAAI+C,OAEvC,OADAia,EAAW,GAAGT,KAAQC,KAASC,IACxBJ,EAAM3I,aAAasJ,GAAU,KAI5CP,EAAI7K,QAAUyK,EAAM1K,GAEpB8K,EAAI6B,sBAAyBne,GAAc,GAAGsc,EAAI5K,aAAakM,EAAsB,OAAJ5d,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,MAAO,UAE9F4Z,EAAItJ,UAAajM,KAAY,GAAGA,EAAEoW,GAASva,OAAQ0F,MAAM,aAAeqV,EAAkB5W,GAE1FuV,EAAIjK,WAAc,CAACG,EAAWzL,EAAQkI,IAC9BmP,OAAoBhf,SAASoT,GACtB,CAAC,6BAEZyK,KAAkB,GAAGzK,EAAE5P,OAAQ0F,MAAM,YAErC0U,EAAWC,EAAkB,KAAQlB,EAAkB,GAAGvJ,EAAE5P,OAC5Dia,EAAW,GAAGC,KAAaC,KAAcC,IAClCR,EAAeK,EAAUX,EAAOnV,EAAGkI,IAG9CqN,EAAIvC,aAAgBhT,GAAWiV,EAAejV,EAAGmV,EAAO,OAExDI,EAAI/J,cAAgB,IACT2J,EAAM3I,aAAasJ,EAAUI,GAGxCX,EAAIlH,OAAS,CAAChb,EAAQuT,EAAQ5G,EAAQkI,KAC9BiN,EAAM9G,QAAQ8G,EAAM9G,OAAOhb,EAAGuT,EAAG5G,EAAGkI,IAG5CqN,EAAI/C,WAAa,CAAC/G,EAAQzL,KACdmV,EAAM3C,YAER2C,EAAM3C,WAAWsD,EAAU9V,GAGrCuV,EAAIzI,OAAS,CAGTuI,KAAOrV,GAAWA,EAAEmW,GAAQta,MAC5ByZ,MAAQtV,GAAWA,EAAEoW,GAASva,OAI7B6a,IAAoBnB,EAAIzI,OAAO8K,gBAAkB,IAEtD,MAAMC,EAAyB,CAAC7X,EAAQ8X,KACpC,MAAMC,EAAa,CACK,YAApB/X,EAAEmW,GAAQta,OACVsZ,EAAMlJ,WAAYkJ,EAAMlJ,UAAUjM,GAClCmV,EAAMxI,WAAW6E,sBAAwBsG,GAE7C,OAAOC,EAAW3O,MAAMC,UA6D5B,OAzDAmN,EAAY9L,QAAUyK,EAAM1K,GAE5B+L,EAAYlL,WAAa,CAACG,EAAWzL,EAAQkI,KACzC,GAAIuD,GAAKA,EAAE5P,MAAQ,IACf,MAAO,CAAC,4DAEZ,GAAIyb,MAAMnjB,SAASsX,EAAE5P,MAAMkK,aACvB,MAAO,CAAC,+BAEZ,MAAMiS,EAAmB,qCACzB,IAAIvM,EAAE5P,MAAMkK,WAAWxE,MAAMyW,GACzB,MAAO,CAAC,4BAEZ,MAAM3C,EAAO4C,IAAM7nB,OAAQghB,kBACtB8G,SAASzM,EAAE5P,MAAiB,SAC5BwZ,OAEL,OADAS,EAAcT,EAAH,SACJI,EAAeK,EAAUX,EAAOnV,EAAGkI,IAG9CsO,EAAYvK,UAAaiJ,GAAc2C,EACnC3C,EAAMzD,EAAoB0G,oBAG9B3B,EAAYhL,cAAgB,IAAM2J,EAAM3I,aAAasJ,GAAU,GAE/DU,EAAYhE,WAAa,CAAC/G,EAAQzL,KACtBmV,EAAM3C,YAER2C,EAAM3C,WAAWsD,EAAU9V,GAIrCyW,EAAiB/L,QAAUyK,EAAM1K,GAEjCgM,EAAiBnL,WAAa,CAACG,EAAWzL,EAAQkI,IAC1CmP,OAAoBhf,SAASoT,GACtB,CAAC,8BAEZqK,EAAWmC,IAAM7nB,OAAQghB,kBACpB8G,SAASzM,EAAE5P,MAAiB,OAC5Buc,OAAOC,QACL5C,EAAeK,EAAUX,EAAOnV,EAAGkI,IAG9CuO,EAAiBxK,UAAaiJ,GAAc2C,EACxC3C,EAAMzD,EAAoBC,sBAG9B+E,EAAiBjL,cAAgB,IAAM2J,EAAM3I,aAAasJ,GAAU,GAEpEW,EAAiBjE,WAAa,CAAC1b,EAAQkJ,KAC3BmV,EAAM3C,YAER2C,EAAM3C,WAAWsD,EAAU9V,GAG9B,CACHqV,EACAC,EACAC,EACAiB,EACAC,IAxbR,SAAYhF,GACRA,6CACAA,yDAFJ,CAAYA,MAAmB,M,kCEV/B,W,kCCAA,4SAIOre,eAAekgB,EAAchX,EAAO,IACvC,MAAMgc,QAAmBC,OAAgBjF,cAAc,CAACtb,KAAMsE,IAC9D,OAAOgc,EAAWhc,OAAQ0D,IAAYQ,qBAAQR,IAAsB,IAAhBA,EAAEhI,KAAKwgB,QACtDrlB,IAAKslB,IAAa,CACf9c,MAAO8c,EAASzgB,KAChB6D,MAAO4c,EAASC,YAChBjX,MAAOgX,KAIZrlB,eAAeulB,EAAiBrc,EAAO,IAC1C,MAAMgc,QAAmBC,OAAgBK,QAAQ,CAAC,YAAetc,IACjE,OAAOgc,EAAWnlB,IAAKslB,IAAa,CAC5B9c,MAAO8c,EACP5c,MAAO4c,KAIZrlB,eAAeylB,EAAiBvc,EAAO,IAC1C,MAAMwc,QAAcP,OAAgBjF,cAAc,CAC9Ctb,KAAMsE,EACNoP,IAAK,4BAGT,OAAOoN,EAAM3lB,IAAK4lB,IAAS,CACvBpd,MAAOod,EAAK/gB,KACZ6D,MAAOkd,EAAK/gB,KACZyJ,MAAOsX,KAIR3lB,eAAe4lB,IAClB,MAAMC,QAAgBV,OAAgBS,uBACtC,OAAOC,EAAQ9lB,IAAK+lB,IAAW,CAC3Bvd,MAAOud,EAAOlhB,KACd6D,MAAOqd,EAAOlhB,KACdyJ,MAAOyX,KAIR9lB,eAAe+lB,IAClB,MAAMC,QAAgBb,OAAgBY,aACtC,OAAOC,EAAQjmB,IAAKkmB,IAAW,CAC3B1d,MAAO0d,EAAOrhB,KACd6D,MAAOwd,EAAOC,UACd7X,MAAO4X,KAIRjmB,eAAemmB,EAAaC,GAC/B,MAAMC,QAAkBlB,OAAgBgB,aAAaC,GACrD,OAAOC,EAAUtmB,IAAKumB,IAAa,CAC/B/d,MAAO+d,EAAS1hB,KAChB6D,MAAO6d,EAASC,YAChBlY,MAAOiY,KAIRtmB,eAAewmB,EAA0BC,EAAoB7hB,EAAK,IACrE,MAAM8hB,QAAYvB,OAAgBqB,0BAA0BC,EAAY7hB,GACxE,OAAO8hB,EAAI3mB,IAAK4mB,IAAO,CACnBpe,MAAOoe,EAAG/hB,KACV6D,MAAOke,EAAGC,yBACVvY,MAAOsY,KAIR3mB,eAAe6mB,EAAYC,EAAgCliB,EAAK,IACnE,MAAMmiB,QAAiB5B,OAAgB0B,YAAYC,EAAwBliB,GAC3E,OAAOmiB,EAAShnB,IAAKinB,IAAY,CAC7Bze,MAAOye,EAAQpiB,KACf6D,MAAOue,EAAQC,WACf5Y,MAAO2Y,O,kCC5Ef,W,wMCOM,MAAOE,UAAyBppB,OAGlCb,YAAYc,EAAmBC,GAC3Bd,MAAMa,EAAW,GAAIC,GAAY,sFACjCX,KAAK8pB,UAAY,GACjB9pB,KAAK+pB,gBAAkB,GAG3B,0BACI,MAAMnoB,EAAO,IAAIsjB,KAAKllB,KAAK4B,MAC3BA,EAAKoa,QAAQpa,EAAK4P,UAAY,GAC9B,MAAM5O,EAAKhB,GAAwBiG,OAAQwJ,oBAAoBzP,GACzDa,QAAchC,OAAoBR,QACpC,YAAYD,KAAKU,2BAA4B,CAAEkB,KAAMgB,EAAEhB,KAE3D,GAAIa,EAAO,CACPzC,KAAK+pB,gBAAkBtnB,EAAMtC,OAAO,CAAC6pB,EAA6BlnB,KACtDknB,GAAgB,IAAI9E,KAAKtiB,EAAEE,EAAKmnB,MAAMC,aAAe,IAAIhF,KAAK8E,GAC/DpnB,EAAEE,EAAKmnB,MAAMC,YACdF,EACP,MACH,MAAMG,EAAWC,OAAoBC,oBAAoB3nB,IAAKE,GAAWA,EAAEG,SAC3E/C,KAAK8pB,UAAYrnB,EAAMoJ,OAAQ/I,IAC3BqnB,EAASpZ,SAASjO,EAAKA,KAAK,aAAeF,EAAEE,EAAKmnB,MAAMC,cAAgBlqB,KAAK+pB,kBAKzFO,iBAAmB,OAAOtqB,KAAK+pB,gBAE/BQ,eAAiB,OAAOvqB,KAAK8pB,UAE7BU,sBAAwB,OAAQza,qBAAQ/P,KAAK8pB,WAE7CW,kBAAkBnpB,EAAiBopB,GAC/B,OAAO1qB,KAAK2qB,iBAAiB,sCAAuCD,EAAW,KAAMppB,GAGzF,wBAAwBA,EAAiBxB,EAAgB8qB,GACrD,MAAMxhB,QAAgB3I,OAAoB4I,aAAa,kBAAkB,GACzE,MAAO,CACH,WAAcD,EACd,cAAiBwhB,EACjB,WAAc9qB,EACd,eAAkB,IAClB,SAAYwB,EACZ,UAAatB,KAAKU,UAClB,aAAgBD,OAAoBkgB,kBAI5CkK,gBAAgBD,GACZ,OAAOA,GAAa,IAAMA,GAAa,IAG3CE,mBAAmBC,EAAeC,EAAeC,GAC7C,OAAOC,KAAKC,MAAM,KAAOJ,EAAQC,IAAUD,EAAQE,IAGvDG,kBACIL,EACAM,EACAC,EACAC,GAEA,MAAMC,EAAyB,OAAdD,EAAqB,OAAS,MACzCE,EAAWzrB,KAAK0rB,gBAAgBJ,EAAWE,GACjD,OAAQT,EAASU,EAAWE,WAAWN,EAAoB/V,YAG/DoW,gBAAgBE,EAAeJ,GAC3B,OAAOhE,IAAMxnB,KAAK4B,MAAMiqB,KAAKD,EAAOJ,GAGxCM,6BAA6Bb,EAAkBc,GAC3C,MAAMC,EAAOL,WAAWV,GAAYU,WAAWI,GAC/C,OAAQC,EAAM,GAAa,EAAPA,EAAY,UAAcA,EAAM,U,4BC1E7C1kB,+BAAgB,CAC3BmF,OAAQ,CAACwf,QACTzjB,KAAM,KAAM,CACRoiB,UAAW,GACX1a,QAAS,GACTgc,2BAA2B,EAC3BC,wBAAyB,KAE7B/jB,QAAS,CACL,4BACUpI,KAAK4qB,UAAUlb,kBACrB,MAAMlH,QAAaxF,QAAQC,IAAI,IAAIjD,KAAKkQ,WAAYlQ,KAAKmsB,0BACnDjR,QAAYlb,KAAK4qB,UAAU3a,oBAAoBzH,GAErD,IAAK0S,EAAK,OAAOvL,eAAa,wCAElCyc,qBAAqB5jB,GACjB,MAAM6jB,EAAYrsB,KAAK4qB,UAAUN,iBAC3BgC,EAActsB,KAAK4qB,UAAUc,gBAAgBW,EAAW,OACxDE,EAAa,gBAAgB1kB,OAAQC,2BAA2BukB,yBAC/DC,kBACDE,EAAY,CAAC,CAAEC,QAAS,CAAC,EAAG,EAAG,GAAI5iB,MAAO,qBAC1C6iB,EAAkB,GAClBtL,EAAU,CAACmL,GACXhL,EAAO,CACT,CAAC,gBACD,CAAC,cACD,CAAC,YACD,CAAC,kBACD,CAAC,YACD,CAAC,oBACD,CAAC,aACD,CAAC,iCACD,CAAC,kBACD,CAAC,kBAgCL,OA9BA/Y,EAAKmkB,QAAQ,CAAC1C,EAAYrf,KACtB,MAAM2gB,EAAYvrB,KAAK4sB,gBAAgB3C,EAAMsB,WACvCsB,EAAgB7sB,KAAK8sB,kBAAkB7C,GACvCW,EAAY5qB,KAAK4qB,UAAUE,mBAC7Bb,EAAMpoB,SAAUooB,EAAMnN,aAAc+P,GAElCE,EAAkB/sB,KAAK4qB,UAAUC,gBAAgBD,GACjD,iBACA,kBACAoC,EAAmBhtB,KAAK4qB,UAAUkB,6BACpCe,EAAe5C,EAAMnN,cAEzBsE,EAAQzf,KAAKsoB,EAAMnnB,KAAKyE,MACxBga,EAAK,GAAG5f,KAAK,IACb4f,EAAK,GAAG5f,KAAKsoB,EAAMpoB,UACnB0f,EAAK,GAAG5f,KAAK,GAAGsoB,EAAMgD,4BAA4B1B,SAClDhK,EAAK,GAAG5f,KAAK,IACb4f,EAAK,GAAG5f,KAAKkrB,EAAgB,EAAI,EAAIA,GACrCtL,EAAK,GAAG5f,KAAKsoB,EAAMnN,cACnByE,EAAK,GAAG5f,KAAK,IACb4f,EAAK,GAAG5f,KAAKqrB,GACbzL,EAAK,GAAG5f,KAAQipB,EAAH,KACbrJ,EAAK,GAAG5f,KAAKorB,GAEbL,EAAW/qB,KAAK,CACZiJ,MAAOA,EAAM,EACbsiB,IAAK,EACLrjB,MAAOkjB,EAAgBjc,MAAM,SAAW,qBAAuB,wBAGhE,CACH,CACI5F,MAAO,sBACPE,MAAM,QACN4F,MAAO,CAAEoQ,UAASG,OAAMiL,YAAWE,iBAI/CE,gBAAgBrB,GACZ,OAAO,GAAGA,GAAYza,MAAM,QAClB,OACA,GAAGya,GAAYza,MAAM,WACrB,KACAya,GAEduB,kBAAkBlqB,GACd,OAAO5C,KAAK4qB,UAAUQ,kBAClBxoB,EAAEf,SACFe,EAAEqqB,sBACFrqB,EAAEqnB,MAAMC,WACRlqB,KAAK4sB,gBAAgBhqB,EAAE2oB,aAG/BtI,mBAAmBkK,GAAiB,GAChC,MAAO,CACH,CACInT,GAAI,gBACJE,SAAU,sCACVxS,KAAMyS,OAAUsI,mBAChBpI,KAAM1X,UACF3C,KAAK4qB,UAAY,IAAIf,EAAiB7pB,KAAKU,UAAWV,KAAKW,kBACrDX,KAAK4qB,UAAUwC,qBACd,GAEX5R,UAAW,KAAM2R,GAAmBntB,KAAK4qB,UAAUJ,sBACnD3P,WAAaxS,IACT,GAAIyS,OAAWlT,SAASS,GAAM,MAAO,CAAC,sBAEtC,MAAMglB,EAAQhlB,EAAI3F,IAAKhB,GAA0B,KAAZA,EAAE0J,OAEvC,OAAQiiB,EAAMtQ,KAAKnE,SAAW,CAAC,2BAA6B,MAEhEgF,OAAQjb,UACJ3C,KAAKkQ,QAAU,GACf1H,EAAKmkB,QAAQhqB,UACT,MAAM,KAACG,EAAI,MAAEmnB,GAAU5hB,EAAI2I,MACrBxI,EAAO,IAAKH,EAAI2I,MAAO8L,aAAczU,EAAI+C,OACzCwf,EAAY5qB,KAAK4qB,UAAUE,mBAC7BtiB,EAAK3G,SAAU2G,EAAKsU,aAAc9c,KAAK8sB,kBAAkBtkB,IAE7DxI,KAAKkQ,QAAQvO,KACT3B,KAAK4qB,UAAU0C,kBAAkBrD,EAAMsD,SAAUzqB,EAAKC,QAAS6nB,IAEnE5qB,KAAKkQ,QAAQvO,KACT3B,KAAK4qB,UAAUH,kBAAkBR,EAAMsD,SAAUllB,EAAI+C,QAGpDpL,KAAKksB,4BACNlsB,KAAKksB,2BAA6BlsB,KAAK4qB,UAAUC,gBAAgBriB,OAI7EgM,QAAUgZ,GACDzd,qBAAQyd,EAAMC,eAGZztB,KAAK4qB,UAAUL,eAAe7nB,IAAK8F,IAAS,CAC/C0C,MAAO1C,EAAK1F,KAAKyE,KACjB6D,MAAO,GACP4F,MAAO,IACAxI,MANAglB,EAAMC,eAWzB,CACIzT,GAAI,mBACJE,SAAU,gBACVxS,KAAMyS,OAAUuT,gBAChBlS,UAAW,KAAM2R,GAAmBntB,KAAK4qB,UAAUJ,sBACnDhW,QAAU5R,GAAW5C,KAAKosB,qBACtBxpB,EAAE6qB,cAAc/qB,IAAKhB,IAAS,IACvBA,EAAEsP,MAAO8L,aAAcpb,EAAE0J,UAGpCiR,OAAQ,CACJyC,iBAAkB,CACd,WAIZ,CACI9E,GAAI,yBACJE,SAAU,mCACVxS,KAAMyS,OAAU8F,UAChBzE,UAAW,IAAMxb,KAAKksB,0BACtBrR,WAAaxS,GAAgByS,OAAWlT,SAASS,GACjDuV,OAAQ,EAAGxS,YACPpL,KAAKmsB,wBAA0B,CAAEnsB,KAAK4qB,UAAUlW,gBAC5C,sCAAuCtJ,KAG/CoJ,QAAS,IAAM,CACX,CAAEtJ,MAAO,MAAOE,MAAO,OACvB,CAAEF,MAAO,KAAME,MAAO,aCjL9C,MAAMnC,EAAc,EAEL","file":"js/chunk-3341b6b5.f35291f2.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","import { Service } from \"@/services/service\";\n\nexport class StockService extends Service {\n    constructor() {\n        super()\n    }\n\n    static async fetchAvailableDrugStock(drugId: number) {\n        const stock = await this.getJson('pharmacy/items', { 'drug_id': drugId })\n        if (stock && stock.length > 0) {\n            return stock.reduce((accum: number, pharm: any) => accum + pharm.current_quantity, 0);\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { StockService } from \"./stock_service\";\nimport ART_PROP from '@/apps/ART/art_global_props';\n// ripped from old ART system\nexport const DRUG_PACK_SIZES: Record<string, any> = {\n    '11': [ 30 ],\n    '21': [ 25 ],\n    '22': [ 60 ],\n    '24': [ 30, 60, 90, 100 ],\n    '30': [ 90 ],\n    '39': [ 60 ],\n    '73': [ 120 ],\n    '74': [ 60 ],\n    '76': [ 1000 ],\n    '297': [ 30, 60, 90 ],\n    '576': [ 30, 60, 90 ],\n    '613': [ 60 ],\n    '731': [ 60 ],\n    '732': [ 60 ],\n    '733': [ 60 ],\n    '734': [ 30 ],\n    '735': [ 30 ],\n    '736': [ 60 ],\n    '738': [ 60 ],\n    '931': [ 12, 30, 60 ],\n    '932': [ 30 ],\n    '954': [ 60 ],\n    '963': [ 30, 60, 90 ],\n    '968': [ 60 ],\n    '969': [ 30 ],\n    '971': [ 30,60,90 ],\n    '976': [ 60 ],\n    '977': [ 30 ],\n    '982': [ 30 ],\n    '983': [ 30, 90 ],\n    '1039': [ 30,60,90 ],\n    '1043': [ 60 ],\n    '1044': [ 30],\n    '1056': [ 24 ],\n    '1216': [3, 6, 12]\n}\n\nexport class DispensationService extends AppEncounterService {\n    drugHistory: Array<any>;\n    currentDrugOrder: Array<any>;\n    useDrugManagement: boolean; \n    constructor(patientID: number, providerID: number) {\n        super(patientID, 54, providerID)\n        this.drugHistory = []\n        this.currentDrugOrder = []\n        this.useDrugManagement = false\n    }\n\n    setIsDrugManagementEnabled(isEnabled: boolean) {\n        this.useDrugManagement = isEnabled\n    }\n\n    async loadDrugManagementEnabled() {\n        this.useDrugManagement = await ART_PROP.drugManagementEnabled()\n    }\n\n    getDrugHistory() {\n        return this.drugHistory\n    }\n\n    getCurrentOrder() {\n        return this.currentDrugOrder\n    }\n\n    buildDispensations(orderId: number, tabs: number, totalPacks: number) {\n        const dispensations = []\n        for(let i=0; i < totalPacks; i++) {\n            dispensations.push({\n                'drug_order_id': orderId,\n                date: this.date,\n                quantity: (tabs / totalPacks)\n            })\n        }\n        return dispensations\n    }\n\n    saveDispensations(dispensations: Array<any>) {\n        return AppEncounterService.postJson('/dispensations', { \n            dispensations, \n            'program_id': AppEncounterService.getProgramID()\n        })\n    }\n\n    async voidOrder(orderId: number) {\n        return AppEncounterService.void(`/dispensations/${orderId}`, {})\n    }\n\n    async loadDrugHistory() {\n        try {\n            const res = await DrugOrderService.getDrugOrderHistory(this.patientID)\n            if (res) this.drugHistory = res\n        } catch (e) {\n            console.warn(e)\n        }\n    }\n\n    async loadCurrentDrugOrder() {\n        const res = await DrugOrderService.getDrugOrders(this.patientID)\n        if (res) {\n            if (this.useDrugManagement) {\n                const drugs = res.map(async (d: any) => {\n                    d['available_stock'] = await StockService.fetchAvailableDrugStock(d.drug.drug_id)\n                    return d\n                })\n                this.currentDrugOrder = await Promise.all(drugs)\n                return\n            }\n            this.currentDrugOrder = res\n        }\n    }\n\n    getDrugPackSizes(drugId: number) {\n        if (drugId in DRUG_PACK_SIZES) {\n            return DRUG_PACK_SIZES[drugId]\n        }\n        return [30, 60, 90]\n    }\n\n    // Ripped from old ART system for backwards compatibility purposes\n    calcCompletePack(drug: any, units: number) {\n        //sorting in an ascending order by tabs\n        const drugOrderBarcodes = drug.barcodes.sort((a: any, b: any) => a.tabs - b.tabs); \n        if (drugOrderBarcodes.length == 0 || units == 0.0) return units;\n        for (const i in drugOrderBarcodes) {\n            const { tabs } = drugOrderBarcodes[i]\n            if (parseInt(tabs) >= units) return tabs;\n        }\n        const completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n        return completePack\n    }\n}\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"VL milestone has been reached\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createElementVNode(\"p\", null, \"ART start date : \" + _toDisplayString(_ctx.artStartDate), 1),\n        _createElementVNode(\"p\", null, \"Months on ART: \" + _toDisplayString(_ctx.monthsOnART), 1),\n        _createElementVNode(\"p\", null, \"Last VL order date \" + _toDisplayString(_ctx.lastOrder), 1),\n        _createElementVNode(\"p\", null, \"Current regimen / start date: \" + _toDisplayString(_ctx.currentRegimen) + \" - \" + _toDisplayString(_ctx.regimenStartDate), 1)\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              slot: \"end\",\n              color: \"success\",\n              size: \"large\",\n              onClick: _cache[0] || (_cache[0] = ($event: any) => (_ctx.closeModal('order')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Order VL\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_button, {\n              slot: \"end\",\n              size: \"large\",\n              onClick: _cache[1] || (_cache[1] = ($event: any) => (_ctx.closeModal('wait')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Wait till next milestone\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_button, {\n              slot: \"start\",\n              color: \"danger\",\n              size: \"large\",\n              onClick: _cache[2] || (_cache[2] = ($event: any) => (_ctx.closeModal('later')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Remind me later \")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  modalController,\n  IonFooter\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport HisDate from \"@/utils/Date\";\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    VLData: {\n      type: Object as any,\n      required: true\n    },\n    \n  },\n  async created() {\n    this.artStartDate = HisDate.toStandardHisDisplayFormat(this.VLData.earliest_start_date);\n    this.monthsOnART = this.VLData.period_on_art;\n    this.lastOrder = this.VLData.last_order_date ? HisDate.toStandardHisDisplayFormat(this.VLData.last_order_date) : 'N/A';\n    this.currentRegimen = this.VLData.current_regimen.name ? this.VLData.current_regimen.name : 'Other';\n    this.regimenStartDate = HisDate.toStandardHisDisplayFormat(this.VLData.current_regimen.date_started);\n  },\n  methods: {\n   async closeModal(val: string) {\n    await modalController.dismiss(val);\n   } \n  },\n  data() {\n    return {\n      content: \"Content\",\n      artStartDate: \"\",\n      monthsOnART: \"\",\n      lastOrder: \"\",\n      currentRegimen: \"\",\n      regimenStartDate: \"\" \n    };\n  },\n  components: {\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonFooter,\n    IonButton,\n  },\n});\n","import { render } from \"./VLReminderModal.vue?vue&type=template&id=10a26cd2&scoped=true&ts=true\"\nimport script from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\nexport * from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\n\nimport \"./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-10a26cd2\"]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nexport class ARTLabService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 13, providerID);\n  }\n  async buildDefferedOrder(milestone: any) {\n    const concept = await AppEncounterService.getConceptID(\"HIV viral load\");\n    const coded = await AppEncounterService.getConceptID(\"Delayed milestones\");\n\n    return [\n      {\n        'concept_id': concept,\n        'value_text': \"Wait till next milestone\",\n        'value_coded': coded,\n        'value_numeric': milestone,\n      }]\n  }\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, createBlock as _createBlock, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-546674a2\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { style: {} }\nconst _hoisted_2 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"side-title\" }, \" Select reason \", -1))\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Current Medication\", -1))\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Previous Medication\", -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_label = _resolveComponent(\"ion-label\")!\n  const _component_ion_item = _resolveComponent(\"ion-item\")!\n  const _component_ion_list = _resolveComponent(\"ion-list\")!\n  const _component_ion_col = _resolveComponent(\"ion-col\")!\n  const _component_ion_radio = _resolveComponent(\"ion-radio\")!\n  const _component_ion_radio_group = _resolveComponent(\"ion-radio-group\")!\n  const _component_ion_row = _resolveComponent(\"ion-row\")!\n  const _component_ion_grid = _resolveComponent(\"ion-grid\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"Side effects suspected causes\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_grid, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_row, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_ion_col, { size: \"4\" }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_ion_list, { style: {overflowY: 'auto', height:'78vh'} }, {\n                      default: _withCtx(() => [\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.sides, (data, index) => {\n                          return (_openBlock(), _createBlock(_component_ion_item, {\n                            key: data,\n                            onClick: ($event: any) => (_ctx.selectSideEffect(index)),\n                            detail: true,\n                            style: _normalizeStyle(_ctx.activeIndex === index ? 'color: green': 'color: black')\n                          }, {\n                            default: _withCtx(() => [\n                              _createVNode(_component_ion_label, null, {\n                                default: _withCtx(() => [\n                                  _createTextVNode(_toDisplayString(data.label), 1)\n                                ]),\n                                _: 2\n                              }, 1024)\n                            ]),\n                            _: 2\n                          }, 1032, [\"onClick\", \"style\"]))\n                        }), 128))\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_ion_col, { style: {overflowY: 'auto', height:'78vh'} }, {\n                  default: _withCtx(() => [\n                    _createElementVNode(\"div\", _hoisted_1, [\n                      _createVNode(_component_ion_list, null, {\n                        default: _withCtx(() => [\n                          (_ctx.activeIndex !== null)\n                            ? (_openBlock(), _createBlock(_component_ion_radio_group, {\n                                key: 0,\n                                modelValue: _ctx.sides[_ctx.activeIndex]['reason'],\n                                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.sides[_ctx.activeIndex]['reason']) = $event))\n                              }, {\n                                default: _withCtx(() => [\n                                  _hoisted_2,\n                                  _hoisted_3,\n                                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs, (drug, i) => {\n                                    return (_openBlock(), _createBlock(_component_ion_item, { key: i }, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, null, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(_toDisplayString(drug.drug.name), 1)\n                                          ]),\n                                          _: 2\n                                        }, 1024),\n                                        _createVNode(_component_ion_radio, {\n                                          slot: \"start\",\n                                          value: drug.drug_inventory_id\n                                        }, null, 8, [\"value\"])\n                                      ]),\n                                      _: 2\n                                    }, 1024))\n                                  }), 128)),\n                                  _hoisted_4,\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withCtx(() => [\n                                          _createTextVNode(\"Other, not drug related\")\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"other\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  }),\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withCtx(() => [\n                                          _createTextVNode(\"Drug side effect\")\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"drug\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  })\n                                ]),\n                                _: 1\n                              }, 8, [\"modelValue\"]))\n                            : _createCommentVNode(\"\", true)\n                        ]),\n                        _: 1\n                      })\n                    ]),\n                    _hoisted_5\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.closeModal,\n              slot: \"end\",\n              color: \"danger\"\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Close \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\"]),\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.postSideEffects,\n              slot: \"end\",\n              disabled: !_ctx.allSelected\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Save \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\", \"disabled\"])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  IonLabel,\n  modalController,\n  IonList,\n  IonItem,\n  IonRadioGroup,\n  IonRow,\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { ActivityInterface } from \"@/apps/interfaces/AppInterface\"\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    sideEffects: {\n      type: Object as PropType<ActivityInterface[]>,\n      required: true\n    },\n    drugs: {\n      type: Array as any, \n      default: []\n    },\n  },\n  methods: {\n    closeModal() {\n      modalController.dismiss()\n    },\n    async postSideEffects() {\n      await modalController.dismiss(this.sides);\n    },\n    selectSideEffect(index: number) {\n      this.activeIndex = index;\n    },\n    \n  },\n  computed: {\n    allSelected(): any {\n      return this.sides.filter((side: any) => side['reason']).length === this.sides.length\n    }\n  },\n  mounted() {\n    this.sides = this.sideEffects;\n  },\n  data() {\n    return {\n      content: \"Content\",\n      extendedLabsEnabled: false as boolean,\n      appActivities: [] as Array<ActivityInterface>,\n      sides: [] as any,\n      specimens: [],\n      reasons: ['Routine', 'Targeted', 'Confirmatory', 'Stat', 'Repeat / Missing'],\n      activeIndex: null as any\n    };\n  },\n  components: {\n    IonButton,\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonLabel,\n    IonList,\n    IonItem,\n    IonRadioGroup,\n    IonRow,\n  },\n});\n","import { render } from \"./SideEffectsModal.vue?vue&type=template&id=546674a2&scoped=true&ts=true\"\nimport script from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\nexport * from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\n\nimport \"./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-546674a2\"]])\n\nexport default __exports__","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { FooterBtnEvent, Option } from \"@/components/Forms/FieldInterface\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { alertConfirmation, infoAlert, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport HisDate from \"@/utils/Date\";\nimport { findIndex, isEmpty, find } from \"lodash\";\nimport { ConsultationService } from \"@/apps/ART/services/consultation_service\";\nimport { UserService } from \"@/services/user_service\";\nimport { OrderService } from \"@/services/order_service\";\nimport { ConceptService } from \"@/services/concept_service\";\nimport AdherenceMixinVue from \"./AdherenceMixin.vue\";\nimport { modalController } from \"@ionic/vue\";\nimport VLReminderModal from \"@/components/DataViews/VLReminderModal.vue\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ARTLabService } from \"../../services/lab_service\";\nimport { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport SideEffectsModalVue from \"@/components/DataViews/SideEffectsModal.vue\";\nimport ART_PROP from \"@/apps/ART/art_global_props\";\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { PatientTypeService } from \"../../services/patient_type_service\";\nimport { PrescriptionService } from \"../../services/prescription_service\";\nimport { DispensationService } from \"../../services/dispensation_service\";\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport Store from \"@/composables/ApiStore\"\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { RegimenService } from \"@/services/regimen_service\";\n\nexport default defineComponent({\n  mixins: [AdherenceMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    fields: [] as any,\n    currentWeight: -1 as any,\n    weightTrail: [] as any,\n    customRegimens: [] as any,\n    labOrders: [] as any,\n    weightLossPercentageNum: 0 as number,\n    lostTenPercentBodyWeight: false as boolean,\n    CxCaEnabled: false as boolean,\n    CxCaStartAge: -1 as number,\n    CxCaMaxAge: -1 as number,\n    DueForCxCa: false as boolean,\n    currentlyPregnant: false as boolean,\n    patientHitMenopause: false as boolean,\n    hasPregnancyObsToday: false as boolean,\n    autoSelect3HP: false as boolean,\n    labOrderFieldContext: {} as any,\n    consultation: {} as any,\n    prescription: {} as any,\n    dispensation: {} as any,\n    completed3HP: false as boolean,\n    hasTbHistoryObs: false,\n    allergicToSulphur: false as boolean | null,\n    TBSuspected: false,\n    presentedTBSymptoms: false,\n    askAdherence: false as boolean,\n    lastDrugsReceived: [] as any,\n    sideEffectsHistory: {} as any,\n    onPermanentFPMethods: false,\n    reasonForDecliningTPTObs: {} as any,\n    malawiSideEffectReasonObs: [] as any,\n    otherSideEffectReasonObs: [] as any,\n    wasTransferredIn: false as boolean,\n    dateStartedArt: '' as string,\n    clientHadAHysterectomy: false as any,\n    isNoneClientPatient: false as boolean,\n    tptStatus: {} as Record<string, any>,\n    customDrugs: [] as any\n  }),\n  watch: {\n    ready: {\n      handler(value: boolean) {\n        if (value) {\n          this.consultation = new ConsultationService(this.patientID, this.providerID)\n          this.prescription = new PrescriptionService(this.patientID, this.providerID)\n          this.dispensation = new DispensationService(this.patientID, this.providerID)\n          this.fields = this.getFields();\n        }\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      const encounter = await this.consultation.createEncounter();  \n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n\n      const computedObs = await this.resolveObs(computedData, 'consultation')\n\n      const secondaryObs = (await Promise.all([\n        ...this.malawiSideEffectReasonObs,\n        ...this.otherSideEffectReasonObs,\n        this.reasonForDecliningTPTObs\n      ])).filter((d) => !isEmpty(d))\n\n      const savedObs = await this.consultation.saveObservationList([\n        ...computedObs, ...secondaryObs\n      ])\n\n      if (!isEmpty(this.drugObs) && !this.isNoneClientPatient) await this.saveAdherence();\n\n      if (!savedObs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      if (f.refer_to_clinician && f.refer_to_clinician.value ==='Yes') {\n        this.gotoPatientDashboard()\n        return\n      }\n      this.nextTask();\n    },\n    async getTptDrugs(formData: any){\n      const drugFilters: string[] = []\n      const tptHistory = formData.routine_tb_therapy.value\n      if (isEmpty(this.customDrugs)) {\n        this.customDrugs = await RegimenService.getCustomIngridients()\n      }\n      if(tptHistory.match(/ipt/i)) {\n        drugFilters.push(\"INH or H (Isoniazid 300mg tablet)\")\n      } else if(tptHistory.includes(\"3HP (RFP + INH)\")){\n        drugFilters.push('INH or H (Isoniazid 300mg tablet)')\n        drugFilters.push('Rifapentine (150mg)')\n      } else if(tptHistory.includes(\"INH 300 / RFP 300 (3HP)\")){\n        drugFilters.push(\"INH 300 / RFP 300 (3HP)\")\n      }\n      return !isEmpty(drugFilters) \n        ? this.customDrugs.filter((drug: any) => drugFilters.includes(drug.name))\n          .map((drug: any) => ({\n            label: drug.name,\n            value: '',\n            other: drug\n          }))\n        : []\n    },\n    async getTransferInStatus() {\n      const receivedArvs = await ConsultationService.getFirstValueCoded(\n        this.patientID, 'Ever received ART'\n      )\n      const transferLetterObs = await ConsultationService.getFirstObs(\n        this.patientID, 'Has transfer letter'\n      )\n      const date = transferLetterObs ? HisDate.toStandardHisFormat(transferLetterObs.obs_datetime) : ''\n      return receivedArvs \n        && receivedArvs.match(/yes/i) \n        && transferLetterObs \n        && `${transferLetterObs.value_coded}`.match(/yes/i)\n        && date === this.consultation.getDate()\n    },\n    async getDateStartedArt() {\n      const dateStarted = await ConsultationService.getFirstValueDatetime(this.patientID, 'Date ART started')\n      return dateStarted ? HisDate.toStandardHisFormat(dateStarted) : ''\n    },\n    async checkIfWeightLossIsControlled(val: any) {\n      if (this.lostTenPercentBodyWeight\n        && `${val.label}`.match(/malnutrition/i)\n        && `${val.value}`.match(/no/i)) {\n        const action = await infoActionSheet(\n          'Recommendation',\n          `Patient's weight has dropped by ${this.weightLossPercentageNum}% , is this controlled weight loss??`,\n          'Please verify',\n          [\n            { name: 'Confirm weight loss', slot: 'start', color: 'success'},\n            { name: 'Confirm controlled', slot: 'end', color: 'primary'}\n          ]\n        )\n        val.value = action === 'Confirm weight loss' ? 'Yes' : 'No'\n      }\n    },\n    async checkVLReminder() {\n      const vals = await ProgramService.getPatientVLInfo(this.patientID);\n      if (vals.eligibile === true) {\n        const modal = await modalController.create({\n          component: VLReminderModal,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { VLData: vals },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        switch (data) {\n          case \"order\":\n            await this.labOrderFieldContext.launchOrderSelection();\n            break;\n          case \"wait\":\n            await this.waitForVL();\n            break;\n          case \"later\":\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    async waitForVL(milestone: any = null) {\n      const orderService = new ARTLabService(this.patientID, this.providerID);\n      const encounter = await orderService.createEncounter();\n      const observations = await orderService.buildDefferedOrder(milestone);\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      await orderService.saveObservationList(observations);\n    },\n    canScreenCxCa() {\n      const age = this.patient.getAge()\n      return this.patient.isFemale()\n        && this.DueForCxCa\n        && this.CxCaEnabled \n        && age >= this.CxCaStartAge \n        && age <= this.CxCaMaxAge\n        && !this.clientHadAHysterectomy\n    },\n    pregnancyEligible() {\n      return this.patient.isChildBearing() && !this.onPermanentFPMethods\n    },\n    showCurrentContraceptionMethods(formData: any) {\n      return (this.pregnancyEligible()\n        && !this.patientHitMenopause \n        && !this.isPregnant(formData))\n        && !this.isANCclient()\n    },\n    showNewContraceptionMethods(formData: any) {\n      return (\n        this.pregnancyEligible() &&\n        !this.patientHitMenopause &&\n        !this.isPregnant(formData) &&\n        !this.isOnTubalLigation(formData)\n        && !this.isANCclient()\n      )\n    },\n    isPregnant(formData: any) {\n      if (formData.pregnant_breastfeeding) {\n        return this.inArray(formData.pregnant_breastfeeding, \n          p => p.label === 'Pregnant' && p.value === 'Yes'\n        )\n      }\n      return this.currentlyPregnant\n    },\n    isOnTubalLigation(formData: any) {\n      return this.inArray(formData.current_fp_methods, d => d.value === \"TUBAL LIGATION\")\n    },\n    async disableFPMethods(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE\") {\n            i.isChecked = false;\n            i.disabled = false;\n          }\n          return i;\n        });\n      } else if (value.label != \"NONE\" && value.isChecked) {\n        if (value.label.match(/condom/gi)) infoAlert(\"Combine with other modern methods of family planning\") \n        const noneIndex = findIndex(listData, { label: \"NONE\" });\n        listData[noneIndex].isChecked = false;\n        const vals = this.consultation.familyPlanningMethods(\n          value.label,\n          listData\n        );\n        const currentIndex = findIndex(vals, { label: value.label });\n        vals[currentIndex].isChecked = true;\n        return vals;\n      } else {\n        return listData.map((i) => {\n          i.disabled = false;\n          return i;\n        });\n      }\n    },\n    disablePrescriptions(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE OF THE ABOVE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE OF THE ABOVE\") i.isChecked = false;\n          return i;\n        });\n      } else if (value.label != \"NONE OF THE ABOVE\" && value.isChecked) {\n        const noneIndex = findIndex(listData, { label: \"NONE OF THE ABOVE\" });\n        listData[noneIndex].isChecked = false;\n      }\n      return listData;\n    },\n    buildMedicationOrders(options: Option[]) {\n      if (this.inArray(options, o => o.label === \"NONE OF THE ABOVE\")) {\n        return this.consultation.buildValueCoded('Prescribe drugs', 'No')\n      }\n      const priscribed = this.consultation.buildValueCoded('Prescribe drugs', 'Yes')\n      const medications = options.map( o => this.consultation.buildValueCoded(\n        'Medication orders', o.label\n      ))\n      return [priscribed, ...medications]\n    },\n    declinedFPM(formData: any) {\n      return this.inArray(formData.fp_methods, d => d.value === \"NONE\")\n        && this.inArray(formData.current_fp_methods, d => d.value === \"NONE\")\n    },\n    riskOfUnplannedPregnancy(formData: any) {\n      return formData.reason_for_no_fpm.value === \"At risk of unplanned pregnancy\"\n    },\n    showOtherSideEffects(formData: any) {\n      return this.inArray(formData.side_effects, d => d.label === \"Other\" && d.value === \"Yes\")\n    },\n    hasTBSymptoms(formData: any) {\n      this.presentedTBSymptoms = this.inArray(formData.tb_side_effects, d => d.value === \"Yes\")\n      return this.presentedTBSymptoms\n    },\n    isTBSuspect(data: any){\n      this.TBSuspected = data.value.toString().match(/Yes|TB Suspected/i) ? true : false\n      return this.TBSuspected\n    },\n    isAllergicToSulphur (data: any) {\n      this.allergicToSulphur = data.value.match(/unknown/i) ? null : data.value.match(/yes/i) ? true : false\n      return this.allergicToSulphur\n    },\n    async buildSideEffectObs(data: Option[], attr: 'malawiSideEffectReasonObs' | 'otherSideEffectReasonObs'): Promise<boolean> {\n      const sideEffectReasons  = await this.getSideEffectsReasons(data)\n\n      this[attr] = [] //Clear this incase side effects no longer exist\n  \n      if (sideEffectReasons === undefined) return false\n\n      if (sideEffectReasons != -1) {\n        const drugInducedConcept = ConceptService.getCachedConceptID('Drug induced', true)\n        const isOtherReason = (reason: string) => `${reason}`.match(/other|drug/i) ? true : false\n        this[attr] = sideEffectReasons.map((r: any) => ({\n          'concept_id': drugInducedConcept,\n          'value_coded': ConceptService.getCachedConceptID(r.label, true),\n          'value_text': isOtherReason(r.reason) ? 'Past medication history' : null,\n          'value_drug': !isOtherReason(r.reason) ? r.reason : null //Reason is drug ID number if caused by specific drug\n        }))\n      }\n      return true\n    },\n    async getSideEffectsReasons(sideEffects: Option[]) {\n      const allYes = sideEffects.filter(s => !(`${s.label}`.match(/other/i)) && s.value==='Yes')\n      if (allYes.length > 0) {\n        const modal = await modalController.create({\n          component: SideEffectsModalVue,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { sideEffects: allYes, drugs: this.lastDrugsReceived },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        return data;\n      }\n      return -1\n    },\n    getFPMethods(exclusionList: string[] = [], preChecked: Array<Option>) {\n      const methods = this.consultation.getFamilyPlanningMethods();\n      const filtered = methods.filter(\n        (data: string) => !exclusionList.includes(data)\n      )\n      return filtered.map((method: any) => ({\n        label: method,\n        value: method,\n        isChecked: preChecked.map((i) => i.label).includes(method),\n      }))\n    },\n    getOptions(options: string[], preValues: Array<Option>) {\n      return options.map((data: any) => {\n        const preValue = find(preValues, { label: data });\n        return {\n          label: data,\n          value: preValue ? preValue.value : \"\",\n          other: {\n            values: this.yesNoOptions(),\n          },\n        };\n      });\n    },\n    getContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"contraindication\", true\n      ).map((data) => data.name);\n      return this.getOptions([...contraIndications, \"Other\"], preValues);\n    },\n    getOtherContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"side_effect\", true\n      ).map((data) => data.name);\n      /**\n       * HACK ALERT!!!\n       * Dont want to show Other (Specify) as a last element\n       */\n      const lastElement = contraIndications.pop()\n      return this.getOptions([...contraIndications, \"Other (Specify)\", `${lastElement}`], preValues)\n    },\n    getTBSymptoms(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"tb_symptom\", true\n      ).map((data) => data.name)\n      return this.getOptions([...contraIndications], preValues);\n    },\n    getReasonsForNoCxcaOptions() {\n      return ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n        .map((c: any) => ({\n          label: c.name,\n          value: c.name,\n          other: {\n            c\n          }\n        }))\n    },\n    runAppendOptionParams(options: Option[], prechecked: Option[]) {\n      const checkedOptions = prechecked.filter(o => o.isChecked).map(o => o.label)\n      return options.map(o => {\n        if (typeof o?.other?.appendOptionParams === 'function') {\n          const appendedOptions = o?.other?.appendOptionParams()\n          if (typeof appendedOptions === 'object')  {\n            const option: Option = {\n              label: o.label,\n              value: o.value,\n              other: o.other\n            }\n            if (appendedOptions.isChecked) {\n              option.isChecked = appendedOptions.isChecked\n              delete appendedOptions.isChecked\n            } else {\n              option.isChecked = checkedOptions.includes(o.label)\n            }\n            return { ...option, ...appendedOptions}\n          }\n        }\n        return o\n      })\n    },\n    /**\n     * Checks formdata and previous observation state if a patient completed 3HP\n     */\n    didCompleted3HP(formData: any) {\n      return !this.completed3HP \n        ? formData.routine_tb_therapy \n        && formData.routine_tb_therapy.value.match(/complete/i) ? true : false\n        : true\n    },\n    patientOnTpt(formData: any) {\n      if (formData.routine_tb_therapy != null) {\n        return /Currently/i.test(formData.routine_tb_therapy.value)\n      }\n      return this.tptStatus.tpt !== null && !this.completed3HP\n    },\n    /**\n     * Checks if 3HP can be auto selected based on FormData and \n     * if  it is enabled in global preferences\n     */\n    tptAutoSelectionMode(formData: any) {\n      return this.autoSelect3HP && !this.didCompleted3HP(formData)\n    },\n    /**\n     * Provides validations for TPT selections and value updates\n     */\n    async on3HPValueUpdate(listData: Option[], curOption: Option, formData: any) {\n      const is3HPorTPT = (i: Option) => i.label.match(/IPT|3HP/i) ? true : false\n\n      //Checks if IPT and 3HP are both selected and returns a boolean\n      const ipt3HPConflict: boolean = (() => {\n        const checkedDrugs = listData.reduce(\n        (checkedDrugs: string[], item: Option) => {\n          if (is3HPorTPT(item) \n            && !(item.label in checkedDrugs) \n            && item.isChecked) {\n            checkedDrugs.push(item.label)\n          }\n          return checkedDrugs\n        }, [])\n        return checkedDrugs.includes('IPT') \n          && (checkedDrugs.includes('3HP (RFP + INH)') \n          || checkedDrugs.includes('INH 300 / RFP 300 (3HP)'))\n      })()\n\n      // check if no tpt is present\n      const noTpTPresent = is3HPorTPT(curOption) \n        && listData.filter(i => is3HPorTPT(i)).map(i => !i.isChecked)\n          .every(Boolean)\n  \n      if (noTpTPresent && this.patientOnTpt(formData)) {\n        const modal = await optionsActionSheet(\n          'Reasons for declining TPT', \n          '',\n          [\n            'Patient declined',\n            'Side-effects (previous or current)',\n            'Stock-out',\n            'Starting TB treatment',\n            'Other'\n          ],\n          [\n            { name : 'Done', slot: 'start', role: 'action'}\n          ]\n        )\n        this.reasonForDecliningTPTObs = this.consultation.buildValueText(\n          'Other reason for not seeking services', modal.selection\n        )\n      } else {\n        this.reasonForDecliningTPTObs = {}\n      }\n\n      if (ipt3HPConflict) {\n        const action = await infoActionSheet(\n          \"IPT / 3HP conflict\",\n          \"IPT and 3HP can NOT be prescribed together\",\n          \"Please pick either one\",\n          [\n            { name: \"Prescribe 3HP\", slot: \"start\", color: \"primary\" },\n            { name: \"Prescribe IPT\", slot: \"end\", color: \"primary\" },\n          ]\n        )\n        return listData.map(i => {\n          if (is3HPorTPT(i)) {\n            i.isChecked =\n              action === 'Prescribe IPT' && i.label === 'IPT' || \n              action ==='Prescribe 3HP' && i.label === 'INH 300 / RFP 300 (3HP)'\n          }\n          return i\n        })\n      }\n      return listData.map(i => {\n        // By default, toggle between variants of 3HP. All of them cant be selected at once\n        if (curOption.label === '3HP (RFP + INH)' \n          && i.label === 'INH 300 / RFP 300 (3HP)'\n          && curOption.isChecked) {\n          i.isChecked = false\n        } else if (curOption.label === 'INH 300 / RFP 300 (3HP)' \n          && i.label === '3HP (RFP + INH)'\n          && curOption.isChecked ) {\n            i.isChecked = false\n        }\n        return i\n      })\n    },\n    medicationOrderOptions(formData: any, prechecked=[] as Option[]): Option[] {\n      const completedTpt = this.didCompleted3HP(formData)\n      const everTakenTpt = this.tptStatus.tpt !== null\n      const autoSelect3HP = this.tptAutoSelectionMode(formData)\n\n      const disableOption = (text: string) => ({\n        disabled: true,\n        isChecked: false,\n        description: {\n          color: \"danger\",\n          show: \"always\",\n          text\n        }\n      })\n\n      return this.runAppendOptionParams([\n        this.toOption('ARVs', {\n          appendOptionParams: () => ({ \n            isChecked: autoSelect3HP && !this.TBSuspected\n          })\n        }),\n        this.toOption('CPT', {\n          appendOptionParams: () => {\n            if (autoSelect3HP && !this.TBSuspected \n              && !this.allergicToSulphur) {\n              return { isChecked : true }\n            }\n            return this.allergicToSulphur \n              ? disableOption('Allergic to CPT')\n              : { disabled: false }\n          }\n        }),\n        this.toOption('3HP (RFP + INH)', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentWeight < 20) return disableOption('Weight below regulation')\n            if (everTakenTpt && this.tptStatus.tpt !== '3HP (RFP + INH)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === '3HP (RFP + INH)' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('INH 300 / RFP 300 (3HP)', {\n          appendOptionParams: () => { \n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentWeight < 30) return disableOption('Weight below regulation') \n            if (everTakenTpt && this.tptStatus.tpt !== 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) return { isChecked: true }\n            return { isChecked: autoSelect3HP }\n          }\n        }),\n        this.toOption('IPT', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (everTakenTpt && this.tptStatus.tpt !== 'IPT' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === 'IPT' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('NONE OF THE ABOVE')\n      ], prechecked)\n    },\n    async getVlLabData() {\n      return OrderService.formatLabs((await Store.get('GET_LAB_ORDERS_WITH_GIVEN_RESULT_STATUS', { patientID: this.patientID })));\n    },\n    isANCclient() {\n      return ProgramService.getSuspendedProgram() === 'ANC'\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"other_patient_prescription\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            const isGuardian = (await this.consultation.getClient()) === \"No\";\n            if (isGuardian) {\n              this.isNoneClientPatient = true\n            } else {\n              this.isNoneClientPatient = (await PatientTypeService.isDrugRefillPatient(this.patientID))\n                ? true : false\n            }\n            if (this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option[]) => ({ \n            tag: 'consultation',\n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, f: any) => {          \n            const list = this.disablePrescriptions(listData, value);\n            return this.on3HPValueUpdate(list, value, f)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, l: any) => {\n            return !isEmpty(l) ? l : this.medicationOrderOptions(formData)\n          },\n          condition: () => this.isNoneClientPatient,\n          exitsForm: () => true\n        },\n        /**\n        * DRUG TRANSFER IN INITIATION \n        */\n        ...generateDateFields({\n          id: 'date_last_received_arvs',\n          helpText: 'Last ARV Dispensation',\n          required: true,\n          init: async () => {\n            this.wasTransferredIn = (await this.getTransferInStatus()) || false\n            this.dateStartedArt = await this.getDateStartedArt()\n            return true\n          },\n          condition: () => this.wasTransferredIn,\n          minDate: () => this.dateStartedArt,\n          maxDate: () => this.consultation.getDate(),\n          computeValue: (date: string) => {\n            this.prescription.setDate(date)\n            return {\n              tag: 'consultation',\n              date,\n              obs: this.consultation.buildValueDate(\n                'Date drug received from previous facility', date\n              )\n            }\n          },\n          estimation: {\n            allowUnknown: false\n          }\n        }, this.consultation.getDate()),\n        {\n          id: 'previous_arvs_received',\n          helpText: 'Last ARV drugs dispensed',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          computedValue: (v: Option[]) => v.map(d => d.other),\n          validation: (v: Option[]) => Validation.required(v),\n          options: async () => {\n            if (!isEmpty(this.customRegimens)) return this.customRegimens\n            const p = new PrescriptionService(this.patientID, this.providerID)\n            this.customRegimens = (await p.getARVs())\n              .map((drug: any ) => ({\n                label: drug.name,\n                value: drug.drug_id,\n                other: { ...drug }\n              })) as Option[]\n            return this.customRegimens\n          },\n          config: {\n            showKeyboard: true\n          },\n          condition: () => this.wasTransferredIn\n        },\n        {\n          id: 'drug_interval',\n          helpText: 'Duration period for last received ARVs',\n          type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n          condition: () => this.wasTransferredIn,\n          validation: (val: Option) => Validation.required(val),\n          computedValue: (d: Option) => d.other.nextAppointment,\n          options: () => {\n            const intervals = [\n              { label: '2 weeks', value: 14 },\n              { label: '1 month', value: 28 },\n              { label: '2 months', value: 56 },\n              { label: '3 months', value: 84 },\n              { label: '4 months', value: 112 },\n              { label: '5 months', value: 140 },\n              { label: '6 months', value: 168 },\n              { label: '7 months', value: 196 },\n              { label: '8 months', value: 224 },\n              { label: '9 months', value: 252 },\n              { label: '10 months', value: 280 },\n              { label: '11 months', value: 308 },                        \n              { label: '12 months', value: 336 }\n            ]\n            return intervals.map(({label, value}: Option) => {\n              this.prescription.setNextVisitInterval(value)\n              const nextAppointment = this.prescription.calculateDateFromInterval()\n              return {\n                label,\n                value,\n                other: {\n                  label: 'Medication run-out date:',\n                  value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                  nextAppointment,\n                  other: {\n                    label: \"\",\n                    value: []\n                  }\n                }\n              }\n            })\n          }\n        },\n        {\n          id: 'arv_quantities',\n          helpText: 'Amount of drugs dispensed (From last ART Facility)',\n          type: FieldType.TT_DRUG_TRANSFER_IN,\n          validation: (v: Option[]) => this.validateSeries([\n            () => Validation.required(v),\n            () => v.map((i: Option) => i.value === '' || i?.other?.pillsBrought === '')\n              .some(Boolean) ? ['Some Drugs are missing values'] : null\n          ]),\n          computedValue: (v: Option[], f: any, c: any) => ({\n            tag: 'consultation',\n            obs:  v.map(async (d: any) => {\n              const drugID: number = d?.other?.drug?.drug_id || 0\n              return { \n                ...(await this.consultation.buildObs(\n                  'Drug received from previous facility', {\n                    'value_drug': drugID,\n                    'value_datetime': c?.drug_interval || null,\n                    'value_numeric': d?.value || 0\n                    }\n                )),\n                child: (await this.consultation.buildObs(\n                  'Number of tablets brought to clinic', {\n                    'value_drug': drugID,\n                    'value_numeric': d?.other?.pillsBrought || -1,\n                    'value_datetime': c?.date_last_received_arvs?.date || null\n                  }\n              ))}\n            })\n          }),\n          options: (_: any, c: any, listData: Option) => {\n            return c.previous_arvs_received\n              .map((d: any) => {\n                const drugName = d['alternative_drug_name'] || d['drug_name'] || d['name']\n                const prevValue = find(listData, { label: drugName })\n                let qty = ''\n                let rmndr = ''\n                if (prevValue) {\n                  qty = prevValue?.value\n                  rmndr = prevValue?.other?.pillsBrought\n                }\n                return {\n                  label: drugName,\n                  value: qty,\n                  other: {\n                    drug: d,\n                    pillsBrought: rmndr\n                  }\n                }\n              })\n          },\n          condition: () => this.wasTransferredIn\n        },\n        /**\n        * END OF DRUG TRANSFER IN\n        */\n        {\n          id: \"patient_lab_orders\",\n          helpText: \"Lab orders\",\n          type: FieldType.TT_LAB_ORDERS,\n          init: async () => {\n            this.labOrders = await this.getVlLabData()\n            return true\n          },\n          unload: async () => {\n            await this.checkVLReminder()\n            // Check if released results were given to the patient\n            const noGivenResults = this.labOrders.filter((r: any) => r.result_given === 'No')\n            if (noGivenResults.length && (await alertConfirmation('Result(s) Given to Client?'))) {\n              const enc = new AppEncounterService(this.patientID, -1, this.providerID)\n              // flatten array and save observations for results given\n              const obs = noGivenResults.reduce((all: any, result: any) => [\n                ...all, ...(result.resultIds.map(async (resultID: number) =>{\n                  enc.encounterID = result.encounter_id\n                  return enc.saveObs((await enc.buildObs(\"Result Given to Client\", {\n                      \"value_coded\": \"Yes\",\n                      \"obs_group_id\": resultID\n                    })))\n                })) \n              ], [])\n              await Promise.all(obs)\n            }\n            // refresh data\n            this.labOrders = await this.getVlLabData()\n          },\n          onload: (fieldContext: any) =>  this.labOrderFieldContext = fieldContext,\n          options: () => {\n            return [\n              {\n                label: \"Lab orders\",\n                value: \"order trail\",\n                other: {\n                  values: this.labOrders\n                }\n              }\n            ]\n          },\n          config: {\n            printOrder: (orderID: number) => {\n              return new PatientPrintoutService(this.patientID).printLabOrderLbl(orderID)\n            },\n            hiddenFooterBtns: [\"Clear\"],\n            footerBtns: [\n              {\n                name: \"Order\",\n                size: \"large\",\n                slot: \"end\",\n                color: \"primary\",\n                visible: true,\n                onClick: async () => {\n                  if (!isEmpty(this.labOrderFieldContext)) {\n                    await this.labOrderFieldContext.launchOrderSelection();\n                  }\n                }\n              }\n            ]\n          },\n        },\n        {\n          id: \"pregnant_breastfeeding\",\n          helpText: `Patient Pregnant or breastfeeding?`,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              if (this.patient.isChildBearing()) {\n                this.hasPregnancyObsToday = await this.patient.hasPregnancyObsToday()\n                this.currentlyPregnant = await this.patient.isPregnant()\n              }\n              this.onPermanentFPMethods = await this.consultation.getTLObs();\n            }\n            return true\n          },\n          condition: () => !this.hasPregnancyObsToday && this.pregnancyEligible(),\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded(d.other.concept, d.value)).concat(\n              this.isANCclient() ? [this.consultation.buildValueCoded('Is patient pregnant', 'Yes')] : []\n            ),\n          }),\n          options: (formData: any) => {\n            const options = []\n            // Because ANC clients are always Pregnant!\n            if (!this.isANCclient()) options.push({\n              label: \"Pregnant\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient pregnant\",\n              }\n            })\n\n            options.push({\n              label: \"Breastfeeding\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient breast feeding\",\n              }\n            })\n\n            return formData.pregnant_breastfeeding || options\n          }\n        },\n        {\n          id: \"patient_weight_chart\",\n          helpText: \"Patient weight chart\",\n          type: FieldType.TT_WEIGHT_CHART,\n          init: async () => {\n            this.weightTrail = await this.patient.getWeightHistory()\n            this.weightLossPercentageNum = this.patient.getWeightLossPercentageFromTrail(this.weightTrail)\n            this.lostTenPercentBodyWeight = this.weightLossPercentageNum >= 10\n            return true\n          },\n          options: async () => {\n            const bmi = await this.patient.getBMI();\n            const values = this.weightTrail;\n            return [\n              {\n                label: \"Weight for patient\",\n                value: \"Weight trail\",\n                other: {\n                  bmi,\n                  values: values.map((d: any) => ({\n                    x: HisDate.toStandardHisDisplayFormat(d.date),\n                    y: d.weight,\n                  })),\n                  age: this.patient.getAge(),\n                },\n              },\n            ];\n          },\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n        {\n          id: \"has_fp_methods\",\n          helpText: \"\",\n          type: FieldType.TT_TEXT_BANNER,\n          condition: () => this.onPermanentFPMethods,\n          options: () => this.mapStrToOptions([\n            \"Patient is on Tubal ligation method\"\n          ])\n        },\n        {\n          id: \"current_fp_methods\",\n          helpText: \"What method are you currently on?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.patientHitMenopause = await this.consultation.patientHitMenopause()\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded('Family planning method', d.value))\n          }),\n          condition: (formData: any) => this.showCurrentContraceptionMethods(formData),\n          options: (_: any, checked: Array<Option>) =>this.getFPMethods([], checked),\n        },\n        {\n          id: \"fp_methods\",\n          helpText: \"What method are you providing today?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          condition: (formData: any) => this.showNewContraceptionMethods(formData),\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map((d: Option) => this.consultation.buildValueCoded('Family planning, action to take', d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([], checked)\n        },\n        {\n          id: \"reason_for_no_fpm\",\n          helpText: \"Main reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.declinedFPM(formData),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Why does the woman not use birth control\", v.value) \n          }),\n          options: () => this.mapStrToOptions([\n            \"Not Sexually active\",\n            \"Patient want to get pregnant\",\n            \"Not needed for medical reasons\",\n            \"At risk of unplanned pregnancy\",\n            \"Menopause\"\n          ])\n        },\n        {\n          id: \"specific_reason_for_no_fpm\",\n          helpText: \"Specific reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Reason for not using contraceptives\", v.value)\n          }),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          options: () => this.mapStrToOptions([\n            \"Following wishes of spouse\",\n            \"Religious reasons\",\n            \"Afraid of side effects\",\n            \"Never though about it\",\n            \"Indifferent (does not mind getting pregnant)\"\n          ])\n        },\n        {\n          id: \"offer_contraceptives\",\n          helpText: \"Offer contraceptives\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          computedValue: (v: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Family planning, action to take\", v.value)\n          }),\n          options: () => [\n            { label: \"Accepted\", value: \"Yes\" },\n            { label: \"Declined\", value: \"No\" },\n            { label: \"Discuss with spouse\", value: \"Discuss with spouse\" },\n          ]\n        },\n        {\n          id: \"offered_intervention\",\n          helpText: \"Offered intervention\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => formData.offer_contraceptives.value === \"Accepted\",\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded(d.label, d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([\"NONE\"], checked),\n        },\n        {\n          id: \"offer_cxca\",\n          helpText: \"Refer client for CxCa screening\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.CxCaEnabled = await ART_PROP.cervicalCancerScreeningEnabled()\n              if (this.CxCaEnabled) {\n                const { start, end } = await ART_PROP.cervicalCancerScreeningAgeBounds()\n                this.CxCaMaxAge = end\n                this.CxCaStartAge = start\n                this.DueForCxCa = await this.consultation.clientDueForCxCa()\n                this.clientHadAHysterectomy =  await this.consultation.clientHasHadAHysterectomy();\n              }\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => this.canScreenCxCa() && !this.isPregnant(f),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded('Offer CxCa', v.value)\n          }),\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa\",\n          type: FieldType.TT_SELECT,\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => f.offer_cxca.value === 'No',\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Reason for NOT offering CxCa\", v.value)\n          }),\n          options: () => this.getReasonsForNoCxcaOptions(),\n        },\n        ...generateDateFields({\n          id: 'previous_cxca_test_date',\n          helpText: 'Previous CxCa test',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.reason_for_no_cxca.value === 'Not due for screening',\n          computeValue: (date: string, isEstimate: boolean) => {\n            if (isEstimate) {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDateEstimated('CxCa test date', date)\n              }\n            } else {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDate('CxCa test date', date) \n              }\n            }\n          },\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: 'previous_side_effects',\n          helpText: 'Side effects / Contraindications history',\n          type: FieldType.TT_DATA_TABLE,\n          init: async () => {\n            this.sideEffectsHistory = await this.consultation.getDrugSideEffects()\n            return true\n          },\n          config: {\n            columns: () => [\n              [\n                table.thTxt('Date'),\n                table.thTxt('Condition'),\n                table.thTxt('Drug induced'),\n                table.thTxt('Drug')\n              ]\n            ],\n            rows: () => {\n              return Object.keys(this.sideEffectsHistory)\n              .map((k: string) =>\n                Object.values(this.sideEffectsHistory[k])\n                .filter((d: any) => !isEmpty(d.name))\n                .map((d: any) => [\n                  table.tdDate(k),\n                  table.td(d.name),\n                  table.td(d.drug_induced ? 'Yes' : 'No'),\n                  table.td(d.drug)\n              ]))\n              .reduce((accum, cur) => accum.concat(cur), [])\n            }\n          }\n        },\n        {\n          id: \"side_effects\",\n          helpText: \"Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          init: async () => {\n            this.lastDrugsReceived = await this.consultation.getPreviousDrugs();\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Malawi ART side effects', d.label)),\n              child: (await this.consultation.buildValueCoded(d.label, d.value)) \n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'malawiSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getContraindications(checked)\n        },\n        {\n          id: \"other_side_effects\",\n          helpText: \"Other Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          condition: (formData: any) => this.showOtherSideEffects(formData),\n          onConditionFalse: () => this.otherSideEffectReasonObs = [],\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.filter(d => d.label != 'Other (Specify)')\n              .map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Other side effect', d.label)),\n              child: (await this.consultation.buildValueCoded(d.label, d.value))\n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'otherSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getOtherContraindications(checked),\n        },\n        {\n          id: 'other_side_effect_specify',\n          helpText: \"Other Contraindications / Side effects (specify)\",\n          type: FieldType.TT_NOTE,\n          computedValue: async (v: Option) => ({\n            tag: 'consultation',\n            obs: {\n              ...(await this.consultation.buildValueCoded('Other side effect', 'Other (Specify)')),\n              child: (await this.consultation.buildValueText('Other (Specify)', v.value ))\n            }\n          }),\n          condition: (f: any) => this.inArray(\n            f.other_side_effects, d => d.label === \"Other (Specify)\" && d.value === 'Yes'\n          ),\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"on_tb_treatment\",\n          helpText: \"On TB Treatment?\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({ \n            tag: 'consultation', \n            obs: [ this.consultation.buildValueCoded(\"TB treatment\", data.value)].concat(this.isTBSuspect(data) \n              ? [this.consultation.buildValueCoded(\"TB Status\", \"Confirmed TB on treatment\")] \n              : []) \n          }),\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"tb_side_effects\",\n          helpText: \"TB Associated symptoms\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data)\n          ]), \n          condition: (formData: any) => formData.on_tb_treatment.value.match(/no/i),\n          options: (_: any, checked: Array<Option>) => this.getTBSymptoms(checked),\n          computedValue: (vals: Option[], formData: any) => ({\n            tag: 'consultation',\n            obs: vals.map(async (data: Option) => ({\n              ...(await this.consultation.buildValueCoded(\"Routine TB Screening\", data.label)),\n              child: (await this.consultation.buildValueCoded(data.label, data.value))\n            })).concat(this.hasTBSymptoms(formData) ? [] : [this.consultation.buildValueCoded(\"TB Status\", \"TB NOT suspected\")])\n          })\n        },\n        {\n          id: \"tb_status\",\n          helpText: \"TB Status\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.hasTBSymptoms(formData),\n          onConditionFalse: () => this.TBSuspected = false,\n          defaultValue: () => 'TB Suspected',\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"TB Status\", data.value)\n          }),\n          beforeNext: async (data: Option) => {\n            if (this.isTBSuspect(data)) {\n              const action = await infoActionSheet(\n                \"Lab Order\",\n                \"The patient is a TB suspect. Do you want to take lab orders?\",\n                \"\",\n                [\n                  { name: \"Order now\", slot: \"start\", color: \"success\" },\n                  { name: \"NOT now\", slot: \"end\", color: \"danger\" },\n                ]\n              )\n              if (action === 'Order now') this.labOrderFieldContext.launchOrderSelection([\n                'TB Microscopic Exam', \n                'GeneXpert', \n                'Culture & Sensitivity',\n                'TB Tests'\n              ])\n            }\n            return true\n          },\n          options: () => this.mapStrToOptions([\n            \"TB NOT suspected\",\n            \"TB Suspected\",\n            \"Confirmed TB Not on treatment\",\n          ])\n        },\n        {\n          id: \"routine_tb_therapy\",\n          helpText: \"TB preventive therapy (TPT) history\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            this.hasTbHistoryObs = await this.consultation.hasTreatmentHistoryObs()\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          condition: () => !this.hasTbHistoryObs,\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Previous TB treatment history\", data.value)\n          }),\n          options: (f: any) => {\n            let options: string[] = []\n            if(/no/i.test(f.on_tb_treatment.value)) {\n              options = [\n                \"Currently on IPT\",\n                \"Currently on 3HP (RFP + INH)\",\n                \"Currently on INH 300 / RFP 300 (3HP)\"\n              ]\n            }\n            options = options.concat([\n              \"Complete course of 3HP in the past (3 months RFP+INH)\",\n              \"Complete course of IPT in the past (min. 6 months of INH)\",\n              \"Aborted course of 3HP (RFP + INH) in the past\",\n              \"Aborted course of INH 300 / RFP 300 (3HP) in the past\",\n              \"Aborted course of IPT in the past\",\n              \"Never taken IPT or 3HP\"\n            ])\n            return this.mapStrToOptions(options)\n          }\n        },\n        ...generateDateFields({\n          id: 'date_started_tpt',\n          helpText: 'Started TPT Treatment',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          computeValue: (date: string) => date,\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: \"tpt_drugs_received\",\n          helpText: \"TPT Drugs Received\",\n          required: true,\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          type: FieldType.TT_ADHERENCE_INPUT,\n          options: (f: any) => this.getTptDrugs(f),\n          computedValue: (drugs: Option[], f: any, c: any) => ({\n            tag: 'consultation',\n            obs:  drugs.map(async (drug: any) => this.consultation.buildObs(\n              'TPT Drugs Received', \n              {\n                'value_drug': drug?.other?.drug_id || 0,\n                'value_datetime': c?.date_started_tpt || null,\n                'value_numeric': drug?.value || 0\n              }\n            ))\n          }),\n          config: {\n            titles: {\n              label: 'Drug name',\n              value: 'Tablets received'\n            }\n          }\n        },\n        {\n          id: 'tpt_tranfer_from',\n          helpText: 'Facility client is transferring in from',\n          type: FieldType.TT_SELECT,\n          computedValue: ({label}: Option) => ({\n            tag:'consultation',\n            obs: this.consultation.buildValueText(\n              'Location TPT last received', label\n            )\n          }),\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          options: (_: any, filter='') => getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true\n          }\n        },\n        {\n          id: \"allergic_to_sulphur\",\n          helpText: \"Allergic to Cotrimoxazole\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Allergic to sulphur\", data.value)\n          }),\n          beforeNext: (data: any) => {\n            this.isAllergicToSulphur(data);\n            console.log(this.allergicToSulphur)\n            return true;\n          },\n          options: () => this.yesNoUnknownOptions()\n        },\n        ...this.getAdherenceFields(true),\n        {\n          id: \"refer_to_clinician\",\n          helpText: \"Refer to clinician\",\n          type: FieldType.TT_SELECT,\n          condition: () => UserService.isNurse(),\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Refer to clinician\", data.value)\n          }),\n          options: () => this.yesNoOptions(),\n        },\n        {\n          id: \"medication_to_prescribe\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (!this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          condition: (f: any) => !f.refer_to_clinician || `${f.refer_to_clinician.value}`.match(/no/i),\n          validation: (data: Option) => Validation.required(data),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation', \n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, formData: any) => {\n            const list =  this.disablePrescriptions(listData, value)\n            return this.on3HPValueUpdate(list, value, formData)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, currentOptions: any) => {\n            return this.medicationOrderOptions(formData, currentOptions)\n          },\n          config: {\n            footerBtns: [\n              {\n                name: \"Update allergic to CPT\",\n                onClickComponentEvents: {\n                  refreshOptions: (btnEvent: FooterBtnEvent, options: Option[], formData: any): Option[] => {\n                    this.allergicToSulphur = btnEvent.btnOutput === 'Allergic'\n                    return this.medicationOrderOptions(formData, options)\n                  }\n                },\n                onClick: () => {\n                  return infoActionSheet(\n                    \"Allergic to Cotrimoxazole update\",\n                    `Is the patient allergic to cotrimoxazole.`,\n                    \"\",\n                    [\n                      { name: \"Allergic\", slot: \"start\", color: \"success\" },\n                      { name: \"NOT Allergic\", slot: \"end\" },\n                    ]\n                  )\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Consultation.vue?vue&type=template&id=68480e69&ts=true\"\nimport script from \"./Consultation.vue?vue&type=script&lang=ts\"\nexport * from \"./Consultation.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\"","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { DrugInterface } from \"@/interfaces/Drug\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { BPManagementService } from \"./htn_service\"\nimport dayjs from \"dayjs\"\n\nexport class AdherenceService extends AppEncounterService {\n    lastDrugs: Array<DrugInterface>\n    lastReceiptDate: string\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 68, providerID) //TODO: Use encounter type reference name\n        this.lastDrugs = []\n        this.lastReceiptDate = ''\n    }\n\n    async loadPreviousDrugs() {\n        const date = new Date(this.date)\n        date.setDate(date.getDate() - 1) // we don't want current date to count\n        const d = (date: string | Date) => HisDate.toStandardHisFormat(date)\n        const drugs = await AppEncounterService.getJson(\n            `patients/${this.patientID}/drugs_received`, { date: d(date) }\n        )      \n        if (drugs) {\n            this.lastReceiptDate = drugs.reduce((receiptDate: string | null,  drug: any) => {\n                return !receiptDate || (new Date(d(drug.order.start_date)) > new Date(receiptDate))\n                    ?  d(drug.order.start_date)\n                    : receiptDate\n            }, null)\n            const htnDrugs = BPManagementService.htnDrugReferences().map((d: any) => d.drug_id)\n            this.lastDrugs = drugs.filter((drug: DrugInterface) => \n               !htnDrugs.includes(drug.drug['drug_id']) && d(drug.order.start_date) === this.lastReceiptDate\n            )\n        }\n    }\n\n    getReceiptDate() { return this.lastReceiptDate }\n\n    getLastDrugs() { return this.lastDrugs }\n\n    receivedDrugsBefore() { return !isEmpty(this.lastDrugs) }\n\n    buildPillCountObs(orderId: number, pillCount: number) {\n        return this.buildValueNumber('Number of tablets brought to clinic', pillCount, null, orderId)\n    }\n\n    async buildAdherenceObs(orderId: number, drugId: number, adherence: number) {\n        const concept = await AppEncounterService.getConceptID('Drug adherence', true)\n        return {\n            'concept_id': concept,\n            'value_numeric': adherence,\n            'value_drug': drugId,\n            'value_modifier': '%',\n            'order_id': orderId,\n            'person_id': this.patientID,\n            'obs_datetime': AppEncounterService.getSessionDate()\n        }\n    }\n\n    isAdherenceGood(adherence: number) {\n        return adherence >= 95 && adherence <= 105\n    }\n\n    calculateAdherence(given: number, pills: number, expected: number) {\n        return Math.round(100 * (given - pills) / (given - expected));\n    }\n\n    calculateExpected(\n        given: number, \n        equivalentDailyDose: number, \n        startDate: string, \n        frequency: 'QOD' | 'QW'\n    ) {\n        const timeUnit = frequency === 'QW' ? 'week' : 'day'\n        const daysGone = this.calcTimeElapsed(startDate, timeUnit);\n        return (given - (daysGone * parseFloat(equivalentDailyDose.toString())));\n    }\n\n    calcTimeElapsed(date1: string, timeUnit: 'week' | 'day') {\n        return dayjs(this.date).diff(date1, timeUnit)\n    }\n\n    calculateUnaccountedOrMissed(expected: string, actual: string) {\n        const exp = (parseFloat(expected) - parseFloat(actual));\n        return (exp < 0 ? ((exp * -1) + ' missed') : (exp + ' unacc'));\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning } from \"@/utils/Alerts\"\nimport { AdherenceService } from \"@/apps/ART/services/adherence_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from 'lodash'\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        adherence: {} as any,\n        drugObs: [] as any,\n        askReasonForPoorAdherence: false,\n        calculationAgreementObs: [] as any,\n    }),\n    methods: {\n        async saveAdherence() {\n            await this.adherence.createEncounter()\n            const data = await Promise.all([...this.drugObs, ...this.calculationAgreementObs])\n            const obs = await this.adherence.saveObservationList(data)\n\n            if (!obs) return toastWarning('Unable to save patient observations')\n        },\n        buildAdherenceReport(data: any) {\n            const lastVisit = this.adherence.getReceiptDate()\n            const daysElapsed = this.adherence.calcTimeElapsed(lastVisit, 'day')\n            const timeElapse = ` Last visit: ${HisDate.toStandardHisDisplayFormat(lastVisit)} \n                (${daysElapsed} Days Elapsed)`\n            const rowColors = [{ indexes: [0, 3, 6], class: 'adherence-col-bg' }]\n            const cellColors: any = []\n            const columns = [timeElapse]\n            const rows = [\n                ['Prescription'],\n                ['Tabs given'],\n                ['Tabs per'],\n                ['Tabs remaining'],\n                ['Expected'],\n                ['Actual (counted)'],\n                ['Adherence'],\n                ['Doses missed/ Unaccounted for'],\n                ['Doses consumed'],\n                ['Art Adherence']\n            ]        \n            data.forEach((order: any, index: number) => {\n                const frequency = this.formatFrequency(order.frequency)\n                const expectedPills = this.calcPillsExpected(order)\n                const adherence = this.adherence.calculateAdherence(\n                    order.quantity, order.pillsBrought, expectedPills\n                )\n                const adherenceStatus = this.adherence.isAdherenceGood(adherence) \n                    ? 'Good adherence' \n                    : 'Explore problem'\n                const unAccountedDoses = this.adherence.calculateUnaccountedOrMissed(\n                    expectedPills, order.pillsBrought\n                )\n                columns.push(order.drug.name)\n                rows[0].push('')\n                rows[1].push(order.quantity)\n                rows[2].push(`${order.equivalent_daily_dose} <b>${frequency}</b>`)\n                rows[3].push('')\n                rows[4].push(expectedPills < 0 ? 0 : expectedPills)\n                rows[5].push(order.pillsBrought)\n                rows[6].push('')\n                rows[7].push(unAccountedDoses)\n                rows[8].push(`${adherence}%`)\n                rows[9].push(adherenceStatus)\n\n                cellColors.push({ \n                    index: index+1,\n                    row: 9, \n                    class: adherenceStatus.match(/good/i) ? 'adherence-txt-good' : 'adherence-txt-bad' \n                })\n            })\n            return [\n                { \n                    label: 'Selected Medication', \n                    value:'Table', \n                    other: { columns, rows, rowColors, cellColors }\n                }      \n            ]\n        },\n        formatFrequency(frequency: string) {\n            return `${frequency}`.match(/qod/i) \n                    ? 'QOD'\n                    : `${frequency}`.match(/weekly/i) \n                    ? 'QW'\n                    : frequency\n        },\n        calcPillsExpected(d: any) {\n            return this.adherence.calculateExpected(\n                d.quantity, \n                d.equivalent_daily_dose, \n                d.order.start_date,\n                this.formatFrequency(d.frequency) as 'QOD' | 'QW'\n            )\n        },\n        getAdherenceFields(checkDrugsBefore=false): Array<Field> {\n            return [\n                {\n                    id: 'pills_brought',\n                    helpText: 'Pills remaining (brought to clinic)',\n                    type: FieldType.TT_ADHERENCE_INPUT,\n                    init: async () => {\n                        this.adherence = new AdherenceService(this.patientID, this.providerID)\n                        await this.adherence.loadPreviousDrugs()\n                        return true\n                    },\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    validation: (val: any) => {\n                        if (Validation.required(val)) return ['No drugs available']\n\n                        const empty = val.map((i: Option) => i.value === '')\n                        \n                        return  empty.some(Boolean) ? ['Some values are missing'] : null\n                    },\n                    unload: async (data: any) => {\n                        this.drugObs = []\n                        data.forEach(async(val: Option) => {\n                            const {drug, order } = val.other\n                            const data = { ...val.other, pillsBrought: val.value }\n                            const adherence = this.adherence.calculateAdherence(\n                                data.quantity, data.pillsBrought, this.calcPillsExpected(data)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildAdherenceObs(order.order_id, drug.drug_id, adherence)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildPillCountObs(order.order_id, val.value)\n                            )\n\n                            if (!this.askReasonForPoorAdherence) {\n                                this.askReasonForPoorAdherence = !this.adherence.isAdherenceGood(data)\n                            }\n                        })\n                    },\n                    options: (fdata: any) => {\n                        if (!isEmpty(fdata.pills_brought)) {\n                            return fdata.pills_brought\n                        }\n                        return this.adherence.getLastDrugs().map((data: any) => ({\n                            label: data.drug.name,\n                            value: '',\n                            other: {\n                                ...data\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: \"adherence_report\",\n                    helpText: \"ART adherence\",\n                    type: FieldType.TT_TABLE_VIEWER,\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    options: (d: any) => this.buildAdherenceReport(\n                        d.pills_brought.map((i: Option) => ({ \n                            ...i.other, pillsBrought: i.value\n                        }))\n                    ),\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    }\n                },\n                {\n                    id: \"agree_with_calculation\",\n                    helpText: \"Agree with adherence calculation\",\n                    type: FieldType.TT_SELECT,\n                    condition: () => this.askReasonForPoorAdherence,\n                    validation: (val: Option) => Validation.required(val),\n                    unload: ({ value }: Option) => {\n                        this.calculationAgreementObs = [ this.adherence.buildValueCoded(\n                            'Reason for poor treatment adherence', value\n                        )]\n                    },\n                    options: () => [\n                        { label: 'Yes', value: 'Yes' },\n                        { label: 'No', value: 'No' }\n                    ]\n                }\n            ]\n        }\n    }\n})\n","import script from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}