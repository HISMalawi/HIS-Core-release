{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","RadiologyExaminationService","AppEncounterService","constructor","patientID","providerID","id","getJson","createOrder","params","postJson","printExamination","accessionNumber","service","PrintoutService","printLbl","RadiologyInternalSectionService","Service","super","name","defineComponent","mixins","EncounterMixinVue","components","IonPage","HisStandardForm","data","examinationOptions","detailedExaminationOptions","watch","ready","handler","this","push","listOfRadiologyTestsField","examinationField","detailedExaminationField","referralTypeField","internalReferralField","externalReferralField","payingField","paymentTypeField","receiptField","paymentAmountField","invoiceField","invoiceAmountField","immediate","methods","getListOfRadiologyTests","map","e","label","value","concept_id","validateAmount","val","match","computedValues","createEncounter","saveObservationList","resolveObs","v","Object","values","order","res","getEncounterID","accession_number","gotoPatientDashboard","tests","selectedTest","helpText","type","FieldType","TT_SELECT","validation","Validation","required","computedValue","obs","buildValueCoded","encounterID","beforeNext","async","getTestsOptions","options","isEmpty","selectedExamID","condition","f","list_of_radiology_test","buildValueText","mapStrToOptions","field","PersonFieldHelper","getFacilityLocationField","referral_type","referralSections","getInternalSections","s","config","showKeyboard","footerBtns","slot","color","onClick","c","filter","length","toastWarning","filtered","some","i","toLowerCase","alertConfirmation","createInternalSection","listData","toastDanger","yesNoOptions","paying","TT_TEXT","payment_type","validateSeries","TT_NUMBER","receipt_number","buildValueNumber","invoice_number","__exports__"],"mappings":"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","file":"js/chunk-2d20ebf7.e9c3c236.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { Service } from \"@/services/service\"\n\nexport class RadiologyInternalSectionService extends Service {\n    constructor() {\n        super()\n    }\n\n    static getInternalSections() {\n        return super.getJson('internal_sections')\n    }\n\n    static createInternalSection(name: string) {\n        return super.postJson('internal_sections', { name })\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RadiologyExaminationService } from \"@/apps/RADIOLOGY/services/radiology_examination_service\";\nimport { RadiologyInternalSectionService } from \"@/apps/RADIOLOGY/services/radiology_internal_sections_service\";\nimport { isEmpty } from 'lodash';\nimport { alertConfirmation, toastDanger, toastWarning } from '@/utils/Alerts';\nimport PersonFieldHelper from '@/utils/HisFormHelpers/PersonFieldHelper';\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    components: {\n        IonPage,\n        HisStandardForm\n    },\n    data: () => ({\n        service: {} as any,\n        examinationOptions: [] as any,\n        detailedExaminationOptions: [] as any\n    }),\n    watch: {\n        ready: {\n            handler(ready: any) {\n                if (ready) {\n                    this.service = new RadiologyExaminationService(this.patientID, this.providerID)\n                    this.fields.push(this.listOfRadiologyTestsField())\n                    this.fields.push(this.examinationField())\n                    this.fields.push(this.detailedExaminationField())\n                    this.fields.push(this.referralTypeField())\n                    this.fields.push(this.internalReferralField())\n                    this.fields.push(this.externalReferralField())\n                    this.fields.push(this.payingField())\n                    this.fields.push(this.paymentTypeField())\n                    this.fields.push(this.receiptField())\n                    this.fields.push(this.paymentAmountField())\n                    this.fields.push(this.invoiceField())\n                    this.fields.push(this.invoiceAmountField())\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async getTestsOptions(id: string | number) {\n            return (await RadiologyExaminationService.getListOfRadiologyTests(id))\n                .map((e: any) => ({\n                    label: e.name,\n                    value: e.concept_id\n                }))\n        },\n        validateAmount(val: string) {\n            return val.match(/([0-9]+\\\\.[0-9])|Unknown$/i)\n                ? ['You must enter a decimal number']\n                : null\n        },\n        async onFinish(_: any, computedValues: any) {\n            await this.service.createEncounter()\n            await this.service.saveObservationList((await this.resolveObs(computedValues)))\n            for(const v of Object.values(computedValues) as any) {\n                if (typeof v.order === 'function') {\n                    const res = await this.service.createOrder(v.order(this.service.getEncounterID()))\n                    if (typeof res === 'object' && res.accession_number) {\n                        this.service.printExamination(res.accession_number)\n                    }\n                }\n            }\n            this.gotoPatientDashboard()\n        },\n        listOfRadiologyTestsField(): Field {\n            let tests = [] as any;\n            let selectedTest = -1 as number;\n            return {\n                id: \"list_of_radiology_test\",\n                helpText: \"Please select the type of examination\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('RADIOLOGY TEST', v.value),\n                        order: (encounterID: number) => {\n                            const data: any = {\n                                'encounter_id': encounterID,\n                                'concept_id': v.value\n                            } \n                            if (this.providerID != -1) {\n                                data['provider_id'] = this.providerID\n                            }\n                            return data\n                        }\n                    }\n                },\n                beforeNext: async (v: Option) => {\n                    if (selectedTest != v.value) {\n                        selectedTest = v.value as number\n                        this.examinationOptions = await this.getTestsOptions(v.value)\n                    }\n                    return true\n                },\n                options: async () => {\n                    if (isEmpty(tests)) {\n                        tests = await this.getTestsOptions('LIST OF RADIOLOGY TESTS')\n                    }\n                    return tests\n                }\n            }\n        },\n        examinationField() {\n            let selectedExamID = -1\n            return {\n                id: \"examination\",\n                helpText: \"Please select the examination\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('Examination', v.value)\n                    }\n                },\n                condition: () => !isEmpty(this.examinationOptions),\n                beforeNext: async (v: Option, f: any) => {\n                    if (selectedExamID != f.list_of_radiology_test.value) {\n                        selectedExamID = v.value as number\n                        this.detailedExaminationOptions = await this.getTestsOptions(selectedExamID)\n                    }\n                    return true\n                },\n                options:() => this.examinationOptions\n            }\n        },\n        detailedExaminationField() {\n            return {\n                id: \"detailed_examination\",\n                helpText: \"Please select the detailed examination\",\n                type: FieldType.TT_SELECT,\n                condition: () => !isEmpty(this.detailedExaminationOptions),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('Detailed examination', v.value),\n                    }\n                },\n            validation: (v: Option) => Validation.required(v),\n                options: () => this.detailedExaminationOptions\n            }\n        },\n        referralTypeField() {\n            return {\n                id: 'referral_type',\n                helpText: 'Please select the referral type',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('Source of referral', v.label)\n                    }\n                },\n                options: () => {\n                    return this.mapStrToOptions([\n                        'External', \n                        'Internal'\n                    ])\n                }\n            }\n        },\n        externalReferralField() {\n            const field: Field = PersonFieldHelper.getFacilityLocationField()\n            field.id = 'external_referral'\n            field.condition = (f: any) => f.referral_type.value === 'External'\n            field.computedValue = (v: Option) => {\n                return {\n                    obs: this.service.buildValueText('REFERRED FROM', v.label)\n                }\n            }\n            return field\n        },\n        internalReferralField() {\n            let referralSections = [] as Option[]\n            return {\n                id: \"referred_by\",\n                helpText: \"Referred from\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.referral_type.value === 'Internal',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('REFERRED FROM', v.label)\n                    }\n                },\n                options: async () => {\n                    if (isEmpty(referralSections)) {\n                        referralSections = (await RadiologyInternalSectionService.getInternalSections())\n                            .map((s: any) => ({\n                                value: s.id,\n                                label: s.name\n                            }))\n                    }\n                    return referralSections\n                },\n                config: {\n                    showKeyboard: true,\n                    footerBtns: [\n                        {\n                            name: 'Add Referral',\n                            slot: 'end',\n                            color: 'success',\n                            onClick: async (f: any, c: any, field: any) => {\n                                if (typeof field.filter != 'string' || field.filter.length < 3) {\n                                    return toastWarning(`Please enter a valid name`)\n                                }\n                                if (field.filtered.some((i: Option) => i.label.toLowerCase() === field.filter.toLowerCase())) {\n                                    return toastWarning(`Can't add already existing referral location`)\n                                }\n                                if ((await alertConfirmation(`Do you want to add referral location?`))) {\n                                    const data = await RadiologyInternalSectionService.createInternalSection(field.filter)\n                                    if (data) {\n                                        field.filter = data.name\n                                        field.listData = [{label: data.name, value: data.id}, ...field.listData]\n                                    } else {\n                                        toastDanger(`Unable to add ${field.filter}`)\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        },\n        payingField() {\n            return {\n                id: \"paying\",\n                helpText: \"Is this a paying patient?\",\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('PAYING', v.value) \n                    }\n                },\n                validation: (v: Option) => Validation.required(v),\n                options: () => {\n                    return this.yesNoOptions()\n                }\n            }\n        },\n        paymentTypeField() {\n            return {\n                id: \"payment_type\",\n                helpText: \"Select payment method\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.paying.value === 'Yes',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('PAYMENT TYPE', v.value)\n                    }\n                },\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Cash',\n                        'Invoice'\n                    ])\n                }\n            }\n        },\n        receiptField() {\n            return  {\n                id: \"receipt_number\",\n                helpText: \"Enter receipt number\",\n                type: FieldType.TT_TEXT,\n                condition: (f: any) => f.payment_type.value === 'Cash',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('RECEIPT NUMBER', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        },\n        invoiceField() {\n            return {\n                id: \"invoice_number\",\n                helpText: \"Enter invoice number\",\n                type: FieldType.TT_TEXT,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('INVOICE NUMBER', v.value)\n                    }\n                },\n                condition: (f: any) => f.payment_type.value === 'Invoice',\n                validation: (v: Option) => Validation.required(v)\n            }\n        },\n        paymentAmountField() {\n            return {\n                id: \"payment_amount\",\n                helpText: \"Enter payment amount\",\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.receipt_number.value,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueNumber('PAYMENT AMOUNT', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        },\n        invoiceAmountField() {\n            return {\n                id: \"invoice_amount\",\n                helpText: \"Enter invoice amount\",\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.invoice_number.value,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueNumber('INVOICE AMOUNT', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        }\n    }\n})\n","import { render } from \"./RadiologyExaminations.vue?vue&type=template&id=7b7a8c9a&ts=true\"\nimport script from \"./RadiologyExaminations.vue?vue&type=script&lang=ts\"\nexport * from \"./RadiologyExaminations.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}