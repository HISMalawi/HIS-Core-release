{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/apps/LOS/views/OrderTests.vue?0f29","webpack:///./src/apps/LOS/views/OrderTests.vue","webpack:///./src/apps/LOS/views/OrderTests.vue?0c48"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","id","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","mapToOption","listOptions","item","resolvePerson","computedForm","attr","isPlainObject","getGivenNameField","helpText","FieldType","TT_TEXT","computedValue","val","validation","Validation","isName","form","PersonService","searchGivenName","getFamilyNameField","searchFamilyName","getGenderField","customOptions","TT_SELECT","getDobConfig","includeHelpText","summaryLabel","minDate","estimateDateFromAge","maxDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","date","isEstimate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","summaryMapValue","v","f","_f$home_region","home_region","dynamicHelpText","_f$home_region2","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","onClick","c","field","filtered","ok","alertConfirmation","address","LocationService","createAddress","getHomeTaField","config","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","getCurrentDistrictField","_f$home_region3","current_region","match","getCurrentTAfield","_f$current_region","getCurrentVillageField","_f$current_region2","getCellNumberField","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","getFacilityLocationField","_","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","birthdate_estimated","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","getNationalID","npid","show","Service","getProgramName","isCondition","ignored","undefined","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village_id","_component_his_standard_form","_resolveComponent","onSubmit","mixins","EncounterMixinVue","service","activityType","watch","handler","query","PatientLabService","getClinianGivenNameField","getClinianFamilyNameField","getFacililityLocationField","getReasonForTestField","getTestSpecimensField","getTestSelectionField","getTestCombinationField","immediate","deep","req","placeOrder","printSpecimenLabel","order_id","defaultValue","getLocationName","PersonField","ConceptService","getCachedConceptID","OrderService","getSpecimens","concept_id","activeSpecimen","TT_GRID_SELECTOR","listData","specimen","getTestTypesBySpecimen","t","isChecked","tests"],"mappings":"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","file":"js/chunk-3235309e.906289fd.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Region of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'District of current residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'District of current residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'TA of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Village of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport {getFacilities} from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PatientLabService } from \"@/apps/LOS/services/patient_lab_service\"\nimport { OrderService } from \"@/services/order_service\"\nimport { ConceptService } from '@/services/concept_service'\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { isEmpty } from 'lodash'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        patientID: -1,\n        service: {} as any,\n        fields: [] as Field[],\n        activityType: '' as 'DRAW_SAMPLES' | 'ORDER_TESTS',\n    }),\n    watch: {\n        '$route': {\n            handler({query, params}: any) {\n                if (query && params) {\n                    this.patientID = params.patient_id\n                    this.activityType = query.type\n                    this.service = new PatientLabService(this.patientID)\n                    this.fields = [\n                        this.getClinianGivenNameField(),\n                        this.getClinianFamilyNameField(),\n                        this.getFacililityLocationField(),\n                        this.getReasonForTestField(),\n                        this.getTestSpecimensField(),\n                        this.getTestSelectionField(),\n                        this.getTestCombinationField()\n                    ]\n                }\n            },\n            immediate: true,\n            deep: true\n        },\n    },\n    methods: {\n        async onSubmit(_: any, computed: any) {\n            const req = await this.service.placeOrder(computed)\n            if (req) {\n                await this.service.printSpecimenLabel(req[0].order_id)\n                this.$router.push(`/patient/dashboard/${this.patientID}`)\n            } \n        },\n        getFacililityLocationField(): Field {\n            return {\n                id: 'target_lab',\n                helpText: 'Requesting location',\n                type: FieldType.TT_SELECT,\n                defaultValue: () => PatientLabService.getLocationName(),\n                validation: (val: Option) => Validation.required(val),\n                options: (_: any, filter='') => getFacilities(filter),\n                computedValue: (val: Option) => val.label,\n                config: {\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            }\n        },\n        getClinianGivenNameField(): Field {\n            const field = PersonField.getGivenNameField()\n            field.helpText = 'Requesting clinician - First name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.appearInSummary = () => false\n            return field\n        },\n        getClinianFamilyNameField(): Field {\n            const field = PersonField.getFamilyNameField()\n            field.helpText = 'Requesting clinician - Last name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.summaryMapValue = (v: any, f: any) => {\n                return {\n                    label: 'Clinician name', \n                    value: `${f.given_name.value} ${v.value}`\n                }\n            },\n            field.computedValue = (v: Option, f: any) => `${f.given_name.value} ${v.value}`\n            return field\n        },\n        getReasonForTestField(): Field {\n            return {\n                id: 'reason_for_test_id',\n                helpText: 'Reason for test',\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: any) => ConceptService.getCachedConceptID(\n                    val.value, true\n                ),\n                options: () => [\n                    {label: 'Routine', value: 'Routine'},\n                    {label: 'Targeted', value: 'Targeted'},\n                    {label: 'Confirmatory', value: 'Confirmatory'},\n                    {label: 'Repeat / Missing', value: 'Repeat / Missing'},\n                    {label: 'Stat', value: 'Stat'}\n                ]\n            }\n        },\n        getTestSpecimensField(): Field {\n            return { \n                id: 'specimen',\n                helpText: 'Select specimen',\n                type: FieldType.TT_SELECT,\n                condition: () => this.activityType === 'DRAW_SAMPLES',\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (v: Option) => ({'concept_id': v.value}),\n                options: async () => {\n                    const req = await OrderService.getSpecimens('')\n                    return req.map((d: any) => ({\n                        label: d.name, \n                        value: d.concept_id\n                    }))\n                },\n                config: {\n                    showKeyboard: true\n                }\n            }\n        },\n        getTestSelectionField(): Field {\n            let activeSpecimen = ''\n            return {\n                id: 'tests',\n                helpText: 'Select tests',\n                type: FieldType.TT_GRID_SELECTOR,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: Array<Option>) => {\n                    return val.map(v => ({'concept_id': v.value}))\n                },\n                options: async (f: any, c: any, listData: Option[]) => {\n                    if (f.specimen && f.specimen.label != activeSpecimen) {\n                        activeSpecimen = f.specimen.label\n                        const req = await OrderService.getTestTypesBySpecimen(\n                            f.specimen.label\n                        )\n                        return req.map((t: any) => ({\n                            label: t.name,\n                            value: t.concept_id,\n                            isChecked: false,\n                            other: t\n                        }))\n                    } else {\n                        return listData\n                    }\n                }\n            }\n        },\n        getTestCombinationField(): Field {\n            return {\n                id: 'combine_tests',\n                helpText: 'Combine test(s) in one order',\n                type: FieldType.TT_SELECT,\n                computedValue: (val: Option) => val.value === 'Yes',\n                condition: (f: any) => f.tests.length > 1,\n                validation: (val: Option) => Validation.required(val),\n                options: () => this.yesNoOptions()\n            }\n        }\n    }\n})\n","import { render } from \"./OrderTests.vue?vue&type=template&id=59c3af0c&ts=true\"\nimport script from \"./OrderTests.vue?vue&type=script&lang=ts\"\nexport * from \"./OrderTests.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}