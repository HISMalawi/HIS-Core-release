{"version":3,"sources":["webpack:///./src/views/LabResults.vue?2e87","webpack:///./src/views/LabResults.vue","webpack:///./src/views/LabResults.vue?9c2c","webpack:///./src/services/patient_lab_result_service.ts","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","key","hisFormKey","fields","activeField","fieldComponent","skipSummary","onOnIndex","$event","onOnFinish","onFinish","defineComponent","components","HisStandardForm","data","labResult","patient","selectedTest","testOptions","testIndicators","watch","params","patient_id","this","PatientLabResultService","initData","getFields","deep","immediate","methods","_","c","measures","Object","values","filter","d","tag","map","setTestID","value","setResultDate","result_date","createEncounter","createLabResult","Store","invalidate","Math","floor","random","toastSuccess","e","toastDanger","console","error","generateTestIndicatorsFields","reduce","acc","concat","buildTestIndicatorFields","indicatorId","indicatorName","specimen","testId","name","result","modifier","substring","length","OrderService","isValidVLResult","isOk","alertConfirmation","cancelBtnLabel","confirmBtnLabel","alphaValueIsValid","match","numericValueIsValid","isMalariaResult","isUrineLamResult","id","test","fieldIndex","condition","f","find","result_indicators","label","every","Boolean","beforeNext","v","validateVLresults","toString","computedValue","type","charAt","parseInt","t","indicator","helpText","FieldType","TT_SELECT","group","appearInSummary","validation","Validation","required","options","TT_TEXT","onValue","toastWarning","config","customKeyboard","orders","getTestsWithoutResults","i","orderData","testIndex","tests","isEmpty","setTestTypeID","concept_id","indicators","getTestIndicators","push","other","accession","accession_number","orderDate","order_date","TT_TABLE_VIEWER","rows","HisDate","toStandardHisDisplayFormat","action","$nextTick","columns","val","overrideDefaultFooterBtns","nextBtn","onClick","$router","back","hiddenFooterBtns","generateDateFields","estimation","allowUnknown","minDate","toStandardHisFormat","maxDate","Service","getSessionDate","computeValue","date","TT_MULTIPLE_SELECT","__exports__","AppEncounterService","constructor","patientId","super","_defineProperty","patientID","testTypeID","resultDate","testID","postJson","encounterID","getTestID","getTestTypeID","getOrders","status","getJson","_resolveDynamicComponent","formType","cancelDestinationPath","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","default","String","formData","computedData","$emit"],"mappings":"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","file":"js/chunk-2759f0ea.4eb3d138.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    key: _ctx.hisFormKey,\n    fields: _ctx.fields,\n    activeField: _ctx.fieldComponent,\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"fields\", \"activeField\", \"onOnFinish\"]))\n}","\nimport { defineComponent } from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { PatientLabResultService } from \"@/services/patient_lab_result_service\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { toastWarning, toastDanger, toastSuccess, alertConfirmation } from \"@/utils/Alerts\"\nimport { find, isEmpty } from 'lodash';\nimport HisDate from \"@/utils/Date\"\nimport { Service } from \"@/services/service\"\nimport { OrderService } from '@/services/order_service';\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        fieldComponent: '' as string,\n        labResult: {} as any,\n        hisFormKey: 0 as number,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        selectedTest: {} as any,\n        testOptions: [] as Array<any>,\n        testIndicators: [] as Array<any>\n    }),\n    watch: {\n        '$route': {\n            async handler({params}: any) {\n                if (params && params.patient_id) {\n                    this.patient = params.patient_id\n                    this.labResult = new PatientLabResultService(this.patient)\n                    await this.initData()\n                    this.fields = this.getFields()\n                }\n            },\n            deep: true,\n            immediate: true\n        }\n    },\n    methods: {\n        async onFinish(_: any, c: any) {\n            try {\n                const measures = Object.values(c)\n                                    .filter((d: any) => d.tag === 'result_indicator' && d.measures)\n                                    .map((d: any) => d.measures)\n                this.labResult.setTestID(this.selectedTest.value)\n                this.labResult.setResultDate(c.result_date)\n                await this.labResult.createEncounter()\n                await this.labResult.createLabResult(measures)\n                Store.invalidate('PATIENT_LAB_ORDERS')\n                this.testOptions = []\n                this.selectedTest = {}\n                this.testIndicators = []\n                await this.initData()\n                this.hisFormKey = Math.floor(Math.random() * 5000)\n                toastSuccess('Lab result saved!')\n            }catch(e) {\n                toastDanger(`${e}`)\n                console.error(e)\n            }\n        },\n        generateTestIndicatorsFields() {\n          return this.testIndicators.reduce((acc: Field[], data: any) => {\n            return acc.concat(this.buildTestIndicatorFields(\n              data.indicatorId,\n              data.indicatorName,\n              data.specimen,\n              data.testId\n            ))\n          }, [] as Field[])\n        },\n        async validateVLresults(name: string, specimen: string, result: string){\n            if (name !== 'HIV viral load') return true\n            const modifier = result.substring(0, 1)\n            const value = result.substring(1, result.length)\n            if(OrderService.isValidVLResult(specimen, modifier, value)) return true\n            const isOk = await alertConfirmation(`Invalid results for ${specimen} HIV viral load`, {\n                cancelBtnLabel: \"Process result\",\n                confirmBtnLabel: \"Re-enter result\"\n            })\n            return !isOk\n        },\n        alphaValueIsValid(value: string) {\n            try {\n                return value.match(/^(>|<|=)(.*)/) ? true : false\n            }catch (e) {\n                return false\n            }\n        },\n        numericValueIsValid(value: string){\n            try {\n                return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n            }catch(e) {\n                return false\n            }\n        },\n        isMalariaResult(name: string) {\n            return name.match(/mrdt|malaria/i) ? true : false\n        },\n        isUrineLamResult(name: string) {\n            return name.match(/Lam/i) ? true : false\n        },\n        buildTestIndicatorFields(id: number, name: string, specimen: string, test: number): Array<Field> {\n          const fieldIndex = id * test\n            const condition = (f: any) => [\n                this.selectedTest.value === test, \n                find(f.result_indicators, { label: name}) ? true : false\n            ].every(Boolean)\n            const beforeNext = (v: Option) => this.validateVLresults(name, specimen, v.value.toString())\n\n            const computedValue = (v: any, f: any) => {\n                if(v.value === 'Other' && name.match(/HIV viral load/i)) return {}\n                const type = this.isMalariaResult(name) || this.isUrineLamResult(name) ? 'text' : f[`type_${fieldIndex}`].value\n                const value = this.isMalariaResult(name) || this.isUrineLamResult(name) ? \"=\" + v.value : v.value.toString()\n                const modifier = value.charAt(0)\n                const result = type === 'numeric' ? parseInt(value.substring(1)) : value.substring(1)\n                const test = f[`result_indicators`].filter((t: any) => t.value === id)[0]\n                return {\n                    tag: 'result_indicator',\n                    measures: {\n                        indicator: {\n                            'concept_id': test.value\n                        },\n                        'value': result,\n                        'value_modifier': modifier,\n                        'value_type': type\n                    },\n                    result,\n                    modifier,\n                    test: test.label\n                }\n            }\n            return [\n                {\n                    id: `type_${fieldIndex}`,\n                    helpText: `Result type (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    condition: (f: any) => condition(f) && !this.isMalariaResult(name) && !this.isUrineLamResult(name),\n                    appearInSummary: () => false,\n                    validation: (v: Option) => Validation.required(v),\n                    options: () => [\n                        {\n                            label: 'Numeric (numbers only)',\n                            value: 'numeric'\n                        },\n                        {\n                            label: 'Alphanumeric(text and numbers)',\n                            value: 'text'\n                        }\n                    ]\n                },\n                {\n                    id: `urine_result_${fieldIndex}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && this.isUrineLamResult(name),\n                    options: () => \n                        [\n                            {   \n                                label: 'Positive',\n                                value: 'positive'\n                            },\n                            {\n                                label: 'Negative',\n                                value: 'negative'\n                            }\n                        ]\n                },\n                {\n                    id: `num_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    computedValue,\n                    beforeNext,\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.numericValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifer and numbers only. i.e =90 / >19 / < 750')\n                            return false\n                        }\n                        return true\n                    },\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'numeric',\n                    config: {\n                        customKeyboard: [\n                            [\n                                ['1', '2', '3'],\n                                ['4', '5', '6', '=', '<', '>'],\n                                ['7', '8', '9', '.'],\n                                ['',  '0', '']\n                            ],\n                            [\n                                [ 'Delete']\n                            ]\n                        ]\n                    }\n                },\n                {\n                    id: `alpha_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.alphaValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifier plus result (for example =LDL)')\n                            return false\n                        }\n                        return true\n                    },\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'text' && !name.match(/HIV viral load/i)\n                },\n                {\n                    id: `VL_alpha_${fieldIndex}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'text' && name.match(/HIV viral load/i),\n                    options: () => [\n                      {\n                        label: 'Collect Another Sample',\n                        value: '=Collect Another Sample'\n                      },\n                      {\n                        label: '<LDL',\n                        value: '<LDL'\n                      },\n                      {\n                        label: '=LDL',\n                        value: '=LDL'\n                      },\n                      {\n                        value: 'Other',\n                        label: 'Other'\n                      }\n                    ]\n                },\n                {\n                    id: `other_VL_alpha_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.alphaValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifier plus result (for example =LDL)')\n                            return false\n                        }\n                        return true\n                    },\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => {\n                      return condition(f) && \n                        f[`type_${fieldIndex}`].value === 'text' && \n                        name.match(/HIV viral load/i)\n                        && f[`VL_alpha_${fieldIndex}`].value === 'Other'\n                    }\n                },\n                {\n                    id: `malaria_result_${fieldIndex}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && this.isMalariaResult(name),\n                    options: () => {\n                        if(name.match(/mrdt/i)) {\n                            return [\n                                {\n                                    label: 'Positive',\n                                    value: 'positive'\n                                },\n                                {\n                                    label: 'Negative',\n                                    value: 'negative'\n                                }\n                            ]\n                        }\n                        return [\n                            {\n                                label: 'Parasites seen',\n                                value: 'parasites seen'\n                            },\n                            {\n                                label: 'No parasites seen',\n                                value: 'no parasites seen'\n                            }\n                        ]\n                    }\n                },\n            ]\n        },\n        async initData() {\n            const orders = await this.labResult.getTestsWithoutResults()\n            for(const i in orders) {\n                const orderData = orders[i]\n                for(const testIndex in orderData.tests) {\n                    const test = orderData.tests[testIndex]\n                    if (!isEmpty(test.result)) {\n                        continue\n                    }\n                    this.labResult.setTestTypeID(test.concept_id)\n                    const indicators = await this.labResult.getTestIndicators()\n                    const testIndicators = indicators.map((i: any) =>({\n                        testId: test.id,\n                        indicatorName: i.name,\n                        indicatorId: i.concept_id,\n                        specimen: orderData.specimen.name,\n                    }))\n                    this.testIndicators = [...this.testIndicators, ...testIndicators]\n                    this.testOptions.push({\n                        label: test.name,\n                        value: test.id,\n                        other: {\n                            accession: orderData.accession_number,\n                            specimen: orderData.specimen.name,\n                            test: test.name,\n                            orderDate: orderData.order_date,\n                            testIndicators\n                        }\n                    })\n                }\n            }\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                  id: 'test_type',\n                  helpText: 'Tests without results',\n                  type: FieldType.TT_TABLE_VIEWER,\n                  options: () => {\n                    const rows = this.testOptions.map((t: Option) => ([\n                        t.other.accession,\n                        t.other.specimen,\n                        t.other.test,\n                        HisDate.toStandardHisDisplayFormat(t.other.orderDate),\n                        {\n                            type: 'button',\n                            name: 'Select',\n                            action: () => {\n                                this.selectedTest = t\n                                this.$nextTick(() => this.fieldComponent = 'year_result_date')\n                            }\n                        }\n                    ]))\n                    return [{\n                        label: '',\n                        value: '',\n                        other: {\n                            rows,\n                            columns:[ 'Acession#', 'Specimen', 'Test', 'Order date']\n                        }\n                    }]\n                  },\n                  validation: (val: Option) => Validation.required(val),\n                  config: {\n                    overrideDefaultFooterBtns: {\n                        nextBtn: {\n                            name: 'Finish',\n                            onClick: () => this.$router.back()\n                        }\n                    },\n                    hiddenFooterBtns: [\n                        'Clear',\n                        'Cancel'\n                    ]\n                  }\n                },\n                ...generateDateFields({\n                    id: 'result_date',\n                    helpText: 'Result',\n                    required: true,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    minDate: () => HisDate.toStandardHisFormat(this.selectedTest.other.orderDate),\n                    maxDate: () => Service.getSessionDate(),\n                    computeValue: (date: string) => date\n                }),\n                {\n                    id: `result_indicators`,\n                    helpText: `Select test result indicators`,\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (v: Option) => Validation.required(v),\n                    options: () => {                       \n                        return this.selectedTest\n                                .other\n                                .testIndicators\n                                .map((i: any) => ({\n                                    label: i.indicatorName,\n                                    value: i.indicatorId\n                                }))\n                    },\n                },\n                ...this.generateTestIndicatorsFields(),\n                {\n                    id: 'entry_confirmation',\n                    helpText: 'Confirm entry',\n                    type: FieldType.TT_TABLE_VIEWER,\n                    options: (_: any, c: any) => {\n                        const rows = Object.values(c)\n                                           .filter((d: any) => \n                                                typeof d === 'object'\n                                                && d != null\n                                                && d.tag === 'result_indicator'\n                                            )\n                                           .map((d: any) => ([d.test, d.modifier, d.result ]))\n                        return [{\n                            label: '',\n                            value: '',\n                            other: {\n                                rows,\n                                columns:[ 'Test', 'Modifier', 'Result']\n                            }\n                        }]\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./LabResults.vue?vue&type=template&id=1991c2ae&ts=true\"\nimport script from \"./LabResults.vue?vue&type=script&lang=ts\"\nexport * from \"./LabResults.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { OrderService } from '@/services/order_service'\nimport { AppEncounterService } from './app_encounter_service';\n\nexport class PatientLabResultService extends AppEncounterService {\n    patientID: number;\n    testTypeID: number;\n    resultDate: string;\n    testID: number;\n    constructor(patientId: number) {\n        super(patientId, 57)\n        this.patientID = patientId\n        this.testTypeID = -1\n        this.resultDate = ''\n        this.testID = -1\n    }\n\n    createLabResult(measures: Array<any>) {\n        return AppEncounterService.postJson(`lab/tests/${this.testID}/results`, {\n            'encounter_id': this.encounterID,\n            date: this.resultDate,\n            measures\n        })\n    }\n\n    getTestID() {\n        return this.testID\n    }\n\n    getTestTypeID() {\n        return this.testTypeID\n    }\n\n    setTestTypeID(test: number) {\n        this.testTypeID = test\n    }\n\n    setResultDate(date: string) {\n        this.resultDate = date\n    }\n\n    setTestID(test: number) {\n        this.testID = test\n    }   \n\n    getTestsWithoutResults() {\n        return OrderService.getOrders(this.patientID, {\n            status: 'drawn'\n        })\n    }\n\n    getTestIndicators() {\n      return OrderService.getJson(\n        `lab/test_result_indicators`, {\n        'test_type_id': this.testTypeID\n      })\n    }\n\n    \n}\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}