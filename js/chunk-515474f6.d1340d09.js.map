{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue?21df","webpack:///./src/apps/CxCa/services/CxCaTreatmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue?fb02","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","TreatmentService","AppEncounterService","constructor","patientID","providerID","super","screeningResult","this","getFirstValueCoded","treatmentType","referralReason","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","reception","summaryData","watch","patient","getSummary","setReason","getFields","deep","methods","reason","showSampleCollected","reasons","includes","formData","computed","encounter","createEncounter","toastWarning","programID","ProgramService","getProgramID","workflows","getProgramWorkflows","flows","forEach","w","states","f","conceptID","program_workflow_state_id","conceptName","concept","concept_names","name","stateValue","patient_outcome","value","state","getLocationName","date","getSessionDate","saveState","createState","vals","Object","keys","element","push","obs","Promise","all","saveObservationList","toastSuccess","nextTask","id","helpText","type","FieldType","TT_DATA_TABLE","config","rows","map","k","table","td","dataTableConfig","showIndex","TT_SELECT","validation","val","Validation","required","condition","match","options","mapOptions","computedValue","buildValueText","label","formdata","type_of_sample_collected","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","offlineID","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","patientDashboardUrl","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","diff","current_district","current_village","current_traditional_authority","status","resolveObs","computedData","error","enc","encounterTypeID","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","labOrders","skipNextTask","runflowState","username","split","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","names","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","option","toConditionalOptions","final","yesNoUnknownOptions","tag","filter","reduce","accum","cur","Array","isArray","concat","inArray","arr","expression","length","validateSeries","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","isCondition","ignored","undefined","prop","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-515474f6.d1340d09.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class TreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 182, providerID) //TODO: Use encounter type reference name'\n    }\n    async getSummary() {\n        const screeningResult = await this.getFirstValueCoded('Screening results');\n        const treatmentType = await this.getFirstValueCoded('Directly observed treatment option');\n        const referralReason = await this.getFirstValueCoded('Referral reason');\n        return {\n          'Screening Result': screeningResult,\n          'Treatment Type': treatmentType,\n          'Referral Reason': referralReason ? referralReason : \"N/A\"  \n        }\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { TreatmentService } from \"@/apps/CxCa/services/CxCaTreatmentService\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ProgramWorkflow } from \"@/interfaces/program_workflow\";\nimport table from \"@/components/DataViews/tables/ReportDataTable\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    reception: {} as any,\n    summaryData: {} as any,\n    referralReason: \"\"\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.reception = new TreatmentService(this.patientID, this.providerID);\n        this.summaryData = await this.reception.getSummary();\n        await this.setReason();\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async setReason() {\n      const reason = await this.reception.getFirstValueCoded('Referral reason');\n      this.referralReason = reason ? reason : \"N/A\"\n\n    },\n    showSampleCollected() {\n      const reasons = ['Large Lesion (>75%)','Suspect cancer', 'Further Investigation and Management'];\n      return reasons.includes(this.referralReason);\n    },\n    async onFinish(formData: any, computed: any) {\n      const encounter = await this.reception.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const programID = ProgramService.getProgramID();\n      const workflows: ProgramWorkflow[] =\n        await ProgramService.getProgramWorkflows(ProgramService.getProgramID());\n      const flows = {} as any;\n      workflows.forEach((w) => {\n        w.states.forEach((f) => {\n          const conceptID = f.program_workflow_state_id;\n          const conceptName = f.concept.concept_names[0].name;\n          flows[conceptName] = conceptID;\n        });\n      });\n      const stateValue = formData.patient_outcome ? formData.patient_outcome.value : 'Continue follow-up';\n      const state = {\n        'location_id': ProgramService.getLocationName(),\n        state: flows[stateValue],\n        date: ProgramService.getSessionDate(),\n      };\n      const saveState = await ProgramService.createState(\n        this.patientID,\n        programID,\n        state\n      );\n      if (!saveState) return toastWarning(\"Unable to update state\");\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...vals]);\n\n      const obs = await this.reception.saveObservationList(data);\n\n      if (!obs) return toastWarning(\"Unable to save patient observations\");\n      toastSuccess(\"Observations and encounter created!\");\n      this.nextTask();\n    },\n\n    getFields(): any {\n      return [\n        {\n          id: \"screening_summary\",\n          helpText: \"Screening Summary\",\n          type: FieldType.TT_DATA_TABLE,\n          config: {\n            rows: () => {\n              return Object.keys(this.summaryData).map((k: string) => {\n                return [table.td(k), table.td(this.summaryData[k])];\n              });\n            },\n          dataTableConfig: {\n            showIndex: false\n          },\n          },\n        },\n        {\n          id: \"figo_staging_results\",\n          helpText: \"FIGO staging results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.referralReason.match(/suspect/gi),\n          options: () =>\n            this.mapOptions([\n              'Cervical stage 1',\n              'Cervical stage 2',\n              'Cervical stage 3',\n              'Cervical stage 4',\n              'Not available',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('FIGO staging of cervical cancer', value.label)\n          })\n        },\n        {\n          id: \"type_of_sample_collected\",\n          helpText: \"Type of sample collected\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition:()=> this.showSampleCollected(),\n          options: () =>\n            this.mapOptions([\n              'Punch Biopsy',\n              'LLETZ sample',\n              'Not available',\n            ]),\n          computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Sample', value.label)\n          })\n        },\n        {\n          id: \"histology_results\",\n          helpText: \"Histology results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formdata: any) => formdata.type_of_sample_collected.value !== \"Not available\" && this.showSampleCollected(), \n          options: () =>\n            this.mapOptions([\n              'Normal',\n              'CIN 1',\n              'CIN 2',\n              'CIN 3',\n              'Carcinoma in Situ',\n              'Invasive cancer of cervix',\n              'Benign cervical warts',\n              'Not available',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Sample', value.label)\n          })\n        },\n        {\n          id: \"complications\",\n          helpText: \"Complications\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formdata: any) => formdata.type_of_sample_collected.value !== \"Not available\" && this.showSampleCollected(), \n          options: () =>\n            this.mapOptions([\n              'Bleeding',\n              'Pain',\n              'None',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Complications', value.label)\n          })\n\n        },\n        {\n          id: \"referral_outcome\",\n          helpText: \"Treatment performed\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () =>\n            this.mapOptions([\n              'Cryotherapy',\n              'Leep',\n              'LLETZ',\n              'Conisation',\n              'Thermocoagulation',\n              'Chronic cervicitis',\n              'Patient refused',\n            ]),\n          computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Treatment', value.label)\n          })\n        },\n        {\n          id: \"recommended_plan_of_care\",\n          helpText: \"Recommended plan of care\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.summaryData['Treatment Type'] !== \"Same day treatment\",\n          options: () =>\n            this.mapOptions([\n              'Hysterectomy',\n              'Trachelectomy',\n              'Discharged',\n              'Continue follow-up',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Recommended Plan of care', value.label)\n          })\n        },{\n          id: \"patient_outcome\",\n          helpText: \"Patient outcome\",\n          type: FieldType.TT_SELECT,\n          condition: () => this.summaryData['Treatment Type'] !== \"Same day treatment\",\n          validation: (val: any) => Validation.required(val),\n          options: () =>\n            this.mapOptions([\n              'Continue follow-up',\n              'Pallialative care',\n              'No Dysplasia/Cancer',\n              'Patient died',\n            ]),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTreatment.vue?vue&type=template&id=30fdc76a&ts=true\"\nimport script from \"./CxCaTreatment.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTreatment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            try {\n                obs = await this.resolveObs(params.computedData)\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}