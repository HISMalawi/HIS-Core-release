{"version":3,"sources":["webpack:///./src/apps/HTS/views/HTSProfessionalTestRegistration.vue?4dca","webpack:///./src/apps/HTS/views/HTSProfessionalTestRegistration.vue","webpack:///./src/apps/HTS/views/HTSProfessionalTestRegistration.vue?4a22","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/composables/storage.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","onFinish","fields","_","defineComponent","components","IonPage","HisStandardForm","setup","ref","PersonField","getGenderField","requireNext","id","helpText","type","FieldType","TT_AGE_INPUT","isRequired","validation","v","value","parseInt","other","timeUnit","finalComputedValue","year","date","split","person","birthdate","birthdate_estimated","config","defaultUnit","excludeUnits","getGivenNameField","TT_HIDDEN","computedValue","getFamilyNameField","getHomeDistrictField","getHomeTaField","getHomeVillageField","getCurrentDistrictField","getCurrentTAfield","getCurrentVillageField","getCellNumberField","computedData","resolvePerson","visitID","Offline","savePersonOffline","StartHtsEncounter","nextTask","synchronizeRecord","then","data","saveOffline","__exports__","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinishAction","onOnIndex","onIndex","name","TouchScreenForm","emits","props","Function","Boolean","String","Object","required","methods","formData","this","$emit","i","mapToOption","listOptions","map","item","label","computedForm","attr","values","isPlainObject","TT_TEXT","val","Validation","isName","options","async","form","given_name","names","PersonService","searchGivenName","family_name","searchFamilyName","customOptions","TT_SELECT","isEmpty","getDobConfig","includeHelpText","summaryLabel","minDate","HisDate","estimateDateFromAge","maxDate","getSessionDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","isEstimate","getHomeRegionField","group","getRegions","summaryMapValue","f","_f$home_region","test","home_region","dynamicHelpText","_f$home_region2","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","slot","color","onClick","c","field","filter","length","toastWarning","filtered","ok","alertConfirmation","address","LocationService","createAddress","toUpperCase","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","getTraditionalAuthorities","home_district","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","_f$home_region3","current_region","match","_f$current_region","current_district","_f$current_region2","current_traditional_authority","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","condition","getFacilityLocationField","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","Array","isArray","person_attributes","reduce","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","person_id","gender","getPersonAttributeOptions","patient","Patientservice","prop","getPatientInfoString","getID","getNationalID","patientID","npid","show","Service","getProgramName","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","Promise","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","constructor","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","get","onerror","error","filters","openCursor","cursor","filteredData","continue","put","delete","entries","every","isInteger","toLower","includes","offlineStorage","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id"],"mappings":"yIAEM,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAA+BC,8BAAkB,qBACjDC,EAAsBD,8BAAkB,YAE9C,OAAQE,yBAAcC,yBAAaF,EAAqB,KAAM,CAC5DG,QAASC,qBAAS,IAAM,CACtBC,yBAAaP,EAA8B,CACzCQ,UAAW,iCACX,0BAA2B,IAC3B,mBAAoBd,EAAKe,SACzB,gBAAgB,EAChBC,OAAQhB,EAAKgB,QACZ,KAAM,EAAG,CAAC,mBAAoB,aAEnCC,EAAG,I,4ECNQC,+BAAgB,CAC3BC,WAAY,CAAEC,eAASC,wBACvBC,QACI,MAAMN,EAASO,iBAAa,CACxB,IACOC,OAAYC,iBACfC,aAAa,GAEjB,CACIC,GAAI,aACJC,SAAU,iCACVC,KAAMC,OAAUC,aAChBC,WAAYA,KAAM,EAClBC,WAAaC,IACT,MAAMC,EAAQC,SAAS,GAAGF,EAAEC,OAC5B,OAAKA,GAAyB,iBAATA,EAGI,WAArBD,EAAEG,MAAMC,WACJH,GAAS,GAAKA,EAAQ,IACf,CAAC,+DAGS,UAArBD,EAAEG,MAAMC,WACJH,GAAQ,GAAKA,EAAQ,KACd,CAAC,yEAFhB,EAPW,CAAC,yBAahBI,mBAAqBL,IACjB,MAAOM,IAAQ,GAAGN,EAAEG,MAAMI,MAAOC,MAAM,KACvC,MAAO,CACHC,OAAQ,CACJC,UAAcJ,EAAH,SACXK,qBAAqB,KAIjCC,OAAQ,CACJC,YAAa,QACbC,aAAc,CACV,QACA,QACA,UAIZ,IACOxB,OAAYyB,oBACfpB,KAAMC,OAAUoB,UAChBC,cAAeA,KAAA,CAASR,OAAQ,aAEpC,IACOnB,OAAY4B,qBACfvB,KAAMC,OAAUoB,UAChBC,cAAeA,KAAA,CAASR,OAAQ,aAEpC,IACOnB,OAAY6B,uBACfxB,KAAMC,OAAUoB,UAChBC,cAAeA,KAAA,CAASR,OAAQ,aAEpC,IACOnB,OAAY8B,iBACfzB,KAAMC,OAAUoB,UAChBC,cAAeA,KAAA,CAASR,OAAQ,aAEpC,IACOnB,OAAY+B,sBACf1B,KAAMC,OAAUoB,UAChBC,cAAeA,KAAA,CAASR,OAAQ,aAEpC,IACOnB,OAAYgC,0BACf3B,KAAMC,OAAUoB,UAChBC,cAAeA,KAAA,CAASR,OAAQ,aAEpC,IACOnB,OAAYiC,oBACf5B,KAAMC,OAAUoB,UAChBC,cAAeA,KAAA,CAASR,OAAQ,aAEpC,IACOnB,OAAYkC,yBACf7B,KAAMC,OAAUoB,UAChBC,cAAeA,KAAA,CAASR,OAAQ,aAEpC,IACOnB,OAAYmC,qBACf9B,KAAMC,OAAUoB,UAChBC,cAAeA,KAAA,CAASR,OAAQ,eAIxC,SAAS5B,EAASE,EAAQ2C,GACtB,MAAMjB,EAASnB,OAAYqC,cAAcD,GACnCE,EAAUC,iBAAUC,kBAAkB,iCAAkCrB,EAAQ,IACtFsB,eAAkB,CAAEH,YAAWI,WAC/BH,iBAAUI,kBAAkBL,GAASM,KAAMC,GAAcN,iBAAUO,YAAYD,IAGnF,MAAO,CACHrD,SACAD,e,qBC5GZ,MAAMwD,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASxE,KAErD,gB,kDCLT,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQI,yBAAcC,yBAAa8D,qCAAyBxE,EAAKyE,UAAW,CAC1EzD,OAAQhB,EAAKgB,OACb0D,YAAa1E,EAAK0E,YAClBC,YAAa3E,EAAK2E,YAClBC,sBAAuB5E,EAAK4E,sBAC5BC,WAAY7E,EAAKe,SACjBA,SAAUf,EAAK8E,eACfC,UAAW/E,EAAKgF,SACf,KAAM,GAAI,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN5F9D,+BAAgB,CAC3B+D,KAAM,kBACN9D,WAAY,CAAE+D,wBACdC,MAAO,CACH,WACA,WAEJd,KAAMA,KAAA,CACFI,SAAU,sBAEdW,MAAO,CACHN,eAAgB,CACZjD,KAAMwD,UAEVX,YAAa,CACT7C,KAAMyD,QACN3E,SAAS,GAEbgE,YAAa,CACT9C,KAAM0D,QAEVvE,OAAQ,CACJa,KAAM2D,OACNC,UAAU,GAEdb,sBAAuB,CACnB/C,KAAM0D,OACNE,UAAU,IAGlBC,QAAS,CACL3E,SAAS4E,EAAe/B,GACpBgC,KAAKC,MAAM,WAAYF,EAAU/B,IAErCoB,QAAQc,GACJF,KAAKC,MAAM,UAAWC,O,qBCnClC,MAAMvB,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASxE,KAErD,U,sLCaf,SAASgG,EAAYC,GACjB,OAAOA,EAAYC,IAAKC,IAAS,CAC7BC,MAAOD,EAAM/D,MAAO+D,KAGb,QACXrC,cAAcuC,GACV,IAAI/B,EAAY,GAChB,IAAI,MAAMgC,KAAQD,EAAc,CAC5B,MAAME,EAASF,EAAaC,GACxBE,2BAAcD,IAAW,WAAYA,IACjCC,2BAAcD,EAAO3D,QACrB0B,EAAO,IAAIA,KAASiC,EAAO3D,QAE3B0B,EAAKgC,GAAQC,EAAO,WAIhC,OAAOjC,GAEXpB,oBACI,MAAO,CACHtB,GAAI,aACJC,SAAU,aACVC,KAAMC,OAAU0E,QAChBrD,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAItE,QAC9CF,WAAawE,GAAaC,OAAWC,OAAOF,GAC5CG,QAASC,UACL,GAAIC,EAAKC,WAAY,CACjB,MAAMC,QAAcC,OAAcC,gBAAgBJ,EAAKC,WAAW5E,OAClE,OAAO4D,EAAYiB,GAEvB,MAAO,MAInB5D,qBACI,MAAO,CACHzB,GAAI,cACJC,SAAU,YACVC,KAAMC,OAAU0E,QAChBrD,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAItE,QAC9CF,WAAawE,GAAaC,OAAWC,OAAOF,GAC5CG,QAASC,UACL,GAAIC,EAAKK,YAAa,CAClB,MAAMH,QAAcC,OAAcG,iBAAiBN,EAAKK,YAAYhF,OACpE,OAAO4D,EAAYiB,GAEvB,MAAO,MAInBvF,eAAe4F,GACX,MAAQ,CACJ1F,GAAI,SACJC,SAAU,MACVC,KAAMC,OAAUwF,UAChBnE,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAItE,QAC9CF,WAAawE,GAAaC,OAAWjB,SAASgB,GAC9CG,QAASA,IAAOW,qBAAQF,GAEjB,CACC,CACIlB,MAAO,SACPhE,MAAO,KAEX,CACIgE,MAAO,OACPhE,MAAO,MARbkF,IAadG,aAAaC,GAAkB,GAC3B,MAAQ,CACJ9F,GAAI,aACJ+F,aAAc,gBACd9F,SAAU6F,EAAkB,QAAU,GACtChC,UAAU,EACVkC,QAASA,IAAMC,OAAQC,oBAAoB,KAC3CC,QAASA,IAAMb,OAAcc,iBAC7BC,WAAY,CACRC,cAAc,EACdC,sBAAsB,EACtBC,oBAAqBC,OAAoBC,oBAE7CC,aAAcA,CAAC7F,EAAc8F,KAClB,CACH9F,OACA8F,aACA5F,OAAQ,CACJC,UAAWH,EACX,oBAAuB8F,OAM3CC,qBACI,MAAO,CACH7G,GAAI,cACJC,SAAU,mBACVC,KAAMC,OAAUwF,UAChBmB,MAAO,SACP/G,aAAa,EACbyB,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAIN,QAC9ClE,WAAawE,GAAaC,OAAWjB,SAASgB,GAC9CG,QAASA,IAAM8B,mBAGvBrF,uBACI,MAAQ,CACJ1B,GAAI,gBACJC,SAAU,qBACVC,KAAMC,OAAUwF,UAChB5F,aAAa,EACbiH,gBAAiBA,CAACzG,EAAW0G,KAAU,IAAAC,EACnC,MAAO,CACH1C,MAAO,WAAW2C,KAAK,IAAI,OAADF,QAAC,IAADA,GAAc,QAAbC,EAADD,EAAGG,mBAAW,IAAAF,OAAA,EAAdA,EAAgB1C,QACpC,eACA,qBACNhE,MAAOD,EAAEiE,QAGjB6C,gBAAkBJ,IAAU,IAAAK,EACxB,MAAI,WAAWH,KAAK,IAAI,OAADF,QAAC,IAADA,GAAc,QAAbK,EAADL,EAAGG,mBAAW,IAAAE,OAAA,EAAdA,EAAgB9C,QAC5B,eAEJ,sBAEXhD,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAIN,QAC9CS,QAAUE,GAAcoC,eAAapC,EAAKiC,YAAY5G,SAG9DgH,mCAAmCC,EAAiBC,GAChD,MAAO,CACHpE,KAAM,OAAOmE,EACbE,KAAM,MACNC,MAAO,UACPC,QAAS3C,MAAO+B,EAAQa,EAAQC,KAC3B,GAA2B,iBAAhBA,EAAMC,QAAsBD,EAAMC,OAAOC,OAAS,EAC1D,OAAOC,eAAa,wBAAwBT,GAE/C,IAAK7B,qBAAQmC,EAAMI,UAChB,OAAOD,eAAa,sBAAsBT,GAE7C,MAAMW,QAAWC,eAAkB,sBAAsBZ,KAAWM,EAAMC,WAE1E,IAAKI,EAAI,OAET,MAAME,QAAgBC,OAAgBC,cAAcf,EAASM,EAAMC,OAAQf,EAAES,GAAsBlH,OACnG,IAAI8H,EAID,OAAOJ,eAAa,iBAAiBT,GAFrCM,EAAMC,OAASD,EAAMC,OAAOS,iBAO5C9G,iBACI,MAAQ,CACJ3B,GAAI,6BACJC,SAAU,eACVC,KAAMC,OAAUwF,UAChB5F,aAAa,EACboB,OAAQ,CACJuH,cAAc,EACdC,oBAAoB,EACpBC,WAAY,CACR3E,KAAKuD,mCAAmC,KAAM,mBAGtDqB,cAAeA,KAAA,CAAQrE,MAAO,MAAOhE,MAAO,QAC5CgB,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAIN,QAC9ClE,WAAawE,GAAaC,OAAWjB,SAASgB,GAC9CG,QAASA,CAACE,EAAW6C,IAAmBc,eAA0B3D,EAAK4D,cAAcvI,MAAOwH,KAGpGpG,sBACI,MAAO,CACH5B,GAAI,eACJC,SAAU,oBACVC,KAAMC,OAAUwF,UAChBxE,OAAQ,CACJuH,cAAc,EACdC,oBAAoB,EACpBC,WAAY,CACR3E,KAAKuD,mCAAmC,UAAW,gCAG3DzH,aAAa,EACb8I,cAAeA,KAAA,CAASrE,MAAO,MAAOhE,MAAO,QAC7CgB,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAIN,QAC9ClE,WAAawE,GAAaC,OAAWjB,SAASgB,GAC9CG,QAASA,CAACE,EAAW6C,IAAmBgB,eAAY7D,EAAK8D,2BAA2BzI,MAAOwH,KAGnGkB,wBACI,MAAO,CACHlJ,GAAI,iBACJC,SAAU,8BACVF,aAAa,EACbG,KAAMC,OAAUwF,UAChBnE,cAAeA,CAACsD,EAAamC,IACrB,YAAYE,KAAK,GAAGrC,EAAItE,OACjB,CACHQ,OAAQ,CACJ,eAAkBiG,EAAEG,YAAY5C,MAChC,iBAAoByC,EAAE8B,cAAcvE,MACpC,8BAAiCyC,EAAEgC,2BAA2BzE,MAC9D,gBAAmByC,EAAEkC,aAAa3E,QAIvC,CAAExD,OAAQ8D,EAAIN,OAEzBlE,WAAawE,GAAaC,OAAWjB,SAASgB,GAC9CG,QAASA,IAAM8B,iBACf5F,OAAQ,CACJyH,WAAY,CACV,CACEtF,KAAM,iBACNqE,KAAM,MACNyB,uBAAwB,CACtBC,SAAUA,IAAM,oBAElBxB,QAASA,IAAM,wBAM/BhG,0BACI,MAAO,CACH7B,GAAI,mBACJC,SAAU,WACVF,aAAa,EACbG,KAAMC,OAAUwF,UAChBqB,gBAAiBA,CAACzG,EAAW0G,KAAU,IAAAqC,EACnC,MAAO,CACH9E,MAAO,WAAW2C,KAAK,IAAI,OAADF,QAAC,IAADA,GAAc,QAAbqC,EAADrC,EAAGG,mBAAW,IAAAkC,OAAA,EAAdA,EAAgB9E,QACpC,kBACA,gCACNhE,MAAOD,EAAEiE,QAGjB6C,gBAAkBJ,GACVA,EAAEsC,gBAAkBtC,EAAEsC,eAAe/E,MAAMgF,MAAM,YAC1C,kBAEJ,gCAEXhI,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAIN,QAC9ClE,WAAawE,GAAaC,OAAWjB,SAASgB,GAC9CG,QAAUE,GAAcoC,eAAapC,EAAKoE,eAAe/I,SAGjEsB,oBACI,MAAU,CACN9B,GAAI,gCACJC,SAAU,0BACVF,aAAa,EACbG,KAAMC,OAAUwF,UAChBxE,OAAQ,CACJuH,cAAc,EACdC,oBAAoB,EACpBC,WAAY,CACR3E,KAAKuD,mCAAmC,KAAM,sBAGtDqB,cAAgB5B,IAAU,IAAAwC,EACtB,IAAK,YAAYtC,KAAK,IAAmB,QAAnBsC,EAAGxC,EAAEsC,sBAAc,IAAAE,OAAA,EAAhBA,EAAkBjF,QACvC,MAAO,CAAEA,MAAO,MAAOhE,MAAO,QAGtCgB,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAIN,QAC9ClE,WAAawE,GAAaC,OAAWjB,SAASgB,GAC9CG,QAASA,CAACE,EAAW6C,IAAmBc,eAA0B3D,EAAKuE,iBAAiBlJ,MAAOwH,KAGvGjG,yBACI,MAAO,CACH/B,GAAI,kBACJC,SAAU,+BACVF,aAAa,EACbG,KAAMC,OAAUwF,UAChBxE,OAAQ,CACJuH,cAAc,EACdC,oBAAoB,EACpBC,WAAY,CACR3E,KAAKuD,mCAAmC,UAAW,mCAG3DqB,cAAgB5B,IAAU,IAAA0C,EACtB,IAAK,YAAYxC,KAAK,IAAmB,QAAnBwC,EAAG1C,EAAEsC,sBAAc,IAAAI,OAAA,EAAhBA,EAAkBnF,QACvC,MAAO,CAAEA,MAAO,MAAOhE,MAAO,QAGtCgB,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAIN,QAC9ClE,WAAawE,GAAaC,OAAWjB,SAASgB,GAC9CG,QAASA,CAACE,EAAW6C,IAAmBgB,eAAY7D,EAAKyE,8BAA8BpJ,MAAOwH,KAGtGhG,qBACI,MAAS,CACLhC,GAAI,oBACJC,SAAU,oBACV6G,MAAO,SACP5G,KAAMC,OAAU0E,QAChBrD,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAIN,QAC9ClE,WAAawE,IACT,GAAIA,EAAK,CACL,GAAIA,EAAItE,MAAMgJ,MAAM,iBAChB,OAAO,KAEX,IAAI,MAAMK,KAAU,GAAG/E,EAAItE,OAAQO,MAAM,KACrC,GAAIgE,OAAW+E,gBAAgB,CAACtF,MAAOqF,EAAQrJ,MAAOqJ,IAClD,MAAO,CAAC,IAAIA,kCAGpB,OAAO,KAEX,MAAO,CAAC,iCAEZ1I,OAAQ,CACJ4I,eAAgB,CACZ,CACI,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,GAAK,IAAK,KAEf,CACI,CAAE,OAAQ,KACV,CAAE,UAAW,OACb,CAAE,eAMtBC,oBACI,MAAO,CACH,CACIhK,GAAI,oBACJiK,QAAS,WACThK,SAAU,kCACVC,KAAMC,OAAUwF,UAChBuE,gBAAkBjD,GAAwC,SAA7BA,EAAEkD,kBAAkB3J,MACjDgB,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAItE,QAC9CF,WAAawE,GAAaC,OAAWjB,SAASgB,GAC9CG,QAASA,IAAMb,EAAY,CACvB,kBACA,OACA,cACA,SACA,iBACA,WACA,mBACA,UACA,SACA,kBACA,WAGR,CACIpE,GAAI,iBACJiK,QAAS,WACThK,SAAU,kCACVC,KAAMC,OAAUiK,QAChBF,gBAAkBjD,GAAyC,UAA9BA,EAAEkD,kBAAkB3J,MACjD6J,UAAYpD,GAAyC,UAA9BA,EAAEkD,kBAAkB3J,MAC3CgB,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAItE,QAC9CF,WAAaC,GAAcwE,OAAWjB,SAASvD,MAI3D+J,2BACI,MAAQ,CACJtK,GAAI,WACJC,SAAU,8BACVC,KAAMC,OAAUwF,UAChBnE,cAAgBsD,IAAW,CAAO9D,OAAQ8D,EAAIN,QAC9ClE,WAAawE,GAAaC,OAAWjB,SAASgB,GAC9CG,QAASA,CAAC3F,EAAQ0I,EAAO,KAAOuC,eAAcvC,GAC9C7G,OAAQ,CACJuH,cAAc,EACdC,oBAAoB,KAIhC6B,2BAA2BC,EAAgBvK,GACvC,OAAIuK,EAAUpF,MAAM4C,OACTwC,EAAUpF,MAAM,GAAGnF,GAEvB,IAEXwK,qBAAqBD,EAAgBvK,GACjC,OAAIyK,MAAMC,QAAQH,EAAUI,oBAAsBJ,EAAUI,kBAAkB5C,OACnEwC,EAAUI,kBAAkBC,OAAO,CAACvK,EAAWuH,IAC9CA,EAAE5H,KAAKoD,OAASpD,EACT4H,EAAEtH,MAEND,EACR,IAEA,IAEXwK,wBAAwBN,EACpBvK,GAQA,GAAIyK,MAAMC,QAAQH,EAAUO,YAAcP,EAAUO,UAAU/C,OAAQ,CAClE,MAAMK,EAAemC,EAAUO,UAAU,GACnCC,EAAqC,CACvC,cAAiB,WACjB,aAAgB,oBAChB,2BAA8B,kBAC9B,gBAAmB,eACnB,8BAAkC,oBAClC,iBAAoB,kBAExB,OAAO3C,EAAQ2C,EAAW/K,IAE9B,MAAO,IAEXgL,cAAcT,GACV,MAAMU,EAAYlH,KAAKuG,2BAA2BC,EAAW,cACvDW,EAAanH,KAAKuG,2BAA2BC,EAAW,eACxDY,EAAepH,KAAK8G,wBAAwBN,EAAW,iBACvDa,EAAcrH,KAAK8G,wBAAwBN,EAAW,gBACtDc,EAAStH,KAAK8G,wBAAwBN,EAAW,8BACvD,MAAO,CACH,GAAMA,EAAUe,UAChB,KAAQ,GAAGL,KAAaC,IACxB,WAAcD,EACd,YAAeC,EACf,OAAUX,EAAUgB,OACpB,WAAchB,EAAUxJ,UACxB,oBAAuBwJ,EAAUvJ,oBACjC,cAAiBmK,EACjB,aAAgBC,EAChB,2BAA8BC,EAC9B,aAAgB,GAAGF,KAAgBC,IACnC,iBAAoBrH,KAAK8G,wBAAwBN,EAAW,oBAC5D,8BAAiCxG,KAAK8G,wBAAwBN,EAAW,iCACzE,kBAAqBxG,KAAKyG,qBAAqBD,EAAW,qBAC1D,SAAYxG,KAAKyG,qBAAqBD,EAAW,6BAGzDiB,0BAA0B1K,GACtB,MAAM2K,EAAU,IAAIC,OAAe5K,GAC7B6K,EAAOA,CAACF,EAAcE,IAAiBA,KAAQF,EAAUA,EAAQE,KAAU,IACjF,MAAO,CACHrH,MAAOmH,EAAQG,uBACftL,MAAOmL,EAAQI,SAAWJ,EAAQK,gBAClCtL,MAAO,CACHuL,UAAWN,EAAQI,QACnBG,KAAMP,EAAQK,gBACdhL,SACAiE,QAAS,CACL,CACIT,MAAO,cACPhE,MAAOqL,EAAKF,EAAS,kBAEzB,CACInH,MAAO,aACPhE,MAAOqL,EAAKF,EAAS,gBACrBjL,MAAO,CACHyL,KAAMA,IAAmC,QAA7BC,OAAQC,mBAG5B,CACI7H,MAAO,OACPhE,MAAOqL,EAAKF,EAAS,gBAEzB,CACInH,MAAO,MACPhE,MAAOqL,EAAKF,EAAS,cAEzB,CACInH,MAAO,YACPhE,MAAOqL,EAAKF,EAAS,iBAEzB,CACInH,MAAO,gBACPhE,MAAOqL,EAAKF,EAAS,oBAEzB,CACInH,MAAO,eACPhE,MAAOqL,EAAKF,EAAS,mBAEzB,CACInH,MAAO,mBACPhE,MAAOqL,EAAKF,EAAS,uBAEzB,CACInH,MAAO,cACPhE,MAAOqL,EAAKF,EAAS,iBAEzB,CACInH,MAAO,YACPhE,MAAOqL,EAAKF,EAAS,yB,geC7gB7C,MAAMW,YAAc,UACdC,QAAU,aAIHC,eAAiBA,CAACC,YAAyB,qBAC/CC,KAAK,OAAOD,iBAGf,MAAOE,aACXC,gBAAgBC,GACd,MAAMnK,EAAOoK,aAAaC,QAAQF,GAClC,OAAInK,EACKsK,QAAQC,SAAQ,GAElBD,QAAQC,SAAQ,GAGzBC,eAAeL,GACb,OAAO,IAAIG,QAAQ,CAACC,EAASE,KAC3B,MAAMzK,EAAOoK,aAAaC,QAAQF,GAClC,GAAInK,EACF,OAAOuK,EAAQG,KAAKC,MAAM3K,IAE5BuK,EAAQ,MAIZK,kBAAkBT,GAEhB,OADAC,aAAaS,WAAWV,IACjB,EAGTW,cAAcX,EAAanK,GAEzB,OADAoK,aAAaW,QAAQZ,EAAKO,KAAKM,UAAUhL,KAClC,GAIL,MAAOiL,iBAGXC,cAAAC,sIAAA,kBACE,MAAMC,EAAcC,UAAUC,KAAKzB,QAAS,GAC5CuB,EAAYG,gBAAkB,WAC5BH,EAAYI,OAAOC,kBAAkB7B,cAEvCwB,EAAYM,UAAY,KACtBnK,KAAKoK,GAAKP,EAAYI,QAI1BtB,gBAAgBC,GACd,OAAO,IAAIG,QAAQ,CAACC,EAASE,KAC3B,MAAMmB,EAAUrK,KAAKoK,GAClBE,YAAYjC,aACZkC,YAAYlC,aACZmC,IAAI5B,GACPyB,EAAQF,UAAY,KAClBnB,EAAQqB,EAAQJ,SAElBI,EAAQI,QAAU,KAChBvB,EAAOmB,EAAQK,UAKrBzB,eAAeL,EAAa+B,GAC1B,OAAO,IAAI5B,QAAQ,CAACC,EAASE,KAC3B,MAAMmB,EAAUrK,KAAKoK,GAClBE,YAAYjC,aACZkC,YAAYlC,aACZuC,aACHP,EAAQF,UAAY,KAClB,MAAMU,EAASR,EAAQJ,OACnBY,GACEA,EAAOjC,MAAQA,GAEfI,EADE2B,EACMG,aAAaD,EAAQF,GAErBE,EAAOtO,MAAMkC,MAGzBoM,EAAOE,YAEP/B,EAAQ,KAGZqB,EAAQI,QAAU,KAChBvB,EAAO,YAKbK,cAAcX,EAAanK,GAKzB,OAJAuB,KAAKoK,GACFE,YAAYjC,YAAa,aACzBkC,YAAYlC,aACZ2C,IAAIvM,EAAMmK,IACN,EAGTS,kBAAkBT,GAKhB,OAJA5I,KAAKoK,GACFE,YAAYjC,YAAa,aACzBkC,YAAYlC,aACZ4C,OAAOrC,IACH,GAIX,SAASkC,aAAaD,EAA4BF,GAChD,OAAO5G,sDAAO8G,EAAOtO,MAAQ+D,GACpBV,OAAOsL,QAAQP,GAASQ,MAAM,EAAEvC,EAAKrM,KACtC6O,yDAAU9K,EAAKsI,KACTrM,GAAS+D,EAAKsI,KAASrM,GAEvBA,GAAS8O,uDAAQ/K,EAAKsI,IAAM0C,SAASD,uDAAQ9O,Q,kCCxH7D,iUAKA,MAAMgP,EAAiBhD,iBAEhBtH,eAAeqF,EAAcvC,EAAO,IACvC,IAAIyH,QAAmBD,EAAetC,eAAe,YAAa,CAAE5J,KAAM0E,IAE1E,OADIpC,IAAQ6J,KAAaA,QAAmBlH,OAAgBgC,cAAc,CAACjH,KAAM0E,KAC1EyH,EAAWzH,OAAQf,IAAYrB,IAAQqB,IAAsB,IAAhBA,EAAE3D,KAAKoM,QACtDpL,IAAKqL,IAAa,CACfnL,MAAOmL,EAASrM,KAChB9C,MAAOmP,EAASC,YAChBlP,MAAOiP,KAIZzK,eAAe2K,EAAiB7H,EAAO,IAC1C,MAAMyH,QAAmBlH,OAAgBuH,QAAQ,CAAC,YAAe9H,IACjE,OAAOyH,EAAWnL,IAAKqL,IAAa,CAC5BnL,MAAOmL,EACPnP,MAAOmP,KAIZzK,eAAe6K,EAAiB/H,EAAO,IAC1C,MAAMgI,QAAczH,OAAgBgC,cAAc,CAC9CjH,KAAM0E,EACNiI,IAAK,4BAGT,OAAOD,EAAM1L,IAAK4L,IAAS,CACvB1L,MAAO0L,EAAK5M,KACZ9C,MAAO0P,EAAK5M,KACZ5C,MAAOwP,KAIRhL,eAAeiL,IAClB,MAAMC,QAAgB7H,OAAgB4H,uBACtC,OAAOC,EAAQ9L,IAAK+L,IAAW,CAC3B7L,MAAO6L,EAAO/M,KACd9C,MAAO6P,EAAO/M,KACd5C,MAAO2P,KAIRnL,eAAe6B,IAClB,IAAIuJ,QAAgBd,EAAetC,eAAe,UAAW,IAI7D,OAHItH,IAAQ0K,KACRA,QAAgB/H,OAAgBxB,cAE7BuJ,EAAQhM,IAAKiM,IAAW,CAC3B/L,MAAO+L,EAAOjN,KACd9C,MAAO+P,EAAOC,UACd9P,MAAO6P,KAIRrL,eAAeqC,EAAakJ,GAC/B,IAAIC,QAAkBlB,EAAetC,eAAe,YAAa,CAAE,UAAauD,IAEhF,OADI7K,IAAQ8K,KAAYA,QAAkBnI,OAAgBhB,aAAakJ,IAChEC,EAAUpM,IAAKqM,IAAa,CAC/BnM,MAAOmM,EAASrN,KAChB9C,MAAOmQ,EAASC,YAChBlQ,MAAOiQ,KAIRzL,eAAe4D,EAA0B+H,EAAoBvN,EAAK,IACrE,IAAIwN,QAAYtB,EAAetC,eAAe,0BAA2B,CACrE0D,YAAaC,EAAYvN,SAG7B,OADIsC,IAAQkL,KAAMA,QAAYvI,OAAgBO,0BAA0B+H,EAAYvN,IAC7EwN,EAAIxM,IAAKyM,IAAO,CACnBvM,MAAOuM,EAAGzN,KACV9C,MAAOuQ,EAAGC,yBACVtQ,MAAOqQ,KAIR7L,eAAe8D,EAAYiI,EAAgC3N,EAAK,IACnE,IAAI4N,QAAiB1B,EAAetC,eAAe,WAAY,CAC3D8D,yBAA0BC,EAAwB3N,SAGtD,OADIsC,IAAQsL,KAAWA,QAAiB3I,OAAgBS,YAAYiI,EAAwB3N,IACrF4N,EAAS5M,IAAK6M,IAAY,CAC7B3M,MAAO2M,EAAQ7N,KACf9C,MAAO2Q,EAAQC,WACf1Q,MAAOyQ","file":"js/chunk-5aa7b09f.f1dd5e86.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Professional-Test Registration\",\n        \"cancel-destination-path\": \"/\",\n        \"on-finish-action\": _ctx.onFinish,\n        \"skip-summary\": true,\n        fields: _ctx.fields\n      }, null, 8, [\"on-finish-action\", \"fields\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent, ref } from \"vue\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { IonPage } from \"@ionic/vue\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { Offline } from '@/composables/offline'\nimport { StartHtsEncounter } from \"../composables/HtsFormEncounter\";\n\nexport default defineComponent({\n    components: { IonPage, HisStandardForm },\n    setup() {\n        const fields = ref<Field[]>([\n            {\n                ...PersonField.getGenderField(),\n                requireNext: false\n            },\n            {\n                id: 'birth_date',\n                helpText: \"Client's age (Years or Months)\",\n                type: FieldType.TT_AGE_INPUT,\n                isRequired: () => true,\n                validation: (v: Option) => {\n                    const value = parseInt(`${v.value}`)\n                    if (!value || typeof value != 'number') {\n                        return ['Invalid Age entered!']\n                    }\n                    if (v.other.timeUnit === 'Months') {\n                        if (value <= 0 || value > 12) {\n                            return [\"Invalid month entered! Minimum month is 1 and maximum is 12\"]\n                        }\n                    }\n                    if (v.other.timeUnit === 'Years') {\n                        if (value <=0 || value > 125) {\n                            return [\"Invalid year entered! Minimum year is 1 and maximum is 125 years\"]\n                        }\n                    }\n                },\n                finalComputedValue: (v: Option) => {\n                    const [year] = `${v.other.date}`.split('-')\n                    return {\n                        person: {\n                            birthdate: `${year}-07-15`,\n                            birthdate_estimated: true\n                        }\n                    }\n                },\n                config: {\n                    defaultUnit: 'Years',\n                    excludeUnits: [\n                        'Hours',\n                        'Weeks',\n                        'Days'\n                    ]\n                }\n            },\n            {\n                ...PersonField.getGivenNameField(),\n                type: FieldType.TT_HIDDEN,\n                computedValue: () => ({ person: \"Unknown\" })\n            },\n            {\n                ...PersonField.getFamilyNameField(),\n                type: FieldType.TT_HIDDEN,\n                computedValue: () => ({ person: \"Unknown\" })\n            },\n            {\n                ...PersonField.getHomeDistrictField(),\n                type: FieldType.TT_HIDDEN,\n                computedValue: () => ({ person: \"Unknown\" })\n            },\n            {\n                ...PersonField.getHomeTaField(),\n                type: FieldType.TT_HIDDEN,\n                computedValue: () => ({ person: \"Unknown\" })\n            },\n            {\n                ...PersonField.getHomeVillageField(),\n                type: FieldType.TT_HIDDEN,\n                computedValue: () => ({ person: \"Unknown\" })\n            },\n            {\n                ...PersonField.getCurrentDistrictField(),\n                type: FieldType.TT_HIDDEN,\n                computedValue: () => ({ person: \"Unknown\" })\n            },\n            {\n                ...PersonField.getCurrentTAfield(),\n                type: FieldType.TT_HIDDEN,\n                computedValue: () => ({ person: \"Unknown\" })\n            },\n            {\n                ...PersonField.getCurrentVillageField(),\n                type: FieldType.TT_HIDDEN,\n                computedValue: () => ({ person: \"Unknown\" })\n            },\n            {\n                ...PersonField.getCellNumberField(),\n                type: FieldType.TT_HIDDEN,\n                computedValue: () => ({ person: \"Unknown\" })\n            }\n        ])\n\n        function onFinish(_: any, computedData: any) {\n            const person = PersonField.resolvePerson(computedData);\n            const visitID = Offline().savePersonOffline('Professional test registration', person, [])\n            StartHtsEncounter({ visitID }).nextTask()\n            Offline().synchronizeRecord(visitID).then((data: any) => Offline().saveOffline(data))\n        }\n\n        return {\n            fields,\n            onFinish\n        }\n    }\n})\n","import { render } from \"./HTSProfessionalTestRegistration.vue?vue&type=template&id=751c369f&ts=true\"\nimport script from \"./HTSProfessionalTestRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./HTSProfessionalTestRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Region of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'District of current residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'District of current residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'TA of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Village of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}