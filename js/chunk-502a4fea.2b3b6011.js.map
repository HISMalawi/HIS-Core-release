{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/apps/HTS/views/encounters/HtsTesting.vue?b834","webpack:///./src/apps/HTS/services/hts_testing_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsTesting.vue","webpack:///./src/apps/HTS/views/encounters/HtsTesting.vue?f681","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/composables/testKits.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","obs","resolveObs","computedData","status","enc","AppEncounterService","encounterTypeID","createEncounter","saveObservationList","callback","test","error","toastDanger","saveObsOffline","observations","id","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","onFinishAction","onFinish","cancelDestinationPath","_","HtsTestingService","constructor","super","getRecentAccesspoint","getFirstValueCoded","IonPage","mixins","EncounterMixinVue","service","clientAge","watch","handler","accessPointTypeField","facilityAccessPointField","communityAccessPoints","testsOfferedField","lastHivTestResultField","lastHivTestTypeField","lastTimeHIVTestedField","arvHistoryField","drugTakenField","mostRecentDrugHiddenField","timeSinceDrugTaken","clientRiskCategoryField","testResultsField","hivTestKitDetailsField","hivResultHiddenField","hivPatientCategoryField","immediate","saveFormEncounterAndProceed","PatientProgramService","enrollProgram","invalidate","validateTimeUnit","v","maxDaysAllowed","maxWeeksAllowed","maxMonthsAllowed","timeUnit","Date","date","inclonclusiveResultDialog","testOffered","tests_offered","some","result","test_results","helpText","type","FieldType","TT_SELECT","isRequired","finalComputedValue","buildValueCoded","TT_SELECT_GRID","f","accesspoint_type","buildValueText","config","columnsPerRow","availableTests","TT_MULTIPLE_SELECT","init","getUserProp","UserProp","res","tests","prop","replace","trim","defaultOutput","buildOptionsOnce","includes","last_hiv_result","TT_AGE_INPUT","beforeNext","monthsAgoInt","validation","buildObs","excludeUnits","TT_MULTIPLE_YES_NO","concept","last_taken_drugs","TT_HIDDEN","defaultValue","fdata","value_text","value_datetime","TT_INPUT_ARRAY","t","expiryDate","lotNo","columns","summaryMapValue","someIncomplete","count","x","incomplete","parentObs","childObs","l","child","kits","r","every","buildValueDate","testResults","kitNameOption","kitName","clearable","usefontBold","kitLotNoOption","onclick","val","keyboard","TT_TEXT","kitExpiryDateOption","TT_FULL_DATE","toDate","enteredKits","test_kit","existingOption","shortName","getLotNo","getExpiryDate","initKits","TestKit","isStatus","resultMap","isInconclusive","isPositive","onValueUpdate","results","testOneIsPositive","testTwoIsPositive","disable","disabled","forEach","category","undefined","accessPoint","resultModel","KitProp","DETERMINE","UNIGOLD","BIOLINE","SYPHILIS","HEPATITIS","prevResults","defaultOption","existingResult","c","appearInSummary","onload","hasLastTestPerfomed","last_hiv_perfomed","hasLastHivResult","testOneResult","testTwoResult","testThreeResult","testOneRepeat","isCommunity","lastHIVResult","lastTestPerfomed","inconclusiveNegativeForPreviousPositiveProfessional","Negative","Positive","Inconclusive","keys","finalResult","key","Boolean","hivStatusCategory","hiv_result","newHivStatus","lastHivResult","lastTypeOfTestPerformed","lastTimeHivTestedInMonths","last_time_hiv_tested","hivCategoryRef","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","String","required","$emit","isCondition","ignored","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info","ref","setUserProp","getSelectedTests","req","defaultKits","testGroup","visible","userProp","HIV_SELF_KIT","selectedKits","TEST_KIT_USER_PROPERTY","prevKits","JSON","parse","kit","preset","k","Service","saveKits","stringify"],"mappings":"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","file":"js/chunk-502a4fea.2b3b6011.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            let created = false\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Testing\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsTestingService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 197, providerID)\n    }\n\n    getRecentAccesspoint() {\n        return this.getFirstValueCoded('HTS Access Type')\n    }\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport { HtsTestingService } from \"@/apps/HTS/services/hts_testing_service\";\nimport { infoActionSheet } from \"@/utils/ActionSheets\";\nimport { PatientProgramService } from \"@/services/patient_program_service\";\nimport Store from \"@/composables/ApiStore\";\nimport keyboard from \"@/utils/PopupKeyboard\";\nimport { find } from \"lodash\";\nimport { toDate } from \"@/utils/Strs\";\nimport { KitProp, TestKit } from \"../../composables/testKits\";\nimport UserProp from \"@/composables/userproperty\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsTestingService,\n    clientAge: -1\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsTestingService(this.patientID, this.providerID);\n          this.fields = [\n            this.accessPointTypeField(),\n            this.facilityAccessPointField(),\n            this.communityAccessPoints(),\n            this.testsOfferedField(),\n            this.lastHivTestResultField(),\n            this.lastHivTestTypeField(),\n            this.lastTimeHIVTestedField(),\n            this.arvHistoryField(),\n            this.drugTakenField(),\n            this.mostRecentDrugHiddenField(),\n            this.timeSinceDrugTaken(),\n            this.clientRiskCategoryField(),\n            this.testResultsField(),\n            this.hivTestKitDetailsField(),\n            this.hivResultHiddenField(),\n            this.hivPatientCategoryField()\n          ];\n        }\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    onFinish(formData: any, computedData: any) {\n      this.saveFormEncounterAndProceed({\n        encounterTypeID: this.service.encounterTypeID,\n        formData,\n        computedData,\n        callback: async () => {\n          try{\n            await new PatientProgramService(this.patientID).enrollProgram();\n            Store.invalidate(\"PATIENT_PROGRAM\");\n          } catch (e) {\n            console.log(\"Program enrollment error: \" + e)\n          }\n        }\n      })\n    },\n    validateTimeUnit(v: Option) {\n      const maxDaysAllowed = 90;\n      const maxWeeksAllowed = 12;\n      const maxMonthsAllowed = 24;\n\n      if (parseInt(`${v.other.value}`) <= 0 && !/day/i.test(v.other.timeUnit)) {\n        return [`Enter ${v.other.timeUnit} greater than zero`];\n      }\n      if(v.other.timeUnit === 'Days' && parseInt(`${v.other.value}`) > maxDaysAllowed) {\n        return [`Enter ${v.other.timeUnit} less than ${maxDaysAllowed}, use Weeks Instead`];\n      }\n      if(v.other.timeUnit === 'Weeks' && parseInt(`${v.other.value}`) > maxWeeksAllowed) {\n        return [`Enter ${v.other.timeUnit} less than ${maxWeeksAllowed}, use Months Instead`];\n      }\n      if(v.other.timeUnit === 'Months' && parseInt(`${v.other.value}`) > maxMonthsAllowed) {\n        return [`Enter ${v.other.timeUnit} less than ${maxMonthsAllowed}, use Years Instead`];\n      }\n      if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n        return [`Value ${v.other.value} is invalid!`];\n      }\n      if (new Date(v.other.date) < new Date(this.facts.birthDate)) {\n        return [\n          `${\n            v.label\n          } is greater than client's age of ${this.facts.age} Years`,\n        ];\n      }\n      return null;\n    },\n    inclonclusiveResultDialog() {\n      return infoActionSheet(\n        \"Reschedule test\",\n        \"\",\n        \"HIV result is inconclusive, schedule another test in 2 weeks\",\n        [{ name: \"Ok\", slot: \"start\" }]\n      );\n    },\n    testOffered(formData: any, test: string) {\n      return formData.tests_offered.some((v: Option) => v.value === test);\n    },\n    result(formData: any, test: string) {\n      return find(formData.test_results, { other: { id: test } }) || {}\n    },\n    accessPointTypeField(): Field {\n      return {\n        id: \"accesspoint_type\",\n        helpText: \"Access point type\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\"HTS Access Type\", v.value),\n          };\n        },\n        options: () => {\n          return [\n            {label:\"Health Facility\", value:\"Health Facility\"},\n            { label: \"Community\", value: \"Community\" },\n            { label: \"Facility Referred from Community\", value: \"Health Facility\" }\n          ];\n        },\n      };\n    },\n    facilityAccessPointField(): Field {\n      return {\n        id: \"facility_access_points\",\n        helpText: \"Health facility access points\",\n        type: FieldType.TT_SELECT_GRID,\n        isRequired: () => true,\n        condition: (f: any) => f.accesspoint_type.value === \"Health Facility\",\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              `${v.value}`\n            ),\n          };\n        },\n        config: {\n          columnsPerRow: 2\n        },\n        options: () => {\n          return [\n            {label: \"1 | VCT\", value: \"VCT\"},\n            {label: \"2 | ANC\", value: \"ANC First Visit\"},\n            {label: \"3 | Inpatient\", value: \"Inpatient\"},\n            {label: \"4 | STI\", value: \"STI\"},\n            {label: \"5 | PMTCT-Follow-up (ANC FUP, Mat, Post-nat, BF)\", value: \"PMTCT FUP\"},\n            {label: \"6 | Index\", value: \"Index\"},\n            {label: \"7 | Paediatric\", value: \"Paediatric\"},\n            {label: \"8 | VMMC\", value: \"VMMC\"},\n            {label: \"9 | Malnutrition\", value: \"Malnutrition\"},\n            {label: \"10 | TB\", value: \"TB\"},\n            {label: \"11 | OPD\", value: \"OPD\"},\n            {label: \"12 | Other PITC (PrEP, dental e.t.c)\", value: \"Other\"},\n            {label: \"18 | SNS (Social Network Strategies)\", value: \"SNS\"},\n          ];\n        },\n      };\n    },\n    communityAccessPoints(): Field {\n      return {\n        id: \"community_access_points\",\n        helpText: \"Community access points\",\n        type: FieldType.TT_SELECT,\n        condition: (f: any) => f.accesspoint_type.value === \"Community\",\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              `${v.value}`\n            ),\n          };\n        },\n        options: () => {\n          return [\n            {label: \"13 | VCT\", value: \"VCT\"},\n            {label: \"14 | Index\", value: \"Index\"},\n            {label: \"15 | VMMC\", value: \"VMMC\"},\n            {label: \"16 | Other\", value: \"Other\"},\n            {label: \"17 | SNS\", value: \"SNS\"},\n            {label: \"19 | Mobile\", value: \"Mobile\"},\n          ];\n        },\n      };\n    },\n    testsOfferedField(): Field {\n      let availableTests: string[] = [\n        'HIV',\n        'Syphilis',\n        'Hepatitis B'\n      ]\n      return {\n        id: \"tests_offered\",\n        helpText: \"Tests to be offered today?\",\n        type: FieldType.TT_MULTIPLE_SELECT,\n        init: async () => {\n          try {\n            const { getUserProp } = UserProp()\n            const res = await getUserProp('HTS_PROGRAMS')\n            const tests = res.split(',').filter(\n              (prop: string) => /HIV|syphilis|hepatitis/i.test(prop)\n            ).map((test: string) => test.replace(/test/i, '').trim())\n            if (tests.length >= 1) availableTests = tests\n          } catch (e) {\n            console.error(e)\n            return false\n          }\n          return true\n        },\n        isRequired: () => true,\n        condition: () => availableTests.length > 1,\n        defaultOutput: () => this.mapStrToOptions(availableTests),\n        options: () => this.mapStrToOptions(availableTests),\n        config: {\n          buildOptionsOnce: true\n        },\n      };\n    },\n    lastHivTestResultField(): Field {\n      return {\n        id: \"last_hiv_result\",\n        helpText: \"Last HIV Test\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Previous HIV Test Results\",\n              v.value\n            ),\n          };\n        },\n        options: () => {\n          return this.toConditionalOptions([\n            [\"Never Tested\"],\n            [\"Negative\"],\n            [\"Positive\"],\n            [\"Exposed infant\"],\n            [\"Invalid or inconclusive\"],\n          ]);\n        },\n      };\n    },\n    lastHivTestTypeField(): Field {\n      return {\n        id: \"last_hiv_perfomed\",\n        helpText: \"Last HIV test performed\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) =>\n          ![\"Never Tested\", \"Exposed infant\"].includes(f.last_hiv_result.value),\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Previous HIV test done\",\n              v.value\n            ),\n          };\n        },\n        defaultOutput: (f: any) => {\n          if (/exposed infant/i.test(f.last_hiv_result.value)) {\n            return this.toOption('Professional')\n          }\n        },\n        options: (f: any) => {\n          return this.toConditionalOptions([\n            [\"Self\"],\n            [\n              \"Initial professional\",\n              !/Negative|Inconclusive/i.test(f.last_hiv_result.value),\n            ],\n            [\"Professional\"],\n          ]);\n        },\n      };\n    },\n    lastTimeHIVTestedField(): Field {\n      return {\n        id: \"last_time_hiv_tested\",\n        helpText: \"Time since last HIV test\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_hiv_result.value && f.last_hiv_result.value != \"Never Tested\",\n        isRequired: () => true,\n        beforeNext: async (v: Option, f: any) => {\n          if (v.other.monthsAgoInt >= 12 && !this.testOffered(f, \"HIV\")) {\n            await infoActionSheet(\n              \"Recommendation Alert\",\n              \"\",\n              \"Please consider testing client for HIV\",\n              [\n                {\n                  name: \"Ok\",\n                  slot: \"start\",\n                  color: \"primary\",\n                },\n              ]\n            );\n          }\n          return true;\n        },\n        validation: (v: Option) => this.validateTimeUnit(v),\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildObs(\"Time of HIV test\", {\n              'value_datetime': v.other.date,\n              'value_text': v.value\n            })\n          }\n        },\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    },\n    arvHistoryField(): Field {\n      return {\n        id: \"last_taken_drugs\",\n        helpText: \"Ever taken the following drugs?\",\n        type: FieldType.TT_MULTIPLE_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v.map((d) =>\n              this.service.buildValueCoded(d.other.concept, d.value)\n            ),\n          };\n        },\n        options: (f: any) => {\n          if (f.last_taken_drugs) return f.last_taken_drugs;\n          return [\n            this.toYesNoOption(\"PrEP or infant NVP\", {\n              concept: \"Taken Prep before\",\n            }),\n            this.toYesNoOption(\"ART\", { concept: \"Taken ARV Before\" }),\n            this.toYesNoOption(\"PEP\", { concept: \"Taken PEP before\" }),\n          ];\n        },\n      };\n    },\n    drugTakenField(): Field {\n      /**\n       * Select Most recent drug from list of drugs\n       */\n      return {\n        id: \"drug_taken\",\n        helpText: \"Most recent drug taken\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) =>\n          f.last_taken_drugs.filter((d: Option) => d.value === \"Yes\").length >\n          1,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Most recent drug taken\",\n              v.value\n            ),\n          };\n        },\n        options: (f: any) => {\n          return f.last_taken_drugs\n            .filter((d: Option) => d.value === \"Yes\")\n            .map((d: Option) => this.toOption(d.label));\n        },\n      };\n    },\n    mostRecentDrugHiddenField(): Field {\n      /**\n       * Automatically determines recent drug if only one drug is Yes\n       */\n      return {\n        id: \"most_recent_drug\",\n        helpText: \"Most recent drug\",\n        type: FieldType.TT_HIDDEN,\n        condition: (f: any) =>\n          f.last_taken_drugs.filter((d: Option) => d.value === \"Yes\").length ===\n          1,\n        defaultValue: (fdata?) => {\n          return find(fdata.last_taken_drugs, { value: \"Yes\" });\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Most recent drug taken\",\n              v.value\n            ),\n          };\n        },\n      };\n    },\n    timeSinceDrugTaken(): Field {\n      return {\n        id: \"time_since_last_drug_taken\",\n        helpText: \"Time since last taken medication\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_taken_drugs.some((d: Option) => d.value === \"Yes\"),\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildObs(\"Time since last taken medication\", {\n              value_text: `${v.value} ago`,\n              value_datetime: v.other.date,\n            }),\n          };\n        },\n        validation: (v: Option) => this.validateTimeUnit(v),\n        isRequired: () => true,\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    },\n    clientRiskCategoryField(): Field {\n      return {\n        id: \"client_risk_category\",\n        helpText: \"Client Risk Category\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\"client risk category\", v.value),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\n            \"Low risk\",\n            \"On-going risk\",\n            \"High risk event in last 3 months\",\n            \"Risk assessment not done\",\n          ]);\n        },\n      };\n    },\n    hivTestKitDetailsField(): Field {\n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        condition: (f: any) => f.test_results.filter((t: Option) => t.value!='')\n          .some((t: Option) => !(t.other.expiryDate && t.other.lotNo)),\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        summaryMapValue: (v: Option) => {\n          return {\n            label: `Kit: ${v.label}`,\n            value: `Lot No: ${v.value || v.other.fields[1].value}`\n          }\n        },\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 3;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        defaultOutput: (f: any) => {\n          const kits = f.test_results.filter((r: Option) => r.value!='')\n          if (kits.every((t: Option) => t.other.expiryDate && t.other.lotNo)) {\n            return kits.map((v: Option) => {\n              return {\n                label: v.label,\n                value: v.other.lotNo,\n                other: {\n                  fields: [\n                    {\n                      label: 'Kit name',\n                      value: v.label,\n                      other: {\n                        obs: () => this.service.buildValueText(\"Kit name\", v.label as string),\n                      }\n                    },\n                    {\n                      label: 'Kit Lot No',\n                      value: v.other.lotNo,\n                      other: {\n                        obs: () => {\n                          return this.service.buildValueText(\"Kit lot number\", v.other.lotNo as string)\n                        } \n                      }\n                    },\n                    {\n                      label: 'Kit expiry date',\n                      value: v.other.expiryDate,\n                      other: {\n                        obs: () => this.service.buildValueDate(\"kit expiry date\", v.other.expiryDate as string),\n                      }\n                    }\n                  ]\n                }\n              }\n            })\n          }\n        },\n        options: async (f: any) => {\n          const testResults: Option[] = Array.isArray(f.test_results) ? f.test_results : [];\n          const kitNameOption = (kitName: string) => ({\n            label: \"Kit Name\",\n            value: kitName,\n            clearable: false,\n            other: {\n              usefontBold: true,\n              obs: (v: Option) => this.service.buildValueText(\"Kit name\", v.label as string),\n            }\n          });\n          const kitLotNoOption = (lotNo: string) => ({\n            label: \"Kit Lot No.\",\n            value: lotNo,\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueText(\"Kit lot number\", v.value as string),\n              onclick: (val: Option) => {\n                keyboard({\n                  id: 'lot',\n                  helpText: 'Enter Lot Number',\n                  type: FieldType.TT_TEXT,\n                  isRequired: () => true\n                }, \n                (v: Option) => {\n                  val.value = v.value\n                })\n              },\n            },\n          });\n          const kitExpiryDateOption = (expiryDate: string) => ({\n            label: \"Kit Expiry Date\",\n            value: expiryDate,\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueDate(\"kit expiry date\", v.value as string),\n              onclick: (val: Option) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(this.service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(this.service.date),\n                        ];\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => {\n                    val.value = v.value\n                  }\n                );\n              },\n            },\n          });\n          const enteredKits = f.test_kit === null ? [] : f.test_kit;\n          return testResults\n            .filter((t) => t.value != \"\")\n            .map((t) => {\n              const existingOption = find(enteredKits, { label: t.label });\n              if (existingOption) return existingOption;\n              return {\n                label: t.label,\n                value: \"\",\n                other: {\n                  fields: [\n                    kitNameOption(t.other.shortName),\n                    kitLotNoOption(t.other.lotNo),\n                    kitExpiryDateOption(t.other.expiryDate)\n                  ]\n                }\n              };\n            });\n        },\n      };\n    },\n    testResultsField(): Field {\n      const { getLotNo, getExpiryDate, initKits } = TestKit()\n      const isStatus = (l: Option[], test: string, status: string) =>\n        find(l, {\n          value: status,\n          other: { id: test },\n        })\n          ? true\n          : false;\n      return {\n        id: \"test_results\",\n        helpText: \"Test results\",\n        type: FieldType.TT_MULTIPLE_YES_NO,\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => {\n          const resultMap: Record<string, string> = {\n            \"Positive\": \"Reactive\",\n            \"Negative\": \"Non-reactive\"\n          }\n          if (v.value != \"\") {\n            return {\n              label: v.label, \n              value: resultMap[v.value] || v.value\n            } \n          }\n        },\n        beforeNext: async (v: Option[], f: any) => {\n          const isInconclusive = (isStatus(v, \"test_2\", \"Negative\") &&\n              isStatus(v, \"test_1_repeat\", \"Positive\")) ||\n            (isStatus(v, \"test_2\", \"Positive\") &&\n              isStatus(v, \"test_3\", \"Negative\"))\n          if (/inconclusive/i.test(f.last_hiv_result.value) && isInconclusive) {\n            await infoActionSheet(\n              \"Inconclusive Re-Test Result\",\n              \"\",\n              \"Please collect DBS sample.\",\n              [{ name: \"Ok\", slot: \"start\" }]\n            );\n            return true\n          }\n          if (isInconclusive) {\n            await this.inclonclusiveResultDialog();\n            return true\n          }\n          const isPositive = isStatus(v, \"test_1\", \"Positive\") && \n            isStatus(v, \"test_2\", \"Positive\") &&\n            isStatus(v, \"test_3\", \"Positive\")\n          \n          if (isPositive && this.facts.age <= 0) {\n            await infoActionSheet(\n              \"<12 months old all HIV tests reactive\",\n              \"\",\n              \"Please collect DBS sample for EID\",\n              [{ name: \"Ok\", slot: \"start\" }]\n            );\n          }\n          return true;\n        },\n        onValueUpdate: (l: Option[], v: any, f: any) => {\n          // Manage Three test algorithm for HIV results\n          if (\n            this.testOffered(f, \"HIV\") &&\n            f.accesspoint_type.value === \"Health Facility\"\n          ) {\n            const results: Option[] = [...l];\n            const testOneIsPositive = isStatus(results, \"test_1\", \"Positive\");\n            const testTwoIsPositive = isStatus(results, \"test_2\", \"Positive\");\n            const disable = (test: string, disabled: boolean) => {\n              results.forEach((r) => {\n                if (r.other.id === test) {\n                  r.disabled = disabled;\n                  if (disabled) r.value = \"\";\n                }\n              });\n            };\n            if (testOneIsPositive) {\n              disable(\"test_2\", false);\n            } else {\n              disable(\"test_2\", true);\n              disable(\"test_3\", true);\n              disable(\"test_1_repeat\", true);\n              return results;\n            }\n            if (testOneIsPositive && testTwoIsPositive) {\n              disable(\"test_3\", false);\n              disable(\"test_1_repeat\", true);\n              return results;\n            }\n            if (\n              testOneIsPositive &&\n              !testTwoIsPositive &&\n              l.some((d) => d.other.id === \"test_2\" && d.value != \"\")\n            ) {\n              disable(\"test_1_repeat\", false);\n              disable(\"test_3\", true);\n            }\n            return results;\n          }\n          return l;\n        },\n        validation: (v: Option[]) => {\n          if (v.some((d) => d.value === \"\" && !d.disabled)) {\n            return [\"Result entry incomplete!\"];\n          }\n          return null;\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v\n              .filter((d) => d.value && typeof d.other.obs === \"function\")\n              .map((d) => d.other.obs(d)),\n          };\n        },\n        init: async () => {\n          await initKits()\n          return true\n        },\n        condition: (f: any) => f.tests_offered.length,\n        options: (f: any) => {\n          const option = (params = {} as any) => {\n            return {\n              label: params.name,\n              value: \"\",\n              disabled: typeof params?.disabled === \"boolean\" ? params.disabled : false,\n              other: {\n                id: params?.id || \"\",\n                concept: params?.concept || \"\",\n                shortName: params?.shortName || \"\",\n                category: params?.category || \"\",\n                expiryDate: params?.expiryDate || \"\",\n                lotNo: params?.lotNo || \"\",\n                obs: typeof params?.obs === \"function\" ? params.obs : undefined,\n                accessPoint: params?.accessPoint || \"*\",\n                values: [\n                  { label: \"Reactive\", value: \"Positive\" }, \n                  { label: \"Non-reactive\", value: \"Negative\" }\n                ]\n              }\n            }\n          }\n          const resultModel: Option[] = [\n            option({\n              id: \"test_1\",\n              name: \"HIV Test 1 (Determine)\",\n              category: \"HIV\",\n              shortName: \"Determine\",\n              lotNo: getLotNo(KitProp.DETERMINE),\n              expiryDate: getExpiryDate(KitProp.DETERMINE),\n              concept: \"Test 1\",\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: \"test_2\",\n              name: \"HIV Test 2 (Unigold)\",\n              category: \"HIV\",\n              disabled: true,\n              accessPoint: \"Health Facility\",\n              shortName: \"Unigold\",\n              concept: \"Test 2\",\n              lotNo: getLotNo(KitProp.UNIGOLD),\n              expiryDate: getExpiryDate(KitProp.UNIGOLD),\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: \"test_1_repeat\",\n              name: \"HIV Test 1 (Determine) Repeat\",\n              category: \"HIV\",\n              disabled: true,\n              shortName: \"Determine (Repeat)\",\n              accessPoint: \"Health Facility\",\n              concept: \"Immediate Repeat Test 1 Result\",\n              lotNo: getLotNo(KitProp.DETERMINE),\n              expiryDate: getExpiryDate(KitProp.DETERMINE),\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              id: \"test_3\",\n              name: \"HIV Test 3 (Bioline)\",\n              category: \"HIV\",\n              disabled: true,\n              shortName: \"Bioline\",\n              accessPoint: \"Health Facility\",\n              concept: \"Test 3\",\n              lotNo: getLotNo(KitProp.BIOLINE),\n              expiryDate: getExpiryDate(KitProp.BIOLINE),\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              name: \"Syphilis Test Result\",\n              category: \"Syphilis\",\n              shortName: \"Syphilis\",\n              concept: \"Syphilis Test Result\",\n              lotNo: getLotNo(KitProp.SYPHILIS),\n              expiryDate: getExpiryDate(KitProp.SYPHILIS),\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n            option({\n              name: \"Hepatitis B Test Result\",\n              category: \"Hepatitis B\",\n              shortName: \"Hepatitis B\",\n              concept: \"Hepatitis B Test Result\",        \n              lotNo: getLotNo(KitProp.HEPATITIS),\n              expiryDate: getExpiryDate(KitProp.HEPATITIS),\n              obs: (v: Option) =>\n                this.service.buildValueCoded(v.other.concept, v.value),\n            }),\n          ];\n          const accessPoint = f.accesspoint_type.value;\n          const prevResults = Array.isArray(f.test_results)\n            ? f.test_results\n            : [];\n          // Merge previous entered results to default result model\n          const results: Option[] = resultModel.reduce(\n            (all: any, defaultOption: Option) => {\n              const existingResult = find(prevResults, {\n                label: defaultOption.label,\n              });\n              if (existingResult) {\n                if (\n                  existingResult.other.accessPoint != \"*\" &&\n                  existingResult.other.accessPoint != accessPoint\n                ) {\n                  existingResult.value = \"\";\n                }\n                all.push(existingResult);\n              } else {\n                all.push(defaultOption);\n              }\n              return all;\n            },\n            [] as Option[]\n          );\n          // Filter options by selected tests offered and access point field values\n          return f.tests_offered.reduce((all: Option[], c: Option) => {\n            const options: Option[] = results.filter(\n              (r: Option) =>\n                r.other.category === c.value &&\n                (r.other.accessPoint === accessPoint ||\n                  r.other.accessPoint === \"*\")\n            );\n            return options.length ? all.concat(options) : all;\n          }, []);\n        },\n      };\n    },\n    hivResultHiddenField(): Field {\n      let result = \"\";\n      return {\n        id: \"hiv_result\",\n        helpText: \"HIV Result\",\n        type: FieldType.TT_HIDDEN,\n        appearInSummary: () => false,\n        condition: (f: any) => this.testOffered(f, \"HIV\"),\n        onload: (f: any) => {\n          let hasLastTestPerfomed = f.last_hiv_perfomed != null;\n          let hasLastHivResult = f.last_hiv_result != null;\n          let testOneResult = \"\";\n          let testTwoResult = \"\";\n          let testThreeResult = \"\";\n          let testOneRepeat = \"\";\n          const testResults = f.test_results != null ? f.test_results : [];\n          const isCommunity = f.accesspoint_type.value === \"Community\";\n          const lastHIVResult = () => f.last_hiv_result?.value;\n          const lastTestPerfomed = () => f.last_hiv_perfomed?.value;\n          testResults.forEach((r: Option) => {\n            switch (r.other.id) {\n              case \"test_1\":\n                testOneResult = r.value as string;\n                break;\n              case \"test_2\":\n                testTwoResult = r.value as string;\n                break;\n              case \"test_3\":\n                testThreeResult = r.value as string;\n                break;\n              case \"test_1_repeat\":\n                testOneRepeat = r.value as string;\n                break;\n            }\n          });\n          const inconclusiveNegativeForPreviousPositiveProfessional = () =>\n            hasLastHivResult &&\n            hasLastTestPerfomed &&\n            lastHIVResult() === \"Positive\" &&\n            lastTestPerfomed() === \"Professional\" &&\n            (testOneResult === \"Negative\" ||\n              testTwoResult === \"Negative\" ||\n              testThreeResult === \"Negative\");\n          const results: any = {\n            Negative: () => [\n              !inconclusiveNegativeForPreviousPositiveProfessional(),\n              testOneResult === \"Negative\" ||\n                testTwoResult === \"Negative\" ||\n                testThreeResult === \"Negative\" ||\n                testOneRepeat === \"Negative\",\n            ],\n            Positive: () => [!isCommunity, testThreeResult === \"Positive\"],\n            Inconclusive: () => [\n              !isCommunity,\n              inconclusiveNegativeForPreviousPositiveProfessional() ||\n                (testTwoResult === \"Negative\" &&\n                  testOneRepeat === \"Positive\") ||\n                (testTwoResult === \"Positive\" &&\n                  testThreeResult === \"Negative\"),\n            ],\n            \"Refer client to HIV Clinic\": () => [\n              isCommunity,\n              testOneResult === \"Positive\",\n            ],\n          };\n          result = Object.keys(results).reduce((finalResult: any, key: any) => {\n            if (results[key]().every(Boolean)) return key;\n            return finalResult;\n          }, \"Not indicated\");\n        },\n        defaultValue: () => {\n          if (result) return this.toOption(result);\n        },\n        finalComputedValue: () => {\n          if (result) {\n            return {\n              obs: this.service.buildValueCoded(\"HIV status\", result),\n            };\n          }\n        },\n      };\n    },\n    hivPatientCategoryField(): Field {\n      let hivStatusCategory = \"N/A\";\n      return {\n        id: \"patient_category\",\n        helpText: \"Result given to client\",\n        type: FieldType.TT_HIDDEN,\n        onload: (f: any) => {\n          if (!f.hiv_result) return;\n          const newHivStatus = f.hiv_result.value;\n          const clientAge = this.facts.age;\n          const lastHivResult = f.last_hiv_result.value;\n          const lastTypeOfTestPerformed =\n            f.last_hiv_perfomed != null ? f.last_hiv_perfomed.value : \"\";\n          const lastTimeHivTestedInMonths =\n            f.last_time_hiv_tested != null\n              ? f.last_time_hiv_tested.other.monthsAgoInt\n              : -1;\n\n          const hivCategoryRef: Record<string, boolean[]> = {\n            \"New exposed infant\": [\n              clientAge <= 0,\n              newHivStatus === \"Positive\",\n              /exposed|inconclusive|negative/i.test(lastHivResult) ||\n                (lastHivResult === \"Positive\" &&\n                  /initial professional|self/i.test(lastTypeOfTestPerformed)),\n            ],\n            \"New Positive\": [\n              newHivStatus === \"Positive\",\n              /never tested|negative|exposed|inconclusive/i.test(\n                lastHivResult\n              ) ||\n                (lastHivResult === \"Positive\" &&\n                  /initial professional|self/i.test(lastTypeOfTestPerformed) &&\n                  lastTimeHivTestedInMonths <= 12),\n            ],\n            \"Confirmatory Positive\": [\n              newHivStatus === \"Positive\",\n              lastHivResult === \"Positive\",\n              lastTypeOfTestPerformed === \"Professional\",\n              lastTimeHivTestedInMonths <= 12,\n            ],\n            \"Confirmatory Inconclusive\": [\n              lastTypeOfTestPerformed === \"Professional\",\n              lastTimeHivTestedInMonths <= 12,\n              newHivStatus === \"Inconclusive\",\n            ],\n            \"New Negative\": [newHivStatus === \"Negative\"],\n            \"New Inconclusive\": [\n              newHivStatus === \"Inconclusive\",\n              (/self/i.test(lastTypeOfTestPerformed) && /invalid/i.test(lastHivResult)) ||\n              /never tested|negative|exposed infant/i.test(lastHivResult) ||\n                (lastHivResult === \"Positive\" &&\n                  /self|initial professional/i.test(lastTypeOfTestPerformed)),\n            ],\n          };\n          hivStatusCategory = Object.keys(hivCategoryRef).reduce(\n            (status: string, key: string) =>\n              hivCategoryRef[key].every(Boolean) ? key : status,\n            \"N/A\"\n          );\n        },\n        defaultValue: () => {\n          if (hivStatusCategory != \"N/A\")\n            return this.toOption(hivStatusCategory);\n        },\n        finalComputedValue: () => {\n          if (hivStatusCategory != \"N/A\") {\n            return {\n              obs: this.service.buildValueCoded(\"HIV group\", hivStatusCategory),\n            };\n          }\n        },\n        condition: (f: any) => f.hiv_result.value,\n      };\n    },\n  },\n});\n","import { render } from \"./HtsTesting.vue?vue&type=template&id=74b5cbd2&ts=true\"\nimport script from \"./HtsTesting.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsTesting.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Service } from \"@/services/service\";\nimport { find, isEmpty } from \"lodash\";\nimport { ref } from \"vue\";\nimport UserProp from \"@/composables/userproperty\"\n\nexport enum KitProp {\n    TEST_KIT_USER_PROPERTY = 'hts_user_assigned_kits',\n    HIV_SELF_KIT = 'HIV self-kit',\n    SYPHILIS = 'Syphilis',\n    HEPATITIS = 'Hepatitis B',\n    BIOLINE = 'Bioline',\n    DETERMINE = 'Determine',\n    UNIGOLD = 'Unigold'\n}\n\nexport function TestKit() {\n    const kits = ref<any>([])\n    const { getUserProp, setUserProp } = UserProp()\n\n    const getSelectedTests = async () => {\n        try {\n            const req = await getUserProp('HTS_PROGRAMS')\n            return `${req||''}`.split(',').map((prop: string) => prop.trim())\n        } catch (e) {\n            console.error(`${e}`)\n        }\n        return []\n    }\n\n    const initKits = async () => {\n        const defaultKits = [\n            {\n                kitName: KitProp.UNIGOLD,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.DETERMINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.BIOLINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.HIV_SELF_KIT,\n                lotNo: '',\n                expiryDate: '',\n                visible: true\n            },\n            {\n                kitName: KitProp.SYPHILIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Syphilis Test\"\n            },\n            {\n                kitName: KitProp.HEPATITIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Hepatitis B Test\"\n            }\n        ]\n        try {\n            const selectedKits = await getSelectedTests()\n            const req: any = await getUserProp(KitProp.TEST_KIT_USER_PROPERTY)\n            const prevKits = JSON.parse(req||'')\n\n            defaultKits.forEach((kit: any) => {\n                if (kit.userProp && !isEmpty(selectedKits)) {\n                    kit.visible = selectedKits.includes(kit.userProp)\n                }\n                const preset = find(prevKits, { kitName: kit.kitName })\n                if (preset) {\n                    kit.lotNo = preset.lotNo\n                    kit.expiryDate = preset.expiryDate\n                }\n            })\n            kits.value = defaultKits.filter((k: any) => k.visible)\n        } catch (e) {\n            kits.value = defaultKits\n            console.error(`${e}`)\n        }\n        \n    }\n\n    const getLotNo = (kitName: KitProp) => {\n        const data = find(kits.value, { kitName })\n        if (data) {\n            if(new Date(data.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return data.lotNo\n        } \n        return ''\n    }\n\n    const getExpiryDate = (kitName: KitProp) => {\n        const date = find(kits.value, { kitName })\n        if (date) {\n            if (new Date(date.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return date.expiryDate\n        }\n        return ''\n    }\n\n    const saveKits = () => setUserProp(KitProp.TEST_KIT_USER_PROPERTY, JSON.stringify(kits.value))\n\n    return {\n        kits,\n        initKits,\n        saveKits,\n        getLotNo,\n        getExpiryDate\n    }\n}\n"],"sourceRoot":""}