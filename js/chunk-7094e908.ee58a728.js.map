{"version":3,"sources":["webpack:///./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/reports/moh/MohTxCurrMMD.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","title","period","rows","fields","columns","reportPrefix","config","showIndex","validationErrors","errors","showValidationStatus","showStatus","headerInfoList","onReportConfiguration","onPeriod","_","defineComponent","mixins","ReportMixin","components","ReportTemplate","IonPage","data","cohort","totals","Set","mohCohort","table","thTxt","thNum","canValidate","created","this","getDateDurationFields","watch","doIt","validateReport","methods","report","TxReportService","MohCohortReportService","setStartDate","start_date","setEndDate","end_date","setOrg","getDateIntervalPeriod","setRows","setHeaderInfoList","label","value","size","other","onclick","runTableDrill","Array","from","getValues","patients","context","underThreeMonths","betweenThreeAndFiveMonths","overSixMonths","patientId","pDays","prescribed_days","add","push","drill","minAge","maxAge","males","females","i","AGE_GROUPS","group","min","max","split","parseInt","res","getTxCurrMMDReport","initArvRefillPeriod","td","validations","param","check","p","error","s","validateIndicators","__exports__","CohortVar","ArtReportService","constructor","super","regenerate","cohortUrl","programID","setRegenerate","getCohortDrillDown","resourceId","getJson","id","date","requestCohort","params","ajxGet","qaurterRequestParams","name","quarter","datePeriodRequestParams","startDate","endDate","getCachedCohortValues","cache","sessionStorage","getItem","MOH_CACHE","conf","JSON","parse","cacheCohort","values","setItem","stringify","callback","cachedValues","Object","keys","reduce","key","indicator","find","validation","indicatorValue","contents","condition"],"mappings":"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","file":"js/chunk-7094e908.ee58a728.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_report_template = _resolveComponent(\"report-template\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_report_template, {\n        title: _ctx.title,\n        period: _ctx.period,\n        rows: _ctx.rows,\n        fields: _ctx.fields,\n        columns: _ctx.columns,\n        reportPrefix: \"MoH\",\n        config: {\n                showIndex: true\n            },\n        validationErrors: _ctx.errors,\n        showValidationStatus: _ctx.showStatus,\n        headerInfoList: _ctx.headerInfoList,\n        onReportConfiguration: _ctx.onPeriod\n      }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"validationErrors\", \"showValidationStatus\", \"headerInfoList\", \"onReportConfiguration\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport { TxReportService } from '@/apps/ART/services/reports/tx_report_service'\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { IonPage } from \"@ionic/vue\"\nimport { MohCohortReportService } from \"@/apps/ART/services/reports/moh_cohort_service\"\nimport { isEmpty } from \"lodash\"\nimport { AGE_GROUPS } from \"@/apps/ART/services/reports/patient_report_service\"\n\nexport default defineComponent({\n    mixins: [ReportMixin],\n    components: { ReportTemplate, IonPage },\n    data: () => ({\n        title: 'Moh TX CURR MMD Report',\n        cohort: {} as any,\n        rows: [] as Array<any>,\n        headerInfoList: [] as Option[],\n        totals: new Set(),\n        mohCohort: {} as any,\n        errors: [] as string[],\n        showStatus: false as boolean,\n        columns:  [\n            [\n                table.thTxt('Age group'),\n                table.thTxt('Gender'),\n                table.thNum('# of clients on <3 months of ARVs'),\n                table.thNum('# of clients on 3 - 5 months of ARVs'),\n                table.thNum('# of clients on >= 6 months of ARVs')\n            ]\n        ],\n        canValidate: false as boolean\n    }),\n    created() {\n        this.fields = this.getDateDurationFields()\n    },\n    watch: {\n        async canValidate(doIt: boolean) {\n            if (doIt) await this.validateReport()\n        }\n    },\n    methods: {\n        async onPeriod(_: any, config: any) {\n            this.canValidate = false\n            this.rows = []\n            this.errors = []\n            this.showStatus = false\n            this.report = new TxReportService()\n            this.mohCohort = new MohCohortReportService()\n            this.mohCohort.setStartDate(config.start_date)\n            this.mohCohort.setEndDate(config.end_date)\n            this.report.setOrg('moh')\n            this.report.setStartDate(config.start_date)\n            this.report.setEndDate(config.end_date)\n            this.period = this.report.getDateIntervalPeriod()\n            await this.setRows()\n            this.setHeaderInfoList()\n            this.canValidate = true\n            this.showStatus = true\n        },\n        setHeaderInfoList() {\n            this.headerInfoList = [\n                { \n                    label: 'Total clients', \n                    value: this.totals.size,\n                    other: {\n                        onclick: () => this.runTableDrill(Array.from(this.totals), 'Total Clients')\n                    }\n                }\n            ]\n        },\n        getValues(patients: Record<string, Array<any>>, context: string) {\n            const underThreeMonths: Array<any> = []\n            const betweenThreeAndFiveMonths: Array<any> = []\n            const overSixMonths: Array<any> = []\n\n            for (const patientId in patients) {\n                const data: any = patients[patientId]\n                const pDays = data.prescribed_days\n                this.totals.add(patientId)\n\n                if(pDays < 90) {\n                    underThreeMonths.push(patientId)\n                }\n\n                if (pDays >= 90 && pDays <= 150) {\n                    betweenThreeAndFiveMonths.push(patientId)\n                }\n\n                if (pDays > 150) {\n                    overSixMonths.push(patientId)\n                }\n            }\n            return [\n                this.drill(underThreeMonths, `${context} < 3 months of Arvs`),\n                this.drill(betweenThreeAndFiveMonths, `${context} 3-5 months of Arvs`),\n                this.drill(overSixMonths, `${context} > 6 months months of Arvs`)\n            ]\n        },\n        async setRows() {\n            let minAge = 0\n            let maxAge = 0\n            const males = []\n            const females = []\n\n            for(const i in AGE_GROUPS) {\n                const group = AGE_GROUPS[i]\n                if (group === '<1 year') {\n                    minAge = 0\n                    maxAge = 0\n                } else if (group === '90 plus years') {\n                    minAge = 90\n                    maxAge = 10000\n                } else {\n                    const [min, max] = group.split('-')\n                    minAge = parseInt(min)\n                    maxAge = parseInt(max)\n                }\n                const res = await this.report.getTxCurrMMDReport(minAge, maxAge)\n                this.report.initArvRefillPeriod(false)\n                if (res) {\n                    females.push([\n                        table.td(group),\n                        table.td('Female'),\n                        ...this.getValues(res['Female'], `${group} (F)`)\n                    ])\n                    males.push([\n                        table.td(group),\n                        table.td('Male'),\n                        ...this.getValues(res['Male'], `${group} (M)`)\n                    ])\n                } else {\n                    females.push([\n                        table.td(group), \n                        table.td('Female'), \n                        table.td(0), \n                        table.td(0), \n                        table.td(0)\n                    ])\n                    males.push([\n                        table.td(group), \n                        table.td('Male'), \n                        table.td(0), \n                        table.td(0), \n                        table.td(0)\n                    ])\n                }\n                this.rows = [...females, ...males]\n            }\n        },\n        validateReport() {\n            const validations: any = {\n                'total_alive_and_on_art': {\n                    param: this.totals.size,\n                    check: (i: number, p: number) => i != p,\n                    error: (i: number, p: number) => `\n                        MoH cohort Alive and on ART clients <b>(${i})</b> is not\n                        matching with total TX MMD clients <b(${p}).</b>\n                    `\n                }\n            }\n            const s = this.mohCohort.validateIndicators(validations, (errors: string[]) => this.errors = errors)\n            if (s === -1) this.errors= ['Report not validated. Run the MoH cohort report for similar reporting period and then run this report']\n        }\n    }\n})\n","import { render } from \"./MohTxCurrMMD.vue?vue&type=template&id=5f6f1143&ts=true\"\nimport script from \"./MohTxCurrMMD.vue?vue&type=script&lang=ts\"\nexport * from \"./MohTxCurrMMD.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { find } from \"lodash\";\nimport { ArtReportService } from \"./art_report_service\";\n\nexport enum CohortVar {\n    MOH_CACHE = 'mohCache'\n}\n\nexport interface CohortValidationInterface {\n    param: number | string;\n    error: (indicator: number, param: number) => string;\n    check: (indicator: number, param: number) => boolean;\n}\n\nexport class MohCohortReportService extends ArtReportService {\n    regenerate: boolean;\n    constructor() {\n        super()\n        this.regenerate = false\n    }\n\n    private cohortUrl() {\n        return `programs/${this.programID}/reports/cohort`\n    }\n\n    setRegenerate(regenerate: boolean) {\n        this.regenerate = regenerate\n    }\n\n    getCohortDrillDown(resourceId: string) {\n        return ArtReportService.getJson('cohort_report_drill_down', {\n            id: resourceId,\n            date: this.date,\n            'program_id': this.programID\n        })\n    }\n\n    requestCohort(params: any) {\n        return ArtReportService.ajxGet(\n            this.cohortUrl(), params\n        )\n    }\n\n    qaurterRequestParams() {\n        return { \n            name: this.quarter, \n            regenerate: this.regenerate \n        }\n    }\n\n    datePeriodRequestParams() {\n        return {\n            name: `Cohort-${this.startDate}-${this.endDate}`,\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            regenerate: this.regenerate\n        }\n    }\n\n    getCachedCohortValues() {\n        const cache = sessionStorage.getItem(CohortVar.MOH_CACHE)\n        if (cache) {\n            const conf = JSON.parse(cache)\n            if (conf.start_date === this.startDate \n                && conf.end_date === this.endDate\n                || conf.quarter === this.quarter) {\n                return conf.data\n            }\n        }\n    }\n\n    cacheCohort(values: any) {\n        sessionStorage.setItem(\n            CohortVar.MOH_CACHE, \n            JSON.stringify({\n                'start_date': this.startDate,\n                'end_date': this.endDate,\n                'quarter': this.quarter,\n                'data': values\n        }))\n    }\n\n    validateIndicators(validations: Record<string, CohortValidationInterface>, callback: Function) {\n        const cachedValues = this.getCachedCohortValues()\n        if (cachedValues) {\n            const errors = Object.keys(validations)\n                .reduce((errors: Array<any>, key: string) => {\n                    const indicator: any = find(cachedValues, { name: key })\n                    const validation: any = validations[key]\n                    const indicatorValue: any = indicator ? indicator.contents : null\n                    const param = validation.param as number\n                    const condition = validation.check(parseInt(indicatorValue), param)\n                    if (condition) errors.push(\n                        validation.error(indicatorValue, param)\n                    )\n                    return errors\n                }, [])\n            return callback(errors)\n        }\n        return -1\n    }\n}\n"],"sourceRoot":""}