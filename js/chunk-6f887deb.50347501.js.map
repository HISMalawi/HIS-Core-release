{"version":3,"sources":["webpack:///./src/apps/ART/services/htn_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/apps/ART/views/encounters/Prescription.vue?ed90","webpack:///./src/apps/ART/guidelines/prescription_guidelines.ts","webpack:///./src/apps/ART/views/encounters/Prescription.vue","webpack:///./src/apps/ART/views/encounters/Prescription.vue?d554","webpack:///./src/utils/GuidelineEngine.ts"],"names":["HTN_SESSION_KEY","BPManagementService","patientID","providerID","ObservationService","getFirstValueNumber","this","getFirstValueCoded","query","AppEncounterService","getJson","drugID","pills","postJson","state","HCZ","drugs","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","adherence","notes","Enalapril","remaining","Amlodipine","Atenolol","sbp","dbp","bpTrail","Object","values","sort","a","b","date","map","bp","getBpGrade","firstRecentGrade","secondRecentGrade","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","facts","ready","watch","handler","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","states","split","username","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","usernameA","usernameB","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","_component_his_standard_form","_resolveComponent","$event","fieldComponent","onSubmit","Target","TargetEvent","PRESCRIPTION_GUIDELINES","regimenName","target","ARV_REGIMENS","targetEvent","ON_VALUE","regimenCode","code","includes","medicationOrders","orders","match","regimenCodeStr","sideEffectsTable","columns","rows","tableActionSheet","BEFORE_NEXT","hasSideEffects","isTrue","lastSideEffectDate","currentDate","listActionSheet","age","currentRegimenStr","reasonForSwitch","currentRegimenCode","treatmentInitiationState","starterPackNeeded","hangingPillsStatus","INTERVAL_SELECTION","hangingPills","hanging","drug","some","join","isChildBearing","isBearing","lpvType","toLowerCase","weight","enabled","ON_BUILD","prescriptionType","selectedInterval","interval","isNeeded","tptPrescriptionCount","count","Math","round","DRUG_FREQUENCY_GUIDELINE","concept","MEDICATION_STYLE","style","fontSize","borderBottom","background","mixins","EncounterMixinVue","prescription","patientToolbar","regimenExtras","programInfo","gender","contraindications","regimenDrugs","PrescriptionService","loadMedicationOrders","loadFastTrackStatus","medicationOrdersAvailable","isFastTrack","toastWarning","loadHangingPills","loadRegimenExtras","loadTreatmentState","loadDrugInduced","loadContraindications","loadTptPrescriptionCount","initFacts","shouldPrescribeExtras","getRegimenExtras","htnDrugs","resolveHtnDrugs","loadFastTrackMedications","getFastTrackMedications","shouldPrescribeArvs","getPatientToolBar","getFields","drug_id","getProgramInformation","getID","getAge","getGender","getRecentWeight","getHangingPills","getTreatmentState","current_regimen","extractRegimenCode","getMedicationOrders","getContraindications","getTptPrescriptionCount","getLastSideEffectDate","form","createEncounter","encounter","setNextVisitInterval","payload","mapOrder","createDrugOrder","drugOrder","createRegimenSwitchObs","createHangingPillsObs","toastSuccess","invalidate","onEvent","onBuildOptions","onRegimen","sideEffects","findAndGroupDrugSideEffects","buildSideEffectsTable","onBeforeRegimenNext","event","getLpvDrugs","getStarterPackDrugs","getLvpDrugsByType","sessionData","sessionStorage","getItem","Prescription","JSON","parse","isPlainObject","warn","getRegimenStarterpack","setCustomDrugs","buildRegimenOptions","getPatientRegimens","regimenCategories","r","alternative_drug_name","concept_name","buildIntervalOptions","intervals","config","getDrugEstimates","getDrugFrequency","regimen","substring","regimens","nextAppointment","calculateDateFromInterval","drugPacks","packSize","getDrugPackSize","pillsPerDay","calculatePillsPerDay","am","noon","pm","estimatedPackSize","estimatePackSize","drug_name","toOrderObj","units","frequency","getReasonForRegimenSwitch","id","helpText","FieldType","TT_ART_REGIMEN_SELECTION","validation","val","Validation","onload","onValue","beforeNext","toolbarInfo","footerBtns","onClick","TT_MULTIPLE_SELECT","getCustomIngridients","showKeyboard","hiddenFooterBtns","size","visible","visibleOnStateChange","TT_DOSAGE_INPUT","f","custom_regimen","empty","unload","summaryMapValue","getInstructions","fdata","barcodes","TT_DATA_TABLE","dataTableConfig","showIndex","viewPortStyle","height","table","thTxt","conf","cssClass","regimen_category","td","TT_NEXT_VISIT_INTERVAL_SELECTION","showRegimenCardTitle","isCondition","ignored","undefined","prop","every","sortByPriority","sortByWeight","guidelines","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info"],"mappings":"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","file":"js/chunk-6f887deb.50347501.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ObservationService } from \"@/services/observation_service\"\n\nexport enum HTN_SESSION_KEY {\n  Prescription = \"htnPrescription\"\n}\n\nexport class BPManagementService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n      super(patientID, 48, providerID) //TODO: Use encounter type reference name'\n    }\n\n    static getBpGrade(sbp: number, dbp: number) {\n      if ((sbp < 140) && (dbp < 90)) {\n        return \"normal\"\n      }\n      else if ((sbp >= 140 && sbp < 160) || (dbp >= 100 && dbp < 110)) {\n        return \"grade 1\"\n      }\n      else if ((sbp >= 180 && dbp > 110) || sbp >= 180) {\n        return \"grade 3\"\n      }\n      else if ((sbp >= 160 && sbp < 180) || (dbp >= 110)) {\n        return \"grade 2\"\n      }\n      return 'N/A'\n    }\n\n    /**\n     * BP is normointensive if two most recent consecutive tests are normal\n     * @param bpTrail \n     * @returns\n    */\n    static isBpNormotensive(bpTrail: any) {\n      const [ firstRecentGrade, secondRecentGrade ] = Object.values(bpTrail)\n        .sort((a: any, b: any) => a.date < b.date ? 1 : 0)\n        .map((bp: any) => this.getBpGrade(bp.sbp, bp.dbp))\n      return firstRecentGrade === 'normal' && secondRecentGrade === 'normal'\n    }\n\n    getSystolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Systolic blood pressure')\n    }\n\n    getDiastolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Diastolic blood pressure')\n    }\n\n    async onBpDrugs() {\n      const query = await ObservationService.getFirstValueCoded(this.patientID, 'Treatment status')\n      return query ? query === 'Yes' : false\n    }\n  \n    async getBPTrail() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/bp_trail`);\n    }\n    async getCurrentDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/current_bp_drugs`);\n    }\n    async getLastDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/last_bp_drugs_dispensation`);\n    }\n    async getAdherence(drugID: number, pills: number) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/remaining_bp_drugs`, {\n        'drug_id': drugID,\n        pills: pills\n      });\n    }\n    async enrollPatient(state: any) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/update_or_create_htn_state`, state);\n    }\n    static htnDrugReferences() {\n      return [\n        { \n          'drug_id': 275,\n          'drug_name': \"HCZ (25mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 942,\n          'drug_name': \"Enalapril (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 943,\n          'drug_name': \"Enalapril (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 558,\n          'drug_name': \"Amlodipine (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 559,\n          'drug_name': \"Amlodipine (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 117,\n          'drug_name': \"Atenolol (50mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 11,\n          'drug_name': \"Atenolol(100mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        }\n      ]\n    }\n    getDrugs() {\n        return {\n        HCZ: {\n          drugs: [\n            {\n              drugName: \"HCZ (25mg tablet)\",\n              drugID: 275,\n              amount: '25mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Enalapril: {\n          drugs: [\n            {\n              drugName: \"Enalapril (5mg tablet)\",\n              drugID: 942,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Enalapril (10mg tablet)\",\n              drugID: 943,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Amlodipine: {\n          drugs: [\n            {\n              drugName: \"Amlodipine (5mg tablet)\",\n              drugID: 558,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Amlodipine (10mg tablet)\",\n              drugID: 559,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Atenolol: {\n          drugs: [\n            {\n              drugName: \"Atenolol (50mg tablet)\",\n              drugID: 117,\n              amount: '50mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Atenolol(100mg tablet)\",\n              drugID: 11,\n              amount: '100mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n      }\n    }\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    activeField: _ctx.fieldComponent,\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"activeField\", \"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","/**\n * QUICK FACTS ABOUT ART REGIMENS (Malawi Clinical HIV Guidelines 2018 Version 1)\n *  - ART regimens are grouped into first and secondline\n *  - Each regimen is identified by a number. \n *    [0, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14]\n *  - Firstline regimens include [0, 2, 4, 5, 6, 13, 14]\n *  - Secondline regimens include [7, 8, 9, 10, 11]\n *  - Some regimens are \"phased in\" on initiation (Due to adverse reaction). As such, \n *    a starter pack is provided for atleast two weeks. Regimens that require a\n *    starter pack include [0, 2, 6]\n */\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\nimport { tableActionSheet, listActionSheet, infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\"\n\nexport enum Target {\n    ARV_REGIMENS = 'arv_regimens',\n    INTERVAL_SELECTION = 'next_visit_interval'\n}\nexport enum FlowState {\n    EXIT = 'exit',\n    CONTINUE = 'continue'\n}\nexport enum TargetEvent {\n    ON_VALUE = 'onValue',\n    ON_BUILD = 'onBuild',\n    BEFORE_NEXT = 'beforeNext',\n}\nexport const PRESCRIPTION_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Do not prescribe LPV regimens together with 3HP\": {\n        priority: 1,\n        actions: {\n            alert: async ({ regimenName }: any) => {\n                await infoActionSheet(\n                    '3HP - LPV/r conflict',\n                    regimenName,\n                    `Regimens containing LPV/r <b>cannot</b> be prescribed together with 3HP`,\n                    [\n                        { name: 'Close', slot: 'end', color: 'danger' }\n                    ],\n                    'his-danger-color'\n                    )\n                    return FlowState.EXIT\n                }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.ON_VALUE,\n        conditions: {\n            regimenCode(code: number) {\n                return [7, 8, 9, 10, 11, 12].includes(code)\n            },\n            medicationOrders(orders: Array<string>) {\n                return orders.filter(i => `${i}`.match(/3hp/i) ? true : false).length >= 1\n            }\n        }\n    },\n    \"Check for any adverse effects or contraindications associated with the regimen\": {\n        priority: 1,\n        actions: {\n            alert: async ({ regimenCodeStr, sideEffectsTable }: any) => {\n                const { columns, rows } = sideEffectsTable\n                const action = await tableActionSheet(\n                    `Contraindications / Side effects for ${regimenCodeStr}`,'',\n                    columns, rows,\n                    [\n                        { name: 'Select other regimen', slot: 'start'},\n                        { name: 'Keep selected regimen', slot: 'end', color: 'danger' }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Select other regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            hasSideEffects(isTrue: boolean){\n                return isTrue\n            },\n            lastSideEffectDate(date: string, { currentDate }: any){\n                return date >= currentDate\n            }\n        }\n    },\n    \"Recommend 2nd line regimen to children under 3\": {\n        priority: 1,\n        actions: {\n            alert: async () => {\n                const action = await listActionSheet(\n                    'Recommendation',\n                    '',\n                    [\n                        \"Children under 3 years often have a high viral load and may be infected with drug-resistant HIV from previous exposure to ARVs (mother's ART and/or infant nevirapine prophylaxis)\",\n                        \"Therefore, children under <b>3 years</b> respond better when <b>started immediately on 2nd line regimen</b> (Regimen <b>11</b>)\",\n                    ],\n                    [\n                        { name: 'Select another regimen', slot: 'start' }, \n                        { name: 'Keep selected regimen', slot: 'end', color: 'danger' }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Select another regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            age(age: number) {\n                return age < 3\n            },\n            regimenCode(code: number) {\n                return code != 11\n            }\n        }\n    }, \n    'Provide a reason for switching regimens when patient already has one': {\n        priority: 1,\n        actions : {\n            alert: async (facts: any) => {\n                const modal = await optionsActionSheet(\n                    `Are you sure you want to replace ${facts.currentRegimenStr}?`,\n                    'Specify reason for switching regimen',\n                    [ \n                        'Policy change', \n                        'Ease of administration (pill burden, swallowing)',\n                        'Drug drug interaction', \n                        'Pregnancy intention',\n                        'Side effects', \n                        'Treatment failure', \n                        'Weight Change', \n                        'Other'\n                    ],\n                    [\n                        { name: 'Cancel', slot:'start', color: 'danger' },\n                        { name: 'Continue', slot: 'end', role: 'action' }\n                    ]\n                )\n\n                if (modal.selection && modal.action != 'Cancel') {\n                    facts.reasonForSwitch = modal.selection\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.ON_VALUE,\n        conditions: {\n            regimenCode(code: string, { currentRegimenCode }: any){\n                return currentRegimenCode != -1 && code != currentRegimenCode\n            }\n        }\n    },\n    \"Provide 14 day starter pack for LPV regimens for children under 3 years old\": {\n        priority: 3,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Starter pack needed for 14 days',\n                    `${ facts.treatmentInitiationState}`, \n                    `${ facts.regimenName }`,\n                    [\n                        { name: 'Cancel', slot: 'start', color: 'danger'},\n                        { name: 'Prescribe starter pack', slot: 'end' }\n                    ],\n                    'his-info-color'\n                )\n\n                if (action === 'Prescribe starter pack') {\n                    facts.starterPackNeeded = true\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            },\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            age(age: number) {\n                return age < 3\n            },\n            regimenCode(code: number) {\n                return code === 11\n            },\n            treatmentInitiationState(state: string) {\n                return ['Initiation', 'Re-initiation'].includes(state)\n            }\n        }\n    },\n    \"Provide 14 day starter pack for NVP based regimens on newly initiated/re-initiation patients\": {\n        priority: 3,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Starter pack needed for 14 days',\n                    `${ facts.treatmentInitiationState}`, \n                    `${ facts.regimenName }`,\n                    [\n                        { name: 'Cancel', slot: 'start', color: 'danger'},\n                        { name: 'Prescribe starter pack', slot: 'end' }\n                    ],\n                    'his-info-color'\n                )\n\n                if (action === 'Prescribe starter pack') {\n                    facts.starterPackNeeded = true\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            },\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            regimenCode(code: number) {\n                return [0, 2, 6].includes(code)\n            },\n            treatmentInitiationState(state: string) {\n                return ['Initiation', 'Re-initiation'].includes(state)\n            }\n        }\n    },\n    \"Ask to reuse hanging pills if any\": {\n        priority: 5,\n        actions: {\n            alert: async (facts: any) => {\n                const action  = await infoActionSheet(\n                    'Hanging pills recommendation',\n                    'Add hanging pills?', '',\n                    [\n                        { name: 'No', slot: 'start', color: 'warning'},\n                        { name: 'Yes', slot: 'end'}\n                    ],\n                    'his-info-color'\n                )\n                if (action === 'Yes') {\n                    facts.hangingPillsStatus = 'Optimize - including hanging pills'\n                } else {\n                    facts.hangingPillsStatus = 'Exact - excluding hanging pills'\n                }\n                return FlowState.CONTINUE\n            }\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n           drugs(d: Array<string>, { hangingPills }: any){\n                const hanging = d.map(drug => hangingPills.includes(drug))\n                return hanging.some(Boolean)\n           }\n        }\n    },\n    \"Provide warning of use of DTG regimen to women of reproductive age\" : {\n        priority: 2,\n        actions: {\n            alert: async ({regimenName}: any) => {\n                const action = await infoActionSheet(\n                    `Use of DTG or EFV in women of reproductive age`,\n                    regimenName,\n                    [\n                        'There is currently <u>no confirmation</u>',\n                        'that <b>DTG</b> is safe in <u>very early pregnancy</u>',\n                        'DTG-based regimens are therefore not used as standard 1st line regimens for',\n                        '<u>girls and women</u> who may get pregnancy'\n                    ].join(' '),\n                    [\n                        { name: 'Select another regimen', slot: 'start' }, \n                        { name: 'Continue with regimen', slot: 'end', color: 'danger'}\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Select another regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            regimenCode(code: number) {\n                return code >= 12\n            },\n            isChildBearing(isBearing: boolean){\n                return isBearing\n            }\n        }\n    },\n    \"Provide pallet options for LPV regimens for patient's whose weight is between 3 and 25 kgs\" : {\n        priority: 6,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Pellets (cups) / Tabs', \n                    '',\n                    'Prescribe LPV/r in <b>Pellets (cups)</b> or <b>Tablets</b>?',\n                    [\n                        { name: 'Granules', slot: 'start' },\n                        { name: 'Pellets', slot:'end' },\n                        { name: 'Tabs', slot:'end' }\n                    ],\n                    'his-info-color'\n                )\n                facts.lpvType = action.toLowerCase()\n                return FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            weight(weight: number){\n                return weight >= 3 && weight <= 25\n            },\n            regimenCode(code: number){\n                return code === 11 || code === 9\n            }\n        }\n    },\n    \"Provide 14 day interval for NVP or LVP Regimen starter pack\": {\n        priority: 1,\n        data: {\n            enabled: false\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.ON_BUILD,\n        conditions: {\n            prescriptionType(type: string){\n                return type === 'Regimen'\n            },\n            selectedInterval(interval: number) {\n                return interval > 14\n            },\n            starterPackNeeded(isNeeded: boolean) {\n                return isNeeded\n            },\n            regimenCode(code: number) {\n                return [0, 2, 6, 11].includes(code)\n            }\n        }\n    },\n    \"Provide intervals upto 1 month, 2nd up to 2 months, and 3rd up to 6 months for Patients receiving TPT\" : {\n        priority: 2,\n        data: {\n            enabled: false\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.ON_BUILD,\n        conditions: {\n            prescriptionType(type: string){\n                return type === 'Regimen'\n            },\n            medicationOrders(orders: Array<string>) {\n                return orders.map(i => `${i}`.match(/3hp/i) ? true : false).some(Boolean)\n            },\n            tptPrescriptionCount(count: number, {selectedInterval}: any){\n                return Math.round(selectedInterval / 30) > count\n            }\n        }\n    }\n}\n\nexport const DRUG_FREQUENCY_GUIDELINE: Record<string, GuideLineInterface> = {\n    'Rifapentine or isoniazid should be taken weekly': {\n        concept: 'Weekly (QW)',\n        priority: 1,\n        conditions: {\n            drug(d: string) {\n                return `${d}`.match(/Rifapentine|Isoniazid/i)\n            }\n        }\n    },\n    'Use daily frequency for any other drugs': {\n        concept: 'Daily (QOD)',\n        priority: 2,\n        conditions: {\n            drug(d: string) {\n                return !`${d}`.match(/Rifapentine|Isoniazid/i)\n            }\n        }\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RegimenInterface } from \"@/interfaces/Regimen\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PrescriptionService } from \"@/apps/ART/services/prescription_service\"\nimport { toastWarning, toastSuccess } from \"@/utils/Alerts\"\nimport HisDate from \"@/utils/Date\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport { isEmpty, isPlainObject } from \"lodash\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport { \n    PRESCRIPTION_GUIDELINES,\n    DRUG_FREQUENCY_GUIDELINE,\n    TargetEvent, \n    Target, \n    FlowState \n} from \"@/apps/ART/guidelines/prescription_guidelines\"\nimport { HTN_SESSION_KEY } from '../../services/htn_service'\nimport { ProgramService } from '@/services/program_service'\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport Store from \"@/composables/ApiStore\"\n\nconst MEDICATION_STYLE = { style : { fontSize:'1.3rem !important', borderBottom: 'solid 2px #ccc', color: 'black', background: 'white' }}\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        drugs: [] as Array<RegimenInterface>,\n        prescription: {} as any,\n        patientToolbar: [] as Array<Option>,\n        fieldComponent: '' as string,\n        regimenExtras: [] as Array<any>,\n        programInfo: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            weight: -1 as number,\n            currentDate: '' as string,\n            isChildBearing: false as boolean,\n            prescriptionType: '' as 'Custom' | 'Regimen',\n            tptPrescriptionCount: 0,\n            currentRegimenCode: -1 as number,\n            currentRegimenStr: '' as string,\n            drug: '' as string,\n            drugs: [] as Array<any>,\n            contraindications: {} as any,\n            hasSideEffects: false as boolean,\n            sideEffectsTable: {} as any,\n            lastSideEffectDate: '' as string,\n            regimenCode: -1 as number,\n            regimenCodeStr: '' as string,\n            regimenName: '' as string,\n            regimenDrugs: [] as any,\n            hangingPills: [] as Array<any>,\n            reasonForSwitch: '' as string,\n            starterPackNeeded: false as boolean,\n            hangingPillsStatus: '' as string,\n            treatmentInitiationState: '' as string,\n            lpvType: '' as string,\n            medicationOrders: [] as Array<any>,\n            selectedInterval: 0 as number\n        }\n    }),\n    watch: {\n        ready: {\n            async handler(ready: boolean) {\n                if (!ready) return\n                this.prescription = new PrescriptionService(this.patientID, this.providerID)\n                await this.prescription.loadMedicationOrders()\n                await this.prescription.loadFastTrackStatus()\n                if (!this.prescription.medicationOrdersAvailable() && !this.prescription.isFastTrack()) {\n                    toastWarning('Patient is not eligible for treatment Today! Please check HIV Clinic Consultation')\n                    return this.gotoPatientDashboard()\n                }\n                await this.prescription.loadHangingPills()\n                await this.prescription.loadRegimenExtras()\n                await this.prescription.loadTreatmentState()\n                await this.prescription.loadDrugInduced()\n                await this.prescription.loadContraindications()\n                await this.prescription.loadTptPrescriptionCount()\n\n                await this.initFacts(this.patient)\n\n                if (this.prescription.shouldPrescribeExtras()) {\n                    this.regimenExtras = this.prescription.getRegimenExtras()\n                }\n\n                const htnDrugs = this.resolveHtnDrugs()\n\n                if (!isEmpty(htnDrugs)) this.regimenExtras = [...this.regimenExtras, ...htnDrugs]\n\n                if (this.prescription.isFastTrack()) {\n                    await this.prescription.loadFastTrackMedications()\n                    this.drugs = this.prescription.getFastTrackMedications()\n                    this.fieldComponent = 'next_visit_interval'\n\n                } else if (!this.prescription.shouldPrescribeArvs() && !isEmpty(this.regimenExtras)) {\n                    this.drugs = this.regimenExtras\n                }\n                this.patientToolbar = await this.getPatientToolBar()\n                this.fields = this.getFields()\n            },\n            immediate: true\n        },\n        drugs: {\n            handler(drugs: Array<any>) {\n                this.facts.drugs = drugs.map(d => d.drug_id)\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async initFacts(patient: any) {\n            this.programInfo = await ProgramService.getProgramInformation(patient.getID())\n            this.facts.age = patient.getAge()\n            this.facts.gender = patient.getGender()\n            this.facts.weight = await patient.getRecentWeight()\n            this.facts.hangingPills = this.prescription.getHangingPills()\n            this.facts.treatmentInitiationState = this.prescription.getTreatmentState()\n            this.facts.currentRegimenStr = this.programInfo.current_regimen\n            this.facts.currentRegimenCode = this.extractRegimenCode(this.programInfo.current_regimen)\n            this.facts.medicationOrders = this.prescription.getMedicationOrders()\n            this.facts.contraindications = this.prescription.getContraindications()\n            this.facts.tptPrescriptionCount = this.prescription.getTptPrescriptionCount()\n            this.facts.lastSideEffectDate = this.prescription.getLastSideEffectDate()\n            this.facts.currentDate = PrescriptionService.getSessionDate()\n            this.facts.isChildBearing = patient.isChildBearing()\n        },\n        async onSubmit(form: any) {\n            const encounter = await this.prescription.createEncounter()\n\n            this.prescription.setNextVisitInterval(form[Target.INTERVAL_SELECTION].value)\n\n            const payload = this.mapOrder(this.drugs)\n\n            if (!encounter) return toastWarning('Unable to create treatment encounter')\n\n            const drugOrder = await this.prescription.createDrugOrder(payload) \n\n            if(!drugOrder) return toastWarning('Unable to create drug orders!')\n\n            if (this.facts.reasonForSwitch) {\n                await this.prescription.createRegimenSwitchObs(this.facts.reasonForSwitch)\n            }\n\n            if (this.facts.hangingPillsStatus) {\n                await this.prescription.createHangingPillsObs(this.facts.hangingPillsStatus)\n            }\n            toastSuccess('Drug order has been created')\n            Store.invalidate('PATIENT_PROGRAM')\n            this.nextTask()\n        },\n        async onEvent(target: Target, targetEvent: TargetEvent) {\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding?.actions?.alert) {\n                    const state = await finding?.actions?.alert(this.facts)\n                    if (state === FlowState.EXIT)\n                        return false\n                }\n            }\n            return true\n        },\n        onBuildOptions(target: Target, targetEvent: TargetEvent){\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding.data) return finding.data\n            }\n            return {}\n        },\n        async onRegimen({ label, value, other }: Option) {\n            this.facts.lpvType = ''\n            this.facts.hangingPillsStatus = ''\n            this.facts.starterPackNeeded = false\n            this.facts.regimenName = `${value} (${label})`\n            this.facts.regimenCodeStr = value.toString()\n            this.facts.regimenCode = this.extractRegimenCode(value.toString())\n            this.facts.regimenDrugs = other.regimenDrugs\n            this.facts.drugs = other.regimenDrugs.map((d: any) => d.drug_id)\n\n            const sideEffects = this.prescription.findAndGroupDrugSideEffects(this.facts.drugs)\n            this.facts.hasSideEffects = !isEmpty(sideEffects)\n            this.facts.sideEffectsTable = this.buildSideEffectsTable(sideEffects)\n        },\n        async onBeforeRegimenNext() {\n            const event = await this.onEvent(Target.ARV_REGIMENS, TargetEvent.BEFORE_NEXT)\n            let drugs = []\n\n            if (!event) return false\n\n            if (this.facts.lpvType) {\n               drugs = await this.getLpvDrugs()\n            } else if (this.facts.starterPackNeeded) {\n               drugs = await this.getStarterPackDrugs()\n               if (isEmpty(drugs)) {\n                    drugs = this.facts.regimenDrugs\n               }\n            } else {\n                drugs = this.facts.regimenDrugs\n            }\n            this.drugs = [...this.regimenExtras, ...drugs]\n            return true\n        },\n        getLpvDrugs() {\n            return this.prescription.getLvpDrugsByType(\n                this.facts.lpvType, this.facts.regimenCode\n            ) \n        },\n        resolveHtnDrugs() {\n            try {\n                const sessionData = sessionStorage.getItem(HTN_SESSION_KEY.Prescription)\n                if (typeof sessionData === 'string') {\n                    const data = JSON.parse(sessionData)\n                    if (isPlainObject(data) && data[this.patientID]) {\n                        return data[this.patientID]\n                    }\n                }\n            } catch (e) {\n                console.warn(e)\n            }\n            return []\n        },\n        getStarterPackDrugs() {\n            return this.prescription.getRegimenStarterpack(\n                this.facts.regimenCode, this.facts.weight\n            )\n        },\n        setCustomDrugs(drugs: any) {\n            this.drugs = drugs.map((drug: Option) => drug.other)\n        },\n        buildSideEffectsTable(sideEffects: any) {\n            const columns = ['Date', 'Contraindication(s)', 'Side effect(s)']\n            const rows = []\n            for(const date in sideEffects) {\n                const contraindications = this.facts.contraindications[date] || []\n                rows.push([\n                    HisDate.toStandardHisDisplayFormat(date), \n                    contraindications.join(', '),\n                    sideEffects[date].join(', ')\n                ])\n            }\n            return { columns, rows }\n        },\n        async buildRegimenOptions() {\n            const regimenCategories = await this.prescription.getPatientRegimens()\n            const options = []\n            for(const value in regimenCategories) {\n                const regimenDrugs = regimenCategories[value]\n                const label = regimenDrugs.map((r: RegimenInterface) => \n                    r.alternative_drug_name || r.concept_name).sort().join(' + ')\n\n                options.push({ \n                    label, \n                    value, \n                    other: {\n                        regimenDrugs \n                    } \n                })\n            }\n            return options\n        },\n        buildIntervalOptions() {\n            const intervals = [\n                { label: '2 weeks', value: 14 },\n                { label: '1 month', value: 28 },\n                { label: '2 months', value: 56 },\n                { label: '3 months', value: 84 },\n                { label: '4 months', value: 112 },\n                { label: '5 months', value: 140 },\n                { label: '6 months', value: 168 },\n                { label: '7 months', value: 196 },\n                { label: '8 months', value: 224 },\n                { label: '9 months', value: 252 },\n                { label: '10 months', value: 280 },\n                { label: '11 months', value: 308 },                        \n                { label: '12 months', value: 336 },\n            ]\n            return intervals.map(({label, value}: Option) => {\n                this.facts.selectedInterval = parseInt(value.toString())\n                const config = this.onBuildOptions(Target.INTERVAL_SELECTION, TargetEvent.ON_BUILD)\n                return {\n                    label,\n                    value,\n                    other: {\n                        ...config,\n                        ...this.getDrugEstimates(this.drugs, this.facts.selectedInterval)\n                    }\n                }\n            })\n        },\n        getDrugFrequency(drugName: string){\n            this.facts.drug = drugName\n            const findings = matchToGuidelines(this.facts, DRUG_FREQUENCY_GUIDELINE)\n\n            if (!isEmpty(findings)) {\n                return findings[0].concept\n            }\n        },\n        extractRegimenCode(regimen: string): number {\n          try {\n               if (regimen.match(/n\\/a/i)) return -1\n\n               return parseInt(regimen.substring(0, regimen.length))\n           } catch (e) {\n               console.warn(e)\n               return -1\n           }\n        },\n        getDrugEstimates(regimens: any, interval: number) {\n            this.prescription.setNextVisitInterval(interval)\n            const nextAppointment = this.prescription.calculateDateFromInterval()\n            const drugPacks = regimens.map((regimen: RegimenInterface) => {\n                const packSize = this.prescription.getDrugPackSize(regimen)\n                const pillsPerDay = this.prescription.calculatePillsPerDay(regimen.am, regimen.noon, regimen.pm)\n                const estimatedPackSize = this.prescription.estimatePackSize(pillsPerDay, packSize)     \n                return {\n                    label: regimen.alternative_drug_name || regimen.drug_name,\n                    value: estimatedPackSize\n                } \n            })\n            return {\n                label: 'Medication run-out date:',\n                value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                other: {\n                    label: \"Estimated packs/tins:\",\n                    value: drugPacks\n                }\n            }\n        },\n        mapOrder(regimens: Array<RegimenInterface>) {\n            return regimens.map((regimen: any) => {\n                return this.prescription.toOrderObj(\n                    regimen.drug_id, \n                    regimen.alternative_drug_name || regimen.drug_name,\n                    regimen.units, \n                    regimen.am, \n                    regimen.pm,\n                    regimen.frequency || this.getDrugFrequency(regimen.drug_name)\n                )\n            })\n        },\n        async getPatientToolBar() {\n            const reasonForSwitch = await this.prescription.getReasonForRegimenSwitch()\n            return [\n                { label: 'Age', value: `${this.patient.getAge()} Year(s)` },\n                { label: 'Gender', value: this.patient.getGender() },\n                { label: 'Current Regimen', value: this.programInfo.current_regimen },\n                { label: 'Current weight', value: `${this.facts.weight} kg(s)` || 'Unknown' },\n                { label: 'Reason for change', value: reasonForSwitch }\n            ]\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                    id: Target.ARV_REGIMENS,\n                    helpText: 'ARV Regimen(s)',\n                    type: FieldType.TT_ART_REGIMEN_SELECTION,\n                    condition: () => this.prescription.shouldPrescribeArvs(),\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildRegimenOptions(),\n                    onload: () => this.facts.prescriptionType = 'Regimen',\n                    onValue: (regimen: Option) => {\n                        this.onRegimen(regimen)\n                        return this.onEvent(Target.ARV_REGIMENS, TargetEvent.ON_VALUE)\n                    },\n                    beforeNext: () => this.onBeforeRegimenNext(),\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        footerBtns: [\n                            {\n                                name: 'Custom Regimen',\n                                slot: 'end',\n                                onClick: () => {\n                                    this.fieldComponent = 'custom_regimen'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_regimen',\n                    helpText: 'Custom prescription',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    condition: () => this.facts.prescriptionType === 'Custom',\n                    onload: () => this.facts.prescriptionType = 'Custom',\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => {\n                        const drugs = await this.prescription.getCustomIngridients()\n                        return drugs.map((drug: any ) => ({\n                            label: drug.name,\n                            value: drug.drug_id,\n                            other: { ...drug }\n                        }))\n                    },\n                    config: {\n                        showKeyboard: true,\n                        hiddenFooterBtns: [ 'Back' ],\n                        footerBtns: [\n                            {\n                                name: 'Standard Regimen',\n                                size: 'large',\n                                slot: 'end',\n                                color: 'primary',\n                                visible: false,\n                                visibleOnStateChange: (state: Record<string, any>) => {\n                                    return state.index === 1\n                                },\n                                onClick: () => {\n                                    this.fieldComponent = 'arv_regimens'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_dosage',\n                    helpText: 'Custom dose',\n                    type: FieldType.TT_DOSAGE_INPUT,\n                    condition: (f: any) => !isEmpty(f.custom_regimen),\n                    validation: (val: Array<Option>) => {\n                        if (Validation.required(val)) return ['Drugs are not available']\n\n                        const empty = val.map(({ other }: Option) => other.am <= 0 && other.pm <= 0)\n                        return empty.some(Boolean) ? ['Missing dosage configuration on some drugs'] : null\n                    },\n                    unload: (data: any) => this.setCustomDrugs(data),\n                    summaryMapValue: ({other}: any) => ({\n                        label: 'Dosages', \n                        value: this.prescription.getInstructions(\n                            other.drug_name, other.am, other.pm, other.units\n                        ) \n                    }),\n                    options: (fdata: any) => {\n                        return fdata.custom_regimen.map((regimen: Option) => ({\n                            label: regimen.label,\n                            value: regimen.value,\n                            other: {\n                                'drug_id': regimen.other.drug_id,\n                                'drug_name': regimen.label,\n                                'barcodes': regimen.other.barcodes,\n                                'units': regimen.other.units,\n                                'am': 0,\n                                'noon': 0,\n                                'pm': 0,\n                                'frequency': this.getDrugFrequency(regimen.label)\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: 'selected_meds',\n                    helpText: 'Selected medication',\n                    type: FieldType.TT_DATA_TABLE,\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        hiddenFooterBtns: [ 'Clear' ],\n                        dataTableConfig: {\n                            showIndex: false\n                        },\n                        viewPortStyle: {\n                            height: '76vh'\n                        },\n                        columns: () => [\n                            [\n                                table.thTxt('Drug name', MEDICATION_STYLE),\n                                table.thTxt('Units', MEDICATION_STYLE),\n                                table.thTxt('AM', MEDICATION_STYLE),\n                                table.thTxt('Noon',  MEDICATION_STYLE),\n                                table.thTxt('PM', MEDICATION_STYLE),\n                                table.thTxt('Frequency', MEDICATION_STYLE)\n                            ]\n                        ],\n                        rows: () => this.drugs.map((d: any) => {\n                            const conf = {\n                                style: {\n                                    'height': '6vh'\n                                },\n                                cssClass:  (() => {\n                                    if (d.drug_name.match(/cotrimoxazole/i)) {\n                                        return 'adult-regimen-formulation'\n                                    }\n                                    switch(d.regimen_category) {\n                                        case 'A':\n                                            return 'adult-regimen-formulation'\n                                        case 'P':\n                                            return 'peads-regimen-formulation'\n                                    }\n                                })()\n                            }\n                            return [\n                                table.td(d.alternative_drug_name || d.drug_name, conf),\n                                table.td(d.units, conf),\n                                table.td(d.am, conf),\n                                table.td(d.noon, conf),\n                                table.td(d.pm, conf),\n                                table.td(d.frequency || this.getDrugFrequency(d.drug_name), conf)\n                            ]         \n                        })\n                    }\n                },\n                {\n                    id: Target.INTERVAL_SELECTION,\n                    helpText: 'Interval to next visit',\n                    type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildIntervalOptions(),\n                    onValue: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.ON_VALUE),\n                    beforeNext: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.BEFORE_NEXT), \n                    config: {\n                        showRegimenCardTitle: false\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Prescription.vue?vue&type=template&id=2bacc768&ts=true\"\nimport script from \"./Prescription.vue?vue&type=script&lang=ts\"\nexport * from \"./Prescription.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}