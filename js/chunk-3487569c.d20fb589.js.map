{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/Treatment.vue?b4f9","webpack:///./src/apps/ANC/Views/Encounters/Treatment.vue?5772","webpack:///./src/apps/ANC/Views/Encounters/Treatment.vue","webpack:///./src/apps/ANC/Views/Encounters/Treatment.vue?e661","webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/services/drug_service.ts","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ANC/Services/anc_treatment_service.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ANC/Services/anc_drug_set.ts"],"names":["_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","_createElementVNode","class","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_title","_resolveComponent","_component_ion_toolbar","_component_ion_header","_component_ion_input","_component_ion_icon","_component_ion_button","_component_ion_col","_component_ion_row","_component_ion_grid","_component_ion_label","_component_ion_item","_component_ion_list","_component_ion_content","_component_ion_footer","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","_createTextVNode","_","style","_createElementBlock","_Fragment","_renderList","activeDrugs","drug","drugIndex","key","readonly","onClick","$event","editDrugName","value","drug_name","placeholder","editDrugFrequency","frequency","editDrugDuration","duration","length","size","disabled","id","push","defaultDrugObj","color","icon","add","_createCommentVNode","splice","trashBin","drugSets","dset","dindex","detail","appendDrugSetValues","button","_toDisplayString","label","cancelDestination","slot","clear","isSubmitting","onFinish","defineComponent","components","IonHeader","IonIcon","IonRow","IonLabel","IonGrid","IonCol","IonPage","IonContent","IonTitle","IonInput","IonButton","IonFooter","IonToolbar","mixins","EncounterMixinVue","setup","data","defaultDrugs","service","computed","selectedDrugNames","this","map","d","watch","ready","AncTreatmentService","patientID","providerID","AncDrugSetService","getDrugSets","name","description","other","drugs","DrugService","getDrugs","immediate","methods","formIsEmpty","alertConfirmation","createEncounter","saveValueCodedObs","nextTask","formIsComplete","toastWarning","submitTreatment","PatientPrintoutService","printVisitSummaryLbl","e","console","error","every","drugSet","reduce","a","c","concat","filter","includes","drugItem","launchEditor","helpText","type","FieldType","TT_SELECT","defaultValue","validation","v","validateSeries","Validation","required","options","async","drug_id","dose","units","config","showKeyboard","isFilterDataViaApi","mapStrToOptions","Object","keys","DRUG_FREQUENCIES","TT_NUMBER","ok","field","callback","modal","modalController","create","component","TouchField","backdropDismiss","cssClass","componentProps","dismissType","currentField","present","__exports__","DrugOrderService","Service","constructor","super","orders","postJson","getProgramID","dispensations","order","getSessionDate","getJson","pageSize","drugID","date","params","patientId","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","fields","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","created","$route","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","log","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","saveObsOffline","observations","uploadStatus","encounterTypeID","meta","formData","labOrders","synchronizeRecord","skipNextTask","nextOfflineFlow","runflowState","state","states","username","split","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","toastDanger","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","b","usernameA","usernameB","p","_p$person","names","_p$person2","latestName","toOption","items","i","path","task","nextPatientWorkflowActivity","patientUrl","yesNoOptions","toYesNoOption","values","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","accum","cur","Array","isArray","Promise","all","inArray","arr","expression","condition","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","$emit","vaccinationDrugObj","dispensed","dispenseVaccinationDrug","orderID","order_id","updateDispensationOrders","createOrders","getEncounterID","o","buildDrugOrderObj","dispensation","forEach","quantity","drug_inventory_id","expiryDate","setDate","getDate","dailyEquivalentDose","parseFloat","toStandardHisFormat","isCondition","ignored","undefined","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","text","info","setID","void","sets","setKey","k"],"mappings":"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","file":"js/chunk-3487569c.d20fb589.js","sourcesContent":["export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Treatment.vue?vue&type=style&index=0&id=257a2a3f&scoped=true&lang=css\"","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-257a2a3f\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [\n  /*#__PURE__*/_createElementVNode(\"tr\", { class: \"his-sm-text\" }, [\n    /*#__PURE__*/_createElementVNode(\"th\", null, \"Drug\"),\n    /*#__PURE__*/_createElementVNode(\"th\", null, \"Frequency\"),\n    /*#__PURE__*/_createElementVNode(\"th\", null, \"Duration (Days)\"),\n    /*#__PURE__*/_createElementVNode(\"th\")\n  ])\n], -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_input = _resolveComponent(\"ion-input\")!\n  const _component_ion_icon = _resolveComponent(\"ion-icon\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_col = _resolveComponent(\"ion-col\")!\n  const _component_ion_row = _resolveComponent(\"ion-row\")!\n  const _component_ion_grid = _resolveComponent(\"ion-grid\")!\n  const _component_ion_label = _resolveComponent(\"ion-label\")!\n  const _component_ion_item = _resolveComponent(\"ion-item\")!\n  const _component_ion_list = _resolveComponent(\"ion-list\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_header, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_toolbar, null, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_title, { class: \"his-lg-text\" }, {\n                default: _withCtx(() => [\n                  _createTextVNode(\"Treatment\")\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_content, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_grid, null, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_row, {\n                style: {\"height\":\"50vh\"},\n                class: \"his-card section drug-section-style\"\n              }, {\n                default: _withCtx(() => [\n                  _createVNode(_component_ion_col, null, {\n                    default: _withCtx(() => [\n                      _createElementVNode(\"table\", null, [\n                        _hoisted_1,\n                        _createElementVNode(\"tbody\", null, [\n                          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.activeDrugs, (drug, drugIndex) => {\n                            return (_openBlock(), _createElementBlock(\"tr\", { key: drugIndex }, [\n                              _createElementVNode(\"td\", null, [\n                                _createVNode(_component_ion_input, {\n                                  readonly: \"\",\n                                  onClick: ($event: any) => (_ctx.editDrugName(drug)),\n                                  value: drug.drug_name,\n                                  placeholder: \"Add drug\",\n                                  class: \"his-sm-text dosage-input\"\n                                }, null, 8, [\"onClick\", \"value\"])\n                              ]),\n                              _createElementVNode(\"td\", null, [\n                                _createVNode(_component_ion_input, {\n                                  readonly: \"\",\n                                  onClick: ($event: any) => (_ctx.editDrugFrequency(drug)),\n                                  value: drug.frequency,\n                                  class: \"his-sm-text dosage-input\",\n                                  placeholder: \"Add frequency..\"\n                                }, null, 8, [\"onClick\", \"value\"])\n                              ]),\n                              _createElementVNode(\"td\", null, [\n                                _createVNode(_component_ion_input, {\n                                  readonly: \"\",\n                                  onClick: ($event: any) => (_ctx.editDrugDuration(drug)),\n                                  value: drug.duration,\n                                  placeholder: \"Add duration..\",\n                                  class: \"dosage-input his-sm-text\"\n                                }, null, 8, [\"onClick\", \"value\"])\n                              ]),\n                              _createElementVNode(\"td\", null, [\n                                _createVNode(_component_ion_row, null, {\n                                  default: _withCtx(() => [\n                                    (drugIndex + 1 >= _ctx.activeDrugs.length)\n                                      ? (_openBlock(), _createBlock(_component_ion_col, {\n                                          key: 0,\n                                          size: \"6\"\n                                        }, {\n                                          default: _withCtx(() => [\n                                            _createVNode(_component_ion_button, {\n                                              disabled: !(drug.id && drug.frequency && drug.duration),\n                                              onClick: _cache[0] || (_cache[0] = ($event: any) => (_ctx.activeDrugs.push(_ctx.defaultDrugObj()))),\n                                              class: \"his-md-text\",\n                                              style: {\"width\":\"100%\"},\n                                              color: \"success\"\n                                            }, {\n                                              default: _withCtx(() => [\n                                                _createVNode(_component_ion_icon, { icon: _ctx.add }, null, 8, [\"icon\"]),\n                                                _createTextVNode(\" Add \")\n                                              ]),\n                                              _: 2\n                                            }, 1032, [\"disabled\"])\n                                          ]),\n                                          _: 2\n                                        }, 1024))\n                                      : _createCommentVNode(\"\", true),\n                                    (drugIndex + 1 < _ctx.activeDrugs.length || (drugIndex !=0 && drugIndex +1 >= _ctx.activeDrugs.length))\n                                      ? (_openBlock(), _createBlock(_component_ion_col, {\n                                          key: 1,\n                                          size: \"6\"\n                                        }, {\n                                          default: _withCtx(() => [\n                                            _createVNode(_component_ion_button, {\n                                              onClick: ($event: any) => (_ctx.activeDrugs.splice(drugIndex, 1)),\n                                              class: \"his-lg-text\",\n                                              style: {\"width\":\"100%\"},\n                                              color: \"danger\"\n                                            }, {\n                                              default: _withCtx(() => [\n                                                _createVNode(_component_ion_icon, { icon: _ctx.trashBin }, null, 8, [\"icon\"])\n                                              ]),\n                                              _: 2\n                                            }, 1032, [\"onClick\"])\n                                          ]),\n                                          _: 2\n                                        }, 1024))\n                                      : _createCommentVNode(\"\", true)\n                                  ]),\n                                  _: 2\n                                }, 1024)\n                              ])\n                            ]))\n                          }), 128))\n                        ])\n                      ])\n                    ]),\n                    _: 1\n                  })\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          }),\n          _createVNode(_component_ion_list, {\n            style: {\"height\":\"29vh\"},\n            class: \"his-card section\"\n          }, {\n            default: _withCtx(() => [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugSets, (dset, dindex) => {\n                return (_openBlock(), _createBlock(_component_ion_item, {\n                  class: \"his-md-text\",\n                  detail: \"\",\n                  onClick: ($event: any) => (_ctx.appendDrugSetValues(dset)),\n                  button: \"\",\n                  key: dindex\n                }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_ion_label, null, {\n                      default: _withCtx(() => [\n                        _createTextVNode(_toDisplayString(dset.label) + \" (\" + _toDisplayString(dset.value) + \")\", 1)\n                      ]),\n                      _: 2\n                    }, 1024)\n                  ]),\n                  _: 2\n                }, 1032, [\"onClick\"]))\n              }), 128))\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_footer, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_toolbar, { color: \"dark\" }, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_button, {\n                \"router-link\": _ctx.cancelDestination,\n                slot: \"start\",\n                size: \"large\",\n                color: \"danger\"\n              }, {\n                default: _withCtx(() => [\n                  _createTextVNode(\" Cancel \")\n                ]),\n                _: 1\n              }, 8, [\"router-link\"]),\n              _createVNode(_component_ion_button, {\n                onClick: _ctx.clear,\n                slot: \"end\",\n                size: \"large\",\n                color: \"warning\"\n              }, {\n                default: _withCtx(() => [\n                  _createTextVNode(\" Clear \")\n                ]),\n                _: 1\n              }, 8, [\"onClick\"]),\n              _createVNode(_component_ion_button, {\n                disabled: _ctx.isSubmitting,\n                onClick: _ctx.onFinish,\n                slot: \"end\",\n                size: \"large\",\n                color: \"success\"\n              }, {\n                default: _withCtx(() => [\n                  _createTextVNode(\" Finish \")\n                ]),\n                _: 1\n              }, 8, [\"disabled\", \"onClick\"])\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport {\n    IonHeader,\n    IonLabel,\n    IonPage,\n    IonContent,\n    IonTitle,\n    IonRow,\n    IonGrid,\n    IonIcon,\n    IonInput,\n    IonCol,\n    IonFooter,\n    IonToolbar,\n    IonButton,\n    modalController\n} from \"@ionic/vue\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport TouchField from \"@/components/Forms/SIngleTouchField.vue\"\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { AncTreatmentService, AncTreatmentDrugObject, DRUG_FREQUENCIES } from '../../Services/anc_treatment_service'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { DrugService } from '@/services/drug_service'\nimport { alertConfirmation, toastWarning } from '@/utils/Alerts'\nimport {\n    add,\n    trashBin\n} from \"ionicons/icons\";\nimport { PatientPrintoutService } from '@/services/patient_printout_service'\nimport { AncDrugSetService } from '../../Services/anc_drug_set'\n\nexport default defineComponent({\n    components: {\n        IonHeader,\n        IonIcon,\n        IonRow,\n        IonLabel,\n        IonGrid,\n        IonCol,\n        IonPage,\n        IonContent,\n        IonTitle,\n        IonInput,\n        IonButton,\n        IonFooter,\n        IonToolbar\n    },\n    mixins: [EncounterMixinVue],\n    setup() {\n        return {\n            add,\n            trashBin\n        }\n    },\n    data: () => ({\n        activeDrugs: [] as AncTreatmentDrugObject[],\n        drugSets: [] as any,\n        defaultDrugs: [] as any,\n        isSubmitting: false as boolean,\n        service: {} as any\n    }),\n    computed: {\n        selectedDrugNames(): string[] {\n            return this.activeDrugs.map((d: any) => d.drug_name || '')\n        }\n    },\n    watch: {\n        ready: {\n            async handler(ready: boolean) {\n                this.activeDrugs = [this.defaultDrugObj()]\n                if (ready) {\n                    this.service = new AncTreatmentService(this.patientID, this.providerID)\n                    this.drugSets = (await AncDrugSetService.getDrugSets())\n\t\t\t\t\t.map((d: any) => ({\n                        label: d.name,\n                        value: d.description,\n                        other: {\n                            drugs: d.drugs\n                        }\n                    }))\n                    this.defaultDrugs = await DrugService.getDrugs({'page_size': 50})\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async onFinish() {\n            if (this.formIsEmpty()) {\n                if ((await alertConfirmation('Do you want to proceed without prescribing drugs?'))) {\n                    await this.service.createEncounter()\n                    await this.service.saveValueCodedObs('Medication received at vist', 'No')\n                    this.nextTask()\n                }\n                return\n            }\n            if (!this.formIsComplete()) {\n                return toastWarning('Please complete the form')\n            }\n            this.isSubmitting = true\n            try {\n                await this.service.submitTreatment(this.activeDrugs)\n                await new PatientPrintoutService(this.patientID).printVisitSummaryLbl()\n                return this.nextTask()\n            } catch (e) {\n                toastWarning(`${e}`)\n                console.error(e)\n            }\n            this.isSubmitting = false\n        },\n        defaultDrugObj() {\n            return {\n                'id': 0,\n                'drug_name': '',\n                'dose': '',\n                'duration': 0,\n                'frequency': '',\n                'units': ''\n            }\n        },\n        formIsComplete() {\n            return this.activeDrugs.every(d => d.id && d.duration && d.frequency)\n        },\n        formIsEmpty() {\n            return this.activeDrugs.length === 1 && this.activeDrugs[0].drug_name === ''\n                && this.activeDrugs[0].duration === 0 && this.activeDrugs[0].frequency === '' \n        },\n        appendDrugSetValues(drugSet: any) {\n            const drugs = drugSet.other.drugs.reduce((a: any, c: any) => a.concat(c), [])\n            if (this.activeDrugs.length === 1 && !this.activeDrugs[0].id){\n                this.activeDrugs = drugs\n            } else {\n                this.activeDrugs = this.activeDrugs.concat(\n                    drugs.filter((d: any) => !this.selectedDrugNames.includes(d.drug_name))\n                )\n            }\n        },\n        editDrugName(drugItem: any) {\n            this.launchEditor({\n                id: 'new_drug',\n                helpText: 'Add drug to prescribe',\n                type: FieldType.TT_SELECT,\n                defaultValue: () => drugItem.drug_name,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => {\n                        if (this.selectedDrugNames.includes(v.label)) {\n                            return ['Drug already added']\n                        } else {\n                            return null\n                        }\n                    }\n                ]),\n                options: async (_: any, filter: string) => {\n                    let drugs: any = []\n                    if (filter) {\n                        drugs = await DrugService.getDrugs({\n                           'page_size': 50,\n                           'name': filter\n                       })\n                    } else {\n                        drugs = this.defaultDrugs\n                    }\n                    return drugs.map((d: any) => ({\n                        label: d.name,\n                        value: d.drug_id,\n                        other: {\n                            dose: d.dose,\n                            units: d.units\n                        }\n                    }))\n                },\n                config: {\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            }, \n            (data: Option) => {\n                drugItem['id'] = data.value\n                drugItem['drug_name'] = data.label\n                drugItem['dose'] = data.other.dose\n                drugItem['units'] = data.other.units\n            })\n        },\n        editDrugFrequency(drug: AncTreatmentDrugObject) {\n            this.launchEditor({\n                id: 'frequency',\n                helpText: `Edit drug frequency for ${drug.drug_name}`,\n                type: FieldType.TT_SELECT,\n                defaultValue: () => drug.frequency,\n                validation: (v: Option) => Validation.required(v),\n                options: () =>  this.mapStrToOptions(Object.keys(DRUG_FREQUENCIES))\n            },\n            (v: Option) => {\n                drug.frequency = v.label as string\n            })\n        },\n        editDrugDuration(drug: AncTreatmentDrugObject) {\n            this.launchEditor({\n                id: 'duration',\n                helpText: `Edit duration of ${drug.drug_name} in days`,\n                type: FieldType.TT_NUMBER,\n                defaultValue: () => drug.duration,\n                validation: (v: Option) => Validation.required(v)\n            }, \n            (v: Option) => {\n                drug.duration = v.value as number\n            })\n        },\n        async clear() {\n            const ok = await alertConfirmation('Are you sure you want to clear all drugs?')\n            if (ok) {\n                this.activeDrugs = [this.defaultDrugObj()]\n            }\n        },\n        async launchEditor(field: Field, callback: Function) {\n            const modal = await modalController.create({\n                component: TouchField,\n                backdropDismiss: false,\n                cssClass: \"full-modal\",\n                componentProps: {\n                    dismissType: 'modal',\n                    currentField: field,\n                    onFinish: callback,\n                }\n            })\n            modal.present()\n        }\n    }\n})\n","import { render } from \"./Treatment.vue?vue&type=template&id=257a2a3f&scoped=true&ts=true\"\nimport script from \"./Treatment.vue?vue&type=script&lang=ts\"\nexport * from \"./Treatment.vue?vue&type=script&lang=ts\"\n\nimport \"./Treatment.vue?vue&type=style&index=0&id=257a2a3f&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-257a2a3f\"]])\n\nexport default __exports__","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n                Offline().saveObsOffline({\n                    observations: obs,\n                    id: this.offlineID,\n                    uploadStatus: status,\n                    encounterName: this.$route.name,\n                    encounterTypeID: params.encounterTypeID,\n                    meta: params.formData,\n                    labOrders: params.labOrders,\n                    created\n                }, created)\n                Offline().synchronizeRecord(this.offlineID)\n                if (!params.skipNextTask) this.nextOfflineFlow()\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            // if (!this.isOfflineMode()) {\n            //     try {\n            //         const enc = new AppEncounterService(\n            //             this.patientID,\n            //             params.encounterTypeID, \n            //             this.providerID\n            //         )\n            //         if ((await enc.createEncounter())) {\n            //             if ((await enc.saveObservationList(obs as ObsValue[]))) {\n            //                 status = 'Success'\n            //             }\n            //         }\n            //         if (typeof params.callback === 'function') {\n            //             await params.callback(enc)\n            //         }\n            //         created = true\n            //     } catch (e) {\n            //         created = false\n            //         if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n            //             status = 'NetworkError'\n            //         } else {\n            //             status = 'Exception'\n            //             console.error(`Exception while saving an encounter: ${e}`)\n            //         }\n            //     }\n            //     if (status === 'Exception') {\n            //         return toastDanger(\"An error has occured!\")\n            //     }\n            // }\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextOfflineFlow() {\n            const task = Offline().nextPatientWorkflowActivity(this.patientID)\n            if (!task || !task.patientUrl) return this.$router.push(`/patient/dashboard/${this.patientID}`)\n            return this.$router.push(`${task.patientUrl}/${this.patientID}`) \n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { Service } from \"./service\";\n\nexport class DrugService extends Service {\n    constructor() {\n        super()\n    }\n\n    \n    static getDrugs(params={} as Record<string, string | number>) {\n        return super.getJson('/drugs', params)\n    }\n}","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { find, isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface AncTreatmentDrugObject {\n    'id': number;\n    'drug_name': string;\n    'dose': string;\n    'duration': number;\n    'frequency': string;\n    'units': string;\n}\n\nexport const DRUG_FREQUENCIES: Record<string, number> = { \n    'Once a day (OD)' : 1,\n    'Twice a day (BD)': 2,\n    'Three a day (TDS)': 3,\n    'Four times a day (QID)' : 4,\n    'Five times a day (5X/D)' : 5,\n    'Six times a day (Q4HRS)' : 6,\n    'In the morning (QAM)' : 0.5,\n    'Once a week (QWK)' : 0.14,\n    'Once a month' : 0.03,\n    'Twice a month' : 0.071\n}\n\nexport class AncTreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 25, providerID)\n    }\n\n    vaccinationDrugObj() {\n        return {\n            'drug_inventory_id': 609,\n            'dose': 0.5,\n            'equivalent_daily_dose': 0.5,\n            'frequency': \"Once a day (od)\",\n            'start_date': this.date,\n            'auto_expire_date': this.date,\n            'instructions': \"Once a day\",\n            'units': \"ml\"\n        }\n    }\n\n    async updateVaccinationOrder() {\n        const dispensed = await this.dispenseVaccinationDrug()\n        if (!isEmpty(dispensed)) {\n            const orderID = dispensed[0].order_id\n            return DrugOrderService.updateDispensationOrders([{'order_id': orderID, 'quantity' : 1}])\n        }\n        throw 'Unable to dispense'\n    }\n\n    dispenseVaccinationDrug() {\n        return this.createOrders([this.vaccinationDrugObj()])\n    }\n\n    createOrders(orders: any) {\n        return DrugOrderService.create({\n            'drug_orders': orders,\n            'encounter_id': this.getEncounterID(),\n        })\n    }\n\n    async submitTreatment(drugs: AncTreatmentDrugObject[]) {\n        await this.createEncounter()\n        const orders = await this.createOrders(drugs.map(o => this.buildDrugOrderObj(o)))\n        const dispensation = new AppEncounterService(this.patientID, 54, this.providerID)\n        await dispensation.createEncounter()\n        drugs.forEach(o => {\n            const quantity: number = DRUG_FREQUENCIES[o.frequency] * o.duration\n            orders.forEach((order: any) => { \n                if (order.drug_inventory_id === o.id) {\n                    order.quantity = quantity\n                }\n            })\n        })\n        await DrugOrderService.updateDispensationOrders(orders)\n    }\n\n    buildDrugOrderObj(drug: AncTreatmentDrugObject) {\n        const startDate = new Date(this.date)\n        const expiryDate = startDate.setDate(startDate.getDate() + parseInt(`${drug.duration}`))\n        const dose: any = drug.dose || DRUG_FREQUENCIES[drug.frequency]\n        const dailyEquivalentDose =  parseFloat(dose) * DRUG_FREQUENCIES[drug.frequency] \n        return {\n            'drug_inventory_id': drug.id,\n            'dose': dose,\n            'equivalent_daily_dose': dailyEquivalentDose,\n            'frequency': drug.frequency,\n            'start_date': this.date,\n            'auto_expire_date': HisDate.toStandardHisFormat(new Date(expiryDate)),\n            'instructions': drug.drug_name + ':' + drug.dose + ' ' + drug.units + ' ' + drug.frequency + 'days',\n            'units': drug.units\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Service } from \"@/services/service\";\n\nexport interface AncDrugSetDrugs {\n    drug: number;\n    drug_name?: string;\n    quantity: number;\n    duration?: number;\n    frequency: string;\n}\n\nexport interface NewDrugSet {\n    id?: number;\n    datetime?: string;\n    name: string;\n    description: string;\n    drugs: AncDrugSetDrugs[];\n}\n\nexport class AncDrugSetService extends Service {\n    static saveDrugSet(drugSet: NewDrugSet) {\n        const data  = {...drugSet}\n        data['datetime'] = Service.getSessionDate()\n        return this.postJson('/drug_sets', drugSet)\n    }\n\n    static voidDrugSet(setID: number) {\n        return this.void(`/drug_sets/${setID}`, { date: this.getSessionDate()})\n    }\n\n    static async getDrugSets() {\n        const data = await this.getJson('drug_sets')\n        if (data) {\n            return Object.keys(data['set_names'])\n                .reduce((sets: Array<any>, setKey: string) => {\n                    const name = data['set_names'][setKey]\n                    const description = data['set_descriptions'][setKey]\n                    const drugs = data['drug_sets'][setKey]\n                    sets.push({\n                        id: parseInt(setKey),\n                        name,\n                        description,\n                        drugs: Object.keys(drugs).reduce(\n                            (a: any, k: string) => [\n                                ...a, { \n                                    'id': parseInt(k), ...drugs[k],\n                                    'drug_name': drugs[k].drug_name,\n                                    'duration': parseInt(drugs[k].duration),\n                                    'frequency': drugs[k].frequency,\n                                    'units': drugs[k].units,\n                                }], []\n                        )\n                    })\n                    return sets\n                }, [])\n        }\n        return []\n    }\n}"],"sourceRoot":""}