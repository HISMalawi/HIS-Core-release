{"version":3,"sources":["webpack:///./src/views/MultipleIdentifiers.vue?5502","webpack:///./src/views/MultipleIdentifiers.vue","webpack:///./src/views/MultipleIdentifiers.vue?d51c","webpack:///./src/utils/ActionSheetHelpers/VoidReason.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_openBlock","_createBlock","title","period","rows","fields","columns","canExportCsv","canExportPDf","onReportConfiguration","onPeriod","defineComponent","components","ReportTemplate","data","service","dde","table","thTxt","this","getFormFields","methods","identifier","idType","parseInt","value","toString","label","IdentifierService","setIdentifierType","getRows","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","async","getIdentifierTypes","map","i","name","patient_identifier_type_id","toDate","date","HisDate","toStandardHisDisplayFormat","identifiers","rowIndex","modal","modalController","create","component","DrillTable","cssClass","componentProps","onRows","p","index","date_created","color","action","voidActiveItem","patient_identifier_id","disabled","length","e","toastDanger","present","popVoidReason","dismiss","then","voidMultipleIdentifiers","reason","identifier_type","activeIDentifiers","splice","drillDuplicates","getMultipleIdentifiers","td","given_name","family_name","gender","tdBtn","__exports__","callback","size","optionsActionSheet","slot","role","selection"],"mappings":"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","file":"js/chunk-14b47a57.f2b3bfa9.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_report_template = _resolveComponent(\"report-template\")!\n\n  return (_openBlock(), _createBlock(_component_report_template, {\n    title: _ctx.title,\n    period: _ctx.period,\n    rows: _ctx.rows,\n    fields: _ctx.fields,\n    columns: _ctx.columns,\n    canExportCsv: false,\n    canExportPDf: false,\n    onReportConfiguration: _ctx.onPeriod\n  }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"onReportConfiguration\"]))\n}","\nimport { defineComponent } from 'vue'\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport { FieldType } from '@/components/Forms/BaseFormElements'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { Option } from '@/components/Forms/FieldInterface'\nimport table, { RowInterface } from \"@/components/DataViews/tables/ReportDataTable\"\nimport { IdentifierService } from \"@/services/identifier_service\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport DrillTable from \"@/components/DataViews/DrillTableModal.vue\"\nimport { modalController } from \"@ionic/vue\";\nimport HisDate from \"@/utils/Date\"\nimport { toastDanger } from '@/utils/Alerts'\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\";\nexport default defineComponent({\n    components: { ReportTemplate },\n    data: () => ({\n        service: {} as any,\n        dde: {} as any,\n        title: 'Multiple Identifiers',\n        fields: [] as Field[],\n        rows: [] as Array<RowInterface[]>,\n        columns: [\n            [\n                table.thTxt('First Name'), \n                table.thTxt('Last Name'), \n                table.thTxt('Gender'), \n                table.thTxt('Number of identifiers'), \n                table.thTxt('View'),\n            ]\n        ]\n    }),\n    async created() {\n        this.fields = this.getFormFields()\n    },\n    methods: {\n        async onPeriod({identifier}: any) {\n            const idType = parseInt(identifier.value.toString())\n            this.title = identifier.label + ' Multiple Identifiers'\n            this.service = new IdentifierService()\n            this.service.setIdentifierType(idType)\n            this.rows = await this.getRows()\n        },\n        getFormFields(): Array<Field> {\n            return [\n                {\n                    id: 'identifier',\n                    helpText: 'Select Identifier type',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => \n                        (await IdentifierService.getIdentifierTypes())\n                            .map((i: any) => ({\n                                label: i.name,\n                                value: i.patient_identifier_type_id\n                            }))\n                }\n            ]\n        },\n        toDate(date: string | Date) {\n            return HisDate.toStandardHisDisplayFormat(date)\n        },\n        async drillDuplicates(identifiers: any, rowIndex: any){\n            const modal = await modalController.create({\n                component: DrillTable,\n                cssClass: 'custom-modal',\n                componentProps: {\n                    title: `Identifiers belonging to client`,\n                    columns: [\n                        'identifier', 'date created', 'void'\n                    ],\n                    onRows: async () => {\n                        return identifiers.map((p: any, index: any) => {\n                            try {\n                                return [\n                                p.identifier, \n                                this.toDate(p.date_created),\n                                    {\n                                        type: 'button',\n                                        name: 'Void',\n                                        color: 'danger',\n                                        action: async () => {\n                                            await this.voidActiveItem(p.patient_identifier_id, identifiers, index, rowIndex);\n                                            \n                                        },\n                                        disabled: identifiers.length > 1 ? false : true\n                                    },\n                                ]\n                            } catch (e) {\n                                toastDanger('Unable to load patient details')\n                                return ['N/A', 'N/A', 'N/A', 'N/A', 'N/A']\n                            }\n                        })\n                    }\n                }\n            })\n            modal.present()\n        },\n      //using the multiple identifiers route as we may need to change the interface to allow multiple voids in the future\n      voidActiveItem(identifier: number, identifiers: any, index: any, rowIndex: any) {\n        popVoidReason(async (reason: string) => {\n            try {\n                modalController.dismiss().then(async () => {\n                    await this.service.voidMultipleIdentifiers([identifier], reason, identifiers[0].identifier_type);\n                    const activeIDentifiers = identifiers.splice(index, 1);\n                    if(activeIDentifiers.length > 1) {\n                        await this.drillDuplicates(activeIDentifiers, rowIndex);\n                    }else {\n                        this.rows.splice(rowIndex, 1);\n                    }\n                });\n            } catch (e) {\n            toastDanger(`${e}`)\n            }\n            }, 'void-modal custom-modal-backdrop') \n        },\n        async getRows() {\n            return (await this.service.getMultipleIdentifiers())\n                .map((i: any, index: any) => ([\n                    table.td(i.given_name),\n                    table.td(i.family_name),\n                    table.td(i.gender),\n                    table.td(i.identifiers.length),\n                    table.tdBtn('Select', () => this.drillDuplicates(i.identifiers, index)),\n                ]))\n        }\n    }\n})\n","import { render } from \"./MultipleIdentifiers.vue?vue&type=template&id=c0d65e52&ts=true\"\nimport script from \"./MultipleIdentifiers.vue?vue&type=script&lang=ts\"\nexport * from \"./MultipleIdentifiers.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { optionsActionSheet } from '@/utils/ActionSheets'\n\nexport default async function popVoidReason(callback: Function, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n"],"sourceRoot":""}