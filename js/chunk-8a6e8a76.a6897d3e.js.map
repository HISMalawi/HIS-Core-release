{"version":3,"sources":["webpack:///./src/services/regimen_service.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/apps/ART/services/prescription_service.ts"],"names":["RegimenService","this","getJson","getProgramID","patientId","weight","onTbTreatment","date","getSessionDate","name","Service","DrugOrderService","orders","postJson","dispensations","map","order","patientID","pageSize","drugID","params","AdverseEffectsCategories","PrescriptionService","providerID","nextVisitInterval","fastTrack","regimenExtras","fastTrackMedications","hangingPills","medicationOrders","treatmentState","contraindications","sideEffects","tptPrescriptionCount","lastSideEffectDate","i","AppEncounterService","getCachedConceptName","getRegimens","getCustomIngridients","isEmpty","arvs","getCachedConceptID","includes","extras","getConceptsByCategory","extrasAvailable","concept_id","some","Boolean","regimenCode","patientWeight","regimen","type","getConceptID","contraindication","getObs","obs","forEach","o","HisDate","toStandardHisFormat","obs_datetime","concept","value_coded","push","drugInduced","value_drug","res","count","getFirstValueCoded","isFastTrack","yes","meds","Object","values","getAll","pills","filter","value_numeric","drug_order","drug_inventory_id","getLastDrugsReceived","drugs","withDosages","data","drug","getDrugDosages","drug_id","dosage","units","am","noon","pm","frequency","Promise","all","req","allSideEffects","parseInt","parseFloat","toString","pillsPerDay","packSize","packs","roundedPacks","Math","round","morningTabs","eveningTabs","dose","dateObj","Date","setDate","getDate","pack_size","barcodes","tabs","e","drugName","id","calculateEquivalentDosage","calculateDateFromInterval","getInstructions","calculateDosage","getFirstValueText","reason","drugOrders","create","encounterID","response","saveValueTextObs","reasonForSwitch"],"mappings":"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","file":"js/chunk-8a6e8a76.a6897d3e.js","sourcesContent":["import { Service } from \"./service\";\n\nexport class RegimenService extends Service {\n    constructor() {\n        super()\n    } \n\n    static getAllArvRegimens() {\n        return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)\n    }\n\n    static getRegimens(patientId: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {'patient_id': patientId})\n    }\n\n    static getRegimensByWeight(weight: number, onTbTreatment = false) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {\n            weight,\n            'tb_dosage': onTbTreatment,\n        })\n    }\n\n    static getCustomIngridients() {\n        return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)\n    }\n\n    static getCurrentRegimen(patientId: number, date=this.getSessionDate()) {\n        return this.getJson(`programs/${this.getProgramID()}/${patientId}`, {date})   \n    }\n\n    static getRegimenExtras(name: string, weight: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimen_extras`, {name, weight})\n    }\n}","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getARVs() {\n        return RegimenService.getJson('arv_drugs')\n    }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = await AppEncounterService.getAll(this.patientID, 'Pills brought')\n        if (pills) {\n            this.hangingPills = pills.filter((o: any) => o.value_numeric >= 1 && o.order)\n                                    .map((o: any) => o.order.drug_order.drug_inventory_id)\n        }\n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / packSize\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n"],"sourceRoot":""}