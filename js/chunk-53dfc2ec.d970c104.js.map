{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsArtInitiation.vue?331c","webpack:///./src/apps/HTS/views/encounters/HtsArtInitiation.vue","webpack:///./src/apps/HTS/views/encounters/HtsArtInitiation.vue?59eb","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/services/hts_art_initiation_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","HtsArtInitiationService","patientID","providerID","referralForArtInitiation","intendedArtSiteField","artAppointmentDataField","htsLinkageCodeField","hiddenArtReferralOutcomeStatusField","immediate","methods","computedData","createEncounter","saveObservationList","resolveObs","nextTask","id","helpText","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","obs","buildValueText","options","label","value","values","yesNoOptions","TT_SELECT","filter","getFacilities","condition","f","is_referral","config","footerBtns","name","slot","onClickComponentEvents","setValue","btnEvent","btnOutput","onClick","getLocationName","showKeyboard","isFilterDataViaApi","TT_DATE_PICKER","defaultValue","date","d","buildValueDate","minDate","infoItems","toDate","hiddenFooterBtns","linkageCode","TT_TEXT_BANNER","init","async","getHtsCode","toOption","mapStrToOptions","printHtsLinkageId","TT_HIDDEN","buildValueCoded","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","patient","facts","isEnrolledInProgam","route","params","patient_id","toUpperCase","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","other","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","dismiss","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","formData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","AppEncounterService","constructor","super","PrintoutService","code","printoutService","printLbl","Prop","sitePrefix","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-53dfc2ec.d970c104.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"ART (Re-) Initiation\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport {\n  Field,\n  FooterBtnEvent,\n  Option,\n} from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport { HtsArtInitiationService } from \"../../services/hts_art_initiation_service\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { toDate } from \"@/utils/Strs\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsArtInitiationService,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsArtInitiationService(\n            this.patientID,\n            this.providerID\n          );\n          this.fields = [\n            this.referralForArtInitiation(),\n            this.intendedArtSiteField(),\n            this.artAppointmentDataField(),\n            this.htsLinkageCodeField(),\n            this.hiddenArtReferralOutcomeStatusField(),\n          ];\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      await this.service.createEncounter();\n      await this.service.saveObservationList(\n        (await this.resolveObs(computedData)) as any\n      );\n      this.nextTask();\n    },\n    referralForArtInitiation(): Field {\n      return {\n        id: \"is_referral\",\n        helpText: \"Referral for ART (Re-)Initiation\",\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            obs: this.service.buildValueText(\"ART referral\", v),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Do you want to Refer client?\",\n              value: \"\",\n              values: this.yesNoOptions(),\n            },\n          ];\n        },\n      };\n    },\n    intendedArtSiteField(): Field {\n      return {\n        id: \"art_site\",\n        helpText: \"Intended Site for ART\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: ({ label }: Option) => ({\n          obs: this.service.buildValueText(\"Referral location\", label),\n        }),\n        options: (_: any, filter = \"\") => getFacilities(filter),\n        condition: (f: any) => f.is_referral === \"Yes\",\n        config: {\n          footerBtns: [\n            {\n              name: \"Here\",\n              slot: \"end\",\n              onClickComponentEvents: {\n                setValue: (btnEvent: FooterBtnEvent) => {\n                  return btnEvent.btnOutput;\n                },\n              },\n              onClick: () => HtsArtInitiationService.getLocationName(),\n            },\n          ],\n          showKeyboard: true,\n          isFilterDataViaApi: true,\n        },\n      };\n    },\n    artAppointmentDataField(): Field {\n      return {\n        id: \"art_appointment_date\",\n        helpText: \"Appointment Date for ART Referral\",\n        type: FieldType.TT_DATE_PICKER,\n        isRequired: () => true,\n        defaultValue: () => this.service.date,\n        condition: (f: any) => f.is_referral === \"Yes\",\n        finalComputedValue: (d: Option) => {\n          return {\n            obs: this.service.buildValueDate(\"Appointment date\", `${d.value}`),\n          };\n        },\n        config: {\n          minDate: () => this.service.date,\n          infoItems: (date: string) => {\n            return [\n              {\n                label: \"Set appointment date\",\n                value: toDate(date),\n              },\n            ];\n          },\n          hiddenFooterBtns: [\"Clear\"],\n        },\n      };\n    },\n    htsLinkageCodeField() {\n      let linkageCode = \"\";\n      return {\n        id: \"linkage_code\",\n        helpText: \"LINKAGE CODE\",\n        type: FieldType.TT_TEXT_BANNER,\n        init: async () => {\n          linkageCode = await this.service.getHtsCode();\n          return true;\n        },\n        defaultValue: () => {\n          return this.toOption(linkageCode);\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueText(\"HTC serial number\", `${v.value}`),\n          };\n        },\n        options: () => this.mapStrToOptions([linkageCode]),\n        config: {\n          footerBtns: [\n            {\n              name: \"Print\",\n              slot: \"end\",\n              onClick: async () =>\n                await this.service.printHtsLinkageId(linkageCode),\n            },\n          ],\n          showKeyboard: true,\n          isFilterDataViaApi: true,\n        },\n      };\n    },\n    hiddenArtReferralOutcomeStatusField() {\n      return {\n        id: \"art_outcome_field\",\n        helpText: \"Art outcome\",\n        type: FieldType.TT_HIDDEN,\n        defaultValue: () => {\n          return this.toOption(\"Unknown\");\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\n              \"Antiretroviral status or outcome\",\n              v.value\n            ),\n          };\n        },\n      };\n    },\n  },\n});\n","import { render } from \"./HtsArtInitiation.vue?vue&type=template&id=c9796344&ts=true\"\nimport script from \"./HtsArtInitiation.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsArtInitiation.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { PrintoutService } from '@/services/printout_service';\nimport Prop from \"@/apps/GLOBAL_APP/global_prop\";\nexport class HtsArtInitiationService extends AppEncounterService {\n  patientID: number\n  printoutService: PrintoutService = new PrintoutService()\n    \n  constructor(patientID: number, providerID = -1) {\n      super(patientID, 79, providerID);\n      this.patientID = patientID;\n  }\n\n  async printHtsLinkageId(code: string) {\n    await this.printoutService.printLbl(\n      `/patients/${this.patientID}/labels/print_hts_linkage_code/${code}`\n    );\n  }\n\n    async getHtsCode() {\n        return `${(await Prop.sitePrefix()) || 'FAC'}-HTS-${this.patientID}`\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}