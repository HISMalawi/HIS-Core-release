{"version":3,"sources":["webpack:///./src/apps/ANC/Views/DataManagement/AncDrugSet.vue?b273","webpack:///./src/apps/ANC/Views/DataManagement/AncDrugSet.vue","webpack:///./src/apps/ANC/Views/DataManagement/AncDrugSet.vue?476f","webpack:///./src/services/drug_order_service.ts","webpack:///./src/services/drug_service.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/apps/ANC/Services/anc_treatment_service.ts","webpack:///./src/apps/ANC/Services/anc_drug_set.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","key","hisFormKey","activeField","fieldComponent","skipSummary","fields","onOnIndex","$event","onOnFinish","onFinish","_","defineComponent","components","HisStandardForm","IonPage","data","allDrugs","service","created","this","getFields","methods","computedData","AncDrugSetService","saveDrugSet","toastSuccess","$router","back","toastWarning","id","helpText","type","FieldType","TT_TEXT","computedValue","v","value","validation","Validation","validateSeries","required","match","TT_MULTIPLE_SELECT","config","showKeyboard","options","isEmpty","DrugService","getDrugs","map","d","label","name","other","TT_ANC_DRUGSET_INPUT","quantity","frequency","every","Boolean","fdata","drug_selection","drugFrequencies","Object","keys","DRUG_FREQUENCIES","k","__exports__","DrugOrderService","orders","postJson","getProgramID","dispensations","order","getSessionDate","patientID","getJson","pageSize","Service","drugID","date","params","patientId","_resolveDynamicComponent","formType","cancelDestinationPath","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","String","formData","$emit","i","AncTreatmentService","providerID","dispenseTTV","dispensed","orderID","order_id","updateDispensationOrders","createOrders","ttvDrugObj","create","getEncounterID","drugs","createEncounter","o","buildDrugOrderObj","dispensation","AppEncounterService","forEach","duration","drug_inventory_id","drug","startDate","Date","expiryDate","setDate","getDate","parseInt","dose","dailyEquivalentDose","parseFloat","HisDate","toStandardHisFormat","drug_name","units","drugSet","setID","void","reduce","sets","setKey","description","push","a"],"mappings":"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","file":"js/chunk-56873b06.5dbaefe6.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        key: _ctx.hisFormKey,\n        activeField: _ctx.fieldComponent,\n        skipSummary: true,\n        fields: _ctx.fields,\n        onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n        onOnFinish: _ctx.onFinish\n      }, null, 8, [\"activeField\", \"fields\", \"onOnFinish\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {\n    IonPage\n} from \"@ionic/vue\"\nimport { isEmpty } from 'lodash';\nimport { DrugService } from '@/services/drug_service';\nimport { DRUG_FREQUENCIES } from \"@/apps/ANC/Services/anc_treatment_service\";\nimport { NewDrugSet, AncDrugSetService } from \"@/apps/ANC/Services/anc_drug_set\";\nimport { toastSuccess, toastWarning } from '@/utils/Alerts';\n\nexport default defineComponent({\n    components: { HisStandardForm, IonPage },\n    data: () => ({\n        hisFormKey: 0 as number,\n        fields: [] as Array<Field>,\n        allDrugs: [] as Array<Option>,\n        fieldComponent: '' as string,\n        service: {} as any\n    }),\n    created() {\n        this.fields = this.getFields()\n    },\n    methods: {\n        async onFinish(_: any, computedData: NewDrugSet) {\n            try {\n                if ((await AncDrugSetService.saveDrugSet(computedData))) {\n                    toastSuccess('Drugset saved successfully');\n                    return this.$router.back()\n                }\n                toastWarning('Unable to save drugset')\n            } catch (e) {\n                toastWarning(`${e}`)\n            }\n        },\n        getFields() {\n            return [\n                {\n                    id: 'name',\n                    helpText: 'Enter drug set name',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (v: Option) => v.value,\n                    validation: (v: Option) => Validation.validateSeries([\n                        () => Validation.required(v),\n                        () => !`${v.value}`.match(/^([a-zA-Z_ ]{2,17})'?-?([a-zA-Z_ ]{1,17})$/)\n                            ? ['Enter a valid drug set name.']\n                            : null\n                    ]),\n\n                },\n                {\n                    id: 'description',\n                    helpText: 'Drug set description',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (v: Option) => v.value,\n                    validation: (v: Option) => Validation.validateSeries([\n                        () => Validation.required(v),\n                        () => !`${v.value}`.match(/^([a-zA-Z_ ]{2,100})'?-?([a-zA-Z_ ]{1,100})$/)\n                            ? ['Enter a valid drug set description']\n                            : null\n                    ]) \n                },\n                {\n                    id: 'drug_selection',\n                    helpText: 'Select drugs to add',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (v: Option[]) => Validation.required(v),\n                    config: {\n                        showKeyboard: true\n                    },\n                    options: async () => {\n                        if (isEmpty(this.allDrugs)) {\n                            this.allDrugs = (await DrugService.getDrugs({\n                                'page_size': 1000\n                            })).map((d: any) => ({\n                                label: d.name,\n                                value: d.id,\n                                other: {\n                                    'drug': d.name,\n                                    'quantity': 0,\n                                    'frequency': '',\n                                }\n                            }))\n                        }\n                        return this.allDrugs as Option[]\n                    }\n                },\n                {\n                    id: 'drugs',\n                    helpText: 'Set drugs',\n                    type: FieldType.TT_ANC_DRUGSET_INPUT,\n                    computedValue: (v: Option[]) => v.map(d => d.other), \n                    validation: (v: Option[]) => Validation.validateSeries([\n                        () =>  Validation.required(v),\n                        () => !v.map(d => d.other.quantity && d.other.frequency).every(Boolean)\n                                ? ['Data is not complete']\n                                : null\n                    ]),\n                    options: (fdata: any) => fdata.drug_selection as Option[],\n                    config: {\n                        drugFrequencies: Object.keys(DRUG_FREQUENCIES)\n                            .map((k: string) => ({ label: k, value: k }))\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./AncDrugSet.vue?vue&type=template&id=a2705bc2&ts=true\"\nimport script from \"./AncDrugSet.vue?vue&type=script&lang=ts\"\nexport * from \"./AncDrugSet.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { Service } from \"./service\";\n\nexport class DrugService extends Service {\n    constructor() {\n        super()\n    }\n\n    \n    static getDrugs(params={} as Record<string, string | number>) {\n        return super.getJson('/drugs', params)\n    }\n}","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { find, isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface AncTreatmentDrugObject {\n    'id': number;\n    'drug_name': string;\n    'dose': string;\n    'duration': number;\n    'frequency': string;\n    'units': string;\n}\n\nexport const DRUG_FREQUENCIES: Record<string, number> = { \n    'Once a day (OD)' : 1,\n    'Twice a day (BD)': 2,\n    'Three a day (TDS)': 3,\n    'Four times a day (QID)' : 4,\n    'Five times a day (5X/D)' : 5,\n    'Six times a day (Q4HRS)' : 6,\n    'In the morning (QAM)' : 0.5,\n    'Once a week (QWK)' : 0.14,\n    'Once a month' : 0.03,\n    'Twice a month' : 0.071\n}\n\nexport class AncTreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 25, providerID)\n    }\n\n    ttvDrugObj() {\n        return {\n            'drug_inventory_id': 609,\n            'dose': 0.5,\n            'equivalent_daily_dose': 0.5,\n            'frequency': \"Once a day (od)\",\n            'start_date': this.date,\n            'auto_expire_date': this.date,\n            'instructions': \"Once a day\",\n            'units': \"ml\"\n        }\n    }\n\n    async updateTTvOrder() {\n        const dispensed = await this.dispenseTTV()\n        if (!isEmpty(dispensed)) {\n            const orderID = dispensed[0].order_id\n            return DrugOrderService.updateDispensationOrders([{'order_id': orderID, 'quantity' : 1}])\n        }\n        throw 'Unable to dispense'\n    }\n\n    dispenseTTV() {\n        return this.createOrders([this.ttvDrugObj()])\n    }\n\n    createOrders(orders: any) {\n        return DrugOrderService.create({\n            'drug_orders': orders,\n            'encounter_id': this.getEncounterID(),\n        })\n    }\n\n    async submitTreatment(drugs: AncTreatmentDrugObject[]) {\n        await this.createEncounter()\n        const orders = await this.createOrders(drugs.map(o => this.buildDrugOrderObj(o)))\n        const dispensation = new AppEncounterService(this.patientID, 54, this.providerID)\n        await dispensation.createEncounter()\n        drugs.forEach(o => {\n            const quantity: number = DRUG_FREQUENCIES[o.frequency] * o.duration\n            orders.forEach((order: any) => { \n                if (order.drug_inventory_id === o.id) {\n                    order.quantity = quantity\n                }\n            })\n        })\n        await DrugOrderService.updateDispensationOrders(orders)\n    }\n\n    buildDrugOrderObj(drug: AncTreatmentDrugObject) {\n        const startDate = new Date(this.date)\n        const expiryDate = startDate.setDate(startDate.getDate() + parseInt(`${drug.duration}`))\n        const dose: any = drug.dose || DRUG_FREQUENCIES[drug.frequency]\n        const dailyEquivalentDose =  parseFloat(dose) * DRUG_FREQUENCIES[drug.frequency] \n        return {\n            'drug_inventory_id': drug.id,\n            'dose': dose,\n            'equivalent_daily_dose': dailyEquivalentDose,\n            'frequency': drug.frequency,\n            'start_date': this.date,\n            'auto_expire_date': HisDate.toStandardHisFormat(new Date(expiryDate)),\n            'instructions': drug.drug_name + ':' + drug.dose + ' ' + drug.units + ' ' + drug.frequency + 'days',\n            'units': drug.units\n        }\n    }\n}","import { Service } from \"@/services/service\";\n\nexport interface AncDrugSetDrugs {\n    drug: number;\n    drug_name?: string;\n    quantity: number;\n    duration?: number;\n    frequency: string;\n}\n\nexport interface NewDrugSet {\n    id?: number;\n    datetime?: string;\n    name: string;\n    description: string;\n    drugs: AncDrugSetDrugs[];\n}\n\nexport class AncDrugSetService extends Service {\n    static saveDrugSet(drugSet: NewDrugSet) {\n        const data  = {...drugSet}\n        data['datetime'] = Service.getSessionDate()\n        return this.postJson('/drug_sets', drugSet)\n    }\n\n    static voidDrugSet(setID: number) {\n        return this.void(`/drug_sets/${setID}`, { date: this.getSessionDate()})\n    }\n\n    static async getDrugSets() {\n        const data = await this.getJson('drug_sets')\n        if (data) {\n            return Object.keys(data['set_names'])\n                .reduce((sets: Array<any>, setKey: string) => {\n                    const name = data['set_names'][setKey]\n                    const description = data['set_descriptions'][setKey]\n                    const drugs = data['drug_sets'][setKey]\n                    sets.push({\n                        id: parseInt(setKey),\n                        name,\n                        description,\n                        drugs: Object.keys(drugs).reduce(\n                            (a: any, k: string) => [\n                                ...a, { \n                                    'id': parseInt(k), ...drugs[k],\n                                    'drug_name': drugs[k].drug_name,\n                                    'duration': parseInt(drugs[k].duration),\n                                    'frequency': drugs[k].frequency,\n                                    'units': drugs[k].units,\n                                }], []\n                        )\n                    })\n                    return sets\n                }, [])\n        }\n        return []\n    }\n}"],"sourceRoot":""}