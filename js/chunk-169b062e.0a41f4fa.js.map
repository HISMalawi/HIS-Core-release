{"version":3,"sources":["webpack:///./src/apps/RADIOLOGY/services/radiology_examination_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue?00ab","webpack:///./src/apps/RADIOLOGY/services/radiology_internal_sections_service.ts","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue?d908","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/apps/RADIOLOGY/radiology_global_props.ts"],"names":["RadiologyExaminationService","AppEncounterService","constructor","patientID","providerID","super","id","getJson","getPatientExaminations","this","createOrder","params","postJson","printExamination","accessionNumber","service","PrintoutService","printLbl","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","mapToOption","listOptions","item","resolvePerson","computedForm","attr","isPlainObject","getGivenNameField","helpText","FieldType","TT_TEXT","computedValue","val","validation","Validation","isName","form","PersonService","searchGivenName","getFamilyNameField","searchFamilyName","getGenderField","customOptions","TT_SELECT","getDobConfig","includeHelpText","summaryLabel","minDate","estimateDateFromAge","maxDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","date","isEstimate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","summaryMapValue","v","f","home_region","dynamicHelpText","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","onClick","c","field","filtered","ok","alertConfirmation","address","LocationService","createAddress","getHomeTaField","config","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","getCurrentDistrictField","current_region","match","getCurrentTAfield","getCurrentVillageField","getCellNumberField","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","getFacilityLocationField","_","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","birthdate_estimated","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","getNationalID","npid","show","Service","getProgramName","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","RadiologyInternalSectionService","mixins","EncounterMixinVue","IonPage","examinationOptions","defaultExternalLocation","detailedExaminationOptions","watch","handler","listOfRadiologyTestsField","examinationField","detailedExaminationField","referralTypeField","internalReferralField","externalReferralField","payingField","paymentTypeField","receiptField","paymentAmountField","invoiceField","invoiceAmountField","immediate","getListOfRadiologyTests","concept_id","validateAmount","computedValues","order","encounterID","order_id","accession_number","tests","selectedTest","concept","buildValueCoded","beforeNext","getTestsOptions","selectedExamID","list_of_radiology_test","buildValueText","PersonFieldHelper","init","RADIOLOGY_GLOBAL_PROP","defaultReferralLocation","defaultValue","referral_type","referralSections","getInternalSections","s","some","toLowerCase","createInternalSection","listData","paying","payment_type","TT_NUMBER","receipt_number","buildValueNumber","invoice_number","isCondition","ignored","undefined","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village_id","GlobalPropertyService","DEFAULT_REFERRAL_LOCATION"],"mappings":"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","file":"js/chunk-169b062e.0a41f4fa.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { PrintoutService } from \"@/services/printout_service\"\n\nexport class RadiologyExaminationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 121, providerID) \n    }\n\n    \n    static getListOfRadiologyTests(id: string | number) {\n        return super.getJson('radiology_set', { id })\n    }\n    \n    getPatientExaminations() {\n        return AppEncounterService.getJson('radiology/examinations', {\n            'patient_id': this.patientID\n        })\n    }\n\n    createOrder(params: any) {\n        return AppEncounterService.postJson('orders/radiology', params)\n    }\n\n    printExamination(accessionNumber: string) {\n        const service = new PrintoutService()\n        return service.printLbl(`orders/radiology?accession_number=${accessionNumber}`)\n    }\n}\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            try {\n                obs = await this.resolveObs(params.computedData)\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Current Region of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'Current District of Residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'Current District of Residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'Current TA of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Current Village of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { Service } from \"@/services/service\"\n\nexport class RadiologyInternalSectionService extends Service {\n    constructor() {\n        super()\n    }\n\n    static getInternalSections() {\n        return super.getJson('internal_sections')\n    }\n\n    static createInternalSection(name: string) {\n        return super.postJson('internal_sections', { name })\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RadiologyExaminationService } from \"@/apps/RADIOLOGY/services/radiology_examination_service\";\nimport { RadiologyInternalSectionService } from \"@/apps/RADIOLOGY/services/radiology_internal_sections_service\";\nimport { isEmpty } from 'lodash';\nimport { alertConfirmation, toastDanger, toastWarning } from '@/utils/Alerts';\nimport PersonFieldHelper from '@/utils/HisFormHelpers/PersonFieldHelper';\nimport RADIOLOGY_GLOBAL_PROP from \"@/apps/RADIOLOGY/radiology_global_props\"\n;\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    components: {\n        IonPage,\n        HisStandardForm\n    },\n    data: () => ({\n        service: {} as any,\n        examinationOptions: [] as any,\n        defaultExternalLocation: '' as string,\n        detailedExaminationOptions: [] as any\n    }),\n    watch: {\n        ready: {\n            handler(ready: any) {\n                if (ready) {\n                    this.service = new RadiologyExaminationService(this.patientID, this.providerID)\n                    this.fields.push(this.listOfRadiologyTestsField())\n                    this.fields.push(this.examinationField())\n                    this.fields.push(this.detailedExaminationField())\n                    this.fields.push(this.referralTypeField())\n                    this.fields.push(this.internalReferralField())\n                    this.fields.push(this.externalReferralField())\n                    this.fields.push(this.payingField())\n                    this.fields.push(this.paymentTypeField())\n                    this.fields.push(this.receiptField())\n                    this.fields.push(this.paymentAmountField())\n                    this.fields.push(this.invoiceField())\n                    this.fields.push(this.invoiceAmountField())\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async getTestsOptions(id: string | number) {\n            return (await RadiologyExaminationService.getListOfRadiologyTests(id))\n                .map((e: any) => ({\n                    label: e.name,\n                    value: e.concept_id\n                }))\n        },\n        validateAmount(val: string) {\n            return val.match(/([0-9]+\\\\.[0-9])|Unknown$/i)\n                ? ['You must enter a decimal number']\n                : null\n        },\n        async onFinish(_: any, computedValues: any) {\n            await this.service.createEncounter()\n            const order = await this.service.createOrder({\n                'concept_id': computedValues['list_of_radiology_test']['concept'],\n                'encounter_id': this.service.encounterID,\n                'provider_id': this.providerID\n            })\n            const obs = (await this.resolveObs(computedValues)).map(obs => {\n                obs['order_id'] = order.order_id\n                return obs\n            })\n            await this.service.saveObservationList(obs)\n            this.service.printExamination(order.accession_number)\n            this.gotoPatientDashboard()\n        },\n        listOfRadiologyTestsField(): Field {\n            let tests = [] as any;\n            let selectedTest = -1 as number;\n            return {\n                id: \"list_of_radiology_test\",\n                helpText: \"Please select the type of examination\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        concept: v.value,\n                        obs: this.service.buildValueCoded('RADIOLOGY TEST', v.value)\n                    }\n                },\n                beforeNext: async (v: Option) => {\n                    if (selectedTest != v.value) {\n                        selectedTest = v.value as number\n                        this.examinationOptions = await this.getTestsOptions(v.value)\n                    }\n                    return true\n                },\n                options: async () => {\n                    if (isEmpty(tests)) {\n                        tests = await this.getTestsOptions('LIST OF RADIOLOGY TESTS')\n                    }\n                    return tests\n                }\n            }\n        },\n        examinationField() {\n            let selectedExamID = -1\n            return {\n                id: \"examination\",\n                helpText: \"Please select the examination\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('Examination', v.value)\n                    }\n                },\n                condition: () => !isEmpty(this.examinationOptions),\n                beforeNext: async (v: Option, f: any) => {\n                    if (selectedExamID != f.list_of_radiology_test.value) {\n                        selectedExamID = v.value as number\n                        this.detailedExaminationOptions = await this.getTestsOptions(selectedExamID)\n                    }\n                    return true\n                },\n                options:() => this.examinationOptions\n            }\n        },\n        detailedExaminationField() {\n            return {\n                id: \"detailed_examination\",\n                helpText: \"Please select the detailed examination\",\n                type: FieldType.TT_SELECT,\n                condition: () => !isEmpty(this.detailedExaminationOptions),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('Detailed examination', v.value),\n                    }\n                },\n            validation: (v: Option) => Validation.required(v),\n                options: () => this.detailedExaminationOptions\n            }\n        },\n        referralTypeField() {\n            return {\n                id: 'referral_type',\n                helpText: 'Please select the referral type',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('Source of referral', v.label)\n                    }\n                },\n                options: () => {\n                    return this.mapStrToOptions([\n                        'External', \n                        'Internal'\n                    ])\n                }\n            }\n        },\n        externalReferralField() {\n            const field: Field = PersonFieldHelper.getFacilityLocationField()\n            field.id = 'external_referral'\n            field.init = async () => {\n                this.defaultExternalLocation = await RADIOLOGY_GLOBAL_PROP.defaultReferralLocation()\n                return true\n            }\n            field.defaultValue = () => this.defaultExternalLocation\n            field.condition = (f: any) => f.referral_type.value === 'External'\n            field.computedValue = (v: Option) => {\n                return {\n                    obs: this.service.buildValueText('REFERRED FROM', v.label)\n                }\n            }\n            return field\n        },\n        internalReferralField() {\n            let referralSections = [] as Option[]\n            return {\n                id: \"referred_by\",\n                helpText: \"Referred from\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.referral_type.value === 'Internal',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('REFERRED FROM', v.label)\n                    }\n                },\n                options: async () => {\n                    if (isEmpty(referralSections)) {\n                        referralSections = (await RadiologyInternalSectionService.getInternalSections())\n                            .map((s: any) => ({\n                                value: s.id,\n                                label: `${s?.name}`.toUpperCase()\n                            }))\n                    }\n                    return referralSections\n                },\n                config: {\n                    showKeyboard: true,\n                    footerBtns: [\n                        {\n                            name: 'Add Referral',\n                            slot: 'end',\n                            color: 'success',\n                            onClick: async (f: any, c: any, field: any) => {\n                                if (typeof field.filter != 'string' || field.filter.length < 3) {\n                                    return toastWarning(`Please enter a valid name`)\n                                }\n                                if (field.filtered.some((i: Option) => i.label.toLowerCase() === field.filter.toLowerCase())) {\n                                    return toastWarning(`Can't add already existing referral location`)\n                                }\n                                if ((await alertConfirmation(`Do you want to add referral location?`))) {\n                                    const data = await RadiologyInternalSectionService.createInternalSection(field.filter.toUpperCase())\n                                    if (data) {\n                                        field.filter = data.name\n                                        field.listData = [{label: data.name, value: data.id}, ...field.listData]\n                                    } else {\n                                        toastDanger(`Unable to add ${field.filter}`)\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        },\n        payingField() {\n            return {\n                id: \"paying\",\n                helpText: \"Is this a paying patient?\",\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('PAYING', v.value) \n                    }\n                },\n                validation: (v: Option) => Validation.required(v),\n                options: () => {\n                    return this.yesNoOptions()\n                }\n            }\n        },\n        paymentTypeField() {\n            return {\n                id: \"payment_type\",\n                helpText: \"Select payment method\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.paying.value === 'Yes',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('PAYMENT TYPE', v.value)\n                    }\n                },\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Cash',\n                        'Invoice'\n                    ])\n                }\n            }\n        },\n        receiptField() {\n            return  {\n                id: \"receipt_number\",\n                helpText: \"Enter receipt number\",\n                type: FieldType.TT_TEXT,\n                condition: (f: any) => f.payment_type.value === 'Cash',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('RECEIPT NUMBER', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        },\n        invoiceField() {\n            return {\n                id: \"invoice_number\",\n                helpText: \"Enter invoice number\",\n                type: FieldType.TT_TEXT,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('INVOICE NUMBER', v.value)\n                    }\n                },\n                condition: (f: any) => f.payment_type.value === 'Invoice',\n                validation: (v: Option) => Validation.required(v)\n            }\n        },\n        paymentAmountField() {\n            return {\n                id: \"payment_amount\",\n                helpText: \"Enter payment amount\",\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.receipt_number.value,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueNumber('PAYMENT AMOUNT', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        },\n        invoiceAmountField() {\n            return {\n                id: \"invoice_amount\",\n                helpText: \"Enter invoice amount\",\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.invoice_number.value,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueNumber('INVOICE AMOUNT', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        }\n    }\n})\n","import { render } from \"./RadiologyExaminations.vue?vue&type=template&id=33aad54a&ts=true\"\nimport script from \"./RadiologyExaminations.vue?vue&type=script&lang=ts\"\nexport * from \"./RadiologyExaminations.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","import { GlobalPropertyService } from \"@/services/global_property_service\"\n\nexport enum RADIOLOGY_GLOBAL_PROP {\n    DEFAULT_REFERRAL_LOCATION = 'default.referral.location'\n}\n\nexport default {\n    defaultReferralLocation: () => GlobalPropertyService.get(RADIOLOGY_GLOBAL_PROP.DEFAULT_REFERRAL_LOCATION)\n}"],"sourceRoot":""}