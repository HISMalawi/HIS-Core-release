{"version":3,"sources":["webpack:///./src/apps/ART/services/htn_service.ts","webpack:///./src/apps/ART/services/consultation_service.ts","webpack:///./src/services/regimen_service.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/services/prescription_service.ts"],"names":["HTN_SESSION_KEY","BPManagementService","AppEncounterService","constructor","patientID","providerID","super","sbp","dbp","bpTrail","firstRecentGrade","secondRecentGrade","Object","values","sort","a","b","date","map","bp","this","getBpGrade","getSystolicBp","ObservationService","getFirstValueNumber","getDiastolicBp","query","getFirstValueCoded","getJson","drugID","pills","postJson","state","getDrugs","HCZ","drugs","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","adherence","notes","Enalapril","remaining","Amlodipine","Atenolol","ConsultationService","getFamilyPlanningMethods","obs","getFirstObs","value_text","match","obsInValidPeriod","getDrugSideEffects","getProgramID","getClient","req","id","isEmpty","lastScreened","duration","dayjs","diff","secondCheck","getFirstValueText","isTL","value_coded","tlObs","fpObs","uniqueDrugs","forEach","drug","drug_inventory_id","familyPlanningMethods","label","familyPlanningLogic","data","value","disabled","RegimenService","Service","patientId","getSessionDate","DrugOrderService","orders","dispensations","order","pageSize","params","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","offlineID","patient","fields","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","ProgramService","current_district","current_village","current_traditional_authority","resolveObs","computedData","status","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","error","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","usernameA","usernameB","p","names","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","AdverseEffectsCategories","PrescriptionService","nextVisitInterval","fastTrack","regimenExtras","fastTrackMedications","hangingPills","medicationOrders","treatmentState","contraindications","sideEffects","tptPrescriptionCount","lastSideEffectDate","setNextVisitInterval","getHangingPills","getMedicationOrders","getCachedConceptName","getTptPrescriptionCount","getLastSideEffectDate","getContraindications","getSideEffects","getRegimenExtras","getPatientRegimens","getRegimens","getARVs","getCustomIngridients","getFastTrackMedications","getTreatmentState","isFastTrack","medicationOrdersAvailable","shouldPrescribeArvs","arvs","getCachedConceptID","shouldPrescribeExtras","extras","getConceptsByCategory","extrasAvailable","concept_id","getRegimenStarterpack","regimenCode","patientWeight","regimen","contraindication","getConceptID","getObs","o","toStandardHisFormat","obs_datetime","concept","drugInduced","value_drug","res","count","yes","meds","getAll","value_numeric","drug_order","getLastDrugsReceived","withDosages","dosage","getDrugDosages","drug_id","units","am","noon","pm","frequency","findAndGroupDrugSideEffects","allSideEffects","calculatePillsPerDay","parseFloat","estimatePackSize","pillsPerDay","packSize","packs","roundedPacks","Math","round","calculateDosage","morningTabs","eveningTabs","dose","calculateEquivalentDosage","calculateDateFromInterval","dateObj","Date","setDate","getDate","getDrugPackSize","pack_size","barcodes","tabs","getInstructions","toOrderObj","reason","drugOrders","create","encounterID","response","saveValueTextObs","reasonForSwitch"],"mappings":"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","file":"js/chunk-3c19eeed.293e75c0.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ObservationService } from \"@/services/observation_service\"\n\nexport enum HTN_SESSION_KEY {\n  Prescription = \"htnPrescription\"\n}\n\nexport class BPManagementService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n      super(patientID, 48, providerID) //TODO: Use encounter type reference name'\n    }\n\n    static getBpGrade(sbp: number, dbp: number) {\n      if ((sbp < 140) && (dbp < 90)) {\n        return \"normal\"\n      }\n      else if ((sbp >= 140 && sbp < 160) || (dbp >= 100 && dbp < 110)) {\n        return \"grade 1\"\n      }\n      else if ((sbp >= 180 && dbp > 110) || sbp >= 180) {\n        return \"grade 3\"\n      }\n      else if ((sbp >= 160 && sbp < 180) || (dbp >= 110)) {\n        return \"grade 2\"\n      }\n      return 'N/A'\n    }\n\n    /**\n     * BP is normointensive if two most recent consecutive tests are normal\n     * @param bpTrail \n     * @returns\n    */\n    static isBpNormotensive(bpTrail: any) {\n      const [ firstRecentGrade, secondRecentGrade ] = Object.values(bpTrail)\n        .sort((a: any, b: any) => a.date < b.date ? 1 : 0)\n        .map((bp: any) => this.getBpGrade(bp.sbp, bp.dbp))\n      return firstRecentGrade === 'normal' && secondRecentGrade === 'normal'\n    }\n\n    getSystolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Systolic blood pressure')\n    }\n\n    getDiastolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Diastolic blood pressure')\n    }\n\n    async onBpDrugs() {\n      const query = await ObservationService.getFirstValueCoded(this.patientID, 'Treatment status')\n      return query ? query === 'Yes' : false\n    }\n  \n    async getBPTrail() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/bp_trail`);\n    }\n    async getCurrentDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/current_bp_drugs`);\n    }\n    async getLastDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/last_bp_drugs_dispensation`);\n    }\n    async getAdherence(drugID: number, pills: number) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/remaining_bp_drugs`, {\n        'drug_id': drugID,\n        pills: pills\n      });\n    }\n    async enrollPatient(state: any) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/update_or_create_htn_state`, state);\n    }\n    static htnDrugReferences() {\n      return [\n        { \n          'drug_id': 275,\n          'drug_name': \"HCZ (25mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 942,\n          'drug_name': \"Enalapril (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 943,\n          'drug_name': \"Enalapril (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 558,\n          'drug_name': \"Amlodipine (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 559,\n          'drug_name': \"Amlodipine (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 117,\n          'drug_name': \"Atenolol (50mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 11,\n          'drug_name': \"Atenolol(100mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        }\n      ]\n    }\n    getDrugs() {\n        return {\n        HCZ: {\n          drugs: [\n            {\n              drugName: \"HCZ (25mg tablet)\",\n              drugID: 275,\n              amount: '25mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Enalapril: {\n          drugs: [\n            {\n              drugName: \"Enalapril (5mg tablet)\",\n              drugID: 942,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Enalapril (10mg tablet)\",\n              drugID: 943,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Amlodipine: {\n          drugs: [\n            {\n              drugName: \"Amlodipine (5mg tablet)\",\n              drugID: 558,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Amlodipine (10mg tablet)\",\n              drugID: 559,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Atenolol: {\n          drugs: [\n            {\n              drugName: \"Atenolol (50mg tablet)\",\n              drugID: 117,\n              amount: '50mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Atenolol(100mg tablet)\",\n              drugID: 11,\n              amount: '100mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n      }\n    }\n}","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { ObservationService } from \"@/services/observation_service\";\nimport dayjs from \"dayjs\";\nimport { isEmpty } from \"lodash\";\nimport { DrugOrderService } from \"@/services/drug_order_service\"\n\nexport class ConsultationService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 53, providerID);\n  }\n  getFamilyPlanningMethods() {\n    return [\n      \"ORAL CONTRACEPTIVE PILLS\",\n      \"DEPO-PROVERA\",\n      \"INTRAUTERINE CONTRACEPTION\",\n      \"CONTRACEPTIVE IMPLANT\",\n      \"MALE CONDOMS\",\n      \"FEMALE CONDOMS\",\n      \"TUBAL LIGATION\",\n      \"NONE\",\n    ];\n  }\n\n  async getTptTreatmentStatus() {\n    return AppEncounterService.getJson(`/patients/${this.patientID}/tpt_status`)\n  }\n\n  async patientHitMenopause() {\n    const obs = await ObservationService.getFirstObs(\n      this.patientID, 'Why does the woman not use birth control', \n    )\n    return obs && typeof obs?.value_text === 'string'\n      ? (obs.value_text.match(/menopause/i) ? true : false)\n      && AppEncounterService.obsInValidPeriod(obs)\n      : false\n  }\n\n  async hasTreatmentHistoryObs() {\n    const obs = await ObservationService.getFirstObs(this.patientID, 'Previous TB treatment history')\n    return obs && AppEncounterService.obsInValidPeriod(obs)\n  }\n\n  getDrugSideEffects() {\n    return AppEncounterService.getJson(`programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/medication_side_effects`, { \n      date: this.date \n    })\n  }\n\n  getClient() {\n    return AppEncounterService.getFirstValueCoded(this.patientID, 'Patient present');\n  }\n\n  async clientDueForCxCa() {\n    const req: any = await AppEncounterService.getJson(`last_cxca_screening_details`, {\n      id: this.patientID, date: this.date\n    })\n    if (!isEmpty(req)) {\n      const lastScreened = req['date_screened']\n      const duration = dayjs(this.date).diff(lastScreened, 'years')\n      return duration >= 1\n    }\n    return true\n  }\nasync clientHasHadAHysterectomy() {\n    const req: any = await AppEncounterService.getFirstValueCoded(this.patientID, 'Reason for NOT offering CxCa'); \n    if(req === \"Hysterectomy\") {\n      return true\n    }\n    const secondCheck: any = await AppEncounterService.getFirstValueText(this.patientID, 'Treatment'); \n    if(secondCheck === \"Hysterectomy\") {\n      return true\n    }\n    return false\n  }\n  async getTLObs() {\n    const isTL = ((obs: any) => obs && obs.value_coded === 'Tubal ligation' && AppEncounterService.obsInValidPeriod(obs))\n    const tlObs = await AppEncounterService.getFirstObs(this.patientID, 'Family planning')\n    if (isTL(tlObs)) {\n      return isTL(tlObs)\n    } else  {\n      const fpObs = await AppEncounterService.getFirstObs(this.patientID, 'Method of family planning')\n      return isTL(fpObs)\n    }\n  }\n  async getPreviousDrugs() {\n\n    const drugs = await AppEncounterService.getJson(\n      `patients/${this.patientID}/drugs_received`\n    )\n\n    if (!drugs) return\n\n    const uniqueDrugs = {} as any\n    drugs.forEach((drug: DrugInterface) => {\n      uniqueDrugs[drug.drug_inventory_id] = drug;\n    })\n    return uniqueDrugs;\n  }\n  familyPlanningMethods(label: string, values: any[]) {\n    const familyPlanningLogic: any = {\n      \"ORAL CONTRACEPTIVE PILLS\": {\n        \"DEPO-PROVERA\": 'N', \"INTRAUTERINE CONTRACEPTION\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"DEPO-PROVERA\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"INTRAUTERINE CONTRACEPTION\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"INTRAUTERINE CONTRACEPTION\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"CONTRACEPTIVE IMPLANT\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"MALE CONDOMS\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'Y', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'Y',\n        'CONTRACEPTIVE IMPLANT': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'Y', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'Y'\n      },\n      \"FEMALE CONDOMS\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'Y', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'Y',\n        'CONTRACEPTIVE IMPLANT': 'Y', 'MALE CONDOMS': 'Y', 'RYTHM METHOD': 'Y', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'Y'\n      },\n      \"RYTHM METHOD\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'CONTRACEPTIVE IMPLANT': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"TUBAL LIGATION\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'N', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'N', 'RYTHM METHOD': 'N',\n        'VASECTOMY': 'N',\n      },\n      \"VASECTOMY\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'Y', 'RYTHM METHOD': 'N',\n        'TUBAL LIGATION': 'N'\n      },\n      \"NONE\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'N', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'N', 'RYTHM METHOD': 'N',\n        'TUBAL LIGATION': 'N'\n      }\n    }\n    const selected = familyPlanningLogic[label];\n    return values.map(data => {\n      if (selected[data.label] === \"N\") {\n        return {\n          label: data.label,\n          value: data.value,\n          isChecked: false,\n          disabled: true,\n        }\n      }\n      else {\n        return {\n          label: data.label,\n          value: data.value,\n          isChecked: data.isChecked,\n          disabled: false,\n        }\n      }\n\n    })\n  }\n\n}","import { Service } from \"./service\";\n\nexport class RegimenService extends Service {\n    constructor() {\n        super()\n    } \n\n    static getAllArvRegimens() {\n        return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)\n    }\n\n    static getRegimens(patientId: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {'patient_id': patientId})\n    }\n\n    static getCustomIngridients() {\n        return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)\n    }\n\n    static getCurrentRegimen(patientId: number, date=this.getSessionDate()) {\n        return this.getJson(`programs/${this.getProgramID()}/${patientId}`, {date})   \n    }\n}","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            let created = false\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getARVs() {\n        return RegimenService.getJson('arv_drugs')\n    }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = await AppEncounterService.getAll(this.patientID, 'Pills brought')\n        if (pills) {\n            this.hangingPills = pills.filter((o: any) => o.value_numeric >= 1 && o.order)\n                                    .map((o: any) => o.order.drug_order.drug_inventory_id)\n        }\n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / packSize\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n"],"sourceRoot":""}