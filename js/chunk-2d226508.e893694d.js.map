{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?c005","webpack:///./src/apps/CxCa/services/CxCaAssessmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?ba10"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","AssessmentService","patientID","providerID","hivStatus","artStatus","arvNumber","arvStartDate","this","match","AppEncounterService","getJson","res","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","assessment","obs","showHIVQuestions","offerCxCa","watch","patient","handler","loadArtStatus","getHivStatus","setOfferCxCa","getFields","deep","methods","formData","computed","createEncounter","encounter","toastWarning","vals","Object","keys","forEach","element","push","Promise","all","saveObservationList","toastSuccess","nextTask","getFirstValueCoded","buildValueCoded","hasHIVStatus","enterPreviousCxCaData","everHadCxCa","ever_had_cxca","value","resultsAvailable","results_available","getFacilities","filter","getReasonsForNoCxcaOptions","ConceptService","getConceptsByCategory","map","c","label","name","other","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","computedValue","condition","generateDateFields","hiv_status","minDate","getBirthdate","maxDate","getDate","estimation","allowUnknown","computeValue","date","isEstimate","tag","buildValueDate","reason_for_visit","yesNoOptions","_","config","showKeyboard","isFilterDataViaApi","buildValueText","offer_CxCa","__exports__"],"mappings":"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","file":"js/chunk-2d226508.e893694d.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class AssessmentService extends AppEncounterService {\n    \n    hivStatus: string;\n    artStatus: string;\n    arvNumber: string;\n    arvStartDate: string;\n    constructor(patientID: number, providerID: number){\n        super(patientID, 181, providerID) //TODO: Use encounter type reference name'\n        this.hivStatus = ''\n        this.artStatus = ''\n        this.arvNumber = ''\n        this.arvStartDate = ''\n    }\n\n    getHivStatus() {\n        return this.hivStatus\n    }\n\n    getArtStatus() {\n        return this.artStatus\n    }\n\n    getArvNumber() {\n        return this.arvNumber\n    } \n\n    getArvStartDate() {\n        return this.arvStartDate\n    }\n\n    isHivPositive() {\n        return this.hivStatus.match(/positive/i) ? true : false\n    }\n\n    async loadArtStatus() {\n        const res = await AppEncounterService.getJson(`programs/12/patients/${this.patientID}/art_hiv_status`)\n        if (res) {\n            this.hivStatus = res['hiv_status'] || this.hivStatus\n            this.artStatus = res['art_status'] || ''\n            this.arvNumber = res['arv_number'] || ''\n            this.arvStartDate = res['arv_start_date'] || ''\n        }\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { AssessmentService } from \"@/apps/CxCa/services/CxCaAssessmentService\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { ConceptService } from \"@/services/concept_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    assessment: {} as any,\n    obs: [] as any,\n    showHIVQuestions: true,\n    offerCxCa: false,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.assessment = new AssessmentService(\n          this.patientID,\n          this.providerID\n        );\n        await this.assessment.loadArtStatus();\n        if (this.assessment.getHivStatus() !== '') {\n          this.showHIVQuestions = false;\n        }\n        await this.setOfferCxCa();\n        this.fields = await this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computed: any) {\n      \n      const encounter = await this.assessment.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...this.obs, ...vals]);\n\n      const obs = await this.assessment.saveObservationList(data);\n\n      if (!obs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      this.nextTask();\n    },\n    async setOfferCxCa() {\n      const data = await this.assessment.getFirstValueCoded(\"Offer CxCa\");\n      this.offerCxCa = data && data === \"Yes\";\n      if (!this.offerCxCa) {\n        this.obs.push(this.assessment.buildValueCoded(\"Ever had CxCa\", \"No\"));\n      }\n      return true;\n    },\n    hasHIVStatus() {\n      return this.assessment.getHivStatus !== \"\"\n    },\n    enterPreviousCxCaData(formData: any) {\n      const everHadCxCa = formData.ever_had_cxca.value === \"Yes\";\n      const resultsAvailable = formData.results_available.value === \"Yes\";\n      return everHadCxCa && resultsAvailable;\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    getReasonsForNoCxcaOptions() {\n      return ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n        .map((c: any) => ({\n          label: c.name,\n          value: c.name,\n          other: {\n            c\n          }\n        }))\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"reason_for_visit\",\n          helpText: \"Reason for visit\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Initial screening\",\n              value: \"Initial screening\",\n            },\n            {\n              label: \"Postponed treatmment\",\n              value: \"Postponed treatment\",\n            },\n            {\n              label: \"One year subsequent check-up after treatment\",\n              value: \"One year subsequent check-up after treatment\",\n            },\n            {\n              label: \"Subsequent screening\",\n              value: \"Subsequent screening\",\n            },\n            {\n              label: \"Problem visit after treatment\",\n              value: \"Problem visit after treatment\",\n            },\n            {\n              label: \"Referral\",\n              value: \"Referral\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for visit\", value.value)\n          })\n        },\n        {\n          id: \"hiv_status\",\n          helpText: \"HIV status\",\n          type: FieldType.TT_SELECT,\n          condition: () => this.showHIVQuestions,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Positive on ART\",\n              value: \"Positive on ART\",\n            },\n            {\n              label: \"Positive Not on ART\",\n              value: \"Positive Not on ART\",\n            },\n            {\n              label: \"Negative\",\n              value: \"Negative\",\n            },\n            {\n              label: \"Never tested\",\n              value: \"Never tested\",\n            },\n            {\n              label: \"Prefers Not to disclose\",\n              value: \"Undisclosed\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"HIV status\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"hiv_test_date\",\n            helpText: \"HIV test result date\",\n            required: true,\n            condition: (formData: any) =>\n              formData.hiv_status.value.match(/Negative|ART/i),\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            estimation: {\n              allowUnknown: false,\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"HIV test date\", date),\n              };\n            },\n          },\n          this.assessment.getDate()\n        ),\n        {\n          id: \"ever_had_cxca\",\n          helpText: \"Ever had CxCa screening\",\n          type: FieldType.TT_SELECT,\n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\",\n          options: () => this.yesNoOptions(),\n          validation: (val: any) => Validation.required(val),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Ever had CxCa\", value.value)\n          })\n        },\n        {\n          id: \"results_available\",\n          helpText: \"Results available?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          \n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\" && formData.ever_had_cxca.value !== \"No\",\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa test results\", value.value)\n          })\n        },\n        {\n          id: \"location\",\n          helpText: \"CxCa screening location\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (_: any, filter = \"\") => this.getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueText(\"Previous CxCa location\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"cxca_date\",\n            helpText: \"Previous CxCa test\",\n            required: true,\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            estimation: {\n              allowUnknown: false,\n            },\n            condition: (formData: any) => this.enterPreviousCxCaData(formData),\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"cxca test date\", date),\n              };\n            },\n          },\n          this.assessment.getDate()\n        ),\n        {\n          id: \"previous_screening_method\",\n          helpText: \"Previous screening method\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Previous CxCa screening method\", value.value)\n          })\n        },\n        {\n          id: \"offer_CxCa\",\n          helpText: \"Offer CxCa screening today\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Offer CxCa\", value.value)\n          })\n        },\n        {\n          id: \"screening_method\",\n          helpText: \"Screening method being offered\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"Yes\",\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa screening method\", value.value)\n          }),\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa screening\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"No\",\n          options: () => this.getReasonsForNoCxcaOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for NOT offering CxCa\", value.value)\n          }),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTest.vue?vue&type=template&id=52f44ce7&ts=true\"\nimport script from \"./CxCaTest.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTest.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}