{"version":3,"sources":["webpack:///./src/utils/ReportDateSelectionPrompt.ts","webpack:///./src/apps/CxCa/views/reports/pepfar/CXCA_TX_Report.vue?9fbf","webpack:///./src/apps/CxCa/views/reports/pepfar/CXCA_TX_Report.vue","webpack:///./src/apps/CxCa/views/reports/pepfar/CXCA_TX_Report.vue?2f65","webpack:///./src/apps/CxCa/services/reports/cxca_report_service.ts"],"names":["DatePeriodInputType","HtsReportPreference","ReportPreferences","reactive","datePeriodInputType","localStorage","getItem","PERIOD_INPUT_TYPE","MULTI_FIELD_DATE","DateSelection","params","MultiStepPopupForm","generateDateFields","id","helpText","required","minDate","maxDate","Service","getSessionDate","condition","estimation","allowUnknown","computeValue","date","_","c","start_date","proxyID","type","FieldType","TT_FULL_DATE","validation","v","Date","value","toDate","computedValue","SINGLE_DATE_INPUT_FIELD","defaultValue","f","label","TT_DATE_PICKER","CALENDAR_FIELD","StandardValidations","config","infoItems","end_date","persistInfoItems","onFinish","async","modalController","dismiss","period","e","toastDanger","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_loading","_resolveComponent","_component_v2Datatable","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","isLoading","message","title","subtitle","columns","columnData","reportData","rowsPerPage","onConfigure","configure","csvQuarter","onRefresh","generate","ref","startDate","endDate","defineComponent","components","IonPage","IonLoading","v2Datatable","setup","drilldown","patientIdentifiers","create","component","DrillPatientIds","backdropDismiss","cssClass","componentProps","getTop","then","present","span","thRowspan","exportable","thColspan","secondaryLabel","data","first_time_screened","cryotherapy","length","tdClick","column","age_group","thermocoagulation","leep","post_treatment_followup","rescreened_after_prev_visit","toastWarning","report","CxCaReportService","getClinicReport","slice","map","index","gender","sDate","eDate","periodstr","onMounted","__exports__","constructor","super","this","programID","getProgramID","getPepfarReport","reportName","getReport","getMohReport","getDateIntervalPeriod","HisDate","toStandardHisDisplayFormat","setStartDate","setEndDate","getReportPeriod","url","getJson","buildRequest","payload","minDuration","quarters","year","getCurrentYear","i","push","name","start","end"],"mappings":"kHAAA,sCAWYA,EAMAC,EAjBZ,6GAWA,SAAYD,GACRA,8CACAA,+BACAA,iDAHJ,CAAYA,MAAmB,KAM/B,SAAYC,GACRA,qDADJ,CAAYA,MAAmB,KAIxB,MAAMC,EAAoBC,sBAAS,CACtCC,oBAAqBC,aAAaC,QAAQL,EAAoBM,oBAAsBP,EAAoBQ,mBA4BtG,SAAUC,EAAcC,GAC1BC,eAAmB,IACZC,eAAmB,CAClBC,GAAI,aACJC,SAAU,QACVC,UAAU,EACVC,QAAS,KAAY,OAANN,QAAM,IAANA,OAAM,EAANA,EAAQM,UAAW,GAClCC,QAAS,KAAY,OAANP,QAAM,IAANA,OAAM,EAANA,EAAQO,UAAWC,OAAQC,iBAC1CC,UAAW,IAAOlB,EAAkBE,sBAAwBJ,EAAoBQ,iBAChFa,WAAY,CACRC,cAAc,GAElBC,aAAeC,GAAiBA,OAEjCZ,eAAmB,CAClBC,GAAI,WACJC,SAAU,MACVC,UAAU,EACVC,QAAS,CAACS,EAAQC,IAAWA,EAAEC,WAC/BV,QAAS,KAAY,OAANP,QAAM,IAANA,OAAM,EAANA,EAAQO,UAAWC,OAAQC,iBAC1CC,UAAW,IAAOlB,EAAkBE,sBAAwBJ,EAAoBQ,iBAChFa,WAAY,CACRC,cAAc,GAElBC,aAAeC,GAAiBA,IAEpC,CACIX,GAAI,iBACJe,QAAS,aACTd,SAAU,aACVe,KAAMC,OAAUC,aAChBC,WAAaC,IACT,IAAKA,EAAG,MAAO,CAAC,oBAEhB,MAAMhB,EAAUP,EAAOO,SAAWC,OAAQC,iBAC1C,OAAIT,EAAOM,SAAW,IAAIkB,KAAKD,EAAEE,OAAS,IAAID,KAAKxB,EAAOM,SAC/C,CAAC,GAAGoB,eAAO,GAAGH,EAAEE,uCAAyCC,eAAO1B,EAAOM,YAE9EC,GAAW,IAAIiB,KAAKD,EAAEE,OAAS,IAAID,KAAKjB,GACjC,CAAC,GAAGmB,eAAO,GAAGH,EAAEE,sCAAwCC,eAAOnB,MAEnE,MAEXoB,cAAgBJ,GAAcA,EAAEE,MAChCf,UAAW,IAAMlB,EAAkBE,sBAAwBJ,EAAoBsC,yBAEnF,CACIzB,GAAI,eACJe,QAAS,WACTd,SAAU,WACVe,KAAMC,OAAUC,aAChBQ,aAAeC,GAAWA,EAAEb,WAAWQ,MACvCH,WAAY,CAACC,EAAWO,KACpB,IAAKP,EAAG,MAAO,CAAC,oBAEhB,MAAMhB,EAAUP,EAAOO,SAAWC,OAAQC,iBAC1C,OAAIqB,EAAEb,WAAWQ,OAAS,IAAID,KAAKD,EAAEE,OAAS,IAAID,KAAKM,EAAEb,WAAWQ,OACzD,CAAC,GAAGC,eAAO,GAAGH,EAAEE,uCAAyCC,eAAOI,EAAEb,WAAWQ,UAEpFlB,GAAW,IAAIiB,KAAKD,EAAEE,OAAS,IAAID,KAAKjB,GACjC,CAAC,GAAGmB,eAAO,GAAGH,EAAEE,sCAAwCC,eAAOnB,MAEnE,MAEXoB,cAAgBJ,GAAcA,EAAEQ,MAChCrB,UAAW,IAAMlB,EAAkBE,sBAAwBJ,EAAoBsC,yBAEnF,CACIzB,GAAI,sBACJe,QAAS,aACTd,SAAU,aACVe,KAAMC,OAAUY,eAChBL,cAAgBJ,GAAcA,EAC9Bb,UAAW,IAAMlB,EAAkBE,sBAAwBJ,EAAoB2C,eAC/EX,WAAaC,GAAcW,OAAoB7B,SAASkB,GACxDY,OAAQ,CACJ7B,QAAS,IAAMN,EAAOM,SAAW,KACjCC,QAAS,IAAMP,EAAOO,SAAWC,OAAQC,iBACzC2B,UAAW,CAACtB,EAAcgB,IACf,CACH,CAAEC,MAAO,aAAcN,MAAOC,eAAOZ,IAAS,KAC9C,CAAEiB,MAAO,WAAYN,MAAOC,eAAOI,EAAEO,WAAa,MAG1DC,kBAAkB,IAG1B,CACInC,GAAI,oBACJe,QAAS,WACTd,SAAU,WACVe,KAAMC,OAAUY,eAChBV,WAAaC,GAAcW,OAAoB7B,SAASkB,GACxDM,aAAeC,GAAWA,EAAEb,WAAWQ,MACvCE,cAAgBJ,GAAcA,EAC9Bb,UAAW,IAAMlB,EAAkBE,sBAAwBJ,EAAoB2C,eAC/EE,OAAQ,CACJ7B,QAAUwB,GAAWA,EAAEb,WAAWQ,MAClClB,QAAS,IAAMP,EAAOO,SAAWC,OAAQC,iBACzC2B,UAAW,CAACtB,EAAcgB,IACf,CACH,CAAEC,MAAO,aAAcN,MAAOC,eAAOI,EAAEb,aAAe,KACtD,CAAEc,MAAO,WAAYN,MAAOC,eAAOZ,KAG3CwB,kBAAkB,KAI9B,CACIC,SAAUC,MAAOV,EAAQd,KACrByB,QAAgBC,UAChB,IACI,MAAMC,EAAS,GAAGjB,eAAOV,EAAEC,kBAAkBS,eAAOV,EAAEqB,YACtDrC,EAAOuC,SAASvB,EAAEC,WAAYD,EAAEqB,SAAUM,GAC5C,MAAOC,GACLC,eAAY,+B,yDCpKtB,SAAUC,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAAyBC,8BAAkB,eAC3CC,EAAyBD,8BAAkB,eAC3CE,EAAsBF,8BAAkB,YAE9C,OAAQG,yBAAcC,yBAAaF,EAAqB,KAAM,CAC5DG,QAASC,qBAAS,IAAM,CACtBC,yBAAaR,EAAwB,CACnC,UAAWN,EAAKe,UAChBC,QAAS,kBACR,KAAM,EAAG,CAAC,YACbF,yBAAaN,EAAwB,CACnCS,MAAO,iBACPC,SAAUlB,EAAKJ,OACfuB,QAASnB,EAAKmB,QACdC,WAAYpB,EAAKqB,WACjBC,YAAa,GACbC,YAAavB,EAAKwB,UAClBC,WAAYzB,EAAKyB,WACjBC,UAAW,IAAM1B,EAAK2B,YACrB,KAAM,EAAG,CAAC,WAAY,UAAW,aAAc,cAAe,aAAc,gBAEjF3D,EAAG,I,wFCbP,MAAMqD,EAAaO,iBAAS,IACtBC,EAAYD,iBAAI,IAChBE,EAAUF,iBAAI,IACdhC,EAASgC,iBAAI,IACbb,EAAYa,kBAAI,GAChBH,EAAaG,iBAAI,IACRG,mCAAgB,CAC3BC,WAAY,CACRC,eACAC,kBACAC,oBAEJC,QACI,MAAMC,EAAY5C,MAAOwB,EAAeqB,YAC7B5C,QAAgB6C,OAAO,CAC1BC,UAAWC,OACXC,iBAAiB,EACjBC,SAAU,cACVC,eAAgB,CACZ3B,QACAC,SAAUtB,EACV0C,qBACA9C,SAAU,IAAME,QAAgBmD,SAASC,KAAKtE,GAAKA,GAAKkB,QAAgBC,eAE5EoD,WAKF5B,EAAsC,CACxC,CACI,CACInC,MAAO,IACP4C,IAAK,QACLoB,KAAM,CACFC,UAAW,IAGnB,CACIjE,MAAO,YACP4C,IAAK,YACLoB,KAAM,CACFC,UAAW,IAGnB,CACIjE,MAAO,SACP4C,IAAK,SACLsB,YAAY,EACZF,KAAM,CACFC,UAAW,IAGnB,CACIjE,MAAO,oBACP4C,IAAK,GACLoB,KAAM,CACFG,UAAW,IAGnB,CACInE,MAAO,qCACP4C,IAAK,GACLoB,KAAM,CACFG,UAAW,IAGnB,CACInE,MAAO,2BACP4C,IAAK,GACLoB,KAAM,CACFG,UAAW,KAIvB,CACI,CACInE,MAAO,cACP4C,IAAK,kCACLwB,eAAgB,6BAChB1E,MAAQ2E,GAAcA,EAAKC,oBAAoBC,YAAYC,OAC3DC,QAAS,EAAGC,SAAQL,UAAkChB,EAClD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKC,oBAAoBC,cAG/E,CACIvE,MAAO,oBACP4C,IAAK,wCACLwB,eAAiB,wCACjB1E,MAAQ2E,GAAcA,EAAKC,oBAAoBM,kBAAkBJ,OACjEC,QAAS,EAAGC,SAAOL,UAAkChB,EACjD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKC,oBAAoBM,oBAG/E,CACI5E,MAAO,OACP4C,IAAK,2BACLwB,eAAgB,qBAChB1E,MAAQ2E,GAAcA,EAAKC,oBAAoBO,KAAKL,OACpDC,QAAS,EAAGC,SAAQL,UAAkChB,EAClD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKC,oBAAoBO,OAG/E,CACI7E,MAAO,cACP4C,IAAK,sCACLwB,eAAgB,uCAChB1E,MAAQ2E,GAAcA,EAAKS,wBAAwBP,YAAYC,OAC/DC,QAAS,EAAEC,SAAQL,UAAiChB,EAChD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKS,wBAAwBP,cAGnF,CACIvE,MAAO,oBACP4C,IAAK,4CACLwB,eAAgB,8CAChB1E,MAAQ2E,GAAcA,EAAKS,wBAAwBF,kBAAkBJ,OACrEC,QAAS,EAAEC,SAAQL,UAAiChB,EAChD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKS,wBAAwBF,oBAGnF,CACI5E,MAAO,OACP4C,IAAK,+BACLwB,eAAgB,iCAChB1E,MAAQ2E,GAAcA,EAAKS,wBAAwBD,KAAKL,OACxDC,QAAS,EAAGC,SAAQL,UAAiChB,EACjD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKS,wBAAwBD,OAGnF,CACI7E,MAAO,cACP4C,IAAK,0CACLwB,eAAgB,0CAChB1E,MAAQ2E,GAAcA,EAAKU,4BAA4BR,YAAYC,OACnEC,QAAS,EAAEC,SAAQL,UAAiChB,EAChD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKU,4BAA4BR,cAGvF,CACIvE,MAAO,oBACP4C,IAAK,gDACLwB,eAAgB,gDAChB1E,MAAQ2E,GAAcA,EAAKU,4BAA4BH,kBAAkBJ,OACzEC,QAAS,EAAEC,SAAQL,UAAiChB,EAChD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKU,4BAA4BH,oBAGvF,CACI5E,MAAO,OACP4C,IAAK,mCACLwB,eAAgB,mCAChB1E,MAAQ2E,GAAcA,EAAKU,4BAA4BF,KAAKL,OAC5DC,QAAS,EAAEC,SAAQL,UAAiChB,EACjD,GAAGgB,EAAKM,aAAaD,EAAON,iBAAkBC,EAAKU,4BAA4BF,SASxFlC,EAAWlC,UACb,IAAMoC,EAAUnD,QAASoD,EAAQpD,MAC7B,OAAOsF,eAAa,qCAExBjD,EAAUrC,OAAQ,EAClB2C,EAAW3C,MAAQ,GACnB,MAAMuF,EAAS,IAAIC,OACnBD,EAAOpC,UAAYA,EAAUnD,MAC7BuF,EAAOnC,QAAUA,EAAQpD,MACzB,IACI2C,EAAW3C,aAAeuF,EAAOE,gBAAgB,YAC5CC,MAAM,GACNC,IAAI,CAAChB,EAAWiB,KACbjB,EAAKiB,MAAQA,EAAQ,EACrBjB,EAAKkB,OAAS,SACPlB,IAEjB,MAAOxD,GACLC,eAAY,8BAEhBiB,EAAUrC,OAAQ,GAMhB8C,EAAY,IAAMxE,eAAc,CAClCwC,SAAU,CAACgF,EAAeC,EAAeC,KACrC7C,EAAUnD,MAAQ8F,EAClB1C,EAAQpD,MAAQ+F,EAChB7E,EAAOlB,MAAQ,WAAWgG,KAC1BjD,EAAW/C,MAAQ,GAAGC,eAAOkD,EAAUnD,aAAaC,eAAOmD,EAAQpD,SACnEiD,OASR,OAFAgD,uBAAU,KAAOtD,EAAW3C,MAAM8E,QAAUhC,KAEpC,CACJL,UACAJ,YACAM,aACAzB,SACA6B,aACAE,WACAH,gB,qBCzNZ,MAAMoD,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS7E,KAErD,gB,wHCYT,MAAOmE,UAA0BzG,OAKnCoH,cACIC,QAAO,yJACPC,KAAKjD,QAAU,GACfiD,KAAKlD,UAAY,GACjBkD,KAAKhH,KAAON,OAAQC,iBACpBqH,KAAKC,UAAYvH,OAAQwH,eAG7BC,gBAAgBC,GACZ,OAAOJ,KAAKK,UAAU,cAAe,CAAC,YAAeD,IAEzDhB,gBAAgBgB,GACZ,OAAOJ,KAAKK,UAAU,oBAAqB,CAAC,YAAeD,IAE/DE,aAAaF,GACT,OAAOJ,KAAKK,UAAU,oBAAqB,CAAC,YAAeD,IAG/DG,wBACI,MAAO,GAAGC,OAAQC,2BAA2BT,KAAKlD,gBAAgB0D,OAAQC,2BAA2BT,KAAKjD,WAG9G2D,aAAa5D,GACTkD,KAAKlD,UAAYA,EAGrB6D,WAAW5D,GACPiD,KAAKjD,QAAUA,EAKnB6D,kBACI,OAAOZ,KAAKlD,WAAakD,KAAKjD,QAC3B,GAAGyD,OAAQC,2BAA2BT,KAAKlD,gBAAgB0D,OAAQC,2BAA2BT,KAAKjD,WACnG,IAGPsD,UAAUQ,EAAa3I,EAAO,IAC1B,OAAOQ,OAAQoI,QAAQD,EAAKb,KAAKe,aAAa7I,IAGlD6I,aAAa1G,EAA8B,IACvC,MAAM2G,EAAe,CAAC,KAAQhB,KAAKhH,KAAM,WAAc,IAKvD,OAJIgH,KAAKlD,WAAakD,KAAKjD,UACvBiE,EAAQ,cAAgBhB,KAAKlD,UAC7BkE,EAAQ,YAAchB,KAAKjD,SAExB,IAAKiE,KAAY3G,GAG5B,yBAAyB4G,EAAa,GAClC,MAAMC,EAAoC,GAC1C,IAAIC,EAAOX,OAAQY,iBACnB,IAAI,IAAIC,EAAE,EAAGA,EAAIJ,IAAeI,EAC5BH,EAASI,KAAK,CAAEC,KAAM,MAAMJ,EAAQK,MAAUL,EAAH,SAAiBM,IAAQN,EAAH,WACjED,EAASI,KAAK,CAAEC,KAAM,MAAMJ,EAAQK,MAAUL,EAAH,SAAiBM,IAAQN,EAAH,WACjED,EAASI,KAAK,CAAEC,KAAM,MAAMJ,EAAQK,MAAUL,EAAH,SAAiBM,IAAQN,EAAH,WACjED,EAASI,KAAK,CAAEC,KAAM,MAAMJ,EAAQK,MAAUL,EAAH,SAAiBM,IAAQN,EAAH,aAC/DA,EAEN,OAAOD","file":"js/chunk-7eeb39b9.5c6a7d06.js","sourcesContent":["import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Service } from \"@/services/service\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { toDate } from \"@/utils/Strs\"\nimport { MultiStepPopupForm } from \"@/utils/PopupKeyboard\"\nimport { toastDanger } from \"@/utils/Alerts\"\nimport { modalController } from \"@ionic/vue\"\nimport { reactive } from \"vue\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\n\nexport enum DatePeriodInputType {\n    MULTI_FIELD_DATE = 'Multipage date fields',\n    CALENDAR_FIELD = 'Calendar',\n    SINGLE_DATE_INPUT_FIELD = 'Single page date'\n}\n\nexport enum HtsReportPreference {\n    PERIOD_INPUT_TYPE = 'hts_report_date_period_type'\n}\n\nexport const ReportPreferences = reactive({\n    datePeriodInputType: localStorage.getItem(HtsReportPreference.PERIOD_INPUT_TYPE) || DatePeriodInputType.MULTI_FIELD_DATE\n} as any)\n\nexport function DateSelectionPreference() {\n    MultiStepPopupForm([\n        {\n            id: 'date_field_type',\n            helpText: 'Date input preference',\n            type: FieldType.TT_SELECT,\n            defaultValue: () => ReportPreferences.datePeriodInputType,\n            options: () => {\n                return [\n                    { label: 'Calendar', value: DatePeriodInputType.CALENDAR_FIELD },\n                    { label: 'Single page date', value: DatePeriodInputType.SINGLE_DATE_INPUT_FIELD},\n                    { label: 'Multipage date fields', value: DatePeriodInputType.MULTI_FIELD_DATE },\n                ]\n            }\n        }\n    ],\n    {\n        onFinish: (f: any) => {\n            ReportPreferences.datePeriodInputType = f.date_field_type.value\n            localStorage.setItem(HtsReportPreference.PERIOD_INPUT_TYPE, ReportPreferences.datePeriodInputType)\n            modalController.dismiss()\n        }\n    })\n}\n\nexport function DateSelection(params: any) {\n    MultiStepPopupForm([\n        ...generateDateFields({\n            id: 'start_date',\n            helpText: 'Start',\n            required: true,\n            minDate: () => params?.minDate || '',\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date \n        }),\n        ...generateDateFields({\n            id: 'end_date',\n            helpText: 'End',\n            required: true,\n            minDate: (_: any, c: any) => c.start_date,\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date\n        }),\n        {\n            id: 'alt_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_FULL_DATE,\n            validation: (v: Option) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (params.minDate && new Date(v.value) < new Date(params.minDate)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(params.minDate)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.value,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'alt_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_FULL_DATE,\n            defaultValue: (f: any) => f.start_date.value,\n            validation: (v: Option, f: any) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (f.start_date.value && new Date(v.value) < new Date(f.start_date.value)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(f.start_date.value)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.label,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'calendar_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_DATE_PICKER,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            validation: (v: Option) => StandardValidations.required(v),\n            config: {\n                minDate: () => params.minDate || null,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(date) || '-' },\n                        { label: 'End Date', value: toDate(f.end_date) || '-'}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        },\n        {\n            id: 'calendar_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_DATE_PICKER,\n            validation: (v: Option) => StandardValidations.required(v),\n            defaultValue: (f: any) => f.start_date.value,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            config: {\n                minDate: (f: any) => f.start_date.value,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(f.start_date) || '-' },\n                        { label: 'End Date', value: toDate(date)}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        }\n    ], \n    {\n        onFinish: async (f: any, c: any) => {\n            modalController.dismiss()\n            try {\n                const period = `${toDate(c.start_date)} to ${toDate(c.end_date)}`\n                params.onFinish(c.start_date, c.end_date, period)\n            } catch (e) {\n                toastDanger(\"An error has occurred\")\n            }\n        }\n    })\n}","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_loading = _resolveComponent(\"ion-loading\")!\n  const _component_v2Datatable = _resolveComponent(\"v2Datatable\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_loading, {\n        \"is-open\": _ctx.isLoading,\n        message: \"Please wait...\"\n      }, null, 8, [\"is-open\"]),\n      _createVNode(_component_v2Datatable, {\n        title: \"CXCA TX Report\",\n        subtitle: _ctx.period,\n        columns: _ctx.columns,\n        columnData: _ctx.reportData,\n        rowsPerPage: 25,\n        onConfigure: _ctx.configure,\n        csvQuarter: _ctx.csvQuarter,\n        onRefresh: () => _ctx.generate()\n      }, null, 8, [\"subtitle\", \"columns\", \"columnData\", \"onConfigure\", \"csvQuarter\", \"onRefresh\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent, ref, onMounted } from 'vue';\nimport { IonPage, IonLoading, modalController } from \"@ionic/vue\"\nimport  v2Datatable from \"@/components/DataViews/tables/v2PocDatatable/TableView.vue\"\nimport { v2ColumnDataInterface, v2ColumnInterface } from '@/components/DataViews/tables/v2PocDatatable/types';\nimport { CxCaReportService } from \"@/apps/CxCa/services/reports/cxca_report_service\"\nimport { DateSelection } from \"@/utils/ReportDateSelectionPrompt\"\nimport { toastDanger, toastWarning } from '@/utils/Alerts';\nimport DrillPatientIds from '../../../../../components/DrillPatientIds.vue';\nimport { toDate } from '@/utils/Strs';\n\nconst reportData = ref<any>([])\nconst startDate = ref('')\nconst endDate = ref('')\nconst period = ref('')\nconst isLoading = ref(false)\nconst csvQuarter = ref('')\nexport default defineComponent({ \n    components: { \n        IonPage,\n        IonLoading,\n        v2Datatable,\n    },\n    setup() {\n        const drilldown = async (title: string, patientIdentifiers: number[]) => {\n            (await modalController.create({\n                component: DrillPatientIds,\n                backdropDismiss: false,\n                cssClass: 'large-modal',\n                componentProps: {\n                    title,\n                    subtitle: period,\n                    patientIdentifiers,\n                    onFinish: () => modalController.getTop().then(v => v && modalController.dismiss())\n                }\n            })).present()\n        }\n        /**\n         * Table column definition and value mapping\n         */\n        const columns: Array<v2ColumnInterface[]> = [\n            [\n                {\n                    label: \"#\",\n                    ref: \"index\",\n                    span: {\n                        thRowspan: 2\n                    }\n                },\n                {\n                    label: \"Age group\",\n                    ref: \"age_group\",\n                    span: {\n                        thRowspan: 2,\n                    }\n                },\n                {\n                    label: \"Gender\",\n                    ref: \"gender\",\n                    exportable: false,\n                    span: {\n                        thRowspan: 2\n                    }\n                }, \n                {\n                    label: \"1st time screened\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3\n                    }\n                },\n                {\n                    label: \"Rescreened after previous negative\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3\n                    }\n                },\n                {\n                    label: \"Post-treatment follow-up\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3\n                    }\n                }\n            ],\n            [\n                {\n                    label: \"Cryotherapy\",\n                    ref: 'first_time_screened_cryotherapy',\n                    secondaryLabel: \"1st screened (cryotherapy)\",\n                    value: (data: any) => data.first_time_screened.cryotherapy.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.first_time_screened.cryotherapy\n                    )\n                },\n                {\n                    label: \"Thermocoagulation\",\n                    ref: 'first_time_screened_thermocoagulation',\n                    secondaryLabel:  \"1st time screened (Thermocoagulation)\",\n                    value: (data: any) => data.first_time_screened.thermocoagulation.length,\n                    tdClick: ({ column,data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.first_time_screened.thermocoagulation\n                    )\n                },\n                {\n                    label: \"LEEP\",\n                    ref: 'first_time_screened_leep',\n                    secondaryLabel: \"1st screened(leep)\",\n                    value: (data: any) => data.first_time_screened.leep.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.first_time_screened.leep\n                    )\n                },\n                {\n                    label: \"Cryotherapy\",\n                    ref: 'post_treatment_followup_cryotherapy',\n                    secondaryLabel: \"Post-treatment followup(Cryotherapy)\",\n                    value: (data: any) => data.post_treatment_followup.cryotherapy.length,\n                    tdClick: ({column, data}: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.post_treatment_followup.cryotherapy\n                    )\n                },\n                {\n                    label: \"Thermocoagulation\",\n                    ref: \"post_treatment_followup_thermocoagulation\",\n                    secondaryLabel: \"Post-treatment followup (Thermocoagulation)\",\n                    value: (data: any) => data.post_treatment_followup.thermocoagulation.length,\n                    tdClick: ({column, data}: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.post_treatment_followup.thermocoagulation\n                    )\n                },\n                {\n                    label: \"LEEP\",\n                    ref: \"post_treatment_followup_leep\",\n                    secondaryLabel: \"Post-treatment followup (leep)\",\n                    value: (data: any) => data.post_treatment_followup.leep.length,\n                    tdClick: ({ column, data}: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.post_treatment_followup.leep\n                    )\n                },\n                {\n                    label: \"Cryotherapy\",\n                    ref: 'rescreened_after_prev_visit_cryotherapy',\n                    secondaryLabel: \"Rescreen after prev visit (Cryotherapy)\",\n                    value: (data: any) => data.rescreened_after_prev_visit.cryotherapy.length,\n                    tdClick: ({column, data}: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.rescreened_after_prev_visit.cryotherapy\n                    )\n                },\n                {\n                    label: \"Thermocoagulation\",\n                    ref: 'rescreened_after_prev_visit_thermocoagulation',\n                    secondaryLabel: \"Rescreen after prev visit (Thermocoagulation)\",\n                    value: (data: any) => data.rescreened_after_prev_visit.thermocoagulation.length,\n                    tdClick: ({column, data}: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.rescreened_after_prev_visit.thermocoagulation\n                    )\n                },\n                {\n                    label: \"LEEP\",\n                    ref: 'rescreened_after_prev_visit_leep',\n                    secondaryLabel: \"Rescreen after prev visit (leep)\",\n                    value: (data: any) => data.rescreened_after_prev_visit.leep.length,\n                    tdClick: ({column, data}: v2ColumnDataInterface) => drilldown(\n                       `${data.age_group} ${column.secondaryLabel}`, data.rescreened_after_prev_visit.leep\n                    )\n                }\n            ]\n        ]\n        \n        /**\n         * Generates report by start date and end date\n         */\n        const generate = async () => {\n            if (!(startDate.value && endDate.value))  {\n                return toastWarning('Start date and end date required!')\n            }\n            isLoading.value = true\n            reportData.value = []\n            const report = new CxCaReportService()\n            report.startDate = startDate.value\n            report.endDate = endDate.value\n            try {\n                reportData.value = (await report.getClinicReport('CXCA TX'))\n                    .slice(5)\n                    .map((data: any, index: any) => {\n                        data.index = index + 1\n                        data.gender = \"Female\"\n                        return data\n                    })\n            } catch (e) {\n                toastDanger(\"Unable to generate report!\")\n            }\n            isLoading.value = false\n        }\n\n        /**\n         * Loads a dialogue to allow users to configure start and end date\n         */\n        const configure = () => DateSelection({\n            onFinish: (sDate: string, eDate: string, periodstr: string) => {\n                startDate.value = sDate\n                endDate.value = eDate\n                period.value = `Period (${periodstr})`\n                csvQuarter.value = `${toDate(startDate.value)} to ${toDate(endDate.value)}`\n                generate()\n            }\n        })\n\n        /**\n         * Initialization code when the report is empty!\n         */\n        onMounted(() => !reportData.value.length && configure())\n\n        return  {\n            columns,\n            isLoading,\n            reportData,\n            period,\n            csvQuarter,\n            generate,\n            configure\n        }\n    }\n})\n","import { render } from \"./CXCA_TX_Report.vue?vue&type=template&id=ef03bb7a&ts=true\"\nimport script from \"./CXCA_TX_Report.vue?vue&type=script&lang=ts\"\nexport * from \"./CXCA_TX_Report.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\n\n\nexport const AGE_GROUPS = [\n    '15-19 years', '20-24 years',\n    '25-29 years', '30-34 years',\n    '35-39 years', '40-44 years',\n    '45-49 years', '50 plus years'\n]\n\n\nexport class CxCaReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getPepfarReport(reportName: string) {\n        return this.getReport('pepfar_cxca', {'report_name': reportName})\n    }\n    getClinicReport(reportName: string) {\n        return this.getReport('screened_for_cxca', {'report_name': reportName})\n    }\n    getMohReport(reportName: string) {\n        return this.getReport('screened_for_cxca', {'report_name': reportName})\n    }\n    \n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n   \n\n    getReportPeriod() {\n        return this.startDate && this.endDate\n         ? `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n         : '-'\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': 24}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        return { ...payload, ...config }\n    }\n\n    static getReportQuarters(minDuration= 4) {\n        const quarters: Array<QuarterInterface> = []\n        let year = HisDate.getCurrentYear()\n        for(let i=0; i < minDuration; ++i) {\n            quarters.push({ name: `Q4 ${year}`, start: `${year}-10-01`, end: `${year}-12-31` })\n            quarters.push({ name: `Q3 ${year}`, start: `${year}-07-01`, end: `${year}-09-30` })\n            quarters.push({ name: `Q2 ${year}`, start: `${year}-04-01`, end: `${year}-06-30` })\n            quarters.push({ name: `Q1 ${year}`, start: `${year}-01-01`, end: `${year}-03-31` })\n            --year\n        }\n        return quarters\n    }\n\n}"],"sourceRoot":""}