{"version":3,"sources":["webpack:///./src/apps/ART/services/stock_service.ts","webpack:///./src/apps/ART/services/dispensation_service.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/apps/ART/views/encounters/Dispensing.vue?a29c","webpack:///./src/apps/ART/views/encounters/Dispensing.vue","webpack:///./src/apps/ART/views/encounters/Dispensing.vue?308b","webpack:///./src/utils/GuidelineEngine.ts"],"names":["StockService","drugId","this","getJson","stock","length","reduce","accum","pharm","current_quantity","Service","DRUG_PACK_SIZES","DispensationService","patientID","providerID","drugHistory","currentDrugOrder","useDrugManagement","isEnabled","ART_PROP","drugManagementEnabled","orderId","tabs","totalPacks","dispensations","i","push","date","quantity","AppEncounterService","postJson","getProgramID","void","DrugOrderService","getDrugOrderHistory","res","console","warn","getDrugOrders","drugs","map","d","fetchAvailableDrugStock","drug","drug_id","Promise","all","units","drugOrderBarcodes","barcodes","sort","a","b","parseInt","completePack","orders","order","getSessionDate","pageSize","drugID","params","patientId","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","facts","ready","watch","handler","route","patient_id","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","split","username","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","error","toastDanger","ProgramService","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","usernameA","usernameB","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","cur","Array","isArray","concat","inArray","arr","expression","e","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","_component_his_standard_form","_resolveComponent","mixins","EncounterMixinVue","dispensation","getFields","saveDispensations","item","buildDispensations","dispenses","forEach","packs","order_id","buildMedicationHistory","loadDrugHistory","getDrugHistory","dateA","Date","start_date","dateB","medication","amount","buildOrderOptions","getCurrentOrder","available_stock","calculateCompletePack","getPackSizesRows","availableStock","getDrugPackSizes","packSize","Math","floor","parseFloat","amount_needed","calcCompletePack","isDoneDispensing","o","every","isValidDispensation","isOk","totalTabs","amountNeeded","percentageGiven","alertConfirmation","id","helpText","FieldType","TT_DISPENSATION_INPUT","init","setIsDrugManagementEnabled","loadCurrentDrugOrder","onValueUpdate","l","onValue","isBarcodeScanned","voidOrder","voided","dispensed","toastWarning","config","isDrugManagementEnabled","medicationHistory","toolbarInfo","getFullName","getGender","hiddenFooterBtns","isCondition","ignored","undefined","prop","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-bc09139e.895e3e17.js","sourcesContent":["import { Service } from \"@/services/service\";\n\nexport class StockService extends Service {\n    constructor() {\n        super()\n    }\n\n    static async fetchAvailableDrugStock(drugId: number) {\n        const stock = await this.getJson('pharmacy/items', { 'drug_id': drugId })\n        if (stock && stock.length > 0) {\n            return stock.reduce((accum: number, pharm: any) => accum + pharm.current_quantity, 0);\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { StockService } from \"./stock_service\";\nimport ART_PROP from '@/apps/ART/art_global_props';\n// ripped from old ART system\nexport const DRUG_PACK_SIZES: Record<string, any> = {\n    '11': [ 30 ],\n    '21': [ 25 ],\n    '22': [ 60 ],\n    '24': [ 30, 60, 90, 100 ],\n    '30': [ 90 ],\n    '39': [ 60 ],\n    '73': [ 120 ],\n    '74': [ 60 ],\n    '76': [ 1000 ],\n    '297': [ 30, 60, 90 ],\n    '576': [ 30, 60, 90 ],\n    '613': [ 60 ],\n    '731': [ 60 ],\n    '732': [ 60 ],\n    '733': [ 60 ],\n    '734': [ 30 ],\n    '735': [ 30 ],\n    '736': [ 60 ],\n    '738': [ 60 ],\n    '931': [ 12, 30, 60 ],\n    '932': [ 30 ],\n    '954': [ 60 ],\n    '963': [ 30, 60, 90 ],\n    '968': [ 60 ],\n    '969': [ 30 ],\n    '971': [ 30,60,90 ],\n    '976': [ 60 ],\n    '977': [ 30 ],\n    '982': [ 30 ],\n    '983': [ 30, 90 ],\n    '1039': [ 30,60,90 ],\n    '1043': [ 60 ],\n    '1044': [ 30],\n    '1056': [ 24 ],\n    '1216': [3, 6, 12]\n}\n\nexport class DispensationService extends AppEncounterService {\n    drugHistory: Array<any>;\n    currentDrugOrder: Array<any>;\n    useDrugManagement: boolean; \n    constructor(patientID: number, providerID: number) {\n        super(patientID, 54, providerID)\n        this.drugHistory = []\n        this.currentDrugOrder = []\n        this.useDrugManagement = false\n    }\n\n    setIsDrugManagementEnabled(isEnabled: boolean) {\n        this.useDrugManagement = isEnabled\n    }\n\n    async loadDrugManagementEnabled() {\n        this.useDrugManagement = await ART_PROP.drugManagementEnabled()\n    }\n\n    getDrugHistory() {\n        return this.drugHistory\n    }\n\n    getCurrentOrder() {\n        return this.currentDrugOrder\n    }\n\n    buildDispensations(orderId: number, tabs: number, totalPacks: number) {\n        const dispensations = []\n        for(let i=0; i < totalPacks; i++) {\n            dispensations.push({\n                'drug_order_id': orderId,\n                date: this.date,\n                quantity: (tabs / totalPacks)\n            })\n        }\n        return dispensations\n    }\n\n    saveDispensations(dispensations: Array<any>) {\n        return AppEncounterService.postJson('/dispensations', { \n            dispensations, \n            'program_id': AppEncounterService.getProgramID()\n        })\n    }\n\n    async voidOrder(orderId: number) {\n        return AppEncounterService.void(`/dispensations/${orderId}`, {})\n    }\n\n    async loadDrugHistory() {\n        try {\n            const res = await DrugOrderService.getDrugOrderHistory(this.patientID)\n            if (res) this.drugHistory = res\n        } catch (e) {\n            console.warn(e)\n        }\n    }\n\n    async loadCurrentDrugOrder() {\n        const res = await DrugOrderService.getDrugOrders(this.patientID)\n        if (res) {\n            if (this.useDrugManagement) {\n                const drugs = res.map(async (d: any) => {\n                    d['available_stock'] = await StockService.fetchAvailableDrugStock(d.drug.drug_id)\n                    return d\n                })\n                this.currentDrugOrder = await Promise.all(drugs)\n                return\n            }\n            this.currentDrugOrder = res\n        }\n    }\n\n    getDrugPackSizes(drugId: number) {\n        if (drugId in DRUG_PACK_SIZES) {\n            return DRUG_PACK_SIZES[drugId]\n        }\n        return [30, 60, 90]\n    }\n\n    // Ripped from old ART system for backwards compatibility purposes\n    calcCompletePack(drug: any, units: number) {\n        //sorting in an ascending order by tabs\n        const drugOrderBarcodes = drug.barcodes.sort((a: any, b: any) => a.tabs - b.tabs); \n        if (drugOrderBarcodes.length == 0 || units == 0.0) return units;\n        for (const i in drugOrderBarcodes) {\n            const { tabs } = drugOrderBarcodes[i]\n            if (parseInt(tabs) >= units) return tabs;\n        }\n        const completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n        return completePack\n    }\n}\n","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, alertConfirmation } from \"@/utils/Alerts\"\nimport { DispensationService } from \"@/apps/ART/services/dispensation_service\"\nimport {isEmpty } from 'lodash'\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport HisDate from \"@/utils/Date\"\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        dispensation: {} as any\n    }),\n    watch: {\n        ready: {\n            handler(ready: any){\n                if (ready) {\n                    this.dispensation = new DispensationService(this.patientID, this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        saveDispensations(item: Option) {\n            return this.dispensation.saveDispensations(this.buildDispensations(item))    \n        },\n        buildDispensations(item: Option) {\n            if (!isEmpty(item.other?.dispenses)) {\n                let dispenses: any = []\n                item.other.dispenses.forEach(([tabs, packs]: Array<number>) => {\n                    dispenses = [...dispenses, \n                    ...this.dispensation.buildDispensations(\n                        item.other.order_id, tabs, packs\n                    )]\n                })\n                return dispenses\n            }\n            return this.dispensation.buildDispensations(\n                item.other.order_id, parseInt(item.value.toString()), 1\n            )\n        },\n        async buildMedicationHistory() {\n            await this.dispensation.loadDrugHistory()\n            return this.dispensation.getDrugHistory()\n                .sort((a: any, b: any) => {\n                    const dateA: any = new Date(a.order.start_date)\n                    const dateB: any = new Date(b.order.start_date)\n                    return dateB - dateA\n                })\n                .map((d: any) => ({\n                    medication: d.drug.name,\n                    date: HisDate.toStandardHisDisplayFormat(d.order.start_date),\n                    amount: d.quantity\n                }))\n        },\n        buildOrderOptions() {\n            return this.dispensation.getCurrentOrder().map((d: any) => ({\n                label: d.drug.name,\n                value: d.quantity || 0,\n                other: {\n                    'order': d,\n                    'drug_id': d.drug.drug_id,\n                    'order_id': d.order.order_id,\n                    'available_stock': d.available_stock || '-',\n                    'amount_needed': this.calculateCompletePack(d),\n                    'pack_sizes': this.getPackSizesRows(d.drug.drug_id, d.available_stock || 0),\n                }\n            }))\n        },\n        getPackSizesRows(drugId: number, availableStock: number) {\n            const packs = this.dispensation.getDrugPackSizes(drugId)\n            return packs.map((packSize: number) => {\n                const packs = availableStock > 0 ? (Math.floor(availableStock / packSize)) : '-'\n                return [packSize, packs, 0, 0]\n            })\n        },\n        calculateCompletePack(order: any) {\n            const units = parseFloat(order.amount_needed) - (order.quantity || 0)\n            if(units <= 0) return 0\n            return this.dispensation.calcCompletePack(order, units)\n        },\n        isDoneDispensing(orders: Array<Option>) {\n            return orders.map(o => o.value != 0).every(Boolean)\n        },\n        async isValidDispensation(option: Option) {\n            let isOk = true\n            const totalTabs = parseInt(option.value.toString())\n            const amountNeeded = option.other['amount_needed']\n            const percentageGiven = (totalTabs / amountNeeded) * 100\n\n            if (percentageGiven > 110) {\n                isOk = await alertConfirmation('Are you sure you want to dispense over 110% of the prescribed pill count?')\n            }\n\n            if (percentageGiven < 100) {\n                isOk = await alertConfirmation('Are you sure you want to dispense less than 100% of the prescribe amount?')\n            }\n            return isOk\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                    id: 'dispenses',\n                    helpText: 'Dispensation',\n                    type: FieldType.TT_DISPENSATION_INPUT,\n                    init: async () => {\n                        this.dispensation.setIsDrugManagementEnabled((await Store.get('IS_ART_DRUG_MANAGEMENT_ENABLED')))\n                        await this.dispensation.loadCurrentDrugOrder()\n                        return true\n                    },\n                    onValueUpdate: async(i: Option, l: Array<Option>) => {\n                        if (i.value != -1 && this.isDoneDispensing(l)) {\n                            return this.$router.push({name: 'appointment'})\n                        }\n                        i.other['amount_needed'] = i.other['amount_needed'] - (parseInt(i.value.toString()) || 0)\n                        if(i.other['amount_needed'] < 0 ) i.other['amount_needed'] = 0\n                        \n                        await this.dispensation.loadCurrentDrugOrder()\n\n                        return this.buildOrderOptions()\n                    },\n                    onValue: async (i: Option, isBarcodeScanned: boolean) => {\n                        if (i.value  === -1) {\n                            const voided = await this.dispensation.voidOrder(i.other.order_id)\n                            return !voided\n                        }\n\n                        if (!isBarcodeScanned) {\n                            const isValidDispensation = await this.isValidDispensation(i)\n\n                            if (!isValidDispensation) return false\n                        }\n\n                        const dispensed = await this.saveDispensations(i)\n\n                        if (dispensed) return true\n\n                        toastWarning('Unable to save dispensation')\n\n                        return false\n                    },\n                    config: {\n                        isDrugManagementEnabled: () => this.dispensation.useDrugManagement,\n                        medicationHistory: () => this.buildMedicationHistory(),\n                        toolbarInfo: [\n                            { label: 'Name', value: this.patient.getFullName() },\n                            { label: 'Gender', value: this.patient.getGender() },\n                            { label: 'Date Of Birth', value: HisDate.toStandardHisDisplayFormat(\n                                this.patient.getBirthdate()\n                            )}\n                        ],\n                        hiddenFooterBtns: [ \n                            'Clear',\n                            'Finish'\n                        ]\n                    },\n                    options: () => this.buildOrderOptions()\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Dispensing.vue?vue&type=template&id=0051ed47&ts=true\"\nimport script from \"./Dispensing.vue?vue&type=script&lang=ts\"\nexport * from \"./Dispensing.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}