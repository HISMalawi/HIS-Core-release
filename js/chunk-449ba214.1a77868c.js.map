{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue?29dd","webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue?aa30","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","patientType","watch","patient","this","PatientTypeService","patientID","providerID","loadPatientType","getFields","deep","methods","formData","getFacilities","filter","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","mapOptions","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","facts","isEnrolledInProgam","formLabel","ready","handler","route","params","patient_id","toUpperCase","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","computed","patientDashboardUrl","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","nextTask","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","option","toConditionalOptions","final","yesNoUnknownOptions","resolveObs","obs","tag","Object","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","computedData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","facilities","LocationService","f","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-449ba214.1a77868c.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    patientType: {} as any,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.patientType = new PatientTypeService(\n          this.patientID,\n          this.providerID\n        );\n        await this.patientType.loadPatientType();\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      //       const encounter = await this.patientType.createEncounter();\n      //       if (!encounter) return toastWarning(\"Unable to create encounter\");\n      //       this.patientType.setLocationName(formData?.location?.label);\n      //       this.patientType.setPatientType(formData?.patient_type?.value);\n      //       await this.patientType.save();\n      //       toastSuccess(\"Observations and encounter created!\");\n      //       this.nextTask();\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"via_test_results\",\n          helpText: \"VIA test results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Negative\",\n              \"Positive\",\n              \"Suspect\",\n            ]);\n          },\n        },\n        {\n          id: \"pap_smear\",\n          helpText: \"PAP Smear Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"PAP Smear normal\",\n              \"PAP Smear abnormal\"\n            ]);\n          },\n        },\n        {\n          id: \"hpv_dna\",\n          helpText: \"HPV DNA Test Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"HPV negative\",\n              \"HPV positive\"\n            ]);\n          },\n        },\n        {\n          id: \"speculum_exam\",\n          helpText: \"Speculum Exam Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Visible Lesion\",\n              \"No Visible lesion\",\n              \"Other gynaecological condition\",\n            ]);\n          },\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaResult.vue?vue&type=template&id=59ae6bcf&ts=true\"\nimport script from \"./CxCaResult.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaResult.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}