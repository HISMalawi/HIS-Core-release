{"version":3,"sources":["webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/guidelines/staging_guidelines.ts","webpack:///./src/apps/ART/services/staging_service.ts","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue?6de3"],"names":["defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","FlowState","SET_PROVIDER","selection","username","split","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","$router","push","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","gotoPatientDashboard","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","value","program","startDate","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","isBDE","getBirthdate","$route","name","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","d","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","conditions","condition","__exports__","dformat","HisDate","toStandardHisDisplayFormat","priority","async","action","infoActionSheet","slot","color","modal","optionsActionSheet","role","isCondition","ignored","undefined","prop","includes","every","Boolean","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","ADULT_WHO_STAGE_CRITERIA","concept","stage","reasonForArt","reason","CHILD_WHO_STAGE_CRITERIA","CONTRADICTING_STAGE_DEFINITIONS_ALERTS","alertConfirmation","bmi","confirmBtnLabel","cancelBtnLabel","selectedCondition","keepAsymptomatic","selectedConditions","stageThreeConditions","stageFourConditions","stageTwoConditions","RECOMMENDED_CHILD_STAGING_CONDITIONS","isChecked","show","weightPercentile","disabled","RECOMMENDED_ADULT_STAGING_CONDITIONS","CHILD_ART_ELIGIBILITY","ageInMonths","age","pshdConditions","ConceptService","getConceptsByCategory","pshdCondition","testType","cd4Date","date","Date","cd4","cd4Modifier","modifier","gender","breastFeeding","answer","pregnant","ADULT_ART_ELIGIBILITY","severeSymp","found","total","symp","StagingCategory","StagingService","AppEncounterService","constructor","super","_defineProperty","confirmatoryTest","isAdult","isPedaid","setAge","getFacilities","LocationService","getConfirmatoryTestType","cd4CountIsValid","match","getAlertGuidelines","getWhoStageGuidelines","getProgramEligibilityGuidelines","getRecommendedConditionGuidelines","getStagingConditions","category","getStagingCategoryByNum","buildWhoStageObs","buildValueCoded","buildWhoCriteriaObs","buildReasonForArtObs","stageNumber","ADULT_STAGE_1","PEDAID_STAGE_1","ADULT_STAGE_2","PEDAID_STAGE_2","ADULT_STAGE_3","PEDAID_STAGE_3","ADULT_STAGE_4","PEDAID_STAGE_4","test","getFirstValueCoded","mixins","EncounterMixinVue","staging","showStagingWeightChart","canShowStagingFields","bmiObj","stagingFacts","isChildBearing","stageOneConditions","whoStage","v","getID","getAge","loadHivConfirmatoryTestType","getBMI","isMale","getAgeInMonths","calculateWeightPercentile","computedValues","encounter","createEncounter","stagingObservations","derivedObservations","saveObservationList","_findings$","_findings$2","_findings$3","ok","updateStagingFacts","curIndex","buildStagingOptions","previouslySelected","_conceptFinding$actio","_conceptFinding$actio2","conceptFinding","concept_id","setWhoStage","_findings$4","setReasonForArt","_findings$5","notAsymptomatic","f","stageOneC","stage_1_conditions","asymptomatics","hasTransferLater","has_transfer_letter","hasStaging","getStagingSummaryField","helpText","id","type","FieldType","TT_ART_STAGING_SUMMARY","onload","config","hiddenFooterBtns","isANCclient","getSuspendedProgram","getStagingFields","TT_MULTIPLE_YES_NO","validation","Validation","anyEmpty","summaryMapValue","computedValue","factID","pregnancy_status","TT_WEIGHT_CHART","getWeightHistory","x","y","TT_MULTIPLE_SELECT","onValue","onStagingCondition","unload","onConditionFalse","val","TT_SELECT","required","TT_TEXT","charAt","count","substring","buildValueNumber","s","computedData","isCd4","customKeyboard","CD4_COUNT_PAD_LO","cd4_available","generateDateFields","minDate","maxDate","getDate","estimation","allowUnknown","computeValue","isEstimate","buildValueDate","defaultValue","getLocationName","buildValueText","_","showKeyboard","isFilterDataViaApi"],"mappings":"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","file":"js/chunk-5cf15614.e4221d40.js","sourcesContent":["\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { ConceptService } from \"@/services/concept_service\"\nimport { alertConfirmation } from \"@/utils/Alerts\"\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\n\nexport const ADULT_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Adults with stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV ADULT'\n        }\n    },\n    'Adults with stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Adults with stage 2 conditions': {\n        concept: 'WHO STAGE II ADULT',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2,\n        }\n    },\n    'Adults with stage 1 conditions': {\n        concept: 'WHO STAGE I ADULT',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CHILD_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Children with stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV PEDS'\n        }\n    },\n    'For children with stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Children with stage 2 conditions': {\n        concept: 'WHO STAGE II PEDS',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2\n        }\n    },\n    'Children with stage 1 conditions': {\n        concept: 'WHO STAGE I PEDS',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CONTRADICTING_STAGE_DEFINITIONS_ALERTS: Record<string, GuideLineInterface> = {\n    \"Warn if Severe weight loss is selected when actual patient BMI is acceptable\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => await alertConfirmation(`Patient's BMI of ${facts.bmi} greater than 18.5, do you wish to proceed?`, {\n                confirmBtnLabel: 'Yes, keep severe weightloss',\n                cancelBtnLabel: 'No, cancel'\n            }),\n        },\n        conditions: {\n            selectedCondition (condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi:(bmi: number) => bmi > 18.5\n        }\n    },\n    \"Warn for contradicting stage defining conditions\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => {\n                const keepAsymptomatic = await alertConfirmation('CONTRADICTING STAGE DEFINING CONDITIONS', {\n                    confirmBtnLabel: \"Keep Asymptomatic\",\n                    cancelBtnLabel: 'Keep other(s)'\n                })\n                if(keepAsymptomatic) {\n                    facts.stage = 1\n                    facts.selectedConditions = []\n                    facts.stageThreeConditions = []\n                    facts.stageFourConditions = []\n                    facts.stageTwoConditions = []\n                    return true\n                }\n                return false\n            },\n        },\n        conditions: {\n            selectedCondition(condition: string){\n                return condition === 'Asymptomatic HIV infection'\n            },\n            stage: (stage: number) => stage >= 2\n        }\n    },\n}\n\nexport const RECOMMENDED_CHILD_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'For children whose current weight percentile is less than 70' : {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has a low weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile < 70\n            }\n        }\n    },\n    'Enable Moderate unexplained malnutrition for children whose weight for height is 70-79%': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile >= 70 && weightPercentile <= 79\n            }\n        }\n    },\n    'Disable moderate weight loss when Severe unexplained weight loss is chosen': {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss/manutrition was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)')\n            }\n        }\n    }\n}\n\nexport const RECOMMENDED_ADULT_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'Adults with a BMI less than 16': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Adult has a low BMI of ${facts.bmi}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi: (bmi: number) => bmi < 16\n        }\n    },\n    'Adults whose BMI is between 16 and 18': {\n        priority: 3,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'warning',\n            show: 'onChecked',\n            info: (facts: any) => `BMI of ${facts.bmi} is between 16 and 18`,\n        },\n        conditions: {\n            selectedCondition: (condition: string) => condition === 'Moderate weight loss less than or equal to 10 percent, unexplained',\n            bmi: (bmi: number) => bmi >= 16.0 && bmi <= 18.5\n        }\n    },\n    \"Disable Moderate weight loss if severe weightloss is selected\": {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate weight loss less than or equal to 10 percent, unexplained'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained')\n            }\n        }\n    }\n}\n\nexport const CHILD_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 2,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'Children under twelve months who tested positive on Rapid test and have presumed severe HIV': {\n        concept: 'PRESUMED SEVERE HIV',\n        priority: 3,\n        conditions: {\n            ageInMonths(age: number){\n                return age < 12 \n            },\n            selectedConditions: (conditions: Array<string>) => {\n                const pshdConditions = ConceptService.getConceptsByCategory('pshd_condition')\n                for (const pshdCondition in pshdConditions) {\n                    if (conditions.includes(pshdCondition)) return true\n                }\n                return false\n            },\n            testType(testType: string){\n                return testType === 'HIV rapid test'\n            },\n        }\n    },\n    \"Children under twelve who tested positive via HIV DNA Polymerase Chain Reaction test\": {\n        concept: 'HIV DNA polymerase chain reaction',\n        priority: 4,\n        conditions: {\n            ageInMonths: (age: number) => age < 12,\n            testType: (testType: string) => testType === \"HIV DNA polymerase chain reaction\",\n        }\n    },\n    \"Children who are less than 24 months\": {\n        concept: 'HIV infected',\n        priority: 5,\n        conditions: {\n            ageInMonths: (age: number) => age < 24\n        }\n    },\n    \"Children between 24 and 56 months who have stage 2 or 1 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 750',\n        priority: 6,\n        conditions: {\n            ageInMonths(age: number) {\n                return age >= 24 && age <= 56\n            },\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 750\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children with CD4 count less than 500 and have stage 1 and stage 2 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 7,\n        conditions: {\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4Modifier(modifier: string){\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children over the date 2014-04-01 who are more than five years old and have cd4 count less than 500\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 9,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            age(age: number) {\n                return age > 5\n            },\n            cd4(cd4: number) {\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    \"Children over date 2014-04-01 and less than Five years old\": {\n        concept: 'HIV infected',\n        priority: 10,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            age(age: number) {\n                return age <= 5\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 11,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 12,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 13,\n        conditions: {\n            stage: (stage: number) => stage <= 2\n        }\n    }\n}\n\nexport const ADULT_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has HIV wasting syndrome identified in stage 3': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            selectedConditions: (conditions: Array<string>) => {\n                const severeSymp = ConceptService.getConceptsByCategory('severe_hiv_wasting_syndrome')\n                const found = severeSymp.reduce((total, symp) => conditions.includes(symp.name) ? total + 1 : 0, 0)\n                return found >= 2\n            }\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'CD4 less than 350 for adults before 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 4,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 250 for adults after 2014': {\n        concept: 'cd4 less than or equal to 250',\n        priority: 4,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 250\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 350 for adults after 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 5,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 500 for adults after 2014': {\n        concept: 'cd4 less than or equal to 500',\n        priority: 6,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 8,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 7,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 9,\n        conditions: {\n            stage: (stage: number) => stage <= 2,\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { LocationService } from \"@/services/location_service\"\nimport {\n    RECOMMENDED_ADULT_STAGING_CONDITIONS,\n    CHILD_ART_ELIGIBILITY,\n    ADULT_ART_ELIGIBILITY,\n    ADULT_WHO_STAGE_CRITERIA,\n    CHILD_WHO_STAGE_CRITERIA,\n    CONTRADICTING_STAGE_DEFINITIONS_ALERTS,\n    RECOMMENDED_CHILD_STAGING_CONDITIONS\n} from \"@/apps/ART/guidelines/staging_guidelines\"\n\n/**\n * Enable for filtering staging categories in ConceptName Dictionary\n */\nenum StagingCategory {\n    ADULT_STAGE_4 = 'stage_4_conditions_adults',\n    ADULT_STAGE_3 = 'stage_3_conditions_adults',\n    ADULT_STAGE_2 = 'stage_2_conditions_adults',\n    ADULT_STAGE_1 = 'stage_1_conditions_adults',\n    PEDAID_STAGE_4 = 'stage_4_conditions_pedaids',\n    PEDAID_STAGE_3 = 'stage_3_conditions_pedaids',\n    PEDAID_STAGE_2 = 'stage_2_conditions_pedaids',\n    PEDAID_STAGE_1 = 'stage_1_conditions_pedaids'\n}\n\nexport class StagingService extends AppEncounterService {\n    age: number\n    confirmatoryTest: string | null;\n    constructor(patientID: number, age: number, providerID: number) {\n        super(patientID, 52, providerID) //TODO: Use encounter type reference name\n        this.age = age\n        this.confirmatoryTest = null\n    }\n\n    isAdult() { return this.age >= 15 }\n\n    isPedaid() { return this.age <= 14 }\n\n    setAge(age: number) {\n        this.age = age\n    }\n\n    getFacilities (filter='') { return LocationService.getFacilities({name: filter}) }\n    \n    getConfirmatoryTestType() { return this.confirmatoryTest }\n\n    cd4CountIsValid(value: string) {\n        try {\n            return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n        }catch(e) {\n            return false\n        }\n    }\n\n    getAlertGuidelines() {\n        return CONTRADICTING_STAGE_DEFINITIONS_ALERTS\n    }\n\n    getWhoStageGuidelines() {\n        return this.isAdult() ? ADULT_WHO_STAGE_CRITERIA : CHILD_WHO_STAGE_CRITERIA\n    }\n\n    getProgramEligibilityGuidelines() {\n        return this.isAdult() ? ADULT_ART_ELIGIBILITY: CHILD_ART_ELIGIBILITY\n    }\n\n    getRecommendedConditionGuidelines() {\n        return this.isAdult() ? RECOMMENDED_ADULT_STAGING_CONDITIONS: RECOMMENDED_CHILD_STAGING_CONDITIONS\n    }\n\n    getStagingConditions(stage: number) {\n        const category = this.getStagingCategoryByNum(stage)\n        return AppEncounterService.getConceptsByCategory(category)\n    }\n\n    buildWhoStageObs(stage: string) {\n        return this.buildValueCoded('Who stage', stage)\n    }\n    \n    buildWhoCriteriaObs(condition: string) {\n        return this.buildValueCoded('Who stages criteria present', condition)\n    }\n\n    buildReasonForArtObs(reason: string) {\n        return this.buildValueCoded('Reason for ART eligibility', reason)\n    }\n\n    private getStagingCategoryByNum(stageNumber: number) {\n        switch(stageNumber) {\n            case 1:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_1 : StagingCategory.PEDAID_STAGE_1\n            case 2:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_2 : StagingCategory.PEDAID_STAGE_2\n            case 3:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_3 : StagingCategory.PEDAID_STAGE_3\n            case 4:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_4 : StagingCategory.PEDAID_STAGE_4\n            default: \n                return ''\n        }\n    }\n\n    async loadHivConfirmatoryTestType() {\n        const test = await AppEncounterService.getFirstValueCoded(\n            this.patientID, 'Confirmatory hiv test type'\n        )\n        if (test) this.confirmatoryTest = test\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { StagingService } from \"@/apps/ART/services/staging_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport {\n    getFacilities\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        staging: {} as any,\n        showStagingWeightChart: true,\n        canShowStagingFields: true as boolean,\n        bmiObj: {} as any, \n        stagingFacts : {\n            age: -1 as number,\n            bmi: -1 as number,\n            gender: '' as 'M' | 'F',\n            stage: -1 as number,\n            cd4: -1 as number,\n            cd4Date: '' as string,\n            date: '' as string,\n            isChildBearing: false as boolean,\n            stageOneConditions: [] as Array<string>,\n            stageTwoConditions: [] as Array<string>,\n            stageThreeConditions: [] as Array<string>,\n            stageFourConditions: [] as Array<string>,\n            reasonForArt: '' as string,\n            testType: '' as string,\n            pregnant: '' as 'Yes' | 'No',\n            breastFeeding: '' as 'Yes' | 'No',\n            selectedCondition: '' as string,\n            selectedConditions: [] as Array<string>,\n            weightPercentile: -1 as number,\n            ageInMonths: -1 as number,\n            cd4Modifier: '' as string,\n            whoStage: '' as string\n        }\n    }),\n    watch: {\n        ready : {\n            handler(v) {\n                if (v) {\n                    this.staging = new StagingService(this.patient.getID(), this.patient.getAge(), this.providerID)\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async initStaging(patient: any) {\n            await this.staging.loadHivConfirmatoryTestType()\n            this.bmiObj = await patient.getBMI()\n            this.stagingFacts.age = patient.getAge()\n            this.stagingFacts.bmi = this.bmiObj['index']\n            this.stagingFacts.date = StagingService.getSessionDate()\n            this.stagingFacts.gender = patient.isMale() ? 'M' : 'F' \n            this.stagingFacts.testType = this.staging.getConfirmatoryTestType()\n            this.stagingFacts.ageInMonths = patient.getAgeInMonths()\n            this.stagingFacts.isChildBearing = patient.isChildBearing()\n\n            if (this.staging.isPedaid()) {\n                this.stagingFacts.weightPercentile = await patient.calculateWeightPercentile()\n            }\n        },\n        async submitStaging(computedValues: any) {\n            const encounter = await this.staging.createEncounter()\n\n            if (!encounter) throw 'Unable to create staging encounter'\n\n            const stagingObservations = await this.resolveObs(computedValues, 'staging')\n            const derivedObservations = await Promise.all([\n                this.buildReasonForArtObs(), this.buildWhoStageObs()\n            ])\n\n            const obs = await this.staging.saveObservationList([\n                ...stagingObservations, ...derivedObservations\n            ])\n\n            if (!obs) throw 'Unable to save patient observations'\n        },\n        async onStagingCondition({ label }: Option) {\n            this.stagingFacts.selectedCondition = label\n \n            const guidelines =  this.staging.getAlertGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n            if (isEmpty(findings)) \n                return true\n\n            if (findings[0]?.actions && findings[0]?.actions.alert) {\n                const ok = await findings[0]?.actions.alert(this.stagingFacts)\n                return ok ? true : false\n            }\n            return true\n        },\n        getFacilities(filter='') {\n            return getFacilities(filter)\n        },\n        updateStagingFacts() {\n            const conditions = [\n                this.stagingFacts.stageOneConditions,\n                this.stagingFacts.stageTwoConditions,\n                this.stagingFacts.stageThreeConditions,\n                this.stagingFacts.stageFourConditions, \n            ]\n            this.stagingFacts.stage = conditions.reduce(\n                (stage, conditions: string[], curIndex) =>\n                    isEmpty(conditions) ? stage : curIndex + 1\n                , 0)\n            this.stagingFacts.selectedConditions = conditions.reduce(\n                (accum, cur) => accum.concat(cur), []\n            )\n        },\n        buildReasonForArtObs() {\n            return this.staging.buildReasonForArtObs(this.stagingFacts.reasonForArt)\n        },\n        buildWhoStageObs() {\n            return this.staging.buildWhoStageObs(this.stagingFacts.whoStage)\n        },\n        buildStagingOptions(stage: number, previouslySelected=[] as Array<string>) {\n            const guidelines = this.staging.getRecommendedConditionGuidelines()\n\n            return this.staging.getStagingConditions(stage).map((concept: any) => {\n                let disabled = false\n                let description: unknown\n                let isChecked = previouslySelected.includes(concept.name)\n                this.stagingFacts.selectedCondition = concept.name\n\n                const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n                if (!isEmpty(findings)) {\n                    const conceptFinding = findings[0] //get the first item only\n                    if (conceptFinding?.actions?.isChecked) {\n                        isChecked = true\n                    }\n                    if (conceptFinding?.actions?.disabled) {\n                        disabled = true\n                    }\n                    description = conceptFinding.description\n                }\n                return {\n                    label: concept.name,\n                    value: concept.concept_id,\n                    isChecked,\n                    disabled,\n                    description\n                }\n            })\n        },\n        setWhoStage() {\n            const guidelines = this.staging.getWhoStageGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.whoStage = findings[0]?.concept || ''\n        },\n        setReasonForArt() {\n            const guidelines = this.staging.getProgramEligibilityGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.reasonForArt = findings[0]?.concept || ''\n        },\n        notAsymptomatic(f: any) {\n            const stageOneC = f.stage_1_conditions\n            if (stageOneC) {\n                const asymptomatics = stageOneC.filter((i: Option) => {\n                    return i.label.match(/asymptomatic/i) && i.isChecked\n                })\n                return isEmpty(asymptomatics)\n            }\n            return true\n        },\n        hasTransferLater(f: Record<string, any>): boolean {\n            if ('has_transfer_letter' in f) {\n                return f.has_transfer_letter && f.has_transfer_letter.value === 'Yes'\n            }\n            return false\n        },\n        hasStaging(f: Record<string, any>) {\n            // For components that have Optional staging\n            if (this.hasTransferLater(f)) {\n                return true\n            }\n            return this.canShowStagingFields\n        },\n        getStagingSummaryField(helpText=\"Summary\" as string) {\n            return {\n                id: 'summary',\n                helpText,\n                type: FieldType.TT_ART_STAGING_SUMMARY,\n                condition: (f: any) => this.hasStaging(f),\n                onload: () => {\n                    this.setReasonForArt()\n                    this.setWhoStage()\n                },\n                options: () => [\n                    { \n                        label: 'WHO Stage', \n                        value: this.stagingFacts.whoStage,\n                        other: {\n                            type: 'title-section'\n                        }\n                    },\n                    { \n                        label: 'Condition on starting ART', \n                        value: this.stagingFacts.reasonForArt,\n                        other: {\n                            type: 'title-section'\n                        } \n                    },\n                    ...this.stagingFacts.selectedConditions.map((i: string) => ({ label: i, value: i }))\n                ],\n                config: {\n                    title: 'Selected stage defining conditions',\n                    hiddenFooterBtns: [\n                        'Clear'\n                    ]\n                }\n            }\n        },\n        isANCclient() {\n            return StagingService.getSuspendedProgram() === 'ANC'\n        },\n        getStagingFields(): Array<Field> {\n            return [\n                {\n                    id: 'pregnancy_status',\n                    helpText: 'Pregnant / Breastfeeding',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    validation: (v: any) => Validation.anyEmpty(v),\n                    summaryMapValue: (d: Option) => ({ \n                        label: d.label, \n                        value: d.value \n                    }),\n                    computedValue: (data: Array<Option>, f: Record<string, any>) => {\n                        let obs = []\n                        // For ANC clients, mark pregnancy status as 'Yes' always!!\n                        // The assumption here is also that the pregnancy option is not available for selection\n                        if (this.isANCclient() && !this.hasTransferLater(f)) {\n                            this.stagingFacts['pregnant'] = 'Yes' \n                            obs.push(this.staging.buildValueCoded('Is patient pregnant', 'Yes'))\n                        }\n                        obs = obs.concat(data.map(d => {\n                            const  { value, other } = d\n\n                            const factID: 'pregnant' | 'breastFeeding' = other.factID\n\n                            this.stagingFacts[factID] = `${value}`.match(/Yes/i) ? 'Yes' : 'No'\n\n                            return this.staging.buildValueCoded(other.concept, value)\n                        }))\n                        return {\n                            obs,\n                            tag: 'staging'\n                        }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.pregnancy_status)) {\n                            return f.pregnancy_status\n                        } else {\n                            const options = []\n                            // Hide pregnancy option for ANC clients who are not transferr in\n                            if (!this.isANCclient() || this.hasTransferLater(f)) {\n                                options.push({\n                                    label: 'Pregnant?',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                        concept: 'Is patient pregnant',\n                                        factID: 'pregnant'\n                                    }\n                                })\n                            }\n                            options.push({\n                                label: 'Breastfeeding?',\n                                value: '',\n                                other: {\n                                    values: this.yesNoOptions(),\n                                    concept: 'Is patient breast feeding',\n                                    factID: 'breastFeeding'\n                                }\n                            })\n                            return options\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.stagingFacts.isChildBearing,\n                },\n                {\n                    id: 'patient_weight_chart',\n                    helpText: 'Weight history',\n                    type: FieldType.TT_WEIGHT_CHART,\n                    options: async () => {\n                        let values = await this.patient.getWeightHistory()\n                        values = values.map((d: any) => ({ \n                            x: HisDate.toStandardHisDisplayFormat(d.date), \n                            y: d.weight\n                        }))\n                        return [\n                            {\n                                label: \"Weight for patient\",\n                                value: \"Weight trail\",\n                                other: {\n                                    values,\n                                    age: this.patient.getAge(),\n                                    bmi: this.bmiObj\n                                }\n                            }\n                        ]\n                    },\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.showStagingWeightChart\n                },\n                {\n                    id: 'stage_4_conditions',\n                    helpText: 'Stage 4 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(4, this.stagingFacts.stageFourConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageFourConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageFourConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_3_conditions',\n                    helpText: 'Stage 3 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(3, this.stagingFacts.stageThreeConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageThreeConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageThreeConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_2_conditions',\n                    helpText: 'Stage 2 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(2, this.stagingFacts.stageTwoConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Option[]) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageTwoConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageTwoConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_1_conditions',\n                    helpText: 'Stage 1 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (val: any) => {\n                        if (isEmpty(val) && isEmpty(this.stagingFacts.selectedConditions))\n                            return ['Please provide atleast one staging condition']\n                    },\n                    options: () => this.buildStagingOptions(1, this.stagingFacts.stageOneConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        const data = d.map(i => i.label)\n                        this.stagingFacts.stageOneConditions = data\n                        this.updateStagingFacts()\n                        return {\n                            tag: 'staging',\n                            obs: data.map(i => this.staging.buildWhoCriteriaObs(i))\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f),\n                },\n                {\n                    id: 'cd4_available',\n                    helpText: 'Recent CD4 count results available?',\n                    type: FieldType.TT_SELECT,\n                    condition: (f: any) => this.hasStaging(f),\n                    validation: (val: any) => Validation.required(val),\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'cd4_count',\n                    helpText: 'CD4 Count',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (d: Option) => {\n                        const value = d.value.toString()\n                        const modifier = value.charAt(0)\n                        const count = parseInt(value.substring(1))\n                        return {\n                            tag: 'staging',\n                            modifier,\n                            count,\n                            obs: this.staging.buildValueNumber(\n                                'CD4 count', count, modifier\n                            )\n                        }\n                    },\n                    unload: (d: any, s: any, f: any, computedData: any) => {\n                        const { count, modifier } = computedData['cd4_count']\n                        this.stagingFacts.cd4 = count\n                        this.stagingFacts.cd4Modifier = modifier\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.cd4 = -1\n                        this.stagingFacts.cd4Modifier = ''\n                    },\n                    validation: (val: any) => {\n                        const isCd4 = () => this.staging.cd4CountIsValid(val.value)\n                        return this.validateSeries([\n                            () => Validation.required(val),\n                            () => !isCd4() ? ['Please start with either modifier first: >, <, or ='] : null\n                        ])\n                    },\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Unknown', 'Delete']\n                            ]\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                },\n                ...generateDateFields({\n                    id: 'cd4_result_date',\n                    helpText: 'Cd4 Results',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) =>  this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        this.stagingFacts.cd4Date = date\n                        return {\n                            date,\n                            tag: 'staging',\n                            isEstimate,\n                            obs: this.staging.buildValueDate('Cd4 count datetime', date) \n                        }\n                    }\n                }),\n                {\n                    id: 'location',\n                    helpText: 'CD4 Location',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: () => StagingService.getLocationName(),\n                    computedValue: ({ label }: Option) => ({\n                        tag: 'staging',\n                        obs: this.staging.buildValueText('Cd4 count location', label)\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    options: (_, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                }\n            ]\n        }\n    }\n})\n","import script from \"./StagingMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./StagingMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}