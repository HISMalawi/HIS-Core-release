{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/BPDrug_management.vue?7c6a","webpack:///./src/apps/ART/views/encounters/BPDrug_management.vue","webpack:///./src/apps/ART/views/encounters/BPDrug_management.vue?6e48","webpack:///./src/apps/ART/services/htn_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/views/encounters/BPDrug_management.vue?88e9"],"names":["_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","_createElementVNode","class","_hoisted_2","key","_hoisted_3","id","style","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_col","_resolveComponent","_component_ion_row","_component_ion_toolbar","_component_ion_header","_component_ion_checkbox","_component_ion_button","_component_view_port","_component_ion_content","_component_ion_footer","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","_","drugs","_createElementBlock","_Fragment","_renderList","item","itemIndex","_createTextVNode","_toDisplayString","drug","drugIndex","amount","i","checked","selected","onIonChange","$event","selectDrug","Object","keys","ind","onClick","launchNotePad","color","d","valign","notes","note","date","description","isNewNote","removeNote","_createCommentVNode","size","slot","gotoPatientDashboard","canClearHtnSessionPrescription","clearPrescriptionInSession","selectedDrugs","length","onFinish","defineComponent","mixins","EncounterMixinVue","components","ViewPort","IonToolbar","IonHeader","IonContent","IonRow","IonButton","IonCol","IonFooter","IonPage","IonCheckbox","watch","ready","this","HTN","BPManagementService","patientID","providerID","getDrugs","getCurrentDrugs","setPreviousBpDrugs","setPreviousBpNotes","patientHasHtnSessionKey","immediate","data","methods","sessionStorage","removeItem","HTN_SESSION_KEY","Prescription","sessionData","getItem","JSON","parse","e","console","warn","splice","showModal","helpText","type","FieldType","TT_TEXT","push","ProgramService","getSessionDate","value","drugID","drugNotes","values","filter","isEmpty","map","reduce","accum","cur","concat","buildObs","createEncounter","saveObservationList","Promise","all","toastWarning","gotoTreatment","htnDrugs","find","htnDrugReferences","setItem","stringify","$router","currentField","modal","modalController","create","component","TouchField","backdropDismiss","cssClass","componentProps","dismissType","present","forEach","element","index","drug_id","current","event","detail","computed","__exports__","AppEncounterService","constructor","super","sbp","dbp","bpTrail","firstRecentGrade","secondRecentGrade","sort","a","b","bp","getBpGrade","getSystolicBp","ObservationService","getFirstValueNumber","getDiastolicBp","query","getFirstValueCoded","getJson","pills","postJson","state","HCZ","drugName","isChecked","dispensed","expectedRemaining","adherence","Enalapril","remaining","Amlodipine","Atenolol","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","fields","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","log","cancelDestination","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","dayjs","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","enc","encounterTypeID","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","states","username","split","provider","person_id","EXIT","findings","matchToGuidelines","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","usernameA","usernameB","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","path","yesNoOptions","toYesNoOption","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Array","isArray","inArray","arr","expression","validateSeries","condition","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","text","info"],"mappings":"yIAEA,MAAMA,EAAeC,IAAMC,yBAAa,mBAAmBD,EAAEA,IAAIE,0BAAcF,GACzEG,EAA2BJ,EAAa,IAAmBK,gCAAoB,QAAS,CAAEC,MAAO,aAAe,wBAAyB,IACzIC,EAAa,CACjBC,IAAK,EACLF,MAAO,qBAEHG,EAAa,CACjBC,GAAI,aACJC,MAAO,CAAC,MAAQ,SAEZC,EAA2BZ,EAAa,IAAmBK,gCAAoB,KAAM,KAAM,KAAM,IACjGQ,EAA2Bb,EAAa,IAAmBK,gCAAoB,KAAM,CAAEC,MAAO,yBAA2B,CAChHD,gCAAoB,OAAQ,KAAM,iBAC7C,IACES,EAA2Bd,EAAa,IAAmBK,gCAAoB,KAAM,CAAEC,MAAO,yBAA2B,CAChHD,gCAAoB,OAAQ,KAAM,OAC7C,IACEU,EAA2Bf,EAAa,IAAmBK,gCAAoB,IAAK,KAAM,MAAO,IACjGW,EAAa,CACjBN,GAAI,cACJC,MAAO,CAAC,MAAQ,SAEZM,EAA2BjB,EAAa,IAAmBK,gCAAoB,UAAW,CAAEM,MAAO,CAAC,YAAY,UAAY,WAAY,IACxIO,EAA4BlB,EAAa,IAAmBK,gCAAoB,IAAK,KAAM,MAAO,IAClGc,EAAc,CAClBb,MAAO,oBACPI,GAAI,aAEAU,EAAc,CAAEd,MAAO,oBACvBe,EAAc,CAAEf,MAAO,oBAEvB,SAAUgB,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAAqBC,8BAAkB,WACvCC,EAAqBD,8BAAkB,WACvCE,EAAyBF,8BAAkB,eAC3CG,EAAwBH,8BAAkB,cAC1CI,EAA0BJ,8BAAkB,gBAC5CK,EAAwBL,8BAAkB,cAC1CM,EAAuBN,8BAAkB,aACzCO,EAAyBP,8BAAkB,eAC3CQ,EAAwBR,8BAAkB,cAC1CS,EAAsBT,8BAAkB,YAE9C,OAAQU,yBAAcC,yBAAaF,EAAqB,KAAM,CAC5DG,QAASC,qBAAS,IAAM,CACtBC,yBAAaX,EAAuB,KAAM,CACxCS,QAASC,qBAAS,IAAM,CACtBC,yBAAaZ,EAAwB,KAAM,CACzCU,QAASC,qBAAS,IAAM,CACtBC,yBAAab,EAAoB,KAAM,CACrCW,QAASC,qBAAS,IAAM,CACtBC,yBAAaf,EAAoB,KAAM,CACrCa,QAASC,qBAAS,IAAM,CACtBvC,IAEFyC,EAAG,MAGPA,EAAG,MAGPA,EAAG,MAGPA,EAAG,IAELD,yBAAaP,EAAwB,KAAM,CACzCK,QAASC,qBAAS,IAAM,CACtBC,yBAAaR,EAAsB,KAAM,CACvCM,QAASC,qBAAS,IAAM,CACrBpB,EAAKuB,OACDN,yBAAcO,gCAAoB,MAAOxC,EAAY,CACpDF,gCAAoB,QAASI,EAAY,CACvCJ,gCAAoB,KAAM,KAAM,CAC9BO,GACC4B,wBAAW,GAAOO,gCAAoBC,cAAW,KAAMC,wBAAY1B,EAAKuB,MAAO,CAACI,EAAMC,KAC7EX,yBAAcO,gCAAoB,KAAM,CAAEvC,IAAK2C,GAAa,CAClEC,6BAAiBC,6BAAiBF,GAAa,IAAK,GACpDP,yBAAab,EAAoB,KAAM,CACrCW,QAASC,qBAAS,IAAM,EACrBH,wBAAW,GAAOO,gCAAoBC,cAAW,KAAMC,wBAAYC,EAAKJ,MAAO,CAACQ,EAAMC,KAC7Ef,yBAAcC,yBAAaZ,EAAoB,CACrDvB,MAAO,cACPE,IAAK+C,GACJ,CACDb,QAASC,qBAAS,IAAM,CACtBS,6BAAiBC,6BAAiBC,EAAKE,QAAU,OAAQ,KAE3DX,EAAG,GACF,QACD,QAENA,EAAG,GACF,UAEH,QAENxC,gCAAoB,KAAM,KAAM,CAC9BQ,GACC2B,wBAAW,GAAOO,gCAAoBC,cAAW,KAAMC,wBAAY1B,EAAKuB,MAAO,CAACI,EAAMC,KAC7EX,yBAAcO,gCAAoB,KAAM,CAC9CvC,IAAK2C,EACL7C,MAAO,uBACN,CACDsC,yBAAab,EAAoB,KAAM,CACrCW,QAASC,qBAAS,IAAM,EACrBH,wBAAW,GAAOO,gCAAoBC,cAAW,KAAMC,wBAAYC,EAAKJ,MAAO,CAACQ,EAAMG,KAC7EjB,yBAAcC,yBAAaZ,EAAoB,CAAErB,IAAKiD,GAAK,CACjEf,QAASC,qBAAS,IAAM,CACtBC,yBAAaV,EAAyB,CACpCwB,QAASJ,EAAKK,SACdC,YAAcC,GAAiBtC,EAAKuC,WAAWX,EAAWM,EAAGI,IAC5D,KAAM,EAAG,CAAC,UAAW,kBAE1BhB,EAAG,GACF,QACD,QAENA,EAAG,GACF,UAEH,QAENxC,gCAAoB,KAAM,KAAM,CAC9BS,GACC0B,wBAAW,GAAOO,gCAAoBC,cAAW,KAAMC,wBAAYc,OAAOC,KAAKzC,EAAKuB,OAAQ,CAACQ,EAAMW,KAC1FzB,yBAAcO,gCAAoB,KAAM,CAC9CzC,MAAO,wBACPE,IAAKyD,GACJ,CACDrB,yBAAab,EAAoB,KAAM,CACrCW,QAASC,qBAAS,IAAM,CACtBC,yBAAaf,EAAoB,KAAM,CACrCa,QAASC,qBAAS,IAAM,CACtBC,yBAAaT,EAAuB,CAClC+B,QAAUL,GAAiBtC,EAAK4C,cAAcb,GAC9Cc,MAAO,WACN,CACD1B,QAASC,qBAAS,IAAM,CACtBS,6BAAiB,iBAEnBP,EAAG,GACF,KAAM,CAAC,cAEZA,EAAG,GACF,QAELA,EAAG,GACF,UAEH,UAGR9B,EACAV,gCAAoB,QAASW,EAAY,CACvCC,EACAC,EACAb,gCAAoB,KAAM,KAAM,EAC7BmC,wBAAW,GAAOO,gCAAoBC,cAAW,KAAMC,wBAAY1B,EAAKuB,MAAO,CAACuB,EAAGd,KAC1Ef,yBAAcO,gCAAoB,KAAM,CAC9CpC,MAAO,CAAC,MAAQ,OAChBH,IAAK+C,GACJ,CACDlD,gCAAoB,OAAQ,KAAMgD,6BAAiBE,GAAY,OAE/D,QAENlD,gCAAoB,KAAM,KAAM,EAC7BmC,wBAAW,GAAOO,gCAAoBC,cAAW,KAAMC,wBAAYc,OAAOC,KAAKzC,EAAKuB,OAAQ,CAACQ,EAAMW,KAC1FzB,yBAAcO,gCAAoB,KAAM,CAC9CrC,GAAI,MACJC,MAAO,CAAC,cAAc,kBACtB2D,OAAQ,MACR9D,IAAKyD,GACJ,CACD5D,gCAAoB,QAASc,EAAa,EACvCqB,wBAAW,GAAOO,gCAAoBC,cAAW,KAAMC,wBAAY1B,EAAKuB,MAAMQ,GAAMiB,MAAO,CAACC,EAAMf,KACzFjB,yBAAcO,gCAAoB,KAAM,CAAEvC,IAAKiD,GAAK,CAC1DpD,gCAAoB,KAAMe,EAAaiC,6BAAiBmB,EAAKC,MAAO,GACpEpE,gCAAoB,KAAMgB,EAAagC,6BAAiBmB,EAAKE,aAAc,GAC3ErE,gCAAoB,KAAM,KAAM,CAC7BmE,EAAKG,WACDnC,yBAAcC,yBAAaN,EAAuB,CACjD3B,IAAK,EACL4D,MAAO,SACPF,QAAUL,GAAiBtC,EAAKqD,WAAWtB,EAAMG,IAChD,CACDf,QAASC,qBAAS,IAAM,CACtBS,6BAAiB,SAEnBP,EAAG,GACF,KAAM,CAAC,aACVgC,gCAAoB,IAAI,SAG9B,YAGN,aAIVA,gCAAoB,IAAI,KAE9BhC,EAAG,MAGPA,EAAG,IAELD,yBAAaN,EAAuB,KAAM,CACxCI,QAASC,qBAAS,IAAM,CACtBC,yBAAaZ,EAAwB,CAAEoC,MAAO,QAAU,CACtD1B,QAASC,qBAAS,IAAM,CACtBC,yBAAaT,EAAuB,CAClC2C,KAAM,QACNV,MAAO,SACPW,KAAM,QACNb,QAAS3C,EAAKyD,sBACb,CACDtC,QAASC,qBAAS,IAAM,CACtBS,6BAAiB,cAEnBP,EAAG,GACF,EAAG,CAAC,YACNtB,EAAK0D,gCACDzC,yBAAcC,yBAAaN,EAAuB,CACjD3B,IAAK,EACLsE,KAAM,QACNV,MAAO,UACPW,KAAM,MACNb,QAAS3C,EAAK2D,4BACb,CACDxC,QAASC,qBAAS,IAAM,CACtBS,6BAAiB,kCAEnBP,EAAG,GACF,EAAG,CAAC,aACPgC,gCAAoB,IAAI,GAC3BtD,EAAK4D,eAAiB5D,EAAK4D,cAAcC,OAAS,GAC9C5C,yBAAcC,yBAAaN,EAAuB,CACjD3B,IAAK,EACLsE,KAAM,QACNV,MAAO,UACPW,KAAM,MACNb,QAAS3C,EAAK8D,UACb,CACD3C,QAASC,qBAAS,IAAM,CACtBS,6BAAiB,gBAEnBP,EAAG,GACF,EAAG,CAAC,aACPgC,gCAAoB,IAAI,KAE9BhC,EAAG,MAGPA,EAAG,MAGPA,EAAG,I,oIC5OQyC,+BAAgB,CAC7BC,OAAQ,CAACC,QACTC,WAAY,CACVC,gBACAC,kBACAC,iBACAC,kBACAC,cACAC,iBACAC,cACAC,iBACAC,eACAC,oBAEFC,MAAO,CACLC,MAAO,CACL,cAAcA,GACZ,GAAIA,EAAO,CACTC,KAAKC,IAAM,IAAIC,OAAoBF,KAAKG,UAAWH,KAAKI,YACxDJ,KAAKxD,MAAQwD,KAAKC,IAAII,WACtB,MAAM,MAAE7D,EAAK,MAAEyB,SAAe+B,KAAKC,IAAIK,kBACvCN,KAAKO,mBAAmB/D,GACxBwD,KAAKQ,mBAAmBvC,GACxB+B,KAAKrB,+BAAiCqB,KAAKS,4BAG/CC,WAAW,IAGfC,KAAMA,KACG,CACLV,IAAK,GACLzD,MAAO,KACPmC,gCAAgC,IAGpCiC,QAAS,CACPhC,6BACEiC,eAAeC,WAAWC,OAAgBC,cAC1ChB,KAAKrB,gCAAiC,GAExC8B,0BACE,IACE,MAAMQ,EAAcJ,eAAeK,QAAQH,OAAgBC,cAC3D,GAAIC,EAAa,CACf,MAAMN,EAAOQ,KAAKC,MAAMH,GACxB,OAAON,EAAKX,KAAKG,YAEnB,MAAOkB,GACPC,QAAQC,KAAKF,GAEf,OAAO,GAET/C,WAAWP,EAAQZ,EAAQQ,GACzBqC,KAAKxD,MAAMuB,GAAGE,MAAMuD,OAAO7D,EAAK,IAElCE,cAAcZ,GACZ+C,KAAKyB,UAAU,CACbrH,GAAI,OACJsH,SAAU,iBAAiBzE,EAC3B0E,KAAMC,OAAUC,SAEjBlB,IACKA,GAAMX,KAAKxD,MAAMS,GAAWgB,MAAM6D,KAAK,CACzC3D,KAAM4D,OAAeC,iBACrB5D,YAAauC,EAAKsB,OAAS,GAC3BC,OAAQlC,KAAKxD,MAAMS,GAAWT,MAAM,GAAG0F,OACvC7D,WAAW,OAIjB,iBACE,MAAM8D,EAAY1E,OAAO2E,OAAOpC,KAAKxD,OAClC6F,OAAQtE,IAAYuE,qBAAQvE,EAAEE,QAC9BsE,IAAKxE,GAAWA,EAAEE,OAClBuE,OAAO,CAACC,EAAYC,IAAaD,EAAME,OAAOD,GAAM,IACpDL,OAAQ1I,GAAWA,EAAE0E,WACrBkE,IAAKrE,GAAc8B,KAAKC,IAAI2C,SAAS,kBAAmB,CACvD,WAAc1E,EAAKE,YACnB,WAAcF,EAAKgE,UAEvB,IAAKI,qBAAQH,GACX,UACQnC,KAAKC,IAAI4C,wBACT7C,KAAKC,IAAI6C,0BAA2BC,QAAQC,IAAIb,IACtD,MAAOd,GACP,OAAO4B,eAAa,wBAAwB5B,GAGhDrB,KAAKkD,iBAEPA,gBACE,MAAMC,EAAWnD,KAAKnB,cAAc0D,IAAKlF,GACvC+F,kBAAMlD,OAAoBmD,oBAAqB,CAC7C,QAAWhG,EAAS6E,UAElBvB,EAAY,GAClBA,EAAKX,KAAKG,WAAagD,EACvBtC,eAAeyC,QAAQvC,OAAgBC,aAAcG,KAAKoC,UAAU5C,IACpEX,KAAKwD,QAAQ1B,KAAK,iCAAiC9B,KAAKG,YAE1D,gBAAgBsD,EAAqB1E,GACnC,MAAM2E,QAAcC,QAAgBC,OAAO,CACzCC,UAAWC,OACXC,iBAAiB,EACjBC,SAAU,aACVC,eAAgB,CACdC,YAAa,QACbT,eACA1E,cAGJ2E,EAAMS,WAER3D,mBAAmBvC,GACjB,IAAK,MAAMhB,KAAagB,EACtB+B,KAAKxD,MAAMS,GAAWgB,MAAQR,OAAOC,KAAKO,EAAMhB,IAC7CsF,IAAKpE,GAAiBF,EAAMhB,GAAWkB,GAAMoE,IAC3CnE,IAAmB,CAAQD,OAAMC,cAAaC,WAAW,MAC1DmE,OACA,CAACC,EAAcC,IAAeD,EAAME,OAAOD,GAAM,KAIzDnC,mBAAmB/D,GACjBA,EAAM4H,QAASpH,IACb,IAAK,MAAM9C,KAAO8F,KAAKxD,MACrBwD,KAAKxD,MAAMtC,GAAKsC,MAAM4H,QAAQ,CAACC,EAAcC,KACvCtH,EAAKuH,UAAYF,EAAQnC,SAC3BlC,KAAKxD,MAAMtC,GAAKsC,MAAM8H,GAAOE,SAAU,EACvCxE,KAAKxD,MAAMtC,GAAKsC,MAAM8H,GAAOjH,UAAW,EACxC2C,KAAKxD,MAAMtC,GAAKmD,SAAWL,EAAKuH,cAM1C/G,WAAWtD,EAAUoK,EAAYG,GAC/BzE,KAAKxD,MAAMtC,GAAKsC,MAAM4H,QAAQ,CAACrG,EAAQZ,KACrC6C,KAAKxD,MAAMtC,GAAKsC,MAAMW,GAAGE,UAAW,IAEtC2C,KAAKxD,MAAMtC,GAAKsC,MAAM8H,GAAOjH,SAAWoH,EAAMC,OAAOtH,UAGzDuH,SAAU,CACR9F,gBACE,OAAImB,KAAKxD,MAAciB,OAAO2E,OAAOpC,KAAKxD,OACvC+F,IAAKxE,GAAWA,EAAEvB,OAClBgG,OAAO,CAACC,EAAYC,IAAaD,EAAME,OAAOD,GAAM,IACpDL,OAAQtE,GAAWA,EAAEV,UACjB,O,iCCxKb,MAAMuH,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS5J,GAAQ,CAAC,YAAY,qBAE1E,gB,oCCTf,wEAGY+F,EAHZ,yBAGA,SAAYA,GACVA,EAAA,mCADF,CAAYA,MAAe,KAIrB,MAAOb,UAA4B2E,OACrCC,YAAY3E,EAAmBC,GAC7B2E,MAAM5E,EAAW,GAAIC,GAGvB,kBAAkB4E,EAAaC,GAC7B,OAAKD,EAAM,KAASC,EAAM,GACjB,SAECD,GAAO,KAAOA,EAAM,KAASC,GAAO,KAAOA,EAAM,IAClD,UAECD,GAAO,KAAOC,EAAM,KAAQD,GAAO,IACpC,UAECA,GAAO,KAAOA,EAAM,KAASC,GAAO,IACrC,UAEF,MAQT,wBAAwBC,GACtB,MAAQC,EAAkBC,GAAsB3H,OAAO2E,OAAO8C,GAC3DG,KAAK,CAACC,EAAQC,IAAWD,EAAEnH,KAAOoH,EAAEpH,KAAO,EAAI,GAC/CoE,IAAKiD,GAAYxF,KAAKyF,WAAWD,EAAGR,IAAKQ,EAAGP,MAC/C,MAA4B,WAArBE,GAAuD,WAAtBC,EAG1CM,gBACE,OAAOC,OAAmBC,oBAAoB5F,KAAKG,UAAW,2BAGhE0F,iBACE,OAAOF,OAAmBC,oBAAoB5F,KAAKG,UAAW,4BAGhE,kBACE,MAAM2F,QAAcH,OAAmBI,mBAAmB/F,KAAKG,UAAW,oBAC1E,QAAO2F,GAAkB,QAAVA,EAGjB,mBACE,aAAajB,OAAoBmB,QAAQ,aAAahG,KAAKG,sBAE7D,wBACE,aAAa0E,OAAoBmB,QAAQ,aAAahG,KAAKG,8BAE7D,qBACE,aAAa0E,OAAoBmB,QAAQ,aAAahG,KAAKG,wCAE7D,mBAAmB+B,EAAgB+D,GACjC,aAAapB,OAAoBqB,SAAS,aAAalG,KAAKG,+BAAgC,CAC1F,QAAW+B,EACX+D,MAAOA,IAGX,oBAAoBE,GAClB,aAAatB,OAAoBqB,SAAS,aAAalG,KAAKG,uCAAwCgG,GAEtG,2BACE,MAAO,CACL,CACE,QAAW,IACX,UAAa,oBACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,eAEf,CACE,QAAW,IACX,UAAa,yBACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,eAEf,CACE,QAAW,IACX,UAAa,0BACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,eAEf,CACE,QAAW,IACX,UAAa,0BACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,eAEf,CACE,QAAW,IACX,UAAa,2BACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,eAEf,CACE,QAAW,IACX,UAAa,yBACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,eAEf,CACE,QAAW,GACX,UAAa,yBACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,gBAInB9F,WACI,MAAO,CACP+F,IAAK,CACH5J,MAAO,CACL,CACE6J,SAAU,oBACVnE,OAAQ,IACRhF,OAAQ,OACRsH,SAAS,EACTnH,UAAU,EACViJ,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,OAGfpJ,SAAU,KACVY,MAAO,IAETyI,UAAW,CACTlK,MAAO,CACL,CACE6J,SAAU,yBACVnE,OAAQ,IACRhF,OAAQ,MACRsH,SAAS,EACTnH,UAAU,EACViJ,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,KACXE,UAAW,MAEb,CACEN,SAAU,0BACVnE,OAAQ,IACRhF,OAAQ,OACRsH,SAAS,EACTnH,UAAU,EACViJ,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,KACXE,UAAW,OAGftJ,SAAU,KACVY,MAAO,IAET2I,WAAY,CACVpK,MAAO,CACL,CACE6J,SAAU,0BACVnE,OAAQ,IACRhF,OAAQ,MACRsH,SAAS,EACTnH,UAAU,EACViJ,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,KACXE,UAAW,MAEb,CACEN,SAAU,2BACVnE,OAAQ,IACRhF,OAAQ,OACRsH,SAAS,EACTnH,UAAU,EACViJ,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,KACXE,UAAW,OAGftJ,SAAU,KACVY,MAAO,IAET4I,SAAU,CACRrK,MAAO,CACL,CACE6J,SAAU,yBACVnE,OAAQ,IACRhF,OAAQ,OACRsH,SAAS,EACTnH,UAAU,EACViJ,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,KACXE,UAAW,MAEb,CACEN,SAAU,yBACVnE,OAAQ,GACRhF,OAAQ,QACRsH,SAAS,EACTnH,UAAU,EACViJ,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,KACXE,UAAW,OAGftJ,SAAU,KACVY,MAAO,Q,iFCjPL6I,E,yEAAZ,SAAYA,GACRA,EAAA,+BACAA,EAAA,6CACAA,EAAA,qDACAA,EAAA,2CACAA,EAAA,uBACAA,EAAA,gBANJ,CAAYA,MAAS,KAQrB,MAAMC,EAAWhJ,GAAciJ,OAAQC,2BAA2BlJ,GAErDmJ,EAA2D,CACpE,qEAAsE,CAClEC,SAAU,EACVC,QAAS,CACLC,MAAOC,OAASC,uBACZ,MAAMC,QAAeC,eACjB,6BACA,mBAAmBV,EAAQQ,GAC3B,qEACA,CACI,CAAEG,KAAM,SAAUjJ,KAAM,MAAOX,MAAO,WACtC,CAAE4J,KAAM,iBAAkBjJ,KAAM,MAAOX,MAAO,WAC9C,CAAE4J,KAAM,kBAAmBjJ,KAAM,MAAOX,MAAO,YAGvD,MAAkB,WAAX0J,EACDV,EAAUa,wBACC,mBAAXH,EACAV,EAAUc,uBACVd,EAAUe,WAGxBC,WAAY,CACRC,QAAQA,GACJ,MAAmB,iBAAZA,GAEXR,iBAAiBS,GAAmB,YAAEC,IAClC,OAAOA,GAAeD,KAIlC,+DAAgE,CAC5Db,SAAU,EACVC,QAAS,CACLC,MAAOC,OAASY,YAAWD,kBACvB,MAAMT,QAAeC,eACjB,6BAA8B,GAC9B,gBAAgBV,EAAQkB,iCAA2ClB,EAAQmB,KAC3E,CACI,CAAER,KAAM,SAAUjJ,KAAM,MAAOX,MAAO,UACtC,CAAE4J,KAAM,sBAAuBjJ,KAAM,MAAOX,MAAO,aAG3D,MAAkB,wBAAX0J,EACDV,EAAUqB,oBACVrB,EAAUa,0BAGxBG,WAAY,CACRI,UAAUA,GAAmB,YAAED,IAC3B,OAAOA,EAAcC,KAIjC,oDAAqD,CACjDf,SAAU,EACVC,QAAS,CACLgB,UAAWd,OAASe,YAAWC,gBAAeL,cAAaM,cACvD,MAAM7E,QAAc8E,eAChB,gCAAgCF,EAChC,QAAQvB,EAAQkB,iBAA2BlB,EAAQwB,KACnDF,EACA,CACI,CAAEX,KAAM,SAAU5J,MAAO,SAAUW,KAAM,QAASgK,KAAM,WACxD,CAAEf,KAAM,UAAWjJ,KAAM,MAAOgK,KAAM,YAG9C,MAAwB,WAAjB/E,EAAM8D,OACP,CAAEvF,OAAQ,EAAGyG,UAAW5B,EAAUa,yBAClC,CAAE1F,MAAOyB,EAAM0E,UAAWM,UAAW5B,EAAU6B,gBAG7Db,WAAY,CACRc,UAAUC,GACN,OAAOA,M,6GCvER7J,+BAAgB,CAC3BG,WAAY,CAAE2J,wBACdnI,KAAMA,KAAA,CACFoI,UAAW,KACXC,QAAS,GACTC,OAAQ,GACR9I,UAAW,GACXC,YAAa,EACbiI,UAAW,GACXa,mBAAoB,KACpBC,MAAO,CACHC,KAAM,EACNC,OAAQ,GACRnB,UAAW,GACXD,YAAa,GACbM,QAAS,GACTe,oBAAoB,EACpBhB,cAAe,MACfD,UAAW,GACXO,WAAW,EACXb,QAAS,GACTR,iBAAkB,GAClBgC,QAAS,GACTC,SAAU,GACVC,UAAW,IAEfC,UAAW,GACX3J,OAAO,IAEX4J,UACQ3J,KAAK4J,OAAOC,OAAOC,aACnB9J,KAAK+I,UAAY/I,KAAK4J,OAAOC,OAAOC,WACpC9J,KAAKG,UAAY4J,SAAS,GAAG/J,KAAK4J,OAAOC,OAAOC,YAC5C9J,KAAKgK,YACLhK,KAAKiK,kBAELC,OAAMC,IAAI,iBAAkB,CAAEhK,UAAWH,KAAKG,YACzCiK,KAAKC,IACFrK,KAAKgJ,QAAUqB,EACV/H,qBAAQtC,KAAKgJ,UACdsB,iBAAUC,aAAavK,KAAKgJ,SAEhChJ,KAAKwK,oBAAoBJ,KAAK,KAC1BpK,KAAKyK,2BAA2BL,KAAK,KACjCpK,KAAKD,OAAQ,EACbC,KAAK0K,iBACNC,MAAOtJ,GAAMC,QAAQsJ,IAAIvJ,MAC7BsJ,MAAM,KACD3K,KAAKgK,aACLhK,KAAKiK,wBAOjCtF,SAAU,CACNkG,oBAA8B,OAAO7K,KAAK8K,wBAE9ClK,QAAS,CACL8J,eACI1K,KAAKkJ,oBAAqB,IAAI6B,MAAOC,WAEzChB,YACI,OAAQiB,OAAShJ,OAASiJ,OAAcjJ,OAE5CgJ,WACI,OAAOA,OAAShJ,OAEpBiJ,gBACI,OAAOA,OAAcjJ,OAEzBgI,kBAAe,IAAAkB,EACX,MAAMC,EAAUd,iBAAUe,SAASrL,KAAK+I,WAClCuC,EAAgB,OAAPF,QAAO,IAAPA,GAAqB,QAAdD,EAAPC,EAASG,oBAAY,IAAAJ,OAAA,EAArBA,EAAuBG,OACjCA,IACLtL,KAAKmJ,MAAMjB,UAAYoD,EAAOE,UAC9BxL,KAAKmJ,MAAMC,IAAMqC,IAAM1J,OAAeC,kBAAkB0J,KACpD1L,KAAKmJ,MAAMjB,UAAW,SAE1BlI,KAAKmJ,MAAMK,SAAW8B,EAAOK,iBAC7B3L,KAAKmJ,MAAMI,QAAU+B,EAAOM,gBAC5B5L,KAAKmJ,MAAMM,UAAY6B,EAAOO,8BAC9B7L,KAAKmJ,MAAME,OAASiC,EAAOjC,OAC3BrJ,KAAKD,OAAQ,EACbC,KAAK0K,iBAET,kCAAkCb,EAAO,IACrC,IAAIiC,EAAS,UACTnC,GAAU,EACVoC,EAAM,KACV,MAAMC,GAAU,IAAIjB,MAAOC,UACrBiB,GAAeD,EAAUhM,KAAKkJ,oBAAsB,IACpDgD,EAAUD,EAAc,GAC9B,IACI,MAAME,QAAqBtH,OAAoBuH,eAC3C,SAAUC,kBAERC,QAAoBzH,OAAoB0H,iBAC1C,cAAeL,GAEnBH,EAAM,UAAW/L,KAAKwM,WAAW3C,EAAO4C,cAAgBN,EAAcG,GACxE,MAAOjL,GAEL,OADAC,QAAQoL,MAAM,GAAGrL,GACV4B,eAAa,kCAExB,IAAKjD,KAAKkL,gBAAiB,CACvB,IACI,MAAMyB,EAAM,IAAI9H,OACZ7E,KAAKG,UACL0J,EAAO+C,gBACP5M,KAAKI,kBAEEuM,EAAI9J,yBACA8J,EAAI7J,oBAAoBiJ,KAC/BD,EAAS,WAGc,oBAApBjC,EAAOgD,gBACRhD,EAAOgD,SAASF,GAE1BhD,GAAU,EACZ,MAAOtI,GACLsI,GAAU,EACN,gCAAgCmD,KAAK,GAAGzL,GACxCyK,EAAS,gBAETA,EAAS,YACTxK,QAAQoL,MAAM,wCAAwCrL,IAG9D,GAAe,cAAXyK,EACA,OAAOiB,eAAY,yBAG3BzC,iBAAU0C,eAAe,CACrBC,aAAclB,EACd3R,GAAI4F,KAAK+I,UACTmE,aAAcpB,EACdxD,cAAetI,KAAK4J,OAAOlC,KAC3BkF,gBAAiB/C,EAAO+C,gBACxBO,KAAMtD,EAAOuD,SACbC,UAAWxD,EAAOwD,UAClB1D,WACDA,GACEE,EAAOyD,cAActN,KAAKuN,YAEnCC,aAAarH,EAAkB0D,EAAO,MAClC,MAAM4D,EAAc,GAmBpB,GAlBAA,EAAO3G,EAAU6B,cAAiBP,IAC9B,MAAQsF,GAAatF,EAAUuF,MAAM,KAC/BC,EAAWxK,kBAAKpD,KAAKqI,UAAW,CAAEqF,aAExC,OADIE,IAAU5N,KAAKI,WAAawN,EAASC,WAClC/G,EAAUe,UAErB4F,EAAO3G,EAAUqB,qBAAuB,KACpCnI,KAAKwD,QAAQ1B,KAAK,kDAAkD9B,KAAKG,WAClE2G,EAAUgH,MAErBL,EAAO3G,EAAUc,wBAA0B,KACvC5H,KAAKwD,QAAQ1B,KAAK,qBAAqB9B,KAAKG,WACrC2G,EAAUgH,MAErBL,EAAO3G,EAAUa,yBAA2B,KACxC3H,KAAKtB,uBACEoI,EAAUgH,MAEjB3H,KAASsH,EACT,OAAOA,EAAOtH,GAAO0D,IAG7B,iCACI,MAAMkE,EAAWC,eAAkBhO,KAAKmJ,MAAOjC,GAC/C,IAAI,MAAM5C,KAASyJ,EAAU,KAAAE,EAAAC,EACzB,MAAMC,EAAUJ,EAASzJ,GACzB,GAAW,OAAP6J,QAAO,IAAPA,GAAgB,QAATF,EAAPE,EAAS/G,eAAO,IAAA6G,GAAhBA,EAAkB5G,MAAO,KAAA+G,EACzB,MAAMtC,EAAS9L,KAAKwN,mBAA2B,OAAPW,QAAO,IAAPA,GAAgB,QAATC,EAAPD,EAAS/G,eAAO,IAAAgH,OAAA,EAAhBA,EAAkB/G,MAAMrH,KAAKmJ,SACrE,GAAI2C,IAAWhF,EAAUgH,KAAM,OAEnC,GAAW,OAAPK,QAAO,IAAPA,GAAgB,QAATD,EAAPC,EAAS/G,eAAO,IAAA8G,GAAhBA,EAAkB9F,UAAW,KAAAiG,EAC7B,MAAMjG,QAAyB,OAAP+F,QAAO,IAAPA,GAAgB,QAATE,EAAPF,EAAS/G,eAAO,IAAAiH,OAAA,EAAhBA,EAAkBjG,UAAUpI,KAAKmJ,QACzDnJ,KAAKwN,aAAapF,EAAUM,UAAWN,EAAUnG,UAI7D,0BACI,IACI,MAAMqM,QAAgBpE,OAAMC,IAAI,kBAAmB,CAAEhK,UAAWH,KAAKG,YACrEH,KAAKmJ,MAAMG,mBAAqBgF,EAAQC,YAAcxM,OAAeyM,eACrExO,KAAKmJ,MAAMpB,QAAUuG,EAAQvG,QAC7B/H,KAAKmJ,MAAM5B,iBAAmB+G,EAAQtG,UACxC,MAAO3G,GACLC,QAAQoL,MAAMrL,GACd0L,eAAY,GAAG1L,GAEnBrB,KAAKmJ,MAAMM,UAAYzJ,KAAKgJ,QAAQyF,eACpCzO,KAAKmJ,MAAMK,SAAWxJ,KAAKgJ,QAAQ0F,qBACnC1O,KAAKmJ,MAAMI,QAAUvJ,KAAKgJ,QAAQ2F,oBAClC3O,KAAKmJ,MAAMlB,YAAclG,OAAeC,iBACxChC,KAAKmJ,MAAMZ,QAAUxG,OAAe6M,mBACpC5O,KAAKmJ,MAAMP,UAAY7G,OAAe8G,QACtC7I,KAAKmJ,MAAMjB,UAAYlI,KAAKgJ,QAAQ6F,eACpC7O,KAAKmJ,MAAMC,IAAMpJ,KAAKgJ,QAAQ8F,SAC9B9O,KAAKmJ,MAAMb,cAAgBtI,KAAK4J,OAAOlC,KACjC1H,KAAK4J,OAAOlC,KAAKqH,WAAWC,cAC5B,MACFjN,OAAe8G,UACf7I,KAAKqI,gBAAkB6B,OAAMC,IAAI,aACjCnK,KAAKmJ,MAAMd,UAAYrI,KAAKqI,UACvBhD,KAAK,CAACC,EAAQC,KACX,MAAM0J,EAAY3J,EAAEoI,SAASsB,cACvBE,EAAY3J,EAAEmI,SAASsB,cAC7B,OAAOC,EAAYC,GAAa,EAAID,EAAYC,EAAa,EAAI,IAEpE3M,IAAK4M,IAAU,IAAAC,EACZ,IAAI1H,EAAO,GAAGyH,EAAEzB,SAChB,IAAKpL,qBAAS,OAAD6M,QAAC,IAADA,GAAS,QAARC,EAADD,EAAG7D,cAAM,IAAA8D,OAAA,EAATA,EAAWC,OAAQ,KAAAC,EAC5B,MAAQC,IAAuB,QAARD,EAAAH,EAAE7D,cAAM,IAAAgE,OAAA,EAARA,EAAUD,QAAS,GAC1C3H,GAAQ,KAAK6H,EAAWC,cAAcD,EAAWE,eAErD,OAAO/H,MAIvBgI,SAASC,EAAeC,EAAM,IAC1B,MAAO,CACHD,QACA1N,MAAO0N,EACPC,UAGRC,gBAAgBC,GACZ,OAAOA,EAAMvN,IAAIpF,GAAkB,kBAANA,GAA+B,kBAANA,EAC/C,CAAEwS,MAAOxS,EAAG8E,MAAO9E,GAAMA,IAGpC2N,sBACI,MAAO,sBAAsB9K,KAAK4J,OAAOC,OAAOC,YAEpDpL,uBACI,OAAOsB,KAAKwD,QAAQ1B,KAAK,CAACiO,KAAM/P,KAAK8K,yBAEzC,iBACI,IACI,MAAM1Q,EAAK4F,KAAK+I,WAAa/I,KAAKG,gBAC5BoN,eAASnT,EAAI4F,KAAKwD,QAASxD,KAAK4J,QACxC,MAAOvI,GACLC,QAAQoL,MAAM,kBAAqBrL,GACnCrB,KAAKtB,yBAGbsR,eACI,MAAO,CACH,CAAEL,MAAO,MAAO1N,MAAO,OACvB,CAAE0N,MAAO,KAAM1N,MAAO,QAG9BgO,cAAcN,EAAeC,EAAW,IACpC,MAAO,CACHD,QACA1N,MAAO,GACP2N,MAAO,IACAA,EACHxN,OAAQpC,KAAKgQ,kBAIzBE,WAAWC,GACP,OAAOA,EAAQ5N,IAAK6N,IACT,CAAET,MAAOS,EAAQnO,MAAOmO,MAGvCC,qBAAqBF,GACjB,MAAMG,EAAkB,GACxB,IAAI,MAAMF,KAAUD,GACS,mBAAdC,EAAO,IACVA,EAAO,KAGfE,EAAMxO,KAAK9B,KAAK0P,SAASU,EAAO,KAEpC,OAAOE,GAEXC,sBACI,MAAO,CACH,CAAEZ,MAAO,MAAO1N,MAAO,OACvB,CAAE0N,MAAO,KAAM1N,MAAO,MACtB,CAAE0N,MAAO,UAAW1N,MAAO,aAGnCuK,WAAWT,EAAUyE,EAAI,IACrB,MAAMpO,EAAc3E,OAAO2E,OAAO2J,GAC7B1J,OAAQtE,GAAWA,IAAMA,EAAEyS,MAAQA,GAAe,KAARA,IAC1ChO,OAAO,CAACC,EAAYC,KACjB,MAAM/B,EAAO+B,EAAIqJ,IAAMrJ,EAAIqJ,IAAMrJ,EAQjC,OAPI+N,MAAMC,QAAQ/P,GACd8B,EAAQA,EAAME,OAAOhC,GACE,oBAATA,EACd8B,EAAMX,KAAKnB,KAEX8B,EAAMX,KAAKnB,GAER8B,GACJ,IACX,OAAOM,QAAQC,IAAIZ,IAEvBuO,QAAQC,EAAiBC,GACrB,IACI,OAAOD,EAAIvO,OAAQlF,GAAW0T,EAAW1T,IAAI2B,OAAS,EACxD,MAAOuC,GACL,OAAO,IAGfyP,eAAehJ,GACX,IACI,IAAI,MAAM3K,KAAK2K,EAAY,CACvB,MAAMiJ,EAAYjJ,EAAW3K,KAE7B,GAAI4T,EAAW,OAAOA,GAE5B,MAAO1P,GACL,MAAO,CAACA,QC/UxB,MAAMuD,EAAc,EAEL,U,kDCHT,SAAU5J,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQY,yBAAcC,yBAAa6U,qCAAyB/V,EAAKgW,UAAW,CAC1EhI,OAAQhO,EAAKgO,OACbiI,YAAajW,EAAKiW,YAClBC,YAAalW,EAAKkW,YAClBC,sBAAuBnW,EAAKmW,sBAC5BC,WAAYpW,EAAK8D,SACjBA,SAAU9D,EAAKqW,eACfC,UAAWtW,EAAKuW,SACf,KAAM,GAAI,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN5FxS,+BAAgB,CAC3B0I,KAAM,kBACNvI,WAAY,CAAEsS,wBACdC,MAAO,CACH,WACA,WAEJ/Q,KAAMA,KAAA,CACFsQ,SAAU,sBAEdU,MAAO,CACHL,eAAgB,CACZ3P,KAAMiQ,UAEVV,YAAa,CACTvP,KAAMkQ,QACNzV,SAAS,GAEb+U,YAAa,CACTxP,KAAMmQ,QAEV7I,OAAQ,CACJtH,KAAMlE,OACNsU,UAAU,GAEdX,sBAAuB,CACnBzP,KAAMmQ,OACNC,UAAU,IAGlBnR,QAAS,CACL7B,SAASqO,EAAeX,GACpBzM,KAAKgS,MAAM,WAAY5E,EAAUX,IAErC+E,QAAQrU,GACJ6C,KAAKgS,MAAM,UAAW7U,O,qBCnClC,MAAMyH,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS5J,KAErD,U,8ECsBf,SAASiX,EAAY9I,EAA4BrB,GAC7C,MAAM3B,EAAQ,GACR+L,EAAU,EAAE,EAAG,GAAI,UAAMC,GAE/B,IAAI,MAAMC,KAAQtK,EAAY,CAC1B,KAAMsK,KAAQjJ,GACV,SAEJ,MAAMlH,EAAQkH,EAAMiJ,GAChBF,EAAQG,SAASpQ,GACjBkE,EAAMrE,MAAK,GAIfqE,EAAMrE,KAAKgG,EAAWsK,GAAMnQ,EAAOkH,IAEvC,OAAOhD,EAAMmM,MAAMT,SAQvB,SAASU,EAAexE,GACpB,OAAOA,EAAS1I,KAAK,CAACC,EAAGC,IAAOD,EAAE6B,UAAY5B,EAAE4B,UAAa7B,EAAE6B,SAAW5B,EAAE4B,UAAY,EAAI,GAGhG,SAASqL,EAAazE,GAClB,OAAOA,EAAS1I,KAAK,CAACC,EAAGC,IAAOD,EAAEmN,QAAUlN,EAAEkN,QAAWnN,EAAEmN,OAASlN,EAAEkN,QAAU,EAAI,GAgBlF,SAAUzE,EACZ7E,EACAuJ,EACAC,EAAO,GACPC,EAAY,GACZC,EAAO,YACP,MAAMC,EAAU,GAChB,IAAI,MAAMC,KAAkBL,EAAY,CACpC,MAAM/R,EAA2B+R,EAAWK,GACtCC,EAAoB,CACrBrS,EAAKgS,QAAUA,GAAUhS,EAAKgS,QAAUA,EACxChS,EAAKiS,aAAeA,GACdjS,EAAKiS,aAAeA,GAG3BI,EAAkBC,KAAKpB,UAIvBI,EAAY9I,EAAOxI,EAAKmH,cACxBnH,EAAKuS,MAAQH,EACTpS,EAAKvC,cACLuC,EAAKvC,YAAY+U,KAAOxS,EAAKvC,YAAYgV,KAAKjK,IAElD2J,EAAQhR,KAAKnB,IAGrB,MAAkB,aAAXkS,EAAwBN,EAAeO,GAAWN,EAAaM,K,kCCrG1E","file":"js/chunk-76965a0c.199ea011.js","sourcesContent":["import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createBlock as _createBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-7217b18a\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", { class: \"his-title\" }, \" Prescribe BP drugs \", -1))\nconst _hoisted_2 = {\n  key: 0,\n  class: \"view-port-content\"\n}\nconst _hoisted_3 = {\n  id: \"main-table\",\n  style: {\"width\":\"100%\"}\n}\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", null, \" \", -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"td\", { class: \"td-remaining td-title\" }, [\n  /*#__PURE__*/_createElementVNode(\"span\", null, \"New/Current\")\n], -1))\nconst _hoisted_6 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"td\", { class: \"td-remaining td-title\" }, [\n  /*#__PURE__*/_createElementVNode(\"span\", null, \" \")\n], -1))\nconst _hoisted_7 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_8 = {\n  id: \"table-notes\",\n  style: {\"width\":\"100%\"}\n}\nconst _hoisted_9 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"caption\", { style: {\"font-size\":\"1.2em\"} }, \" Notes \", -1))\nconst _hoisted_10 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_11 = {\n  class: \"table-inner-notes\",\n  id: \"notes-HCZ\"\n}\nconst _hoisted_12 = { class: \"date-td today-td\" }\nconst _hoisted_13 = { class: \"date-td today-td\" }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_col = _resolveComponent(\"ion-col\")!\n  const _component_ion_row = _resolveComponent(\"ion-row\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_checkbox = _resolveComponent(\"ion-checkbox\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_view_port = _resolveComponent(\"view-port\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_header, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_toolbar, null, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_row, null, {\n                default: _withCtx(() => [\n                  _createVNode(_component_ion_col, null, {\n                    default: _withCtx(() => [\n                      _hoisted_1\n                    ]),\n                    _: 1\n                  })\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_content, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_view_port, null, {\n            default: _withCtx(() => [\n              (_ctx.drugs)\n                ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n                    _createElementVNode(\"table\", _hoisted_3, [\n                      _createElementVNode(\"tr\", null, [\n                        _hoisted_4,\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs, (item, itemIndex) => {\n                          return (_openBlock(), _createElementBlock(\"th\", { key: itemIndex }, [\n                            _createTextVNode(_toDisplayString(itemIndex) + \" \", 1),\n                            _createVNode(_component_ion_row, null, {\n                              default: _withCtx(() => [\n                                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(item.drugs, (drug, drugIndex) => {\n                                  return (_openBlock(), _createBlock(_component_ion_col, {\n                                    class: \"col-borders\",\n                                    key: drugIndex\n                                  }, {\n                                    default: _withCtx(() => [\n                                      _createTextVNode(_toDisplayString(drug.amount || '0mg'), 1)\n                                    ]),\n                                    _: 2\n                                  }, 1024))\n                                }), 128))\n                              ]),\n                              _: 2\n                            }, 1024)\n                          ]))\n                        }), 128))\n                      ]),\n                      _createElementVNode(\"tr\", null, [\n                        _hoisted_5,\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs, (item, itemIndex) => {\n                          return (_openBlock(), _createElementBlock(\"td\", {\n                            key: itemIndex,\n                            class: \"td-current td-value\"\n                          }, [\n                            _createVNode(_component_ion_row, null, {\n                              default: _withCtx(() => [\n                                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(item.drugs, (drug, i) => {\n                                  return (_openBlock(), _createBlock(_component_ion_col, { key: i }, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_checkbox, {\n                                        checked: drug.selected,\n                                        onIonChange: ($event: any) => (_ctx.selectDrug(itemIndex, i, $event))\n                                      }, null, 8, [\"checked\", \"onIonChange\"])\n                                    ]),\n                                    _: 2\n                                  }, 1024))\n                                }), 128))\n                              ]),\n                              _: 2\n                            }, 1024)\n                          ]))\n                        }), 128))\n                      ]),\n                      _createElementVNode(\"tr\", null, [\n                        _hoisted_6,\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(Object.keys(_ctx.drugs), (drug, ind) => {\n                          return (_openBlock(), _createElementBlock(\"td\", {\n                            class: \"td-remaining td-value\",\n                            key: ind\n                          }, [\n                            _createVNode(_component_ion_row, null, {\n                              default: _withCtx(() => [\n                                _createVNode(_component_ion_col, null, {\n                                  default: _withCtx(() => [\n                                    _createVNode(_component_ion_button, {\n                                      onClick: ($event: any) => (_ctx.launchNotePad(drug)),\n                                      color: \"warning\"\n                                    }, {\n                                      default: _withCtx(() => [\n                                        _createTextVNode(\" Add notes \")\n                                      ]),\n                                      _: 2\n                                    }, 1032, [\"onClick\"])\n                                  ]),\n                                  _: 2\n                                }, 1024)\n                              ]),\n                              _: 2\n                            }, 1024)\n                          ]))\n                        }), 128))\n                      ])\n                    ]),\n                    _hoisted_7,\n                    _createElementVNode(\"table\", _hoisted_8, [\n                      _hoisted_9,\n                      _hoisted_10,\n                      _createElementVNode(\"tr\", null, [\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs, (d, drugIndex) => {\n                          return (_openBlock(), _createElementBlock(\"th\", {\n                            style: {\"width\":\"25%\"},\n                            key: drugIndex\n                          }, [\n                            _createElementVNode(\"span\", null, _toDisplayString(drugIndex), 1)\n                          ]))\n                        }), 128))\n                      ]),\n                      _createElementVNode(\"tr\", null, [\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(Object.keys(_ctx.drugs), (drug, ind) => {\n                          return (_openBlock(), _createElementBlock(\"td\", {\n                            id: \"HCZ\",\n                            style: {\"padding-top\":\"2px !important\"},\n                            valign: \"top\",\n                            key: ind\n                          }, [\n                            _createElementVNode(\"table\", _hoisted_11, [\n                              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs[drug].notes, (note, i) => {\n                                return (_openBlock(), _createElementBlock(\"tr\", { key: i }, [\n                                  _createElementVNode(\"td\", _hoisted_12, _toDisplayString(note.date), 1),\n                                  _createElementVNode(\"td\", _hoisted_13, _toDisplayString(note.description), 1),\n                                  _createElementVNode(\"td\", null, [\n                                    (note.isNewNote)\n                                      ? (_openBlock(), _createBlock(_component_ion_button, {\n                                          key: 0,\n                                          color: \"danger\",\n                                          onClick: ($event: any) => (_ctx.removeNote(drug, i))\n                                        }, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(\" X \")\n                                          ]),\n                                          _: 2\n                                        }, 1032, [\"onClick\"]))\n                                      : _createCommentVNode(\"\", true)\n                                  ])\n                                ]))\n                              }), 128))\n                            ])\n                          ]))\n                        }), 128))\n                      ])\n                    ])\n                  ]))\n                : _createCommentVNode(\"\", true)\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_footer, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_toolbar, { color: \"dark\" }, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_button, {\n                size: \"large\",\n                color: \"danger\",\n                slot: \"start\",\n                onClick: _ctx.gotoPatientDashboard\n              }, {\n                default: _withCtx(() => [\n                  _createTextVNode(\" cancel \")\n                ]),\n                _: 1\n              }, 8, [\"onClick\"]),\n              (_ctx.canClearHtnSessionPrescription)\n                ? (_openBlock(), _createBlock(_component_ion_button, {\n                    key: 0,\n                    size: \"large\",\n                    color: \"warning\",\n                    slot: \"end\",\n                    onClick: _ctx.clearPrescriptionInSession\n                  }, {\n                    default: _withCtx(() => [\n                      _createTextVNode(\" Clear Session Prescription \")\n                    ]),\n                    _: 1\n                  }, 8, [\"onClick\"]))\n                : _createCommentVNode(\"\", true),\n              (_ctx.selectedDrugs && _ctx.selectedDrugs.length > 0)\n                ? (_openBlock(), _createBlock(_component_ion_button, {\n                    key: 1,\n                    size: \"large\",\n                    color: \"success\",\n                    slot: \"end\",\n                    onClick: _ctx.onFinish\n                  }, {\n                    default: _withCtx(() => [\n                      _createTextVNode(\" Continue \")\n                    ]),\n                    _: 1\n                  }, 8, [\"onClick\"]))\n                : _createCommentVNode(\"\", true)\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport ViewPort from \"@/components/DataViews/ViewPort.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field } from '@/components/Forms/FieldInterface'\nimport TouchField from \"@/components/Forms/SIngleTouchField.vue\"\n\nimport {\n  IonToolbar,\n  IonHeader,\n  IonContent,\n  IonRow,\n  IonCol,\n  IonButton,\n  modalController,\n  IonFooter,\n  IonPage,\n  IonCheckbox,\n} from \"@ionic/vue\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { BPManagementService, HTN_SESSION_KEY } from \"../../services/htn_service\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { isEmpty, find } from \"lodash\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: {\n    ViewPort,\n    IonToolbar,\n    IonHeader,\n    IonContent,\n    IonRow,\n    IonButton,\n    IonCol,\n    IonFooter,\n    IonPage,\n    IonCheckbox\n  },\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n          this.HTN = new BPManagementService(this.patientID, this.providerID);\n          this.drugs = this.HTN.getDrugs();\n          const { drugs, notes} = await this.HTN.getCurrentDrugs();\n          this.setPreviousBpDrugs(drugs)\n          this.setPreviousBpNotes(notes)\n          this.canClearHtnSessionPrescription = this.patientHasHtnSessionKey()\n        }\n      },\n      immediate: true\n    },\n  },\n  data: () => {\n    return {\n      HTN: {} as any,\n      drugs: null as any,\n      canClearHtnSessionPrescription: false\n    };\n  },\n  methods: {\n    clearPrescriptionInSession() {\n      sessionStorage.removeItem(HTN_SESSION_KEY.Prescription)\n      this.canClearHtnSessionPrescription = false\n    },\n    patientHasHtnSessionKey() {\n      try {\n        const sessionData = sessionStorage.getItem(HTN_SESSION_KEY.Prescription)\n        if (sessionData) {\n          const data = JSON.parse(sessionData)\n          return data[this.patientID]\n        }\n      } catch (e) {\n        console.warn(e)\n      }\n      return false\n    },\n    removeNote(d: any, i: any, ind: any) {\n      this.drugs[d].notes.splice(ind, 1);\n    },\n    launchNotePad(drugIndex: any) {\n      this.showModal({\n        id: 'note',\n        helpText: `Add notes for ${drugIndex}`,\n        type: FieldType.TT_TEXT\n      }, \n      (data: any) => {\n        if (data) this.drugs[drugIndex].notes.push({\n          date: ProgramService.getSessionDate(),\n          description: data.value || '',\n          drugID: this.drugs[drugIndex].drugs[0].drugID,\n          isNewNote: true\n        })\n      })\n    },\n    async onFinish() {\n      const drugNotes = Object.values(this.drugs)\n        .filter((d: any) => !isEmpty(d.notes))\n        .map((d: any) => d.notes)\n        .reduce((accum: any, cur: any) => accum.concat(cur), [])\n        .filter((n: any) => n.isNewNote)\n        .map((note: any) => this.HTN.buildObs('Clinician notes', {\n          'value_text': note.description, \n          'value_drug': note.drugID\n        }))\n      if (!isEmpty(drugNotes)) {\n        try {\n          await this.HTN.createEncounter()\n          await this.HTN.saveObservationList(await (Promise.all(drugNotes)))\n        } catch (e) {\n          return toastWarning(`Unable to save notes ${e}`)\n        }\n      }\n      this.gotoTreatment()\n    },\n    gotoTreatment() {\n      const htnDrugs = this.selectedDrugs.map((selected: any) =>  \n        find( BPManagementService.htnDrugReferences(), { \n          'drug_id': selected.drugID\n        }))\n      const data: any = {}\n      data[this.patientID] = htnDrugs\n      sessionStorage.setItem(HTN_SESSION_KEY.Prescription, JSON.stringify(data))\n      this.$router.push(`/art/encounters/prescriptions/${this.patientID}`)\n    },\n    async showModal(currentField: Field, onFinish: Function) {\n      const modal = await modalController.create({\n        component: TouchField,\n        backdropDismiss: false,\n        cssClass: \"full-modal\",\n        componentProps: {\n          dismissType: 'modal',\n          currentField,\n          onFinish\n        }\n      })\n      modal.present();\n    },\n    setPreviousBpNotes(notes: Record<string, any>) {\n      for (const drugIndex in notes) {\n        this.drugs[drugIndex].notes = Object.keys(notes[drugIndex])\n          .map((date: string) => notes[drugIndex][date].map(\n            (description: string) => ({ date, description, isNewNote: false }))\n          ).reduce(\n            (accum: any[], cur: any[]) => accum.concat(cur), []\n          )\n      }\n    },\n    setPreviousBpDrugs(drugs: any) {\n      drugs.forEach((drug: any) => {\n        for (const key in this.drugs) {\n          this.drugs[key].drugs.forEach((element: any, index: any) => {\n            if (drug.drug_id === element.drugID) {\n              this.drugs[key].drugs[index].current = true;\n              this.drugs[key].drugs[index].selected = true;\n              this.drugs[key].selected = drug.drug_id;\n            }\n          });\n        }\n      });\n    },\n    selectDrug(key: any, index: any, event: any) {\n      this.drugs[key].drugs.forEach((d: any, i: any) => {\n        this.drugs[key].drugs[i].selected = false;\n      });\n      this.drugs[key].drugs[index].selected = event.detail.checked;\n    }\n  },\n  computed: {\n    selectedDrugs(): any {\n      if (this.drugs) return Object.values(this.drugs)\n        .map((d: any) => d.drugs)\n        .reduce((accum: any, cur: any) => accum.concat(cur), [])\n        .filter((d: any) => d.selected)\n      return []\n    }\n  },\n});\n","import { render } from \"./BPDrug_management.vue?vue&type=template&id=7217b18a&scoped=true&ts=true\"\nimport script from \"./BPDrug_management.vue?vue&type=script&lang=ts\"\nexport * from \"./BPDrug_management.vue?vue&type=script&lang=ts\"\n\nimport \"./BPDrug_management.vue?vue&type=style&index=0&id=7217b18a&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-7217b18a\"]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ObservationService } from \"@/services/observation_service\"\n\nexport enum HTN_SESSION_KEY {\n  Prescription = \"htnPrescription\"\n}\n\nexport class BPManagementService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n      super(patientID, 48, providerID) //TODO: Use encounter type reference name'\n    }\n\n    static getBpGrade(sbp: number, dbp: number) {\n      if ((sbp < 140) && (dbp < 90)) {\n        return \"normal\"\n      }\n      else if ((sbp >= 140 && sbp < 160) || (dbp >= 100 && dbp < 110)) {\n        return \"grade 1\"\n      }\n      else if ((sbp >= 180 && dbp > 110) || sbp >= 180) {\n        return \"grade 3\"\n      }\n      else if ((sbp >= 160 && sbp < 180) || (dbp >= 110)) {\n        return \"grade 2\"\n      }\n      return 'N/A'\n    }\n\n    /**\n     * BP is normointensive if two most recent consecutive tests are normal\n     * @param bpTrail \n     * @returns\n    */\n    static isBpNormotensive(bpTrail: any) {\n      const [ firstRecentGrade, secondRecentGrade ] = Object.values(bpTrail)\n        .sort((a: any, b: any) => a.date < b.date ? 1 : 0)\n        .map((bp: any) => this.getBpGrade(bp.sbp, bp.dbp))\n      return firstRecentGrade === 'normal' && secondRecentGrade === 'normal'\n    }\n\n    getSystolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Systolic blood pressure')\n    }\n\n    getDiastolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Diastolic blood pressure')\n    }\n\n    async onBpDrugs() {\n      const query = await ObservationService.getFirstValueCoded(this.patientID, 'Treatment status')\n      return query ? query === 'Yes' : false\n    }\n  \n    async getBPTrail() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/bp_trail`);\n    }\n    async getCurrentDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/current_bp_drugs`);\n    }\n    async getLastDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/last_bp_drugs_dispensation`);\n    }\n    async getAdherence(drugID: number, pills: number) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/remaining_bp_drugs`, {\n        'drug_id': drugID,\n        pills: pills\n      });\n    }\n    async enrollPatient(state: any) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/update_or_create_htn_state`, state);\n    }\n    static htnDrugReferences() {\n      return [\n        { \n          'drug_id': 275,\n          'drug_name': \"HCZ (25mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 942,\n          'drug_name': \"Enalapril (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 943,\n          'drug_name': \"Enalapril (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 558,\n          'drug_name': \"Amlodipine (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 559,\n          'drug_name': \"Amlodipine (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 117,\n          'drug_name': \"Atenolol (50mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 11,\n          'drug_name': \"Atenolol(100mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        }\n      ]\n    }\n    getDrugs() {\n        return {\n        HCZ: {\n          drugs: [\n            {\n              drugName: \"HCZ (25mg tablet)\",\n              drugID: 275,\n              amount: '25mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Enalapril: {\n          drugs: [\n            {\n              drugName: \"Enalapril (5mg tablet)\",\n              drugID: 942,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Enalapril (10mg tablet)\",\n              drugID: 943,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Amlodipine: {\n          drugs: [\n            {\n              drugName: \"Amlodipine (5mg tablet)\",\n              drugID: 558,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Amlodipine (10mg tablet)\",\n              drugID: 559,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Atenolol: {\n          drugs: [\n            {\n              drugName: \"Atenolol (50mg tablet)\",\n              drugID: 117,\n              amount: '50mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Atenolol(100mg tablet)\",\n              drugID: 11,\n              amount: '100mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n      }\n    }\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./BPDrug_management.vue?vue&type=style&index=0&id=7217b18a&scoped=true&lang=css\""],"sourceRoot":""}