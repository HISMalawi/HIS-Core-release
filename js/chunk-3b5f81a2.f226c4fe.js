(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-3b5f81a2"],{"32b3":function(t,e,i){"use strict";i.d(e,"b",(function(){return n})),i.d(e,"a",(function(){return s}));var n,r=i("cc6f"),a=i("7957");(function(t){t["Prescription"]="htnPrescription"})(n||(n={}));class s extends r["a"]{constructor(t,e){super(t,48,e)}static getBpGrade(t,e){return t<140&&e<90?"normal":t>=140&&t<160||e>=100&&e<110?"grade 1":t>=180&&e>110||t>=180?"grade 3":t>=160&&t<180||e>=110?"grade 2":"N/A"}static isBpNormotensive(t){const[e,i]=Object.values(t).sort((t,e)=>t.date<e.date?1:0).map(t=>this.getBpGrade(t.sbp,t.dbp));return"normal"===e&&"normal"===i}getSystolicBp(){return a["a"].getFirstValueNumber(this.patientID,"Systolic blood pressure")}getDiastolicBp(){return a["a"].getFirstValueNumber(this.patientID,"Diastolic blood pressure")}async onBpDrugs(){const t=await a["a"].getFirstValueCoded(this.patientID,"Treatment status");return!!t&&"Yes"===t}async getBPTrail(){return await r["a"].getJson(`/patients/${this.patientID}/bp_trail`)}async getCurrentDrugs(){return await r["a"].getJson(`/patients/${this.patientID}/current_bp_drugs`)}async getLastDrugs(){return await r["a"].getJson(`/patients/${this.patientID}/last_bp_drugs_dispensation`)}async getAdherence(t,e){return await r["a"].postJson(`/patients/${this.patientID}/remaining_bp_drugs`,{drug_id:t,pills:e})}async enrollPatient(t){return await r["a"].postJson(`/patients/${this.patientID}/update_or_create_htn_state`,t)}static htnDrugReferences(){return[{drug_id:275,drug_name:"HCZ (25mg tablet)",units:"tab(s)",am:0,noon:0,pm:1,frequency:"Daily (QOD)"},{drug_id:942,drug_name:"Enalapril (5mg tablet)",units:"tab(s)",am:0,noon:0,pm:1,frequency:"Daily (QOD)"},{drug_id:943,drug_name:"Enalapril (10mg tablet)",units:"tab(s)",am:0,noon:0,pm:1,frequency:"Daily (QOD)"},{drug_id:558,drug_name:"Amlodipine (5mg tablet)",units:"tab(s)",am:0,noon:0,pm:1,frequency:"Daily (QOD)"},{drug_id:559,drug_name:"Amlodipine (10mg tablet)",units:"tab(s)",am:0,noon:0,pm:1,frequency:"Daily (QOD)"},{drug_id:117,drug_name:"Atenolol (50mg tablet)",units:"tab(s)",am:0,noon:0,pm:1,frequency:"Daily (QOD)"},{drug_id:11,drug_name:"Atenolol(100mg tablet)",units:"tab(s)",am:0,noon:0,pm:1,frequency:"Daily (QOD)"}]}getDrugs(){return{HCZ:{drugs:[{drugName:"HCZ (25mg tablet)",drugID:275,amount:"25mg",current:!1,selected:!1,isChecked:!1,dispensed:null,expectedRemaining:null,adherence:null}],selected:null,notes:[]},Enalapril:{drugs:[{drugName:"Enalapril (5mg tablet)",drugID:942,amount:"5mg",current:!1,selected:!1,isChecked:!1,dispensed:null,expectedRemaining:null,adherence:null,remaining:null},{drugName:"Enalapril (10mg tablet)",drugID:943,amount:"10mg",current:!1,selected:!1,isChecked:!1,dispensed:null,expectedRemaining:null,adherence:null,remaining:null}],selected:null,notes:[]},Amlodipine:{drugs:[{drugName:"Amlodipine (5mg tablet)",drugID:558,amount:"5mg",current:!1,selected:!1,isChecked:!1,dispensed:null,expectedRemaining:null,adherence:null,remaining:null},{drugName:"Amlodipine (10mg tablet)",drugID:559,amount:"10mg",current:!1,selected:!1,isChecked:!1,dispensed:null,expectedRemaining:null,adherence:null,remaining:null}],selected:null,notes:[]},Atenolol:{drugs:[{drugName:"Atenolol (50mg tablet)",drugID:117,amount:"50mg",current:!1,selected:!1,isChecked:!1,dispensed:null,expectedRemaining:null,adherence:null,remaining:null},{drugName:"Atenolol(100mg tablet)",drugID:11,amount:"100mg",current:!1,selected:!1,isChecked:!1,dispensed:null,expectedRemaining:null,adherence:null,remaining:null}],selected:null,notes:[]}}}}},"71c3":function(t,e,i){"use strict";i.d(e,"a",(function(){return r}));var n=i("1c74");class r extends n["e"]{constructor(){super()}static create(t){return this.postJson("drug_orders",t)}static updateDispensationOrders(t){return this.postJson("dispensations",{program_id:this.getProgramID(),dispensations:t.map(t=>({date:this.getSessionDate(),drug_order_id:t["order_id"],quantity:t["quantity"]}))})}static getDrugOrderHistory(t){return this.getJson("drug_orders",{patient_id:t})}static getDrugOrders(t){return this.getJson("drug_orders",{patient_id:t,date:this.getSessionDate(),program_id:this.getProgramID()})}static getAllDrugOrders(t,e=1e3){return this.getJson("drug_orders",{patient_id:t,program_id:n["e"].getProgramID(),page_size:e})}static getLastDrugsReceived(t){return this.getJson(`patients/${t}/last_drugs_received`,{date:this.getSessionDate(),program_id:this.getProgramID()})}static getDrugDosages(t,e,i=this.getSessionDate()){const n={drug_id:e,date:i};return this.getJson(`programs/${this.getProgramID()}/patients/${t}/drug_doses`,n)}static getOrderByPatient(t,e){return this.getJson("/drug_orders",{patient_id:t,program_id:this.getProgramID(),...e})}}},"7d94":function(t,e,i){"use strict";i.r(e);var n=i("7a23");function r(t,e,i,r,a,s){const o=Object(n["resolveComponent"])("his-standard-form");return Object(n["openBlock"])(),Object(n["createBlock"])(o,{skipSummary:!0,onOnIndex:e[1]||(e[1]=e=>t.fieldComponent=""),activeField:t.fieldComponent,cancelDestinationPath:t.cancelDestination,fields:t.fields,onFinishAction:t.onSubmit},null,8,["activeField","cancelDestinationPath","fields","onFinishAction"])}var a,s,o,c=i("d95e"),d=i("2706"),l=i("dac2"),g=i("b5e4"),u=i("9283"),m=i("c21d"),h=i("2ef0"),p=i("7365"),f=(i("caad"),i("7f35"));(function(t){t["ARV_REGIMENS"]="arv_regimens",t["INTERVAL_SELECTION"]="next_visit_interval"})(a||(a={})),function(t){t["EXIT"]="exit",t["CONTINUE"]="continue"}(s||(s={})),function(t){t["ON_VALUE"]="onValue",t["ON_BUILD"]="onBuild",t["BEFORE_NEXT"]="beforeNext"}(o||(o={}));const b={"Do not prescribe LPV regimens together with 3HP":{priority:1,actions:{alert:async({regimenName:t})=>(await Object(f["a"])("3HP - LPV/r conflict",t,"Regimens containing LPV/r <b>cannot</b> be prescribed together with 3HP",[{name:"Close",slot:"end",color:"danger"}],"his-danger-color"),s.EXIT)},target:a.ARV_REGIMENS,targetEvent:o.ON_VALUE,conditions:{regimenCode(t){return[7,8,9,10,11,12].includes(t)},medicationOrders(t){return t.filter(t=>!!(""+t).match(/3hp/i)).length>=1}}},"Check for any adverse effects or contraindications associated with the regimen":{priority:1,actions:{alert:async({regimenCodeStr:t,sideEffectsTable:e})=>{const{columns:i,rows:n}=e,r=await Object(f["d"])("Contraindications / Side effects for "+t,"",i,n,[{name:"Select other regimen",slot:"start"},{name:"Keep selected regimen",slot:"end",color:"danger"}],"his-danger-color");return"Select other regimen"===r?s.EXIT:s.CONTINUE}},target:a.ARV_REGIMENS,targetEvent:o.BEFORE_NEXT,conditions:{hasSideEffects(t){return t},lastSideEffectDate(t,{currentDate:e}){return t>=e}}},"Recommend 2nd line regimen to children under 3":{priority:1,actions:{alert:async()=>{const t=await Object(f["b"])("Recommendation","",["Children under 3 years often have a high viral load and may be infected with drug-resistant HIV from previous exposure to ARVs (mother's ART and/or infant nevirapine prophylaxis)","Therefore, children under <b>3 years</b> respond better when <b>started immediately on 2nd line regimen</b> (Regimen <b>11</b>)"],[{name:"Select another regimen",slot:"start"},{name:"Keep selected regimen",slot:"end",color:"danger"}],"his-warning-color");return"Select another regimen"===t?s.EXIT:s.CONTINUE}},target:a.ARV_REGIMENS,targetEvent:o.BEFORE_NEXT,conditions:{age(t){return t<3},regimenCode(t){return 11!=t}}},"Provide a reason for switching regimens when patient already has one":{priority:1,actions:{alert:async t=>{const e=await Object(f["c"])(`Are you sure you want to replace ${t.currentRegimenStr}?`,"Specify reason for switching regimen",["Policy change","Ease of administration (pill burden, swallowing)","Drug drug interaction","Pregnancy intention","Side effects","Treatment failure","Weight Change","Other"],[{name:"Cancel",slot:"start",color:"danger"},{name:"Continue",slot:"end",role:"action"}]);return e.selection&&"Cancel"!=e.action?(t.reasonForSwitch=e.selection,s.CONTINUE):s.EXIT}},target:a.ARV_REGIMENS,targetEvent:o.ON_VALUE,conditions:{regimenCode(t,{currentRegimenCode:e}){return-1!=e&&t!=e}}},"Provide 14 day starter pack for LPV regimens for children under 3 years old":{priority:3,actions:{alert:async t=>{const e=await Object(f["a"])("Starter pack needed for 14 days",""+t.treatmentInitiationState,""+t.regimenName,[{name:"Cancel",slot:"start",color:"danger"},{name:"Prescribe starter pack",slot:"end"}],"his-info-color");return"Prescribe starter pack"===e?(t.starterPackNeeded=!0,s.CONTINUE):s.EXIT}},target:a.ARV_REGIMENS,targetEvent:o.BEFORE_NEXT,conditions:{age(t){return t<3},regimenCode(t){return 11===t},treatmentInitiationState(t){return["Initiation","Re-initiation"].includes(t)}}},"Provide 14 day starter pack for NVP based regimens on newly initiated/re-initiation patients":{priority:3,actions:{alert:async t=>{const e=await Object(f["a"])("Starter pack needed for 14 days",""+t.treatmentInitiationState,""+t.regimenName,[{name:"Cancel",slot:"start",color:"danger"},{name:"Prescribe starter pack",slot:"end"}],"his-info-color");return"Prescribe starter pack"===e?(t.starterPackNeeded=!0,s.CONTINUE):s.EXIT}},target:a.ARV_REGIMENS,targetEvent:o.BEFORE_NEXT,conditions:{regimenCode(t){return[0,2,6].includes(t)},treatmentInitiationState(t){return["Initiation","Re-initiation"].includes(t)}}},"Ask to reuse hanging pills if any":{priority:5,actions:{alert:async t=>{const e=await Object(f["a"])("Hanging pills recommendation","Add hanging pills?","",[{name:"No",slot:"start",color:"warning"},{name:"Yes",slot:"end"}],"his-info-color");return t.hangingPillsStatus="Yes"===e?"Optimize - including hanging pills":"Exact - excluding hanging pills",s.CONTINUE}},target:a.INTERVAL_SELECTION,targetEvent:o.BEFORE_NEXT,conditions:{drugs(t,{hangingPills:e}){const i=t.map(t=>e.includes(t));return i.some(Boolean)}}},"Provide warning of use of DTG regimen to women of reproductive age":{priority:2,actions:{alert:async({regimenName:t})=>{const e=await Object(f["a"])("Use of DTG or EFV in women of reproductive age",t,["There is currently <u>no confirmation</u>","that <b>DTG</b> is safe in <u>very early pregnancy</u>","DTG-based regimens are therefore not used as standard 1st line regimens for","<u>girls and women</u> who may get pregnancy"].join(" "),[{name:"Select another regimen",slot:"start"},{name:"Continue with regimen",slot:"end",color:"danger"}],"his-danger-color");return"Select another regimen"===e?s.EXIT:s.CONTINUE}},target:a.ARV_REGIMENS,targetEvent:o.BEFORE_NEXT,conditions:{regimenCode(t){return t>=12},isChildBearing(t){return t}}},"Provide pallet options for LPV regimens for patient's whose weight is between 3 and 25 kgs":{priority:6,actions:{alert:async t=>{const e=await Object(f["a"])("Pellets (cups) / Tabs","","Prescribe LPV/r in <b>Pellets (cups)</b> or <b>Tablets</b>?",[{name:"Granules",slot:"start"},{name:"Pellets",slot:"end"},{name:"Tabs",slot:"end"}],"his-info-color");return t.lpvType=e.toLowerCase(),s.CONTINUE}},target:a.ARV_REGIMENS,targetEvent:o.BEFORE_NEXT,conditions:{weight(t){return t>=3&&t<=25},regimenCode(t){return 11===t||9===t}}},"Provide 14 day interval for NVP or LVP Regimen starter pack":{priority:1,data:{enabled:!1},target:a.INTERVAL_SELECTION,targetEvent:o.ON_BUILD,conditions:{prescriptionType(t){return"Regimen"===t},selectedInterval(t){return t>14},starterPackNeeded(t){return t},regimenCode(t){return[0,2,6,11].includes(t)}}},"Provide intervals upto 1 month, 2nd up to 2 months, and 3rd up to 6 months for Patients receiving TPT":{priority:2,data:{enabled:!1},target:a.INTERVAL_SELECTION,targetEvent:o.ON_BUILD,conditions:{prescriptionType(t){return"Regimen"===t},medicationOrders(t){return t.map(t=>!!(""+t).match(/3hp/i)).some(Boolean)},tptPrescriptionCount(t,{selectedInterval:e}){return Math.round(e/30)>t}}}},E={"Rifapentine or isoniazid should be taken weekly":{concept:"Weekly (QW)",priority:1,conditions:{drug(t){return(""+t).match(/Rifapentine|Isoniazid/i)}}},"Use daily frequency for any other drugs":{concept:"Daily (QOD)",priority:2,conditions:{drug(t){return!(""+t).match(/Rifapentine|Isoniazid/i)}}}};var _=i("32b3"),D=i("ad60"),I=i("9ceb"),y=i("8e8b");const v={style:{fontSize:"1.3rem !important",borderBottom:"solid 2px #ccc",color:"black",background:"white"}};var T=Object(n["defineComponent"])({mixins:[p["a"]],data:()=>({drugs:[],prescription:{},patientToolbar:[],fieldComponent:"",regimenExtras:[],programInfo:[],facts:{age:-1,gender:"",weight:-1,currentDate:"",isChildBearing:!1,prescriptionType:"",tptPrescriptionCount:0,currentRegimenCode:-1,currentRegimenStr:"",drug:"",drugs:[],contraindications:{},hasSideEffects:!1,sideEffectsTable:{},lastSideEffectDate:"",regimenCode:-1,regimenCodeStr:"",regimenName:"",regimenDrugs:[],hangingPills:[],reasonForSwitch:"",starterPackNeeded:!1,hangingPillsStatus:"",treatmentInitiationState:"",lpvType:"",medicationOrders:[],selectedInterval:0}}),watch:{ready:{async handler(t){if(!t)return;if(this.prescription=new l["a"](this.patientID,this.providerID),await this.prescription.loadMedicationOrders(),await this.prescription.loadFastTrackStatus(),!this.prescription.medicationOrdersAvailable()&&!this.prescription.isFastTrack())return Object(g["e"])("Patient is not eligible for treatment Today! Please check HIV Clinic Consultation"),this.gotoPatientDashboard();await this.prescription.loadHangingPills(),await this.prescription.loadRegimenExtras(),await this.prescription.loadTreatmentState(),await this.prescription.loadDrugInduced(),await this.prescription.loadContraindications(),await this.prescription.loadTptPrescriptionCount(),await this.initFacts(this.patient),this.prescription.shouldPrescribeExtras()&&(this.regimenExtras=this.prescription.getRegimenExtras());const e=this.resolveHtnDrugs();Object(h["isEmpty"])(e)||(this.regimenExtras=[...this.regimenExtras,...e]),this.prescription.isFastTrack()?(await this.prescription.loadFastTrackMedications(),this.drugs=this.prescription.getFastTrackMedications(),this.fieldComponent="next_visit_interval"):this.prescription.shouldPrescribeArvs()||Object(h["isEmpty"])(this.regimenExtras)||(this.drugs=this.regimenExtras),this.patientToolbar=await this.getPatientToolBar(),this.fields=this.getFields()},immediate:!0},drugs:{handler(t){this.facts.drugs=t.map(t=>t.drug_id)},immediate:!0,deep:!0}},methods:{async initFacts(t){this.programInfo=await D["a"].getProgramInformation(t.getID()),this.facts.age=t.getAge(),this.facts.gender=t.getGender(),this.facts.weight=await t.getRecentWeight(),this.facts.hangingPills=this.prescription.getHangingPills(),this.facts.treatmentInitiationState=this.prescription.getTreatmentState(),this.facts.currentRegimenStr=this.programInfo.current_regimen,this.facts.currentRegimenCode=this.extractRegimenCode(this.programInfo.current_regimen),this.facts.medicationOrders=this.prescription.getMedicationOrders(),this.facts.contraindications=this.prescription.getContraindications(),this.facts.tptPrescriptionCount=this.prescription.getTptPrescriptionCount(),this.facts.lastSideEffectDate=this.prescription.getLastSideEffectDate(),this.facts.currentDate=l["a"].getSessionDate(),this.facts.isChildBearing=t.isChildBearing()},async onSubmit(t){const e=await this.prescription.createEncounter();this.prescription.setNextVisitInterval(t[a.INTERVAL_SELECTION].value);const i=this.mapOrder(this.drugs);if(!e)return Object(g["e"])("Unable to create treatment encounter");const n=await this.prescription.createDrugOrder(i);if(!n)return Object(g["e"])("Unable to create drug orders!");this.facts.reasonForSwitch&&await this.prescription.createRegimenSwitchObs(this.facts.reasonForSwitch),this.facts.hangingPillsStatus&&await this.prescription.createHangingPillsObs(this.facts.hangingPillsStatus),Object(g["d"])("Drug order has been created"),y["a"].invalidate("PATIENT_PROGRAM"),this.nextTask()},async onEvent(t,e){const i=Object(m["a"])(this.facts,b,t,e);for(const a in i){var n;const t=i[a];if(null!==t&&void 0!==t&&null!==(n=t.actions)&&void 0!==n&&n.alert){var r;const e=await(null===t||void 0===t||null===(r=t.actions)||void 0===r?void 0:r.alert(this.facts));if(e===s.EXIT)return!1}}return!0},onBuildOptions(t,e){const i=Object(m["a"])(this.facts,b,t,e);for(const n in i){const t=i[n];if(t.data)return t.data}return{}},async onRegimen({label:t,value:e,other:i}){this.facts.lpvType="",this.facts.hangingPillsStatus="",this.facts.starterPackNeeded=!1,this.facts.regimenName=`${e} (${t})`,this.facts.regimenCodeStr=e.toString(),this.facts.regimenCode=this.extractRegimenCode(e.toString()),this.facts.regimenDrugs=i.regimenDrugs,this.facts.drugs=i.regimenDrugs.map(t=>t.drug_id);const n=this.prescription.findAndGroupDrugSideEffects(this.facts.drugs);this.facts.hasSideEffects=!Object(h["isEmpty"])(n),this.facts.sideEffectsTable=this.buildSideEffectsTable(n)},async onBeforeRegimenNext(){const t=await this.onEvent(a.ARV_REGIMENS,o.BEFORE_NEXT);let e=[];return!!t&&(this.facts.lpvType?e=await this.getLpvDrugs():this.facts.starterPackNeeded?(e=await this.getStarterPackDrugs(),Object(h["isEmpty"])(e)&&(e=this.facts.regimenDrugs)):e=this.facts.regimenDrugs,this.drugs=[...this.regimenExtras,...e],!0)},getLpvDrugs(){return this.prescription.getLvpDrugsByType(this.facts.lpvType,this.facts.regimenCode)},resolveHtnDrugs(){try{const t=sessionStorage.getItem(_["b"].Prescription);if("string"===typeof t){const e=JSON.parse(t);if(Object(h["isPlainObject"])(e)&&e[this.patientID])return e[this.patientID]}}catch(t){console.warn(t)}return[]},getStarterPackDrugs(){return this.prescription.getRegimenStarterpack(this.facts.regimenCode,this.facts.weight)},setCustomDrugs(t){this.drugs=t.map(t=>t.other)},buildSideEffectsTable(t){const e=["Date","Contraindication(s)","Side effect(s)"],i=[];for(const n in t){const e=this.facts.contraindications[n]||[];i.push([u["b"].toStandardHisDisplayFormat(n),e.join(", "),t[n].join(", ")])}return{columns:e,rows:i}},async buildRegimenOptions(){const t=await this.prescription.getPatientRegimens(),e=[];for(const i in t){const n=t[i],r=n.map(t=>t.alternative_drug_name||t.concept_name).sort().join(" + ");e.push({label:r,value:i,other:{regimenDrugs:n}})}return e},buildIntervalOptions(){const t=[{label:"2 weeks",value:14},{label:"1 month",value:28},{label:"2 months",value:56},{label:"3 months",value:84},{label:"4 months",value:112},{label:"5 months",value:140},{label:"6 months",value:168},{label:"7 months",value:196},{label:"8 months",value:224},{label:"9 months",value:252},{label:"10 months",value:280},{label:"11 months",value:308},{label:"12 months",value:336}];return t.map(({label:t,value:e})=>{this.facts.selectedInterval=parseInt(e.toString());const i=this.onBuildOptions(a.INTERVAL_SELECTION,o.ON_BUILD);return{label:t,value:e,other:{...i,...this.getDrugEstimates(this.drugs,this.facts.selectedInterval)}}})},getDrugFrequency(t){this.facts.drug=t;const e=Object(m["a"])(this.facts,E);if(!Object(h["isEmpty"])(e))return e[0].concept},extractRegimenCode(t){try{return t.match(/n\/a/i)?-1:parseInt(t.substring(0,t.length))}catch(e){return console.warn(e),-1}},getDrugEstimates(t,e){this.prescription.setNextVisitInterval(e);const i=this.prescription.calculateDateFromInterval(),n=t.map(t=>{const e=this.prescription.getDrugPackSize(t),i=this.prescription.calculatePillsPerDay(t.am,t.noon,t.pm),n=this.prescription.estimatePackSize(i,e);return{label:t.alternative_drug_name||t.drug_name,value:n}});return{label:"Medication run-out date:",value:u["b"].toStandardHisDisplayFormat(i),other:{label:"Estimated packs/tins:",value:n}}},mapOrder(t){return t.map(t=>this.prescription.toOrderObj(t.drug_id,t.alternative_drug_name||t.drug_name,t.units,t.am,t.pm,t.frequency||this.getDrugFrequency(t.drug_name)))},async getPatientToolBar(){const t=await this.prescription.getReasonForRegimenSwitch();return[{label:"Age",value:this.patient.getAge()+" Year(s)"},{label:"Gender",value:this.patient.getGender()},{label:"Current Regimen",value:this.programInfo.current_regimen},{label:"Current weight",value:this.facts.weight+" kg(s)"||"Unknown"},{label:"Reason for change",value:t}]},getFields(){return[{id:a.ARV_REGIMENS,helpText:"ARV Regimen(s)",type:c["b"].TT_ART_REGIMEN_SELECTION,condition:()=>this.prescription.shouldPrescribeArvs(),validation:t=>d["a"].required(t),options:()=>this.buildRegimenOptions(),onload:()=>this.facts.prescriptionType="Regimen",onValue:t=>(this.onRegimen(t),this.onEvent(a.ARV_REGIMENS,o.ON_VALUE)),beforeNext:()=>this.onBeforeRegimenNext(),config:{toolbarInfo:this.patientToolbar,footerBtns:[{name:"Custom Regimen",slot:"end",onClick:()=>{this.fieldComponent="custom_regimen"}}]}},{id:"custom_regimen",helpText:"Custom prescription",type:c["b"].TT_MULTIPLE_SELECT,condition:()=>"Custom"===this.facts.prescriptionType,onload:()=>this.facts.prescriptionType="Custom",validation:t=>d["a"].required(t),options:async()=>{const t=await this.prescription.getCustomIngridients();return t.map(t=>({label:t.name,value:t.drug_id,other:{...t}}))},config:{showKeyboard:!0,hiddenFooterBtns:["Back"],footerBtns:[{name:"Standard Regimen",size:"large",slot:"end",color:"primary",visible:!1,visibleOnStateChange:t=>1===t.index,onClick:()=>{this.fieldComponent="arv_regimens"}}]}},{id:"custom_dosage",helpText:"Custom dose",type:c["b"].TT_DOSAGE_INPUT,condition:t=>!Object(h["isEmpty"])(t.custom_regimen),validation:t=>{if(d["a"].required(t))return["Drugs are not available"];const e=t.map(({other:t})=>t.am<=0&&t.pm<=0);return e.some(Boolean)?["Missing dosage configuration on some drugs"]:null},unload:t=>this.setCustomDrugs(t),summaryMapValue:({other:t})=>({label:"Dosages",value:this.prescription.getInstructions(t.drug_name,t.am,t.pm,t.units)}),options:t=>t.custom_regimen.map(t=>({label:t.label,value:t.value,other:{drug_id:t.other.drug_id,drug_name:t.label,barcodes:t.other.barcodes,units:t.other.units,am:0,noon:0,pm:0,frequency:this.getDrugFrequency(t.label)}}))},{id:"selected_meds",helpText:"Selected medication",type:c["b"].TT_DATA_TABLE,config:{toolbarInfo:this.patientToolbar,hiddenFooterBtns:["Clear"],dataTableConfig:{showIndex:!1},viewPortStyle:{height:"76vh"},columns:()=>[[I["a"].thTxt("Drug name",v),I["a"].thTxt("Units",v),I["a"].thTxt("AM",v),I["a"].thTxt("Noon",v),I["a"].thTxt("PM",v),I["a"].thTxt("Frequency",v)]],rows:()=>this.drugs.map(t=>{const e={style:{height:"6vh"},cssClass:(()=>{if(t.drug_name.match(/cotrimoxazole/i))return"adult-regimen-formulation";switch(t.regimen_category){case"A":return"adult-regimen-formulation";case"P":return"peads-regimen-formulation"}})()};return[I["a"].td(t.alternative_drug_name||t.drug_name,e),I["a"].td(t.units,e),I["a"].td(t.am,e),I["a"].td(t.noon,e),I["a"].td(t.pm,e),I["a"].td(t.frequency||this.getDrugFrequency(t.drug_name),e)]})}},{id:a.INTERVAL_SELECTION,helpText:"Interval to next visit",type:c["b"].TT_NEXT_VISIT_INTERVAL_SELECTION,validation:t=>d["a"].required(t),options:()=>this.buildIntervalOptions(),onValue:()=>this.onEvent(a.INTERVAL_SELECTION,o.ON_VALUE),beforeNext:()=>this.onEvent(a.INTERVAL_SELECTION,o.BEFORE_NEXT),config:{showRegimenCardTitle:!1}}]}}}),C=i("6b0d"),O=i.n(C);const S=O()(T,[["render",r]]);e["default"]=S},dac2:function(t,e,i){"use strict";i.d(e,"a",(function(){return l}));i("caad");var n=i("71c3"),r=i("9283"),a=i("1c74");class s extends a["e"]{constructor(){super()}static getAllArvRegimens(){return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)}static getRegimens(t){return this.getJson(`programs/${this.getProgramID()}/regimens`,{patient_id:t})}static getCustomIngridients(){return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)}static getCurrentRegimen(t,e=this.getSessionDate()){return this.getJson(`programs/${this.getProgramID()}/${t}`,{date:e})}}var o,c=i("2ef0"),d=i("cc6f");(function(t){t["CONTRAINDICATION"]="contraindication",t["SIDE_EFFECT"]="side_effect"})(o||(o={}));class l extends d["a"]{constructor(t,e){super(t,25,e),this.nextVisitInterval=0,this.fastTrack=!1,this.regimenExtras=[],this.fastTrackMedications=[],this.hangingPills=[],this.medicationOrders=[],this.treatmentState="",this.contraindications={},this.sideEffects={},this.tptPrescriptionCount=0,this.lastSideEffectDate=""}setNextVisitInterval(t){this.nextVisitInterval=t}getHangingPills(){return this.hangingPills}getMedicationOrders(){return this.medicationOrders.map(t=>d["a"].getCachedConceptName(t))}getTptPrescriptionCount(){return this.tptPrescriptionCount}getLastSideEffectDate(){return this.lastSideEffectDate}getContraindications(){return this.contraindications}getSideEffects(){return this.sideEffects}getRegimenExtras(){return this.regimenExtras}getPatientRegimens(){return s.getRegimens(this.patientID)}getCustomIngridients(){return s.getCustomIngridients()}getFastTrackMedications(){return this.fastTrackMedications}getTreatmentState(){return this.treatmentState}isFastTrack(){return this.fastTrack}medicationOrdersAvailable(){return!Object(c["isEmpty"])(this.medicationOrders)}shouldPrescribeArvs(){const t=d["a"].getCachedConceptID("Antiretroviral drugs");return this.medicationOrders.includes(t)}shouldPrescribeExtras(){const t=d["a"].getConceptsByCategory("art_extra_medication_order"),e=t.map(t=>this.medicationOrders.includes(t.concept_id));return e.some(Boolean)}getRegimenStarterpack(t,e){const i={weight:e,regimen:t};return d["a"].getJson(`programs/${d["a"].getProgramID()}/regimen_starter_packs`,i)}async getLvpDrugsByType(t,e){return d["a"].getJson(`programs/${d["a"].getProgramID()}/regimens/${e}`,{patient_id:this.patientID,lpv_drug_type:t})}async loadContraindications(){const t=await d["a"].getConceptID("Contraindications"),e=await d["a"].getObs({concept_id:t,person_id:this.patientID});e.forEach(t=>{const e=r["b"].toStandardHisFormat(t.obs_datetime);this.contraindications[e]||(this.contraindications[e]=[]);const i=d["a"].getCachedConceptName(t.value_coded);this.contraindications[e].push(i)})}async loadDrugInduced(){const t=await d["a"].getConceptID("Drug induced"),e=await d["a"].getObs({concept_id:t,person_id:this.patientID});e&&e.forEach(t=>{const e=r["b"].toStandardHisFormat(t.obs_datetime);if(this.lastSideEffectDate||(this.lastSideEffectDate=e),!t.value_drug||!t.value_coded)return;this.sideEffects[e]||(this.sideEffects[e]={}),this.sideEffects[e][t.value_drug]||(this.sideEffects[e][t.value_drug]=[]);const i=d["a"].getCachedConceptName(t.value_coded);this.sideEffects[e][t.value_drug].push(i)})}async loadTptPrescriptionCount(){const t=await d["a"].getJson("tpt_prescription_count",{patient_id:this.patientID,date:this.date});if(t){const e=t.count+1;this.tptPrescriptionCount=e>3?3:e}}async loadFastTrackStatus(){const t=await d["a"].getFirstValueCoded(this.patientID,"Fast track"),e=await d["a"].getConceptID("yes");t&&(this.fastTrack=t===e)}async loadRegimenExtras(t=this.date){const e=await s.getJson(`programs/${s.getProgramID()}/patients/${this.patientID}/dosages`,{date:t});e&&(this.regimenExtras=Object.values(e))}async loadMedicationOrders(){const t=await d["a"].getConceptID("Medication orders"),e=await d["a"].getObs({concept_id:t,date:this.date,person_id:this.patientID,page_size:5});this.medicationOrders=e.map(t=>t.value_coded)}async loadHangingPills(){const t=await d["a"].getAll(this.patientID,"Pills brought");t&&(this.hangingPills=t.filter(t=>t.value_numeric>=1&&t.order).map(t=>t.order.drug_order.drug_inventory_id))}async loadFastTrackMedications(){const t=await n["a"].getLastDrugsReceived(this.patientID),e=t.map(async t=>{const{drug:e}=t,i=await n["a"].getDrugDosages(this.patientID,e.drug_id);return{drug_id:e.drug_id,drug_name:e.name,units:e.units,am:i.am,noon:i.noon,pm:i.pm,frequency:t.frequency}});this.fastTrackMedications=await Promise.all(e)}async loadTreatmentState(){const t={date:this.date},e=await d["a"].getJson(`programs/${d["a"].getProgramID()}/patients/${this.patientID}/status`,t);e&&(this.treatmentState=e["status"])}findAndGroupDrugSideEffects(t){const e={};for(const i in this.sideEffects){const n=this.sideEffects[i];for(const r in n)t.includes(parseInt(r))&&(e[i]||(e[i]=[]),e[i]=[...e[i],...n[r]])}return e}calculatePillsPerDay(t,e,i){return parseFloat(t.toString())+e+i}estimatePackSize(t,e=0){const i=t*this.nextVisitInterval/e;let n=Math.round(i);return n<=0&&(n+=1),n}calculateDosage(t,e){let i=0;return 0===e&&(i=t),0==t&&(i=e),t>0&&e>0&&(i=(t+e)/2),i}calculateEquivalentDosage(t,e){return t+e}calculateDateFromInterval(){const t=new Date(this.date);return t.setDate(t.getDate()+this.nextVisitInterval),r["b"].toStandardHisFormat(t)}getDrugPackSize(t){if(t.pack_size)return t.pack_size;try{return t.barcodes[0].tabs}catch(e){return 30}}getInstructions(t,e,i,n){return`${t} :- Morning: ${e} ${n}, Evening: ${i} ${n}`}toOrderObj(t,e,i,n=0,r=0,a=""){return{drug_inventory_id:t,equivalent_daily_dose:this.calculateEquivalentDosage(n,r),start_date:this.date,auto_expire_date:this.calculateDateFromInterval(),units:i,instructions:this.getInstructions(e,n,r,i),dose:this.calculateDosage(n,r),frequency:a}}async getReasonForRegimenSwitch(){const t=await d["a"].getFirstValueText(this.patientID,"Reason for ARV switch");return t||"N/A"}async createDrugOrder(t){return n["a"].create({encounter_id:this.encounterID,drug_orders:t})}async createHangingPillsObs(t){return this.saveValueTextObs("appointment type",t)}async createRegimenSwitchObs(t){return this.saveValueTextObs("Reason for ARV switch",t)}}}}]);
//# sourceMappingURL=chunk-3b5f81a2.f226c4fe.js.map