{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue?85bc","webpack:///./src/apps/OPD/services/hiv_status_service.ts","webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue","webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue?79df"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","HIVStatusService","patientID","providerID","AppEncounterService","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","hivService","watch","ready","handler","isReady","patient","getID","getFields","immediate","deep","methods","formData","computedData","createEncounter","encounter","toastWarning","resolveObs","saveObservationList","obs","nextTask","buildDateObs","conceptName","date","isEstimate","match","this","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","type","FieldType","TT_SELECT","validation","value","Validation","required","computedValue","options","label","generateDateFields","minDate","getBirthdate","maxDate","getSessionDate","condition","hiv_status","summaryLabel","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","computeValue","getDate","defaultValue","getLocationName","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","__exports__"],"mappings":"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","file":"js/chunk-2d0de711.f165a1c4.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class HIVStatusService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 39, providerID) \n    }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { EstimationFieldType, generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper';\nimport { toastWarning } from '@/utils/Alerts';\nimport { HIVStatusService } from '../../services/hiv_status_service';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        hivService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.hivService = new HIVStatusService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            const encounter = await this.hivService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create encounter') \n            const data = await this.resolveObs({...computedData})\n            const obs = await this.hivService.saveObservationList(data)\n            if (!obs) return toastWarning('Unable to save observations')\n            this.nextTask()        \n        },\n        buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n            let obs = {}\n            if (date.match(/unknown/i)) {\n                obs = this.hivService.buildValueText(conceptName, 'Unknown')\n            } else if (isEstimate) {\n                obs = this.hivService.buildValueDateEstimated(conceptName, date)\n            } else {\n                obs = this.hivService.buildValueDate(conceptName, date)\n            }\n            return obs\n        },\n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'hiv_status',\n                    helpText: 'HIV status',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ value }: Option) => ({\n                        obs: this.hivService.buildValueText('HIV status', value)\n                    }),\n                    options: () => ([\n                        { label: 'Positive not ART', value: 'Positive not ART' },\n                        { label: 'Posititve on ART', value: 'Positive on ART' },\n                        { label: 'Previous negative', value: 'Previous negative' },\n                        { label: 'New positive', value: 'New positive' },\n                        { label: 'New negative', value: 'New negative' },\n                        { label: 'Never tested', value: 'Never tested' },\n                    ])\n                },\n                ...generateDateFields({\n                    id: 'hiv_test_date',\n                    helpText: 'HIV Test',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => HIVStatusService.getSessionDate(),\n                    condition: (fields: any) => fields.hiv_status.value !== 'Never tested',\n                    summaryLabel: 'HIV test date',\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => this.buildDateObs('HIV test date', date, isEstimate)\n                    \n                }, this.hivService.getDate()),\n                {\n                    id: 'test_location',\n                    helpText: 'HIV test location',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    defaultValue: () => HIVStatusService.getLocationName(),\n                    computedValue: ({ label }: Option) => ({obs: this.hivService.buildValueText('HIV test location', label)}),\n                    condition: (fields: any) => fields.hiv_status.value !== 'Never tested',\n                    options: (_: any, filter='') => getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./HIVStatus.vue?vue&type=template&id=27f8e15a&ts=true\"\nimport script from \"./HIVStatus.vue?vue&type=script&lang=ts\"\nexport * from \"./HIVStatus.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}