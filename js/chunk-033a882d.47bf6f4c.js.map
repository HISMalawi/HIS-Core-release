{"version":3,"sources":["webpack:///./src/apps/ANC/Services/anc_treatment_service.ts","webpack:///./src/apps/ANC/Views/Encounters/TTV.vue?7801","webpack:///./src/apps/ANC/Services/anc_dispensing_service.ts","webpack:///./src/apps/ANC/Views/Encounters/TTV.vue","webpack:///./src/apps/ANC/Views/Encounters/TTV.vue?0c1a"],"names":["DRUG_FREQUENCIES","AncTreatmentService","patientID","providerID","this","date","dispenseTTV","dispensed","isEmpty","orderID","order_id","DrugOrderService","updateDispensationOrders","createOrders","ttvDrugObj","orders","create","getEncounterID","drugs","createEncounter","map","o","buildDrugOrderObj","dispensation","AppEncounterService","forEach","quantity","frequency","duration","order","drug_inventory_id","id","drug","startDate","Date","expiryDate","setDate","getDate","parseInt","dose","dailyEquivalentDose","parseFloat","HisDate","toStandardHisFormat","drug_name","units","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","formFields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","AncDispensationService","saveValueTextObs","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","getFields","immediate","methods","f","computedData","action","nextTask","helpText","type","FieldType","TT_YES_NO","validation","v","computedValue","match","updateTTvOrder","saveNoDispensationObs","options","label","values","value","__exports__"],"mappings":"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","file":"js/chunk-033a882d.47bf6f4c.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { find, isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface AncTreatmentDrugObject {\n    'id': number;\n    'drug_name': string;\n    'dose': string;\n    'duration': number;\n    'frequency': string;\n    'units': string;\n}\n\nexport const DRUG_FREQUENCIES: Record<string, number> = { \n    'Once a day (OD)' : 1,\n    'Twice a day (BD)': 2,\n    'Three a day (TDS)': 3,\n    'Four times a day (QID)' : 4,\n    'Five times a day (5X/D)' : 5,\n    'Six times a day (Q4HRS)' : 6,\n    'In the morning (QAM)' : 0.5,\n    'Once a week (QWK)' : 0.14,\n    'Once a month' : 0.03,\n    'Twice a month' : 0.071\n}\n\nexport class AncTreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 25, providerID)\n    }\n\n    ttvDrugObj() {\n        return {\n            'drug_inventory_id': 609,\n            'dose': 0.5,\n            'equivalent_daily_dose': 0.5,\n            'frequency': \"Once a day (od)\",\n            'start_date': this.date,\n            'auto_expire_date': this.date,\n            'instructions': \"Once a day\",\n            'units': \"ml\"\n        }\n    }\n\n    async updateTTvOrder() {\n        const dispensed = await this.dispenseTTV()\n        if (!isEmpty(dispensed)) {\n            const orderID = dispensed[0].order_id\n            return DrugOrderService.updateDispensationOrders([{'order_id': orderID, 'quantity' : 1}])\n        }\n        throw 'Unable to dispense'\n    }\n\n    dispenseTTV() {\n        return this.createOrders([this.ttvDrugObj()])\n    }\n\n    createOrders(orders: any) {\n        return DrugOrderService.create({\n            'drug_orders': orders,\n            'encounter_id': this.getEncounterID(),\n        })\n    }\n\n    async submitTreatment(drugs: AncTreatmentDrugObject[]) {\n        await this.createEncounter()\n        const orders = await this.createOrders(drugs.map(o => this.buildDrugOrderObj(o)))\n        const dispensation = new AppEncounterService(this.patientID, 54, this.providerID)\n        await dispensation.createEncounter()\n        drugs.forEach(o => {\n            const quantity: number = DRUG_FREQUENCIES[o.frequency] * o.duration\n            orders.forEach((order: any) => { \n                if (order.drug_inventory_id === o.id) {\n                    order.quantity = quantity\n                }\n            })\n        })\n        await DrugOrderService.updateDispensationOrders(orders)\n    }\n\n    buildDrugOrderObj(drug: AncTreatmentDrugObject) {\n        const startDate = new Date(this.date)\n        const expiryDate = startDate.setDate(startDate.getDate() + parseInt(`${drug.duration}`))\n        const dose: any = drug.dose || DRUG_FREQUENCIES[drug.frequency]\n        const dailyEquivalentDose =  parseFloat(dose) * DRUG_FREQUENCIES[drug.frequency] \n        return {\n            'drug_inventory_id': drug.id,\n            'dose': dose,\n            'equivalent_daily_dose': dailyEquivalentDose,\n            'frequency': drug.frequency,\n            'start_date': this.date,\n            'auto_expire_date': HisDate.toStandardHisFormat(new Date(expiryDate)),\n            'instructions': drug.drug_name + ':' + drug.dose + ' ' + drug.units + ' ' + drug.frequency + 'days',\n            'units': drug.units\n        }\n    }\n}","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\n\nexport class AncDispensationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 54, providerID)\n    }\n\n    saveNoDispensationObs() {\n        return this.saveValueTextObs(\n            'Tetanus toxoid vaccine', 'Not dispensed'\n        )\n    }\n\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncDispensationService} from \"@/apps/ANC/Services/anc_dispensing_service\"\nimport { AncTreatmentService } from \"@/apps/ANC/Services/anc_treatment_service\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.formFields = this.getFields()\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      await computedData['prescription'].action()\n      this.nextTask()\n    },\n    getFields() {\n      return [\n        {\n          id: 'prescription',\n          helpText: 'Prescription',\n          type: FieldType.TT_YES_NO,\n          validation: (v: string) => !v ?  ['Value is required'] : null,\n          computedValue: (v: string) => {\n            if (v.match(/true/i)) {\n              return {\n                action: async () => {\n                  const service = new AncTreatmentService(this.patientID, this.providerID)\n                  await service.createEncounter()\n                  await service.updateTTvOrder()\n                }\n              }\n            }\n            return {\n              action: async () => {\n                const service = new AncDispensationService(this.patientID, this.providerID)\n                await service.createEncounter()\n                await service.saveNoDispensationObs()\n              }\n            }\n          },\n          options: () => ([\n            {\n              label: 'TTV has been given today',\n              values: [\n                {\n                  label: \"yes\",\n                  value: \"true\"\n                },\n                {\n                  label: \"no\",\n                  value: \"false\"\n                }\n              ]\n            }\n          ])\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./TTV.vue?vue&type=template&id=4420df94&ts=true\"\nimport script from \"./TTV.vue?vue&type=script&lang=ts\"\nexport * from \"./TTV.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}