{"version":3,"sources":["webpack:///./src/apps/HTS/services/hts_items_given.ts","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue?8cc3","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue?d75f","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/composables/testKits.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["HtsItemsGivenService","AppEncounterService","constructor","patientID","providerID","super","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","accessPointTypeField","facilityAccessPointField","communityAccessPoints","genderField","ageField","pregnancyStatusField","lastHivTestResultField","lastTimeHIVTestedField","itemsGivenToClientField","selfTestsGivenToClientField","hivTestKitDetailsField","visitTypeField","patientDemographics","immediate","methods","f","computedData","obs","resolveObs","person","PersonField","resolvePerson","isOnline","registration","PatientRegistrationService","Patientservice","registerBasicPatient","getPersonID","createEncounter","saveObservationList","saveObsOffline","savePersonOffline","Offline","id","observations","encounterName","encounterTypeID","meta","$router","push","getSelfKitCount","_find","find","items_given_to_client","label","value","helpText","type","FieldType","TT_SELECT","isRequired","finalComputedValue","v","tag","buildValueCoded","options","mapStrToOptions","TT_SELECT_GRID","condition","accesspoint_type","summaryMapValue","buildValueText","toString","config","columnsPerRow","TT_NUMBER","validation","val","parseInt","test","isNaN","birthdate","DateHelper","estimateDateFromAge","birthdate_estimated","gender","TT_AGE_INPUT","last_hiv_result","maxDaysAllowed","maxWeeksAllowed","maxMonthsAllowed","other","timeUnit","length","buildObs","date","excludeUnits","TT_ADHERENCE_INPUT","every","d","some","maxSelfKits","maxMaleCondoms","maxFemaleCondoms","maxFRS","toLowerCase","isEmpty","filter","map","buildValueNumber","noFloat","titles","initKits","getLotNo","getExpiryDate","TestKit","TT_INPUT_ARRAY","columns","init","async","_v$other","incomplete","x","KitProp","HIV_SELF_KIT","defaultOutput","Array","from","buildValueDate","parentObs","childObs","l","child","Promise","all","test_kit","kitNameOption","onclick","r","index","t","listData","keyboard","TT_TEXT","forEach","i","kitLotNoOption","kitExpiryDateOption","TT_FULL_DATE","Date","toDate","monthsFromNow","dayjs","diff","kits","generateRows","count","isArray","slice","_el$other","el","estimate","someIncomplete","broadcast","rows","channel","newValue","oldValue","col","_col$other","broadcastlistener","update","disabled","userOptionField","otherRows","JSON","stringify","_f$last_hiv_result","HIVStatus","selectionList","selection","title","preset","size","genderOptionField","resultOptionField","ageOptionField","_d$other","age","buildNumericEstimate","estimatedDOB","numericKeypad","isEstimate","toastWarning","toggleButton","strictNumbers","approachOptionField","self_test_kits","TT_HIDDEN","computedValue","name","getGivenNameField","getFamilyNameField","getHomeDistrictField","getHomeTaField","getHomeVillageField","getCurrentDistrictField","getCurrentTAfield","getCurrentVillageField","getCellNumberField","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","providers","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","encounterStartTime","facts","isEnrolledInProgam","village","district","currentTA","created","$route","params","patient_id","goOffline","initOfflineData","Store","get","then","patientData","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","getTime","isOfflineMode","_offline$personParams","offline","findByID","personParams","ProgramService","getSessionDate","current_district","current_village","current_traditional_authority","status","endTime","elapsedTime","minutes","userAgentObs","getPlatformName","durationObs","error","enc","callback","toastDanger","uploadStatus","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","person_id","EXIT","gotoPatientDashboard","findings","matchToGuidelines","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toUpperCase","sort","a","b","usernameA","usernameB","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","items","path","yesNoOptions","toYesNoOption","values","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","Object","reduce","accum","cur","concat","inArray","arr","expression","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","mapToOption","listOptions","item","computedForm","attr","isPlainObject","Validation","isName","form","PersonService","searchGivenName","searchFamilyName","getGenderField","customOptions","getDobConfig","includeHelpText","summaryLabel","minDate","maxDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","getHomeRegionField","group","requireNext","getRegions","_f$home_region","home_region","dynamicHelpText","_f$home_region2","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","onClick","c","field","filtered","ok","alertConfirmation","address","LocationService","createAddress","showKeyboard","isFilterDataViaApi","footerBtns","getTraditionalAuthorities","home_district","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","_f$home_region3","current_region","match","_f$current_region","_f$current_region2","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","getFacilityLocationField","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","getPersonAttributeOptions","prop","getPatientInfoString","getID","getNationalID","npid","show","Service","getProgramName","isCondition","ignored","undefined","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","description","text","info","ref","getUserProp","setUserProp","UserProp","getSelectedTests","req","trim","defaultKits","kitName","UNIGOLD","lotNo","expiryDate","testGroup","visible","userProp","DETERMINE","BIOLINE","SYPHILIS","HEPATITIS","selectedKits","TEST_KIT_USER_PROPERTY","prevKits","parse","kit","k","saveKits","facilities","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-09a4aadc.3ca5f14e.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsItemsGivenService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 196, providerID)\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Self Test Registration\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: `/`\n      }, null, 8, [\"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { find, isEmpty } from \"lodash\";\nimport keyboard, { numericKeypad, selectionList } from \"@/utils/PopupKeyboard\";\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport dayjs from \"dayjs\";\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport { HtsItemsGivenService } from \"../../services/hts_items_given\";\nimport { toDate } from \"@/utils/Strs\";\nimport DateHelper from \"@/utils/Date\"\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { KitProp, TestKit } from \"../../composables/testKits\";\nimport { Offline } from  \"@/composables/offline\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler() {\n        this.service = new HtsItemsGivenService(-1);\n        this.fields = [\n          ...[\n            this.accessPointTypeField(),\n            this.facilityAccessPointField(),\n            this.communityAccessPoints(),\n            this.genderField(),\n            this.ageField(),\n            this.pregnancyStatusField(),\n            this.lastHivTestResultField(),\n            this.lastTimeHIVTestedField(),\n            this.itemsGivenToClientField(),\n            this.selfTestsGivenToClientField(),\n            this.hivTestKitDetailsField(),\n            this.visitTypeField(),\n          ],\n          ...this.patientDemographics(),\n        ];\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      const obs = await this.resolveObs(computedData, \"reg\")\n      const person = PersonField.resolvePerson(computedData);\n      if (this.isOnline()) {\n        const registration: any = new PatientRegistrationService();\n        new Patientservice(await registration.registerBasicPatient(person));\n        this.service.patientID = registration.getPersonID();\n        await this.service.createEncounter();\n        await this.service.saveObservationList(obs);\n      } else {\n        const { saveObsOffline, savePersonOffline } = Offline()\n        const id = savePersonOffline('Self test client registration',person, [])\n        saveObsOffline({\n          id,\n          observations: obs,\n          encounterName: \"Self-test kit register\",\n          encounterTypeID: this.service.encounterTypeID,\n          meta: f\n        })\n      }\n      this.$router.push(`/`);\n    },\n    getSelfKitCount(f: Record<string, any>) {\n      return (\n        find(f.items_given_to_client || [], { label: \"Self-Test Kit\" })\n          ?.value || 0\n      );\n    },\n    accessPointTypeField(): Field {\n      return {\n        id: \"accesspoint_type\",\n        helpText: \"Distribution point type\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueCoded(\"HTS Access Type\", v.value),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\"Health Facility\", \"Community\"]);\n        },\n      };\n    },\n    facilityAccessPointField(): Field {\n      return {\n        id: \"facility_access_points\",\n        helpText: \"Health facility distribution point\",\n        type: FieldType.TT_SELECT_GRID,\n        isRequired: () => true,\n        condition: (f: any) => f.accesspoint_type.value === \"Health Facility\",\n        summaryMapValue: (v: Option) => {\n          return v;\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              v.value.toString()\n            ),\n          };\n        },\n        config: {\n          columnsPerRow: 2\n        },\n        options: () => {\n          return [\n            {label: \"1 | VCT\", value: \"VCT\"},\n            {label: \"2 | ANC\", value: \"ANC First Visit\"},\n            {label: \"3 | Inpatient\", value: \"Inpatient\"},\n            {label: \"4 | STI\", value: \"STI\"},\n            {label: \"5 | PMTCT-Follow-up (ANC FUP, Mat, Post-nat, BF)\", value: \"PMTCT FUP\"},\n            {label: \"6 | Index\", value: \"Index\"},\n            {label: \"7 | Paediatric\", value: \"Paediatric\"},\n            {label: \"8 | VMMC\", value: \"VMMC\"},\n            {label: \"9 | Malnutrition\", value: \"Malnutrition\"},\n            {label: \"10 | TB\", value: \"TB\"},\n            {label: \"11 | OPD\", value: \"OPD\"},\n            {label: \"12 | Other PITC (PrEP, dental e.t.c)\", value: \"Other\"},\n            {label: \"18 | SNS (Social Network Strategies)\", value: \"SNS\"},\n          ];\n        },\n      };\n    },\n    communityAccessPoints(): Field {\n      return {\n        id: \"community_access_points\",\n        helpText: \"Community distribution points\",\n        type: FieldType.TT_SELECT,\n        condition: (f: any) => f.accesspoint_type.value === \"Community\",\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              `${v.value}`\n            ),\n          };\n        },\n         options: () => {\n          return [\n            {label: \"13 | VCT\", value: \"VCT\"},\n            {label: \"14 | Index\", value: \"Index\"},\n            {label: \"15 | VMMC\", value: \"VMMC\"},\n            {label: \"16 | Other\", value: \"Other\"},\n            {label: \"17 | SNS\", value: \"SNS\"},\n            {label: \"19 | Mobile\", value: \"Mobile\"},\n          ];\n        },\n      };\n    },\n    genderField(): Field {\n      return {\n        id: \"gender\",\n        helpText: \"Recipient's Sex\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            person: v.value,\n          };\n        },\n        options: () => {\n          return [\n            { label: \"Female\", value: \"F\" },\n            { label: \"Male\", value: \"M\" },\n          ];\n        },\n      };\n    },\n    ageField(): Field {\n      return {\n        id: \"birthdate\",\n        helpText: \"Recipient's age\",\n        type: FieldType.TT_NUMBER,\n        isRequired: () => true,\n        validation: (v: Option) => {\n          const val = parseInt(`${v.value}`)\n          if (/unknown/i.test(`${v.value}`)) return null\n          if (val <= 10 || val >= 125 || isNaN(val)) {\n            return [\"Invalid Age\"];\n          }\n          return null;\n        },\n        finalComputedValue: (v: any) => {\n          return {\n            person: {\n              birthdate: DateHelper.estimateDateFromAge(v.value),\n              birthdate_estimated: true,\n            },\n          };\n        },\n      };\n    },\n    pregnancyStatusField(): Field {\n      return {\n        id: \"pregnancy_status\",\n        helpText: \"Pregnancy Status\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) => f.gender.value === \"F\",\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueCoded(\"Pregnancy status\", v.value),\n          };\n        },\n        options: () => {\n          return [\n            { label: \"Non-pregnant\", value: \"Not Pregnant / Breastfeeding\" },\n            { label: \"Pregnant\", value: \"Pregnant woman\" },\n            { label: \"Breastfeeding\", value: \"Breastfeeding\" },\n          ];\n        },\n      };\n    },\n    lastHivTestResultField(): Field {\n      return {\n        id: \"last_hiv_result\",\n        helpText: \"Recipient's Last HIV Test Results\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueCoded(\n              \"Previous HIV Test Results\",\n              v.value\n            ),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\n            \"Never Tested\",\n            \"Negative\",\n            \"Positive NOT on ART\",\n            \"Positive on ART\",\n            \"Inconclusive\",\n          ]);\n        },\n      };\n    },\n    lastTimeHIVTestedField(): Field {\n      return {\n        id: \"last_time_hiv_tested\",\n        helpText: \"Time since last HIV test\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_hiv_result.value && f.last_hiv_result.value != \"Never Tested\",\n        isRequired: () => true,\n        validation: (v: Option, f: any) => {\n          const maxDaysAllowed = 90;\n          const maxWeeksAllowed = 12;\n          const maxMonthsAllowed = 24;\n          if (parseInt(`${v.other.value}`) <= 0 && !/day/i.test(v.other.timeUnit)) {\n            return [`Enter ${v.other.timeUnit} greater than zero`];\n          }\n           if(v.other.timeUnit === 'Days' && parseInt(`${v.other.value}`) > maxDaysAllowed) {\n            return [`Enter ${v.other.timeUnit} less than ${maxDaysAllowed}, use Weeks Instead`];\n          }\n          if(v.other.timeUnit === 'Weeks' && parseInt(`${v.other.value}`) > maxWeeksAllowed) {\n            return [`Enter ${v.other.timeUnit} less than ${maxWeeksAllowed}, use Months Instead`];\n          }\n          if(v.other.timeUnit === 'Months' && parseInt(`${v.other.value}`) > maxMonthsAllowed) {\n            return [`Enter ${v.other.timeUnit} less than ${maxMonthsAllowed}, use Years Instead`];\n          }\n          if(v.other.timeUnit === 'Years' && parseInt(`${v.other.value}`) > parseInt(f.birthdate.value)) {\n            return [ `${\n                v.label\n              } is greater than client's age of ${f.birthdate.value} Years`];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          return null;\n        },\n        finalComputedValue: (v: any) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildObs(\"Time of HIV test\", {\n              'value_datetime': v.other.date,\n              'value_text': v.value\n            })\n          }\n        },\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    },\n    itemsGivenToClientField(): Field {\n      return {\n        id: \"items_given_to_client\",\n        helpText: \"Items given to the client\",\n        type: FieldType.TT_ADHERENCE_INPUT,\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v,\n        validation: (v: Option[]) => {\n          if (v.every((d) => d.value === \"\")) {\n            return [\"Values cannot be empty\"];\n          }\n          if (\n            v.some(\n              (d) => /self-test/i.test(d.label) && (!d.value || parseInt(`${d.value}`) <= 0)\n            )\n          ) {\n            return [`Please enter number of self kits to give client`];\n          }\n          const maxSelfKits = 3;\n          const maxMaleCondoms = 99;\n          const maxFemaleCondoms = 99;\n          const maxFRS = 5;\n          if (\n            v.some((d) => /self-test/i.test(d.label) && parseInt(`${d.value}`) > maxSelfKits)\n          ) {\n            return [\n              `Cannot distribute more than ${maxSelfKits} Self-test kits. Please adjust the number accordingly`,\n            ];\n          }\n          if (\n            v.some((d) => d.label == 'Male condoms' && parseInt(`${d.value}`) > maxMaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxMaleCondoms} Male Condoms. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => d.label == 'Female condoms' && parseInt(`${d.value}`) > maxFemaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFemaleCondoms} Female Condoms. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => /frs/i.test(d.label.toLowerCase()) && parseInt(`${d.value}`) > maxFRS)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFRS} FRS. Please adjust the number accordingly`,\n            ];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          if (!isEmpty(f.items_given_to_client)) {\n            return f.items_given_to_client;\n          }\n          return [\n            { label: \"Self-Test Kit\", value: \"\" },\n            { label: \"Male condoms\", value: \"\" },\n            { label: \"Female condoms\", value: \"\" },\n            { label: \"FRS\", value: \"\" },\n          ] as Option[];\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            tag: \"reg\",\n            obs: v\n              .filter((d: Option) => d.value)\n              .map((d: Option) =>\n                this.service.buildValueNumber(d.label, parseInt(`${d.value}`))\n              ),\n          };\n        },\n        config: {\n          noFloat: true,\n          titles: {\n            label: \"Item\",\n            value: \"Quantity\",\n          },\n        },\n      };\n    },\n    hivTestKitDetailsField(): Field {\n      const { \n        initKits, \n        getLotNo, \n        getExpiryDate \n      } = TestKit()\n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        //summaryMapValue: (v: Option) => v?.other?.fields,\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        init: async () => {\n          await initKits()\n          return true\n        },\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v?.other?.fields,\n        validation: (v: Option[]) => {\n          const incomplete = v\n            .map((d: Option) => d.other.fields)\n            .some((d: Option[]) => d.some((x: Option) => x.value === \"\"));\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        condition: () => !getLotNo(KitProp.HIV_SELF_KIT),\n        defaultOutput: (f: any) => {\n          if (this.getSelfKitCount(f) >= 1 && getLotNo(KitProp.HIV_SELF_KIT)) {\n            return Array.from({ length: this.getSelfKitCount(f) }).map(() => {\n              return {\n                label: KitProp.HIV_SELF_KIT,\n                value: getLotNo(KitProp.HIV_SELF_KIT),\n                other: {\n                  fields: [\n                    {\n                      label: \"Kit name\",\n                      value: KitProp.HIV_SELF_KIT,\n                      other: {\n                        obs: () => this.service.buildValueText(\"Kit name\", KitProp.HIV_SELF_KIT)\n                      }\n                    },\n                    {\n                      label: \"KitLot No.\",\n                      value: getLotNo(KitProp.HIV_SELF_KIT),\n                      other: {\n                        obs: () => this.service.buildValueText(\"Kit lot number\",\n                          getLotNo(KitProp.HIV_SELF_KIT)\n                        )\n                      }\n                    },\n                    {\n                      label: \"Kit Expiry date\",\n                      value: getExpiryDate(KitProp.HIV_SELF_KIT),\n                      other: {\n                        obs: () => this.service.buildValueDate(\"kit expiry date\",\n                          getExpiryDate(KitProp.HIV_SELF_KIT)\n                        )\n                      }\n                    }\n                  ]\n                }\n              }\n            })\n          }\n        },\n        finalComputedValue: (v: Option[]) => {\n          const data = v.map((d) => d.other.fields);\n          return {\n            obs: data.map(async (options: Option[]) => {\n              const [parentObs, ...childObs] = options\n                .filter((l: Option) => typeof l.other.obs === \"function\")\n                .map((d: Option) => d.other.obs(d));\n              return {\n                ...(await parentObs),\n                child: await Promise.all(childObs),\n              };\n            }),\n          };\n        },\n        options: async (f: any) => {\n          if (f.test_kit != null) return f.test_kit;\n          const kitNameOption = () => ({\n            label: \"Kit Name\",\n            value: KitProp.HIV_SELF_KIT,\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueText(\"Kit name\", v.value as string),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"name\",\n                    helpText: \"Kit Name\",\n                    type: FieldType.TT_TEXT,\n                    isRequired: () => true\n                  },\n                  (v: Option) => {\n                    val.value = v.value;\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/name/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          });\n          const kitLotNoOption = () => ({\n            label: \"Kit Lot No.\",\n            value: getLotNo(KitProp.HIV_SELF_KIT),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueNumber(\n                  \"Kit lot number\",\n                  v.value as number\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard({\n                  id: 'lot',\n                  helpText: 'Enter Lot Number',\n                  type: FieldType.TT_TEXT,\n                  isRequired: () => true\n                }, \n                (v: Option) => {\n                  val.value = v.value\n                  // Use first row's Lot number to update other Lot numbers which are empty\n                  if (index === 0) {\n                    listData.forEach((i: Option) => {\n                      i.other.fields.forEach((d: Option) => {\n                        if (/lot/i.test(d.label) && d.value === '') {\n                          d.value = val.value\n                        }\n                      })\n                    })\n                  }\n                })\n              },\n            },\n          });\n          const kitExpiryDateOption = () => ({\n            label: \"Kit Expiry Date\",\n            value: getExpiryDate(KitProp.HIV_SELF_KIT),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueDate(\n                  \"kit expiry date\",\n                  v.value as string\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(this.service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(this.service.date),\n                        ];\n                      }\n                      const monthsFromNow = dayjs(v.label).diff(this.service.date, \"month\")\n                      if (monthsFromNow <= 2) {\n                        return [\"It's not advisable to use a test kit that will expire in less than 2 months\"]\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => {\n                    val.value = v.value\n                    // Use first row's expiry date to update other expiry dates\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/expiry/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          })\n          const kits = this.getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"\",\n                value: \"\",\n                other: {\n                  fields: [\n                   kitNameOption(),\n                   kitLotNoOption(),\n                   kitExpiryDateOption(),\n                  ],\n                },\n              };\n            });\n            if (Array.isArray(f.test_kit)) {\n              if (kits < f.test_kit.length) {\n                return f.test_kit.slice(0, kits);\n              } else if (kits > f.test_kit.length) {\n                return [\n                  ...f.test_kit,\n                  ...generateRows(\n                    kits - f.test_kit.length\n                  ),\n                ];\n              } else {\n                return f.test_kit;\n              }\n          }\n          return generateRows();\n        },\n      };\n    },\n    selfTestsGivenToClientField(): Field {\n      return {\n        id: \"self_test_kits\",\n        helpText: \"Self-test kit users\",\n        type: FieldType.TT_INPUT_ARRAY,\n        isRequired: () => true,\n        condition: (f: any) =>\n          f.items_given_to_client.some(\n            (d: Option) => /self-test/i.test(d.label) && parseInt(`${d.value}`) > 0\n          ),\n        finalComputedValue: (v: Option[]) => {\n          return {\n            tag: \"reg\",\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d.value, d));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        summaryMapValue: (v: Option) => v.other.fields.map((d: Option) => {\n          const el = {...d}\n          if (el.label === 'Age' && el?.other?.estimate) {\n            el.value = `${el.value} (Estimated)`\n          }\n          return el\n        }),\n        config: {\n          columns: [\n            { label: \"End-User\" },\n            { label: \"Sex\" },\n            { label: \"Age\" },\n            { label: \"Approach\" },\n            { label: \"Result\"}\n          ],\n        },\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 4;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          const broadcast = (rows: Option[], channel: string, newValue: string|number, oldValue: string|number) => {\n            rows.forEach(col => {\n              if (typeof col?.other?.broadcastlistener === \"function\") {\n                const update = col.other.broadcastlistener(channel, newValue, oldValue)\n                if (update) {\n                  col.value = update.value\n                  col.disabled = update.disabled\n                }\n              }\n            })\n          }\n          const userOptionField = () => ({\n            label: \"User\",\n            value: \"\",\n            other: {\n              obs: (v: string) => this.service.buildValueCoded(\"Self-test end user\", v),\n              onclick: async (\n                val: Option,\n                rows: Option[],\n                index: number,\n                i: number,\n                listData: Option[]\n              ) => {\n                const otherRows = listData.filter((_: any, i) => i != index);\n                const options = [];\n                if (!/Self/.test(JSON.stringify(otherRows))) {\n                  const HIVStatus = f.last_hiv_result?.value;\n                  if(!/positive/.test(HIVStatus.toLowerCase())) options.push(\"Self\");\n                }\n                selectionList(\n                  [...options, \"Sexual partner\", \"Other\"],\n                  (selection: string) => {\n                    broadcast(rows, 'User', selection, val.value)\n                    val.value = selection;\n                  },\n                  {\n                    title: \"Select End-User\",\n                    preset: val != null ? val.value : \"\",\n                    size: \"small-modal\",\n                  }\n                );\n              },\n            },\n          });\n          const genderOptionField = () => ({\n            label: \"Sex\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string, oldValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { value: f.gender.label, disabled: true }\n                  }\n                  if (oldValue === 'Self') {\n                    return { value: '', disabled: false }\n                  }\n                }\n              },\n              obs: (v: string) => this.service.buildValueCoded(\"Gender of contact\", v),\n              onclick: (val: Option) => {\n                selectionList(\n                  [\"Female\", \"Male\"],\n                  (selection: string) => val.value = selection,\n                  {\n                    title: \"Select sex\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                )\n              }\n            },\n          });\n          const resultOptionField = () => ({\n            label: \"Result\",\n            value: \"N/A\",\n            other: {\n              obs: (v: string) => {\n                if (v && !/n\\/a/i.test(`${v}`)) {\n                  return this.service.buildValueCoded('Test 1', v)\n                }\n              },\n              onclick: (val: Option, rows: Option[]) => {\n                selectionList([\n                  'Negative',\n                  'Positive',\n                  'N/A'\n                ], \n                (selection: string) => {\n                  broadcast(rows, 'Result', selection, val.value)\n                  val.value = selection\n                }, {\n                  title: 'Directly-assisted HIV Result'\n                })\n              }\n            }\n          })\n          const ageOptionField = () => ({\n            label: \"Age\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { value: `${f.birthdate.value}`, disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string, d: Option) => {\n                const age = parseInt(v)\n                if (d?.other?.estimate) {\n                  return this.service.buildNumericEstimate('Age of contact', age)\n                } else {\n                  const estimatedDOB = DateHelper.estimateDateFromAge(age)\n                  return this.service.buildObs(\"Age of contact\", {\n                      'value_datetime': estimatedDOB,\n                      'value_numeric': age\n                  })\n                }\n              },\n              onclick: (val: Option) => {\n                numericKeypad((age: number | string, isEstimate: boolean | undefined) => {\n                  if (age && parseInt(`${age}`) >= 125) {\n                    val.value =''\n                    return toastWarning(`Age exceeds maximum human life expectancy of 124 years`)\n                  }\n                  val.value = age\n                  val.other.estimate = isEstimate\n                }, \n                {\n                  title: 'Age',\n                  preset: ' ',\n                  toggleButton: \"Age is estimated?\",\n                  noFloat: true,\n                  strictNumbers: true\n                });\n              },\n            },\n          });\n          const approachOptionField = () => ({\n            label: \"Approach\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue != 'Self') {\n                    return { value: \"Un-assisted\", disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string) => this.service.buildValueCoded(\"Self-test approach\", v),\n              onclick: (val: Option, rows: any[]) => {\n                selectionList(\n                  [\"Directly-assisted\", \"Un-assisted\"],\n                  (v: string) => {\n                    broadcast(rows, 'Approach', v, val.value)\n                    val.value = v\n                  },\n                  {\n                    title: \"Select approach\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const kits = this.getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"item\",\n                value: \"N/A\",\n                other: {\n                  fields: [\n                    userOptionField(),\n                    genderOptionField(),\n                    ageOptionField(),\n                    approachOptionField(),\n                    resultOptionField()\n                  ],\n                },\n              };\n            });\n          if (Array.isArray(f.self_test_kits)) {\n            if (kits < f.self_test_kits.length) {\n              return f.self_test_kits.slice(0, kits);\n            } else if (kits > f.self_test_kits.length) {\n              return [\n                ...f.self_test_kits,\n                ...generateRows(\n                  kits - f.self_test_kits.length\n                ),\n              ];\n            } else {\n              return f.self_test_kits;\n            }\n          }\n          return generateRows();\n        },\n      };\n    },\n    visitTypeField(): Field {\n      return {\n        id: \"visit_type\",\n        helpText: \"Visit Type\",\n        type: FieldType.TT_HIDDEN,\n        isRequired: () => true,\n        computedValue: (v: Option) => {\n          return {\n            tag: 'reg',\n            obs: this.service.buildValueCoded(\"Visit type\", \"Self test distribution\")\n          }\n        },\n      }\n    },\n    patientDemographics(): Field[] {\n      return [\n        (() => {\n          const name = PersonField.getGivenNameField();\n          name.validation = () => {\n            return true;\n          };\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getFamilyNameField();\n          name.type = FieldType.TT_HIDDEN;\n          name.validation = () => {\n            return true;\n          };\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeDistrictField();\n          name.type = FieldType.TT_HIDDEN;\n\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeTaField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeVillageField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentDistrictField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentTAfield();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentVillageField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCellNumberField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n      ];\n    },\n  },\n});\n","import { render } from \"./HtsESelfTestRegister.vue?vue&type=template&id=0aff3c87&ts=true\"\nimport script from \"./HtsESelfTestRegister.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsESelfTestRegister.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Region of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'District of current residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'District of current residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'TA of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Village of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Service } from \"@/services/service\";\nimport { find, isEmpty } from \"lodash\";\nimport { ref } from \"vue\";\nimport UserProp from \"@/composables/userproperty\"\n\nexport enum KitProp {\n    TEST_KIT_USER_PROPERTY = 'hts_user_assigned_kits',\n    HIV_SELF_KIT = 'HIV self-kit',\n    SYPHILIS = 'Syphilis',\n    HEPATITIS = 'Hepatitis B',\n    BIOLINE = 'Bioline',\n    DETERMINE = 'Determine',\n    UNIGOLD = 'Unigold'\n}\n\nexport function TestKit() {\n    const kits = ref<any>([])\n    const { getUserProp, setUserProp } = UserProp()\n\n    const getSelectedTests = async () => {\n        try {\n            const req = await getUserProp('HTS_PROGRAMS')\n            return `${req||''}`.split(',').map((prop: string) => prop.trim())\n        } catch (e) {\n            console.error(`${e}`)\n        }\n        return []\n    }\n\n    const initKits = async () => {\n        const defaultKits = [\n            {\n                kitName: KitProp.UNIGOLD,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.DETERMINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.BIOLINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.HIV_SELF_KIT,\n                lotNo: '',\n                expiryDate: '',\n                visible: true\n            },\n            {\n                kitName: KitProp.SYPHILIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Syphilis Test\"\n            },\n            {\n                kitName: KitProp.HEPATITIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Hepatitis B Test\"\n            }\n        ]\n        try {\n            const selectedKits = await getSelectedTests()\n            const req: any = await getUserProp(KitProp.TEST_KIT_USER_PROPERTY)\n            const prevKits = JSON.parse(req||'')\n\n            defaultKits.forEach((kit: any) => {\n                if (kit.userProp && !isEmpty(selectedKits)) {\n                    kit.visible = selectedKits.includes(kit.userProp)\n                }\n                const preset = find(prevKits, { kitName: kit.kitName })\n                if (preset) {\n                    kit.lotNo = preset.lotNo\n                    kit.expiryDate = preset.expiryDate\n                }\n            })\n            kits.value = defaultKits.filter((k: any) => k.visible)\n        } catch (e) {\n            kits.value = defaultKits\n            console.error(`${e}`)\n        }\n        \n    }\n\n    const getLotNo = (kitName: KitProp) => {\n        const data = find(kits.value, { kitName })\n        if (data) {\n            if(new Date(data.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return data.lotNo\n        } \n        return ''\n    }\n\n    const getExpiryDate = (kitName: KitProp) => {\n        const date = find(kits.value, { kitName })\n        if (date) {\n            if (new Date(date.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return date.expiryDate\n        }\n        return ''\n    }\n\n    const saveKits = () => setUserProp(KitProp.TEST_KIT_USER_PROPERTY, JSON.stringify(kits.value))\n\n    return {\n        kits,\n        initKits,\n        saveKits,\n        getLotNo,\n        getExpiryDate\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}