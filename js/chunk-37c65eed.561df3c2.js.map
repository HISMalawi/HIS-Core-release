{"version":3,"sources":["webpack:///./src/apps/HTS/services/hts_circumcision_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/views/encounters/HtsReferral.vue?7ded","webpack:///./src/apps/HTS/services/hts_referral_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsReferral.vue","webpack:///./src/apps/HTS/views/encounters/HtsReferral.vue?99d7"],"names":["HtsCircumcisionService","AppEncounterService","constructor","patientID","providerID","super","getRecentCircumcisionStatus","this","getFirstValueCoded","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","facts","age","gender","isEnrolledInProgam","formLabel","ready","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","isOnline","isOfflineMode","getOfflinePerson","person","birthdate","dayjs","ProgramService","getSessionDate","diff","saveObsOffline","encounterTypeID","formdata","obs","labOrders","status","observations","id","uploadStatus","meta","resolveObs","computedData","enc","createEncounter","saveObservationList","callback","test","error","Error","formData","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","toastDanger","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","_","HtsReferralService","IonPage","mixins","EncounterMixinVue","service","isHivPositive","watch","handler","referralServicesField","commentsField","immediate","saveFormEncounterAndProceed","getObs","concept","serviceReferral","services","recommendCircumcision","recommendSTI","helpText","FieldType","TT_MULTIPLE_SELECT","isRequired","init","offlineData","observationParams","offlineObs","hts_male_circumcised","test_results","res","hiv_result","circumcision","finalComputedValue","buildValueText","onValueUpdate","listData","l","isChecked","f","opt","selected","disabled","config","footerBtns","onClickComponentEvents","refreshOptions","o","onClick","TT_NOTE"],"mappings":"kHAAA,kDAEM,MAAOA,UAA+BC,OACxCC,YAAYC,EAAmBC,GAAa,GACxCC,MAAMF,EAAW,IAAKC,GAG1BE,8BACI,OAAOC,KAAKC,mBAAmB,0B,oECJ3BC,E,yEAAZ,SAAYA,GACRA,iCACAA,+CACAA,uDACAA,6CACAA,yBACAA,kBANJ,CAAYA,MAAS,KAQrB,MAAMC,EAAWC,GAAcC,OAAQC,2BAA2BF,GAErDG,EAA2D,CACpE,qEAAsE,CAClEC,SAAU,EACVC,QAAS,CACLC,MAAOC,OAASC,uBACZ,MAAMC,QAAeC,eACjB,6BACA,mBAAmBX,EAAQS,GAC3B,qEACA,CACI,CAAEG,KAAM,SAAUC,KAAM,MAAOC,MAAO,WACtC,CAAEF,KAAM,iBAAkBC,KAAM,MAAOC,MAAO,WAC9C,CAAEF,KAAM,kBAAmBC,KAAM,MAAOC,MAAO,YAGvD,MAAkB,WAAXJ,EACDX,EAAUgB,wBACC,mBAAXL,EACAX,EAAUiB,uBACVjB,EAAUkB,WAGxBC,WAAY,CACRC,QAAQA,GACJ,MAAmB,iBAAZA,GAEXV,iBAAiBW,GAAmB,YAAEC,IAClC,OAAOA,GAAeD,KAIlC,+DAAgE,CAC5Df,SAAU,EACVC,QAAS,CACLC,MAAOC,OAASc,YAAWD,kBACvB,MAAMX,QAAeC,eACjB,6BAA8B,GAC9B,gBAAgBX,EAAQqB,iCAA2CrB,EAAQsB,KAC3E,CACI,CAAEV,KAAM,SAAUC,KAAM,MAAOC,MAAO,UACtC,CAAEF,KAAM,sBAAuBC,KAAM,MAAOC,MAAO,aAG3D,MAAkB,wBAAXJ,EACDX,EAAUwB,oBACVxB,EAAUgB,0BAGxBG,WAAY,CACRI,UAAUA,GAAmB,YAAED,IAC3B,OAAOA,EAAcC,KAIjC,oDAAqD,CACjDjB,SAAU,EACVC,QAAS,CACLkB,UAAWhB,OAASiB,YAAWC,gBAAeL,cAAaM,cACvD,MAAMC,QAAcC,eAChB,gCAAgCH,EAChC,QAAQ1B,EAAQqB,iBAA2BrB,EAAQ2B,KACnDF,EACA,CACI,CAAEb,KAAM,SAAUE,MAAO,SAAUD,KAAM,QAASiB,KAAM,WACxD,CAAElB,KAAM,UAAWC,KAAM,MAAOiB,KAAM,YAG9C,MAAwB,WAAjBF,EAAMlB,OACP,CAAEqB,OAAQ,EAAGC,UAAWjC,EAAUgB,yBAClC,CAAEgB,MAAOH,EAAMJ,UAAWQ,UAAWjC,EAAUkC,gBAG7Df,WAAY,CACRgB,UAAUC,GACN,OAAOA,M,6GCvERC,+BAAgB,CAC3BC,WAAY,CAAEC,wBACdC,KAAM,KAAM,CACRC,UAAW,KACXC,QAAS,GACTC,OAAQ,GACRjD,UAAW,GACXC,YAAa,EACb+B,UAAW,GACXkB,MAAO,CACHC,KAAM,EACNC,OAAQ,GACRvB,UAAW,GACXD,YAAa,GACbM,QAAS,GACTmB,oBAAoB,EACpBpB,cAAe,MACfD,UAAW,GACXS,WAAW,EACXf,QAAS,GACTV,iBAAkB,IAEtBsC,UAAW,GACXC,OAAO,IAEXC,UACQpD,KAAKqD,OAAOC,OAAOC,aACnBvD,KAAK2C,UAAY3C,KAAKqD,OAAOC,OAAOC,WACpCvD,KAAKJ,UAAY4D,SAAS,GAAGxD,KAAKqD,OAAOC,OAAOC,YAC5CvD,KAAKyD,YACLzD,KAAK0D,kBAELC,OAAMC,IAAI,iBAAkB,CAAEhE,UAAWI,KAAKJ,YACzCiE,KAAKC,IACF9D,KAAK4C,QAAUkB,EACVC,qBAAQ/D,KAAK4C,UACdoB,iBAAUC,aAAajE,KAAK4C,SAEhC5C,KAAKkE,oBAAoBL,KAAK,KAC1B7D,KAAKmE,2BAA2BN,KAAK,KACjC7D,KAAKmD,OAAQ,IACdiB,MAAOC,GAAMC,QAAQC,IAAIF,MAC7BD,MAAM,KACDpE,KAAKyD,aACLzD,KAAK0D,wBAOjCc,SAAU,CACNC,oBAA8B,OAAOzE,KAAK0E,wBAE9CC,QAAS,CACLlB,YACI,OAAQmB,OAAS1C,OAAS2C,OAAc3C,OAE5C0C,WACI,OAAOA,OAAS1C,OAEpB2C,gBACI,OAAOA,OAAc3C,OAEzBwB,kBACI,MAAM,iBAAEoB,GAAqBd,iBACvBe,EAASD,EAAiB9E,KAAK2C,WAChCoC,IACL/E,KAAK8C,MAAMrB,UAAYsD,EAAOC,UAC9BhF,KAAK8C,MAAMC,IAAMkC,IAAMC,OAAeC,kBAAkBC,KACpDpF,KAAK8C,MAAMrB,UAAW,SAE1BzB,KAAK8C,MAAME,OAAS+B,EAAO/B,OAC3BhD,KAAKmD,OAAQ,IAEjBkC,eAAeC,EAAyBC,EAAeC,EAAUC,EAA4BC,EAAO,WAChG1B,iBAAUqB,eAAe,CACrBM,aAAcH,EACdI,GAAI5F,KAAK2C,UACTkD,aAAcH,EACd7D,cAAe7B,KAAKqD,OAAOtC,KAC3BuE,gBAAiBA,EACjBQ,KAAMP,EACNE,eAGR,kCAAkCnC,EAAO,IACrC,MAAMkC,QAAYxF,KAAK+F,WAAWzC,EAAO0C,cACzC,IAAIN,EAAS,UACb,IACI,MAAMO,EAAM,IAAIvG,OACZM,KAAKJ,UACL0D,EAAOgC,gBACPtF,KAAKH,kBAEEoG,EAAIC,yBACAD,EAAIE,oBAAoBX,KAC/BE,EAAS,WAGc,oBAApBpC,EAAO8C,gBACR9C,EAAO8C,SAASH,GAE5B,MAAO5B,GAEDqB,EADA,gCAAgCW,KAAK,GAAGhC,GAC/B,eAEA,YAEbC,QAAQgC,MAAM,GAAGjC,GAErB,GAAe,cAAXqB,EACA,MAAM,IAAIa,MAAM,sBAEpBvG,KAAKqF,eACD/B,EAAOgC,gBACPhC,EAAOkD,SACPhB,EACAlC,EAAOmC,UACPC,GAECpC,EAAOmD,cAAczG,KAAK0G,YAEnCC,aAAaC,EAAkBtD,EAAO,MAClC,MAAMuD,EAAc,GAmBpB,GAlBAA,EAAO3G,EAAUkC,cAAiBT,IAC9B,MAAQmF,GAAanF,EAAUoF,MAAM,KAC/BC,EAAWC,kBAAKjH,KAAK4B,UAAW,CAAEkF,aAExC,OADIE,IAAUhH,KAAKH,WAAamH,EAASE,WAClChH,EAAUkB,UAErByF,EAAO3G,EAAUwB,qBAAuB,KACpC1B,KAAKmH,QAAQC,KAAK,kDAAkDpH,KAAKJ,WAClEM,EAAUmH,MAErBR,EAAO3G,EAAUiB,wBAA0B,KACvCnB,KAAKmH,QAAQC,KAAK,qBAAqBpH,KAAKJ,WACrCM,EAAUmH,MAErBR,EAAO3G,EAAUgB,yBAA2B,KACxClB,KAAKsH,uBACEpH,EAAUmH,MAEjBT,KAASC,EACT,OAAOA,EAAOD,GAAOtD,IAG7B,iCACI,MAAMiE,EAAWC,eAAkBxH,KAAK8C,MAAOvC,GAC/C,IAAI,MAAMkH,KAASF,EAAU,SACzB,MAAMG,EAAUH,EAASE,GACzB,GAAW,OAAPC,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASjH,eAAO,OAAhB,EAAkBC,MAAO,OACzB,MAAMgF,EAAS1F,KAAK2G,mBAA2B,OAAPe,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASjH,eAAO,WAAT,EAAP,EAAkBC,MAAMV,KAAK8C,SACrE,GAAI4C,IAAWxF,EAAUmH,KAAM,OAEnC,GAAW,OAAPK,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASjH,eAAO,OAAhB,EAAkBkB,UAAW,OAC7B,MAAMA,QAAyB,OAAP+F,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAASjH,eAAO,WAAT,EAAP,EAAkBkB,UAAU3B,KAAK8C,QACzD9C,KAAK2G,aAAahF,EAAUQ,UAAWR,EAAUO,UAI7D,0BACI,IACI,MAAMyF,QAAgBhE,OAAMC,IAAI,kBAAmB,CAAEhE,UAAWI,KAAKJ,YACrEI,KAAK8C,MAAMG,mBAAqB0E,EAAQC,YAAc1C,OAAe2C,eACrE7H,KAAK8C,MAAMxB,QAAUqG,EAAQrG,QAC7BtB,KAAK8C,MAAMlC,iBAAmB+G,EAAQpG,UACxC,MAAO8C,GACLC,QAAQgC,MAAMjC,GACdyD,eAAY,GAAGzD,GAEnBrE,KAAK8C,MAAMtB,YAAc0D,OAAeC,iBACxCnF,KAAK8C,MAAMhB,QAAUoD,OAAe6C,mBACpC/H,KAAK8C,MAAMT,UAAY6C,OAAe5C,QACtCtC,KAAK8C,MAAMrB,UAAYzB,KAAK4C,QAAQoF,eACpChI,KAAK8C,MAAMC,IAAM/C,KAAK4C,QAAQqF,SAC9BjI,KAAK8C,MAAMjB,cAAgB7B,KAAKqD,OAAOtC,KACjCf,KAAKqD,OAAOtC,KAAKmH,WAAWC,cAC5B,MACFjD,OAAe5C,UACftC,KAAK4B,gBAAkB+B,OAAMC,IAAI,aACjC5D,KAAK8C,MAAMlB,UAAY5B,KAAK4B,UACvBwG,KAAK,CAACC,EAAQC,KACX,MAAMC,EAAYF,EAAEvB,SAASqB,cACvBK,EAAYF,EAAExB,SAASqB,cAC7B,OAAOI,EAAYC,GAAa,EAAID,EAAYC,EAAa,EAAI,IAEpEC,IAAKC,IAAU,MACZ,IAAI3H,EAAO,GAAG2H,EAAE5B,SAChB,IAAK/C,qBAAS,OAAD2E,QAAC,IAADA,GAAS,QAAR,EAADA,EAAG3D,cAAM,WAAR,EAAD,EAAW4D,OAAQ,OAC5B,MAAQC,IAAuB,QAAR,EAAAF,EAAE3D,cAAM,aAAR,EAAU4D,QAAS,GAC1C5H,GAAQ,KAAK6H,EAAWC,cAAcD,EAAWE,eAErD,OAAO/H,MAIvBgI,SAASC,EAAeC,EAAM,IAC1B,MAAO,CACHD,QACA9G,MAAO8G,EACPC,UAGRC,gBAAgBC,GACZ,OAAOA,EAAMV,IAAIW,GAAkB,kBAANA,GAA+B,kBAANA,EAC/C,CAAEJ,MAAOI,EAAGlH,MAAOkH,GAAMA,IAGpC1E,sBACI,MAAO,sBAAsB1E,KAAKqD,OAAOC,OAAOC,YAEpD+D,uBACI,OAAOtH,KAAKmH,QAAQC,KAAK,CAACiC,KAAMrJ,KAAK0E,yBAEzC,wBACW4E,OAAkBC,OAAO,CAC5BC,iBAAiB,EACjBC,QAAS,0BACTC,UACJ,IACI,MAAM9D,EAAK5F,KAAK2C,WAAa3C,KAAKJ,gBAC5B8G,eAASd,EAAI5F,KAAKmH,QAASnH,KAAKqD,QACxC,MAAOgB,GACLC,QAAQgC,MAAMjC,GAElBiF,OAAkBK,SAAS9F,KAAK+F,GAAKA,GAAKN,OAAkBO,YAEhEC,eACI,MAAO,CACH,CAAEd,MAAO,MAAO9G,MAAO,OACvB,CAAE8G,MAAO,KAAM9G,MAAO,QAG9B6H,cAAcf,EAAeC,EAAW,IACpC,MAAO,CACHD,QACA9G,MAAO,GACP+G,MAAO,IACAA,EACHe,OAAQhK,KAAK8J,kBAIzBG,WAAWC,GACP,OAAOA,EAAQzB,IAAK0B,IACT,CAAEnB,MAAOmB,EAAQjI,MAAOiI,MAGvCC,qBAAqBF,GACjB,MAAMG,EAAkB,GACxB,IAAI,MAAMF,KAAUD,GACS,mBAAdC,EAAO,IACVA,EAAO,KAGfE,EAAMjD,KAAKpH,KAAK+I,SAASoB,EAAO,KAEpC,OAAOE,GAEXC,sBACI,MAAO,CACH,CAAEtB,MAAO,MAAO9G,MAAO,OACvB,CAAE8G,MAAO,KAAM9G,MAAO,MACtB,CAAE8G,MAAO,UAAW9G,MAAO,aAGnC6D,WAAWP,EAAU+E,EAAI,IACrB,MAAMP,EAAcQ,OAAOR,OAAOxE,GAC7BiF,OAAQrK,GAAWA,IAAMA,EAAEmK,MAAQA,GAAe,KAARA,IAC1CG,OAAO,CAACC,EAAYC,KACjB,MAAMlI,EAAOkI,EAAIpF,IAAMoF,EAAIpF,IAAMoF,EAQjC,OAPIC,MAAMC,QAAQpI,GACdiI,EAAQA,EAAMI,OAAOrI,GACE,oBAATA,EACdiI,EAAMvD,KAAK1E,KAEXiI,EAAMvD,KAAK1E,GAERiI,GACJ,IACX,OAAOK,QAAQC,IAAIjB,IAEvBkB,QAAQC,EAAiBC,GACrB,IACI,OAAOD,EAAIV,OAAQrB,GAAWgC,EAAWhC,IAAIiC,OAAS,EACxD,MAAOhH,GACL,OAAO,IAGfiH,eAAejK,GACX,IACI,IAAI,MAAM+H,KAAK/H,EAAY,CACvB,MAAMkK,EAAYlK,EAAW+H,KAE7B,GAAImC,EAAW,OAAOA,GAE5B,MAAOlH,GACL,MAAO,CAACA,QCxTxB,MAAMmH,EAAc,EAEL,U,kDCHT,SAAUC,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQC,yBAAcC,yBAAaC,qCAAyBR,EAAKS,UAAW,CAC1EtJ,OAAQ6I,EAAK7I,OACbuJ,YAAaV,EAAKU,YAClBC,YAAaX,EAAKW,YAClBC,sBAAuBZ,EAAKY,sBAC5BC,WAAYb,EAAKc,SACjBA,SAAUd,EAAKe,eACfC,UAAWhB,EAAKiB,SACf,KAAM,GAAI,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN5FpK,+BAAgB,CAC3BxB,KAAM,kBACNyB,WAAY,CAAEoK,wBACdC,MAAO,CACH,WACA,WAEJnK,KAAM,KAAM,CACRyJ,SAAU,sBAEdW,MAAO,CACHL,eAAgB,CACZM,KAAMC,UAEVZ,YAAa,CACTW,KAAME,QACNC,SAAS,GAEbb,YAAa,CACTU,KAAMI,QAEVtK,OAAQ,CACJkK,KAAMvC,OACN4C,UAAU,GAEdd,sBAAuB,CACnBS,KAAMI,OACNC,UAAU,IAGlBzI,QAAS,CACL6H,SAAShG,EAAeR,GACpBhG,KAAKqN,MAAM,WAAY7G,EAAUR,IAErC2G,QAAQvD,GACJpJ,KAAKqN,MAAM,UAAWjE,O,qBCnClC,MAAMoC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD,U,8ECsBf,SAAS6B,EAAYxK,EAA4BzB,GAC7C,MAAMuF,EAAQ,GACR2G,EAAU,EAAE,EAAG,GAAI,UAAMC,GAE/B,IAAI,MAAMC,KAAQpM,EAAY,CAC1B,KAAMoM,KAAQ3K,GACV,SAEJ,MAAMZ,EAAQY,EAAM2K,GAChBF,EAAQG,SAASxL,GACjB0E,EAAMQ,MAAK,GAIfR,EAAMQ,KAAK/F,EAAWoM,GAAMvL,EAAOY,IAEvC,OAAO8D,EAAM+G,MAAMV,SAQvB,SAASW,EAAerG,GACpB,OAAOA,EAASa,KAAK,CAACC,EAAGC,IAAOD,EAAE7H,UAAY8H,EAAE9H,UAAa6H,EAAE7H,SAAW8H,EAAE9H,UAAY,EAAI,GAGhG,SAASqN,EAAatG,GAClB,OAAOA,EAASa,KAAK,CAACC,EAAGC,IAAOD,EAAEyF,QAAUxF,EAAEwF,QAAWzF,EAAEyF,OAASxF,EAAEwF,QAAU,EAAI,GAgBlF,SAAUtG,EACZ1E,EACAiL,EACAC,EAAO,GACPC,EAAY,GACZC,EAAO,YACP,MAAMC,EAAU,GAChB,IAAI,MAAMC,KAAkBL,EAAY,CACpC,MAAMrL,EAA2BqL,EAAWK,GACtCC,EAAoB,CACrB3L,EAAKsL,QAAUA,GAAUtL,EAAKsL,QAAUA,EACxCtL,EAAKuL,aAAeA,GACdvL,EAAKuL,aAAeA,GAG3BI,EAAkBC,KAAKrB,UAIvBK,EAAYxK,EAAOJ,EAAKrB,cACxBqB,EAAK6L,MAAQH,EACT1L,EAAK8L,cACL9L,EAAK8L,YAAYC,KAAO/L,EAAK8L,YAAYE,KAAK5L,IAElDqL,EAAQ/G,KAAK1E,IAGrB,MAAkB,aAAXwL,EAAwBN,EAAeO,GAAWN,EAAaM,K,yDCnGpE,SAAU1C,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAM4C,EAA+BC,8BAAkB,qBACjDC,EAAsBD,8BAAkB,YAE9C,OAAQ5C,yBAAcC,yBAAa4C,EAAqB,KAAM,CAC5D3B,QAAS4B,qBAAS,IAAM,CACtBC,yBAAaJ,EAA8B,CACzCzL,UAAW,WACXkJ,aAAa,EACbvJ,OAAQ6I,EAAK7I,OACb4J,eAAgBf,EAAKc,SACrBF,sBAAuBZ,EAAKjH,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,4BAE3CuK,EAAG,I,8DCdD,MAAOC,UAA2BvP,OACpCC,YAAYC,EAAmBC,GAAa,GACxCC,MAAMF,EAAW,IAAKC,I,4BCOf0C,+BAAgB,CAC7BC,WAAY,CAAE0M,gBACdC,OAAQ,CAACC,QACT1M,KAAM,KAAM,CACV2M,QAAS,GACTC,eAAe,IAEjBC,MAAO,CACLpM,MAAO,CACLqM,QAAQrM,GACFA,IACFnD,KAAKqP,QAAU,IAAIJ,EAAmBjP,KAAKJ,UAAWI,KAAKH,YAC3DG,KAAK6C,OAAOuE,KAAKpH,KAAKyP,yBACtBzP,KAAK6C,OAAOuE,KAAKpH,KAAK0P,mBAG1BC,WAAW,IAGfhL,QAAS,CACP6H,SAAShG,EAAeR,GACtBhG,KAAK4P,4BAA4B,CAC/BtK,gBAAiBtF,KAAKqP,QAAQ/J,gBAC9BkB,WACAR,kBAGJ6J,OAAOC,GACL,OAAOb,EAAmBhP,mBAAmBD,KAAKJ,UAAWkQ,IAE/DC,gBAAgBvJ,EAAe6I,GAC7B,OAAO7I,EAASwJ,SAAS1B,KAAM1E,GAAcA,EAAE1H,QAAUmN,IAE3DI,wBACE,IAAIQ,GAAwB,EACxBC,GAAe,EACnB,MAAO,CACLtK,GAAI,WACJuK,SAAU,kCACVpD,KAAMqD,OAAUC,mBAChBC,WAAY,KAAM,EAClBC,KAAM5P,UACJ,GAAIX,KAAKyD,YAAa,CACpB,MAAM+M,EAAcxM,iBAAUc,iBAAiB9E,KAAK2C,WACpD,GAAI6N,GAAe3F,MAAMC,QAAQ0F,EAAYC,mBAAoB,CAC/D,MAAMC,EAAcF,EAAYC,mBAAmB,GAkBnD,OAhBAR,EAAwBS,EAAWpC,KAAM9I,IAA2B,MAClE,MAA6B,wBAAtBA,EAAI3D,eACT,MAAMwE,KAAK,IAAM,OAAHb,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKM,YAAI,WAAN,EAAH,EAAW6K,wBACzB3Q,KAAK8C,MAAMC,IAAM,IAAM/C,KAAK8C,MAAMC,IAAM,KAG5CmN,EAAeQ,EAAWpC,KAAM9I,IAA2B,MACzD,MAA6B,YAAtBA,EAAI3D,iBAAmC,OAAH2D,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKM,YAAI,WAAN,EAAH,EAAW8K,eAAc,IAAItC,KACrEuC,GAAgB,sBAAsBxK,KAAKwK,EAAI7H,QAAwB,aAAd6H,EAAI3O,SAGlElC,KAAKsP,cAAgBoB,EAAWpC,KAAM9I,IAA2B,QAC/D,MAA6B,YAAtBA,EAAI3D,eAA+B,YAAYwE,KACpD,IAAM,OAAHb,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKM,YAAI,OAAY,QAAZ,EAAT,EAAWgL,kBAAU,WAAlB,EAAH,EAAuB9H,WAGvB,EAET,OAAO,EAET,GAA0B,MAAtBhJ,KAAK8C,MAAME,OAAgB,CAC7B,MAAM+N,EAAe,IAAItR,OAAuBO,KAAKJ,UAAWI,KAAKH,YAC/D6F,QAAgBqL,EAAahR,8BACnCkQ,EAAwB,CACX,OAAXvK,EAAiB1F,KAAK8C,MAAMC,IAAM,IAAM/C,KAAK8C,MAAMC,IAAM,IACzD4K,MAAMV,SAKV,OAHAiD,SAAsBlF,QAAQC,IAAI,CAACjL,KAAK6P,OAAO,wBAAyB7P,KAAK6P,OAAO,8BACjFvB,KAAM5I,GAA0C,aAAXA,GACxC1F,KAAKsP,cAAsD,mBAA/BtP,KAAK6P,OAAO,eACjC,GAETmB,mBAAqBpH,IACZ,CACLpE,IAAKoE,EAAEnB,IAAIrI,GAAKJ,KAAKqP,QAAQ4B,eAAe,oBAAqB7Q,EAAE8B,UAGvEgP,cAAcC,EAAoBjP,GAChC,OAAOiP,EAAS1I,IAAI2I,IACE,SAAhBlP,EAAMA,OAA+B,QAAXkP,EAAElP,QAC9BkP,EAAEC,WAAY,GAEG,QAAfnP,EAAMA,OAAmBA,EAAMmP,WAAyB,SAAZD,EAAElP,QAChDkP,EAAEC,WAAY,GAETD,KAGXlH,QAAUoH,IACR,MAAMpH,EAAe,GACfqH,EAAM,CAAC3H,EAAWM,EAAU,MAChC,MAAMsH,IAAWF,EAAEtB,UAAWsB,EAAEtB,SAAS1B,KAAMlO,GAAcA,EAAE8B,QAAU0H,GACzE,MAAO,CAAEZ,MAAOY,EAAG1H,MAAO0H,EAAGyH,UAAWG,KAAatH,IAiCvD,OA/BAA,EAAQ9C,KAAKmK,EAAI,MAAOrB,EAAe,CACrC1B,YAAa,CACXvN,MAAO,SACPwN,KAAM,gGAEN,KACJvE,EAAQ9C,KAAKmK,EAAI,OACS,MAAtBvR,KAAK8C,MAAME,QACbkH,EAAQ9C,KAAKmK,EAAI,OAAQtB,EAAwB,CAC/CzB,YAAa,CACXvN,MAAO,UACPwN,KAAM,4DAEN,KAENvE,EAAQ9C,KAAKmK,EAAI,QAASvR,KAAKsP,cAAgB,CAC7CmC,SAAUzR,KAAKsP,cACfd,YAAa,CACXvN,MAAO,UACPwN,KAAM,kDAEN,KACJvE,EAAQ9C,KAAKmK,EAAI,OAAQvR,KAAKsP,cAAgB,CAC5CmC,SAAUzR,KAAKsP,cACfd,YAAa,CACXvN,MAAO,UACPwN,KAAM,iDAEN,KACJvE,EAAQ9C,KAAKmK,EAAI,UACjBrH,EAAQ9C,KAAKmK,EAAI,SACVrH,GAETwH,OAAQ,CACNC,WAAY,CACV,CACE5Q,KAAM,OACNC,KAAM,MACN4Q,uBAAwB,CACtBC,eAAgB,CAAC7C,EAAQmC,IAChBA,EAAS1I,IAAIqJ,IAClBA,EAAET,UAAwB,SAAZS,EAAE9I,MACT8I,KAIbC,QAAS,IAAM,YAMzBrC,gBACE,MAAO,CACL9J,GAAI,UACJuK,SAAU,sBACVpD,KAAMqD,OAAU4B,QAChBhB,mBAAqBpH,GACfA,IAAM,UAAUvD,KAAK,GAAGuD,EAAE1H,OACrB,CACLsD,IAAKxF,KAAKqP,QAAQ4B,eAAe,WAAYrH,EAAE1H,QAG5C,U,qBC1KjB,MAAMsJ,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD","file":"js/chunk-37c65eed.561df3c2.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsCircumcisionService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 158, providerID)\n    }\n\n    getRecentCircumcisionStatus() {\n        return this.getFirstValueCoded('Circumcision status')\n    }\n}\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const { getOfflinePerson } = Offline()\n            const person = getOfflinePerson(this.offlineID)\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        saveObsOffline(encounterTypeID: number, formdata: any, obs: any, labOrders=undefined as any, status='Pending') {\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: encounterTypeID,\n                meta: formdata,\n                labOrders\n            })\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            try {\n                const enc = new AppEncounterService(\n                    this.patientID,\n                    params.encounterTypeID, \n                    this.providerID\n                )\n                if ((await enc.createEncounter())) {\n                    if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                        status = 'Success'\n                    }\n                }\n                if (typeof params.callback === 'function') {\n                    await params.callback(enc)\n                }\n            } catch (e) {\n                if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                    status = 'NetworkError'\n                } else {\n                    status = 'Exception'\n                }\n                console.error(`${e}`)\n            }\n            if (status === 'Exception') {\n                throw new Error('Unable to proceed!')\n            }\n            this.saveObsOffline(\n                params.encounterTypeID, \n                params.formData,\n                obs,\n                params.labOrders,\n                status\n            )\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Referral\",\n        skipSummary: true,\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsReferralService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 114, providerID)\n    }\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { IonPage } from \"@ionic/vue\"\nimport { HtsReferralService } from \"@/apps/HTS/services/hts_referral_service\"\nimport { HtsCircumcisionService } from '../../services/hts_circumcision_service'\nimport { Offline } from '@/composables/offline'\nimport { ObservationOffline } from '@/interfaces/Sync'\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any,\n    isHivPositive: false as boolean\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsReferralService(this.patientID, this.providerID)\n          this.fields.push(this.referralServicesField())\n          this.fields.push(this.commentsField())\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    onFinish(formData: any, computedData: any) {\n      this.saveFormEncounterAndProceed({\n        encounterTypeID: this.service.encounterTypeID,\n        formData,\n        computedData,\n      })\n    },\n    getObs(concept: string) {\n      return HtsReferralService.getFirstValueCoded(this.patientID, concept)\n    },\n    serviceReferral(formData: any, service: string) {\n      return formData.services.some((v: Option) => v.value === service)\n    },\n    referralServicesField(): Field {\n      let recommendCircumcision = false\n      let recommendSTI = false\n      return {\n        id: \"services\",\n        helpText: 'Refer Client to other Services?',\n        type: FieldType.TT_MULTIPLE_SELECT,\n        isRequired: () => true,\n        init: async () => {\n          if (this.goOffline()) {\n            const offlineData = Offline().getOfflinePerson(this.offlineID)\n            if (offlineData && Array.isArray(offlineData.observationParams)) {\n              const offlineObs = (offlineData.observationParams||[])\n              // Recommend circumcision if not circumcised\n              recommendCircumcision = offlineObs.some((obs: ObservationOffline) => {\n                return obs.encounterName === 'circumcision status' && \n                  /no/i.test(`${obs?.meta?.hts_male_circumcised}`) && \n                  this.facts.age > 14 && this.facts.age < 64\n              })\n              // Recommend STI treatment if found positive\n              recommendSTI = offlineObs.some((obs: ObservationOffline) => {\n                return obs.encounterName === 'testing' && (obs?.meta?.test_results||[]).some(\n                  (res: Option) => /syphilis|Hepatitis/i.test(res.label) && res.value === 'Positive'\n                )\n              })\n              this.isHivPositive = offlineObs.some((obs: ObservationOffline) => {\n                return obs.encounterName === 'testing' && /positive/i.test(\n                  `${obs?.meta?.hiv_result?.label}`\n                )\n              })\n              return true\n            }\n            return false\n          }\n          if (this.facts.gender === 'M') {\n            const circumcision = new HtsCircumcisionService(this.patientID, this.providerID)\n            const status = (await circumcision.getRecentCircumcisionStatus())\n            recommendCircumcision = [\n              status === 'No', this.facts.age > 14 && this.facts.age < 64\n            ].every(Boolean)\n          }\n          recommendSTI = (await Promise.all([this.getObs(\"Syphilis Test Result\"), this.getObs(\"Hepatitis B Test Result\")]))\n            .some((status: string | undefined) => status === 'Positive')\n          this.isHivPositive = (await this.getObs('HIV status')) === 'Positive'\n          return true\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v.map(d => this.service.buildValueText('Referrals ordered', d.value))\n          }\n        },\n        onValueUpdate(listData: Option[], value: Option) {\n          return listData.map(l => {\n            if (value.value === 'None' && l.value != 'None') {\n              l.isChecked = false\n            }\n            if (value.value != 'None' && value.isChecked && l.value === 'None') {\n              l.isChecked = false\n            }\n            return l\n          })\n        },\n        options: (f: any) => {\n          const options: any = []\n          const opt = (v: string, options = {} as any) => {\n            const selected = f.services ? f.services.some((d: Option) => d.value === v) : false\n            return { label: v, value: v, isChecked: selected, ...options }\n          }\n          options.push(opt('STI', recommendSTI ? {\n            description: {\n              color: 'danger',\n              text: 'Client tested positive for STIs. Please recommend this option if client has not started yet'\n            }\n          } : {}))\n          options.push(opt('TB'))\n          if (this.facts.gender === 'M') {\n            options.push(opt('VMMC', recommendCircumcision ? {\n              description: {\n                color: 'primary',\n                text: 'Client is not circumcised, please recommend this option'\n              }\n            } : {}))\n          }\n          options.push(opt('PrEP ', this.isHivPositive ? {\n            disabled: this.isHivPositive,\n            description: {\n              color: 'primary',\n              text: 'Client is HIV positive, cannot refer for PrEP'\n            }\n          } : {}))\n          options.push(opt('PEP ', this.isHivPositive ? {\n            disabled: this.isHivPositive,\n            description: {\n              color: 'primary',\n              text: 'Client is HIV positive, cannot refer for PEP'\n            }\n          } : {}))\n          options.push(opt('Other'))\n          options.push(opt('None'))\n          return options\n        },\n        config: {\n          footerBtns: [\n            {\n              name: \"None\",\n              slot: \"end\",\n              onClickComponentEvents: {\n                refreshOptions: (_: any, listData: Option[]) => {\n                  return listData.map(o => {\n                    o.isChecked = o.label === 'None'\n                    return o\n                  })\n                }\n              },\n              onClick: () => 'None'\n            }\n          ]\n        }\n      }\n    },\n    commentsField(): Field {\n      return {\n        id: 'comment',\n        helpText: 'Comments (Optional)',\n        type: FieldType.TT_NOTE,\n        finalComputedValue: (v: Option | null) => {\n          if (v && !/^\\s*$/gi.test(`${v.value}`)) {\n            return {\n              obs: this.service.buildValueText('Comments', v.value)\n            }\n          }\n          return null\n        }\n      }\n    }\n  }\n})\n","import { render } from \"./HtsReferral.vue?vue&type=template&id=58a6657f&ts=true\"\nimport script from \"./HtsReferral.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsReferral.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}