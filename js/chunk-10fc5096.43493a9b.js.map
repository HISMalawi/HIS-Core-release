{"version":3,"sources":["webpack:///./src/apps/ART/services/stock_service.ts","webpack:///./src/apps/ART/services/dispensation_service.ts","webpack:///./src/apps/ART/views/encounters/Consultation.vue?caca","webpack:///./src/components/DataViews/VLReminderModal.vue?3776","webpack:///./src/components/DataViews/VLReminderModal.vue","webpack:///./src/components/DataViews/VLReminderModal.vue?a14d","webpack:///./src/apps/ART/services/lab_service.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?e8f1","webpack:///./src/components/DataViews/SideEffectsModal.vue","webpack:///./src/components/DataViews/SideEffectsModal.vue?d5c5","webpack:///./src/apps/ART/views/encounters/Consultation.vue","webpack:///./src/apps/ART/views/encounters/Consultation.vue?3980","webpack:///./src/components/DataViews/VLReminderModal.vue?947f","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?ca65","webpack:///./src/apps/ART/services/adherence_service.ts","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue?fe45"],"names":["StockService","Service","constructor","super","drugId","stock","this","getJson","length","reduce","accum","pharm","current_quantity","DRUG_PACK_SIZES","DispensationService","AppEncounterService","patientID","providerID","drugHistory","currentDrugOrder","useDrugManagement","setIsDrugManagementEnabled","isEnabled","ART_PROP","drugManagementEnabled","getDrugHistory","getCurrentOrder","buildDispensations","orderId","tabs","totalPacks","dispensations","i","push","date","quantity","saveDispensations","postJson","getProgramID","void","res","DrugOrderService","getDrugOrderHistory","e","console","warn","getDrugOrders","drugs","map","async","d","fetchAvailableDrugStock","drug","drug_id","Promise","all","getDrugPackSizes","calcCompletePack","units","drugOrderBarcodes","barcodes","sort","a","b","parseInt","completePack","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","_component_ion_title","_component_ion_toolbar","_component_ion_header","_component_ion_content","_component_ion_button","_component_ion_footer","_createElementBlock","_Fragment","_createVNode","default","_withCtx","_createTextVNode","_","style","overflowY","background","_createElementVNode","_toDisplayString","artStartDate","monthsOnART","lastOrder","currentRegimen","regimenStartDate","slot","color","size","onClick","$event","closeModal","defineComponent","name","props","VLData","type","Object","required","HisDate","toStandardHisDisplayFormat","earliest_start_date","period_on_art","last_order_date","current_regimen","date_started","methods","val","modalController","dismiss","data","content","components","IonHeader","IonToolbar","IonTitle","IonContent","IonFooter","IonButton","__exports__","ARTLabService","milestone","concept","getConceptID","coded","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","_hoisted_2","class","_hoisted_3","_hoisted_4","_hoisted_5","_component_ion_label","_component_ion_item","_component_ion_list","_component_ion_col","_component_ion_radio","_component_ion_radio_group","_component_ion_row","_component_ion_grid","height","_renderList","sides","index","key","selectSideEffect","detail","_normalizeStyle","activeIndex","label","modelValue","value","drug_inventory_id","_createCommentVNode","postSideEffects","disabled","allSelected","sideEffects","Array","computed","filter","side","mounted","extendedLabsEnabled","appActivities","specimens","reasons","IonLabel","IonList","IonItem","IonRadioGroup","IonRow","mixins","AdherenceMixinVue","HisStandardForm","currentWeight","weightTrail","customRegimens","labOrders","weightLossPercentageNum","lostTenPercentBodyWeight","CxCaEnabled","CxCaStartAge","CxCaMaxAge","DueForCxCa","currentlyPregnant","currentlyBreastfeeding","patientHitMenopause","hasPregnancyObsToday","autoSelect3HP","labOrderFieldContext","consultation","prescription","dispensation","completed3HP","hasTbHistoryObs","allergicToSulphur","TBSuspected","presentedTBSymptoms","askAdherence","lastDrugsReceived","sideEffectsHistory","onPermanentFPMethods","reasonForDecliningTPTObs","malawiSideEffectReasonObs","otherSideEffectReasonObs","wasTransferredIn","dateStartedArt","clientHadAHysterectomy","isNoneClientPatient","tptStatus","customDrugs","watch","ready","handler","ConsultationService","PrescriptionService","getFields","immediate","f","computedData","encounter","createEncounter","toastWarning","computedObs","resolveObs","secondaryObs","isEmpty","savedObs","saveObservationList","drugObs","saveAdherence","toastSuccess","refer_to_clinician","gotoPatientDashboard","nextTask","formData","drugFilters","tptHistory","routine_tb_therapy","RegimenService","getCustomIngridients","match","includes","other","receivedArvs","getFirstValueCoded","transferLetterObs","getFirstObs","toStandardHisFormat","obs_datetime","value_coded","getDate","dateStarted","getFirstValueDatetime","action","infoActionSheet","vals","ProgramService","getPatientVLInfo","eligibile","modal","create","component","VLReminderModal","backdropDismiss","cssClass","componentProps","present","onDidDismiss","launchOrderSelection","waitForVL","orderService","observations","buildDefferedOrder","canScreenCxCa","age","patient","getAge","isFemale","pregnancyEligible","isChildBearing","showCurrentContraceptionMethods","isPregnant","isANCclient","showNewContraceptionMethods","isOnTubalLigation","pregnant_breastfeeding","inArray","p","isBreastFeeding","current_fp_methods","listData","isChecked","infoAlert","noneIndex","findIndex","familyPlanningMethods","currentIndex","disablePrescriptions","buildMedicationOrders","options","o","buildValueCoded","priscribed","medications","declinedFPM","fp_methods","riskOfUnplannedPregnancy","reason_for_no_fpm","showOtherSideEffects","side_effects","hasTBSymptoms","tb_side_effects","isTBSuspect","toString","isAllergicToSulphur","attr","sideEffectReasons","getSideEffectsReasons","undefined","drugInducedConcept","ConceptService","getCachedConceptID","isOtherReason","reason","r","allYes","s","SideEffectsModalVue","getFPMethods","exclusionList","preChecked","getFamilyPlanningMethods","filtered","method","getOptions","preValues","preValue","find","values","yesNoOptions","getContraindications","contraIndications","getConceptsByCategory","getOtherContraindications","lastElement","pop","getTBSymptoms","getReasonsForNoCxcaOptions","c","runAppendOptionParams","prechecked","checkedOptions","appendOptionParams","appendedOptions","option","didCompleted3HP","patientOnTpt","test","tpt","tptAutoSelectionMode","curOption","is3HPorTPT","ipt3HPConflict","checkedDrugs","item","noTpTPresent","every","Boolean","optionsActionSheet","role","buildValueText","selection","medicationOrderOptions","completedTpt","everTakenTpt","isCurrentlyBreastfeeding","disableOption","text","description","show","toOption","tb_treatment","completed","OrderService","formatLabs","Store","get","getSuspendedProgram","id","proxyID","helpText","FieldType","TT_MULTIPLE_SELECT","init","isGuardian","getClient","PatientTypeService","isDrugRefillPatient","Number","getRecentWeight","getTptTreatmentStatus","validation","Validation","computedValue","v","tag","obs","onValueUpdate","list","on3HPValueUpdate","cd","l","condition","exitsForm","generateDateFields","getTransferInStatus","getDateStartedArt","minDate","maxDate","computeValue","setDate","buildValueDate","estimation","allowUnknown","getARVs","config","showKeyboard","TT_NEXT_VISIT_INTERVAL_SELECTION","nextAppointment","intervals","setNextVisitInterval","calculateDateFromInterval","TT_DRUG_TRANSFER_IN","validateSeries","pillsBrought","some","drugID","buildObs","drug_interval","child","date_last_received_arvs","previous_arvs_received","drugName","prevValue","qty","rmndr","TT_LAB_ORDERS","getVlLabData","unload","checkVLReminder","noGivenResults","result_given","alertConfirmation","enc","result","resultIds","encounterID","encounter_id","saveObs","resultID","onload","fieldContext","printOrder","orderID","PatientPrintoutService","printLabOrderLbl","hiddenFooterBtns","footerBtns","visible","isBreastfeeding","getTLObs","TT_MULTIPLE_YES_NO","anyEmpty","concat","TT_WEIGHT_CHART","getWeightHistory","getWeightLossPercentageFromTrail","bmi","getBMI","x","y","weight","TT_TEXT_BANNER","mapStrToOptions","disableFPMethods","checked","TT_SELECT","offer_contraceptives","cervicalCancerScreeningEnabled","start","end","cervicalCancerScreeningAgeBounds","clientDueForCxCa","clientHasHadAHysterectomy","offer_cxca","getBirthdate","getSessionDate","reason_for_no_cxca","isEstimate","buildValueDateEstimated","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","TT_DATA_TABLE","getDrugSideEffects","columns","table","thTxt","rows","keys","k","tdDate","td","drug_induced","cur","getPreviousDrugs","beforeNext","buildSideEffectObs","onValue","checkIfWeightLossIsControlled","onConditionFalse","TT_NOTE","other_side_effects","on_tb_treatment","defaultValue","hasTreatmentHistoryObs","TT_ADHERENCE_INPUT","getTptDrugs","date_started_tpt","titles","getFacilities","isFilterDataViaApi","log","yesNoUnknownOptions","getAdherenceFields","UserService","isNurse","currentOptions","onClickComponentEvents","refreshOptions","btnEvent","btnOutput","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","AdherenceService","lastDrugs","lastReceiptDate","optimiseHangingPills","Date","receiptDate","order","start_date","htnDrugs","BPManagementService","htnDrugReferences","lastPillCounts","getPreviousDrugPillCount","getReceiptDate","getLastDrugs","receivedDrugsBefore","buildPillCountObs","pillCount","buildValueNumber","programID","adherence","isAdherenceGood","calculateAdherence","given","pills","expected","Math","round","calculateExpected","equivalentDailyDose","startDate","frequency","timeUnit","daysGone","calcTimeElapsed","parseFloat","date1","dayjs","diff","calculateUnaccountedOrMissed","actual","exp","EncounterMixinVue","askReasonForPoorAdherence","calculationAgreementObs","buildAdherenceReport","lastVisit","daysElapsed","timeElapse","rowColors","indexes","cellColors","forEach","formatFrequency","expectedPills","calcPillsExpected","adherenceStatus","unAccountedDoses","equivalent_daily_dose","row","checkDrugsBefore","loadPreviousDrugs","empty","buildAdherenceObs","order_id","fdata","pills_brought","TT_TABLE_VIEWER"],"mappings":"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","file":"js/chunk-10fc5096.43493a9b.js","sourcesContent":["import { Service } from \"@/services/service\";\n\nexport class StockService extends Service {\n    constructor() {\n        super()\n    }\n\n    static async fetchAvailableDrugStock(drugId: number) {\n        const stock = await this.getJson('pharmacy/items', { 'drug_id': drugId })\n        if (stock && stock.length > 0) {\n            return stock.reduce((accum: number, pharm: any) => accum + pharm.current_quantity, 0);\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { StockService } from \"./stock_service\";\nimport ART_PROP from '@/apps/ART/art_global_props';\n// ripped from old ART system\nexport const DRUG_PACK_SIZES: Record<string, any> = {\n    '11': [ 30 ],\n    '21': [ 25 ],\n    '22': [ 60 ],\n    '24': [ 30, 60, 90, 100 ],\n    '30': [ 90 ],\n    '39': [ 60 ],\n    '73': [ 120 ],\n    '74': [ 60 ],\n    '76': [ 1000 ],\n    '297': [ 30, 60, 90 ],\n    '576': [ 30, 60, 90 ],\n    '613': [ 60 ],\n    '731': [ 60 ],\n    '732': [ 60 ],\n    '733': [ 60 ],\n    '734': [ 30 ],\n    '735': [ 30 ],\n    '736': [ 60 ],\n    '738': [ 60 ],\n    '931': [ 12, 30, 60 ],\n    '932': [ 30 ],\n    '954': [ 60 ],\n    '963': [ 30, 60, 90 ],\n    '968': [ 60 ],\n    '969': [ 30 ],\n    '971': [ 30,60,90 ],\n    '976': [ 60 ],\n    '977': [ 30 ],\n    '982': [ 30 ],\n    '983': [ 30, 90 ],\n    '1039': [ 30,60,90 ],\n    '1043': [ 60 ],\n    '1044': [ 30],\n    '1056': [ 24 ],\n    '1216': [3, 6, 8, 12]\n}\n\nexport class DispensationService extends AppEncounterService {\n    drugHistory: Array<any>;\n    currentDrugOrder: Array<any>;\n    useDrugManagement: boolean; \n    constructor(patientID: number, providerID: number) {\n        super(patientID, 54, providerID)\n        this.drugHistory = []\n        this.currentDrugOrder = []\n        this.useDrugManagement = false\n    }\n\n    setIsDrugManagementEnabled(isEnabled: boolean) {\n        this.useDrugManagement = isEnabled\n    }\n\n    async loadDrugManagementEnabled() {\n        this.useDrugManagement = await ART_PROP.drugManagementEnabled()\n    }\n\n    getDrugHistory() {\n        return this.drugHistory\n    }\n\n    getCurrentOrder() {\n        return this.currentDrugOrder\n    }\n\n    buildDispensations(orderId: number, tabs: number, totalPacks: number) {\n        const dispensations = []\n        for(let i=0; i < totalPacks; i++) {\n            dispensations.push({\n                'drug_order_id': orderId,\n                date: this.date,\n                quantity: (tabs / totalPacks)\n            })\n        }\n        return dispensations\n    }\n\n    saveDispensations(dispensations: Array<any>) {\n        return AppEncounterService.postJson('/dispensations', { \n            dispensations, \n            'program_id': AppEncounterService.getProgramID()\n        })\n    }\n\n    async voidOrder(orderId: number) {\n        return AppEncounterService.void(`/dispensations/${orderId}`, {})\n    }\n\n    async loadDrugHistory() {\n        try {\n            const res = await DrugOrderService.getDrugOrderHistory(this.patientID)\n            if (res) this.drugHistory = res\n        } catch (e) {\n            console.warn(e)\n        }\n    }\n\n    async loadCurrentDrugOrder() {\n        const res = await DrugOrderService.getDrugOrders(this.patientID)\n        if (res) {\n            if (this.useDrugManagement) {\n                const drugs = res.map(async (d: any) => {\n                    d['available_stock'] = await StockService.fetchAvailableDrugStock(d.drug.drug_id)\n                    return d\n                })\n                this.currentDrugOrder = await Promise.all(drugs)\n                return\n            }\n            this.currentDrugOrder = res\n        }\n    }\n\n    getDrugPackSizes(drugId: number) {\n        if (drugId in DRUG_PACK_SIZES) {\n            return DRUG_PACK_SIZES[drugId]\n        }\n        return [30, 60, 90]\n    }\n\n    // Ripped from old ART system for backwards compatibility purposes\n    calcCompletePack(drug: any, units: number) {\n        //sorting in an ascending order by tabs\n        const drugOrderBarcodes = drug.barcodes.sort((a: any, b: any) => a.tabs - b.tabs); \n        if (drugOrderBarcodes.length == 0 || units == 0.0) return units;\n        for (const i in drugOrderBarcodes) {\n            const { tabs } = drugOrderBarcodes[i]\n            if (parseInt(tabs) >= units) return tabs;\n        }\n        const completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n        return completePack\n    }\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"VL milestone has been reached\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createElementVNode(\"p\", null, \"ART start date : \" + _toDisplayString(_ctx.artStartDate), 1),\n        _createElementVNode(\"p\", null, \"Months on ART: \" + _toDisplayString(_ctx.monthsOnART), 1),\n        _createElementVNode(\"p\", null, \"Last VL order date \" + _toDisplayString(_ctx.lastOrder), 1),\n        _createElementVNode(\"p\", null, \"Current regimen / start date: \" + _toDisplayString(_ctx.currentRegimen) + \" - \" + _toDisplayString(_ctx.regimenStartDate), 1)\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              slot: \"end\",\n              color: \"success\",\n              size: \"large\",\n              onClick: _cache[0] || (_cache[0] = ($event: any) => (_ctx.closeModal('order')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Order VL\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_button, {\n              slot: \"end\",\n              size: \"large\",\n              onClick: _cache[1] || (_cache[1] = ($event: any) => (_ctx.closeModal('wait')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Wait till next milestone\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_button, {\n              slot: \"start\",\n              color: \"danger\",\n              size: \"large\",\n              onClick: _cache[2] || (_cache[2] = ($event: any) => (_ctx.closeModal('later')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Remind me later \")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  modalController,\n  IonFooter\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport HisDate from \"@/utils/Date\";\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    VLData: {\n      type: Object as any,\n      required: true\n    },\n    \n  },\n  async created() {\n    this.artStartDate = HisDate.toStandardHisDisplayFormat(this.VLData.earliest_start_date);\n    this.monthsOnART = this.VLData.period_on_art;\n    this.lastOrder = this.VLData.last_order_date ? HisDate.toStandardHisDisplayFormat(this.VLData.last_order_date) : 'N/A';\n    this.currentRegimen = this.VLData.current_regimen.name ? this.VLData.current_regimen.name : 'Other';\n    this.regimenStartDate = HisDate.toStandardHisDisplayFormat(this.VLData.current_regimen.date_started);\n  },\n  methods: {\n   async closeModal(val: string) {\n    await modalController.dismiss(val);\n   } \n  },\n  data() {\n    return {\n      content: \"Content\",\n      artStartDate: \"\",\n      monthsOnART: \"\",\n      lastOrder: \"\",\n      currentRegimen: \"\",\n      regimenStartDate: \"\" \n    };\n  },\n  components: {\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonFooter,\n    IonButton,\n  },\n});\n","import { render } from \"./VLReminderModal.vue?vue&type=template&id=10a26cd2&scoped=true&ts=true\"\nimport script from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\nexport * from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\n\nimport \"./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-10a26cd2\"]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nexport class ARTLabService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 13, providerID);\n  }\n  async buildDefferedOrder(milestone: any) {\n    const concept = await AppEncounterService.getConceptID(\"HIV viral load\");\n    const coded = await AppEncounterService.getConceptID(\"Delayed milestones\");\n\n    return [\n      {\n        'concept_id': concept,\n        'value_text': \"Wait till next milestone\",\n        'value_coded': coded,\n        'value_numeric': milestone,\n      }]\n  }\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, createBlock as _createBlock, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-546674a2\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { style: {} }\nconst _hoisted_2 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"side-title\" }, \" Select reason \", -1))\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Current Medication\", -1))\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Previous Medication\", -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_label = _resolveComponent(\"ion-label\")!\n  const _component_ion_item = _resolveComponent(\"ion-item\")!\n  const _component_ion_list = _resolveComponent(\"ion-list\")!\n  const _component_ion_col = _resolveComponent(\"ion-col\")!\n  const _component_ion_radio = _resolveComponent(\"ion-radio\")!\n  const _component_ion_radio_group = _resolveComponent(\"ion-radio-group\")!\n  const _component_ion_row = _resolveComponent(\"ion-row\")!\n  const _component_ion_grid = _resolveComponent(\"ion-grid\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"Side effects suspected causes\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_grid, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_row, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_ion_col, { size: \"4\" }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_ion_list, { style: {overflowY: 'auto', height:'78vh'} }, {\n                      default: _withCtx(() => [\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.sides, (data, index) => {\n                          return (_openBlock(), _createBlock(_component_ion_item, {\n                            key: data,\n                            onClick: ($event: any) => (_ctx.selectSideEffect(index)),\n                            detail: true,\n                            style: _normalizeStyle(_ctx.activeIndex === index ? 'color: green': 'color: black')\n                          }, {\n                            default: _withCtx(() => [\n                              _createVNode(_component_ion_label, null, {\n                                default: _withCtx(() => [\n                                  _createTextVNode(_toDisplayString(data.label), 1)\n                                ]),\n                                _: 2\n                              }, 1024)\n                            ]),\n                            _: 2\n                          }, 1032, [\"onClick\", \"style\"]))\n                        }), 128))\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_ion_col, { style: {overflowY: 'auto', height:'78vh'} }, {\n                  default: _withCtx(() => [\n                    _createElementVNode(\"div\", _hoisted_1, [\n                      _createVNode(_component_ion_list, null, {\n                        default: _withCtx(() => [\n                          (_ctx.activeIndex !== null)\n                            ? (_openBlock(), _createBlock(_component_ion_radio_group, {\n                                key: 0,\n                                modelValue: _ctx.sides[_ctx.activeIndex]['reason'],\n                                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.sides[_ctx.activeIndex]['reason']) = $event))\n                              }, {\n                                default: _withCtx(() => [\n                                  _hoisted_2,\n                                  _hoisted_3,\n                                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs, (drug, i) => {\n                                    return (_openBlock(), _createBlock(_component_ion_item, { key: i }, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, null, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(_toDisplayString(drug.drug.name), 1)\n                                          ]),\n                                          _: 2\n                                        }, 1024),\n                                        _createVNode(_component_ion_radio, {\n                                          slot: \"start\",\n                                          value: drug.drug_inventory_id\n                                        }, null, 8, [\"value\"])\n                                      ]),\n                                      _: 2\n                                    }, 1024))\n                                  }), 128)),\n                                  _hoisted_4,\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withCtx(() => [\n                                          _createTextVNode(\"Other, not drug related\")\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"other\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  }),\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withCtx(() => [\n                                          _createTextVNode(\"Drug side effect\")\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"drug\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  })\n                                ]),\n                                _: 1\n                              }, 8, [\"modelValue\"]))\n                            : _createCommentVNode(\"\", true)\n                        ]),\n                        _: 1\n                      })\n                    ]),\n                    _hoisted_5\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.closeModal,\n              slot: \"end\",\n              color: \"danger\"\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Close \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\"]),\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.postSideEffects,\n              slot: \"end\",\n              disabled: !_ctx.allSelected\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Save \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\", \"disabled\"])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  IonLabel,\n  modalController,\n  IonList,\n  IonItem,\n  IonRadioGroup,\n  IonRow,\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { ActivityInterface } from \"@/apps/interfaces/AppInterface\"\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    sideEffects: {\n      type: Object as PropType<ActivityInterface[]>,\n      required: true\n    },\n    drugs: {\n      type: Array as any, \n      default: []\n    },\n  },\n  methods: {\n    closeModal() {\n      modalController.dismiss()\n    },\n    async postSideEffects() {\n      await modalController.dismiss(this.sides);\n    },\n    selectSideEffect(index: number) {\n      this.activeIndex = index;\n    },\n    \n  },\n  computed: {\n    allSelected(): any {\n      return this.sides.filter((side: any) => side['reason']).length === this.sides.length\n    }\n  },\n  mounted() {\n    this.sides = this.sideEffects;\n  },\n  data() {\n    return {\n      content: \"Content\",\n      extendedLabsEnabled: false as boolean,\n      appActivities: [] as Array<ActivityInterface>,\n      sides: [] as any,\n      specimens: [],\n      reasons: ['Routine', 'Targeted', 'Confirmatory', 'Stat', 'Repeat / Missing'],\n      activeIndex: null as any\n    };\n  },\n  components: {\n    IonButton,\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonLabel,\n    IonList,\n    IonItem,\n    IonRadioGroup,\n    IonRow,\n  },\n});\n","import { render } from \"./SideEffectsModal.vue?vue&type=template&id=546674a2&scoped=true&ts=true\"\nimport script from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\nexport * from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\n\nimport \"./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-546674a2\"]])\n\nexport default __exports__","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { FooterBtnEvent, Option } from \"@/components/Forms/FieldInterface\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { alertConfirmation, infoAlert, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport HisDate from \"@/utils/Date\";\nimport { findIndex, isEmpty, find } from \"lodash\";\nimport { ConsultationService } from \"@/apps/ART/services/consultation_service\";\nimport { UserService } from \"@/services/user_service\";\nimport { OrderService } from \"@/services/order_service\";\nimport { ConceptService } from \"@/services/concept_service\";\nimport AdherenceMixinVue from \"./AdherenceMixin.vue\";\nimport { modalController } from \"@ionic/vue\";\nimport VLReminderModal from \"@/components/DataViews/VLReminderModal.vue\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ARTLabService } from \"../../services/lab_service\";\nimport { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport SideEffectsModalVue from \"@/components/DataViews/SideEffectsModal.vue\";\nimport ART_PROP from \"@/apps/ART/art_global_props\";\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { PatientTypeService } from \"../../services/patient_type_service\";\nimport { PrescriptionService } from \"../../services/prescription_service\";\nimport { DispensationService } from \"../../services/dispensation_service\";\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport Store from \"@/composables/ApiStore\"\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { RegimenService } from \"@/services/regimen_service\";\n\nexport default defineComponent({\n  mixins: [AdherenceMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    fields: [] as any,\n    currentWeight: -1 as any,\n    weightTrail: [] as any,\n    customRegimens: [] as any,\n    labOrders: [] as any,\n    weightLossPercentageNum: 0 as number,\n    lostTenPercentBodyWeight: false as boolean,\n    CxCaEnabled: false as boolean,\n    CxCaStartAge: -1 as number,\n    CxCaMaxAge: -1 as number,\n    DueForCxCa: false as boolean,\n    currentlyPregnant: false as boolean,\n    currentlyBreastfeeding: false,\n    patientHitMenopause: false as boolean,\n    hasPregnancyObsToday: false as boolean,\n    autoSelect3HP: false as boolean,\n    labOrderFieldContext: {} as any,\n    consultation: {} as any,\n    prescription: {} as any,\n    dispensation: {} as any,\n    completed3HP: false as boolean,\n    hasTbHistoryObs: false,\n    allergicToSulphur: false as boolean | null,\n    TBSuspected: false,\n    presentedTBSymptoms: false,\n    askAdherence: false as boolean,\n    lastDrugsReceived: [] as any,\n    sideEffectsHistory: {} as any,\n    onPermanentFPMethods: false,\n    reasonForDecliningTPTObs: {} as any,\n    malawiSideEffectReasonObs: [] as any,\n    otherSideEffectReasonObs: [] as any,\n    wasTransferredIn: false as boolean,\n    dateStartedArt: '' as string,\n    clientHadAHysterectomy: false as any,\n    isNoneClientPatient: false as boolean,\n    tptStatus: {} as Record<string, any>,\n    customDrugs: [] as any\n  }),\n  watch: {\n    ready: {\n      handler(value: boolean) {\n        if (value) {\n          this.consultation = new ConsultationService(this.patientID, this.providerID)\n          this.prescription = new PrescriptionService(this.patientID, this.providerID)\n          this.dispensation = new DispensationService(this.patientID, this.providerID)\n          this.fields = this.getFields();\n        }\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      const encounter = await this.consultation.createEncounter();  \n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n\n      const computedObs = await this.resolveObs(computedData, 'consultation')\n\n      const secondaryObs = (await Promise.all([\n        ...this.malawiSideEffectReasonObs,\n        ...this.otherSideEffectReasonObs,\n        this.reasonForDecliningTPTObs\n      ])).filter((d) => !isEmpty(d))\n\n      const savedObs = await this.consultation.saveObservationList([\n        ...computedObs, ...secondaryObs\n      ])\n\n      if (!isEmpty(this.drugObs) && !this.isNoneClientPatient) await this.saveAdherence();\n\n      if (!savedObs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      if (f.refer_to_clinician && f.refer_to_clinician.value ==='Yes') {\n        this.gotoPatientDashboard()\n        return\n      }\n      this.nextTask();\n    },\n    async getTptDrugs(formData: any){\n      const drugFilters: string[] = []\n      const tptHistory = formData.routine_tb_therapy.value\n      if (isEmpty(this.customDrugs)) {\n        this.customDrugs = await RegimenService.getCustomIngridients()\n      }\n      if(tptHistory.match(/ipt/i)) {\n        drugFilters.push(\"INH or H (Isoniazid 300mg tablet)\")\n      } else if(tptHistory.includes(\"3HP (RFP + INH)\")){\n        drugFilters.push('INH or H (Isoniazid 300mg tablet)')\n        drugFilters.push('Rifapentine (150mg)')\n      } else if(tptHistory.includes(\"INH 300 / RFP 300 (3HP)\")){\n        drugFilters.push(\"INH 300 / RFP 300 (3HP)\")\n      }\n      return !isEmpty(drugFilters) \n        ? this.customDrugs.filter((drug: any) => drugFilters.includes(drug.name))\n          .map((drug: any) => ({\n            label: drug.name,\n            value: '',\n            other: drug\n          }))\n        : []\n    },\n    async getTransferInStatus() {\n      const receivedArvs = await ConsultationService.getFirstValueCoded(\n        this.patientID, 'Ever received ART'\n      )\n      const transferLetterObs = await ConsultationService.getFirstObs(\n        this.patientID, 'Has transfer letter'\n      )\n      const date = transferLetterObs ? HisDate.toStandardHisFormat(transferLetterObs.obs_datetime) : ''\n      return receivedArvs \n        && receivedArvs.match(/yes/i) \n        && transferLetterObs \n        && `${transferLetterObs.value_coded}`.match(/yes/i)\n        && date === this.consultation.getDate()\n    },\n    async getDateStartedArt() {\n      const dateStarted = await ConsultationService.getFirstValueDatetime(this.patientID, 'Date ART started')\n      return dateStarted ? HisDate.toStandardHisFormat(dateStarted) : ''\n    },\n    async checkIfWeightLossIsControlled(val: any) {\n      if (this.lostTenPercentBodyWeight\n        && `${val.label}`.match(/malnutrition/i)\n        && `${val.value}`.match(/no/i)) {\n        const action = await infoActionSheet(\n          'Recommendation',\n          `Patient's weight has dropped by ${this.weightLossPercentageNum}% , is this controlled weight loss??`,\n          'Please verify',\n          [\n            { name: 'Confirm weight loss', slot: 'start', color: 'success'},\n            { name: 'Confirm controlled', slot: 'end', color: 'primary'}\n          ]\n        )\n        val.value = action === 'Confirm weight loss' ? 'Yes' : 'No'\n      }\n    },\n    async checkVLReminder() {\n      const vals = await ProgramService.getPatientVLInfo(this.patientID);\n      if (vals.eligibile === true) {\n        const modal = await modalController.create({\n          component: VLReminderModal,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { VLData: vals },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        switch (data) {\n          case \"order\":\n            await this.labOrderFieldContext.launchOrderSelection();\n            break;\n          case \"wait\":\n            await this.waitForVL();\n            break;\n          case \"later\":\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    async waitForVL(milestone: any = null) {\n      const orderService = new ARTLabService(this.patientID, this.providerID);\n      const encounter = await orderService.createEncounter();\n      const observations = await orderService.buildDefferedOrder(milestone);\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      await orderService.saveObservationList(observations);\n    },\n    canScreenCxCa() {\n      const age = this.patient.getAge()\n      return this.patient.isFemale()\n        && this.DueForCxCa\n        && this.CxCaEnabled \n        && age >= this.CxCaStartAge \n        && age <= this.CxCaMaxAge\n        && !this.clientHadAHysterectomy\n    },\n    pregnancyEligible() {\n      return this.patient.isChildBearing() && !this.onPermanentFPMethods\n    },\n    showCurrentContraceptionMethods(formData: any) {\n      return (this.pregnancyEligible()\n        && !this.patientHitMenopause \n        && !this.isPregnant(formData))\n        && !this.isANCclient()\n    },\n    showNewContraceptionMethods(formData: any) {\n      return (\n        this.pregnancyEligible() &&\n        !this.patientHitMenopause &&\n        !this.isPregnant(formData) &&\n        !this.isOnTubalLigation(formData)\n        && !this.isANCclient()\n      )\n    },\n    isPregnant(formData: any) {\n      if (formData.pregnant_breastfeeding) {\n        return this.inArray(formData.pregnant_breastfeeding, \n          p => p.label === 'Pregnant' && p.value === 'Yes'\n        )\n      }\n      return this.currentlyPregnant\n    },\n    isBreastFeeding(formData: any) {\n      if (formData.pregnant_breastfeeding) {\n        return this.inArray(formData.pregnant_breastfeeding, \n          p => p.label === 'Breastfeeding' && p.value === 'Yes'\n        )\n      }\n      return this.currentlyBreastfeeding\n    },\n    isOnTubalLigation(formData: any) {\n      return this.inArray(formData.current_fp_methods, d => d.value === \"TUBAL LIGATION\")\n    },\n    async disableFPMethods(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE\") {\n            i.isChecked = false;\n            i.disabled = false;\n          }\n          return i;\n        });\n      } else if (value.label != \"NONE\" && value.isChecked) {\n        if (value.label.match(/condom/gi)) infoAlert(\"Combine with other modern methods of family planning\") \n        const noneIndex = findIndex(listData, { label: \"NONE\" });\n        listData[noneIndex].isChecked = false;\n        const vals = this.consultation.familyPlanningMethods(\n          value.label,\n          listData\n        );\n        const currentIndex = findIndex(vals, { label: value.label });\n        vals[currentIndex].isChecked = true;\n        return vals;\n      } else {\n        return listData.map((i) => {\n          i.disabled = false;\n          return i;\n        });\n      }\n    },\n    disablePrescriptions(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE OF THE ABOVE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE OF THE ABOVE\") i.isChecked = false;\n          return i;\n        });\n      } else if (value.label != \"NONE OF THE ABOVE\" && value.isChecked) {\n        const noneIndex = findIndex(listData, { label: \"NONE OF THE ABOVE\" });\n        listData[noneIndex].isChecked = false;\n      }\n      return listData;\n    },\n    buildMedicationOrders(options: Option[]) {\n      if (this.inArray(options, o => o.label === \"NONE OF THE ABOVE\")) {\n        return this.consultation.buildValueCoded('Prescribe drugs', 'No')\n      }\n      const priscribed = this.consultation.buildValueCoded('Prescribe drugs', 'Yes')\n      const medications = options.map( o => this.consultation.buildValueCoded(\n        'Medication orders', o.label\n      ))\n      return [priscribed, ...medications]\n    },\n    declinedFPM(formData: any) {\n      return this.inArray(formData.fp_methods, d => d.value === \"NONE\")\n        && this.inArray(formData.current_fp_methods, d => d.value === \"NONE\")\n    },\n    riskOfUnplannedPregnancy(formData: any) {\n      return formData.reason_for_no_fpm.value === \"At risk of unplanned pregnancy\"\n    },\n    showOtherSideEffects(formData: any) {\n      return this.inArray(formData.side_effects, d => d.label === \"Other\" && d.value === \"Yes\")\n    },\n    hasTBSymptoms(formData: any) {\n      this.presentedTBSymptoms = this.inArray(formData.tb_side_effects, d => d.value === \"Yes\")\n      return this.presentedTBSymptoms\n    },\n    isTBSuspect(data: any){\n      this.TBSuspected = data.value.toString().match(/Yes|TB Suspected/i) ? true : false\n      return this.TBSuspected\n    },\n    isAllergicToSulphur (data: any) {\n      this.allergicToSulphur = data.value.match(/unknown/i) ? null : data.value.match(/yes/i) ? true : false\n      return this.allergicToSulphur\n    },\n    async buildSideEffectObs(data: Option[], attr: 'malawiSideEffectReasonObs' | 'otherSideEffectReasonObs'): Promise<boolean> {\n      const sideEffectReasons  = await this.getSideEffectsReasons(data)\n\n      this[attr] = [] //Clear this incase side effects no longer exist\n  \n      if (sideEffectReasons === undefined) return false\n\n      if (sideEffectReasons != -1) {\n        const drugInducedConcept = ConceptService.getCachedConceptID('Drug induced', true)\n        const isOtherReason = (reason: string) => `${reason}`.match(/other|drug/i) ? true : false\n        this[attr] = sideEffectReasons.map((r: any) => ({\n          'concept_id': drugInducedConcept,\n          'value_coded': ConceptService.getCachedConceptID(r.label, true),\n          'value_text': isOtherReason(r.reason) ? 'Past medication history' : null,\n          'value_drug': !isOtherReason(r.reason) ? r.reason : null //Reason is drug ID number if caused by specific drug\n        }))\n      }\n      return true\n    },\n    async getSideEffectsReasons(sideEffects: Option[]) {\n      const allYes = sideEffects.filter(s => !(`${s.label}`.match(/other/i)) && s.value==='Yes')\n      if (allYes.length > 0) {\n        const modal = await modalController.create({\n          component: SideEffectsModalVue,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { sideEffects: allYes, drugs: this.lastDrugsReceived },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        return data;\n      }\n      return -1\n    },\n    getFPMethods(exclusionList: string[] = [], preChecked: Array<Option>) {\n      const methods = this.consultation.getFamilyPlanningMethods();\n      const filtered = methods.filter(\n        (data: string) => !exclusionList.includes(data)\n      )\n      return filtered.map((method: any) => ({\n        label: method,\n        value: method,\n        isChecked: preChecked.map((i) => i.label).includes(method),\n      }))\n    },\n    getOptions(options: string[], preValues: Array<Option>) {\n      return options.map((data: any) => {\n        const preValue = find(preValues, { label: data });\n        return {\n          label: data,\n          value: preValue ? preValue.value : \"\",\n          other: {\n            values: this.yesNoOptions(),\n          },\n        };\n      });\n    },\n    getContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"contraindication\", true\n      ).map((data) => data.name);\n      return this.getOptions([...contraIndications, \"Other\"], preValues);\n    },\n    getOtherContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"side_effect\", true\n      ).map((data) => data.name);\n      /**\n       * HACK ALERT!!!\n       * Dont want to show Other (Specify) as a last element\n       */\n      const lastElement = contraIndications.pop()\n      return this.getOptions([...contraIndications, \"Other (Specify)\", `${lastElement}`], preValues)\n    },\n    getTBSymptoms(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"tb_symptom\", true\n      ).map((data) => data.name)\n      return this.getOptions([...contraIndications], preValues);\n    },\n    getReasonsForNoCxcaOptions() {\n      return ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n        .map((c: any) => ({\n          label: c.name,\n          value: c.name,\n          other: {\n            c\n          }\n        }))\n    },\n    runAppendOptionParams(options: Option[], prechecked: Option[]) {\n      const checkedOptions = prechecked.filter(o => o.isChecked).map(o => o.label)\n      return options.map(o => {\n        if (typeof o?.other?.appendOptionParams === 'function') {\n          const appendedOptions = o?.other?.appendOptionParams()\n          if (typeof appendedOptions === 'object')  {\n            const option: Option = {\n              label: o.label,\n              value: o.value,\n              other: o.other\n            }\n            if (appendedOptions.isChecked) {\n              option.isChecked = appendedOptions.isChecked\n              delete appendedOptions.isChecked\n            } else {\n              option.isChecked = checkedOptions.includes(o.label)\n            }\n            return { ...option, ...appendedOptions}\n          }\n        }\n        return o\n      })\n    },\n    /**\n     * Checks formdata and previous observation state if a patient completed 3HP\n     */\n    didCompleted3HP(formData: any) {\n      return !this.completed3HP \n        ? formData.routine_tb_therapy \n        && formData.routine_tb_therapy.value.match(/complete/i) ? true : false\n        : true\n    },\n    patientOnTpt(formData: any) {\n      if (formData.routine_tb_therapy != null) {\n        return /Currently/i.test(formData.routine_tb_therapy.value)\n      }\n      return this.tptStatus.tpt !== null && !this.completed3HP\n    },\n    /**\n     * Checks if 3HP can be auto selected based on FormData and \n     * if  it is enabled in global preferences\n     */\n    tptAutoSelectionMode(formData: any) {\n      return this.autoSelect3HP && !this.didCompleted3HP(formData)\n    },\n    /**\n     * Provides validations for TPT selections and value updates\n     */\n    async on3HPValueUpdate(listData: Option[], curOption: Option, formData: any) {\n      const is3HPorTPT = (i: Option) => i.label.match(/IPT|3HP/i) ? true : false\n\n      //Checks if IPT and 3HP are both selected and returns a boolean\n      const ipt3HPConflict: boolean = (() => {\n        const checkedDrugs = listData.reduce(\n        (checkedDrugs: string[], item: Option) => {\n          if (is3HPorTPT(item) \n            && !(item.label in checkedDrugs) \n            && item.isChecked) {\n            checkedDrugs.push(item.label)\n          }\n          return checkedDrugs\n        }, [])\n        return checkedDrugs.includes('IPT') \n          && (checkedDrugs.includes('3HP (RFP + INH)') \n          || checkedDrugs.includes('INH 300 / RFP 300 (3HP)'))\n      })()\n\n      // check if no tpt is present\n      const noTpTPresent = is3HPorTPT(curOption) \n        && listData.filter(i => is3HPorTPT(i)).map(i => !i.isChecked)\n          .every(Boolean)\n  \n      if (noTpTPresent && this.patientOnTpt(formData)) {\n        const modal = await optionsActionSheet(\n          'Reasons for declining TPT', \n          '',\n          [\n            'Patient declined',\n            'Side-effects (previous or current)',\n            'Stock-out',\n            'Starting TB treatment',\n            'Other'\n          ],\n          [\n            { name : 'Done', slot: 'start', role: 'action'}\n          ]\n        )\n        this.reasonForDecliningTPTObs = this.consultation.buildValueText(\n          'Other reason for not seeking services', modal.selection\n        )\n      } else {\n        this.reasonForDecliningTPTObs = {}\n      }\n\n      if (ipt3HPConflict) {\n        const action = await infoActionSheet(\n          \"IPT / 3HP conflict\",\n          \"IPT and 3HP can NOT be prescribed together\",\n          \"Please pick either one\",\n          [\n            { name: \"Prescribe 3HP\", slot: \"start\", color: \"primary\" },\n            { name: \"Prescribe IPT\", slot: \"end\", color: \"primary\" },\n          ]\n        )\n        return listData.map(i => {\n          if (is3HPorTPT(i)) {\n            i.isChecked =\n              action === 'Prescribe IPT' && i.label === 'IPT' || \n              action ==='Prescribe 3HP' && i.label === 'INH 300 / RFP 300 (3HP)'\n          }\n          return i\n        })\n      }\n      return listData.map(i => {\n        // By default, toggle between variants of 3HP. All of them cant be selected at once\n        if (curOption.label === '3HP (RFP + INH)' \n          && i.label === 'INH 300 / RFP 300 (3HP)'\n          && curOption.isChecked) {\n          i.isChecked = false\n        } else if (curOption.label === 'INH 300 / RFP 300 (3HP)' \n          && i.label === '3HP (RFP + INH)'\n          && curOption.isChecked ) {\n            i.isChecked = false\n        }\n        return i\n      })\n    },\n    medicationOrderOptions(formData: any, prechecked=[] as Option[]): Option[] {\n      const completedTpt = this.didCompleted3HP(formData)\n      const everTakenTpt = this.tptStatus.tpt !== null\n      const autoSelect3HP = this.tptAutoSelectionMode(formData)\n      const isCurrentlyBreastfeeding = this.isBreastFeeding(formData)\n\n      const disableOption = (text: string) => ({\n        disabled: true,\n        isChecked: false,\n        description: {\n          color: \"danger\",\n          show: \"always\",\n          text\n        }\n      })\n\n      return this.runAppendOptionParams([\n        this.toOption('ARVs', {\n          appendOptionParams: () => ({ \n            isChecked: autoSelect3HP && !this.TBSuspected\n          })\n        }),\n        this.toOption('CPT', {\n          appendOptionParams: () => {\n            if (autoSelect3HP && !this.TBSuspected \n              && !this.allergicToSulphur) {\n              return { isChecked : true }\n            }\n            return this.allergicToSulphur \n              ? disableOption('Allergic to CPT')\n              : { disabled: false }\n          }\n        }),\n        this.toOption('3HP (RFP + INH)', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentlyPregnant) return disableOption('Pregnant patient')\n            if (isCurrentlyBreastfeeding) return disableOption('Patient is breast feeding')\n            if (this.currentWeight < 20) return disableOption('Weight below regulation')\n            if (everTakenTpt && this.tptStatus.tpt !== '3HP (RFP + INH)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === '3HP (RFP + INH)' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('INH 300 / RFP 300 (3HP)', {\n          appendOptionParams: () => { \n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentlyPregnant) return disableOption('Pregnant patient')\n            if (isCurrentlyBreastfeeding) return disableOption('Patient is breast feeding')\n            if (this.currentWeight < 30) return disableOption('Weight below regulation') \n            if (everTakenTpt && this.tptStatus.tpt !== 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) return { isChecked: true }\n            return { isChecked: autoSelect3HP }\n          }\n        }),\n        this.toOption('IPT', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentlyPregnant) return disableOption('Pregnant patient')\n            if (isCurrentlyBreastfeeding) return disableOption('Patient is breast feeding')\n            if (everTakenTpt && this.tptStatus.tpt !== 'IPT' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === 'IPT' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('NONE OF THE ABOVE')\n      ], prechecked)\n    },\n    async getVlLabData() {\n      return OrderService.formatLabs((await Store.get('GET_LAB_ORDERS_WITH_GIVEN_RESULT_STATUS', { patientID: this.patientID })));\n    },\n    isANCclient() {\n      return ProgramService.getSuspendedProgram() === 'ANC'\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"other_patient_prescription\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            const isGuardian = (await this.consultation.getClient()) === \"No\";\n            if (isGuardian) {\n              this.isNoneClientPatient = true\n            } else {\n              this.isNoneClientPatient = (await PatientTypeService.isDrugRefillPatient(this.patientID))\n                ? true : false\n            }\n            if (this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option[]) => ({ \n            tag: 'consultation',\n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, f: any) => {          \n            const list = this.disablePrescriptions(listData, value);\n            return this.on3HPValueUpdate(list, value, f)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, l: any) => {\n            return !isEmpty(l) ? l : this.medicationOrderOptions(formData)\n          },\n          condition: () => this.isNoneClientPatient,\n          exitsForm: () => true\n        },\n        /**\n        * DRUG TRANSFER IN INITIATION \n        */\n        ...generateDateFields({\n          id: 'date_last_received_arvs',\n          helpText: 'Last ARV Dispensation',\n          required: true,\n          init: async () => {\n            this.wasTransferredIn = (await this.getTransferInStatus()) || false\n            this.dateStartedArt = await this.getDateStartedArt()\n            return true\n          },\n          condition: () => this.wasTransferredIn,\n          minDate: () => this.dateStartedArt,\n          maxDate: () => this.consultation.getDate(),\n          computeValue: (date: string) => {\n            this.prescription.setDate(date)\n            return {\n              tag: 'consultation',\n              date,\n              obs: this.consultation.buildValueDate(\n                'Date drug received from previous facility', date\n              )\n            }\n          },\n          estimation: {\n            allowUnknown: false\n          }\n        }, this.consultation.getDate()),\n        {\n          id: 'previous_arvs_received',\n          helpText: 'Last ARV drugs dispensed',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          computedValue: (v: Option[]) => v.map(d => d.other),\n          validation: (v: Option[]) => Validation.required(v),\n          options: async () => {\n            if (!isEmpty(this.customRegimens)) return this.customRegimens\n            const p = new PrescriptionService(this.patientID, this.providerID)\n            this.customRegimens = (await p.getARVs())\n              .map((drug: any ) => ({\n                label: drug.name,\n                value: drug.drug_id,\n                other: { ...drug }\n              })) as Option[]\n            return this.customRegimens\n          },\n          config: {\n            showKeyboard: true\n          },\n          condition: () => this.wasTransferredIn\n        },\n        {\n          id: 'drug_interval',\n          helpText: 'Duration period for last received ARVs',\n          type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n          condition: () => this.wasTransferredIn,\n          validation: (val: Option) => Validation.required(val),\n          computedValue: (d: Option) => d.other.nextAppointment,\n          options: () => {\n            const intervals = [\n              { label: '2 weeks', value: 14 },\n              { label: '1 month', value: 28 },\n              { label: '2 months', value: 56 },\n              { label: '3 months', value: 84 },\n              { label: '4 months', value: 112 },\n              { label: '5 months', value: 140 },\n              { label: '6 months', value: 168 },\n              { label: '7 months', value: 196 },\n              { label: '8 months', value: 224 },\n              { label: '9 months', value: 252 },\n              { label: '10 months', value: 280 },\n              { label: '11 months', value: 308 },                        \n              { label: '12 months', value: 336 }\n            ]\n            return intervals.map(({label, value}: Option) => {\n              this.prescription.setNextVisitInterval(value)\n              const nextAppointment = this.prescription.calculateDateFromInterval()\n              return {\n                label,\n                value,\n                other: {\n                  label: 'Medication run-out date:',\n                  value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                  nextAppointment,\n                  other: {\n                    label: \"\",\n                    value: []\n                  }\n                }\n              }\n            })\n          }\n        },\n        {\n          id: 'arv_quantities',\n          helpText: 'Amount of drugs dispensed (From last ART Facility)',\n          type: FieldType.TT_DRUG_TRANSFER_IN,\n          validation: (v: Option[]) => this.validateSeries([\n            () => Validation.required(v),\n            () => v.map((i: Option) => i.value === '' || i?.other?.pillsBrought === '')\n              .some(Boolean) ? ['Some Drugs are missing values'] : null\n          ]),\n          computedValue: (v: Option[], f: any, c: any) => ({\n            tag: 'consultation',\n            obs:  v.map(async (d: any) => {\n              const drugID: number = d?.other?.drug?.drug_id || 0\n              return { \n                ...(await this.consultation.buildObs(\n                  'Drug received from previous facility', {\n                    'value_drug': drugID,\n                    'value_datetime': c?.drug_interval || null,\n                    'value_numeric': d?.value || 0\n                    }\n                )),\n                child: [(await this.consultation.buildObs(\n                  'Number of tablets brought to clinic', {\n                    'value_drug': drugID,\n                    'value_numeric': d?.other?.pillsBrought || -1,\n                    'value_datetime': c?.date_last_received_arvs?.date || null\n                  }\n              ))]}\n            })\n          }),\n          options: (_: any, c: any, listData: Option) => {\n            return c.previous_arvs_received\n              .map((d: any) => {\n                const drugName = d['alternative_drug_name'] || d['drug_name'] || d['name']\n                const prevValue = find(listData, { label: drugName })\n                let qty = ''\n                let rmndr = ''\n                if (prevValue) {\n                  qty = prevValue?.value\n                  rmndr = prevValue?.other?.pillsBrought\n                }\n                return {\n                  label: drugName,\n                  value: qty,\n                  other: {\n                    drug: d,\n                    pillsBrought: rmndr\n                  }\n                }\n              })\n          },\n          condition: () => this.wasTransferredIn\n        },\n        /**\n        * END OF DRUG TRANSFER IN\n        */\n        {\n          id: \"patient_lab_orders\",\n          helpText: \"Lab orders\",\n          type: FieldType.TT_LAB_ORDERS,\n          init: async () => {\n            this.labOrders = await this.getVlLabData()\n            return true\n          },\n          unload: async () => {\n            await this.checkVLReminder()\n            // Check if released results were given to the patient\n            const noGivenResults = this.labOrders.filter((r: any) => r.result_given === 'No')\n            if (noGivenResults.length && (await alertConfirmation('Result(s) Given to Client?'))) {\n              const enc = new AppEncounterService(this.patientID, -1, this.providerID)\n              // flatten array and save observations for results given\n              const obs = noGivenResults.reduce((all: any, result: any) => [\n                ...all, ...(result.resultIds.map(async (resultID: number) =>{\n                  enc.encounterID = result.encounter_id\n                  return enc.saveObs((await enc.buildObs(\"Result Given to Client\", {\n                      \"value_coded\": \"Yes\",\n                      \"obs_group_id\": resultID\n                    })))\n                })) \n              ], [])\n              await Promise.all(obs)\n            }\n            // refresh data\n            this.labOrders = await this.getVlLabData()\n          },\n          onload: (fieldContext: any) =>  this.labOrderFieldContext = fieldContext,\n          options: () => {\n            return [\n              {\n                label: \"Lab orders\",\n                value: \"order trail\",\n                other: {\n                  values: this.labOrders\n                }\n              }\n            ]\n          },\n          config: {\n            printOrder: (orderID: number) => {\n              return new PatientPrintoutService(this.patientID).printLabOrderLbl(orderID)\n            },\n            hiddenFooterBtns: [\"Clear\"],\n            footerBtns: [\n              {\n                name: \"Order\",\n                size: \"large\",\n                slot: \"end\",\n                color: \"primary\",\n                visible: true,\n                onClick: async () => {\n                  if (!isEmpty(this.labOrderFieldContext)) {\n                    await this.labOrderFieldContext.launchOrderSelection();\n                  }\n                }\n              }\n            ]\n          },\n        },\n        {\n          id: \"pregnant_breastfeeding\",\n          helpText: `Patient Pregnant or breastfeeding?`,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              if (this.patient.isChildBearing()) {\n                this.hasPregnancyObsToday = await this.patient.hasPregnancyObsToday()\n                this.currentlyPregnant = await this.patient.isPregnant()\n                this.currentlyBreastfeeding = await this.patient.isBreastfeeding();\n              }\n              this.onPermanentFPMethods = await this.consultation.getTLObs();\n            }\n            return true\n          },\n          condition: () => !this.hasPregnancyObsToday && this.pregnancyEligible(),\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded(d.other.concept, d.value)).concat(\n              this.isANCclient() ? [this.consultation.buildValueCoded('Is patient pregnant', 'Yes')] : []\n            ),\n          }),\n          options: (formData: any) => {\n            const options = []\n            // Because ANC clients are always Pregnant!\n            if (!this.isANCclient()) options.push({\n              label: \"Pregnant\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient pregnant\",\n              }\n            })\n\n            options.push({\n              label: \"Breastfeeding\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient breast feeding\",\n              }\n            })\n\n            return formData.pregnant_breastfeeding || options\n          }\n        },\n        {\n          id: \"patient_weight_chart\",\n          helpText: \"Patient weight chart\",\n          type: FieldType.TT_WEIGHT_CHART,\n          init: async () => {\n            this.weightTrail = await this.patient.getWeightHistory()\n            this.weightLossPercentageNum = this.patient.getWeightLossPercentageFromTrail(this.weightTrail)\n            this.lostTenPercentBodyWeight = this.weightLossPercentageNum >= 10\n            return true\n          },\n          options: async () => {\n            const bmi = await this.patient.getBMI();\n            const values = this.weightTrail;\n            return [\n              {\n                label: \"Weight for patient\",\n                value: \"Weight trail\",\n                other: {\n                  bmi,\n                  values: values.map((d: any) => ({\n                    x: HisDate.toStandardHisDisplayFormat(d.date),\n                    y: d.weight,\n                  })),\n                  age: this.patient.getAge(),\n                },\n              },\n            ];\n          },\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n        {\n          id: \"has_fp_methods\",\n          helpText: \"\",\n          type: FieldType.TT_TEXT_BANNER,\n          condition: () => this.onPermanentFPMethods,\n          options: () => this.mapStrToOptions([\n            \"Patient is on Tubal ligation method\"\n          ])\n        },\n        {\n          id: \"current_fp_methods\",\n          helpText: \"What method are you currently on?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.patientHitMenopause = await this.consultation.patientHitMenopause()\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded('Family planning method', d.value))\n          }),\n          condition: (formData: any) => this.showCurrentContraceptionMethods(formData),\n          options: (_: any, checked: Array<Option>) =>this.getFPMethods([], checked),\n        },\n        {\n          id: \"fp_methods\",\n          helpText: \"What method are you providing today?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          condition: (formData: any) => this.showNewContraceptionMethods(formData),\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map((d: Option) => this.consultation.buildValueCoded('Family planning, action to take', d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([], checked)\n        },\n        {\n          id: \"reason_for_no_fpm\",\n          helpText: \"Main reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.declinedFPM(formData),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Why does the woman not use birth control\", v.value) \n          }),\n          options: () => this.mapStrToOptions([\n            \"Not Sexually active\",\n            \"Patient want to get pregnant\",\n            \"Not needed for medical reasons\",\n            \"At risk of unplanned pregnancy\",\n            \"Menopause\"\n          ])\n        },\n        {\n          id: \"specific_reason_for_no_fpm\",\n          helpText: \"Specific reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Reason for not using contraceptives\", v.value)\n          }),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          options: () => this.mapStrToOptions([\n            \"Following wishes of spouse\",\n            \"Religious reasons\",\n            \"Afraid of side effects\",\n            \"Never though about it\",\n            \"Indifferent (does not mind getting pregnant)\"\n          ])\n        },\n        {\n          id: \"offer_contraceptives\",\n          helpText: \"Offer contraceptives\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          computedValue: (v: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Family planning, action to take\", v.value)\n          }),\n          options: () => [\n            { label: \"Accepted\", value: \"Yes\" },\n            { label: \"Declined\", value: \"No\" },\n            { label: \"Discuss with spouse\", value: \"Discuss with spouse\" },\n          ]\n        },\n        {\n          id: \"offered_intervention\",\n          helpText: \"Offered intervention\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => formData.offer_contraceptives.value === \"Accepted\",\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded(d.label, d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([\"NONE\"], checked),\n        },\n        {\n          id: \"offer_cxca\",\n          helpText: \"Refer client for CxCa screening\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.CxCaEnabled = await ART_PROP.cervicalCancerScreeningEnabled()\n              if (this.CxCaEnabled) {\n                const { start, end } = await ART_PROP.cervicalCancerScreeningAgeBounds()\n                this.CxCaMaxAge = end\n                this.CxCaStartAge = start\n                this.DueForCxCa = await this.consultation.clientDueForCxCa()\n                this.clientHadAHysterectomy =  await this.consultation.clientHasHadAHysterectomy();\n              }\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => this.canScreenCxCa() && !this.isPregnant(f),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded('Offer CxCa', v.value)\n          }),\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa\",\n          type: FieldType.TT_SELECT,\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => f.offer_cxca.value === 'No',\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Reason for NOT offering CxCa\", v.value)\n          }),\n          options: () => this.getReasonsForNoCxcaOptions(),\n        },\n        ...generateDateFields({\n          id: 'previous_cxca_test_date',\n          helpText: 'Previous CxCa test',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.reason_for_no_cxca.value === 'Not due for screening',\n          computeValue: (date: string, isEstimate: boolean) => {\n            if (isEstimate) {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDateEstimated('CxCa test date', date)\n              }\n            } else {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDate('CxCa test date', date) \n              }\n            }\n          },\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: 'previous_side_effects',\n          helpText: 'Side effects / Contraindications history',\n          type: FieldType.TT_DATA_TABLE,\n          init: async () => {\n            this.sideEffectsHistory = await this.consultation.getDrugSideEffects()\n            return true\n          },\n          config: {\n            columns: () => [\n              [\n                table.thTxt('Date'),\n                table.thTxt('Condition'),\n                table.thTxt('Drug induced'),\n                table.thTxt('Drug')\n              ]\n            ],\n            rows: () => {\n              return Object.keys(this.sideEffectsHistory)\n              .map((k: string) =>\n                Object.values(this.sideEffectsHistory[k])\n                .filter((d: any) => !isEmpty(d.name))\n                .map((d: any) => [\n                  table.tdDate(k),\n                  table.td(d.name),\n                  table.td(d.drug_induced ? 'Yes' : 'No'),\n                  table.td(d.drug)\n              ]))\n              .reduce((accum, cur) => accum.concat(cur), [])\n            }\n          }\n        },\n        {\n          id: \"side_effects\",\n          helpText: \"Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          init: async () => {\n            this.lastDrugsReceived = await this.consultation.getPreviousDrugs();\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Malawi ART side effects', d.label)),\n              child: [(await this.consultation.buildValueCoded(d.label, d.value))] \n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'malawiSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getContraindications(checked)\n        },\n        {\n          id: \"other_side_effects\",\n          helpText: \"Other Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          condition: (formData: any) => this.showOtherSideEffects(formData),\n          onConditionFalse: () => this.otherSideEffectReasonObs = [],\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.filter(d => d.label != 'Other (Specify)')\n              .map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Other side effect', d.label)),\n              child: [(await this.consultation.buildValueCoded(d.label, d.value))]\n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'otherSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getOtherContraindications(checked),\n        },\n        {\n          id: 'other_side_effect_specify',\n          helpText: \"Other Contraindications / Side effects (specify)\",\n          type: FieldType.TT_NOTE,\n          computedValue: async (v: Option) => ({\n            tag: 'consultation',\n            obs: {\n              ...(await this.consultation.buildValueCoded('Other side effect', 'Other (Specify)')),\n              child: [(await this.consultation.buildValueText('Other (Specify)', v.value ))]\n            }\n          }),\n          condition: (f: any) => this.inArray(\n            f.other_side_effects, d => d.label === \"Other (Specify)\" && d.value === 'Yes'\n          ),\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"on_tb_treatment\",\n          helpText: \"On TB Treatment?\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({ \n            tag: 'consultation', \n            obs: [ this.consultation.buildValueCoded(\"TB treatment\", data.value)].concat(this.isTBSuspect(data) \n              ? [this.consultation.buildValueCoded(\"TB Status\", \"Confirmed TB on treatment\")] \n              : []) \n          }),\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"tb_side_effects\",\n          helpText: \"TB Associated symptoms\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data)\n          ]), \n          condition: (formData: any) => formData.on_tb_treatment.value.match(/no/i),\n          options: (_: any, checked: Array<Option>) => this.getTBSymptoms(checked),\n          computedValue: (vals: Option[], formData: any) => ({\n            tag: 'consultation',\n            obs: vals.map(async (data: Option) => ({\n              ...(await this.consultation.buildValueCoded(\"Routine TB Screening\", data.label)),\n              child: [(await this.consultation.buildValueCoded(data.label, data.value))]\n            })).concat(this.hasTBSymptoms(formData) ? [] : [this.consultation.buildValueCoded(\"TB Status\", \"TB NOT suspected\")])\n          })\n        },\n        {\n          id: \"tb_status\",\n          helpText: \"TB Status\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.hasTBSymptoms(formData),\n          onConditionFalse: () => this.TBSuspected = false,\n          defaultValue: () => 'TB Suspected',\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"TB Status\", data.value)\n          }),\n          beforeNext: async (data: Option) => {\n            if (this.isTBSuspect(data)) {\n              const action = await infoActionSheet(\n                \"Lab Order\",\n                \"The patient is a TB suspect. Do you want to take lab orders?\",\n                \"\",\n                [\n                  { name: \"Order now\", slot: \"start\", color: \"success\" },\n                  { name: \"NOT now\", slot: \"end\", color: \"danger\" },\n                ]\n              )\n              if (action === 'Order now') this.labOrderFieldContext.launchOrderSelection([\n                'TB Microscopic Exam', \n                'GeneXpert', \n                'Culture & Sensitivity',\n                'TB Tests'\n              ])\n            }\n            return true\n          },\n          options: () => this.mapStrToOptions([\n            \"TB NOT suspected\",\n            \"TB Suspected\",\n            \"Confirmed TB Not on treatment\",\n          ])\n        },\n        {\n          id: \"routine_tb_therapy\",\n          helpText: \"TB preventive therapy (TPT) history\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            this.hasTbHistoryObs = await this.consultation.hasTreatmentHistoryObs()\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          condition: () => !this.hasTbHistoryObs,\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Previous TB treatment history\", data.value)\n          }),\n          options: (f: any) => {\n            let options: string[] = []\n            if(/no/i.test(f.on_tb_treatment.value)) {\n              options = [\n                \"Currently on IPT\",\n                \"Currently on 3HP (RFP + INH)\",\n                \"Currently on INH 300 / RFP 300 (3HP)\"\n              ]\n            }\n            options = options.concat([\n              \"Complete course of 3HP in the past (3 months RFP+INH)\",\n              \"Complete course of IPT in the past (min. 6 months of INH)\",\n              \"Aborted course of 3HP (RFP + INH) in the past\",\n              \"Aborted course of INH 300 / RFP 300 (3HP) in the past\",\n              \"Aborted course of IPT in the past\",\n              \"Never taken IPT or 3HP\"\n            ])\n            return this.mapStrToOptions(options)\n          }\n        },\n        ...generateDateFields({\n          id: 'date_started_tpt',\n          helpText: 'Started TPT Treatment',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          computeValue: (date: string) => date,\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: \"tpt_drugs_received\",\n          helpText: \"TPT Drugs Received\",\n          required: true,\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          type: FieldType.TT_ADHERENCE_INPUT,\n          options: (f: any) => this.getTptDrugs(f),\n          computedValue: (drugs: Option[], f: any, c: any) => ({\n            tag: 'consultation',\n            obs:  drugs.map(async (drug: any) => this.consultation.buildObs(\n              'TPT Drugs Received', \n              {\n                'value_drug': drug?.other?.drug_id || 0,\n                'value_datetime': c?.date_started_tpt || null,\n                'value_numeric': drug?.value || 0\n              }\n            ))\n          }),\n          config: {\n            titles: {\n              label: 'Drug name',\n              value: 'Tablets received'\n            }\n          }\n        },\n        {\n          id: 'tpt_tranfer_from',\n          helpText: 'Facility client is transferring in from',\n          type: FieldType.TT_SELECT,\n          computedValue: ({label}: Option) => ({\n            tag:'consultation',\n            obs: this.consultation.buildValueText(\n              'Location TPT last received', label\n            )\n          }),\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          options: (_: any, filter='') => getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true\n          }\n        },\n        {\n          id: \"allergic_to_sulphur\",\n          helpText: \"Allergic to Cotrimoxazole\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Allergic to sulphur\", data.value)\n          }),\n          beforeNext: (data: any) => {\n            this.isAllergicToSulphur(data);\n            console.log(this.allergicToSulphur)\n            return true;\n          },\n          options: () => this.yesNoUnknownOptions()\n        },\n        ...this.getAdherenceFields(true),\n        {\n          id: \"refer_to_clinician\",\n          helpText: \"Refer to clinician\",\n          type: FieldType.TT_SELECT,\n          condition: () => UserService.isNurse(),\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Refer to clinician\", data.value)\n          }),\n          options: () => this.yesNoOptions(),\n        },\n        {\n          id: \"medication_to_prescribe\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (!this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          condition: (f: any) => !f.refer_to_clinician || `${f.refer_to_clinician.value}`.match(/no/i),\n          validation: (data: Option) => Validation.required(data),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation', \n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, formData: any) => {\n            const list =  this.disablePrescriptions(listData, value)\n            return this.on3HPValueUpdate(list, value, formData)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, currentOptions: any) => {\n            return this.medicationOrderOptions(formData, currentOptions)\n          },\n          config: {\n            footerBtns: [\n              {\n                name: \"Update allergic to CPT\",\n                onClickComponentEvents: {\n                  refreshOptions: (btnEvent: FooterBtnEvent, options: Option[], formData: any): Option[] => {\n                    this.allergicToSulphur = btnEvent.btnOutput === 'Allergic'\n                    return this.medicationOrderOptions(formData, options)\n                  }\n                },\n                onClick: () => {\n                  return infoActionSheet(\n                    \"Allergic to Cotrimoxazole update\",\n                    `Is the patient allergic to cotrimoxazole.`,\n                    \"\",\n                    [\n                      { name: \"Allergic\", slot: \"start\", color: \"success\" },\n                      { name: \"NOT Allergic\", slot: \"end\" },\n                    ]\n                  )\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Consultation.vue?vue&type=template&id=501d2692&ts=true\"\nimport script from \"./Consultation.vue?vue&type=script&lang=ts\"\nexport * from \"./Consultation.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\"","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { DrugInterface } from \"@/interfaces/Drug\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { BPManagementService } from \"./htn_service\"\nimport dayjs from \"dayjs\"\n\nexport class AdherenceService extends AppEncounterService {\n    lastDrugs: Array<DrugInterface>\n    lastReceiptDate: string\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 68, providerID) //TODO: Use encounter type reference name\n        this.lastDrugs = []\n        this.lastReceiptDate = ''\n    }\n\n    async loadPreviousDrugs(optimiseHangingPills=false) {\n        const date = new Date(this.date)\n        date.setDate(date.getDate() - 1) // we don't want current date to count\n        const d = (date: string | Date) => HisDate.toStandardHisFormat(date)\n        const drugs = await AppEncounterService.getJson(\n            `patients/${this.patientID}/drugs_received`, { date: d(date) }\n        )\n        if (!isEmpty(drugs)) {\n            this.lastReceiptDate = drugs.reduce((receiptDate: string | null,  drug: any) => {\n                return !receiptDate || (new Date(d(drug.order.start_date)) > new Date(receiptDate))\n                    ?  d(drug.order.start_date)\n                    : receiptDate\n            }, null)\n            const htnDrugs = BPManagementService.htnDrugReferences().map((d: any) => d.drug_id)\n            this.lastDrugs = drugs.filter((drug: DrugInterface) => \n                !htnDrugs.includes(drug.drug['drug_id']) && d(drug.order.start_date) === this.lastReceiptDate\n            )\n            if (optimiseHangingPills) {\n                const lastPillCounts: Record<number, number> = (await this.getPreviousDrugPillCount()) || {}\n                this.lastDrugs = this.lastDrugs.map((d: DrugInterface) => {\n                    if (lastPillCounts[d.drug.drug_id] && d.quantity) {\n                        d.quantity += lastPillCounts[d.drug.drug_id]\n                    }\n                    return d\n                })\n            }\n        }\n    }\n\n    getReceiptDate() { return this.lastReceiptDate }\n\n    getLastDrugs() { return this.lastDrugs }\n\n    receivedDrugsBefore() { return !isEmpty(this.lastDrugs) }\n\n    buildPillCountObs(orderId: number, pillCount: number) {\n        return this.buildValueNumber('Number of tablets brought to clinic', pillCount, null, orderId)\n    }\n    \n    getPreviousDrugPillCount() {\n        return AppEncounterService.getJson('last_drugs_pill_count', {\n            'patient_id': this.patientID,\n            'program_id': this.programID,\n            'date': this.lastReceiptDate\n        })\n    }\n\n    async buildAdherenceObs(orderId: number, drugId: number, adherence: number) {\n        const concept = await AppEncounterService.getConceptID('Drug adherence', true)\n        return {\n            'concept_id': concept,\n            'value_numeric': adherence,\n            'value_drug': drugId,\n            'value_modifier': '%',\n            'order_id': orderId,\n            'person_id': this.patientID,\n            'obs_datetime': AppEncounterService.getSessionDate()\n        }\n    }\n\n    isAdherenceGood(adherence: number) {\n        return adherence >= 95 && adherence <= 105\n    }\n\n    calculateAdherence(given: number, pills: number, expected: number) {\n        return Math.round(100 * (given - pills) / (given - expected));\n    }\n\n    calculateExpected(\n        given: number, \n        equivalentDailyDose: number, \n        startDate: string, \n        frequency: 'QOD' | 'QW'\n    ) {\n        const timeUnit = frequency === 'QW' ? 'week' : 'day'\n        const daysGone = this.calcTimeElapsed(startDate, timeUnit);\n        return (given - (daysGone * parseFloat(equivalentDailyDose.toString())));\n    }\n\n    calcTimeElapsed(date1: string, timeUnit: 'week' | 'day') {\n        // Consider this example: 2022-01-28 to 2022-01-01 diff is supposed to give us a difference of 28 days. \n        // However, dayjs calculates it as a difference of 27 days. Adding a one to correct this issue for a better calculation\n        return dayjs(HisDate.toStandardHisFormat(this.date)).diff(HisDate.toStandardHisFormat(date1), timeUnit) + 1\n    }\n\n    calculateUnaccountedOrMissed(expected: string, actual: string) {\n        const exp = (parseFloat(expected) - parseFloat(actual));\n        return (exp < 0 ? ((exp * -1) + ' missed') : (exp + ' unacc'));\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning } from \"@/utils/Alerts\"\nimport { AdherenceService } from \"@/apps/ART/services/adherence_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from 'lodash'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        adherence: {} as any,\n        drugObs: [] as any,\n        askReasonForPoorAdherence: false,\n        calculationAgreementObs: [] as any,\n    }),\n    methods: {\n        async saveAdherence() {\n            await this.adherence.createEncounter()\n            const data = await Promise.all([...this.drugObs, ...this.calculationAgreementObs])\n            const obs = await this.adherence.saveObservationList(data)\n\n            if (!obs) return toastWarning('Unable to save patient observations')\n        },\n        buildAdherenceReport(data: any) {\n            const lastVisit = this.adherence.getReceiptDate()\n            const daysElapsed = this.adherence.calcTimeElapsed(lastVisit, 'day')\n            const timeElapse = ` Last visit: ${HisDate.toStandardHisDisplayFormat(lastVisit)} \n                (${daysElapsed} Days Elapsed)`\n            const rowColors = [{ indexes: [0, 3, 6], class: 'adherence-col-bg' }]\n            const cellColors: any = []\n            const columns = [timeElapse]\n            const rows = [\n                ['Prescription'],\n                ['Tabs given'],\n                ['Tabs per'],\n                ['Tabs remaining'],\n                ['Expected'],\n                ['Actual (counted)'],\n                ['Adherence'],\n                ['Doses missed/ Unaccounted for'],\n                ['Doses consumed'],\n                ['Art Adherence']\n            ]        \n            data.forEach((order: any, index: number) => {\n                const frequency = this.formatFrequency(order.frequency)\n                const expectedPills = this.calcPillsExpected(order)\n                const adherence = this.adherence.calculateAdherence(\n                    order.quantity, order.pillsBrought, expectedPills\n                )\n                const adherenceStatus = this.adherence.isAdherenceGood(adherence) \n                    ? 'Good adherence' \n                    : 'Explore problem'\n                const unAccountedDoses = this.adherence.calculateUnaccountedOrMissed(\n                    expectedPills, order.pillsBrought\n                )\n                columns.push(order.drug.name)\n                rows[0].push('')\n                rows[1].push(order.quantity)\n                rows[2].push(`${order.equivalent_daily_dose} <b>${frequency}</b>`)\n                rows[3].push('')\n                rows[4].push(expectedPills < 0 ? 0 : expectedPills)\n                rows[5].push(order.pillsBrought)\n                rows[6].push('')\n                rows[7].push(unAccountedDoses)\n                rows[8].push(`${adherence}%`)\n                rows[9].push(adherenceStatus)\n\n                cellColors.push({ \n                    index: index+1,\n                    row: 9, \n                    class: adherenceStatus.match(/good/i) ? 'adherence-txt-good' : 'adherence-txt-bad' \n                })\n            })\n            return [\n                { \n                    label: 'Selected Medication', \n                    value:'Table', \n                    other: { columns, rows, rowColors, cellColors }\n                }      \n            ]\n        },\n        formatFrequency(frequency: string) {\n            return `${frequency}`.match(/qod/i) \n                    ? 'QOD'\n                    : `${frequency}`.match(/weekly/i) \n                    ? 'QW'\n                    : frequency\n        },\n        calcPillsExpected(d: any) {\n            return this.adherence.calculateExpected(\n                d.quantity, \n                d.equivalent_daily_dose, \n                d.order.start_date,\n                this.formatFrequency(d.frequency) as 'QOD' | 'QW'\n            )\n        },\n        getAdherenceFields(checkDrugsBefore=false): Array<Field> {\n            return [\n                {\n                    id: 'pills_brought',\n                    helpText: 'Pills remaining (brought to clinic)',\n                    type: FieldType.TT_ADHERENCE_INPUT,\n                    init: async () => {\n                        this.adherence = new AdherenceService(this.patientID, this.providerID)\n                        await this.adherence.loadPreviousDrugs((await Store.get('ASK_HANGING_PILLS')))\n                        return true\n                    },\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    validation: (val: any) => {\n                        if (Validation.required(val)) return ['No drugs available']\n\n                        const empty = val.map((i: Option) => i.value === '')\n                        \n                        return  empty.some(Boolean) ? ['Some values are missing'] : null\n                    },\n                    unload: async (data: any) => {\n                        this.drugObs = []\n                        data.forEach(async(val: Option) => {\n                            const {drug, order } = val.other\n                            const data = { ...val.other, pillsBrought: val.value }\n                            const adherence = this.adherence.calculateAdherence(\n                                data.quantity, data.pillsBrought, this.calcPillsExpected(data)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildAdherenceObs(order.order_id, drug.drug_id, adherence)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildPillCountObs(order.order_id, val.value)\n                            )\n\n                            if (!this.askReasonForPoorAdherence) {\n                                this.askReasonForPoorAdherence = !this.adherence.isAdherenceGood(data)\n                            }\n                        })\n                    },\n                    options: (fdata: any) => {\n                        if (!isEmpty(fdata.pills_brought)) {\n                            return fdata.pills_brought\n                        }\n                        return this.adherence.getLastDrugs().map((data: any) => ({\n                            label: data.drug.name,\n                            value: '',\n                            other: {\n                                ...data\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: \"adherence_report\",\n                    helpText: \"ART adherence\",\n                    type: FieldType.TT_TABLE_VIEWER,\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    options: (d: any) => this.buildAdherenceReport(\n                        d.pills_brought.map((i: Option) => ({ \n                            ...i.other, pillsBrought: i.value\n                        }))\n                    ),\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    }\n                },\n                {\n                    id: \"agree_with_calculation\",\n                    helpText: \"Agree with adherence calculation\",\n                    type: FieldType.TT_SELECT,\n                    condition: () => this.askReasonForPoorAdherence,\n                    validation: (val: Option) => Validation.required(val),\n                    unload: ({ value }: Option) => {\n                        this.calculationAgreementObs = [ this.adherence.buildValueCoded(\n                            'Reason for poor treatment adherence', value\n                        )]\n                    },\n                    options: () => [\n                        { label: 'Yes', value: 'Yes' },\n                        { label: 'No', value: 'No' }\n                    ]\n                }\n            ]\n        }\n    }\n})\n","import script from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}