{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/ARVNumber.vue?7af8","webpack:///./src/apps/ART/views/encounters/ARVNumber.vue","webpack:///./src/apps/ART/views/encounters/ARVNumber.vue?f4bf","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/services/identifier_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","patientHasARVNumber","currentArvNumber","prependValue","watch","ready","arvNumber","this","patient","getArvNumber","a","split","replace","suggestedNumber","ProgramService","getNextSuggestedARVNumber","arv_number","getFields","immediate","methods","formData","newArvNumber","value","$router","back","exists","IdentifierService","arvNumberExists","toastWarning","updateARVNumber","createArvNumber","e","id","helpText","type","FieldType","TT_TEXT","validation","val","Validation","required","defaultValue","config","initialKb","artApp","HisApp","getActiveApp","programPatientIdentifiers","arvType","prefix","footerBtns","name","slot","color","onClick","async","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","offlineID","patientID","providerID","facts","age","gender","isEnrolledInProgam","formLabel","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","console","log","computed","patientDashboardUrl","isOnline","isOfflineMode","getOfflinePerson","person","birthdate","dayjs","getSessionDate","diff","saveObsOffline","encounterTypeID","formdata","obs","labOrders","status","observations","uploadStatus","meta","resolveObs","computedData","enc","AppEncounterService","createEncounter","saveObservationList","callback","test","error","Error","skipNextTask","nextTask","runflowState","state","states","username","provider","find","person_id","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","toastDanger","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","Service","constructor","super","identifierType","getJson","getIdentifierType","setIdentifierType","getDuplicateIndentifiers","getPatientsByIdentifier","identifier"],"mappings":"uIAEM,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,OAAQV,EAAKU,OACbC,eAAgBX,EAAKY,SACrBC,aAAa,EACbC,sBAAuBd,EAAKe,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,0B,oGCE5BC,+BAAgB,CAC7BC,OAAQ,CAACC,QACTC,WAAY,CAAEC,wBACdC,KAAM,KAAM,CACVC,qBAAqB,EACrBC,iBAAkB,GAClBC,aAAc,KAEhBC,MAAO,CACLC,MAAO,CACL,cAAcA,GACZ,IAAKA,EAAO,OACZ,MAAMC,EAAYC,KAAKC,QAAQC,eAC/B,GAAiB,YAAdH,EAAyB,CAC1B,MAAMI,EAAIJ,EAAUK,MAAM,KAC1BJ,KAAKL,iBAAmBQ,EAAE,GAAGE,QAAQ,WAAY,IACjDL,KAAKJ,aAAe,GAAGO,EAAE,MAAMA,EAAE,MACjCH,KAAKN,qBAAsB,MACtB,CACL,MAAMY,QAAyBC,OAAeC,4BAC9CR,KAAKL,iBAAmBW,EAAgBG,WAAWJ,QAAQ,WAAY,IAEzEL,KAAKlB,OAASkB,KAAKU,aAErBC,WAAW,IAGfC,QAAS,CACP,eAAeC,GACb,MAAMC,EAAeD,EAAS,cAAcE,MAC5C,GAAGD,IAAiBd,KAAKC,QAAQC,eAAgB,OAAOF,KAAKgB,QAAQC,OACrE,MAAMC,QAAeC,OAAkBC,gBAAgBN,GACvD,GAAGI,EAAQG,eAAa,4BAA6B,UAEnD,IACKrB,KAAKN,0BACAM,KAAKC,QAAQqB,gBAAgBR,SAC1Bd,KAAKC,QAAQsB,gBAAgBT,GACxCd,KAAKgB,QAAQC,OACb,MAAOO,GACPH,eAAa,GAAGG,KAItBd,YACE,MAAO,CACL,CACEe,GAAI,aACJC,SAAU,oBACVC,KAAMC,OAAUC,QAChBC,WAAaC,GAAaC,OAAWC,SAASF,GAC9CG,aAAc,IAAMlC,KAAKL,iBACzBwC,OAAQ,CACNC,UAAW,MACXxC,aAAc,KACZ,GAAGI,KAAKJ,aAAc,OAAOI,KAAKJ,aAClC,MAAMyC,EAASC,OAAOC,eACtB,GAAIF,GAAUA,EAAOG,0BAA2B,CAC9C,MAAMC,EAAUJ,EAAOG,0BAA0B,cACjD,OAAOC,EAAQC,SAEjB,MAAO,IAETC,WAAY,CACV,CACEC,KAAM,kBACNC,KAAM,MACNC,MAAO,SACPC,QAASC,gBACDhD,KAAKC,QAAQqB,gBAAgB,WACnCtB,KAAKgB,QAAQC,iB,qBC7E/B,MAAMgC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS9E,KAErD,gB,oECHH+E,E,yEAAZ,SAAYA,GACRA,iCACAA,+CACAA,uDACAA,6CACAA,yBACAA,kBANJ,CAAYA,MAAS,KAQrB,MAAMC,EAAWC,GAAcC,OAAQC,2BAA2BF,GAErDG,EAA2D,CACpE,qEAAsE,CAClEC,SAAU,EACVC,QAAS,CACLC,MAAOV,OAASW,uBACZ,MAAMC,QAAeC,eACjB,6BACA,mBAAmBV,EAAQQ,GAC3B,qEACA,CACI,CAAEf,KAAM,SAAUC,KAAM,MAAOC,MAAO,WACtC,CAAEF,KAAM,iBAAkBC,KAAM,MAAOC,MAAO,WAC9C,CAAEF,KAAM,kBAAmBC,KAAM,MAAOC,MAAO,YAGvD,MAAkB,WAAXc,EACDV,EAAUY,wBACC,mBAAXF,EACAV,EAAUa,uBACVb,EAAUc,WAGxBC,WAAY,CACRC,QAAQA,GACJ,MAAmB,iBAAZA,GAEXP,iBAAiBQ,GAAmB,YAAEC,IAClC,OAAOA,GAAeD,KAIlC,+DAAgE,CAC5DX,SAAU,EACVC,QAAS,CACLC,MAAOV,OAASqB,YAAWD,kBACvB,MAAMR,QAAeC,eACjB,6BAA8B,GAC9B,gBAAgBV,EAAQiB,iCAA2CjB,EAAQkB,KAC3E,CACI,CAAEzB,KAAM,SAAUC,KAAM,MAAOC,MAAO,UACtC,CAAEF,KAAM,sBAAuBC,KAAM,MAAOC,MAAO,aAG3D,MAAkB,wBAAXc,EACDV,EAAUoB,oBACVpB,EAAUY,0BAGxBG,WAAY,CACRI,UAAUA,GAAmB,YAAED,IAC3B,OAAOA,EAAcC,KAIjC,oDAAqD,CACjDb,SAAU,EACVC,QAAS,CACLc,UAAWvB,OAASwB,YAAWC,gBAAeL,cAAaM,cACvD,MAAMC,QAAcC,eAChB,gCAAgCH,EAChC,QAAQtB,EAAQiB,iBAA2BjB,EAAQuB,KACnDF,EACA,CACI,CAAE5B,KAAM,SAAUE,MAAO,SAAUD,KAAM,QAASgC,KAAM,WACxD,CAAEjC,KAAM,UAAWC,KAAM,MAAOgC,KAAM,YAG9C,MAAwB,WAAjBF,EAAMf,OACP,CAAE7C,OAAQ,EAAG+D,UAAW5B,EAAUY,yBAClC,CAAE/C,MAAO4D,EAAMJ,UAAWO,UAAW5B,EAAU6B,gBAG7Dd,WAAY,CACRe,UAAUC,GACN,OAAOA,M,6GCvER7F,+BAAgB,CAC3BG,WAAY,CAAEC,wBACdC,KAAM,KAAM,CACRyF,UAAW,KACXjF,QAAS,GACTnB,OAAQ,GACRqG,UAAW,GACXC,YAAa,EACbZ,UAAW,GACXa,MAAO,CACHC,KAAM,EACNC,OAAQ,GACRlB,UAAW,GACXD,YAAa,GACbM,QAAS,GACTc,oBAAoB,EACpBf,cAAe,MACfD,UAAW,GACXQ,WAAW,EACXd,QAAS,GACTP,iBAAkB,IAEtB8B,UAAW,GACX3F,OAAO,IAEX4F,UACQ1F,KAAK2F,OAAOC,OAAOC,aACnB7F,KAAKkF,UAAYlF,KAAK2F,OAAOC,OAAOC,WACpC7F,KAAKmF,UAAYW,SAAS,GAAG9F,KAAK2F,OAAOC,OAAOC,YAC5C7F,KAAK+F,YACL/F,KAAKgG,kBAELC,OAAMC,IAAI,iBAAkB,CAAEf,UAAWnF,KAAKmF,YACzCgB,KAAKC,IACFpG,KAAKC,QAAUmG,EACVC,qBAAQrG,KAAKC,UACdqG,iBAAUC,aAAavG,KAAKC,SAEhCD,KAAKwG,oBAAoBL,KAAK,KAC1BnG,KAAKyG,2BAA2BN,KAAK,KACjCnG,KAAKF,OAAQ,IACd4G,MAAOlF,GAAMmF,QAAQC,IAAIpF,MAC7BkF,MAAM,KACD1G,KAAK+F,aACL/F,KAAKgG,wBAOjCa,SAAU,CACN1H,oBAA8B,OAAOa,KAAK8G,wBAE9ClG,QAAS,CACLmF,YACI,OAAQgB,OAAShG,OAASiG,OAAcjG,OAE5CgG,WACI,OAAOA,OAAShG,OAEpBiG,gBACI,OAAOA,OAAcjG,OAEzBiF,kBACI,MAAM,iBAAEiB,GAAqBX,iBACvBY,EAASD,EAAiBjH,KAAKkF,WAChCgC,IACLlH,KAAKqF,MAAMhB,UAAY6C,EAAOC,UAC9BnH,KAAKqF,MAAMC,IAAM8B,IAAM7G,OAAe8G,kBAAkBC,KACpDtH,KAAKqF,MAAMhB,UAAW,SAE1BrE,KAAKqF,MAAME,OAAS2B,EAAO3B,OAC3BvF,KAAKF,OAAQ,IAEjByH,eAAeC,EAAyBC,EAAeC,EAAUC,EAA4BC,EAAO,WAChGtB,iBAAUiB,eAAe,CACrBM,aAAcH,EACdjG,GAAIzB,KAAKkF,UACT4C,aAAcF,EACdnD,cAAezE,KAAK2F,OAAO/C,KAC3B4E,gBAAiBA,EACjBO,KAAMN,EACNE,eAGR,kCAAkC/B,EAAO,IACrC,MAAM8B,QAAY1H,KAAKgI,WAAWpC,EAAOqC,cACzC,IAAIL,EAAS,UACb,IACI,MAAMM,EAAM,IAAIC,OACZnI,KAAKmF,UACLS,EAAO4B,gBACPxH,KAAKoF,kBAEE8C,EAAIE,yBACAF,EAAIG,oBAAoBX,KAC/BE,EAAS,WAGc,oBAApBhC,EAAO0C,gBACR1C,EAAO0C,SAASJ,GAE5B,MAAO1G,GAEDoG,EADA,gCAAgCW,KAAK,GAAG/G,GAC/B,eAEA,YAEbmF,QAAQ6B,MAAM,GAAGhH,GAErB,GAAe,cAAXoG,EACA,MAAM,IAAIa,MAAM,sBAEpBzI,KAAKuH,eACD3B,EAAO4B,gBACP5B,EAAO/E,SACP6G,EACA9B,EAAO+B,UACPC,GAEChC,EAAO8C,cAAc1I,KAAK2I,YAEnCC,aAAaC,EAAkBjD,EAAO,MAClC,MAAMkD,EAAc,GAmBpB,GAlBAA,EAAO5F,EAAU6B,cAAiBR,IAC9B,MAAQwE,GAAaxE,EAAUnE,MAAM,KAC/B4I,EAAWC,kBAAKjJ,KAAKwE,UAAW,CAAEuE,aAExC,OADIC,IAAUhJ,KAAKoF,WAAa4D,EAASE,WAClChG,EAAUc,UAErB8E,EAAO5F,EAAUoB,qBAAuB,KACpCtE,KAAKgB,QAAQmI,KAAK,kDAAkDnJ,KAAKmF,WAClEjC,EAAUkG,MAErBN,EAAO5F,EAAUa,wBAA0B,KACvC/D,KAAKgB,QAAQmI,KAAK,qBAAqBnJ,KAAKmF,WACrCjC,EAAUkG,MAErBN,EAAO5F,EAAUY,yBAA2B,KACxC9D,KAAKqJ,uBACEnG,EAAUkG,MAEjBP,KAASC,EACT,OAAOA,EAAOD,GAAOjD,IAG7B,iCACI,MAAM0D,EAAWC,eAAkBvJ,KAAKqF,MAAO9B,GAC/C,IAAI,MAAMiG,KAASF,EAAU,SACzB,MAAMG,EAAUH,EAASE,GACzB,GAAW,OAAPC,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAShG,eAAO,OAAhB,EAAkBC,MAAO,OACzB,MAAMkE,EAAS5H,KAAK4I,mBAA2B,OAAPa,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAShG,eAAO,WAAT,EAAP,EAAkBC,MAAM1D,KAAKqF,SACrE,GAAIuC,IAAW1E,EAAUkG,KAAM,OAEnC,GAAW,OAAPK,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAShG,eAAO,OAAhB,EAAkBc,UAAW,OAC7B,MAAMA,QAAyB,OAAPkF,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAShG,eAAO,WAAT,EAAP,EAAkBc,UAAUvE,KAAKqF,QACzDrF,KAAK4I,aAAarE,EAAUO,UAAWP,EAAUxD,UAI7D,0BACI,IACI,MAAM2I,QAAgBzD,OAAMC,IAAI,kBAAmB,CAAEf,UAAWnF,KAAKmF,YACrEnF,KAAKqF,MAAMG,mBAAqBkE,EAAQC,YAAcpJ,OAAeqJ,eACrE5J,KAAKqF,MAAMnB,QAAUwF,EAAQxF,QAC7BlE,KAAKqF,MAAM1B,iBAAmB+F,EAAQvF,UACxC,MAAO3C,GACLmF,QAAQ6B,MAAMhH,GACdqI,eAAY,GAAGrI,GAEnBxB,KAAKqF,MAAMjB,YAAc7D,OAAe8G,iBACxCrH,KAAKqF,MAAMX,QAAUnE,OAAeuJ,mBACpC9J,KAAKqF,MAAML,UAAYzE,OAAe0E,QACtCjF,KAAKqF,MAAMhB,UAAYrE,KAAKC,QAAQ8J,eACpC/J,KAAKqF,MAAMC,IAAMtF,KAAKC,QAAQ+J,SAC9BhK,KAAKqF,MAAMZ,cAAgBzE,KAAK2F,OAAO/C,KACjC5C,KAAK2F,OAAO/C,KAAKqH,WAAWC,cAC5B,MACF3J,OAAe0E,UACfjF,KAAKwE,gBAAkByB,OAAMC,IAAI,aACjClG,KAAKqF,MAAMb,UAAYxE,KAAKwE,UACvB2F,KAAK,CAAChK,EAAQiK,KACX,MAAMC,EAAYlK,EAAE4I,SAASmB,cACvBI,EAAYF,EAAErB,SAASmB,cAC7B,OAAOG,EAAYC,GAAa,EAAID,EAAYC,EAAa,EAAI,IAEpEC,IAAKC,IAAU,MACZ,IAAI5H,EAAO,GAAG4H,EAAEzB,SAChB,IAAK1C,qBAAS,OAADmE,QAAC,IAADA,GAAS,QAAR,EAADA,EAAGtD,cAAM,WAAR,EAAD,EAAWuD,OAAQ,OAC5B,MAAQC,IAAuB,QAAR,EAAAF,EAAEtD,cAAM,aAAR,EAAUuD,QAAS,GAC1C7H,GAAQ,KAAK8H,EAAWC,cAAcD,EAAWE,eAErD,OAAOhI,MAIvBiI,SAASC,EAAeC,EAAM,IAC1B,MAAO,CACHD,QACA/J,MAAO+J,EACPC,UAGRC,gBAAgBC,GACZ,OAAOA,EAAMV,IAAIW,GAAkB,kBAANA,GAA+B,kBAANA,EAC/C,CAAEJ,MAAOI,EAAGnK,MAAOmK,GAAMA,IAGpCpE,sBACI,MAAO,sBAAsB9G,KAAK2F,OAAOC,OAAOC,YAEpDwD,uBACI,OAAOrJ,KAAKgB,QAAQmI,KAAK,CAACgC,KAAMnL,KAAK8G,yBAEzC,wBACWsE,OAAkBC,OAAO,CAC5BC,iBAAiB,EACjBC,QAAS,0BACTC,UACJ,IACI,MAAM/J,EAAKzB,KAAKkF,WAAalF,KAAKmF,gBAC5BwD,eAASlH,EAAIzB,KAAKgB,QAAShB,KAAK2F,QACxC,MAAOnE,GACLmF,QAAQ6B,MAAMhH,GAElB4J,OAAkBK,SAAStF,KAAKuF,GAAKA,GAAKN,OAAkBO,YAEhEC,eACI,MAAO,CACH,CAAEd,MAAO,MAAO/J,MAAO,OACvB,CAAE+J,MAAO,KAAM/J,MAAO,QAG9B8K,cAAcf,EAAeC,EAAW,IACpC,MAAO,CACHD,QACA/J,MAAO,GACPgK,MAAO,IACAA,EACHe,OAAQ9L,KAAK4L,kBAIzBG,WAAWC,GACP,OAAOA,EAAQzB,IAAK0B,IACT,CAAEnB,MAAOmB,EAAQlL,MAAOkL,MAGvCC,qBAAqBF,GACjB,MAAMG,EAAkB,GACxB,IAAI,MAAMF,KAAUD,GACS,mBAAdC,EAAO,IACVA,EAAO,KAGfE,EAAMhD,KAAKnJ,KAAK6K,SAASoB,EAAO,KAEpC,OAAOE,GAEXC,sBACI,MAAO,CACH,CAAEtB,MAAO,MAAO/J,MAAO,OACvB,CAAE+J,MAAO,KAAM/J,MAAO,MACtB,CAAE+J,MAAO,UAAW/J,MAAO,aAGnCiH,WAAWN,EAAU2E,EAAI,IACrB,MAAMP,EAAcQ,OAAOR,OAAOpE,GAC7B6E,OAAQnJ,GAAWA,IAAMA,EAAEiJ,MAAQA,GAAe,KAARA,IAC1CG,OAAO,CAACC,EAAYC,KACjB,MAAMjN,EAAOiN,EAAIhF,IAAMgF,EAAIhF,IAAMgF,EAQjC,OAPIC,MAAMC,QAAQnN,GACdgN,EAAQA,EAAMI,OAAOpN,GACE,oBAATA,EACdgN,EAAMtD,KAAK1J,KAEXgN,EAAMtD,KAAK1J,GAERgN,GACJ,IACX,OAAOK,QAAQC,IAAIjB,IAEvBkB,QAAQC,EAAiBC,GACrB,IACI,OAAOD,EAAIV,OAAQrB,GAAWgC,EAAWhC,IAAIiC,OAAS,EACxD,MAAO3L,GACL,OAAO,IAGf4L,eAAenJ,GACX,IACI,IAAI,MAAMiH,KAAKjH,EAAY,CACvB,MAAMoJ,EAAYpJ,EAAWiH,KAE7B,GAAImC,EAAW,OAAOA,GAE5B,MAAO7L,GACL,MAAO,CAACA,QCxTxB,MAAMyB,EAAc,EAEL,U,kDCHT,SAAU9E,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQG,yBAAcC,yBAAayO,qCAAyBlP,EAAKmP,UAAW,CAC1EzO,OAAQV,EAAKU,OACbG,YAAab,EAAKa,YAClBuO,YAAapP,EAAKoP,YAClBtO,sBAAuBd,EAAKc,sBAC5BuO,WAAYrP,EAAKY,SACjBA,SAAUZ,EAAKW,eACf2O,UAAWtP,EAAKuP,SACf,KAAM,GAAI,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN5FvO,+BAAgB,CAC3BwD,KAAM,kBACNrD,WAAY,CAAEqO,wBACdC,MAAO,CACH,WACA,WAEJpO,KAAM,KAAM,CACR8N,SAAU,sBAEdO,MAAO,CACH/O,eAAgB,CACZ4C,KAAMoM,UAEV9O,YAAa,CACT0C,KAAMqM,QACNC,SAAS,GAEbT,YAAa,CACT7L,KAAMuM,QAEVpP,OAAQ,CACJ6C,KAAM2K,OACNrK,UAAU,GAEd/C,sBAAuB,CACnByC,KAAMuM,OACNjM,UAAU,IAGlBrB,QAAS,CACL5B,SAAS6B,EAAeoH,GACpBjI,KAAKmO,MAAM,WAAYtN,EAAUoH,IAErC0F,QAAQzC,GACJlL,KAAKmO,MAAM,UAAWjD,O,qBCnClC,MAAMjI,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS9E,KAErD,U,8ECsBf,SAASiQ,EAAY/I,EAA4BpB,GAC7C,MAAM4E,EAAQ,GACRwF,EAAU,EAAE,EAAG,GAAI,UAAMC,GAE/B,IAAI,MAAMC,KAAQtK,EAAY,CAC1B,KAAMsK,KAAQlJ,GACV,SAEJ,MAAMtE,EAAQsE,EAAMkJ,GAChBF,EAAQG,SAASzN,GACjB8H,EAAMM,MAAK,GAIfN,EAAMM,KAAKlF,EAAWsK,GAAMxN,EAAOsE,IAEvC,OAAOwD,EAAM4F,MAAMT,SAQvB,SAASU,EAAepF,GACpB,OAAOA,EAASa,KAAK,CAAChK,EAAGiK,IAAOjK,EAAEqD,UAAY4G,EAAE5G,UAAarD,EAAEqD,SAAW4G,EAAE5G,UAAY,EAAI,GAGhG,SAASmL,EAAarF,GAClB,OAAOA,EAASa,KAAK,CAAChK,EAAGiK,IAAOjK,EAAEyO,QAAUxE,EAAEwE,QAAWzO,EAAEyO,OAASxE,EAAEwE,QAAU,EAAI,GAgBlF,SAAUrF,EACZlE,EACAwJ,EACAC,EAAO,GACPC,EAAY,GACZC,EAAO,YACP,MAAMC,EAAU,GAChB,IAAI,MAAMC,KAAkBL,EAAY,CACpC,MAAMpP,EAA2BoP,EAAWK,GACtCC,EAAoB,CACrB1P,EAAKqP,QAAUA,GAAUrP,EAAKqP,QAAUA,EACxCrP,EAAKsP,aAAeA,GACdtP,EAAKsP,aAAeA,GAG3BI,EAAkBC,KAAKpB,UAIvBI,EAAY/I,EAAO5F,EAAKwE,cACxBxE,EAAK4P,MAAQH,EACTzP,EAAK6P,cACL7P,EAAK6P,YAAYC,KAAO9P,EAAK6P,YAAYE,KAAKnK,IAElD4J,EAAQ9F,KAAK1J,IAGrB,MAAkB,aAAXuP,EAAwBN,EAAeO,GAAWN,EAAaM,K,gGC7FpE,MAAO9N,UAA0BsO,OAEnCC,cACIC,QAAO,6CACP3P,KAAK4P,gBAAkB,EAG3B,4BACI,OAAOD,MAAME,QAAQ,6BAGzB,6BAA6B9P,GACzB,MAAMN,QAAakQ,MAAME,QAAQ,YAAYF,MAAM/F,oCAAoC7J,KACvF,OAAON,EAAKyB,OAGhB4O,oBACI,OAAO9P,KAAK4P,eAGhBG,kBAAkBpO,GACd3B,KAAK4P,eAAiBjO,EAG1BqO,2BACI,OAAOP,OAAQI,QAAQ,gCAAiC,CACpD,QAAW7P,KAAK4P,iBAIxBK,wBAAwBC,GACpB,OAAOT,OAAQI,QAAQ,gCAAgC,CACnD,QAAW7P,KAAK4P,eAChB,WAAcM","file":"js/chunk-444bebfd.b5d05010.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { toastWarning } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport HisApp from \"@/apps/app_lib\"\nimport { IdentifierService } from \"@/services/identifier_service\";\nimport { ProgramService } from \"@/services/program_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    patientHasARVNumber: false,\n    currentArvNumber: \"\" as any,\n    prependValue: \"\" as any,\n  }),\n  watch: {\n    ready: {\n      async handler(ready: any) {\n        if (!ready) return\n        const arvNumber = this.patient.getArvNumber()\n        if(arvNumber !== \"Unknown\") {\n          const a = arvNumber.split('-')\n          this.currentArvNumber = a[2].replace(/^\\D+|\\s/g, \"\")\n          this.prependValue = `${a[0]}-${a[1]}-`\n          this.patientHasARVNumber = true\n        } else {\n          const suggestedNumber =  await ProgramService.getNextSuggestedARVNumber();\n          this.currentArvNumber = suggestedNumber.arv_number.replace(/^\\D+|\\s/g, \"\");\n        }\n        this.fields = this.getFields();\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      const newArvNumber = formData['arv_number'].value\n      if(newArvNumber === this.patient.getArvNumber()) return this.$router.back()\n      const exists = await IdentifierService.arvNumberExists(newArvNumber)\n      if(exists) toastWarning(\"ARV number already exists\", 5000)\n      else {\n        try {\n          if(this.patientHasARVNumber) \n            await this.patient.updateARVNumber(newArvNumber)\n          else await this.patient.createArvNumber(newArvNumber)\n          this.$router.back()\n        } catch (e) {\n          toastWarning(`${e}`)\n        }\n      }   \n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"arv_number\",\n          helpText: \"Update ARV Number\",\n          type: FieldType.TT_TEXT,\n          validation: (val: any) => Validation.required(val),\n          defaultValue: () => this.currentArvNumber,\n          config: {\n            initialKb: '0-9',\n            prependValue: () => {\n              if(this.prependValue) return this.prependValue\n              const artApp = HisApp.getActiveApp()\n              if (artApp && artApp.programPatientIdentifiers) {\n                const arvType = artApp.programPatientIdentifiers['ARV Number']\n                return arvType.prefix()\n              }\n              return ''\n            },\n            footerBtns: [\n              {\n                name: \"Void ARV Number\",\n                slot: \"end\",\n                color: 'danger',\n                onClick: async (formData: any) => {\n                  await this.patient.updateARVNumber(\"Unknown\")\n                  this.$router.back()\n                }\n              }\n            ]\n          },\n        }\n      ]\n    }\n  }\n});\n","import { render } from \"./ARVNumber.vue?vue&type=template&id=2a35d97b&ts=true\"\nimport script from \"./ARVNumber.vue?vue&type=script&lang=ts\"\nexport * from \"./ARVNumber.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const { getOfflinePerson } = Offline()\n            const person = getOfflinePerson(this.offlineID)\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        saveObsOffline(encounterTypeID: number, formdata: any, obs: any, labOrders=undefined as any, status='Pending') {\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: encounterTypeID,\n                meta: formdata,\n                labOrders\n            })\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            try {\n                const enc = new AppEncounterService(\n                    this.patientID,\n                    params.encounterTypeID, \n                    this.providerID\n                )\n                if ((await enc.createEncounter())) {\n                    if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                        status = 'Success'\n                    }\n                }\n                if (typeof params.callback === 'function') {\n                    await params.callback(enc)\n                }\n            } catch (e) {\n                if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                    status = 'NetworkError'\n                } else {\n                    status = 'Exception'\n                }\n                console.error(`${e}`)\n            }\n            if (status === 'Exception') {\n                throw new Error('Unable to proceed!')\n            }\n            this.saveObsOffline(\n                params.encounterTypeID, \n                params.formData,\n                obs,\n                params.labOrders,\n                status\n            )\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Service } from \"./service\";\nimport ART from \"@/apps/ART/app\"\n\nexport interface DuplicateIdentifiersInterface {\n    count: number;\n    identifier: string;\n}\n\nexport class IdentifierService extends Service {\n    identifierType: number\n    constructor() {\n        super()\n        this.identifierType = -1\n    }\n \n    static getIdentifierTypes() {\n        return super.getJson('types/patient_identifiers')\n    }\n\n    static async arvNumberExists(arvNumber: string): Promise<boolean> {\n        const data = await super.getJson(`programs/${super.getProgramID()}/lookup_arv_number/${arvNumber}`)\n        return data.exists\n    }\n\n    getIdentifierType() {\n        return this.identifierType\n    }\n\n    setIdentifierType(type: number) {\n        this.identifierType = type\n    }\n\n    getDuplicateIndentifiers(): Promise<DuplicateIdentifiersInterface[]> {\n        return Service.getJson(`search/identifiers/duplicates`, {\n            'type_id': this.identifierType\n        })\n    }\n\n    getPatientsByIdentifier(identifier: string) {\n        return Service.getJson(`search/patients/by_identifier`,{\n            'type_id': this.identifierType,\n            'identifier': identifier\n        })\n    }\n}\n"],"sourceRoot":""}