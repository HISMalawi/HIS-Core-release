{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsContact.vue?c0cc","webpack:///./src/apps/HTS/services/hts_contact_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsContact.vue","webpack:///./src/apps/HTS/views/encounters/HtsContact.vue?fe26","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/services/person_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","HtsContactService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","push","discussPartnerField","contactIndexPageField","immediate","methods","computedData","obs","resolveObs","createEncounter","saveObservationList","nextTask","buildDateObs","conceptName","date","isEstimate","match","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","buildValueCoded","options","label","value","values","yesNoOptions","context","TT_TABLE_VIEWER","onload","c","condition","f","discuss_partner","validation","async","contact_index_page","rows","other","contacts","formFields","contactRegistrationWorflowForm","modal","MultiStepPopupForm","length","rowID","given_name","val","family_name","relation_to_contact","birth_date","name","color","action","KeyboardInput","TT_SUMMARY","Object","keys","filter","map","d","valLabel","find","modalController","dismiss","alertConfirmation","parseInt","splice","findIndex","r","child","onDidDismiss","columns","reduce","a","concat","config","footerBtns","slot","onClick","fdata","PersonField","getGivenNameField","getFamilyNameField","gender","getGenderField","dob","getDobConfig","computeValue","age","HisDate","getAgeInYears","buildValueNumber","generateDateFields","cell","getCellNumberField","TT_SELECT","mapStrToOptions","contact_hiv_status","last_time_hiv_tested","ipv_status","TT_NOTE","contact_consent","notification_means","TT_DATE_PICKER","defaultValue","toDate","minDate","infoItems","getFacilities","onClickComponentEvents","setValue","btnEvent","btnOutput","getLocationName","showKeyboard","isFilterDataViaApi","getCurrentRegionField","computedValue","getCurrentDistrictField","getCurrentTAfield","getCurrentVillageField","self_testkit_given","TT_TEXT","frs_given","contact_on_art","required","patient","getBirthdate","maxDate","getDate","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","tag","__exports__","FlowState","dformat","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","facts","isEnrolledInProgam","route","params","patient_id","toUpperCase","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","username","split","provider","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","$route","toString","sort","b","usernameA","usernameB","p","isEmpty","person","names","latestName","toOption","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","accum","cur","Array","isArray","Promise","all","inArray","arr","expression","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","formData","$emit","mapToOption","listOptions","item","resolvePerson","computedForm","attr","isPlainObject","Validation","isName","form","PersonService","searchGivenName","searchFamilyName","customOptions","summaryLabel","estimateDateFromAge","allowUnknownMonthDay","AGE_ESTIMATE_FIELD","birthdate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","dynamicHelpText","home_region","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","field","toastWarning","filtered","ok","address","LocationService","createAddress","getHomeTaField","defaultOutput","defaultComputedOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","test","home_village","current_region","current_district","current_traditional_authority","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","getFacilityLocationField","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","birthdate_estimated","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","getNationalID","npid","show","Service","getProgramName","isCondition","ignored","undefined","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","postJson","update","putJson","getJson","personId","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-1beae7ae.17825a1f.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Contact tracing\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsContactService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 195, providerID)\n    }\n}\n","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport {\n  Field,\n  FooterBtnEvent,\n  Option,\n} from \"@/components/Forms/FieldInterface\";\nimport { IonPage, modalController } from \"@ionic/vue\";\nimport { ObsValue } from \"@/services/observation_service\";\nimport { HtsContactService } from \"@/apps/HTS/services/hts_contact_service\";\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport {\n  EstimationFieldType,\n  generateDateFields,\n} from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport KeyboardInput, { MultiStepPopupForm } from \"@/utils/PopupKeyboard\";\nimport HisDate from \"@/utils/Date\";\nimport { alertConfirmation } from \"@/utils/Alerts\";\nimport { find } from \"lodash\";\nimport { toDate } from \"@/utils/Strs\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsContactService(this.patientID, this.providerID);\n          this.fields.push(this.discussPartnerField());\n          this.fields.push(this.contactIndexPageField());\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData);\n      await this.service.createEncounter();\n      await this.service.saveObservationList(obs as ObsValue[]);\n      this.nextTask();\n    },\n    buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n      let obs = {};\n      if (date.match(/unknown/i)) {\n        obs = this.service.buildValueText(conceptName, \"Unknown\");\n      } else if (isEstimate) {\n        obs = this.service.buildValueDateEstimated(conceptName, date);\n      } else {\n        obs = this.service.buildValueDate(conceptName, date);\n      }\n      return obs;\n    },\n    discussPartnerField(): Field {\n      return {\n        id: \"discuss_partner\",\n        helpText: \"Discuss Partner\",\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            obs: this.service.buildValueCoded(\"Consent Confirmation\", v),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Does the client consent to discuss contact?\",\n              value: \"\",\n              values: this.yesNoOptions(),\n            },\n          ];\n        },\n      };\n    },\n    contactIndexPageField(): Field {\n      let context: any = null;\n      return {\n        id: \"contact_index_page\",\n        helpText: \"Registered contacts\",\n        type: FieldType.TT_TABLE_VIEWER,\n        onload: (c: any) => (context = c),\n        condition: (f: any) => f.discuss_partner === \"Yes\",\n        isRequired: () => true,\n        validation: (v: Option[]) => {\n          if (v[0].value <= 0) {\n            return [\"Contact list is empty!!. Please register some\"];\n          }\n          return null;\n        },\n        options: async (f: any) => {\n          let data: any = {};\n          if (f.contact_index_page != null) {\n            data = f.contact_index_page[0] || {};\n          }\n          const rows: Array<any> = [...(data?.other?.rows || [])];\n          const contacts: Record<string, any> = {\n            ...(data?.other?.contacts || {}),\n          };\n          const formFields = this.contactRegistrationWorflowForm();\n          const modal = await MultiStepPopupForm(formFields, {\n            formLabel: `Contact Registration #${rows.length + 1}`,\n            onFinish: async (_: any, computedData: any) => {\n              const rowID = rows.length + 1;\n              rows.push([\n                rowID,\n                `${computedData.given_name.val} ${computedData.family_name.val}`,\n                computedData.relation_to_contact.val,\n                computedData.birth_date.val + \" years\",\n                {\n                  name: \"View\",\n                  type: \"button\",\n                  color: \"primary\",\n                  action: async () => {\n                    KeyboardInput(\n                      {\n                        id: \"summary_view\",\n                        helpText: \"More details\",\n                        type: FieldType.TT_SUMMARY,\n                        options: () => {\n                          return Object.keys(computedData)\n                            .filter((v: any) => computedData[v].val)\n                            .map((d: any) => {\n                              return {\n                                value: computedData[d].val,\n                                label:\n                                  computedData[d].valLabel ||\n                                  find(formFields, { id: d })?.helpText,\n                              };\n                            }) as Option[];\n                        },\n                      },\n                      () => modalController.dismiss()\n                    );\n                  },\n                },\n                {\n                  name: \"Remove\",\n                  type: \"button\",\n                  color: \"danger\",\n                  action: async () => {\n                    if (\n                      await alertConfirmation(\n                        \" Are you sure you want to remove contact?\"\n                      )\n                    ) {\n                      delete context.data[0].other.contacts[rowID];\n                      context.data[0].label = `${\n                        parseInt(`${context.data[0].label}`) - 1\n                      }`;\n                      context.data[0].value = parseInt(context.data[0].label);\n                      context.data[0].other.rows.splice(\n                        context.data[0].other.rows.findIndex(\n                          (r: any) => r[0] === rowID\n                        ),\n                        1\n                      );\n                    }\n                  },\n                },\n              ]);\n              contacts[rowID] = {\n                ...(await this.service.buildValueText(\n                  \"Patient contacts construct\",\n                  `${computedData.given_name.val} ${computedData.family_name.val}`\n                )),\n                child: await this.resolveObs(computedData),\n              };\n              modalController.dismiss();\n            },\n          });\n          await modal.onDidDismiss();\n          return [\n            {\n              label: `${rows.length}`,\n              value: `${rows.length}`,\n              other: {\n                columns: [\"ID\", \"Name\", \"Relation\", \"Age\"],\n                contacts,\n                rows,\n              },\n            },\n          ];\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: Object.values(v[0].other.contacts).reduce(\n              (a: any, c: any) => a.concat(c),\n              []\n            ),\n          };\n        },\n        config: {\n          footerBtns: [\n            {\n              name: \"Add New\",\n              slot: \"end\",\n              color: \"success\",\n              onClick: async () =>\n                (context.data = await context.options(context.fdata)),\n            },\n          ],\n        },\n      };\n    },\n    contactRegistrationWorflowForm(): Field[] {\n      return [\n        (() => {\n          const name = PersonField.getGivenNameField();\n          name.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\n                \"First name of contact\",\n                v.value\n              ),\n            };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getFamilyNameField();\n          name.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Last name of contact\", v.value),\n            };\n          };\n          return name;\n        })(),\n        (() => {\n          const gender = PersonField.getGenderField([\n            { label: \"Male\", value: \"M\" },\n            { label: \"Female Pregnant\", value: \"FP\" },\n            { label: \"Female Non Pregnant\", value: \"FNP\" },\n            { label: \"Female Breastfeeding\", value: \"FBf\" },\n          ]);\n          gender.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Gender of contact\", v.value),\n            };\n          };\n          return gender;\n        })(),\n        ...(() => {\n          const dob = PersonField.getDobConfig();\n          dob.computeValue = (date: string) => {\n            const age = HisDate.getAgeInYears(date);\n            return {\n              valLabel: \"Age\",\n              val: age,\n              obs: this.service.buildValueNumber(\"Age of contact\", age),\n            };\n          };\n          return generateDateFields(dob);\n        })(),\n        (() => {\n          const cell: Field = PersonField.getCellNumberField();\n          cell.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Contact phone number\", v.value),\n            };\n          };\n          return cell;\n        })(),\n        {\n          id: \"marital_status\",\n          helpText: \"Marital Status\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => false,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\n                \"Contact marital status\",\n                v.value\n              ),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\n              \"Single\",\n              \"Married\",\n              \"Divorced\",\n              \"Separated\",\n              \"Widowed\",\n            ]);\n          },\n        },\n        {\n          id: \"relation_to_contact\",\n          helpText: \"Relation to Contact\",\n          type: FieldType.TT_SELECT,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\n                \"Relationships of contact\",\n                v.value as string\n              ),\n            };\n          },\n          isRequired: () => true,\n          options: () => {\n            return this.mapStrToOptions([\n              \"Sexual Partner\",\n              \"Biological Children\",\n              \"Biological Parents\",\n            ]);\n          },\n        },\n        {\n          id: \"contact_hiv_status\",\n          helpText: \"HIV Status of the contact\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\"Contact HIV tested\", v.value),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\"Unknown\", \"Negative\", \"Positive\"]);\n          },\n        },\n        {\n          id: \"last_time_hiv_tested\",\n          helpText: \"When was Contact's Last HIV Test\",\n          type: FieldType.TT_SELECT,\n          condition: (f: any) =>\n            f.contact_hiv_status.value &&\n            f.contact_hiv_status.value === \"Negative\",\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => {\n            return {\n              obs: this.service.buildValueText(\n                \"Contact HIV test date\",\n                `${v.value} ago`\n              ),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\n              \"A year or more ago\",\n              \"Less than a year ago\",\n            ]);\n          },\n        },\n        {\n          id: \"ipv_status\",\n          helpText: \"IPV Status\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          condition: (f: any) =>\n            f.last_time_hiv_tested.value &&\n            f.last_time_hiv_tested.value == \"A year or more ago\",\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"IPV Status\", v.value),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\"Risk\", \"No Risk\"]);\n          },\n        },\n        {\n          id: \"contact_consent\",\n          helpText: \"Consent to contact the contact\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => f.ipv_status.value === \"No Risk\",\n          finalComputedValue: (val: any) => {\n            return {\n              val,\n              obs: this.service.buildValueCoded(\n                \"Consent to contact the contact\",\n                val\n              ),\n            };\n          },\n          options: () => {\n            return [\n              {\n                label: \"Does the client consent to contact?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"reason_for_not_contacting_contact\",\n          helpText:\n            \"Reason for not consenting to contact the contact (Optional)\",\n          type: FieldType.TT_NOTE,\n          condition: (f: any) => f.contact_consent === \"No\",\n          finalComputedValue: (v: Option) => {\n            if (!v) return;\n            return {\n              obs: this.service.buildValueText(\n                \"Reason for not consenting to contact contact\",\n                v.value\n              ),\n            };\n          },\n        },\n        {\n          id: \"notification_means\",\n          helpText: \"Recommended mode of Notification\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          condition: (f: any) => f.contact_consent === \"Yes\",\n          options: () => this.mapStrToOptions([\"Active\", \"Passive\"]),\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\"Notification Means\", v.value),\n            };\n          },\n        },\n        {\n          id: \"referral_type\",\n          helpText: \"Referral Type\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\"Referral type\", v.value),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\n              \"Provider referral\",\n              \"Contact referral\",\n              \"Dual referral\",\n            ]);\n          },\n        },\n        {\n          id: \"set_appointment\",\n          helpText: \"Appointment Date (Within 2 weeks)\",\n          type: FieldType.TT_DATE_PICKER,\n          isRequired: () => true,\n          defaultValue: () => this.service.date,\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          finalComputedValue: (val: any) => {\n            return {\n              val: toDate(val.value),\n              obs: this.service.buildValueDate(\n                \"Contact appointment date\",\n                val.value\n              ),\n            };\n          },\n          config: {\n            minDate: () => this.service.date,\n            infoItems: (date: string) => {\n              return [\n                {\n                  label: \"User set appointment\",\n                  value: toDate(date),\n                },\n              ];\n            },\n          },\n        },\n        {\n          id: \"testing_location\",\n          helpText: \"Testing Location\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: ({ label }: Option) => ({\n            obs: this.service.buildValueText(\n              \"Contact Appointment location\",\n              label\n            ),\n          }),\n          options: (_: any, filter = \"\") => getFacilities(filter),\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          config: {\n            footerBtns: [\n              {\n                name: \"Here\",\n                slot: \"end\",\n                onClickComponentEvents: {\n                  setValue: (btnEvent: FooterBtnEvent) => {\n                    return btnEvent.btnOutput;\n                  },\n                },\n                onClick: () => HtsContactService.getLocationName(),\n              },\n            ],\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n        },\n        {\n          ...PersonField.getCurrentRegionField(),\n          helpText: \"Contact Current Region\",\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\"Contact current region\", v.label),\n          }),\n        },\n        {\n          ...PersonField.getCurrentDistrictField(),\n          helpText: \"Contact Current District\",\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\n              \"Contact current district\",\n              v.label\n            ),\n          }),\n        },\n        {\n          ...PersonField.getCurrentTAfield(),\n          helpText: \"Contact Current TA\",\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\"Contact current TA\", v.label),\n          }),\n        },\n        {\n          ...PersonField.getCurrentVillageField(),\n          helpText: \"Contact Current Village\",\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\n              \"Contact current village\",\n              v.value\n            ),\n          }),\n        },\n        {\n          id: \"contact_address\",\n          helpText: \"Physical address\",\n          type: FieldType.TT_NOTE,\n          isRequired: () => true,\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          finalComputedValue: (v: Option) => ({\n            val: v.value,\n            obs: this.service.buildValueText(\n              \"Contact physical address\",\n              v.value\n            ),\n          }),\n        },\n        {\n          id: \"self_testkit_given\",\n          helpText: \"Contact Self Test Kit Given\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => {\n            return (\n              f.contact_consent === \"No\" ||\n              f.notification_means.value === \"Passive\"\n            );\n          },\n          finalComputedValue: (v: any) => ({\n            obs: this.service.buildValueCoded(\"Self-Test kit given\", v),\n          }),\n          options: () => {\n            return [\n              {\n                label:\n                  \"Was a self test kit given to the Index for their contact?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"reason_for_not_giving_self_testkit\",\n          helpText: \"Reason for not providing a self test (Optional)\",\n          type: FieldType.TT_NOTE,\n          condition: (f: any) => f.self_testkit_given === \"No\",\n          finalComputedValue: (v: Option) => {\n            if (!v) return;\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\n                \"Reason for not giving self-test kit\",\n                v.value\n              ),\n            };\n          },\n        },\n        {\n          id: \"frs_given\",\n          helpText: \"FRS Given\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => false,\n          condition: (f: any) => f.notification_means.value === \"Passive\",\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueCoded(\"FRS given\", v),\n          }),\n          options: () => {\n            return [\n              {\n                label: \"Was FRS given to the Index client for their contact?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"reason_for_not_giving_frs\",\n          helpText: \"Reason for not providing FRS\",\n          type: FieldType.TT_TEXT,\n          isRequired: () => true,\n          condition: (f: any) => f.frs_given === \"No\",\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueText(\n              \"Reason for not giving FRS\",\n              v.value\n            ),\n          }),\n        },\n        {\n          id: \"contact_on_art\",\n          helpText: \"On ART\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => false,\n          condition: (f: any) =>\n            f.contact_hiv_status.value &&\n            f.contact_hiv_status.value === \"Positive\",\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueCoded(\n              \"Contact ever registered at ART clinic\",\n              v\n            ),\n          }),\n          options: () => {\n            return [\n              {\n                label: \"Is the Contact on ART?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"index_contact\",\n          helpText: \"Contact Indexing\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"No\",\n          options: () => {\n            return [\n              {\n                label: \"Do you want to convert the contact to an index client?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueCoded(\"Index patient\", v),\n          }),\n        },\n        {\n          id: \"art_start_location\",\n          helpText: \"Contact ART start location?\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: ({ label }: Option) => ({\n            obs: this.service.buildValueText(\n              \"Contact location of ART initiation\",\n              label\n            ),\n          }),\n          options: (_: any, filter = \"\") => getFacilities(filter),\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"Yes\",\n          config: {\n            footerBtns: [\n              {\n                name: \"Here\",\n                slot: \"end\",\n                onClickComponentEvents: {\n                  setValue: (btnEvent: FooterBtnEvent) => {\n                    return btnEvent.btnOutput;\n                  },\n                },\n                onClick: () => HtsContactService.getLocationName(),\n              },\n            ],\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n        },\n        ...generateDateFields(\n          {\n            id: \"date_started_art\",\n            helpText: \"Contact Art Start\",\n            required: true,\n            condition: (f: any) =>\n              f.contact_on_art && f.contact_on_art === \"Yes\",\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.service.getDate(),\n            estimation: {\n              allowUnknown: true,\n              estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD,\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                isEstimate,\n                obs: this.buildDateObs(\n                  \"Contact Date ART started\",\n                  date,\n                  isEstimate\n                ),\n              };\n            },\n          },\n          this.service.getDate()\n        ),\n        {\n          id: \"contact_art_number\",\n          helpText: \"Contact ART number\",\n          type: FieldType.TT_TEXT,\n          isRequired: () => true,\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"Yes\",\n          computedValue: (d: Option) => ({\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Contact ART number at previous location\",\n              d.value\n            ),\n          }),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./HtsContact.vue?vue&type=template&id=1a16e3b6&ts=true\"\nimport script from \"./HtsContact.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsContact.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Gender',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: 'Birth',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'Home District',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            dynamicHelpText: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return 'Home Country'\n                }\n                return 'Home District'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'Home TA',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Home Village',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Current Region',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.value }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Use Home Address\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'Current District'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'Current TA',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Current Village',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Gender\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Person } from \"@/interfaces/person\"\nimport { Service } from \"./service\"\n\nexport interface NewPerson {\n    person_id?: number;\n    given_name: string;\n    family_name: string;\n    gender: string;\n    birthdate: string;\n    birthdate_estimated: boolean;\n    home_district: string;\n    home_traditional_authority: string;\n    home_village: string;\n    current_district: string;\n    current_traditional_authority: string;\n    current_village: string;\n    landmark: string;\n    cell_phone_number: string;\n    occupation: string;\n    facility_name: string;\n    patient_type?: string;\n    relationship?: string;\n}\n\nexport class PersonService extends Service{\n    person: Person | NewPerson\n    constructor(person: NewPerson | Person){\n        super()\n        this.person = person\n    }\n\n    create() { return Service.postJson('/people', this.person) }\n\n    update(id: number) { return Service.putJson(`people/${id}`, {\n        ...this.person, 'program_id': Service.getProgramID()\n    })}\n\n    static searchFamilyName(name: string) {\n        return super.getJson('/search/family_name', {'search_string': name})\n    }\n\n    static searchGivenName(name: string) {\n        return super.getJson('/search/given_name', {'search_string': name})\n    }\n\n    static async getPersonFullName(personId: string | number) {\n        const names = await super.getJson(`/people/${personId}/names`)\n        return names && names.length ? names[0].given_name + ' ' + names[0].family_name : ''\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}