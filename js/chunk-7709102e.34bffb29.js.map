{"version":3,"sources":["webpack:///./src/apps/ART/services/htn_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/DataViews/RiskFactorModal.vue?731e","webpack:///./src/apps/ART/services/medical_history.ts","webpack:///./src/components/DataViews/RiskFactorModal.vue","webpack:///./src/components/DataViews/RiskFactorModal.vue?dfb1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/components/DataViews/RiskFactorModal.vue?4b6b","webpack:///./src/utils/GuidelineEngine.ts"],"names":["HTN_SESSION_KEY","BPManagementService","AppEncounterService","constructor","patientID","providerID","super","sbp","dbp","bpTrail","firstRecentGrade","secondRecentGrade","Object","values","sort","a","b","date","map","bp","this","getBpGrade","getSystolicBp","ObservationService","getFirstValueNumber","getDiastolicBp","query","getFirstValueCoded","getJson","drugID","pills","postJson","state","getDrugs","HCZ","drugs","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","adherence","notes","Enalapril","remaining","Amlodipine","Atenolol","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","facts","age","gender","isEnrolledInProgam","formLabel","ready","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","isOnline","isOfflineMode","getOfflinePerson","person","birthdate","dayjs","ProgramService","getSessionDate","diff","saveObsOffline","encounterTypeID","formdata","obs","labOrders","status","observations","id","uploadStatus","meta","resolveObs","computedData","enc","createEncounter","saveObservationList","callback","test","error","Error","formData","skipNextTask","nextTask","runflowState","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","toastDanger","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","usernameA","usernameB","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","v","dismiss","yesNoOptions","toYesNoOption","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_title","_resolveComponent","_component_ion_toolbar","_component_ion_header","_component_ion_label","_component_ion_checkbox","_component_ion_item","_component_ion_list","_component_ion_col","_component_ion_row","_component_ion_grid","_component_ion_content","_component_ion_button","_component_ion_footer","_openBlock","_createElementBlock","_Fragment","_createVNode","default","_withCtx","_createTextVNode","_","style","overflowY","background","height","_renderList","riskFactors","_createBlock","key","_toDisplayString","modelValue","$event","size","onClick","exit","showManageBPButton","manageBP","_createCommentVNode","postActivities","MedicalHistoryService","props","factors","type","required","title","String","history","encounter","buildObs","closeModal","modalController","r","val","valConcept","ConceptService","getConceptID","con","concept","mounted","forEach","factor","ind","findIndex","IonButton","IonContent","IonHeader","IonTitle","IonToolbar","IonLabel","IonList","IonItem","IonCheckbox","IonRow","IonFooter","IonGrid","IonCol","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","Function","Boolean","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","description","text","info"],"mappings":"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","file":"js/chunk-7709102e.34bffb29.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ObservationService } from \"@/services/observation_service\"\n\nexport enum HTN_SESSION_KEY {\n  Prescription = \"htnPrescription\"\n}\n\nexport class BPManagementService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n      super(patientID, 48, providerID) //TODO: Use encounter type reference name'\n    }\n\n    static getBpGrade(sbp: number, dbp: number) {\n      if ((sbp < 140) && (dbp < 90)) {\n        return \"normal\"\n      }\n      else if ((sbp >= 140 && sbp < 160) || (dbp >= 100 && dbp < 110)) {\n        return \"grade 1\"\n      }\n      else if ((sbp >= 180 && dbp > 110) || sbp >= 180) {\n        return \"grade 3\"\n      }\n      else if ((sbp >= 160 && sbp < 180) || (dbp >= 110)) {\n        return \"grade 2\"\n      }\n      return 'N/A'\n    }\n\n    /**\n     * BP is normointensive if two most recent consecutive tests are normal\n     * @param bpTrail \n     * @returns\n    */\n    static isBpNormotensive(bpTrail: any) {\n      const [ firstRecentGrade, secondRecentGrade ] = Object.values(bpTrail)\n        .sort((a: any, b: any) => a.date < b.date ? 1 : 0)\n        .map((bp: any) => this.getBpGrade(bp.sbp, bp.dbp))\n      return firstRecentGrade === 'normal' && secondRecentGrade === 'normal'\n    }\n\n    getSystolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Systolic blood pressure')\n    }\n\n    getDiastolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Diastolic blood pressure')\n    }\n\n    async onBpDrugs() {\n      const query = await ObservationService.getFirstValueCoded(this.patientID, 'Treatment status')\n      return query ? query === 'Yes' : false\n    }\n  \n    async getBPTrail() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/bp_trail`);\n    }\n    async getCurrentDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/current_bp_drugs`);\n    }\n    async getLastDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/last_bp_drugs_dispensation`);\n    }\n    async getAdherence(drugID: number, pills: number) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/remaining_bp_drugs`, {\n        'drug_id': drugID,\n        pills: pills\n      });\n    }\n    async enrollPatient(state: any) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/update_or_create_htn_state`, state);\n    }\n    static htnDrugReferences() {\n      return [\n        { \n          'drug_id': 275,\n          'drug_name': \"HCZ (25mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 942,\n          'drug_name': \"Enalapril (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 943,\n          'drug_name': \"Enalapril (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 558,\n          'drug_name': \"Amlodipine (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 559,\n          'drug_name': \"Amlodipine (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 117,\n          'drug_name': \"Atenolol (50mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 11,\n          'drug_name': \"Atenolol(100mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        }\n      ]\n    }\n    getDrugs() {\n        return {\n        HCZ: {\n          drugs: [\n            {\n              drugName: \"HCZ (25mg tablet)\",\n              drugID: 275,\n              amount: '25mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Enalapril: {\n          drugs: [\n            {\n              drugName: \"Enalapril (5mg tablet)\",\n              drugID: 942,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Enalapril (10mg tablet)\",\n              drugID: 943,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Amlodipine: {\n          drugs: [\n            {\n              drugName: \"Amlodipine (5mg tablet)\",\n              drugID: 558,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Amlodipine (10mg tablet)\",\n              drugID: 559,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Atenolol: {\n          drugs: [\n            {\n              drugName: \"Atenolol (50mg tablet)\",\n              drugID: 117,\n              amount: '50mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Atenolol(100mg tablet)\",\n              drugID: 11,\n              amount: '100mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n      }\n    }\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const { getOfflinePerson } = Offline()\n            const person = getOfflinePerson(this.offlineID)\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        saveObsOffline(encounterTypeID: number, formdata: any, obs: any, labOrders=undefined as any, status='Pending') {\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: encounterTypeID,\n                meta: formdata,\n                labOrders\n            })\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            try {\n                const enc = new AppEncounterService(\n                    this.patientID,\n                    params.encounterTypeID, \n                    this.providerID\n                )\n                if ((await enc.createEncounter())) {\n                    if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                        status = 'Success'\n                    }\n                }\n                if (typeof params.callback === 'function') {\n                    await params.callback(enc)\n                }\n            } catch (e) {\n                if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                    status = 'NetworkError'\n                } else {\n                    status = 'Exception'\n                }\n                console.error(`${e}`)\n            }\n            if (status === 'Exception') {\n                throw new Error('Unable to proceed!')\n            }\n            this.saveObsOffline(\n                params.encounterTypeID, \n                params.formData,\n                obs,\n                params.labOrders,\n                status\n            )\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_label = _resolveComponent(\"ion-label\")!\n  const _component_ion_checkbox = _resolveComponent(\"ion-checkbox\")!\n  const _component_ion_item = _resolveComponent(\"ion-item\")!\n  const _component_ion_list = _resolveComponent(\"ion-list\")!\n  const _component_ion_col = _resolveComponent(\"ion-col\")!\n  const _component_ion_row = _resolveComponent(\"ion-row\")!\n  const _component_ion_grid = _resolveComponent(\"ion-grid\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"Risk Factors\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_grid, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_row, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_ion_col, null, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_ion_list, { style: {overflowY: 'auto', height:'78vh'} }, {\n                      default: _withCtx(() => [\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.riskFactors, (data) => {\n                          return (_openBlock(), _createBlock(_component_ion_item, { key: data }, {\n                            default: _withCtx(() => [\n                              _createVNode(_component_ion_label, null, {\n                                default: _withCtx(() => [\n                                  _createTextVNode(_toDisplayString(data.name), 1)\n                                ]),\n                                _: 2\n                              }, 1024),\n                              _createVNode(_component_ion_checkbox, {\n                                modelValue: data.isChecked,\n                                \"onUpdate:modelValue\": ($event: any) => ((data.isChecked) = $event),\n                                slot: \"start\"\n                              }, null, 8, [\"modelValue\", \"onUpdate:modelValue\"])\n                            ]),\n                            _: 2\n                          }, 1024))\n                        }), 128))\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              size: \"large\",\n              onClick: _ctx.exit,\n              slot: \"start\",\n              color: \"danger\"\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Close \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\"]),\n            (_ctx.showManageBPButton)\n              ? (_openBlock(), _createBlock(_component_ion_button, {\n                  key: 0,\n                  size: \"large\",\n                  onClick: _ctx.manageBP,\n                  slot: \"start\"\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\" Manage BP \")\n                  ]),\n                  _: 1\n                }, 8, [\"onClick\"]))\n              : _createCommentVNode(\"\", true),\n            _createVNode(_component_ion_button, {\n              size: \"large\",\n              color: \"success\",\n              onClick: _ctx.postActivities,\n              slot: \"end\"\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Save \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\"])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class MedicalHistoryService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 30, providerID) //TODO: Use encounter type reference name'\n    }\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  IonLabel,\n  modalController,\n  IonList,\n  IonItem,\n  IonCheckbox,\n  IonFooter,\n  IonRow,\n  IonCol,\n  IonGrid\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { ActivityInterface } from \"@/apps/interfaces/AppInterface\"\nimport { MedicalHistoryService } from \"@/apps/ART/services/medical_history\";\nimport { ConceptService } from \"@/services/concept_service\";\nimport { ObsValue } from \"@/services/observation_service\";\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    factors: {\n      type: Object,\n      required: true\n    },\n    title: {\n      type: String, \n      default: \"\"\n    },\n  },\n  computed: {\n    showManageBPButton(): boolean {\n      return this.$route.name != 'bp_management'\n    }\n  },\n  created() {\n    this.patientID = parseInt(`${this.$route.params.patient_id}`)\n  },\n  methods: {\n    async postActivities() {\n      const history = new MedicalHistoryService(this.patientID, -1)\n      const encounter = await history.createEncounter();\n\n      if(encounter) {\n        const obs: any = await this.buildObs();\n        await history.saveObservationList(obs);\n        await this.closeModal();\n      }\n    },\n    manageBP() {\n      this.$router.push(`/art/encounters/bp_management/${this.patientID}`)\n    },\n    exit() {\n      modalController.dismiss([])\n    },\n    async closeModal() {\n      await modalController.dismiss(this.riskFactors)\n    },\n    async buildObs() {\n      return this.riskFactors.map((r: any) => {\n        const val = r.isChecked === true ? 'Yes' : 'No';\n        const valConcept = ConceptService.getConceptID(val, true);\n        const con = ConceptService.getConceptID(r.concept, true)\n        return {\n          'concept_id': con,\n          'value_coded': valConcept\n        }\n      });\n    }\n  },\n  data() {\n    return {\n      patientID: -1 as number,\n      riskFactors: [\n        {name: 'Diabetes', isChecked: false, concept: 'Diabetes'},\n        {name: 'Cronic kidney disease', isChecked: false, concept: 'CKD'},\n        {name: 'Past history of IHD or CVD', isChecked: false, concept: 'history of CVD'},\n        {name: 'First degree relative with IHD or CVD <65', isChecked: false, concept: 'relative with CVD'},\n        {name: 'Patient currently smokes', isChecked: false, concept: 'patient smokes'}\n      ]\n    };\n  },\n  mounted() {\n    this.factors.forEach((factor: any) => {\n      if(factor.value === \"Yes\") {\n        const ind = this.riskFactors.findIndex(d => d.concept === factor.concept);\n        this.riskFactors[ind].isChecked = true;\n      }\n    });\n  },\n  components: {\n    IonButton,\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonLabel,\n    IonList,\n    IonItem,\n    IonCheckbox,\n    IonRow,\n    IonFooter,\n    IonGrid,\n    IonCol,\n  },\n});\n","import { render } from \"./RiskFactorModal.vue?vue&type=template&id=1b2b2db4&scoped=true&ts=true\"\nimport script from \"./RiskFactorModal.vue?vue&type=script&lang=ts\"\nexport * from \"./RiskFactorModal.vue?vue&type=script&lang=ts\"\n\nimport \"./RiskFactorModal.vue?vue&type=style&index=0&id=1b2b2db4&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-1b2b2db4\"]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./RiskFactorModal.vue?vue&type=style&index=0&id=1b2b2db4&scoped=true&lang=css\"","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}