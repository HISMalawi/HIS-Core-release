{"version":3,"sources":["webpack:///./src/views/GuardianRegistration.vue?1a99","webpack:///./src/services/relations_service.ts","webpack:///./src/views/GuardianRegistration.vue","webpack:///./src/views/GuardianRegistration.vue?f058","webpack:///./src/utils/ActionSheetHelpers/VoidReason.ts","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","onOnIndex","$event","fieldComponent","skipSummary","activeField","fields","onFinishAction","onFinish","cancelDestinationPath","patientData","id","RelationsService","Service","constructor","super","patientID","relationID","reason","void","guardianID","curRelationID","newRelationTypeID","voidRelation","createRelation","getJson","patientA","patientB","relationType","postJson","defineComponent","components","HisStandardForm","data","guardianData","fieldAction","form","redirectURL","currentAddressAttributes","homeAddressAttributes","watch","params","query","patient_id","patient","Patientservice","findByID","this","PersonFieldHelper","mapPersonData","person","edit_guardian","getFields","source","immediate","deep","methods","push","guardianSelection","guardianIndex","scanGuardian","givenNameField","familyNameField","genderField","searchResultField","concat","dobFields","homeRegionField","homeDistrictField","homeTAField","homeVillageField","currentRegionField","currentDistrictField","currentTAField","currentVillage","landmarkFields","cellPhoneField","relationsField","computedData","isEditMode","reg","PatientRegistrationService","setPersonID","updatePerson","PersonField","resolvePerson","Object","keys","forEach","i","_computedData$i","date","_this$guardianData","relation","amendRelation","relationship_id","relations","other","relationship_type_id","isSameAsPatient","toastWarning","isRegistrationMode","guardian","registerGuardian","getPersonID","$router","name","$route","nextTask","isSearchMode","includes","canEdit","groups","defaultCondition","mandatoryCondition","birthdate","gender","HisDate","toStandardHisDisplayFormat","birth_date","given_name","family_name","toLowerCase","helpText","type","FieldType","TT_SELECT","condition","validation","v","Validation","required","options","async","relationship","RelationshipService","getRelationships","isEmpty","map","r","label","b_is_to_a","value","person_id","details","delayPromise","action","infoActionSheet","slot","color","back","config","footerBtns","onClick","getDefaultVal","fieldID","e","TT_TABLE_VIEWER","f","select_guardian","editButton","attribute","rows","cell_phone_number","home_district","home_traditional_authority","home_village","current_district","current_traditional_authority","landmark","overrideDefaultFooterBtns","nextBtn","popVoidReason","hiddenFooterBtns","getGivenNameField","defaultValue","getFamilyNameField","getGenderField","dob","getDobConfig","generateDateFields","home","getHomeRegionField","district","getHomeDistrictField","ta","getHomeTaField","home_region","match","village","getHomeVillageField","region","getCurrentRegionField","currentDistrict","getCurrentDistrictField","currentTA","getCurrentTAfield","current_region","getCurrentVillageField","cellPhone","getCellNumberField","landmarks","getLandmarkFields","proxyID","TT_RELATION_SELECTION","val","onload","context","cdata","relationships","getRelations","description","TT_BARCODE","requireNext","onValue","searchResults","findByNpid","TT_PERSON_RESULT_VIEW","dynamicHelpText","appearInSummary","patients","search","item","getPersonAttributeOptions","state","disabled","default","_","results","__exports__","callback","size","modal","optionsActionSheet","role","selection","_resolveDynamicComponent","formType","onOnFinish","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","formData","$emit","mapToOption","listOptions","computedForm","attr","values","isPlainObject","TT_TEXT","computedValue","isName","names","PersonService","searchGivenName","searchFamilyName","customOptions","includeHelpText","summaryLabel","minDate","estimateDateFromAge","maxDate","getSessionDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","isEstimate","group","getRegions","summaryMapValue","_f$home_region","test","_f$home_region2","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","c","field","filter","length","filtered","ok","alertConfirmation","address","LocationService","createAddress","toUpperCase","showKeyboard","isFilterDataViaApi","defaultOutput","getTraditionalAuthorities","getVillages","onClickComponentEvents","setValue","_f$home_region3","_f$current_region","_f$current_region2","number","split","isMWPhoneNumber","customKeyboard","default_landmarks","TT_NOTE","getFacilityLocationField","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","Array","isArray","person_attributes","reduce","getAddressFromPersonObj","addresses","addressMap","givenName","familyName","homeDistrict","homeVillage","homeTA","birthdate_estimated","prop","getPatientInfoString","getID","getNationalID","npid","show","getProgramName","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","regions","region_id","regionID","districts","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-2fa7d8e1.5028f062.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    skipSummary: true,\n    activeField: _ctx.fieldComponent,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    cancelDestinationPath: `/patient/dashboard/${_ctx.patientData.id}`\n  }, null, 8, [\"activeField\", \"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { Service } from \"./service\";\n\nexport class RelationsService extends Service {\n    constructor() {\n        super()\n    }\n\n    static voidRelation(patientID: number, relationID: number, reason: string) {\n\t\treturn Service.void(`people/${patientID}/relationships/${relationID}`, { reason })\n\t}\n\n    static async amendRelation(patientID: number, guardianID: number, curRelationID: number, newRelationTypeID: number) {\n        await RelationsService.voidRelation(patientID, curRelationID,\n            'Updating guardian relationship'\n        )\n        return RelationsService.createRelation(\n            patientID, guardianID, newRelationTypeID\n        )\n    }\n\n    static getRelations() {\n        return super.getJson('types/relationships')\n    }\n\n    static createRelation(patientA: number, patientB: number, relationType: number) {\n        return super.postJson(`people/${patientA}/relationships`, {\n            'relationship_type_id': relationType,\n            'relation_id': patientB\n        })\n    }\n}\n","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { RelationsService } from \"@/services/relations_service\"\nimport { isEmpty } from \"lodash\"\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { RelationshipService } from \"@/services/relationship_service\";\nimport PersonFieldHelper from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport { infoActionSheet } from \"@/utils/ActionSheets\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    patientData: {} as any,\n    guardianData: {} as any,\n    fieldAction: '' as 'Scan' | 'Search' | 'Registration' | 'edit',\n    fieldComponent: '' as string,\n    fields: [] as Array<Field>,\n    form: {} as Record<string, Option> | Record<string, null>,\n    redirectURL: '' as string,\n    activeField: '' as string,\n    currentAddressAttributes: [\n        'current_region',\n        'current_district',\n        'current_village',\n        'current_traditional_authority'\n    ] as string[],\n    homeAddressAttributes: [\n        'home_region',\n        'home_district',\n        'home_traditional_authority',\n        'home_village'\n    ] as string[]\n  }),\n  watch: {\n    '$route': {\n        async handler({params, query}: any) {\n            if (params.patient_id) {\n                const patient = await Patientservice.findByID(params.patient_id)\n                if (patient) {\n                    this.patientData = PersonFieldHelper.mapPersonData(patient.person)\n                    if (query.edit_guardian) {\n                        this.fieldAction = 'edit'\n                    }\n                    this.fields = this.getFields()\n                }\n            }\n            if(query.source) this.redirectURL = query.source\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    getFields(): Array<Field> {\n        let fields: Array<Field> = []\n        fields.push(this.guardianSelection())\n        fields.push(this.guardianIndex())\n        fields.push(this.scanGuardian())\n        fields.push(this.givenNameField())\n        fields.push(this.familyNameField())\n        fields.push(this.genderField())\n        fields.push(this.searchResultField())\n        fields = fields.concat(this.dobFields())\n        fields.push(this.homeRegionField())\n        fields.push(this.homeDistrictField())\n        fields.push(this.homeTAField())\n        fields.push(this.homeVillageField())\n        fields.push(this.currentRegionField())\n        fields.push(this.currentDistrictField())\n        fields.push(this.currentTAField())\n        fields.push(this.currentVillage())\n        fields = fields.concat(this.landmarkFields())\n        fields.push(this.cellPhoneField())\n        fields.push(this.relationsField())\n        return fields\n    },\n    async onFinish(form: any, computedData: any) {\n        if (this.isEditMode()) {\n            if (this.activeField != 'relations') {\n                const reg = new PatientRegistrationService()\n                reg.setPersonID(this.guardianData.id)\n                await reg.updatePerson(PersonField.resolvePerson(computedData))\n                // Patch updated values\n                Object.keys(computedData).forEach((i: string) => {\n                    if (i in this.guardianData) {\n                        this.guardianData[i] = computedData[i]?.date || computedData[i].person\n                    }\n                })\n            } else {\n                if (this.guardianData?.relation) {\n                    const relation = await RelationsService.amendRelation(\n                        this.patientData.id,\n                        this.guardianData.id,\n                        this.guardianData.relation.relationship_id,\n                        form.relations.other.relationship_type_id\n                    )\n                    if (relation) {\n                        this.guardianData.relation = relation\n                    }\n                }\n            }\n            this.fieldComponent = 'guardian_index'\n        } else {\n            if(this.isSameAsPatient(computedData)) {\n                toastWarning(\"Guardian cannot be the same patient\")\n            } else {\n                let guardianID = -1\n                if (this.isRegistrationMode()) {\n                    const guardian: any = new PatientRegistrationService()\n                    await guardian.registerGuardian(PersonField.resolvePerson(computedData))\n                    guardianID = guardian.getPersonID()\n                } else {\n                    guardianID = this.guardianData.id\n                }\n                await RelationsService.createRelation(\n                    this.patientData.id, guardianID, form.relations.other.relationship_type_id\n                )\n                if(this.redirectURL) this.$router.push({name: this.redirectURL})\n                else if (this.$route.query.edit_guardian) this.fieldComponent = 'select_guardian'\n                else await nextTask(this.patientData.id, this.$router, this.$route)\n            }   \n        }\n    },\n    isEditMode() {\n        return this.fieldAction === 'edit'\n    },\n    isSearchMode() {\n        return ['Search', 'Registration'].includes(this.fieldAction)\n    },\n    isRegistrationMode() {\n        return this.fieldAction === 'Registration'\n    },\n    canEdit(groups: Array<string|number>, defaultCondition=true, mandatoryCondition=true) {\n        if (this.isEditMode()) {\n            return groups.includes(this.activeField) && mandatoryCondition\n        }\n        return defaultCondition\n    },\n    isSameAsPatient(guardian: any) {\n        let birthdate = ''\n        let name = ''\n        let gender = ''\n\n        if(this.isRegistrationMode()) {\n            birthdate = HisDate.toStandardHisDisplayFormat(guardian.birth_date.date)\n            name = guardian.given_name.person && guardian.family_name.person\n            gender = guardian.gender.person\n        } else {\n            birthdate = this.guardianData.birth_date\n            name = this.guardianData.name\n            gender = this.guardianData.gender  \n        }\n\n        return (name.toLowerCase() === this.patientData.name.toLowerCase()) \n            && (birthdate === this.patientData.birth_date)\n            && (gender === this.patientData.gender)\n    },\n    guardianSelection(): Field {\n        return {\n            id: 'select_guardian',\n            helpText: 'Select guardian to edit/view',\n            type: FieldType.TT_SELECT,\n            condition: () => this.isEditMode(),\n            validation: (v: Option) => Validation.required(v),\n            options: async () => {\n                const relationship = await RelationshipService.getRelationships(this.patientData.id)\n                if (!isEmpty(relationship)) {\n                    return relationship.map((r: any) => {\n                        const guardian = PersonField.mapPersonData(r.relation)\n                        return {\n                            label: `${guardian.name} (${r.type.b_is_to_a})`, \n                            value: r.relation.person_id, \n                            other: {\n                                relations: r, \n                                details: guardian \n                            }\n                        }\n                    })\n                } else {\n                    await delayPromise(450)\n                    const action = await infoActionSheet(\n                        'Patient has no guardians', '',\n                        'Select option to proceed',\n                        [\n                            {\n                                name: 'Cancel',\n                                slot: 'start',\n                                color: 'danger'\n                            },\n                            {\n                                name: 'Register new',\n                                slot: 'start',\n                                color: 'success'\n                            }\n                        ]\n                    )\n                    if (action === 'Register new') {\n                        this.guardianData = {}\n                        this.fieldAction = 'Registration'\n                        this.fieldComponent = 'scan'\n                    } else {\n                        this.$router.back()\n                    }\n                }\n                return []\n            },\n            config: {\n                footerBtns: [\n                    {\n                        name: 'New Guardian',\n                        slot: 'end',\n                        color: 'primary',\n                        onClick: () => {\n                            this.guardianData = {}\n                            this.fieldAction = 'Registration'\n                            this.fieldComponent = 'scan'\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    getDefaultVal(fieldID: string | number) {\n        try {\n            return this.guardianData[fieldID]\n        } catch (e) {\n            return ''\n        }\n    },\n    guardianIndex(): Field {\n        return {\n            id: 'guardian_index',\n            helpText: 'Guardian details',\n            type: FieldType.TT_TABLE_VIEWER,\n            condition: (f: any) => f.select_guardian.value, \n            options: (f: any) => {\n                if (this.guardianData && this.guardianData.id != f.select_guardian.value) {\n                    this.guardianData = {\n                        ...f.select_guardian.other.details,\n                        relation: f.select_guardian.other.relations\n                    }\n                }\n                const editButton = (attribute: string) => ({\n                    name: 'Edit',\n                    type: 'button',\n                    action: () => {\n                        this.activeField = attribute\n                        this.fieldComponent = this.activeField\n                    }\n                })\n                const rows = [\n                    ['Given Name', this.guardianData.given_name, editButton('given_name')],\n                    ['Family Name', this.guardianData.family_name, editButton('family_name')],\n                    ['Gender', this.guardianData.gender, editButton('gender')],\n                    ['Birthdate', HisDate.toStandardHisDisplayFormat(this.guardianData.birth_date), editButton('year_birth_date')],\n                    ['Cell Phone Number', this.guardianData.cell_phone_number, editButton('cell_phone_number')],\n                    ['Home District', this.guardianData.home_district, editButton('home_region')],\n                    ['Home TA', this.guardianData.home_traditional_authority, editButton('home_region')],\n                    ['Home Village', this.guardianData.home_village,  editButton('home_region')],\n                    ['Current district', this.guardianData.current_district, editButton('current_region')],\n                    ['Current T/A', this.guardianData.current_traditional_authority, editButton('current_region')],\n                    ['Landmark', this.guardianData.landmark, editButton('default_landmarks')],\n                    ['Relation', this.guardianData.relation.type.b_is_to_a, editButton('relations')]\n                ]\n                return [{\n                    label: '', \n                    value: '',\n                    other: {\n                        rows\n                    }\n                }]\n            },\n            config : {\n                overrideDefaultFooterBtns: {\n                    nextBtn: {\n                        name: 'Finish',\n                        slot: 'end',\n                        color: 'success',\n                        onClick: () => this.fieldComponent = 'select_guardian'\n                    }\n                },\n                footerBtns: [\n                    {\n                        name: 'Void Relation',\n                        slot: 'start',\n                        color: 'danger',\n                        onClick: async () => {\n                            popVoidReason(async (reason: string) => {\n                                await RelationsService.voidRelation(\n                                    this.patientData.id, \n                                    this.guardianData.relation.relationship_id,\n                                    reason\n                                )\n                                this.fieldComponent = 'select_guardian'\n                            })\n                        }\n                    }\n                ],\n                hiddenFooterBtns: ['Clear', 'Back']\n            }\n        }\n    },\n    givenNameField(): Field {\n        const name: Field = PersonField.getGivenNameField()\n        name.helpText = 'Guardian First name'\n        name.defaultValue = () => this.getDefaultVal(name.id)\n        name.condition = () => this.canEdit([name.id], this.isSearchMode())\n        return name\n    },\n    familyNameField(): Field {\n        const name: Field = PersonField.getFamilyNameField()\n        name.helpText = 'Guardian Last name'\n        name.defaultValue = () => this.getDefaultVal(name.id)\n        name.condition = () => this.canEdit([name.id], this.isSearchMode())\n        return name\n    },\n    genderField(): Field {\n        const gender: Field = PersonField.getGenderField()\n        gender.defaultValue = () => this.getDefaultVal(gender.id)\n        gender.condition = () => this.canEdit([gender.id], this.isSearchMode())\n        return gender\n    },\n    dobFields(): Array<Field> {\n        const dob =PersonField.getDobConfig()\n        dob.defaultValue = () => this.getDefaultVal('birth_date')\n        dob.condition = () => this.canEdit([\n            'year_birth_date', \n            'month_birth_date', \n            'day_birth_date'\n            ], \n            this.isRegistrationMode()\n        ) \n        return generateDateFields(dob)\n    },\n    homeRegionField(): Field {\n        const home: Field = PersonField.getHomeRegionField()\n        home.condition = () => this.canEdit(this.homeAddressAttributes, this.isRegistrationMode())\n        return home\n    },\n    homeDistrictField(): Field {\n        const district: Field = PersonField.getHomeDistrictField()\n        district.condition = () => this.canEdit(this.homeAddressAttributes, this.isRegistrationMode())\n        return district\n    },\n    homeTAField(): Field {\n        const ta: Field =  PersonField.getHomeTaField()\n        ta.condition = (form: any) => this.canEdit(\n            this.homeAddressAttributes, \n            this.isRegistrationMode() && !form.home_region.label.match(/foreign/i),\n            !form.home_region.label.match(/foreign/i)\n        )\n        return ta\n    },\n    homeVillageField(): Field {\n        const village: Field = PersonField.getHomeVillageField()\n        village.condition = (form: any) => this.canEdit(\n            this.homeAddressAttributes, \n            this.isRegistrationMode() && !form.home_region.label.match(/foreign/i),\n            !form.home_region.label.match(/foreign/i)\n        )\n        return village\n    },\n    currentRegionField(): Field {\n        const region: Field = PersonField.getCurrentRegionField()\n        region.condition = () => this.canEdit(this.currentAddressAttributes, this.isRegistrationMode())\n        return region\n    },\n    currentDistrictField(): Field {\n        const currentDistrict: Field = PersonField.getCurrentDistrictField()\n        currentDistrict.condition = () => this.canEdit(this.currentAddressAttributes, this.isRegistrationMode())\n        return currentDistrict\n    },\n    currentTAField(): Field {\n        const currentTA: Field = PersonField.getCurrentTAfield()\n        currentTA.condition = (form: any) => this.canEdit(\n            this.currentAddressAttributes, \n            this.isRegistrationMode() && !form.current_region.label.match(/foreign/i),\n            !form.current_region.label.match(/foreign/i)\n        )\n        return currentTA\n    },\n    currentVillage(): Field {\n        const currentVillage: Field = PersonField.getCurrentVillageField()\n        currentVillage.condition = (form: any) => this.canEdit(\n            this.currentAddressAttributes, \n            this.isRegistrationMode() && !form.current_region.label.match(/foreign/i),\n            !form.current_region.label.match(/foreign/i)\n        )\n        return currentVillage\n    },\n    cellPhoneField(): Field {\n        const cellPhone: Field = PersonField.getCellNumberField()\n        cellPhone.condition = () => this.canEdit([cellPhone.id], this.isRegistrationMode())\n        return cellPhone \n    },\n    landmarkFields(): Field[] {\n        const landmarks: Field[] = PersonField.getLandmarkFields()\n        const id = landmarks[0].proxyID || landmarks[0].id\n        landmarks[0].defaultValue =  () => this.getDefaultVal(id)\n        landmarks[0].condition = () => this.canEdit([id], this.isRegistrationMode())\n        return landmarks\n    },\n    relationsField(): Field {\n        return {\n            id: 'relations',\n            helpText: 'Select relationship type',\n            type: FieldType.TT_RELATION_SELECTION,\n            defaultValue: () => this.getDefaultVal('relations'),\n            validation: (val: Option) => Validation.required(val),\n            condition: () => this.canEdit(['relations']),\n            onload: (context: any) => {\n                context.patient = this.patientData\n                if (this.isRegistrationMode()) {\n                    const person = PersonField.resolvePerson(context.cdata)\n                    context.guardian = {\n                        'name': `${person.given_name} ${person.family_name}`,\n                        'birth_date': HisDate.toStandardHisDisplayFormat(person.birthdate),\n                        'home_address': `${person.home_district} ${person.home_traditional_authority}`\n                    }\n                } else {\n                    context.guardian = this.guardianData\n                }\n            },\n            options: async() => {\n                const relationships = await RelationsService.getRelations()\n                return relationships.map((r: any) => ({\n                    label: r.b_is_to_a, \n                    value: r.description, \n                    other: r\n                }))\n            },\n            config: {\n                hiddenFooterBtns: [\n                  'Clear'\n                ]\n            }\n        }\n    },\n    scanGuardian(): Field {\n        return {\n            id: 'scan',\n            helpText: 'Scan or Register Guardian',\n            type: FieldType.TT_BARCODE,\n            requireNext: false,\n            condition: () => !this.isEditMode(),\n            onValue: async (id: string) => {\n                const searchResults = await Patientservice.findByNpid(id)\n                if (!isEmpty(searchResults)) {\n                    this.guardianData = PersonFieldHelper.mapPersonData(searchResults[0].person)\n                    this.fieldComponent = 'relations'\n                    this.fieldAction = 'Scan'\n                }\n                return false\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns : [\n                    {\n                        name: 'Find or Register Guardian',\n                        color: 'success',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Search'\n                            this.fieldComponent = 'given_name'\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    searchResultField(): Field {\n        return {\n            id: 'results',\n            helpText: 'Search results',\n            type: FieldType.TT_PERSON_RESULT_VIEW,\n            dynamicHelpText: (f: any) => {\n                return `Search results for \n                \"${f.given_name.value} ${f.family_name.value} | ${f.gender.label}\"\n                `\n            },\n            appearInSummary: () => false,\n            condition: () => this.isSearchMode(),\n            validation: (val: Option) => Validation.required(val),\n            options: async (form: any) => {\n                const patients = await Patientservice.search({\n                    'given_name': form.given_name.value, \n                    'family_name': form.family_name.value, \n                    'gender': form.gender.value, \n                });\n                return patients.map((item: any) => PersonField.getPersonAttributeOptions(item))\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Edit Search',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Search'\n                            this.fieldComponent = 'given_name'\n                        }\n                    },\n                    {\n                        name: 'New Guardian',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Registration'\n                            this.fieldComponent = 'year_birth_date'\n                        }\n                    },\n                    {\n                        name: 'Continue Guardian',\n                        color: 'success',\n                        slot: 'end',\n                        state: {\n                            disabled: {\n                                default: () => true,\n                                onValue(_: any,form: any) {\n                                    return isEmpty(form.results)\n                                }\n                            }\n                        },\n                        onClick: (form: any) => {\n                            this.guardianData = PersonFieldHelper.mapPersonData(\n                                form.results.other.person.person\n                            )\n                            this.fieldComponent = 'relations'\n                            this.fieldAction = 'Search'\n                        }\n                    }\n                ]\n            }\n        }\n    }\n  }\n})\n","import { render } from \"./GuardianRegistration.vue?vue&type=template&id=0334418a&ts=true\"\nimport script from \"./GuardianRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./GuardianRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { optionsActionSheet } from '@/utils/ActionSheets'\n\nexport default async function popVoidReason(callback: Function, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Region of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'District of current residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'District of current residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'TA of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Village of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}