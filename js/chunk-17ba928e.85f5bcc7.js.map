{"version":3,"sources":["webpack:///./src/apps/ART/views/ARTStock/movement.vue?3007","webpack:///./src/services/DHA_code_service.ts","webpack:///./src/apps/ART/views/ARTStock/movement.vue","webpack:///./src/apps/ART/views/ARTStock/movement.vue?9697","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","activeField","onFinishAction","onFinish","skipSummary","DHAVerificationService","constructor","_defineProperty","this","BASE30_DIGITS","split","forEach","digit","decimalValue","BASE30_DIGITS_INDEX","convertFromDecimal","number","toBase","result","Math","floor","digits","toString","map","Number","parseInt","parity","length","sum","position","checksum","isValidDHACode","code","decimalCode","convertToDecimal","computedCheckDigit","calculateLuhnCheckDigit","exception","console","error","undefined","slice","defineComponent","components","HisStandardForm","data","drugs","selectedDrugs","barcode","stockService","methods","formData","errors","enter_batches","async","authorization","value","quantity","drug","pack_size","tins","date","reason","reasons","task","res","relocateItems","id","location_id","relocation_location","push","drug_name","disposeItems","e","BadRequestError","isEmpty","concat","log","toastSuccess","$router","toastDanger","join","getFields","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","label","notTheSame","StockService","getLocationName","condition","_","filter","getFacilities","computedValue","config","showKeyboard","isFilterDataViaApi","dynamicHelpText","f","TT_FULL_DATE","TT_MULTIPLE_SELECT","requireNext","checked","items","getItems","i","isChecked","c","item","dayjs","isBefore","delivery_date","unload","TT_BATCH_MOVEMENT","beforeNext","_f","_c","currentFieldContext","drugsToStr","b","partialEntries","entries","d","every","Boolean","partialDrugs","toastWarning","TT_TEXT","customKeyboard","CHARACTERS_AND_NUMBERS_LO","v","validateSeries","dha","toUpperCase","formdata","getReasons","fdata","test","allDrugsExpired","Date","expiry_date","getSessionDate","TT_TABLE_VIEWER","buildResults","hiddenFooterBtns","isRelocation","columns","rows","j","getShortName","drug_id","toNumString","HisDate","toStandardHisDisplayFormat","other","formatDrugs","mapVal","vals","drug_legacy_name","product_code","batch_number","created","__exports__","_resolveDynamicComponent","formType","cancelDestinationPath","onOnFinish","onOnIndex","onIndex","name","TouchScreenForm","emits","props","Function","default","String","Object","computedData","$emit","facilities","LocationService","trim","facility","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-17ba928e.85f5bcc7.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\"]))\n}","\nexport class DHAVerificationService {\n\n\tBASE30_DIGITS_INDEX = {} as any;\n\tBASE30_DIGITS: any;\n\t// static BASE30_DIGITS: any;\n\tconstructor() {\n\n\t\tthis.BASE30_DIGITS = '0123456789ABCDEFGHJKLMNPRTVWXY'.split('');\n\t\tthis.BASE30_DIGITS.forEach((digit: any, decimalValue: any) => this.BASE30_DIGITS_INDEX[digit] = decimalValue);\n\t}\n\n\t//   BASE30_DIGITS.forEach((digit, decimalValue) => BASE30_DIGITS_INDEX[digit] = decimalValue);\n\tconvertFromDecimal(number: any, toBase = 30) {\n\t\tif (toBase < 2 || toBase > 30) throw (\"Invalid base ${toBase}\");\n\n\t\tlet result = '';\n\n\t\twhile (number > 0) {\n\t\t\tresult = this.BASE30_DIGITS[number % toBase] + result;\n\t\t\tnumber = Math.floor(number / toBase);\n\t\t}\n\n\t\treturn result;\n\t}\n\tstatic calculateLuhnCheckDigit(number: any) {\n\t\tconst digits = number.toString().split('').map((digit: string) => Number.parseInt(digit, 10));\n\t\tconst parity = digits.length % 2;\n\n\t\tlet sum = 0;\n\n\t\tdigits.forEach((digit: any, position: any) => {\n\t\t\tif (position % 2 === parity) digit *= 2;\n\t\t\tif (digit > 9) digit -= 9;\n\n\t\t\tsum += digit;\n\t\t});\n\n\t\tconst checksum = sum % 10;\n\t\treturn checksum === 0 ? 0 : 10 - checksum;\n\t}\n\n\t/**\n\t * @param code {String}\n\t *\n\t * @returns {Boolean}\n\t */\n\tisValidDHACode(code: any) {\n\t\ttry {\n\t\t\tconst decimalCode = this.convertToDecimal(code).toString();\n\t\t\tconst checkDigit = Number.parseInt(decimalCode[0], 10);\n\t\t\tconst computedCheckDigit = DHAVerificationService.calculateLuhnCheckDigit(Number.parseInt(decimalCode, 10) * 10);\n\t\t\treturn computedCheckDigit === 0;\n\t\t} catch (exception) {\n\t\t\tconsole.error(exception);\n\t\t\treturn false;\n\t\t}\n\t}\n\tconvertToDecimal(number: any): any {\n\t\tif (number.length == 0) return 0;\n\n\t\tconst decimalValue = this.BASE30_DIGITS_INDEX[number[0]];\n\n\t\tif (decimalValue === undefined || decimalValue === null)\n\t\t\tthrow (\"Invalid base ${fromBase} number: ${number}\");\n\n\t\treturn decimalValue * 30 ** (number.length - 1) + this.convertToDecimal(number.slice(1));\n\t}\n\n\t//   return {isValidDHACode};\n}\n// const DHACodes = (() => {\n\n//   /**\n//    * Converts any number in the DHA base 30 character set to a decimal value.\n//    * \n//    * @param number {String}\n//    * @param fromBase {Number}\n//    *\n//    * @returns Number\n//    */\n\n\n//   /**\n//    * Convert any decimal value to any base within DHA's base 30 character set.\n//    * \n//    * @param number {Number}\n//    * @param toBase {Number}\n//    *\n//    * @returns {String}\n//    */\n\n\n//   /**\n//    * Returns the Luhn checksum for given number.\n//    * \n//    * @param number {Number}\n//    * @returns {Number}\n//    */\n\n// })();\n","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { CHARACTERS_AND_NUMBERS_LO } from \"@/components/Keyboard/KbLayouts\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { DHAVerificationService } from \"@/services/DHA_code_service\"\nimport HisDate from \"@/utils/Date\";\nimport { StockService } from \"./stock_service\";\nimport { toastWarning, toastDanger, toastSuccess } from \"@/utils/Alerts\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { BadRequestError } from  \"@/services/service\"\nimport { isEmpty } from \"lodash\";\nimport dayjs from \"dayjs\";\nimport { toNumString } from \"@/utils/Strs\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any,\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      let errors: string[] = [];\n      await formData.enter_batches.forEach(async (drug: any) => {\n        const data = {\n          'reallocation_code': formData.authorization.value,\n          quantity: drug.value.pack_size * drug.value.tins,\n          date: formData.date.value,\n          reason: formData.reasons.value,\n        }\n        try {\n          if (formData.task.value === \"Relocations\") {\n            const res = await this.stockService.relocateItems(drug.value.id, {\n              ...data, \n              location_id: formData.relocation_location.value\n            });\n            if (!res) {\n              errors.push(\n                \"Could not save record for\" + drug.value.drug_name\n              );\n            }\n          } else {\n            const res = await this.stockService.disposeItems(drug.value.id, data);\n            if (!res) {\n              errors.push(\n                \"Could not save record for\" + drug.value.drug_name\n              );\n            }\n          }\n        } catch (e) {\n          if (e instanceof BadRequestError && !isEmpty(e.errors)) {\n            errors = errors.concat(e.errors)\n          } else {\n            errors.push(`${e}`)\n          }\n          console.log(e)\n        }\n      })\n      if (errors.length === 0) {\n        toastSuccess(\"Stock succesfully moved\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(`${errors.join(',')}`);\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"task\",\n          helpText: \"Select task\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Relocations\",\n              value: \"Relocations\",\n            },\n            {\n              label: \"Disposal\",\n              value: \"Disposal\",\n            },\n          ],\n        },\n        {\n          id: \"relocation_location\",\n          helpText: \"Destination\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val) || Validation.notTheSame(val.label, `${StockService.getLocationName()}`),\n          condition: (val: any) => val.task.value === \"Relocations\" ,\n          options: (_: any, filter = \"\") => getFacilities(filter),\n          computedValue: (val: Option) => val.label,\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n        },\n        {\n          id: \"date\",\n          dynamicHelpText: (f) => `Date of ${f.task.label}`,\n          helpText: \"Set date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: any) => Validation.required(val),\n        },\n        {\n          id: \"select drugs\",\n          helpText: \"Select drugs\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          requireNext: true,\n          validation: (val: any) => Validation.required(val),\n          options: async (f: any, checked: Option[]) => {\n            const items: Option[] = await this.getItems()\n            return items.map((i: any) => {\n              i.isChecked = checked.filter(c => c.label === i.label).length >= 1 \n              return i\n            }).filter(item => !(dayjs(f.date.value).isBefore(item.value.delivery_date)))\n          },\n          unload: (val: any) => (this.selectedDrugs = val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_MOVEMENT,\n          beforeNext: (_: any, _f: any, _c: any, {currentFieldContext}: any) => {\n            const drugsToStr = (drugs: any) => drugs.map((b: any) => `${b.label}`).join(' & ')\n            const partialEntries = currentFieldContext.drugs.filter((drug: any) =>\n              drug.entries.map((d: any) => !(d.tins)).every(Boolean)\n            )\n            if (!isEmpty(partialEntries)) {\n              const partialDrugs = drugsToStr(partialEntries)\n              toastWarning(`Please fix partial batch entries for drugs: ${partialDrugs}`)\n              return false\n            }\n            return true\n          },\n          options: () => this.selectedDrugs,\n          validation: (val: any) => Validation.required(val),\n        },\n        {\n          id: \"authorization\",\n          helpText: \"Enter authorization code\",\n          type: FieldType.TT_TEXT,\n          config: {\n            customKeyboard: [CHARACTERS_AND_NUMBERS_LO, [['Delete']]]\n          },\n          validation: (v: Option) => Validation.validateSeries([\n            () => Validation.required(v),\n            () => {\n              const value = v.value as string\n              const dha = new DHAVerificationService()\n              return !dha.isValidDHACode(value.toUpperCase())\n                ? ['Invalid authorization code']\n                : null\n            }\n          ]), \n        },\n        {\n          id: \"reasons\",\n          helpText: \"Select reason\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (formdata: any) => this.getReasons(formdata),\n          beforeNext: (reason: Option, fdata: any) => {\n            if(/expired/i.test(reason.label)) {\n              const allDrugsExpired = fdata[\"select drugs\"].every((drug: any) => {\n                return new Date(drug.value.expiry_date) > new Date(StockService.getSessionDate());\n              })\n              if(!allDrugsExpired) {\n                toastWarning(\"Some drugs selected have not expired\")\n                return false\n              }\n            }\n            return true\n          }\n        },\n        {\n          id: \"summary\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(formData: any) {\n      const isRelocation = formData.task.value === 'Relocations'\n      const columns = [\n        \"Drug\",\n        \"Total Tins\",\n        \"Expiry date\",\n        \"Authorization code\",\n      ];\n\n      if (isRelocation) columns.push('Relocation')\n\n      const rows = formData.enter_batches.map((j: any) => {\n        const d = j.value;\n        const data = [\n          StockService.getShortName(d.drug_id),\n          toNumString(d.tins),\n          HisDate.toStandardHisDisplayFormat(d.expiry_date),\n          formData.authorization.value.toUpperCase()\n        ]\n        if (isRelocation) data.push(formData.relocation_location.label)\n        return data\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    async getItems() {\n      const f = await this.stockService.getItems();\n      return this.formatDrugs(f);\n    },\n    mapVal(vals: string[]) {\n      return vals.map((data) => {\n        return { label: data, value: data };\n      });\n    },\n    getReasons(formdata: any): any {\n      if (formdata.task.value === \"Relocations\") {\n        return this.mapVal([\n          \"Transfer to another facility/relocation\",\n          \"For trainings\",\n        ]);\n      } else {\n        return this.mapVal([\"Expired\", \"Damaged\", \"Phased out\", \"Banned\", \"Missing\"]);\n      }\n    },\n    formatDrugs(drugs: any) {\n      return drugs.map((drug: any) => {\n        return {\n          label: `${drug?.drug_name||drug?.drug_legacy_name||'N/A'} (${drug.product_code}) \n          Expiry date: ${HisDate.toStandardHisDisplayFormat(\n            drug.expiry_date\n          )} \n          Batch (${drug.batch_number})\n          `,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n  },\n});\n","import { render } from \"./movement.vue?vue&type=template&id=7118d346&ts=true\"\nimport script from \"./movement.vue?vue&type=script&lang=ts\"\nexport * from \"./movement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}