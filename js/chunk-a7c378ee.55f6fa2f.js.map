{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/radiology.vue?82ed","webpack:///./src/apps/OPD/views/encounters/radiology.vue","webpack:///./src/apps/OPD/views/encounters/radiology.vue?b7bb","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/OPD/services/patient_radiology_service.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","_","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","radiologyService","isPacsEnabled","previousRadiologyExaminations","watch","ready","isReady","this","PatientRadiologyService","patientID","providerID","OPD_GLOBAL_PROP","isPACsEnabled","showPreviousRadiolgy","patient","getFields","immediate","deep","methods","computedData","Promise","all","radiology","createEncounter","obsObj","savedObsData","saveObservationList","printOrders","submitToPacs","error","console","log","gotoPatientDashboard","params","getPreviousRadiologyExaminations","url","columns","rows","order","row","children","accession_number","value_text","moment","obs_datetime","format","push","label","value","other","id","helpText","condition","type","FieldType","TT_TABLE_VIEWER","options","d","getTableData","config","hiddenFooterBtns","TT_RADIOLOGY_PICKER","validation","Validation","required","disableBackBtn","computedValue","map","async","buildValueCoded","option","parent","child","buildValueCodedFromConceptId","concept_id","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","facts","isEnrolledInProgam","formLabel","handler","route","patient_id","toUpperCase","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","computed","patientDashboardUrl","runflowState","state","states","username","split","provider","find","person_id","$router","EXIT","findings","matchToGuidelines","index","finding","status","program","programID","ProgramService","getProgramID","e","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","p","isEmpty","person","names","latestName","given_name","family_name","toOption","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","nextTask","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","toConditionalOptions","final","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","inArray","arr","expression","length","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","formData","$emit","AppEncounterService","constructor","super","radiologyType","ConceptService","getConceptSet","patientId","Service","getJson","getRadiologyObs","getID","thirdpartyapps","getThirdpartyApps","app","accessionNumber","orders","obs_id","getFullName","getAge","getGender","getNationalID","getEncounterID","getDate","getUserName","getUserID","getUserRoles","postJson","lastAccessionNumber","getAccesionNumber","observations","getConceptName","value_coded","printService","PrintoutService","patientNationalId","patientName","urls","fullXrayOrder","batchPrintLbls","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-a7c378ee.55f6fa2f.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        cancelDestinationPath: _ctx.cancelDestination,\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onSubmit\n      }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientRadiologyService } from \"@/apps/OPD/services/patient_radiology_service\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport OPD_GLOBAL_PROP from \"@/apps/OPD/opd_global_props\";\nimport moment from \"dayjs\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    radiologyService: {} as any,\n    isPacsEnabled: false,\n    previousRadiologyExaminations: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(isReady: boolean) {\n        if(isReady){\n          this.radiologyService = new PatientRadiologyService(this.patientID, this.providerID)\n          this.isPacsEnabled = (await OPD_GLOBAL_PROP.isPACsEnabled())\n          this.previousRadiologyExaminations = await this.radiologyService.showPreviousRadiolgy(this.patient)\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true,\n      deep: true\n    }\n  },\n  methods: {\n    async onSubmit(_: any, computedData: any){\n      const data = await Promise.all(computedData.radiology)\n      await this.radiologyService.createEncounter()\n      const obsObj = await this.radiologyService.obsObj(data) \n      const savedObsData = await this.radiologyService.saveObservationList(obsObj)\n      await this.radiologyService.printOrders(savedObsData, this.patient)\n      if(this.isPacsEnabled) {\n        try {\n          await this.radiologyService.submitToPacs(savedObsData, this.patient)\n        } catch (error) {\n          console.log(error)\n        }\n      }\n      this.gotoPatientDashboard()\n    },\n    async getTableData() {\n      const params = await this.radiologyService.getPreviousRadiologyExaminations(this.patient)\n      const data = params.data\n      const url = params.url\n      const columns = ['Accession#','Body Part', 'Order Type', 'Ordered', 'Result']\n      const rows = [] as Array<any>\n      for (const order in data) {\n        const row = [\n          data[order].children[0].accession_number,\n          data[order].value_text,\n          data[order].children[0].value_text,\n          moment(data[order].obs_datetime).format('DD/MMM/YYYY'),\n          `<ion-button slot=\"end\" size=\"large\" href=\"${url}\" color=\"success\">\n            View\n          </ion-button>`\n        ]\n        rows.push(row)\n      }\n      return [\n        {\n          label: '',\n          value: '',\n          other: { columns, rows},\n        },\n      ];\n    },\n    getFields(): Array<Field>{\n      return [\n        {\n          id: 'radiology_results',\n          helpText: 'Previous Radiology Examinations',\n          condition: () => this.previousRadiologyExaminations,\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.getTableData(),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n        {\n          id: 'radiology',\n          helpText: 'Radiology Examination',\n          type: FieldType.TT_RADIOLOGY_PICKER,\n          validation: (data: any) => Validation.required(data),\n          config: {\n            hiddenFooterBtns: [ this.disableBackBtn() ],\n          },\n          computedValue: (options: Option[]) => {\n            return options.map(async (option)=> ({\n              ...(await this.radiologyService.buildValueCoded('Radiology Orders', option.other.parent)),\n              child: [(await this.radiologyService.buildValueCodedFromConceptId(option.other.parent, option.other.concept_id))]\n            }))\n          },\n        },\n      ]\n    },\n    disableBackBtn() {\n      if(this.previousRadiologyExaminations) {\n        return ''\n      } else return 'Back'\n    }\n  }\n})\n","import { render } from \"./radiology.vue?vue&type=template&id=08b86c3c&ts=true\"\nimport script from \"./radiology.vue?vue&type=script&lang=ts\"\nexport * from \"./radiology.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ConceptService } from '@/services/concept_service';\nimport { PrintoutService } from \"@/services/printout_service\";\nimport { Service } from \"@/services/service\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport { isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\";\n\nexport class PatientRadiologyService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 121, providerID) \n  }\n\n  static async getRadiologyList(radiologyType: string, filter = '') {\n    return ConceptService.getConceptSet(radiologyType, filter) \n  }\n\n  async getRadiologyObs(patientId: number) {\n    try {\n      const path = 'radiology/radiology_orders?patient_id='+patientId\n      const data = await Service.getJson(path)\n      return data\n    } catch (error) {\n      return 0\n    }\n  }\n\n  async showPreviousRadiolgy(patient: any): Promise<boolean> {\n    if ( (await this.getRadiologyObs(patient.getID())).length > 0 ) {\n      return true\n    }\n    return false\n  }\n\n  async getPreviousRadiologyExaminations(patient: any): Promise<any>{\n    const thirdpartyapps  =  await Service.getThirdpartyApps()\n    let url = '' \n    for (const app of thirdpartyapps) {\n      if(app.name == 'pacs') {\n        url = app.url\n      }\n    }\n    if (isEmpty(url)) {\n      url = `opd/encounters/radiology/${this.patientID}`\n    }\n    const data =  await this.getRadiologyObs(patient.getID())\n    if(!(data.length > 0)) { \n      return false;\n    } else {\n      return { data: data, url: url}\n    }\n  }\n\n  async submitToPacs(savedObsData: any, patient: any) {\n    let accessionNumber\n    for(const order of savedObsData) {\n      accessionNumber = order.children[0].accession_number\n    }\n    const orders = await Promise.all(savedObsData.map(async (order: any) => ({\n      \"main_value_text\": order.value_text,\n      \"obs_id\": order.obs_id,\n      \"sub_value_text\": order.children[0].value_text\n    })))\n    const patientData = {\n      \"patient_name\": patient.getFullName(),\n      \"patientAge\": patient.getAge(),\n      \"patientDOB\": patient.getBirthdate(),\n      \"patientGender\": patient.getGender(),\n      \"national_id\": patient.getNationalID(),\n      \"person_id\": patient.getID(),\n      \"encounter_id\": this.getEncounterID(),\n      \"date_created\": this.getDate(),\n      \"accession_number\": accessionNumber\n    }\n    const provider = {\n      \"username\": Service.getUserName(),\n      \"userID\": Service.getUserID(),\n      \"userRoles\": Service.getUserRoles(),\n    }\n    return Service.postJson(`radiology/radiology_orders`, {\n      'patient_details': patientData,\n      'physician_details': provider,\n      'radiology_orders': orders\n    }) \n  }\n\n  async getAccesionNumber() {\n    return (await Service.getJson(`sequences/next_accession_number`))['accession_number']\n  }\n\n  async obsObj(data: Array<any>) {\n    const lastAccessionNumber = await this.getAccesionNumber()\n    const observations = [] as Array<any>\n    for (const order of data) {\n      observations.push(\n        {\n          'concept_id': order.concept_id, \n          'value_text':  await ConceptService.getConceptName(order.child.concept_id),\n          child: [{\n            'concept_id': order.child.concept_id,\n            'accession_number': lastAccessionNumber,\n            'value_text': await ConceptService.getConceptName(order.child.value_coded)\n          }]\n        }\n      )\n    }\n    return observations\n  } \n\n  async printOrders(orders: any, patient: Patientservice) {\n    const printService = new PrintoutService()\n    const patientNationalId = patient.getNationalID()\n    const patientName = patient.getFullName()\n    const urls: string[] = [];\n    for(const order of orders) {\n      const fullXrayOrder = order.value_text +\": \"+ order.children[0].value_text\n      urls.push(`/radiology/barcode`\n        + `?accession_number=${order.children[0].accession_number}`\n        + `&patient_national_id=${patientNationalId}`\n        + `&patient_name=${patientName}`\n        + `&radio_order=${fullXrayOrder}`\n        + `&date_created=${HisDate.toStandardHisDisplayFormat(order.obs_datetime)}`\n      )\n    }\n\n    await printService.batchPrintLbls(urls, true)\n  }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}