{"version":3,"sources":["webpack:///./src/utils/Arrays.ts","webpack:///./src/apps/ART/services/stock_service.ts","webpack:///./src/apps/ART/services/dispensation_service.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ART/views/encounters/Dispensing.vue?55fe","webpack:///./src/apps/ART/views/encounters/Dispensing.vue","webpack:///./src/apps/ART/views/encounters/Dispensing.vue?1e89","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["uniqueBy","arr","iteratee","Map","filter","Boolean","map","item","uniqueKey","Array","isArray","k","join","values","joinWithCommasAnd","length","slice","StockService","Service","constructor","super","drugId","stock","this","getJson","isEmpty","drug","quantity","current_quantity","packSize","pack_size","DRUG_PACK_SIZES","DispensationService","AppEncounterService","patientID","providerID","_defineProperty","drugHistory","currentDrugOrder","useDrugManagement","setIsDrugManagementEnabled","isEnabled","ART_PROP","drugManagementEnabled","getDrugHistory","getCurrentOrder","buildDispensations","orderId","tabs","totalPacks","dispensations","i","push","date","saveDispensations","postJson","getProgramID","void","DrugOrderService","getDrugOrderHistory","e","console","warn","getDrugOrders","order","stocks","fetchAvailableDrugStock","drug_id","getDrugPackSizes","calcCompletePack","units","drugOrderBarcodes","barcodes","sort","a","b","parseInt","completePack","orders","getSessionDate","pageSize","drugID","params","patientId","defineComponent","components","HisStandardForm","data","patient","fields","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","ready","watch","handler","route","patient_id","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","FlowState","SET_PROVIDER","selection","username","split","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","$router","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","gotoPatientDashboard","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","value","program","startDate","error","toastDanger","ProgramService","getCachedApiDate","isBDE","getBirthdate","$route","name","toString","toUpperCase","usernameA","usernameB","p","_p$person","person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","path","nextTask","yesNoOptions","toYesNoOption","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","d","reduce","accum","cur","concat","Promise","all","inArray","expression","validateSeries","conditions","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","default","String","required","formData","computedData","$emit","_component_his_standard_form","_resolveComponent","mixins","EncounterMixinVue","dispensation","getFields","_item$other","dispenses","forEach","packs","order_id","loadDrugHistory","dateA","Date","start_date","dateB","medication","HisDate","toStandardHisDisplayFormat","amount","buildOrderOptions","getCumulativeStocks","calculateCompletePack","getPackSizesRows","acc","curr","s","Math","floor","findIndex","parseFloat","amount_needed","isDoneDispensing","o","every","totalTabs","amountNeeded","percentageGiven","confirmed","alertConfirmation","_option$other","emptyPacks","_option$other2","pack_sizes","some","availableStock","dispensedAmount","id","helpText","FieldType","TT_DISPENSATION_INPUT","init","async","loadCurrentDrugOrder","onValueUpdate","l","onValue","isBarcodeScanned","voided","voidOrder","isValidDispensation","dispensed","toastWarning","config","isDrugManagementEnabled","medicationHistory","buildMedicationHistory","toolbarInfo","getFullName","getGender","hiddenFooterBtns","dformat","priority","action","infoActionSheet","slot","color","modal","optionsActionSheet","role","isCondition","ignored","undefined","prop","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_SELECT","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_TEXT","TT_NUMBER","TT_MONTHLY_DAYS","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","webpackAsyncContext","req","__webpack_require__","resolve","Error","code","ids","keys","module","exports"],"mappings":"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","file":"js/chunk-8d3f93ae.798edf0c.js","sourcesContent":["/**\n * A function that remove duplicates from an array\n * \n * @param arr list of items with possible duplicates\n * @param iteratee a key or list of keys to be used to remove duplicates\n * @returns list of unique items\n */\nexport function uniqueBy(arr: any[], iteratee: string | string[]) {\n  return [...new Map(arr.filter(Boolean).map(item => {\n    const uniqueKey = Array.isArray(iteratee) \n      ? iteratee.map(k => item[k]).join('_')\n      : item[iteratee]\n    return [uniqueKey, item]\n  })).values()]\n}\n\n/**\n * Joins items in an array with commas and an \"and\" for the last element.\n * \n * @param arr - The array of items to join.\n * @returns The joined string.\n * \n * @example \n * const fruits = ['apple', 'banana', 'cherry', 'date'];\n * const result = joinWithCommasAnd(fruits);\n * console.log(result); \n * // Output: \"apple, banana, cherry and date\"\n */\nexport function joinWithCommasAnd(arr: Array<any>): string {\n  const length = arr.length;\n  if (length === 0) return '';\n  if (length === 1) return arr[0];\n  return `${arr.slice(0, length - 1).join(', ')} and ${arr[length - 1]}`;\n}\n","import { Service } from \"@/services/service\";\nimport { isEmpty } from \"lodash\";\n\nexport class StockService extends Service {\n    constructor() {\n        super()\n    }\n\n    static async fetchAvailableDrugStock(drugId: number) {\n        const stock = await this.getJson('pharmacy/items', { 'drug_id': drugId })\n        if(isEmpty(stock)) return\n        return stock.map((drug: any) => ({\n            quantity: drug.current_quantity,\n            packSize: drug.pack_size\n        }));\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { StockService } from \"./stock_service\";\nimport ART_PROP from '@/apps/ART/art_global_props';\n// ripped from old ART system\nexport const DRUG_PACK_SIZES: Record<string, any> = {\n    '11': [ 30 ],\n    '21': [ 25 ],\n    '22': [ 60 ],\n    '24': [ 30, 60, 90, 100 ],\n    '30': [ 90 ],\n    '39': [ 60 ],\n    '73': [ 120 ],\n    '74': [ 60 ],\n    '76': [ 1000 ],\n    '297': [ 30, 60, 90 ],\n    '576': [ 30, 60, 90 ],\n    '613': [ 60 ],\n    '731': [ 60 ],\n    '732': [ 60 ],\n    '733': [ 60 ],\n    '734': [ 30 ],\n    '735': [ 30 ],\n    '736': [ 60 ],\n    '738': [ 60 ],\n    '931': [ 12, 30, 60 ],\n    '932': [ 30 ],\n    '954': [ 60 ],\n    '963': [ 30, 60, 90 ],\n    '968': [ 60 ],\n    '969': [ 30 ],\n    '971': [ 30,60,90 ],\n    '976': [ 60 ],\n    '977': [ 30 ],\n    '982': [ 30 ],\n    '983': [ 30, 90 ],\n    '1039': [ 30,60,90 ],\n    '1043': [ 60 ],\n    '1044': [ 30],\n    '1056': [ 24 ],\n    '1216': [3, 6, 8, 12]\n}\n\nexport class DispensationService extends AppEncounterService {\n    drugHistory: Array<any>;\n    currentDrugOrder: Array<any>;\n    useDrugManagement: boolean; \n    constructor(patientID: number, providerID: number) {\n        super(patientID, 54, providerID)\n        this.drugHistory = []\n        this.currentDrugOrder = []\n        this.useDrugManagement = false\n    }\n\n    setIsDrugManagementEnabled(isEnabled: boolean) {\n        this.useDrugManagement = isEnabled\n    }\n\n    async loadDrugManagementEnabled() {\n        this.useDrugManagement = await ART_PROP.drugManagementEnabled()\n    }\n\n    getDrugHistory() {\n        return this.drugHistory\n    }\n\n    getCurrentOrder() {\n        return this.currentDrugOrder\n    }\n\n    buildDispensations(orderId: number, tabs: number, totalPacks: number) {\n        const dispensations = []\n        for(let i=0; i < totalPacks; i++) {\n            dispensations.push({\n                'drug_order_id': orderId,\n                date: this.date,\n                quantity: (tabs / totalPacks)\n            })\n        }\n        return dispensations\n    }\n\n    saveDispensations(dispensations: Array<any>) {\n        return AppEncounterService.postJson('/dispensations', { \n            dispensations, \n            'program_id': AppEncounterService.getProgramID()\n        })\n    }\n\n    async voidOrder(orderId: number) {\n        return AppEncounterService.void(`/dispensations/${orderId}`, {})\n    }\n\n    async loadDrugHistory() {\n        try {\n            this.drugHistory = (await DrugOrderService.getDrugOrderHistory(this.patientID))||[]\n        } catch (e) {\n            console.warn(e)\n        }\n    }\n\n    async loadCurrentDrugOrder() {\n        this.currentDrugOrder = (await DrugOrderService.getDrugOrders(this.patientID))||[]\n        if (!this.useDrugManagement) return\n        for(const order of this.currentDrugOrder) {\n            order.stocks = await StockService.fetchAvailableDrugStock(order.drug.drug_id)\n        }\n    }\n\n    getDrugPackSizes(drugId: number) {\n        if (drugId in DRUG_PACK_SIZES) {\n            return DRUG_PACK_SIZES[drugId]\n        }\n        return [30, 60, 90]\n    }\n\n    // Ripped from old ART system for backwards compatibility purposes\n    calcCompletePack(drug: any, units: number) {\n        //sorting in an ascending order by tabs\n        const drugOrderBarcodes = drug.barcodes.sort((a: any, b: any) => a.tabs - b.tabs); \n        if (drugOrderBarcodes.length == 0 || units == 0.0) return units;\n        for (const i in drugOrderBarcodes) {\n            const { tabs } = drugOrderBarcodes[i]\n            if (parseInt(tabs) >= units) return tabs;\n        }\n        const completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n        return completePack\n    }\n}\n","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, alertConfirmation, toastDanger } from \"@/utils/Alerts\"\nimport { DispensationService } from \"@/apps/ART/services/dispensation_service\"\nimport {isEmpty } from 'lodash'\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport HisDate from \"@/utils/Date\"\nimport Store from \"@/composables/ApiStore\"\nimport { joinWithCommasAnd } from '@/utils/Arrays'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        dispensation: {} as DispensationService\n    }),\n    watch: {\n        ready: {\n            handler(ready: any){\n                if (ready) {\n                    this.dispensation = new DispensationService(this.patientID, this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        saveDispensations(item: Option) {\n            return this.dispensation.saveDispensations(this.buildDispensations(item))    \n        },\n        buildDispensations(item: Option) {\n            if (!isEmpty(item.other?.dispenses)) {\n                let dispenses: any = []\n                item.other.dispenses.forEach(([tabs, packs]: Array<number>) => {\n                    dispenses = [...dispenses, \n                    ...this.dispensation.buildDispensations(\n                        item.other.order_id, tabs, packs\n                    )]\n                })\n                return dispenses\n            }\n            return this.dispensation.buildDispensations(\n                item.other.order_id, parseInt(item.value.toString()), 1\n            )\n        },\n        async buildMedicationHistory() {\n            await this.dispensation.loadDrugHistory()\n            return this.dispensation.getDrugHistory()\n                .sort((a: any, b: any) => {\n                    const dateA: any = new Date(a.order.start_date)\n                    const dateB: any = new Date(b.order.start_date)\n                    return dateB - dateA\n                })\n                .map((d: any) => ({\n                    medication: d.drug.name,\n                    date: HisDate.toStandardHisDisplayFormat(d.order.start_date),\n                    amount: d.quantity\n                }))\n        },\n        buildOrderOptions() {\n            return this.dispensation.getCurrentOrder().map((d: any) => ({\n                label: d.drug.name,\n                value: d.quantity || 0,\n                other: {\n                    'order': d,\n                    'drug_id': d.drug.drug_id,\n                    'order_id': d.order.order_id,\n                    'available_stock': this.getCumulativeStocks(d.stocks),\n                    'amount_needed': this.calculateCompletePack(d),\n                    'pack_sizes': this.getPackSizesRows(d.drug.drug_id, d.stocks),\n                }\n            }))\n        },\n        getCumulativeStocks(stocks?: Array<any>){\n            if(!stocks) return '-'\n            return stocks.reduce((acc: number, curr: any) => acc + curr.quantity, 0);\n        },\n        getPackSizesRows(drugId: number, stocks?: Array<any>) {\n            const packs = stocks?.map((s) => [s.packSize, Math.floor(s.quantity / s.packSize) || '-', 0, 0]) || []\n            this.dispensation.getDrugPackSizes(drugId).forEach((packSize: any) => {\n                const index = packs.findIndex(([p]) => p === packSize);\n                if(index === -1) packs.push([packSize, '-', 0, 0]);\n            })\n            return packs.sort((a, b) => a[0] - b[0]);\n        },\n        calculateCompletePack(order: any) {\n            const units = parseFloat(order.amount_needed) - (order.quantity || 0)\n            if(units <= 0) return 0\n            return this.dispensation.calcCompletePack(order, units)\n        },\n        isDoneDispensing(orders: Array<Option>) {\n            return orders.map(o => o.value != 0).every(Boolean)\n        },\n        async isValidDispensation(option: Option) {\n            const totalTabs = parseInt(option.value.toString())\n            const amountNeeded = option.other['amount_needed']\n            const percentageGiven = (totalTabs / amountNeeded) * 100\n\n            if (percentageGiven > 110) {\n                const confirmed = await alertConfirmation('Are you sure you want to dispense over 110% of the prescribed pill count?')\n                if (!confirmed) return false\n            }\n\n            if (percentageGiven < 100) {\n                const confirmed = await alertConfirmation('Are you sure you want to dispense less than 100% of the prescribe amount?')\n                if (!confirmed) return false\n            }\n\n            if(this.dispensation.useDrugManagement) {\n                const emptyPacks = option.other?.dispenses.filter(([p]: any) => {\n                    return option.other?.pack_sizes.some(([packSize, availableStock, dispensedAmount]: any) => {\n                        return packSize === p &&\n                            availableStock === \"-\" &&\n                            dispensedAmount > 0\n                    })\n                })\n                .map(([p]: any) => p);\n\n                if(!isEmpty(emptyPacks)) {\n                    return alertConfirmation(`Are you sure you want to dispense drugs of ${ joinWithCommasAnd(emptyPacks) } pack size(s) that have no associated stocks available?`)\n                }\n            }\n            return true\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                    id: 'dispenses',\n                    helpText: 'Dispensation',\n                    type: FieldType.TT_DISPENSATION_INPUT,\n                    init: async () => {\n                        try {\n                            this.dispensation.setIsDrugManagementEnabled((await Store.get('IS_ART_DRUG_MANAGEMENT_ENABLED')))\n                            await this.dispensation.loadCurrentDrugOrder()\n                            return true\n                        } catch (e) {\n                            toastDanger(`Unable to load current order: ${e}`)\n                            return false\n                        }\n                    },\n                    onValueUpdate: async(i: Option, l: Array<Option>) => {\n                        if (i.value != -1 && this.isDoneDispensing(l)) {\n                            return this.$router.push({name: 'appointment'})\n                        }\n                        i.other['amount_needed'] = i.other['amount_needed'] - (parseInt(i.value.toString()) || 0)\n                        if(i.other['amount_needed'] < 0 ) i.other['amount_needed'] = 0\n                        \n                        await this.dispensation.loadCurrentDrugOrder()\n\n                        return this.buildOrderOptions()\n                    },\n                    onValue: async (i: Option, isBarcodeScanned: boolean) => {\n                        if (i.value  === -1) {\n                            const voided = await this.dispensation.voidOrder(i.other.order_id)\n                            return !voided\n                        }\n\n                        if (!isBarcodeScanned) {\n                            const isValidDispensation = await this.isValidDispensation(i)\n                            if (!isValidDispensation) return false\n                        }\n\n                        const dispensed = await this.saveDispensations(i)\n\n                        if (dispensed) return true\n\n                        toastWarning('Unable to save dispensation')\n\n                        return false\n                    },\n                    config: {\n                        isDrugManagementEnabled: () => this.dispensation.useDrugManagement,\n                        medicationHistory: () => this.buildMedicationHistory(),\n                        toolbarInfo: [\n                            { label: 'Name', value: this.patient.getFullName() },\n                            { label: 'Gender', value: this.patient.getGender() },\n                            { label: 'Date Of Birth', value: HisDate.toStandardHisDisplayFormat(\n                                this.patient.getBirthdate()\n                            )}\n                        ],\n                        hiddenFooterBtns: [ \n                            'Clear',\n                            'Finish'\n                        ]\n                    },\n                    options: () => this.buildOrderOptions()\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Dispensing.vue?vue&type=template&id=4e2ba214&ts=true\"\nimport script from \"./Dispensing.vue?vue&type=script&lang=ts\"\nexport * from \"./Dispensing.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-45847ec4\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"TouchFormElement14~TouchFormElement21~TouchFormElement25\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"TouchFormElement14~TouchFormElement21~TouchFormElement25\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"TouchFormElement14~TouchFormElement21~TouchFormElement25\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-45847ec4\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"chunk-362ef7b9\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}