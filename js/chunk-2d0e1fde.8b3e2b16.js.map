{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/Prescription.vue?60bc","webpack:///./src/apps/ART/guidelines/prescription_guidelines.ts","webpack:///./src/apps/ART/views/encounters/Prescription.vue","webpack:///./src/apps/ART/views/encounters/Prescription.vue?b2e0"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","skipSummary","onOnIndex","$event","fieldComponent","activeField","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","Target","FlowState","TargetEvent","PRESCRIPTION_GUIDELINES","priority","actions","alert","async","regimenName","infoActionSheet","name","slot","color","EXIT","target","ARV_REGIMENS","targetEvent","ON_VALUE","conditions","regimenCode","code","includes","medicationOrders","orders","filter","i","match","length","regimenCodeStr","sideEffectsTable","columns","rows","action","tableActionSheet","CONTINUE","BEFORE_NEXT","hasSideEffects","isTrue","lastSideEffectDate","date","currentDate","listActionSheet","age","modal","optionsActionSheet","facts","currentRegimenStr","role","selection","reasonForSwitch","currentRegimenCode","treatmentInitiationState","starterPackNeeded","state","hangingPillsStatus","INTERVAL_SELECTION","drugs","d","hangingPills","hanging","map","drug","some","Boolean","join","isChildBearing","isBearing","lpvType","toLowerCase","weight","data","enabled","ON_BUILD","prescriptionType","type","selectedInterval","interval","isNeeded","tptPrescriptionCount","count","Math","round","DRUG_FREQUENCY_GUIDELINE","concept","MEDICATION_STYLE","style","fontSize","borderBottom","background","defineComponent","mixins","EncounterMixinVue","prescription","patientToolbar","regimenExtras","programInfo","allDrugs","gender","tptStatus","contraindications","regimenDrugs","watch","ready","this","PrescriptionService","patientID","providerID","loadMedicationOrders","loadFastTrackStatus","medicationOrdersAvailable","isFastTrack","toastWarning","gotoPatientDashboard","Store","get","loadHangingPills","loadRegimenExtras","loadTreatmentState","loadDrugInduced","loadContraindications","loadTptPrescriptionCount","initFacts","patient","shouldPrescribeExtras","getRegimenExtras","htnDrugs","resolveHtnDrugs","isEmpty","loadFastTrackMedications","getFastTrackMedications","shouldPrescribeArvs","getPatientToolBar","getFields","immediate","handler","drug_id","deep","methods","ProgramService","getProgramInformation","getID","getAge","getGender","getRecentWeight","getHangingPills","getTreatmentState","current_regimen","extractRegimenCode","getMedicationOrders","getContraindications","getTptPrescriptionCount","getLastSideEffectDate","getSessionDate","ConsultationService","getTptTreatmentStatus","form","encounter","createEncounter","setNextVisitInterval","value","payload","mapOrder","drugOrder","createDrugOrder","createRegimenSwitchObs","createHangingPillsObs","toastSuccess","invalidate","nextTask","findings","matchToGuidelines","index","_finding$actions","finding","_finding$actions2","onBuildOptions","label","other","toString","sideEffects","findAndGroupDrugSideEffects","buildSideEffectsTable","event","onEvent","getLpvDrugs","getStarterPackDrugs","getLvpDrugsByType","sessionData","sessionStorage","getItem","HTN_SESSION_KEY","Prescription","JSON","parse","isPlainObject","e","console","warn","getRegimenStarterpack","setCustomDrugs","push","HisDate","toStandardHisDisplayFormat","regimenCategories","getPatientRegimens","options","r","alternative_drug_name","concept_name","sort","buildIntervalOptions","intervals","parseInt","config","getDrugEstimates","getDrugFrequency","drugName","regimen","substring","regimens","nextAppointment","calculateDateFromInterval","drugPacks","packSize","getDrugPackSize","pillsPerDay","calculatePillsPerDay","am","noon","pm","estimatedPackSize","estimatePackSize","drug_name","toOrderObj","units","frequency","getReasonForRegimenSwitch","id","helpText","FieldType","TT_ART_REGIMEN_SELECTION","condition","validation","val","Validation","required","buildRegimenOptions","onload","onValue","onRegimen","beforeNext","onBeforeRegimenNext","toolbarInfo","footerBtns","onClick","TT_MULTIPLE_SELECT","selected","o","concept_id","areRequiredDrugsSelected","v","every","conceptID","alertConfirmation","getCustomIngridients","option","tpt","test","tb_treatment","disabled","description","show","text","completed","showKeyboard","hiddenFooterBtns","size","visible","TT_DOSAGE_INPUT","f","custom_regimen","empty","unload","summaryMapValue","getInstructions","fdata","barcodes","TT_DATA_TABLE","dataTableConfig","showIndex","viewPortStyle","height","table","thTxt","conf","cssClass","regimen_category","td","TT_NEXT_VISIT_INTERVAL_SELECTION","showRegimenCardTitle","__exports__"],"mappings":"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","file":"js/chunk-2d0e1fde.8b3e2b16.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    activeField: _ctx.fieldComponent,\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"activeField\", \"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","/**\n * QUICK FACTS ABOUT ART REGIMENS (Malawi Clinical HIV Guidelines 2018 Version 1)\n *  - ART regimens are grouped into first and secondline\n *  - Each regimen is identified by a number. \n *    [0, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14]\n *  - Firstline regimens include [0, 2, 4, 5, 6, 13, 14]\n *  - Secondline regimens include [7, 8, 9, 10, 11]\n *  - Some regimens are \"phased in\" on initiation (Due to adverse reaction). As such, \n *    a starter pack is provided for atleast two weeks. Regimens that require a\n *    starter pack include [0, 2, 6]\n */\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\nimport { tableActionSheet, listActionSheet, infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\"\n\nexport enum Target {\n    ARV_REGIMENS = 'arv_regimens',\n    INTERVAL_SELECTION = 'next_visit_interval'\n}\nexport enum FlowState {\n    EXIT = 'exit',\n    CONTINUE = 'continue'\n}\nexport enum TargetEvent {\n    ON_VALUE = 'onValue',\n    ON_BUILD = 'onBuild',\n    BEFORE_NEXT = 'beforeNext',\n}\nexport const PRESCRIPTION_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Do not prescribe LPV regimens together with 3HP\": {\n        priority: 1,\n        actions: {\n            alert: async ({ regimenName }: any) => {\n                await infoActionSheet(\n                    '3HP - LPV/r conflict',\n                    regimenName,\n                    `Regimens containing LPV/r <b>cannot</b> be prescribed together with 3HP`,\n                    [\n                        { name: 'Close', slot: 'end', color: 'danger' }\n                    ],\n                    'his-danger-color'\n                    )\n                    return FlowState.EXIT\n                }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.ON_VALUE,\n        conditions: {\n            regimenCode(code: number) {\n                return [7, 8, 9, 10, 11, 12].includes(code)\n            },\n            medicationOrders(orders: Array<string>) {\n                return orders.filter(i => `${i}`.match(/3hp/i) ? true : false).length >= 1\n            }\n        }\n    },\n    \"Check for any adverse effects or contraindications associated with the regimen\": {\n        priority: 1,\n        actions: {\n            alert: async ({ regimenCodeStr, sideEffectsTable }: any) => {\n                const { columns, rows } = sideEffectsTable\n                const action = await tableActionSheet(\n                    `Contraindications / Side effects for ${regimenCodeStr}`,'',\n                    columns, rows,\n                    [\n                        { name: 'Select other regimen', slot: 'start'},\n                        { name: 'Keep selected regimen', slot: 'end', color: 'danger' }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Select other regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            hasSideEffects(isTrue: boolean){\n                return isTrue\n            },\n            lastSideEffectDate(date: string, { currentDate }: any){\n                return date >= currentDate\n            }\n        }\n    },\n    \"Recommend 2nd line regimen to children under 3\": {\n        priority: 1,\n        actions: {\n            alert: async () => {\n                const action = await listActionSheet(\n                    'Recommendation',\n                    '',\n                    [\n                        \"Children under 3 years often have a high viral load and may be infected with drug-resistant HIV from previous exposure to ARVs (mother's ART and/or infant nevirapine prophylaxis)\",\n                        \"Therefore, children under <b>3 years</b> respond better when <b>started immediately on 2nd line regimen</b> (Regimen <b>11</b>)\",\n                    ],\n                    [\n                        { name: 'Select another regimen', slot: 'start' }, \n                        { name: 'Keep selected regimen', slot: 'end', color: 'danger' }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Select another regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            age(age: number) {\n                return age < 3\n            },\n            regimenCode(code: number) {\n                return code != 11\n            }\n        }\n    }, \n    'Provide a reason for switching regimens when patient already has one': {\n        priority: 1,\n        actions : {\n            alert: async (facts: any) => {\n                const modal = await optionsActionSheet(\n                    `Are you sure you want to replace ${facts.currentRegimenStr}?`,\n                    'Specify reason for switching regimen',\n                    [ \n                        'Policy change', \n                        'Ease of administration (pill burden, swallowing)',\n                        'Drug drug interaction', \n                        'Pregnancy intention',\n                        'Side effects', \n                        'Treatment failure', \n                        'Weight Change', \n                        'Other'\n                    ],\n                    [\n                        { name: 'Cancel', slot:'start', color: 'danger' },\n                        { name: 'Continue', slot: 'end', role: 'action' }\n                    ]\n                )\n\n                if (modal.selection && modal.action != 'Cancel') {\n                    facts.reasonForSwitch = modal.selection\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.ON_VALUE,\n        conditions: {\n            regimenCode(code: string, { currentRegimenCode }: any){\n                return currentRegimenCode != -1 && code != currentRegimenCode\n            }\n        }\n    },\n    \"Provide 14 day starter pack for LPV regimens for children under 3 years old\": {\n        priority: 3,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Starter pack needed for 14 days',\n                    `${ facts.treatmentInitiationState}`, \n                    `${ facts.regimenName }`,\n                    [\n                        { name: 'Cancel', slot: 'start', color: 'danger'},\n                        { name: 'Prescribe starter pack', slot: 'end' }\n                    ],\n                    'his-info-color'\n                )\n\n                if (action === 'Prescribe starter pack') {\n                    facts.starterPackNeeded = true\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            },\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            age(age: number) {\n                return age < 3\n            },\n            regimenCode(code: number) {\n                return code === 11\n            },\n            treatmentInitiationState(state: string) {\n                return ['Initiation', 'Re-initiation'].includes(state)\n            }\n        }\n    },\n    \"Provide 14 day starter pack for NVP based regimens on newly initiated/re-initiation patients\": {\n        priority: 3,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Starter pack needed for 14 days',\n                    `${ facts.treatmentInitiationState}`, \n                    `${ facts.regimenName }`,\n                    [\n                        { name: 'Cancel', slot: 'start', color: 'danger'},\n                        { name: 'Prescribe starter pack', slot: 'end' }\n                    ],\n                    'his-info-color'\n                )\n\n                if (action === 'Prescribe starter pack') {\n                    facts.starterPackNeeded = true\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            },\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            regimenCode(code: number) {\n                return [0, 2, 6].includes(code)\n            },\n            treatmentInitiationState(state: string) {\n                return ['Initiation', 'Re-initiation'].includes(state)\n            }\n        }\n    },\n    \"Ask to reuse hanging pills if any\": {\n        priority: 5,\n        actions: {\n            alert: async (facts: any) => {\n                const action  = await infoActionSheet(\n                    'Hanging pills recommendation',\n                    'Add hanging pills?', '',\n                    [\n                        { name: 'No', slot: 'start', color: 'warning'},\n                        { name: 'Yes', slot: 'end'}\n                    ],\n                    'his-info-color'\n                )\n                if (action === 'Yes') {\n                    facts.hangingPillsStatus = 'Optimize - including hanging pills'\n                } else {\n                    facts.hangingPillsStatus = 'Exact - excluding hanging pills'\n                }\n                return FlowState.CONTINUE\n            }\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n           drugs(d: Array<string>, { hangingPills }: any){\n                const hanging = d.map(drug => hangingPills.includes(drug))\n                return hanging.some(Boolean)\n           }\n        }\n    },\n    \"Provide warning of use of DTG regimen to women of reproductive age\" : {\n        priority: 2,\n        actions: {\n            alert: async ({regimenName}: any) => {\n                const action = await infoActionSheet(\n                    `Use of DTG or EFV in women of reproductive age`,\n                    regimenName,\n                    [\n                        'There is currently <u>no confirmation</u>',\n                        'that <b>DTG</b> is safe in <u>very early pregnancy</u>',\n                        'DTG-based regimens are therefore not used as standard 1st line regimens for',\n                        '<u>girls and women</u> who may get pregnancy'\n                    ].join(' '),\n                    [\n                        { name: 'Select another regimen', slot: 'start' }, \n                        { name: 'Continue with regimen', slot: 'end', color: 'danger'}\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Select another regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            regimenCode(code: number) {\n                return code >= 12\n            },\n            isChildBearing(isBearing: boolean){\n                return isBearing\n            }\n        }\n    },\n    \"Provide pallet options for LPV regimens for patient's whose weight is between 3 and 25 kgs\" : {\n        priority: 6,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Pellets (cups) / Tabs', \n                    '',\n                    'Prescribe LPV/r in <b>Pellets (cups)</b> or <b>Tablets</b>?',\n                    [\n                        { name: 'Granules', slot: 'start' },\n                        { name: 'Pellets', slot:'end' },\n                        { name: 'Tabs', slot:'end' }\n                    ],\n                    'his-info-color'\n                )\n                facts.lpvType = action.toLowerCase()\n                return FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            weight(weight: number){\n                return weight >= 3 && weight <= 25\n            },\n            regimenCode(code: number){\n                return code === 11 || code === 9\n            }\n        }\n    },\n    \"Provide 14 day interval for NVP or LVP Regimen starter pack\": {\n        priority: 1,\n        data: {\n            enabled: false\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.ON_BUILD,\n        conditions: {\n            prescriptionType(type: string){\n                return type === 'Regimen'\n            },\n            selectedInterval(interval: number) {\n                return interval > 14\n            },\n            starterPackNeeded(isNeeded: boolean) {\n                return isNeeded\n            },\n            regimenCode(code: number) {\n                return [0, 2, 6, 11].includes(code)\n            }\n        }\n    },\n    \"Provide intervals upto 1 month, 2nd up to 2 months, and 3rd up to 6 months for Patients receiving TPT\" : {\n        priority: 2,\n        data: {\n            enabled: false\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.ON_BUILD,\n        conditions: {\n            prescriptionType(type: string){\n                return type === 'Regimen'\n            },\n            medicationOrders(orders: Array<string>) {\n                return orders.map(i => `${i}`.match(/3hp/i) ? true : false).some(Boolean)\n            },\n            tptPrescriptionCount(count: number, {selectedInterval}: any){\n                return Math.round(selectedInterval / 30) > count\n            }\n        }\n    }\n}\n\nexport const DRUG_FREQUENCY_GUIDELINE: Record<string, GuideLineInterface> = {\n    'Rifapentine or isoniazid should be taken weekly': {\n        concept: 'Weekly (QW)',\n        priority: 1,\n        conditions: {\n            drug(d: string) {\n                return `${d}`.match(/Rifapentine|Isoniazid/i)\n            }\n        }\n    },\n    'Use daily frequency for any other drugs': {\n        concept: 'Daily (QOD)',\n        priority: 2,\n        conditions: {\n            drug(d: string) {\n                return !`${d}`.match(/Rifapentine|Isoniazid/i)\n            }\n        }\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RegimenInterface } from \"@/interfaces/Regimen\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PrescriptionService } from \"@/apps/ART/services/prescription_service\"\nimport { toastWarning, toastSuccess, alertConfirmation } from \"@/utils/Alerts\"\nimport HisDate from \"@/utils/Date\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport { isEmpty, isPlainObject } from \"lodash\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport { \n    PRESCRIPTION_GUIDELINES,\n    DRUG_FREQUENCY_GUIDELINE,\n    TargetEvent, \n    Target, \n    FlowState \n} from \"@/apps/ART/guidelines/prescription_guidelines\"\nimport { HTN_SESSION_KEY } from '../../services/htn_service'\nimport { ProgramService } from '@/services/program_service'\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport Store from \"@/composables/ApiStore\"\nimport { ConsultationService } from '../../services/consultation_service'\n\nconst MEDICATION_STYLE = { style : { fontSize:'1.3rem !important', borderBottom: 'solid 2px #ccc', color: 'black', background: 'white' }}\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        drugs: [] as Array<RegimenInterface>,\n        prescription: {} as any,\n        patientToolbar: [] as Array<Option>,\n        fieldComponent: '' as string,\n        regimenExtras: [] as Array<any>,\n        programInfo: [] as any,\n        allDrugs: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            weight: -1 as number,\n            currentDate: '' as string,\n            isChildBearing: false as boolean,\n            prescriptionType: '' as 'Custom' | 'Regimen',\n            tptStatus: {} as any,\n            tptPrescriptionCount: 0,\n            currentRegimenCode: -1 as number,\n            currentRegimenStr: '' as string,\n            drug: '' as string,\n            drugs: [] as Array<any>,\n            contraindications: {} as any,\n            hasSideEffects: false as boolean,\n            sideEffectsTable: {} as any,\n            lastSideEffectDate: '' as string,\n            regimenCode: -1 as number,\n            regimenCodeStr: '' as string,\n            regimenName: '' as string,\n            regimenDrugs: [] as any,\n            hangingPills: [] as Array<any>,\n            reasonForSwitch: '' as string,\n            starterPackNeeded: false as boolean,\n            hangingPillsStatus: '' as string,\n            treatmentInitiationState: '' as string,\n            lpvType: '' as string,\n            medicationOrders: [] as Array<any>,\n            selectedInterval: 0 as number\n        }\n    }),\n    watch: {\n        ready: {\n            async handler(ready: boolean) {\n                if (!ready) return\n                this.prescription = new PrescriptionService(this.patientID, this.providerID)\n                await this.prescription.loadMedicationOrders()\n                await this.prescription.loadFastTrackStatus()\n                if (!this.prescription.medicationOrdersAvailable() && !this.prescription.isFastTrack()) {\n                    toastWarning('Patient is not eligible for treatment Today! Please check HIV Clinic Consultation')\n                    return this.gotoPatientDashboard()\n                }\n                if ((await Store.get('ASK_HANGING_PILLS'))) {\n                    await this.prescription.loadHangingPills()\n                }\n                await this.prescription.loadRegimenExtras()\n                await this.prescription.loadTreatmentState()\n                await this.prescription.loadDrugInduced()\n                await this.prescription.loadContraindications()\n                await this.prescription.loadTptPrescriptionCount()\n\n                await this.initFacts(this.patient)\n\n                if (this.prescription.shouldPrescribeExtras()) {\n                    this.regimenExtras = this.prescription.getRegimenExtras()\n                }\n\n                const htnDrugs = this.resolveHtnDrugs()\n\n                if (!isEmpty(htnDrugs)) this.regimenExtras = [...this.regimenExtras, ...htnDrugs]\n\n                if (this.prescription.isFastTrack()) {\n                    await this.prescription.loadFastTrackMedications()\n                    this.drugs = this.prescription.getFastTrackMedications()\n                    this.fieldComponent = 'next_visit_interval'\n\n                } else if (!this.prescription.shouldPrescribeArvs() && !isEmpty(this.regimenExtras)) {\n                    this.drugs = this.regimenExtras\n                }\n                this.patientToolbar = await this.getPatientToolBar()\n                this.fields = this.getFields()\n            },\n            immediate: true\n        },\n        drugs: {\n            handler(drugs: Array<any>) {\n                this.facts.drugs = drugs.map(d => d.drug_id)\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async initFacts(patient: any) {\n            this.programInfo = await ProgramService.getProgramInformation(patient.getID())\n            this.facts.age = patient.getAge()\n            this.facts.gender = patient.getGender()\n            this.facts.weight = await patient.getRecentWeight()\n            this.facts.hangingPills = this.prescription.getHangingPills()\n            this.facts.treatmentInitiationState = this.prescription.getTreatmentState()\n            this.facts.currentRegimenStr = this.programInfo.current_regimen\n            this.facts.currentRegimenCode = this.extractRegimenCode(this.programInfo.current_regimen)\n            this.facts.medicationOrders = this.prescription.getMedicationOrders()\n            this.facts.contraindications = this.prescription.getContraindications()\n            this.facts.tptPrescriptionCount = this.prescription.getTptPrescriptionCount()\n            this.facts.lastSideEffectDate = this.prescription.getLastSideEffectDate()\n            this.facts.currentDate = PrescriptionService.getSessionDate()\n            this.facts.isChildBearing = patient.isChildBearing()\n            this.facts.tptStatus = await new ConsultationService(this.patientID, this.providerID).getTptTreatmentStatus()\n        },\n        async onSubmit(form: any) {\n            const encounter = await this.prescription.createEncounter()\n\n            this.prescription.setNextVisitInterval(form[Target.INTERVAL_SELECTION].value)\n\n            const payload = this.mapOrder(this.drugs)\n\n            if (!encounter) return toastWarning('Unable to create treatment encounter')\n\n            const drugOrder = await this.prescription.createDrugOrder(payload) \n\n            if(!drugOrder) return toastWarning('Unable to create drug orders!')\n\n            if (this.facts.reasonForSwitch) {\n                await this.prescription.createRegimenSwitchObs(this.facts.reasonForSwitch)\n            }\n\n            if (this.facts.hangingPillsStatus) {\n                await this.prescription.createHangingPillsObs(this.facts.hangingPillsStatus)\n            }\n            toastSuccess('Drug order has been created')\n            Store.invalidate('PATIENT_PROGRAM')\n            this.nextTask()\n        },\n        async onEvent(target: Target, targetEvent: TargetEvent) {\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding?.actions?.alert) {\n                    const state = await finding?.actions?.alert(this.facts)\n                    if (state === FlowState.EXIT)\n                        return false\n                }\n            }\n            return true\n        },\n        onBuildOptions(target: Target, targetEvent: TargetEvent){\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding.data) return finding.data\n            }\n            return {}\n        },\n        async onRegimen({ label, value, other }: Option) {\n            this.facts.lpvType = ''\n            this.facts.hangingPillsStatus = ''\n            this.facts.starterPackNeeded = false\n            this.facts.regimenName = `${value} (${label})`\n            this.facts.regimenCodeStr = value.toString()\n            this.facts.regimenCode = this.extractRegimenCode(value.toString())\n            this.facts.regimenDrugs = other.regimenDrugs\n            this.facts.drugs = other.regimenDrugs.map((d: any) => d.drug_id)\n\n            const sideEffects = this.prescription.findAndGroupDrugSideEffects(this.facts.drugs)\n            this.facts.hasSideEffects = !isEmpty(sideEffects)\n            this.facts.sideEffectsTable = this.buildSideEffectsTable(sideEffects)\n        },\n        async onBeforeRegimenNext() {\n            const event = await this.onEvent(Target.ARV_REGIMENS, TargetEvent.BEFORE_NEXT)\n            let drugs = []\n\n            if (!event) return false\n\n            if (this.facts.lpvType) {\n               drugs = await this.getLpvDrugs()\n            } else if (this.facts.starterPackNeeded) {\n               drugs = await this.getStarterPackDrugs()\n               if (isEmpty(drugs)) {\n                    drugs = this.facts.regimenDrugs\n               }\n            } else {\n                drugs = this.facts.regimenDrugs\n            }\n            this.drugs = [...this.regimenExtras, ...drugs]\n            return true\n        },\n        getLpvDrugs() {\n            return this.prescription.getLvpDrugsByType(\n                this.facts.lpvType, this.facts.regimenCode\n            ) \n        },\n        resolveHtnDrugs() {\n            try {\n                const sessionData = sessionStorage.getItem(HTN_SESSION_KEY.Prescription)\n                if (typeof sessionData === 'string') {\n                    const data = JSON.parse(sessionData)\n                    if (isPlainObject(data) && data[this.patientID]) {\n                        return data[this.patientID]\n                    }\n                }\n            } catch (e) {\n                console.warn(e)\n            }\n            return []\n        },\n        getStarterPackDrugs() {\n            return this.prescription.getRegimenStarterpack(\n                this.facts.regimenCode, this.facts.weight\n            )\n        },\n        setCustomDrugs(drugs: any) {\n            this.drugs = drugs.map((drug: Option) => drug.other)\n        },\n        buildSideEffectsTable(sideEffects: any) {\n            const columns = ['Date', 'Contraindication(s)', 'Side effect(s)']\n            const rows = []\n            for(const date in sideEffects) {\n                const contraindications = this.facts.contraindications[date] || []\n                rows.push([\n                    HisDate.toStandardHisDisplayFormat(date), \n                    contraindications.join(', '),\n                    sideEffects[date].join(', ')\n                ])\n            }\n            return { columns, rows }\n        },\n        async buildRegimenOptions() {\n            const regimenCategories = await this.prescription.getPatientRegimens()\n            const options = []\n            for(const value in regimenCategories) {\n                const regimenDrugs = regimenCategories[value]\n                const label = regimenDrugs.map((r: RegimenInterface) => \n                    r.alternative_drug_name || r.concept_name).sort().join(' + ')\n\n                options.push({ \n                    label, \n                    value, \n                    other: {\n                        regimenDrugs \n                    } \n                })\n            }\n            return options\n        },\n        buildIntervalOptions() {\n            const intervals = [\n                { label: '2 weeks', value: 14 },\n                { label: '1 month', value: 28 },\n                { label: '2 months', value: 56 },\n                { label: '3 months', value: 84 },\n                { label: '4 months', value: 112 },\n                { label: '5 months', value: 140 },\n                { label: '6 months', value: 168 },\n                { label: '7 months', value: 196 },\n                { label: '8 months', value: 224 },\n                { label: '9 months', value: 252 },\n                { label: '10 months', value: 280 },\n                { label: '11 months', value: 308 },                        \n                { label: '12 months', value: 336 },\n            ]\n            return intervals.map(({label, value}: Option) => {\n                this.facts.selectedInterval = parseInt(value.toString())\n                const config = this.onBuildOptions(Target.INTERVAL_SELECTION, TargetEvent.ON_BUILD)\n                return {\n                    label,\n                    value,\n                    other: {\n                        ...config,\n                        ...this.getDrugEstimates(this.drugs, this.facts.selectedInterval)\n                    }\n                }\n            })\n        },\n        getDrugFrequency(drugName: string){\n            this.facts.drug = drugName\n            const findings = matchToGuidelines(this.facts, DRUG_FREQUENCY_GUIDELINE)\n\n            if (!isEmpty(findings)) {\n                return findings[0].concept\n            }\n        },\n        extractRegimenCode(regimen: string): number {\n          try {\n               if (regimen.match(/n\\/a/i)) return -1\n\n               return parseInt(regimen.substring(0, regimen.length))\n           } catch (e) {\n               console.warn(e)\n               return -1\n           }\n        },\n        getDrugEstimates(regimens: any, interval: number) {\n            this.prescription.setNextVisitInterval(interval)\n            const nextAppointment = this.prescription.calculateDateFromInterval()\n            const drugPacks = regimens.map((regimen: RegimenInterface) => {\n                const packSize = this.prescription.getDrugPackSize(regimen)\n                const pillsPerDay = this.prescription.calculatePillsPerDay(regimen.am, regimen.noon, regimen.pm)\n                const estimatedPackSize = this.prescription.estimatePackSize(pillsPerDay, packSize)     \n                return {\n                    label: regimen.alternative_drug_name || regimen.drug_name,\n                    value: estimatedPackSize\n                } \n            })\n            return {\n                label: 'Medication run-out date:',\n                value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                other: {\n                    label: \"Estimated packs/tins:\",\n                    value: drugPacks\n                }\n            }\n        },\n        mapOrder(regimens: Array<RegimenInterface>) {\n            return regimens.map((regimen: any) => {\n                return this.prescription.toOrderObj(\n                    regimen.drug_id, \n                    regimen.alternative_drug_name || regimen.drug_name,\n                    regimen.units, \n                    regimen.am, \n                    regimen.pm,\n                    regimen.frequency || this.getDrugFrequency(regimen.drug_name)\n                )\n            })\n        },\n        async getPatientToolBar() {\n            const reasonForSwitch = await this.prescription.getReasonForRegimenSwitch()\n            return [\n                { label: 'Age', value: `${this.patient.getAge()} Year(s)` },\n                { label: 'Gender', value: this.patient.getGender() },\n                { label: 'Current Regimen', value: this.programInfo.current_regimen },\n                { label: 'Current weight', value: `${this.facts.weight} kg(s)` || 'Unknown' },\n                { label: 'Reason for change', value: reasonForSwitch }\n            ]\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                    id: Target.ARV_REGIMENS,\n                    helpText: 'ARV Regimen(s)',\n                    type: FieldType.TT_ART_REGIMEN_SELECTION,\n                    condition: () => this.prescription.shouldPrescribeArvs(),\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildRegimenOptions(),\n                    onload: () => this.facts.prescriptionType = 'Regimen',\n                    onValue: (regimen: Option) => {\n                        this.onRegimen(regimen)\n                        return this.onEvent(Target.ARV_REGIMENS, TargetEvent.ON_VALUE)\n                    },\n                    beforeNext: () => this.onBeforeRegimenNext(),\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        footerBtns: [\n                            {\n                                name: 'Custom Regimen',\n                                slot: 'end',\n                                onClick: () => {\n                                    this.fieldComponent = 'custom_regimen'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_regimen',\n                    helpText: 'Custom prescription',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    condition: () => this.facts.prescriptionType === 'Custom',\n                    onload: () => this.facts.prescriptionType = 'Custom',\n                    validation: (val: Option) => Validation.required(val),\n                    beforeNext: async (options: Option[]) => {\n                        const selected = options.map(o => o.other.concept_id)\n                        const areRequiredDrugsSelected = this.regimenExtras.map(v => v.concept_id)\n                            .every(conceptID => selected.includes(conceptID))\n                        if (!areRequiredDrugsSelected) {\n                            return (await alertConfirmation(`One or more required drugs in \"${this.regimenExtras.map((d: any) => d.drug_name)}\" is missing from your selection, do you want to proceed?`))\n                        }\n                        return true\n                    },\n                    options: async () => {\n                        if (isEmpty(this.allDrugs)) {\n                            this.allDrugs = await this.prescription.getCustomIngridients()\n                        }\n                        return this.allDrugs.map((drug: any) => {\n                            const option: Option = {\n                                label: drug.name,\n                                value: drug.drug_id,\n                                other: { ...drug }\n                            }\n                            if (this.facts.tptStatus.tpt != null && /INH|3HP|RIF|Isoniazid/i.test(drug.name)) {\n                                if (this.facts.tptStatus.tb_treatment) {\n                                    return {\n                                        ...option,\n                                        disabled: true,\n                                        description: {\n                                            color: 'danger',\n                                            show: 'always',\n                                            text: 'Client on TB Treatment'\n                                        }\n                                    }\n                                }\n                                if (this.facts.tptStatus.completed) {\n                                    return {\n                                        ...option,\n                                        disabled: true,\n                                        description: {\n                                            color: 'danger',\n                                            show: 'always',\n                                            text: 'Client completed ' + this.facts.tptStatus.tpt\n                                        }\n                                    }\n                                }\n                                if (/IPT/i.test(this.facts.tptStatus.tpt) && /3HP|RIF/i.test(drug.name)) {\n                                    return {\n                                        ...option,\n                                        disabled: true,\n                                        description: {\n                                            color: \"danger\",\n                                            show: \"always\",\n                                            text: \"Client is on IPT\"\n                                        }\n                                    }\n                                }\n                            }\n                            return option\n                        })\n                    },\n                    config: {\n                        showKeyboard: true,\n                        hiddenFooterBtns: [ 'Back' ],\n                        footerBtns: [\n                            {\n                                name: 'Standard Regimen',\n                                size: 'large',\n                                slot: 'end',\n                                color: 'primary',\n                                visible: false,\n                                onClick: () => {\n                                    this.fieldComponent = 'arv_regimens'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_dosage',\n                    helpText: 'Custom dose',\n                    type: FieldType.TT_DOSAGE_INPUT,\n                    condition: (f: any) => !isEmpty(f.custom_regimen),\n                    validation: (val: Array<Option>) => {\n                        if (Validation.required(val)) return ['Drugs are not available']\n\n                        const empty = val.map(({ other }: Option) => other.am <= 0 && other.pm <= 0)\n                        return empty.some(Boolean) ? ['Missing dosage configuration on some drugs'] : null\n                    },\n                    unload: (data: any) => this.setCustomDrugs(data),\n                    summaryMapValue: ({other}: any) => ({\n                        label: 'Dosages', \n                        value: this.prescription.getInstructions(\n                            other.drug_name, other.am, other.pm, other.units\n                        ) \n                    }),\n                    options: (fdata: any) => {\n                        return fdata.custom_regimen.map((regimen: Option) => ({\n                            label: regimen.label,\n                            value: regimen.value,\n                            other: {\n                                'drug_id': regimen.other.drug_id,\n                                'drug_name': regimen.label,\n                                'barcodes': regimen.other.barcodes,\n                                'units': regimen.other.units,\n                                'am': 0,\n                                'noon': 0,\n                                'pm': 0,\n                                'frequency': this.getDrugFrequency(regimen.label)\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: 'selected_meds',\n                    helpText: 'Selected medication',\n                    type: FieldType.TT_DATA_TABLE,\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        hiddenFooterBtns: [ 'Clear' ],\n                        dataTableConfig: {\n                            showIndex: false\n                        },\n                        viewPortStyle: {\n                            height: '76vh'\n                        },\n                        columns: () => [\n                            [\n                                table.thTxt('Drug name', MEDICATION_STYLE),\n                                table.thTxt('Units', MEDICATION_STYLE),\n                                table.thTxt('AM', MEDICATION_STYLE),\n                                table.thTxt('Noon',  MEDICATION_STYLE),\n                                table.thTxt('PM', MEDICATION_STYLE),\n                                table.thTxt('Frequency', MEDICATION_STYLE)\n                            ]\n                        ],\n                        rows: () => this.drugs.map((d: any) => {\n                            const conf = {\n                                style: {\n                                    'height': '6vh'\n                                },\n                                cssClass:  (() => {\n                                    if (d.drug_name.match(/cotrimoxazole/i)) {\n                                        return 'adult-regimen-formulation'\n                                    }\n                                    switch(d.regimen_category) {\n                                        case 'A':\n                                            return 'adult-regimen-formulation'\n                                        case 'P':\n                                            return 'peads-regimen-formulation'\n                                    }\n                                })()\n                            }\n                            return [\n                                table.td(d.alternative_drug_name || d.drug_name, conf),\n                                table.td(d.units, conf),\n                                table.td(d.am, conf),\n                                table.td(d.noon, conf),\n                                table.td(d.pm, conf),\n                                table.td(d.frequency || this.getDrugFrequency(d.drug_name), conf)\n                            ]         \n                        })\n                    }\n                },\n                {\n                    id: Target.INTERVAL_SELECTION,\n                    helpText: 'Interval to next visit',\n                    type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildIntervalOptions(),\n                    onValue: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.ON_VALUE),\n                    beforeNext: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.BEFORE_NEXT), \n                    config: {\n                        showRegimenCardTitle: false\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Prescription.vue?vue&type=template&id=79f479b4&ts=true\"\nimport script from \"./Prescription.vue?vue&type=script&lang=ts\"\nexport * from \"./Prescription.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}