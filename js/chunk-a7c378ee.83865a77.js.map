{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/radiology.vue?82ed","webpack:///./src/apps/OPD/views/encounters/radiology.vue","webpack:///./src/apps/OPD/views/encounters/radiology.vue?b7bb","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/OPD/services/patient_radiology_service.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","_","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","radiologyService","isPacsEnabled","previousRadiologyExaminations","watch","ready","isReady","this","PatientRadiologyService","patientID","providerID","OPD_GLOBAL_PROP","isPACsEnabled","showPreviousRadiolgy","patient","getFields","immediate","deep","methods","computedData","Promise","all","radiology","createEncounter","obsObj","savedObsData","saveObservationList","printOrders","submitToPacs","error","console","log","gotoPatientDashboard","params","getPreviousRadiologyExaminations","url","columns","rows","order","row","children","accession_number","value_text","moment","obs_datetime","format","push","label","value","other","id","helpText","condition","type","FieldType","TT_TABLE_VIEWER","options","d","getTableData","config","hiddenFooterBtns","TT_RADIOLOGY_PICKER","validation","Validation","required","disableBackBtn","computedValue","map","async","buildValueCoded","option","parent","child","buildValueCodedFromConceptId","concept_id","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","offlineID","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","created","$route","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","computed","patientDashboardUrl","isOnline","isOfflineMode","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","userAgentObs","AppEncounterService","buildValueText","getPlatformName","resolveObs","toastWarning","enc","encounterTypeID","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","EXIT","findings","matchToGuidelines","index","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","names","latestName","given_name","family_name","toOption","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","inArray","arr","expression","length","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","$emit","constructor","super","radiologyType","ConceptService","getConceptSet","patientId","Service","getJson","getRadiologyObs","getID","thirdpartyapps","getThirdpartyApps","app","accessionNumber","orders","obs_id","getFullName","getGender","getNationalID","getEncounterID","getDate","getUserName","getUserID","getUserRoles","postJson","lastAccessionNumber","getAccesionNumber","getConceptName","value_coded","printService","PrintoutService","patientNationalId","patientName","urls","fullXrayOrder","batchPrintLbls","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-a7c378ee.83865a77.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        cancelDestinationPath: _ctx.cancelDestination,\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onSubmit\n      }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientRadiologyService } from \"@/apps/OPD/services/patient_radiology_service\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport OPD_GLOBAL_PROP from \"@/apps/OPD/opd_global_props\";\nimport moment from \"dayjs\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    radiologyService: {} as any,\n    isPacsEnabled: false,\n    previousRadiologyExaminations: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(isReady: boolean) {\n        if(isReady){\n          this.radiologyService = new PatientRadiologyService(this.patientID, this.providerID)\n          this.isPacsEnabled = (await OPD_GLOBAL_PROP.isPACsEnabled())\n          this.previousRadiologyExaminations = await this.radiologyService.showPreviousRadiolgy(this.patient)\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true,\n      deep: true\n    }\n  },\n  methods: {\n    async onSubmit(_: any, computedData: any){\n      const data = await Promise.all(computedData.radiology)\n      await this.radiologyService.createEncounter()\n      const obsObj = await this.radiologyService.obsObj(data) \n      const savedObsData = await this.radiologyService.saveObservationList(obsObj)\n      await this.radiologyService.printOrders(savedObsData, this.patient)\n      if(this.isPacsEnabled) {\n        try {\n          await this.radiologyService.submitToPacs(savedObsData, this.patient)\n        } catch (error) {\n          console.log(error)\n        }\n      }\n      this.gotoPatientDashboard()\n    },\n    async getTableData() {\n      const params = await this.radiologyService.getPreviousRadiologyExaminations(this.patient)\n      const data = params.data\n      const url = params.url\n      const columns = ['Accession#','Body Part', 'Order Type', 'Ordered', 'Result']\n      const rows = [] as Array<any>\n      for (const order in data) {\n        const row = [\n          data[order].children[0].accession_number,\n          data[order].value_text,\n          data[order].children[0].value_text,\n          moment(data[order].obs_datetime).format('DD/MMM/YYYY'),\n          `<ion-button slot=\"end\" size=\"large\" href=\"${url}\" color=\"success\">\n            View\n          </ion-button>`\n        ]\n        rows.push(row)\n      }\n      return [\n        {\n          label: '',\n          value: '',\n          other: { columns, rows},\n        },\n      ];\n    },\n    getFields(): Array<Field>{\n      return [\n        {\n          id: 'radiology_results',\n          helpText: 'Previous Radiology Examinations',\n          condition: () => this.previousRadiologyExaminations,\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.getTableData(),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n        {\n          id: 'radiology',\n          helpText: 'Radiology Examination',\n          type: FieldType.TT_RADIOLOGY_PICKER,\n          validation: (data: any) => Validation.required(data),\n          config: {\n            hiddenFooterBtns: [ this.disableBackBtn() ],\n          },\n          computedValue: (options: Option[]) => {\n            return options.map(async (option)=> ({\n              ...(await this.radiologyService.buildValueCoded('Radiology Orders', option.other.parent)),\n              child: [(await this.radiologyService.buildValueCodedFromConceptId(option.other.parent, option.other.concept_id))]\n            }))\n          },\n        },\n      ]\n    },\n    disableBackBtn() {\n      if(this.previousRadiologyExaminations) {\n        return ''\n      } else return 'Back'\n    }\n  }\n})\n","import { render } from \"./radiology.vue?vue&type=template&id=08b86c3c&ts=true\"\nimport script from \"./radiology.vue?vue&type=script&lang=ts\"\nexport * from \"./radiology.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ConceptService } from '@/services/concept_service';\nimport { PrintoutService } from \"@/services/printout_service\";\nimport { Service } from \"@/services/service\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport { isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\";\n\nexport class PatientRadiologyService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 121, providerID) \n  }\n\n  static async getRadiologyList(radiologyType: string, filter = '') {\n    return ConceptService.getConceptSet(radiologyType, filter) \n  }\n\n  async getRadiologyObs(patientId: number) {\n    try {\n      const path = 'radiology/radiology_orders?patient_id='+patientId\n      const data = await Service.getJson(path)\n      return data\n    } catch (error) {\n      return 0\n    }\n  }\n\n  async showPreviousRadiolgy(patient: any): Promise<boolean> {\n    if ( (await this.getRadiologyObs(patient.getID())).length > 0 ) {\n      return true\n    }\n    return false\n  }\n\n  async getPreviousRadiologyExaminations(patient: any): Promise<any>{\n    const thirdpartyapps  =  await Service.getThirdpartyApps()\n    let url = '' \n    for (const app of thirdpartyapps) {\n      if(app.name == 'pacs') {\n        url = app.url\n      }\n    }\n    if (isEmpty(url)) {\n      url = `opd/encounters/radiology/${this.patientID}`\n    }\n    const data =  await this.getRadiologyObs(patient.getID())\n    if(!(data.length > 0)) { \n      return false;\n    } else {\n      return { data: data, url: url}\n    }\n  }\n\n  async submitToPacs(savedObsData: any, patient: any) {\n    let accessionNumber\n    for(const order of savedObsData) {\n      accessionNumber = order.children[0].accession_number\n    }\n    const orders = await Promise.all(savedObsData.map(async (order: any) => ({\n      \"main_value_text\": order.value_text,\n      \"obs_id\": order.obs_id,\n      \"sub_value_text\": order.children[0].value_text\n    })))\n    const patientData = {\n      \"patient_name\": patient.getFullName(),\n      \"patientAge\": patient.getAge(),\n      \"patientDOB\": patient.getBirthdate(),\n      \"patientGender\": patient.getGender(),\n      \"national_id\": patient.getNationalID(),\n      \"person_id\": patient.getID(),\n      \"encounter_id\": this.getEncounterID(),\n      \"date_created\": this.getDate(),\n      \"accession_number\": accessionNumber\n    }\n    const provider = {\n      \"username\": Service.getUserName(),\n      \"userID\": Service.getUserID(),\n      \"userRoles\": Service.getUserRoles(),\n    }\n    return Service.postJson(`radiology/radiology_orders`, {\n      'patient_details': patientData,\n      'physician_details': provider,\n      'radiology_orders': orders\n    }) \n  }\n\n  async getAccesionNumber() {\n    return (await Service.getJson(`sequences/next_accession_number`))['accession_number']\n  }\n\n  async obsObj(data: Array<any>) {\n    const lastAccessionNumber = await this.getAccesionNumber()\n    const observations = [] as Array<any>\n    for (const order of data) {\n      observations.push(\n        {\n          'concept_id': order.concept_id, \n          'value_text':  await ConceptService.getConceptName(order.child.concept_id),\n          child: [{\n            'concept_id': order.child.concept_id,\n            'accession_number': lastAccessionNumber,\n            'value_text': await ConceptService.getConceptName(order.child.value_coded)\n          }]\n        }\n      )\n    }\n    return observations\n  } \n\n  async printOrders(orders: any, patient: Patientservice) {\n    const printService = new PrintoutService()\n    const patientNationalId = patient.getNationalID()\n    const patientName = patient.getFullName()\n    const urls: string[] = [];\n    for(const order of orders) {\n      const fullXrayOrder = order.value_text +\": \"+ order.children[0].value_text\n      urls.push(`/radiology/barcode`\n        + `?accession_number=${order.children[0].accession_number}`\n        + `&patient_national_id=${patientNationalId}`\n        + `&patient_name=${patientName}`\n        + `&radio_order=${fullXrayOrder}`\n        + `&date_created=${HisDate.toStandardHisDisplayFormat(order.obs_datetime)}`\n      )\n    }\n\n    await printService.batchPrintLbls(urls, true)\n  }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}