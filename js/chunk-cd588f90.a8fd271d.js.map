{"version":3,"sources":["webpack:///./src/views/ProgramManagement.vue?75de","webpack:///./src/views/ProgramManagement.vue","webpack:///./src/views/ProgramManagement.vue?1500","webpack:///./src/utils/ActionSheetHelpers/VoidReason.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","key","hisFormKey","activeField","fieldComponent","skipSummary","fields","onOnIndex","$event","onOnFinish","onFinish","defineComponent","components","HisStandardForm","data","patient","patientProgram","activeProgram","programSelectionFieldContext","watch","field","this","params","patient_id","PatientProgramService","getProgramSelectionField","getProgramEnrollmentField","getProgramOutcomeDateFields","getProgramStateField","getTransferOutFacilityFields","getStateOutcomeDateFields","deep","immediate","methods","f","onEnrollProgram","onProgramState","Store","invalidate","programs","getPrograms","map","p","label","program","name","value","program_id","other","programStates","patient_states","s","startDate","HisDate","toStandardHisDisplayFormat","start_date","endDate","end_date","actions","getStateActions","hasPrograms","listData","ProgramService","getAllPrograms","disabled","find","workflows","getProgramWorkflows","getProgramId","isEmpty","states","program_workflow_state_id","color","action","async","pg","sIndex","onVoidState","patient_state_id","push","printTransferout","onUpdateState","toastWarning","updateState","transfer_out_state","transferOutEncounter","toastSuccess","e","toastDanger","programId","enrollProgram","state","stateIndex","popVoidReason","setStateId","voidState","reason","splice","patientProgramId","getPatientProgramId","voidProgram","fieldContext","programIndex","findIndex","setPatientProgramId","setProgramId","console","error","generateDateFields","id","helpText","condition","program_state","required","minDate","getProgramDate","maxDate","getSessionDate","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","computeValue","date","setStateDate","type","FieldType","TT_SELECT","validation","val","Validation","options","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","programWorkflows","unload","allPrograms","estimateDateFromAge","setProgramDate","btnVisibilityCondition","form","program_selection","TT_PROGRAM_SELECTION","onload","context","onValue","patient_program_id","toStandardHisFormat","date_enrolled","patientPrograms","hiddenFooterBtns","footerBtns","slot","visible","default","onClick","onVoidProgram","__exports__","callback","size","modal","optionsActionSheet","role","selection","_resolveDynamicComponent","formType","cancelDestinationPath","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","Object","formData","computedData","$emit","i","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-cd588f90.a8fd271d.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    key: _ctx.hisFormKey,\n    activeField: _ctx.fieldComponent,\n    skipSummary: true,\n    fields: _ctx.fields,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"activeField\", \"fields\", \"onOnFinish\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, toastSuccess, toastDanger } from \"@/utils/Alerts\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { EstimationFieldType, generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { ProgramService } from \"@/services/program_service\"\nimport { PatientProgramService } from \"@/services/patient_program_service\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { find, findIndex, isEmpty } from 'lodash'\nimport HisDate from \"@/utils/Date\"\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\"\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        hisFormKey: 0 as number,\n        patient: {} as any,\n        patientProgram: {} as any,\n        fields: [] as Array<Field>,\n        fieldComponent: '' as string,\n        activeField: '' as string,\n        activeProgram: {} as any,\n        programSelectionFieldContext: {} as any\n    }),\n    watch: {\n        fieldComponent(field: string){\n            if (field) {\n                this.activeField = field\n            }\n        },\n        activeField(field: string) {\n            if (field === 'program_selection') {\n                // Recent hisFormKey to re-render everything\n                this.hisFormKey += 1\n            }\n        },\n        '$route': {\n            async handler({params}: any) {\n                if (params && params.patient_id) {\n                    this.patient = params.patient_id\n                    this.patientProgram = new PatientProgramService(this.patient)\n                    this.fields = [\n                        this.getProgramSelectionField(),\n                        this.getProgramEnrollmentField(),\n                        ...this.getProgramOutcomeDateFields(),\n                        this.getProgramStateField(),\n                        this.getTransferOutFacilityFields(),\n                        ...this.getStateOutcomeDateFields()\n                    ]\n                }\n            },\n            deep: true,\n            immediate: true\n        }\n    },\n    methods: {\n        async onFinish(f: any) {\n            switch(this.activeField) {\n                case 'program_enrollment':\n                    await this.onEnrollProgram()\n                    break;\n                case 'program_state':\n                    await this.onProgramState(f)\n                    break;\n            }\n            Store.invalidate('PATIENT_PROGRAM')\n        },\n        async patientPrograms() {\n            const programs = await this.patientProgram.getPrograms()\n            return programs.map((p: any) => ({\n                label: p.program.name,\n                value: p.program.program_id,\n                other: {\n                    ...p,\n                    programStates: p.patient_states.map((s: any) =>{\n                        return {\n                            name: s.name,\n                            startDate: HisDate.toStandardHisDisplayFormat(s.start_date),\n                            endDate: s.end_date ? HisDate.toStandardHisDisplayFormat(s.end_date): 'N/A',\n                            actions: this.getStateActions(s)\n                        }\n                    }) \n                }\n            }))\n        },\n        async allPrograms() {\n            const hasPrograms = this.programSelectionFieldContext.listData\n            const programs = await ProgramService.getAllPrograms()\n            // Build programs while excluding already existing ones\n            return programs.map((p: any) => ({\n                label: p.name,\n                value: p.program_id,\n                disabled: find(hasPrograms, { value: p.program_id }),\n                other: { ...p }\n            }))\n        },\n        async programWorkflows() {\n            const workflows = await ProgramService.getProgramWorkflows(this.patientProgram.getProgramId())\n            if (!isEmpty(workflows)) {\n                return workflows[0].states.map((s: any) => ({\n                    label: s.name, \n                    value: s.program_workflow_state_id,\n                    other: { ...s }\n                }))\n            }\n        },\n        getStateActions(s: any) {\n            const actions = [\n                {\n                    name: 'Void',\n                    color: 'danger',\n                    action: async (pg: any, sIndex: number) => {\n                        await this.onVoidState(s.patient_state_id, pg, sIndex)\n                    } \n                }\n            ]\n            if (s.name === 'Patient transferred out') {\n                actions.push({\n                    name: 'Print',\n                    color: 'primary',\n                    action: async () => await this.patientProgram.printTransferout(s.start_date)\n                })\n            }\n            return actions\n        },\n        onUpdateState() {\n            if (this.patientProgram.getProgramId() === -1) {\n                return toastWarning('Please select a program')\n            }\n            this.fieldComponent = 'program_state'\n        },\n        async onProgramState(f: any) {\n            try {\n                await this.patientProgram.updateState()\n                this.fieldComponent = 'program_selection'\n                if (f.transfer_out_state) {\n                    await this.patientProgram.transferOutEncounter(f.transfer_out_state.other)\n                } \n                toastSuccess('State has been updated')\n            } catch(e) {\n                toastDanger(`${e}`)\n            }\n        },\n        async onEnrollProgram() {\n            const programId = this.patientProgram.getProgramId()\n            if (programId === -1) {\n                return toastWarning('Please select a program')\n            }\n            try {\n                this.activeProgram = await this.patientProgram.enrollProgram()\n                this.fieldComponent = 'program_state'\n                toastSuccess('Patient has been enrolled!')\n            }catch(e) {\n                this.activeProgram = {}\n                toastDanger(`${e}`)\n            }\n        },\n        async onVoidState(state: any, activeProgram: any, stateIndex: number) {\n            await popVoidReason(async (reason: string) => {\n                try {\n                    this.patientProgram.setStateId(state)\n                    await this.patientProgram.voidState(reason)\n                    this.patientProgram.setStateId(-1)\n                    activeProgram.other.programStates.splice(stateIndex, 1)\n                    toastSuccess('State has been voided')\n                }catch(e) {\n                  toastDanger(`${e}`)\n                }\n            })\n        },\n        async onVoidProgram() {\n            const patientProgramId = this.patientProgram.getPatientProgramId()\n            if (patientProgramId === -1) {\n                return toastWarning('Please select a program')\n            }\n            await popVoidReason(async (reason: string) => {\n                try {\n                    await this.patientProgram.voidProgram(reason)\n                    const fieldContext = this.programSelectionFieldContext\n                    const programIndex = findIndex(fieldContext.listData, { value: this.patientProgram.getProgramId() })\n                    fieldContext.listData.splice(programIndex, 1)\n                    fieldContext.activeProgram = {}\n                    this.patientProgram.setPatientProgramId(-1)\n                    this.patientProgram.setProgramId(-1)\n                    toastSuccess('Program removed')\n                } catch(e) {\n                    console.error(e)\n                    toastDanger(`${e}`)\n                }\n            })\n        },\n        getStateOutcomeDateFields(): Array<Field> {\n            return generateDateFields({\n                id: 'state_outcome_date',\n                helpText: 'State',\n                condition: (f: any) => f.program_state,\n                required: true,\n                minDate: () => this.patientProgram.getProgramDate(),\n                maxDate: () => ProgramService.getSessionDate(),\n                estimation: {\n                    allowUnknown: true,\n                    estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                },\n                computeValue: (date: string) => this.patientProgram.setStateDate(date)\n            }, this.patientProgram.getProgramDate() || ProgramService.getSessionDate())\n        },\n        getTransferOutFacilityFields(): Field {\n            return {\n                id: \"transfer_out_state\",\n                helpText: 'Please Select facility name',\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                condition: (f: any) => f.program_state.label === 'Patient transferred out',\n                options: (_: any, filter='') => getFacilities(filter),\n                config: {\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            }\n        },\n        getProgramStateField(): Field {\n            return {\n                id: \"program_state\",\n                helpText: \"State\",\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                options: () => this.programWorkflows(),\n                condition: () => this.activeField === 'program_state',\n                unload: (val: Option) => this.patientProgram.setStateId(val.value)\n            }\n        },\n        getProgramEnrollmentField(): Field {\n            return {\n                id: \"program_enrollment\",\n                helpText: \"Please select a programme\",\n                type: FieldType.TT_SELECT,\n                condition: () => this.activeField === 'program_enrollment',\n                unload: (val: Option) => this.patientProgram.setProgramId(val.value),\n                options: () => this.allPrograms(),\n                validation: (val: any) => Validation.required(val),\n                config: {\n                    showKeyboard: true\n                }\n            }\n        },\n        getProgramOutcomeDateFields(): Array<Field> {\n            return generateDateFields({\n                id: 'program_outcome_date',\n                helpText: 'Outcome',\n                required: true,\n                minDate: () => HisDate.estimateDateFromAge(100),\n                maxDate: () => ProgramService.getSessionDate(),\n                condition: () => this.activeField === 'program_enrollment',\n                estimation: {\n                    allowUnknown: true,\n                    estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                },\n                computeValue: (date: string) => this.patientProgram.setProgramDate(date)\n            }, ProgramService.getSessionDate())\n        },\n        getProgramSelectionField(): Field {\n            const btnVisibilityCondition = (form: any) => {\n                return !isEmpty(form.program_selection)\n            }\n            return {\n                id: 'program_selection',\n                helpText: 'Programs',\n                type: FieldType.TT_PROGRAM_SELECTION,\n                onload: (context: any) => {\n                    this.activeField = 'program_selection'\n                    this.programSelectionFieldContext = context\n                },\n                onValue: (val: Option) => {\n                    if (val) {\n                        this.activeProgram = val.other\n                        this.patientProgram.setProgramId(val.value)\n                        this.patientProgram.setPatientProgramId(val.other.patient_program_id)\n                        this.patientProgram.setProgramDate(\n                            HisDate.toStandardHisFormat(val.other.date_enrolled)\n                        )\n                    }\n                    return true\n                },\n                validation: (val: any) => Validation.required(val),\n                options: () => this.patientPrograms(),\n                config: {\n                    onVoidState: this.onVoidState,\n                    hiddenFooterBtns: [\n                        'Back',\n                        'Next',\n                        'Clear'\n                    ],\n                    footerBtns: [\n                        {\n                            name: 'Void Program',\n                            slot: 'end',\n                            color: 'danger',\n                            state: {\n                                visible: {\n                                    default: (_: any, form: any) => btnVisibilityCondition(form),\n                                    onValue: (_: any, form: any) => btnVisibilityCondition(form)\n                                }\n                            },\n                            onClick:  async () => {\n                                await this.onVoidProgram()\n                            }\n                        },\n                        {\n                            name: 'Update state',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: (_: any, form: any) => btnVisibilityCondition(form),\n                                    onValue: (_: any, form: any) => btnVisibilityCondition(form)\n                                }\n                            },\n                            onClick: async () => {\n                                await this.onUpdateState()\n                            }\n                        },\n                        {\n                            name: 'Enroll',\n                            color: 'success',\n                            slot: 'end',\n                            onClick: () => {\n                                this.fieldComponent = 'program_enrollment'\n                            }\n                        }\n                    ] \n                }\n            }\n        }\n    }\n})\n","import { render } from \"./ProgramManagement.vue?vue&type=template&id=e0f23fb6&ts=true\"\nimport script from \"./ProgramManagement.vue?vue&type=script&lang=ts\"\nexport * from \"./ProgramManagement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { optionsActionSheet } from '@/utils/ActionSheets'\n\nexport default async function popVoidReason(callback: Function, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}