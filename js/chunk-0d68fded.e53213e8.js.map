{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/Obsteric.vue?14da","webpack:///./src/apps/ANC/Services/anc_obsteric_service.ts","webpack:///./src/apps/ANC/Views/Encounters/Obsteric.vue","webpack:///./src/apps/ANC/Views/Encounters/Obsteric.vue?c0bb","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","AncObstericService","patientID","providerID","para","gravida","nextGravida","this","getFirstValueNumber","AppEncounterService","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","initData","getFields","immediate","methods","computedData","resolveObs","obs","createEncounter","saveObservationList","nextTask","id","helpText","type","FieldType","TT_NUMBER","defaultValue","beforeNext","v","parseInt","value","alertConfirmation","computedValue","buildValueNumber","validation","validateSeries","Validation","required","rangeOf","condition","f","TT_ANC_PREGNANCY_INPUT_CONFIG","config","hiddenFooterBtns","pregnancyCount","TT_ANC_PREGNANCY_DETAILS_INPUT","abortionCount","known_pregnancies","some","p","isChecked","inArray","i","label","filter","d","other","map","options","knownAbortions","num","push","getNumberOrdinal","field","patient","getBirthdate","split","minY","getDate","maxY","TT_SELECT","buildValueText","mapStrToOptions","buildValueCoded","successfulPregnancyData","rowTitles","onValueUpdate","rowItems","forEach","disabled","TT_TEXT","match","includes","customKeyboard","onUnknownEstimateField","mapOptions","noChars","yesNoOptions","TT_AGE_INPUT","TT_MULTI_SELECT_GRID","hasMissingValues","Boolean","onClick","option","listData","l","visible","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","facts","route","params","patient_id","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","username","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","isEmpty","person","names","latestName","given_name","family_name","toOption","items","path","toYesNoOption","values","yesNoUnknownOptions","tag","Object","reduce","accum","cur","Array","isArray","concat","Promise","all","arr","expression","length","e","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","String","formData","$emit","isCondition","ignored","undefined","prop","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info"],"mappings":"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","file":"js/chunk-0d68fded.e53213e8.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class AncObstericService extends AppEncounterService {\n    para: number;\n    gravida: number;\n    nextGravida: number;\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 82, providerID)\n        this.para = 0\n        this.gravida = 0\n        this.nextGravida = 0\n    }\n\n    async initData() {\n        this.para = (await this.getFirstValueNumber('Parity')) || 0\n        this.gravida = (await this.getFirstValueNumber('Gravida')) || 0\n        this.nextGravida = this.gravida > 0 ? this.gravida + 1 : 0\n    }\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncObstericService } from \"@/apps/ANC/Services/anc_obsteric_service\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { ObsValue } from '@/services/observation_service'\nimport { alertConfirmation } from '@/utils/Alerts'\nimport { getNumberOrdinal } from \"@/utils/Strs\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n            this.service = new AncObstericService(this.patientID, this.providerID)\n\t\t\tawait this.service.initData()\n            this.fields = this.getFields()\n        } \n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData)\n      await this.service.createEncounter()\n      await this.service.saveObservationList(obs as ObsValue[])\n      this.nextTask()\n    },\n    getFields(): Field[] {\n        return [\n            {\n                id: 'gravida',\n                helpText: 'Gravida',\n                type: FieldType.TT_NUMBER,\n\t\t\t\tdefaultValue: () => this.service.nextGravida > 0 ? this.service.nextGravida : null,\n                beforeNext: async (v: Option) => {\n                    if (parseInt(`${v.value}`) > 9) {\n                        if (!(await alertConfirmation(\n\t\t\t\t\t\t\t'The value is greater than maximum 9. Are you sure about this value?'\n\t\t\t\t\t\t\t))) {\n                            return false\n                        }\n                    }\n                    return true\n                },\n                computedValue: (v: Option) => this.service.buildValueNumber('Gravida', v.value),\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, this.service.nextGravida || 1, 19)\n                ])\n            },\n            {\n                id: 'para',\n                helpText: 'Para',\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.gravida.value > 1,\n                computedValue: (v: Option) => this.service.buildValueNumber('Parity', v.value), \n                validation: (v: Option, f: any) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, this.service.para, f.gravida.value - 1)\n                ])\n            },\n            {\n                id: 'known_pregnancies',\n                helpText: 'Pregnancies with available information',\n                type: FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n                condition: (f: any) => f.gravida.value > 1 && f.para.value > 0,\n                config: {\n\t\t\t\t\thiddenFooterBtns: ['Clear'],\n\t\t\t\t\tpregnancyCount: (f: any) => f.para.value\n                }\n            },\n            {\n\t\t\t\tid: 'pregnancy_details',\n\t\t\t\thelpText: 'Pregnancy details',\n\t\t\t\ttype: FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n\t\t\t\tcondition: (f: any) => {\n\t\t\t\t\tconst abortionCount = (parseInt(`${f.gravida.value}`) - parseInt(`${f.para.value}`)) - 1\n\t\t\t\t\treturn f.gravida.value > 1 && (abortionCount >= 1 || f.known_pregnancies.some(\n\t\t\t\t\t\t(p: Option) => p.isChecked\n\t\t\t\t\t))\n\t\t\t\t},\n\t\t\t\tvalidation: (v: Option[]) => this.validateSeries([\n\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t() => this.inArray(v, (i: Option) => i.label === '_INCOMPLETE_RECORD_ERROR_')\n\t\t\t\t\t\t? ['Pregnancy details incomplete!!']\n\t\t\t\t\t\t: null\n\t\t\t\t]),\n\t\t\t\tconfig: {\n\t\t\t\t\thiddenFooterBtns: ['Clear']\n\t\t\t\t},\n\t\t\t\tcomputedValue: (v: Option[]) => v.filter(d => d?.other?.obs || false).map((d: Option) => d.other.obs),\n\t\t\t\toptions: (f: any) => {\n\t\t\t\t\tconst abortionCount = (parseInt(`${f.gravida.value}`) - parseInt(`${f.para.value}`)) - 1\n\t\t\t\t\tconst knownAbortions: Option[] = []\n\t\t\t\t\tfor(let i=0; i < abortionCount; ++i) {\n\t\t\t\t\t\tconst num = i + 1\n\t\t\t\t\t\tknownAbortions.push({\n\t\t\t\t\t\t\tlabel: `<span style=\"color:red;\">${num}<sup>${getNumberOrdinal(num)}</sup> Abortion</span>`,\n\t\t\t\t\t\t\tvalue: -1,\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Year of abortion',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'year',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Year of abortion',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_NUMBER,\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueNumber('Year of abortion', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst [minY] = this.patient.getBirthdate().split('-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst [maxY] = this.service.getDate().split('-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Validation.rangeOf(v, minY, maxY)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Place of abortion',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'place_of_abortion',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Place of abortion',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// concept taken as is from old anc system\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Place of birth', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Health facility\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"In transit\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"TBA\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Home\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Other\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Type of abortion',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'type_of_abortion',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Type of abortion',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueCoded('Type of Abortion', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Complete abortion\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Incomplete abortion\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Procedure done',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'procedure_done',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Procedure done',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Procedure done', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Manual Vacuum Aspiration (MVA)\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Evacuation\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"None\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Gestation (weeks)',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'gestation_weeks',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Gestation (weeks)',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_NUMBER,\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueNumber('Gestation', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.rangeOf(v, 0, 28)\n\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tconst successfulPregnancyData = (f.known_pregnancies || []).filter((p: Option) => p.isChecked).map((p: Option) => {\n\t\t\t\t\t\tconst data: any = []\n\t\t\t\t\t\tconst rowTitles = []\n\t\t\t\t\t\tfor(let i=0; i < p.value; ++i) {\n\t\t\t\t\t\t\trowTitles.push(`${i+1}<sup>${getNumberOrdinal(i+1)}</sup> born in ${p.label} pregnancy`)\n\t\t\t\t\t\t\tdata.push([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Year of birth',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'year',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Year of birth',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_NUMBER,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueNumber('Year of Birth', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst [minY] = this.patient.getBirthdate().split('-')\n\t\t\t\t\t\t\t\t\t\t\t\tconst [maxY] = this.service.getDate().split('-')\n\t\t\t\t\t\t\t\t\t\t\t\treturn Validation.rangeOf(v, minY, maxY) \n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Place of birth',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'place_of_birth',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Place of birth',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Place of birth', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => Validation.required(v), \n\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\"Health facility\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"In transit\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"TBA\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Home\"\n\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Gestation (weeks)',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'gestation_weeks',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Gestation (weeks)',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_NUMBER,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueNumber('Gestation', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.rangeOf(v, 24, 42)\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Method of delivery',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'method_of_delivery',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Method of delivery',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Method of delivery', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\"Spontaneous Vertex\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Caesarean Section\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Vacuum extraction delivery\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Breech\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Forceps\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Others\"\n\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Condition at birth',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'condition_at_birth',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Condition at birth',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Condition at Birth', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tonValueUpdate: (v: Option, rowItems: any) => {\n\t\t\t\t\t\t\t\t\t\t\trowItems.forEach((i: any) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (i.label === 'Alive now') {\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.required = v.value === 'Alive'\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.disabled = v.value != 'Alive'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\"Alive\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Macerated Still Birth (MSB)\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Fresh Still Birth (FSB)\"\n\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Birth weight',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'birth_weight',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Birth weight',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_TEXT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Birth weight', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (v.value != 'Unknown' && !(`${v.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/))) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn [`Invalid weight ${v.value}. Don't forget decimal point`]\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t() => !['N/A', 'Unknown'].includes(`${v.value}`) \n\t\t\t\t\t\t\t\t\t\t\t\t? Validation.rangeOf(v, 1, 5) \n\t\t\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\tconfig: {\n\t\t\t\t\t\t\t\t\t\t\tcustomKeyboard: [\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t['1', '2', '3'],\n\t\t\t\t\t\t\t\t\t\t\t\t\t['4', '5', '6'],\n\t\t\t\t\t\t\t\t\t\t\t\t\t['7', '8', '9'],\n\t\t\t\t\t\t\t\t\t\t\t\t\t['', '0', '.']\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t['Unknown', 'Delete']\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\tonUnknownEstimateField: () => { \n\t\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: 'birth_weight_estimate',\n\t\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Birth weight estimate',\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.mapOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Normal',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Big baby',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Small baby'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tnoChars: false\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Alive now',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\tdisabled: true,\n\t\t\t\t\t\t\t\t\trequired: false,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'alive_now',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Alive now',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueCoded('Alive', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tonValueUpdate: (v: Option, rowItems: any) => {\n\t\t\t\t\t\t\t\t\t\t\trowItems.forEach((i: any) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (i.label === 'Age at death') {\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.required = v.value === 'No'\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.disabled = v.value === 'Yes'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.yesNoOptions()\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Age at death',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\tdisabled: true,\n\t\t\t\t\t\t\t\t\trequired: false,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'age_at_death',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Age at death',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_AGE_INPUT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Age at Death', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp.label = `${p.label} delivery`\n\t\t\t\t\t\tp.other = { data, rowTitles }\n\t\t\t\t\t\treturn p\n\t\t\t\t\t})\n\t\t\t\t\treturn [...successfulPregnancyData, ...knownAbortions] as Option[]\n\t\t\t\t}\n            },\n\t\t\t{\n\t\t\t\tid: 'previous_complications',\n\t\t\t\thelpText: 'Previous complications',\n\t\t\t\ttype: FieldType.TT_MULTI_SELECT_GRID,\n\t\t\t\tcondition: (f: any) => f.gravida.value > 1,\n\t\t\t\tvalidation: (v: Option[]) => this.validateSeries([\n\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t() => {\n\t\t\t\t\t\tconst hasMissingValues = v.map(v => v.value==='').some(Boolean)\n\t\t\t\t\t\treturn hasMissingValues \n\t\t\t\t\t\t\t? ['Please complete Complication selection!!'] \n\t\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t]),\n\t\t\t\tcomputedValue: (v: Option[]) => {\n\t\t\t\t\treturn v.filter(d => d.value != '')\n\t\t\t\t\t\t.map(d => this.service.buildValueCoded(d.label, d.value))\n\t\t\t\t},\n\t\t\t\tconfig: {\n\t\t\t\t\thiddenFooterBtns: ['Clear']\n\t\t\t\t},\n\t\t\t\toptions: () => {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t{ \n\t\t\t\t\t\t\tlabel: 'Episiotomy', \n\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\toptions: this.yesNoOptions()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ \n\t\t\t\t\t\t\tlabel: 'Hemorrhage', \n\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\toptions: this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t'No',\n\t\t\t\t\t\t\t\t\t'APH',\n\t\t\t\t\t\t\t\t\t'PPH'\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ \n\t\t\t\t\t\t\tlabel: 'Pre-eclampsia', \n\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\tonClick: (option: Option, listData: Option[]) => {\n\t\t\t\t\t\t\t\t\tlistData.forEach(l => {\n\t\t\t\t\t\t\t\t\t\tif (l.label === 'Eclampsia') {\n\t\t\t\t\t\t\t\t\t\t\tl.other.visible = option.value === 'Yes'\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toptions: this.yesNoOptions()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Eclampsia',\n\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\tvisible: false,\n\t\t\t\t\t\t\t\toptions: this.yesNoOptions()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n        ]\n    }\n  }\n})\n","import { render } from \"./Obsteric.vue?vue&type=template&id=20b9633a&ts=true\"\nimport script from \"./Obsteric.vue?vue&type=script&lang=ts\"\nexport * from \"./Obsteric.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}