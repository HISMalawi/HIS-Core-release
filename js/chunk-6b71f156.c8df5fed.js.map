{"version":3,"sources":["webpack:///./src/apps/ART/services/reports/art_report_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/apps/ART/views/reports/inconsistencies/DataCleaningVerification.vue?1c7b","webpack:///./src/apps/ART/views/reports/inconsistencies/DataCleaningVerification.vue","webpack:///./src/apps/ART/views/reports/inconsistencies/DataCleaningVerification.vue?84b3","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/services/reports/data_cleaning_report_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["ArtReportService","Service","constructor","super","this","endDate","startDate","quarter","date","getSessionDate","programID","getProgramID","getDateIntervalPeriod","HisDate","toStandardHisDisplayFormat","setStartDate","setEndDate","setQuarter","getReport","url","params","getJson","buildRequest","config","payload","year","daysInMonth","m","dayjs","startMonth","endMonth","qtr","start","end","qtrBounds","getQuarterBounds","getFullYear","Date","qtrName","name","maxQuarters","qtrs","currDate","currYear","curYr","getMonth","getDate","currentQtr","getQtrByDate","i","push","buildQtrObj","FlowState","dformat","d","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","facts","age","gender","isEnrolledInProgam","formLabel","ready","created","$route","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","isOnline","isOfflineMode","getOfflinePerson","person","birthdate","ProgramService","diff","saveObsOffline","encounterTypeID","formdata","obs","labOrders","status","observations","id","uploadStatus","meta","resolveObs","computedData","enc","AppEncounterService","createEncounter","saveObservationList","callback","test","error","Error","formData","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","toastDanger","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","path","loadingController","create","backdropDismiss","message","present","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","mapToOption","listOptions","item","resolvePerson","computedForm","attr","isPlainObject","getGivenNameField","helpText","FieldType","TT_TEXT","computedValue","val","validation","Validation","isName","form","PersonService","searchGivenName","getFamilyNameField","searchFamilyName","getGenderField","customOptions","TT_SELECT","getDobConfig","includeHelpText","summaryLabel","minDate","estimateDateFromAge","maxDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","isEstimate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","dynamicHelpText","f","home_region","match","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","onClick","c","field","toastWarning","filtered","ok","alertConfirmation","address","LocationService","createAddress","getHomeTaField","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","defaultComputedOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","getCurrentDistrictField","current_region","getCurrentTAfield","current_district","getCurrentVillageField","current_traditional_authority","getCellNumberField","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","getFacilityLocationField","_","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","birthdate_estimated","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","getNationalID","npid","show","getProgramName","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","mixins","EncounterMixinVue","IonPage","TT_FULL_DATE","PersonHelper","DataCleaningReportService","saveDataCleaningVerification","back","isCondition","ignored","undefined","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","CtIndicator","postJson","getCleaningToolReport","indicator","getEnrolledOnArtBeforeBirth","getIncompleteVisits","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-6b71f156.c8df5fed.js","sourcesContent":["import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\nimport dayjs from \"dayjs\";\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\nexport class ArtReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    quarter: string\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.quarter = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n    setQuarter(quarter: string) {\n        this.quarter = quarter\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': this.programID}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        if (this.quarter) {\n            payload['quarter'] = this.quarter\n        }\n        return { ...payload, ...config }\n    }\n\n    static getQuarterBounds(year: number) {\n        const daysInMonth = (m: string) => dayjs(`${year}-${m}-01`).daysInMonth()\n        const startMonth = (m: string) => `${year}-${m}-01 00:00`\n        const endMonth = (m: string) => `${year}-${m}-${daysInMonth(m)} 00:00`\n\n        return {\n            'Q1': {\n                qtr: 1,\n                start: startMonth('01'),\n                end: endMonth('03')\n            },\n            'Q2': {\n                qtr: 2,\n                start: startMonth('04'),\n                end: endMonth('06')\n            },\n            'Q3': {\n                qtr: 3,\n                start: startMonth('07'),\n                end: endMonth('09')\n            },\n            'Q4': {\n                qtr: 4,\n                start: startMonth('10'),\n                end: endMonth('12')\n            }\n        }\n    }\n\n    static getQtrByDate(date: Date) {\n        const qtrBounds: any = this.getQuarterBounds(date.getFullYear())\n        for(const qtr in qtrBounds) {\n            const { start, end } = qtrBounds[qtr]\n            if (date >= new Date(start) && date <= new Date(end)) {\n                return qtrBounds[qtr]\n            }\n        }\n        return null\n    }\n\n    static buildQtrObj(qtrName: string, year: number): QuarterInterface {\n        const qtrBounds: any = this.getQuarterBounds(year)\n        const { start, end } = qtrBounds[qtrName]\n        return {\n            start,\n            end,\n            name: `${qtrName} ${year}`,\n        }\n    }\n\n    static getReportQuarters(maxQuarters=5) {\n        const qtrs: QuarterInterface[] = [];\n        let currDate = new Date();\n        let currYear = currDate.getFullYear();\n        const curYr = currYear\n        \n        currDate = new Date(`${curYr}-${currDate.getMonth() + 1}-${currDate.getDate()} 00:00`);\n        const currentQtr = this.getQtrByDate(currDate);\n        let qtr = currentQtr.qtr;\n        let i = 0;\n\n        if (qtr === 4) qtrs.push(this.buildQtrObj('Q1', currYear + 1))\n\n        while (i < maxQuarters) {\n          // Add following quarter\n          if (i === 0 && qtr < 4) qtrs.push(this.buildQtrObj(`Q${qtr + 1}`, currYear))\n\n          qtrs.push(this.buildQtrObj(`Q${qtr}`, currYear))\n          qtr = qtr > 0 ? (qtr -= 1) : qtr;\n          currYear = qtr == 0 ? currYear - 1 : currYear;\n          qtr =  qtr == 0 ? ( qtr += 4) : qtr;\n          i++;\n        }\n        return qtrs;\n    }\n}\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const { getOfflinePerson } = Offline()\n            const person = getOfflinePerson(this.offlineID)\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        saveObsOffline(encounterTypeID: number, formdata: any, obs: any, labOrders=undefined as any, status='Pending') {\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: encounterTypeID,\n                meta: formdata,\n                labOrders\n            })\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            try {\n                const enc = new AppEncounterService(\n                    this.patientID,\n                    params.encounterTypeID, \n                    this.providerID\n                )\n                if ((await enc.createEncounter())) {\n                    if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                        status = 'Success'\n                    }\n                }\n                if (typeof params.callback === 'function') {\n                    await params.callback(enc)\n                }\n            } catch (e) {\n                if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                    status = 'NetworkError'\n                } else {\n                    status = 'Exception'\n                }\n                console.error(`${e}`)\n            }\n            if (status === 'Exception') {\n                throw new Error('Unable to proceed!')\n            }\n            this.saveObsOffline(\n                params.encounterTypeID, \n                params.formData,\n                obs,\n                params.labOrders,\n                status\n            )\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            dynamicHelpText: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Current Region of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'Current District of Residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'Current TA of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Current Village of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        skipSummary: true,\n        cancelDestinationPath: \"/\"\n      }, null, 8, [\"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport { DataCleaningReportService, DataCleaningVerificationData } from \"@/apps/ART/services/reports/data_cleaning_report_service\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { IonPage } from \"@ionic/vue\";\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { Option } from \"@/components/Forms/FieldInterface\";\nimport PersonHelper from \"@/utils/HisFormHelpers/PersonFieldHelper\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { IonPage },\n  created() {\n    this.fields = [\n        {\n            id: \"data_cleaning_datetime\",\n            helpText: \"Date data cleaning done\",\n            type: FieldType.TT_FULL_DATE,\n            computedValue: (v: Option) => v.value,\n            validation: (v: Option) => Validation.required(v)\n        },\n        (() => {\n            const field = PersonHelper.getGivenNameField()\n            field.helpText = \"Verifier's First name\"\n            field.proxyID = 'supervisors'\n            return field\n        })(),\n        (() => {\n            const field = PersonHelper.getFamilyNameField()\n            field.helpText = \"Verifier's Last name\"\n            field.proxyID = 'supervisors'\n            field.computedValue = (v: Option, f: any) => [`${f.given_name.value} ${v.value}`]\n            return field\n        })()\n    ]\n  },\n  methods: {\n    async onFinish(_: any, data: DataCleaningVerificationData) {\n        const ok = await new DataCleaningReportService().saveDataCleaningVerification(data)\n        if (ok) this.$router.back()\n    }\n  }\n})\n","import { render } from \"./DataCleaningVerification.vue?vue&type=template&id=4ea1f6f2&ts=true\"\nimport script from \"./DataCleaningVerification.vue?vue&type=script&lang=ts\"\nexport * from \"./DataCleaningVerification.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { ArtReportService } from \"./art_report_service\";\n\nexport enum CtIndicator {\n    DobMoreThanEnrolledDate = 'DOB MORE THAN DATE ENROLLED',\n    ClientsWithEncountersAfterDeath = 'CLIENTS WITH ENCOUNTERS AFTER DECLARED DEAD',\n    DobMoreThanDateEnrolled = 'DOB MORE THAN DATE ENROLLED',\n    DateEnrolledLessThanEarliestStartDate = 'DATE ENROLLED LESS THAN EARLIEST START DATE',\n    MalesWithFemaleObs = 'MALE CLIENTS WITH FEMALE OBS',\n    PrescriptionWithoutDispensation = 'PRESCRIPTION WITHOUT DISPENSATION',\n    MissingDemographics = 'MISSING DEMOGRAPHICS',\n    MissingStartReasons = 'MISSING START REASONS',\n    MultipleStartReasons = 'MULTIPLE START REASONS',\n    PreArtOrUnknownOutcomes ='PRE ART OR UNKNOWN OUTCOMES',\n}\n\nexport interface DataCleaningVerificationData {\n    'data_cleaning_datetime': string;\n    'supervisors': string[];\n}\n\nexport class DataCleaningReportService extends ArtReportService {\n    constructor() {\n        super()\n    }\n    \n    saveDataCleaningVerification(data: DataCleaningVerificationData) {\n        return ArtReportService.postJson('data_cleaning_confirmation', data)\n    }\n\n    getCleaningToolReport(indicator: CtIndicator) {\n        return this.getReport('art_data_cleaning_tools', { \n            'report_name' : indicator \n        })\n    }\n\n    getEnrolledOnArtBeforeBirth() {\n        return ArtReportService.getJson('enrolled_on_art_before_birth')\n    }\n\n    getIncompleteVisits() {\n        return this.getReport('incomplete_visits', {\n            'tool_name': 'INCOMPLETE VISITS'\n        })\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}