{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsContact.vue?be2a","webpack:///./src/apps/HTS/services/hts_contact_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsContact.vue","webpack:///./src/apps/HTS/views/encounters/HtsContact.vue?fe26","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","HtsContactService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","push","discussPartnerField","contactIndexPageField","immediate","methods","formData","computedData","saveFormEncounterAndProceed","encounterTypeID","buildDateObs","conceptName","date","isEstimate","obs","match","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","buildValueCoded","options","label","value","values","yesNoOptions","context","TT_TABLE_VIEWER","onload","c","condition","f","discuss_partner","validation","parseInt","async","contact_index_page","rows","other","contacts","formFields","contactRegistrationWorflowForm","modal","MultiStepPopupForm","length","rowID","given_name","val","family_name","relation_to_contact","birth_date","name","color","action","KeyboardInput","TT_SUMMARY","Object","keys","filter","map","d","valLabel","find","modalController","dismiss","alertConfirmation","splice","findIndex","r","child","resolveObs","onDidDismiss","columns","reduce","a","concat","config","footerBtns","slot","onClick","fdata","PersonField","getGivenNameField","getFamilyNameField","TT_SELECT","mapStrToOptions","dob","getDobConfig","ageThreshold","computeValue","age","HisDate","getAgeInYears","buildValueNumber","minDate","dayjs","facts","birthDate","add","format","maxDate","subtract","generateDateFields","gender","getGenderField","cell","getCellNumberField","contact_hiv_status","ipv_status","contact_consent","notification_means","TT_DATE_PICKER","defaultValue","toDate","infoItems","getCurrentRegionField","computedValue","getCurrentDistrictField","getCurrentTAfield","getCurrentVillageField","TT_NOTE","self_testkit_given","TT_TEXT","frs_given","contact_on_art","required","getDate","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","tag","__exports__","FlowState","dformat","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","isEnrolledInProgam","created","$route","params","patient_id","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","patientDashboardUrl","isOnline","isOfflineMode","getOfflinePerson","person","birthdate","ProgramService","getSessionDate","diff","saveObsOffline","formdata","labOrders","status","observations","uploadStatus","meta","enc","createEncounter","saveObservationList","callback","test","error","Error","skipNextTask","nextTask","runflowState","state","states","username","split","provider","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","toastDanger","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","b","usernameA","usernameB","p","names","latestName","toOption","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","accum","cur","Array","isArray","Promise","all","inArray","arr","expression","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","$emit","mapToOption","listOptions","item","resolvePerson","computedForm","attr","isPlainObject","Validation","isName","form","PersonService","searchGivenName","searchFamilyName","customOptions","includeHelpText","summaryLabel","estimateDateFromAge","allowUnknownMonthDay","AGE_ESTIMATE_FIELD","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","dynamicHelpText","home_region","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","field","toastWarning","filtered","ok","address","LocationService","createAddress","getHomeTaField","showKeyboard","isFilterDataViaApi","defaultOutput","defaultComputedOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","home_village","onClickComponentEvents","setValue","current_region","current_district","current_traditional_authority","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","getFacilityLocationField","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","birthdate_estimated","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","getNationalID","npid","show","Service","getProgramName","isCondition","ignored","undefined","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-ebc0ec76.63ee6056.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Contact tracing\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsContactService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 195, providerID)\n    }\n}\n","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport {\n  Field,\n  Option,\n} from \"@/components/Forms/FieldInterface\";\nimport { IonPage, modalController } from \"@ionic/vue\";\nimport { HtsContactService } from \"@/apps/HTS/services/hts_contact_service\";\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport {\n  EstimationFieldType,\n  generateDateFields,\n} from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport KeyboardInput, { MultiStepPopupForm } from \"@/utils/PopupKeyboard\";\nimport HisDate from \"@/utils/Date\";\nimport { alertConfirmation } from \"@/utils/Alerts\";\nimport { find } from \"lodash\";\nimport { toDate } from \"@/utils/Strs\";\nimport dayjs from 'dayjs';\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsContactService(this.patientID, this.providerID);\n          this.fields.push(this.discussPartnerField());\n          this.fields.push(this.contactIndexPageField());\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    onFinish(formData: any, computedData: any) {\n      this.saveFormEncounterAndProceed({\n        encounterTypeID: this.service.encounterTypeID,\n        formData,\n        computedData,\n      })\n    },\n    buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n      let obs = {};\n      if (date.match(/unknown/i)) {\n        obs = this.service.buildValueText(conceptName, \"Unknown\");\n      } else if (isEstimate) {\n        obs = this.service.buildValueDateEstimated(conceptName, date);\n      } else {\n        obs = this.service.buildValueDate(conceptName, date);\n      }\n      return obs;\n    },\n    discussPartnerField(): Field {\n      return {\n        id: \"discuss_partner\",\n        helpText: \"Discuss Partner\",\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            obs: this.service.buildValueCoded(\"Consent Confirmation\", v),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Does the client consent to discuss contact?\",\n              value: \"\",\n              values: this.yesNoOptions(),\n            },\n          ];\n        },\n      };\n    },\n    contactIndexPageField(): Field {\n      let context: any = null;\n      return {\n        id: \"contact_index_page\",\n        helpText: \"Registered contacts\",\n        type: FieldType.TT_TABLE_VIEWER,\n        onload: (c: any) => (context = c),\n        condition: (f: any) => f.discuss_partner === \"Yes\",\n        isRequired: () => true,\n        validation: (v: Option[]) => {\n          if (parseInt(`${v[0].value}`) <= 0) {\n            return [\"Contact list is empty!!. Please register some\"];\n          }\n          return null;\n        },\n        options: async (f: any) => {\n          let data: any = {};\n          if (f.contact_index_page != null) {\n            data = f.contact_index_page[0] || {};\n          }\n          const rows: Array<any> = [...(data?.other?.rows || [])];\n          const contacts: Record<string, any> = {\n            ...(data?.other?.contacts || {}),\n          };\n          const formFields = this.contactRegistrationWorflowForm();\n          const modal = await MultiStepPopupForm(formFields, {\n            formLabel: `Contact Registration #${rows.length + 1}`,\n            onFinish: async (_: any, computedData: any) => {\n              const rowID = rows.length + 1;\n              rows.push([\n                rowID,\n                `${computedData.given_name.val} ${computedData.family_name.val}`,\n                computedData.relation_to_contact.val,\n                computedData.birth_date.val + \" years\",\n                {\n                  name: \"View\",\n                  type: \"button\",\n                  color: \"primary\",\n                  action: async () => {\n                    KeyboardInput(\n                      {\n                        id: \"summary_view\",\n                        helpText: \"More details\",\n                        type: FieldType.TT_SUMMARY,\n                        options: () => {\n                          return Object.keys(computedData)\n                            .filter((v: any) => computedData[v].val)\n                            .map((d: any) => {\n                              return {\n                                value: computedData[d].val,\n                                label:\n                                  computedData[d].valLabel ||\n                                  find(formFields, { id: d })?.helpText,\n                              };\n                            }) as Option[];\n                        },\n                      },\n                      () => modalController.dismiss()\n                    );\n                  },\n                },\n                {\n                  name: \"Remove\",\n                  type: \"button\",\n                  color: \"danger\",\n                  action: async () => {\n                    if (\n                      await alertConfirmation(\n                        \" Are you sure you want to remove contact?\"\n                      )\n                    ) {\n                      delete context.data[0].other.contacts[rowID];\n                      context.data[0].label = `${\n                        parseInt(`${context.data[0].label}`) - 1\n                      }`;\n                      context.data[0].value = parseInt(context.data[0].label);\n                      context.data[0].other.rows.splice(\n                        context.data[0].other.rows.findIndex(\n                          (r: any) => r[0] === rowID\n                        ),\n                        1\n                      );\n                    }\n                  },\n                },\n              ]);\n              contacts[rowID] = {\n                ...(await this.service.buildValueText(\n                  \"Patient contacts construct\",\n                  `${computedData.given_name.val} ${computedData.family_name.val}`\n                )),\n                child: await this.resolveObs(computedData),\n              };\n              modalController.dismiss();\n            },\n          });\n          await modal.onDidDismiss();\n          return [\n            {\n              label: `${rows.length}`,\n              value: `${rows.length}`,\n              other: {\n                columns: [\"ID\", \"Name\", \"Relation\", \"Age\"],\n                contacts,\n                rows,\n              },\n            },\n          ];\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: Object.values(v[0].other.contacts).reduce(\n              (a: any, c: any) => a.concat(c),\n              []\n            ),\n          };\n        },\n        config: {\n          footerBtns: [\n            {\n              name: \"Add New\",\n              slot: \"end\",\n              color: \"success\",\n              onClick: async () =>\n                (context.data = await context.options(context.fdata)),\n            },\n          ],\n        },\n      };\n    },\n    contactRegistrationWorflowForm(): Field[] {\n      return [\n        (() => {\n          const name = PersonField.getGivenNameField();\n          name.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\n                \"First name of contact\",\n                v.value\n              ),\n            };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getFamilyNameField();\n          name.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Last name of contact\", v.value),\n            };\n          };\n          return name;\n        })(),\n         {\n          id: \"relation_to_contact\",\n          helpText: \"Contact is a ___\",\n          type: FieldType.TT_SELECT,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\n                \"Relationships of contact\",\n                v.value as string\n              ),\n            };\n          },\n          isRequired: () => true,\n          options: () => {\n            return this.mapStrToOptions([\n              \"Sexual Partner\",\n              \"Biological Children\",\n              \"Biological Parents\",\n            ]);\n          },\n        },\n        ...(() => {\n          const dob = PersonField.getDobConfig(false);\n          const ageThreshold = 14;\n          dob.helpText = \"Contact Birth\";\n          dob.computeValue = (date: string) => {\n            const age = HisDate.getAgeInYears(date);\n            return {\n              valLabel: \"Age\",\n              val: age,\n              obs: this.service.buildValueNumber(\"Age of contact\", age),\n            };\n          };\n          dob.minDate = (f: any) => {\n            let minDate = \"\"\n            if (f.relation_to_contact.value === \"Biological Children\") {\n              minDate = dayjs(this.facts.birthDate).add(ageThreshold, \"year\").format(\"YYYY-MM-DD\");\n            }\n            return minDate\n          }\n          dob.maxDate = (f: any) => {\n            let maxDate = \"\"\n            if (f.relation_to_contact.value === \"Biological Parents\") {\n              maxDate = dayjs(this.facts.birthDate).subtract(ageThreshold, \"year\").format(\"YYYY-MM-DD\");\n            }\n            return maxDate\n          };\n          return generateDateFields(dob);\n        })(),\n        (() => {\n          const gender = PersonField.getGenderField([\n            { label: \"Male\", value: \"M\" },\n            { label: \"Female Non Pregnant\", value: \"FNP\" },\n            { label: \"Female Pregnant\", value: \"FP\" },\n            { label: \"Female Breastfeeding\", value: \"FBf\" },\n          ]);\n          gender.helpText = 'Sex of contact'\n          gender.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Gender of contact\", v.value),\n            };\n          };\n          return gender;\n        })(),\n         (() => {\n          const cell: Field = PersonField.getCellNumberField();\n          cell.finalComputedValue = (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"Contact phone number\", v.value),\n            };\n          };\n          return cell;\n        })(),\n        {\n          id: \"contact_hiv_status\",\n          helpText: \"HIV Status of the contact\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\"Contact HIV tested\", v.value),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\"Positive\", \"Negative\", \"Unknown\"]);\n          },\n        },\n        {\n          id: \"last_time_hiv_tested\",\n          helpText: \"When was Contact's Last HIV Test\",\n          type: FieldType.TT_SELECT,\n          condition: (f: any) => f.contact_hiv_status.value && \n            f.contact_hiv_status.value != 'Unknown',\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => {\n            return {\n              obs: this.service.buildValueText(\n                \"Contact HIV test date\",\n                `${v.value} ago`\n              ),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\n              \"A year or more ago\",\n              \"Less than a year ago\",\n            ]);\n          },\n        },\n        {\n          id: \"ipv_status\",\n          helpText: \"IPV Status\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\"IPV Status\", v.value),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\"Risk\", \"No Risk\"]);\n          },\n        },\n        {\n          id: \"contact_consent\",\n          helpText: \"Consent to reach out to the contact\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => f.ipv_status.value === \"No Risk\",\n          finalComputedValue: (val: any) => {\n            return {\n              val,\n              obs: this.service.buildValueCoded(\n                \"Consent to contact the contact\",\n                val\n              ),\n            };\n          },\n          options: () => {\n            return [\n              {\n                label: \"Does the client consent to reach out to the contact?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"notification_means\",\n          helpText: \"Recommended mode of Notification\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          condition: (f: any) => f.contact_consent === \"Yes\",\n          options: () => this.mapStrToOptions([\"Active\", \"Passive\"]),\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\"Notification Means\", v.value),\n            };\n          },\n        },\n        {\n          id: \"referral_type\",\n          helpText: \"Referral Type\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          finalComputedValue: (v: Option) => {\n            return {\n              val: v.value,\n              obs: this.service.buildValueCoded(\"Referral type\", v.value),\n            };\n          },\n          options: () => {\n            return this.mapStrToOptions([\n              \"Provider referral\",\n              \"Contact referral\",\n              \"Dual referral\",\n            ]);\n          },\n        },\n        {\n          id: \"set_appointment\",\n          helpText: \"Appointment Date (Within 2 weeks)\",\n          type: FieldType.TT_DATE_PICKER,\n          isRequired: () => true,\n          defaultValue: () => this.service.date,\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          finalComputedValue: (val: any) => {\n            return {\n              val: toDate(val.value),\n              obs: this.service.buildValueDate(\n                \"Contact appointment date\",\n                val.value\n              ),\n            };\n          },\n          config: {\n            minDate: () => this.service.date,\n            maxDate: () => dayjs(this.service.date).add(15, \"day\").toDate(),\n            infoItems: (date: string) => {\n              return [\n                {\n                  label: \"User set appointment\",\n                  value: toDate(date),\n                },\n              ];\n            },\n          },\n        },\n        {\n          id: \"testing_location\",\n          helpText: \"Testing Location\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueText(\n              \"Contact Appointment location\",\n              v.value\n            ),\n          }),\n          options: () => {\n            return this.mapStrToOptions([\n              \"Facility\",\n              \"Home/Other Facility\"\n            ]);\n          },\n          condition: (f: any) => f.notification_means.value === \"Active\",\n        },\n        {\n          ...PersonField.getCurrentRegionField(),\n          helpText: \"Contact's Current Region of Residence\",\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\"Contact current region\", v.label),\n          }),\n        },\n        {\n          ...PersonField.getCurrentDistrictField(),\n          helpText: \"Contact's Current District of Residence\",\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\n              \"Contact current district\",\n              v.label\n            ),\n          }),\n        },\n        {\n          ...PersonField.getCurrentTAfield(),\n          helpText: \"Contact's Current TA of Residence\",\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\"Contact current TA\", v.label),\n          }),\n        },\n        {\n          ...PersonField.getCurrentVillageField(),\n          helpText: \"Contact's Current Village of Residence\",\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          computedValue: (v: Option) => ({\n            val: v.label,\n            obs: this.service.buildValueText(\n              \"Contact current village\",\n              v.value\n            ),\n          }),\n        },\n        {\n          id: \"contact_address\",\n          helpText: \"Physical address\",\n          type: FieldType.TT_NOTE,\n          isRequired: () => true,\n          condition: (f: any) => f.notification_means.value === \"Active\",\n          finalComputedValue: (v: Option) => ({\n            val: v.value,\n            obs: this.service.buildValueText(\n              \"Contact physical address\",\n              v.value\n            ),\n          }),\n        },\n        {\n          id: \"self_testkit_given\",\n          helpText: \"Contact Self Test Kit Given\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => {\n            return (\n              f.contact_consent === \"No\" ||\n              f.notification_means.value === \"Passive\"\n            );\n          },\n          finalComputedValue: (v: any) => ({\n            obs: this.service.buildValueCoded(\"Self-Test kit given\", v),\n          }),\n          options: () => {\n            return [\n              {\n                label:\n                  \"Was a self test kit given to the Index for their contact?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"reason_for_not_giving_self_testkit\",\n          helpText: \"Reason for not providing a self test (Optional)\",\n          type: FieldType.TT_NOTE,\n          condition: (f: any) => f.self_testkit_given === \"No\",\n          finalComputedValue: (v: Option) => {\n            if (!v) return;\n            return {\n              val: v.value,\n              obs: this.service.buildValueText(\n                \"Reason for not giving self-test kit\",\n                v.value\n              ),\n            };\n          },\n        },\n        {\n          id: \"frs_given\",\n          helpText: \"FRS Given\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => false,\n          condition: (f: any) => f.notification_means.value === \"Passive\",\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueCoded(\"FRS given\", v),\n          }),\n          options: () => {\n            return [\n              {\n                label: \"Was FRS given to the Index client for their contact?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"reason_for_not_giving_frs\",\n          helpText: \"Reason for not providing FRS\",\n          type: FieldType.TT_TEXT,\n          isRequired: () => true,\n          condition: (f: any) => f.frs_given === \"No\",\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueText(\n              \"Reason for not giving FRS\",\n              v.value\n            ),\n          }),\n        },\n        {\n          id: \"contact_on_art\",\n          helpText: \"On ART\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => false,\n          condition: (f: any) =>\n            f.contact_hiv_status.value &&\n            f.contact_hiv_status.value === \"Positive\",\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueCoded(\n              \"Contact ever registered at ART clinic\",\n              v\n            ),\n          }),\n          options: () => {\n            return [\n              {\n                label: \"Is the Contact on ART?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        },\n        {\n          id: \"index_contact\",\n          helpText: \"Contact Indexing\",\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"No\",\n          options: () => {\n            return [\n              {\n                label: \"Do you want to convert the contact to an index client?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueCoded(\"Index patient\", v),\n          }),\n        },\n        {\n          id: \"art_start_location\",\n          helpText: \"Contact ART start location?\",\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          finalComputedValue: (v: Option) => ({\n            obs: this.service.buildValueText(\n              \"Contact location of ART initiation\",\n              v.value\n            ),\n          }),\n          options: () => {\n            return this.mapStrToOptions([\n              \"Same Health Facility\",\n              \"Other Health Facility\"\n            ]);\n          },\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"Yes\",\n        },\n        ...generateDateFields(\n          {\n            id: \"date_started_art\",\n            helpText: \"Contact Art Start\",\n            required: true,\n            condition: (f: any) =>\n              f.contact_on_art && f.contact_on_art === \"Yes\",\n            minDate: () => this.facts.birthDate,\n            maxDate: () => this.service.getDate(),\n            estimation: {\n              allowUnknown: true,\n              estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD,\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                isEstimate,\n                obs: this.buildDateObs(\n                  \"Contact Date ART started\",\n                  date,\n                  isEstimate\n                ),\n              };\n            },\n          },\n          this.service.getDate()\n        ),\n        {\n          id: \"contact_art_number\",\n          helpText: \"Contact ART number\",\n          type: FieldType.TT_TEXT,\n          isRequired: () => true,\n          condition: (f: any) => f.contact_on_art && f.contact_on_art === \"Yes\",\n          computedValue: (d: Option) => ({\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Contact ART number at previous location\",\n              d.value\n            ),\n          }),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./HtsContact.vue?vue&type=template&id=e552cdb4&ts=true\"\nimport script from \"./HtsContact.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsContact.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const { getOfflinePerson } = Offline()\n            const person = getOfflinePerson(this.offlineID)\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        saveObsOffline(encounterTypeID: number, formdata: any, obs: any, labOrders=undefined as any, status='Pending') {\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: encounterTypeID,\n                meta: formdata,\n                labOrders\n            })\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            try {\n                const enc = new AppEncounterService(\n                    this.patientID,\n                    params.encounterTypeID, \n                    this.providerID\n                )\n                if ((await enc.createEncounter())) {\n                    if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                        status = 'Success'\n                    }\n                }\n                if (typeof params.callback === 'function') {\n                    await params.callback(enc)\n                }\n            } catch (e) {\n                if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                    status = 'NetworkError'\n                } else {\n                    status = 'Exception'\n                }\n                console.error(`${e}`)\n            }\n            if (status === 'Exception') {\n                throw new Error('Unable to proceed!')\n            }\n            this.saveObsOffline(\n                params.encounterTypeID, \n                params.formData,\n                obs,\n                params.labOrders,\n                status\n            )\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            dynamicHelpText: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Current Region of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'Current District of Residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'Current TA of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Current Village of Residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}