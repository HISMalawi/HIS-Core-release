(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-74d31e01"],{7365:function(t,e,a){"use strict";a("13d5");var i,n=a("7a23"),s=a("ad60"),o=a("2ef0"),r=a("0fa1"),c=a("7f35"),l=a("9283");(function(t){t["SET_PROVIDER"]="SET_PROVIDER",t["CHANGE_SESSION_DATE"]="change_session_date",t["GO_TO_PATIENT_DASHBOARD"]="go_to_patient_dashboard",t["CHANGE_PATIENT_OUTCOME"]="change_outcome",t["CONTINUE"]="continue",t["EXIT"]="exit"})(i||(i={}));const d=t=>l["b"].toStandardHisDisplayFormat(t),u={"Warn if attempting to create new encounters for a deceased patient":{priority:1,actions:{alert:async({outcomeStartDate:t})=>{const e=await Object(c["a"])("Data Integrity Issue Found","Patient died on "+d(t),"Proceeding with this outcome might affect accuracy of some reports",[{name:"Cancel",slot:"end",color:"primary"},{name:"Change outcome",slot:"end",color:"primary"},{name:"Continue Anyway",slot:"end",color:"danger"}]);return"Cancel"===e?i.GO_TO_PATIENT_DASHBOARD:"Change outcome"===e?i.CHANGE_PATIENT_OUTCOME:i.CONTINUE}},conditions:{outcome(t){return"Patient died"===t},outcomeStartDate(t,{sessionDate:e}){return e>=t}}},"A patient's date of birth must not be less than Session Date":{priority:2,actions:{alert:async({birthDate:t,sessionDate:e})=>{const a=await Object(c["a"])("Data integrity issue found","",`Session date ${d(e)} is less than birth date of ${d(t)}`,[{name:"Cancel",slot:"end",color:"danger"},{name:"Change session date",slot:"end",color:"success"}]);return"Change session date"===a?i.CHANGE_SESSION_DATE:i.GO_TO_PATIENT_DASHBOARD}},conditions:{birthDate(t,{sessionDate:e}){return e<t}}},"Select Encounter provider when in back data entry":{priority:3,actions:{selection:async({providers:t,encounterName:e,sessionDate:a,apiDate:n})=>{const s=await Object(c["c"])("Please select a provider for "+e,`BDE: ${d(a)} | Current: ${d(n)}`,t,[{name:"Cancel",color:"danger",slot:"start",role:"default"},{name:"Confirm",slot:"end",role:"action"}]);return"Cancel"===s.action?{value:-1,flowState:i.GO_TO_PATIENT_DASHBOARD}:{value:s.selection,flowState:i.SET_PROVIDER}}},conditions:{isBdeMode(t){return t}}}};var p=a("c21d"),h=a("7920"),m=a("b5e4"),f=a("8e8b"),v=a("fe70"),b=Object(n["defineComponent"])({components:{HisStandardForm:h["a"]},data:()=>({patient:{},fields:[],patientID:"",providerID:-1,providers:[],facts:{sessionDate:"",apiDate:"",isEnrolledInProgam:!1,encounterName:"N/A",providers:[],isBdeMode:!1,birthDate:"",outcome:"",outcomeStartDate:""},formLabel:"",ready:!1}),watch:{$route:{handler(t){t.params.patient_id&&this.patientID!=t.params.patient_id&&(this.formLabel=(""+t.name).toUpperCase(),this.patientID=parseInt(t.params.patient_id),f["a"].get("ACTIVE_PATIENT",{patientID:this.patientID}).then(t=>{this.patient=t,this.setEncounterFacts().then(()=>{this.checkEncounterGuidelines().then(()=>{this.ready=!0})})}))},immediate:!0,deep:!0}},computed:{cancelDestination(){return this.patientDashboardUrl()}},methods:{runflowState(t,e=null){const a={};if(a[i.SET_PROVIDER]=t=>{const[e]=t.split(" "),a=Object(o["find"])(this.providers,{username:e});return a&&(this.providerID=a.person_id),i.CONTINUE},a[i.CHANGE_SESSION_DATE]=()=>(this.$router.push("/session/date?patient_dashboard_redirection_id="+this.patientID),i.EXIT),a[i.CHANGE_PATIENT_OUTCOME]=()=>(this.$router.push("/patient/programs/"+this.patientID),i.EXIT),a[i.GO_TO_PATIENT_DASHBOARD]=()=>(this.gotoPatientDashboard(),i.EXIT),t in a)return a[t](e)},async checkEncounterGuidelines(){const t=Object(p["a"])(this.facts,u);for(const o in t){var e,a;const r=t[o];if(null!==r&&void 0!==r&&null!==(e=r.actions)&&void 0!==e&&e.alert){var n;const t=this.runflowState(await(null===r||void 0===r||null===(n=r.actions)||void 0===n?void 0:n.alert(this.facts)));if(t===i.EXIT)return}if(null!==r&&void 0!==r&&null!==(a=r.actions)&&void 0!==a&&a.selection){var s;const t=await(null===r||void 0===r||null===(s=r.actions)||void 0===s?void 0:s.selection(this.facts));this.runflowState(t.flowState,t.value)}}},async setEncounterFacts(){try{const t=await f["a"].get("PATIENT_PROGRAM",{patientID:this.patientID});this.facts.isEnrolledInProgam=t.programID===s["a"].getProgramID(),this.facts.outcome=t.outcome,this.facts.outcomeStartDate=t.startDate}catch(t){console.error(t),Object(m["c"])(""+t)}this.facts.sessionDate=s["a"].getSessionDate(),this.facts.apiDate=s["a"].getCachedApiDate(),this.facts.isBdeMode=s["a"].isBDE(),this.facts.birthDate=this.patient.getBirthdate(),this.facts.encounterName=this.$route.name?this.$route.name.toString().toUpperCase():"N/A",s["a"].isBDE()&&(this.providers=await f["a"].get("PROVIDERS"),this.facts.providers=this.providers.sort((t,e)=>{const a=t.username.toUpperCase(),i=e.username.toUpperCase();return a<i?-1:a>i?1:0}).map(t=>{var e;let a=""+t.username;if(!Object(o["isEmpty"])(null===t||void 0===t||null===(e=t.person)||void 0===e?void 0:e.names)){var i;const[e]=(null===(i=t.person)||void 0===i?void 0:i.names)||[];a+=` (${e.given_name} ${e.family_name})`}return a}))},toOption(t,e={}){return{label:t,value:t,other:e}},mapStrToOptions(t){return t.map(t=>"string"===typeof t||"number"===typeof t?{label:t,value:t}:t)},patientDashboardUrl(){return"/patient/dashboard/"+this.patientID},gotoPatientDashboard(){return this.$router.push({path:this.patientDashboardUrl()})},async nextTask(){(await v["d"].create({backdropDismiss:!1,message:"Checking Next task.."})).present();try{await Object(r["b"])(this.patientID,this.$router,this.$route)}catch(t){console.error(t)}v["d"].getTop().then(t=>t&&v["d"].dismiss())},yesNoOptions(){return[{label:"Yes",value:"Yes"},{label:"No",value:"No"}]},toYesNoOption(t,e={}){return{label:t,value:"",other:{...e,values:this.yesNoOptions()}}},mapOptions(t){return t.map(t=>({label:t,value:t}))},toConditionalOptions(t){const e=[];for(const a of t)("boolean"!==typeof a[1]||a[1])&&e.push(this.toOption(a[0]));return e},yesNoUnknownOptions(){return[{label:"Yes",value:"Yes"},{label:"No",value:"No"},{label:"Unknown",value:"Unknown"}]},resolveObs(t,e=""){const a=Object.values(t).filter(t=>t&&(t.tag===e||""===e)).reduce((t,e)=>{const a=e.obs?e.obs:e;return Array.isArray(a)?t=t.concat(a):"function"===typeof a?t.push(a()):t.push(a),t},[]);return Promise.all(a)},inArray(t,e){try{return t.filter(t=>e(t)).length>0}catch(a){return!1}},validateSeries(t){try{for(const e in t){const a=t[e]();if(a)return a}}catch(e){return[e]}}}});const D=b;e["a"]=D},7920:function(t,e,a){"use strict";var i=a("7a23");function n(t,e,a,n,s,o){return Object(i["openBlock"])(),Object(i["createBlock"])(Object(i["resolveDynamicComponent"])(t.formType),{fields:t.fields,skipSummary:t.skipSummary,activeField:t.activeField,cancelDestinationPath:t.cancelDestinationPath,onOnFinish:t.onFinish,onFinish:t.onFinishAction,onOnIndex:t.onIndex},null,8,["fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onOnIndex"])}var s=a("9441"),o=Object(i["defineComponent"])({name:"HisStandardForm",components:{TouchScreenForm:s["a"]},emits:["onFinish","onIndex"],data:()=>({formType:"touch-screen-form"}),props:{onFinishAction:{type:Function},skipSummary:{type:Boolean,default:!1},activeField:{type:String},fields:{type:Object,required:!0},cancelDestinationPath:{type:String,required:!1}},methods:{onFinish(t,e){this.$emit("onFinish",t,e)},onIndex(t){this.$emit("onIndex",t)}}}),r=a("d959"),c=a.n(r);const l=c()(o,[["render",n]]);e["a"]=l},a16a6:function(t,e,a){"use strict";a.r(e);var i=a("7a23");function n(t,e,a,n,s,o){const r=Object(i["resolveComponent"])("his-standard-form");return Object(i["openBlock"])(),Object(i["createBlock"])(r,{cancelDestinationPath:t.cancelDestination,fields:t.fields,onFinishAction:t.onSubmit},null,8,["cancelDestinationPath","fields","onFinishAction"])}var s=a("9441"),o=a("7365"),r=a("cc6f"),c=a("8158");class l extends r["a"]{constructor(t,e){super(t,8,e)}static async getDiagnosis(t="",e=1,a=10){const i=c["a"].getConceptID("Qech outpatient diagnosis list");return r["a"].getJson("diagnosis",{id:i,name:t,page:e,page_size:a})}}class d extends r["a"]{constructor(t,e){super(t,105,e)}}var u=a("2706"),p=a("d95e"),h=a("2ef0"),m=a("9b7c"),f=a("b5e4"),v=Object(i["defineComponent"])({components:{HisStandardForm:s["a"]},mixins:[o["a"]],data:()=>({activeField:"",notesService:{},diagnosisService:{},malariaTestResult:"No"}),watch:{ready:{async handler(t){t&&(this.malariaTestResult=await m["a"].getLatestMalariaTestResult(this.patientID),this.notesService=new d(this.patientID,this.providerID),this.diagnosisService=new l(this.patientID,this.providerID),this.fields=this.getFields())},immediate:!0,deep:!0}},methods:{async onSubmit(t,e){await this.diagnosisService.createEncounter();const a=await this.resolveObs({...e},"diagnosis");await this.diagnosisService.saveObservationList(a);const i=await this.resolveObs({...e},"notes");Object(h["isEmpty"])(i)||(await this.notesService.createEncounter(),await this.notesService.saveObservationList(i)),this.nextTask()},mapListToOptions(t){return Object(h["isEmpty"])(t)?[]:t.map(t=>({label:t.name,value:t.name,other:t.concept_id,isChecked:!1})).sort((t,e)=>t.label<e.label?-1:t.label>e.label?1:0)},async checkMalariaResult(t){const e=t.find(t=>"Malaria"===t.label);return!e||("Positive"===this.malariaTestResult||await Object(f["a"])(`Patient has ${this.malariaTestResult} malaria test result. Do you want to continue?`))},getFields(){return[{id:"primary_diagnosis",helpText:"Select primary diagnosis",type:p["b"].TT_INFINITE_SCROLL_MULTIPLE_SELECT,validation:t=>u["a"].required(t),options:async(t,e="",a=1,i=10)=>this.mapListToOptions(await l.getDiagnosis(e,a,i)),beforeNext:async t=>await this.checkMalariaResult(t),computedValue:t=>({tag:"diagnosis",obs:t.map(({other:t})=>this.diagnosisService.buildValueCodedFromConceptId("Primary diagnosis",t))}),summaryMapValue:({value:t})=>({value:t,label:"Primary diagnosis"}),config:{isFilterDataViaApi:!0,showKeyboard:!0}},{id:"secondary_diagnosis",helpText:"Select secondary diagnosis",type:p["b"].TT_INFINITE_SCROLL_MULTIPLE_SELECT,options:async(t,e="",a=1,i=10)=>this.mapListToOptions(await l.getDiagnosis(e,a,i)),beforeNext:async t=>await this.checkMalariaResult(t),computedValue:t=>!Object(h["isEmpty"])(t)&&{tag:"diagnosis",obs:t.map(({other:t})=>this.diagnosisService.buildValueCodedFromConceptId("Secondary diagnosis",t))},summaryMapValue:({value:t})=>({value:t,label:"Secondary diagnosis"}),config:{showKeyboard:!0,isFilterDataViaApi:!0}},{id:"clinical_notes",helpText:"Clinical notes",type:p["b"].TT_TEXT,computedValue:t=>t&&{tag:"notes",obs:this.notesService.buildValueText("Clinical notes construct",t.value)}}]}}}),b=a("d959"),D=a.n(b);const g=D()(v,[["render",n]]);e["default"]=g},c21d:function(t,e,a){"use strict";function i(t,e){const a=[],i=[-1,"",null,void 0];for(const n in e){if(!(n in t))continue;const s=t[n];i.includes(s)?a.push(!1):a.push(e[n](s,t))}return a.every(Boolean)}function n(t){return t.sort((t,e)=>t.priority&&e.priority&&t.priority<e.priority?-1:1)}function s(t){return t.sort((t,e)=>t.weight&&e.weight&&t.weight>e.weight?-1:1)}function o(t,e,a="",o="",r="priority"){const c=[];for(const n in e){const s=e[n],r=[s.target&&a&&s.target!=a,s.targetEvent&&o&&s.targetEvent!=o];r.some(Boolean)||i(t,s.conditions)&&(s.title=n,s.description&&(s.description.text=s.description.info(t)),c.push(s))}return"priority"===r?n(c):s(c)}a.d(e,"a",(function(){return o}))}}]);
//# sourceMappingURL=chunk-74d31e01.23f6e531.js.map