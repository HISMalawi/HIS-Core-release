{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/OPD/views/encounters/Dispensing.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","skipSummary","cancelDestinationPath","cancelDestination","fields","DispensationService","AppEncounterService","constructor","patientID","providerID","drugHistory","currentDrugOrder","getDrugHistory","getCurrentOrder","buildDispensations","orderId","quantity","date","saveDispensations","dispensations","postJson","getProgramID","void","res","DrugOrderService","getDrugOrderHistory","getDrugOrders","Promise","all","calcCompletePack","drug","units","drugOrderBarcodes","barcodes","sort","a","b","tabs","length","i","parseInt","smallestAvailableTab","completePack","defineComponent","mixins","EncounterMixinVue","data","dispensation","watch","patient","this","getID","loadCurrentDrugOrder","loadDrugHistory","getFields","deep","methods","item","other","order_id","value","buildMedicationHistory","dateA","Date","order","start_date","dateB","map","d","medication","name","HisDate","toStandardHisDisplayFormat","amount","buildOrderOptions","label","drug_id","calculateCompletePack","getPackSizesRows","drugId","availableStock","packs","getDrugPackSizes","packSize","parseFloat","amount_needed","isDoneDispensing","orders","o","every","Boolean","option","isOk","totalTabs","toString","amountNeeded","percentageGiven","alertConfirmation","id","helpText","type","FieldType","TT_DRUG_DISPENSER","onValueUpdate","async","l","gotoPatientDashboard","onValue","isBarcodeScanned","voided","voidOrder","isValidDispensation","dispensed","toastWarning","config","medicationHistory","toolbarInfo","getFullName","getGender","getBirthdate","hiddenFooterBtns","options","__exports__","Service","super","getSessionDate","getJson","pageSize","drugID","params","patientId"],"mappings":"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","file":"js/chunk-28060998.c1d9022b.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields\n  }, null, 8, [\"cancelDestinationPath\", \"fields\"]))\n}","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, alertConfirmation } from \"@/utils/Alerts\"\nimport { DispensationService } from \"@/apps/OPD/services/dispensation_service\"\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport HisDate from \"@/utils/Date\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    dispensation: {} as any\n  }),\n  watch: {\n    patient: {\n      async handler(patient: any){\n        this.dispensation = new DispensationService(patient.getID(), this.providerID)\n        await this.dispensation.loadCurrentDrugOrder()\n        await this.dispensation.loadDrugHistory()\n        this.fields = this.getFields()\n      },\n      deep: true\n    }\n  },\n  methods: {\n    saveDispensations(item: Option) {\n      const dispensations = this.buildDispensations(item)\n      return this.dispensation.saveDispensations(dispensations)    \n    },\n    buildDispensations(item: Option) {\n      return this.dispensation.buildDispensations(\n        item.other.order_id, item.value\n      )\n    },\n    buildMedicationHistory() {\n      return this.dispensation.getDrugHistory()\n      .sort((a: any, b: any) => {\n        const dateA: any = new Date(a.order.start_date)\n        const dateB: any = new Date(b.order.start_date)\n        return dateB - dateA\n      })\n      .map((d: any) => ({\n        medication: d.drug.name,\n        date: HisDate.toStandardHisDisplayFormat(d.order.start_date),\n        amount: d.quantity\n      }))\n    },\n    buildOrderOptions() {\n      return this.dispensation.getCurrentOrder().map((d: any) => ({\n        label: d.drug.name,\n        value: d.quantity || 0,\n        other: {\n          'drug_id': d.drug.drug_id,\n          'order_id': d.order.order_id,\n          'amount_needed': this.calculateCompletePack(d),\n        }\n      }))\n    },\n    getPackSizesRows(drugId: number, availableStock: number) {\n      const packs = this.dispensation.getDrugPackSizes(drugId)\n      return packs.map((packSize: number) => {\n        const packs = availableStock > 0 ? (availableStock / packSize) : '-'\n        return [packSize, packs, 0, 0]\n      })\n    },\n    calculateCompletePack(order: any) {\n      const units = parseFloat(order.amount_needed) - (order.quantity || 0)\n      const completePack = this.dispensation.calcCompletePack(order, units)\n      return completePack < 0 ? 0 : completePack\n    },\n    isDoneDispensing(orders: Array<Option>) {\n      return orders.map(o => o.value != 0).every(Boolean)\n    },\n    async isValidDispensation(option: Option) {\n      let isOk = true\n      const totalTabs = parseInt(option.value.toString())\n      const amountNeeded = option.other['amount_needed']\n      const percentageGiven = (totalTabs / amountNeeded) * 100\n      if (percentageGiven > 110) {\n        isOk = await alertConfirmation('Are you sure you want to dispense over 110% of the prescribed pill count?')\n      }\n      if (percentageGiven < 100) {\n        isOk = await alertConfirmation('Are you sure you want to dispense less than 100% of the prescribe amount?')\n      }\n      return isOk\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: 'dispenses',\n          helpText: 'Dispensation',\n          type: FieldType.TT_DRUG_DISPENSER,\n          onValueUpdate: async(i: Option, l: Option[]) => {\n            if(i.value != -1 && this.isDoneDispensing(l)) {\n              return this.gotoPatientDashboard()\n            }\n            i.other['amount_needed'] = 0\n            await this.dispensation.loadCurrentDrugOrder()\n            return this.buildOrderOptions()\n          },\n          onValue: async (i: Option, isBarcodeScanned: boolean) => {\n            if (i.value  === -1) {\n              const voided = await this.dispensation.voidOrder(i.other.order_id)\n              return voided? true : false\n            }\n            if (!isBarcodeScanned) {\n              const isValidDispensation = await this.isValidDispensation(i)\n              if (!isValidDispensation) return false\n            }\n            const dispensed = await this.saveDispensations(i)\n            if (dispensed) return true\n            toastWarning('Unable to save dispensation')\n            return false\n          },\n          config: {\n            medicationHistory: this.buildMedicationHistory(),\n            toolbarInfo: [\n              { label: 'Name', value: this.patient.getFullName() },\n              { label: 'Gender', value: this.patient.getGender() },\n              { label: 'Date Of Birth', value: HisDate.toStandardHisDisplayFormat(\n                this.patient.getBirthdate()\n              )}\n            ],\n            hiddenFooterBtns: [ \n              'Clear',\n              'Finish'\n            ]\n          },\n          options: () => this.buildOrderOptions()\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Dispensing.vue?vue&type=template&id=1e367495&ts=true\"\nimport script from \"./Dispensing.vue?vue&type=script&lang=ts\"\nexport * from \"./Dispensing.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}