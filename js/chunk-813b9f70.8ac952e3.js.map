{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HTSDBsOrder.vue?4d6a","webpack:///./src/apps/HTS/services/hts_dbs_order.ts","webpack:///./src/apps/HTS/views/encounters/HTSDBsOrder.vue","webpack:///./src/apps/HTS/views/encounters/HTSDBsOrder.vue?ecc8","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","patientDashboardUrl","_","HtsDbsOrder","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","IonPage","HisStandardForm","setup","ref","hivGroup","service","htsClient","yesNoOptions","saveEncounter","StartHtsEncounter","onInitVisit","value","isDBSsampleCollected","dbsSpecimenID","formData","computedData","labOrders","undefined","dbs_sample_collection","buildDBSOrder","dbs_specimen_id","encounterName","encounterTypeID","accessionNumber","age","concept","getCachedConceptID","concept_id","specimenConcept","reason","helpText","id","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","obs","buildValueCoded","options","label","values","TT_BARCODE","requireNext","condition","f","test","buildValueText","config","hiddenFooterBtns","__exports__","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","name","TouchScreenForm","emits","data","props","Function","Boolean","String","Object","required","methods","this","$emit","i"],"mappings":"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","file":"js/chunk-813b9f70.8ac952e3.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"DBS Order\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.patientDashboardUrl()\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsDbsOrder extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 199, providerID)\n    }\n}\n","\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent, ref } from \"vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { HtsDbsOrder } from \"../../services/hts_dbs_order\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { StartHtsEncounter } from \"@/apps/HTS/composables/HtsFormEncounter\";\n\nexport default defineComponent({\n  components: { IonPage, HisStandardForm },\n  setup() {\n    const fields = ref<Field[]>([])\n    const hivGroup = ref('')\n    const service = new HtsDbsOrder(-1)\n    const {\n      htsClient,\n      yesNoOptions,\n      saveEncounter,\n      patientDashboardUrl\n    } = StartHtsEncounter({\n      onInitVisit: (htsClient) => {\n        fields.value = [\n          isDBSsampleCollected(htsClient),\n          dbsSpecimenID()\n        ]\n      }\n    })\n\n    function onFinish(formData: any, computedData: any) {\n      let labOrders: any = undefined;\n      if (formData.dbs_sample_collection === 'Yes') {\n        labOrders = buildDBSOrder(formData.dbs_specimen_id)\n      }\n\n      saveEncounter({\n        encounterName: \"DBS ORDER\",\n        encounterTypeID: service.encounterTypeID,\n        formData,\n        computedData,\n        labOrders\n      })\n    }\n\n    function buildDBSOrder(accessionNumber: string) {\n      const age = htsClient.age\n      let concept;\n      if (age < 1 || hivGroup.value == 'Inconclusive Re-test') {\n        concept = 844\n      } else {\n        concept = HtsDbsOrder.getCachedConceptID('HIV viral load')        \n      }\n      return [{\n        concept_id: concept,\n        specimenConcept: HtsDbsOrder.getCachedConceptID(\"DBS (Free drop to DBS card)\", true),\n        accessionNumber,\n        reason: 'Routine',\n      }]\n    }\n\n    function isDBSsampleCollected(htsClient: any): Field {\n      let helpText = \"DBS Sample\";\n      const age = htsClient.age\n      if(hivGroup.value == 'Inconclusive Re-test') helpText = \"DBS Sample for Incoclusive Re-test\";\n\n      if(age < 1) helpText = \"DBS Sample (EID)\";\n\n      if(age < 1) helpText = \"DBS Sample (EID)\";\n\n      return {\n        id: \"dbs_sample_collection\",\n        helpText: helpText,\n        type: FieldType.TT_YES_NO,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            obs: service.buildValueCoded(\"Is DBS Sample Collected\", v),\n          };\n        },\n        options: () => {\n          return [\n            {\n              label: \"Is DBS Sample Collected?\",\n              value: \"\",\n              values: yesNoOptions(),\n            },\n          ];\n        },\n      };\n    }\n    \n    function dbsSpecimenID(): Field {\n      return {\n        id: \"dbs_specimen_id\",\n        helpText: \"DBS Specimen ID\",\n        type: FieldType.TT_BARCODE,\n        requireNext: false,\n        condition: (f: any) => /yes/i.test(`${f.dbs_sample_collection}`),\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: service.buildValueText(\"DBS Specimen ID\", `${v}`),\n          };\n        },\n        config: {\n          hiddenFooterBtns: [\n            'Clear'\n          ]\n        },\n        isRequired: () => true\n      };\n    }\n\n    return {\n      patientDashboardUrl,\n      onFinish,\n      fields\n    }\n  }\n});\n","import { render } from \"./HTSDBsOrder.vue?vue&type=template&id=1875a075&ts=true\"\nimport script from \"./HTSDBsOrder.vue?vue&type=script&lang=ts\"\nexport * from \"./HTSDBsOrder.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}