{"version":3,"sources":["webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/composables/storage.ts","webpack:///./src/apps/HTS/views/encounters/HtsArtReferralOutcome.vue?7c64","webpack:///./src/apps/HTS/services/hts_art_referral_outcome_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsArtReferralOutcome.vue","webpack:///./src/apps/HTS/views/encounters/HtsArtReferralOutcome.vue?92be","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","this","$emit","i","__exports__","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","Promise","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","constructor","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","get","onerror","error","filters","openCursor","cursor","filteredData","value","continue","put","delete","filter","item","entries","every","isInteger","toLower","includes","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","formLabel","patientDashboardUrl","_","HtsArtReferralOutcomeService","AppEncounterService","patientID","providerID","super","IonPage","HisStandardForm","setup","ref","service","visitID","htsClient","yesNoOptions","saveEncounter","mapStrToOptions","StartHtsEncounter","onInitVisit","artStatusField","artReferralOutcomeField","artOutcomeDateFields","artSiteField","hasArvNumberField","arvNumberField","encounterName","encounterTypeID","available","optionData","linkDataSet","id","helpText","FieldType","TT_HIDDEN","init","async","hts","ProgramService","getProgramInformation","test","art_outcome","art","getProgramSummary","current_outcome","art_start_date","label","other","obs","buildValueCoded","buildValueDate","getLocationName","buildValueText","arv_number","e","console","summaryMapValue","v","condition","defaultValue","finalComputedValue","d","map","options","TT_SELECT","isRequired","f","on_art","outcome","getFacilities","config","footerBtns","slot","onClickComponentEvents","setValue","onClick","showKeyboard","isFilterDataViaApi","generateDateFields","minDate","birthDate","maxDate","date","computeValue","estimation","allowUnknown","TT_YES_NO","values","TT_TEXT","has_arv_number","offlineStorage","facilities","isEmpty","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-6b5ad90c.8dbdc44d.js","sourcesContent":["import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"ART Referral outcome\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.patientDashboardUrl()\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsArtReferralOutcomeService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 10, providerID)\n    }\n}\n","\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent, ref } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { IonPage } from \"@ionic/vue\"\nimport { HtsArtReferralOutcomeService } from \"@/apps/HTS/services/hts_art_referral_outcome_service\"\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper'\nimport { ProgramService } from '@/services/program_service'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { StartHtsEncounter } from \"@/apps/HTS/composables/HtsFormEncounter\";\n\nexport default defineComponent({\n    components: { IonPage, HisStandardForm },\n    setup() {\n      const fields = ref<Field[]>([])\n      const service = new HtsArtReferralOutcomeService(-1)\n      const {\n        visitID,\n        htsClient,\n        yesNoOptions,\n        saveEncounter,\n        mapStrToOptions,\n        patientDashboardUrl\n      } = StartHtsEncounter({\n        onInitVisit: () => {\n          fields.value = [\n            artStatusField(),\n            artReferralOutcomeField(),\n            ...artOutcomeDateFields(),\n            artSiteField(),\n            hasArvNumberField(),\n            arvNumberField()\n          ]\n        }\n      })\n  \n      function onFinish(_: any, computedData: any) {\n        saveEncounter({\n          encounterName: \"ART Referral Outcome\",\n          encounterTypeID: service.encounterTypeID,\n          computedData\n        })\n      }\n      \n      function artStatusField(): Field {\n        let available = false\n        let optionData: Option[] = []\n        let linkDataSet = false\n        return {\n          id: 'on_art',\n          helpText: 'ART Summary',\n          type: FieldType.TT_HIDDEN,\n          init: async () => {\n            try {\n              const hts = await ProgramService.getProgramInformation(visitID.value as any)\n              linkDataSet = hts && /Linked|art/i.test(hts.art_outcome)\n              const art: any = await ProgramService.getProgramSummary(visitID.value as any, 1)\n              available = [\n                !/unknown/.test(art.current_outcome),\n                !/n\\/a/i.test(art.art_start_date)\n              ].every(Boolean)\n              if (!available) return true\n              optionData = [\n                {\n                  label: 'Outcome',\n                  value: art.current_outcome,\n                  other: {\n                    obs: () => service.buildValueCoded('Antiretroviral status or outcome', 'Linked')\n                  }\n                },\n                {\n                  label: 'Outcome date',\n                  value: art.art_start_date,\n                  other: {\n                    obs: () => service.buildValueDate('Outcome date', art.art_start_date)\n                  }\n                },\n                {\n                  label: 'Facility',\n                  value: ProgramService.getLocationName(),\n                  other: {\n                    obs: () => service.buildValueText('ART clinic location', `${ProgramService.getLocationName()}`)\n                  }\n                },\n                {\n                  label: 'ARV Number',\n                  value: art.arv_number,\n                  other: {\n                    obs: () => service.buildValueText('Art number', art.arv_number)\n                  }\n                }\n              ]\n            } catch (e) {\n              console.error(e)\n            }\n            return true\n          },\n          summaryMapValue: (v: Option) => {\n            return v\n          },\n          condition: () => available,\n          defaultValue() {\n            return optionData\n          },\n          finalComputedValue: (v: Option[]) => {\n            if (!linkDataSet) {\n              return {\n                obs: v.filter(d => typeof d.other.obs === 'function').map(d => d.other.obs())\n              }\n            }\n          },\n          options: () => {\n            return optionData\n          }\n        }\n      }\n\n      function artReferralOutcomeField(): Field {\n        return {\n          id: \"outcome\",\n          helpText: 'ART Outcome Referral',\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          condition: (f: any) => f.on_art === null,\n          finalComputedValue: (v: Option) => {\n            return {\n              obs: service.buildValueCoded('Antiretroviral status or outcome', v.value as string) \n            }\n          },\n          options: () => {\n            return mapStrToOptions([\n                'Linked',\n                'Refused',\n                'Died',\n                'Already on ART',\n                'Unknown'\n            ])  \n          }\n        }\n      }\n      \n      function artSiteField(): Field {\n        return {\n          id: 'art_site',\n          helpText: 'Visited Clinic Name',\n          type: FieldType.TT_SELECT,\n          isRequired: () => true,\n          condition: (f: any) => /Linked|Already on art/i.test(f.outcome.value),\n          finalComputedValue: (v: Option) => ({\n            obs: service.buildValueText('ART clinic location', v.label)\n          }),\n          options: (_: any, filter='') => getFacilities(filter),\n          config: {\n            footerBtns: [\n              {\n                name: \"Here\",\n                slot: \"end\",\n                onClickComponentEvents: {\n                  setValue: () => {\n                    return HtsArtReferralOutcomeService.getLocationName()\n                  }\n                },\n                onClick: () => null\n              }\n            ],\n            showKeyboard: true,\n            isFilterDataViaApi: true\n          }\n        }\n      }\n\n      function artOutcomeDateFields(): Field[] {\n        return generateDateFields({\n          id: 'outcome_date',\n          helpText: 'Outcome',\n          required: true,\n          minDate: () => htsClient.birthDate,\n          maxDate: () => service.date,\n          condition: (f: any) => !/unknown/i.test(f.outcome.value),\n          computeValue: (date: string) => {\n            return {\n                date,\n                obs: service.buildValueDate('Outcome date', date)\n            }\n          },\n          estimation: {\n            allowUnknown: false\n          }\n        })\n      }\n\n      function hasArvNumberField(): any {\n        return {\n          id: 'has_arv_number',\n          helpText: 'ARV Number available',\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          condition: (f: any) => /linked|already on art/i.test(f.outcome.value),\n          options: () => [\n            {\n              label: \"ARV number available?\",\n              values: yesNoOptions()\n            }\n          ]\n        }\n      }\n\n      function arvNumberField(): Field {\n        return {\n          id: 'arv_number',\n          helpText: 'ARV Number',\n          type: FieldType.TT_TEXT,\n          isRequired: () => true,\n          condition: (f: any) => f.has_arv_number === 'Yes',\n          finalComputedValue: (v: Option) => {\n            return {\n                obs: service.buildValueText('Art number', `${v.value}`)\n            }\n          }\n        }\n      }\n  \n      return {\n        patientDashboardUrl,\n        onFinish,\n        fields\n      }\n    }\n})\n","import { render } from \"./HtsArtReferralOutcome.vue?vue&type=template&id=e825ce1e&ts=true\"\nimport script from \"./HtsArtReferralOutcome.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsArtReferralOutcome.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}