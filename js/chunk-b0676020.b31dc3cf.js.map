{"version":3,"sources":["webpack:///./src/apps/OPD/services/idsr_service.ts","webpack:///./src/apps/OPD/views/reports/ReportMixin.vue","webpack:///./src/apps/OPD/views/reports/ReportMixin.vue?c14d","webpack:///./src/apps/OPD/services/opd_report_service.ts"],"names":["IDSRReportService","regenerate","this","getReport","request","params","all","count","Object","entries","key","value","temp","condition","item","id","name","lessThanFiveYears","lessThanFiveYearsPatientIds","greaterThanEqualFiveYears","greaterThanEqualFiveYearsPatientIds","total","totalPatientIds","key1","value1","conditionDetails","length","push","IDSRConditionsObj","CSVString","epiWeeks","Service","getJson","epiWeeksObj","reverse","forEach","dates","split","startDate","endDate","txt","start","end","months","_payload","monthandyear","startandendmonths","trim","OpdReportService","defineComponent","data","fields","report","reportReady","period","customFileName","drillDownCache","methods","toDate","date","HisDate","toStandardHisDisplayFormat","confirmPatient","patient","$router","exportToCustomPDF","title","printW","open","content","document","getElementById","write","innerHTML","setTimeout","print","close","onDrillDown","conditionName","patientIds","isEmpty","columns","table","thTxt","rowParser","ids","Promise","map","Patientservice","findByID","personDetails","td","getGivenName","getFamilyName","getGender","getAge","getPhoneNumber","getCurrentDistrict","getCurrentVillage","getClosestLandmark","tdBtn","modalController","dismiss","path","drilldownData","drilldownAsyncRows","asyncRows","create","component","DrilldownTable","cssClass","componentProps","showFilters","rowsPerPage","paginated","showReportStamp","footerColor","onFinish","modal","present","rows","getDefaultDrillDownTable","tableRows","defaultRow","index","row","getArvNumber","tdDate","getBirthdate","toString","runTableDrill","drill","values","tdLink","getEpiweeksFields","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","getReportEpiWeeks","items","q","label","moment","format","other","getMonthlyFields","getReportMonths","getDateDurationFields","useQuarter","setCustomQuarterPeriod","maxQuarter","minDate","maxDate","getSessionDate","quarters","getReportQuarters","generateDateFields","f","quarter","estimation","allowUnknown","computeValue","unload","d","s","c","end_date","_","start_date","__exports__","LA_TYPES","one","two","three","four","NCD_TYPES","MENTAL_HEALTH_DIAGNOSIS","epiweek","programID","getProgramID","url","printService","PrintoutService","keys","v","i","printLbl","Url","parameterizeObjToString","buildRequest","config","payload","minDuration","year","getCurrentYear"],"mappings":"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","file":"js/chunk-b0676020.b31dc3cf.js","sourcesContent":["import { OpdReportService } from \"./opd_report_service\";\nimport moment from \"dayjs\"\nimport { Service } from \"@/services/service\";\n\nexport interface CohortValidationInterface {\n    param: number | string;\n    error: (indicator: number, param: number) => string;\n    check: (indicator: number, param: number) => boolean;\n}\n\nexport interface CommonInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\nexport class IDSRReportService extends OpdReportService {\n    regenerate: boolean;\n    constructor() {\n        super()\n        this.regenerate = false\n    }\n\n    setRegenerate(regenerate: boolean) {\n        this.regenerate = regenerate\n    }\n\n    requestIDSRWeekly() {\n        return this.getReport('generate_weekly_idsr_report', {\n            request: 'true',\n        })\n    }\n\n    requestIDSRMonthly() {\n        return this.getReport('generate_monthly_idsr_report', {\n            request: 'true',\n        })\n    }\n\n    renderResults(params: any) {\n        const all = []\n        let count = 1\n        for (const [key, value] of Object.entries(params)) {\n            const temp: any = []\n            const condition: any = value\n            const item = {\n                id: 0,\n                name: '',\n                lessThanFiveYears: '',\n                lessThanFiveYearsPatientIds: '',\n                greaterThanEqualFiveYears: '',\n                greaterThanEqualFiveYearsPatientIds: '',\n                total: 0,\n                totalPatientIds: ''\n            }\n            item.name = key\n            let total = 0\n            item.id = count\n            count += 1 \n            for (const [key1, value1] of Object.entries(condition)) {\n                const conditionDetails: any = value1\n                if (conditionDetails != null) {\n                    total +=conditionDetails.length;\n                    item.total = total\n                    if(conditionDetails.length) {\n                        temp.push(...conditionDetails)\n                        item.totalPatientIds = temp\n                    }\n                    if (key1 == '<5yrs') {\n                    item.lessThanFiveYears = conditionDetails.length\n                    item.lessThanFiveYearsPatientIds = conditionDetails\n                    }\n                if (key1 == '>=5yrs') {\n                item.greaterThanEqualFiveYears = conditionDetails.length\n                item.greaterThanEqualFiveYearsPatientIds = conditionDetails\n                }\n            }\n          }\n          all.push(item)\n        }\n        return all\n    }\n\n    getCSVString(IDSRConditionsObj: any) {\n        let CSVString = `Diseases/Events/Conditions, <5 yrs, >=5 yrs, Total,\\n`\n        for(const condition of IDSRConditionsObj) {\n            CSVString += `${condition.name},${condition.lessThanFiveYears},${condition.greaterThanEqualFiveYears},${condition.total},\\n`  \n        }\n        return {CSVString}\n    }\n\n    static async getReportEpiWeeks() {\n        const epiWeeks: Array<CommonInterface> = []\n        const epiWeeksObj = await Service.getJson('get_weeks')\n        epiWeeksObj.reverse().forEach( (item: any) => { \n            const dates = item[1].split(\" \")\n            const startDate = dates[0]\n            const endDate = dates[2]\n            const txt = item[0].split('W')\n            const name = txt[0] +\"/W\"+ txt[1]\n            epiWeeks.push({ name: name, start: startDate, end: endDate })\n        })\n        return epiWeeks\n    }\n\n    static async getReportMonths() {\n        const months: Array<CommonInterface> = []\n        const epiWeeksObj = await Service.getJson('get_months')\n        epiWeeksObj.forEach( (item: any) => {\n            const _payload = item[1];\n            const monthandyear = _payload[0]\n            const startandendmonths = _payload[1];\n            const dates = startandendmonths.split(\"to\");\n            months.push({ name: monthandyear, start: dates[0], end: dates[1].trim() })\n        })\n        return months\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { modalController } from \"@ionic/vue\";\nimport DrilldownTable from \"@/apps/ART/views/reports/BasicReportTemplate.vue\"\nimport { OpdReportService } from \"@/apps/OPD/services/opd_report_service\"\nimport { IDSRReportService } from \"@/apps/OPD/services/idsr_service\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport moment from \"dayjs\"\nimport { Service } from '@/services/service';\nimport { isEmpty } from 'lodash'\n\nexport default defineComponent({\n    data: () => ({\n        fields: [] as Array<Field>,\n        report: {} as any,\n        reportReady: false as boolean,\n        period: '' as string,\n        startDate: '' as string,\n        endDate: '' as string,\n        customFileName: '' as string,\n        drillDownCache: {} as Record<number, Array<any>>\n    }),\n    methods: {\n        toDate(date: string) {\n            return HisDate.toStandardHisDisplayFormat(date)\n        },\n        confirmPatient(patient: number) {\n            return this.$router.push(`/patients/confirm?person_id=${patient}`)\n        },\n        async exportToCustomPDF(title: string) {\n            const printW = open('', '', 'width:1024px, height:768px')\n            const content = document.getElementById('report-content')\n            if (content && printW) {\n                printW.document.write(`\n                    <html>\n                    <head>\n                        <title>${title}</title>\n                        <link rel=\"stylesheet\" media=\"print\" href=\"/assets/css/cohort.css\" />\n                    </head>\n                    <body>\n                        ${content.innerHTML}\n                    </body>\n                    </html>\n                `)\n                setTimeout(() => { printW.print(); printW.close() }, 3500)\n            }\n        },\n        async onDrillDown(conditionName: string, patientIds: number[]) {\n            if(isEmpty(patientIds)) return\n            const columns = [[\n                table.thTxt('First name'),\n                table.thTxt('Last name'),\n                table.thTxt('Gender'),\n                table.thTxt('Age'),\n                table.thTxt('Phone'),\n                table.thTxt('Address'),\n                table.thTxt('Action')\n            ]]\n            const rowParser = async (ids: number[]) => {\n                return await Promise.all(ids.map(async (id) => {\n                const personDetails = await Patientservice.findByID(id)\n                const patient = new Patientservice(personDetails)\n                return [\n                    table.td(patient.getGivenName()),\n                    table.td(patient.getFamilyName()),\n                    table.td(patient.getGender()),\n                    table.td(patient.getAge()),\n                    table.td(patient.getPhoneNumber()),\n                    table.td(`${patient.getCurrentDistrict()}, ${patient.getCurrentVillage()}, ${patient.getClosestLandmark()}`),\n                    table.tdBtn('Select', async () => {\n                    await modalController.dismiss({})\n                    this.$router.push({ path: `/patient/dashboard/${id}`})\n                    })\n                ]\n                })) \n            }\n            return this.drilldownData(conditionName, columns, patientIds, rowParser)\n        },\n        async drilldownAsyncRows(title: string, columns: Array<any>, asyncRows: Function) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    asyncRows,\n                    showFilters: true,\n                    rowsPerPage: 50,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        async drilldownData(title: string, columns: Array<any>, rows: Array<any>, rowParser: any) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    rows,\n                    rowParser,\n                    rowsPerPage: 50,\n                    showFilters: true,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        getDefaultDrillDownTable() {\n            const columns = [\n                [\n                    table.thTxt('ARV number'), \n                    table.thTxt('Gender'),\n                    table.thTxt('Birth Date'), \n                    table.thTxt('Actions')\n                ]\n            ]\n            const rowParser = (tableRows: Array<any[]>) => {\n                return tableRows.map(async (defaultRow: Array<any>) => {\n                    const [index, id ] = defaultRow\n                    if (id in this.drillDownCache) {\n                        //const [oldIndex, ...rest] = this.drillDownCache[id]\n                        return [index] // Assign new index number and maintain patient record\n                    } \n    \n                    const data = await Patientservice.findByID(id)\n                    const patient = new Patientservice(data)\n                    const row = [\n                        index,\n                        table.td(patient.getArvNumber()), \n                        table.td(patient.getGender()), \n                        table.tdDate(patient.getBirthdate().toString()),\n                        table.tdBtn('Show', async () => {\n                            await modalController.dismiss({})\n                            this.$router.push({ path: `/patient/dashboard/${id}`})\n                        })\n                    ]\n                    this.drillDownCache[id] = row\n                    return row\n                })\n            }\n            return { rowParser, columns }\n        },\n        runTableDrill(data: any, title='Drilldown patients') {\n            const { columns, rowParser } = this.getDefaultDrillDownTable()\n            this.drilldownData(title, columns, data, rowParser)\n        },\n        drill(values: Array<number>, title='Drill table') {\n            if (values && values.length > 0) {\n                return table.tdLink(\n                    values.length, \n                    () => this.runTableDrill(values, title)\n                )\n            }\n            return table.td(0)\n        },\n        getEpiweeksFields(): Array<Field> {\n            return [\n                {\n                    id: 'epiweek',\n                    helpText: 'Select EPI week',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => {\n                        const epiWeeks = await IDSRReportService.getReportEpiWeeks()\n                        const items: Array<Option> = epiWeeks.map((q: any) => ({\n                            label: q.name +' - ('+ moment(q.start).format('DD/MMM/YYYY') +' - '+ moment(q.end).format('DD/MMM/YYYY')+')',\n                            value: q.start,\n                            other: q\n                        }))\n                        return items\n                    }\n                },\n            ]\n        },\n        getMonthlyFields(): Array<Field> {\n            return [\n                {\n                    id: 'idsrmonth',\n                    helpText: 'Select Month',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => {\n                        const epiWeeks = await IDSRReportService.getReportMonths()\n                        const items: Array<Option> = epiWeeks.map((q: any) => ({\n                            label: q.name +' - ('+ moment(q.start).format('DD/MMM/YYYY') +' - '+ moment(q.end).format('DD/MMM/YYYY')+')',\n                            value: q.start,\n                            other: q\n                        }))\n                        return items\n                    }\n                },\n            ]\n        },\n        getDateDurationFields(useQuarter=false, setCustomQuarterPeriod=false, maxQuarter=5): Array<Field> {\n            const minDate = '2001-01-01'\n            const maxDate = Service.getSessionDate()\n            return [\n                {\n                    id: 'quarter',\n                    helpText: 'Select Quarter',\n                    type: FieldType.TT_SELECT,\n                    condition: () => useQuarter,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => {\n                        const quarters = OpdReportService.getReportQuarters(maxQuarter)\n                        let items: Array<Option> = quarters.map((q: any) => ({\n                            label: q.name,\n                            value: q.start,\n                            other: q\n                        }))\n                        if (setCustomQuarterPeriod) {\n                            items = [\n                                {\n                                    label: 'Set custom period',\n                                    value: 'custom_period',\n                                    other: {}\n                                },\n                                ...items\n                            ]\n                        }\n                        return items\n                    }\n                },\n                ...generateDateFields({\n                    id: 'start_date',\n                    helpText: 'Start',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    minDate: () => minDate,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date \n                }),\n                ...generateDateFields({\n                    id: 'end_date',\n                    helpText: 'End',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    unload: (d: any, s: any, f: any, c: any) => {\n                        if (s === 'next') {\n                            this.endDate = c.end_date\n                        }\n                    },\n                    minDate: (_: any, c: any) => c.start_date,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date\n                })\n            ]\n        }\n    }\n})\n","import script from \"./ReportMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./ReportMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\nimport { PrintoutService } from '@/services/printout_service';\nimport Url from \"@/utils/Url\";\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\nexport const AGE_GROUPS = [\n    '0-5 months', '6-11 months',\n    '12-23 months', '2-4 years', \n    '5-9 years', '10-14 years', \n    '15-17 years', '18-19 years', \n    '20-24 years', '25-29 years', \n    '30-34 years', '35-39 years', \n    '40-44 years', '45-49 years', \n    '50 plus years'\n]\n\nexport const OTHER_AGE_GROUPS = [\n    '<1 year', '1-4 years',\n    '5-9 years', '10-14 years',\n    '15-19 years', '20-24 years',\n    '25-29 years', '30-34 years',\n    '35-39 years', '40-44 years',\n    '45-49 years', '50 plus years'\n]\n\nexport const LA_TYPES: Record<string, string> = {\n    one: 'AL 1', \n    two: 'AL 2', \n    three: 'AL 3', \n    four: 'LA 4'\n}\n\nexport const NCD_TYPES = [\n    'Diabetes',\n    'Hypertension',\n    'Stroke',\n    'Suspected cancer',\n    'Confirmed cancer',\n    'Palliative cancer',\n    'Asthma',\n    'Depression',\n    'Acute psychosis',\n    'Chronic psychosis',\n    'Epilepsy'\n]\n\nexport const MENTAL_HEALTH_DIAGNOSIS = [\n    'Organic mental disorder (Chronic)',\n    'Organic mental disorder (acute)',\n    'Alcohol use mental disorder',\n    'Drug use mental disorder',\n    'Schizophrenia',\n    'Acute and transient psychotic disorder',\n    'Schizo-affective disorder',\n    'Mood-affective disorder (MANIC)',\n    'Mood-affective disorder (BIPOLAR)',\n    'Mood-affective disorder (DEPRESSION)',\n    'Anxiety disorder',\n    'Stress reaction adjustment disorder',\n    'Dissociative conversion disorder',\n    'Somatoform disorder',\n    'Puerperal mental disorder',\n    'Personality/Behaviour disorder',\n    'Mental retardation',\n    'Psychological mental disorder',\n    'Hyperkinetic conduct disorder',\n    'Epilepsy'\n]\n\nexport class OpdReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    epiweek: string;\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.epiweek = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getPatientsWithNIDs() {\n        return this.getReport('with_nids')\n    }\n\n    getClinicRegistrations(){\n        return this.getReport('registration');\n    }\n\n    getDrugsGivenWithoutPrescription() {\n        return this.getReport('drugs_given_without_prescription')\n    }\n\n    getDrugsGivenWithPrescription() {\n        return this.getReport('drugs_given_with_prescription')\n    }\n\n    getDiagnosis(){\n        const url = `programs/${this.programID}/reports/diagnosis`\n        return Service.getJson(url, {\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            'date': this.date\n        })\n    }\n\n    getDiagnosisByAddress(){\n        return this.getReport('diagnosis_by_address')\n    }\n\n    getLaPrescriptions(){\n        const url = `programs/${this.programID}/reports/la_prescriptions`\n        return Service.getJson(url, {\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            \n        })\n    }\n\n    printLaReport(data: Record<string, any>){\n        const printService = new PrintoutService()\n        const url = `programs/${this.programID}/barcodes/la_report`\n        const params: Record<string, any> = {\n            \"date[start]\": this.startDate,\n            \"date[end]\": this.endDate\n        }\n        Object.keys(LA_TYPES).forEach((v, i) => {\n            i++\n            params[`${i}[prescription]`] = data[`total_la_${v}_prescribed_drugs`]\n            params[`${i}[dispensed]`] = data[`total_la_${v}_dispensed_drugs`]\n        })\n        return printService.printLbl(`${url}?${Url.parameterizeObjToString(params)}`)\n    }\n\n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n    setEpiWeek(epiweek: string) {\n        this.epiweek = epiweek\n    }\n\n    getReportPeriod() {\n        return this.startDate && this.endDate\n         ? `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n         : '-'\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': this.programID}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        if (this.epiweek) {\n            payload['epiweek'] = this.epiweek\n        }\n        return { ...payload, ...config }\n    }\n\n    static getReportQuarters(minDuration= 4) {\n        const quarters: Array<QuarterInterface> = []\n        let year = HisDate.getCurrentYear()\n        for(let i=0; i < minDuration; ++i) {\n            quarters.push({ name: `Q4 ${year}`, start: `${year}-10-01`, end: `${year}-12-31` })\n            quarters.push({ name: `Q3 ${year}`, start: `${year}-07-01`, end: `${year}-09-30` })\n            quarters.push({ name: `Q2 ${year}`, start: `${year}-04-01`, end: `${year}-06-30` })\n            quarters.push({ name: `Q1 ${year}`, start: `${year}-01-01`, end: `${year}-03-31` })\n            --year\n        }\n        return quarters\n    }\n\n}"],"sourceRoot":""}