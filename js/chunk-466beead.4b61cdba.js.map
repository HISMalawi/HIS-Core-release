{"version":3,"sources":["webpack:///./src/apps/HTS/services/hts_items_given.ts","webpack:///./src/apps/HTS/views/encounters/HtsItemsGivenToClient.vue?e656","webpack:///./src/apps/HTS/views/encounters/HtsItemsGivenToClient.vue","webpack:///./src/apps/HTS/views/encounters/HtsItemsGivenToClient.vue?a27a","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/composables/testKits.ts"],"names":["HtsItemsGivenService","AppEncounterService","constructor","patientID","providerID","super","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","itemsGivenToClientField","itemsGivenHiddenField","selfTestsGivenToClientField","hivTestKitDetailsField","immediate","methods","concept","ObservationService","getFirstValueCoded","formData","computedData","saveFormEncounterAndProceed","encounterTypeID","getSelfKitCount","f","items_given_to_client","Array","isArray","label","value","id","helpText","type","FieldType","TT_ADHERENCE_INPUT","isRequired","appearInSummary","beforeNext","async","v","every","d","parseInt","alertConfirmation","validation","maxSelfKits","maxMaleCondoms","maxFemaleCondoms","maxFRS","some","test","toLowerCase","options","isEmpty","items_given_to_client_selection","config","noFloat","titles","TT_HIDDEN","summaryMapValue","defaultValue","filter","finalComputedValue","obs","map","buildValueNumber","buildValueCoded","initKits","getLotNo","getExpiryDate","TestKit","TT_INPUT_ARRAY","columns","init","other","incomplete","x","condition","KitProp","HIV_SELF_KIT","parentObs","childObs","l","child","Promise","all","defaultOutput","from","length","buildValueText","buildValueDate","test_kit","kitNameOption","onclick","val","r","index","t","listData","keyboard","TT_TEXT","forEach","i","kitLotNoOption","kitExpiryDateOption","TT_FULL_DATE","Date","date","toDate","monthsFromNow","dayjs","diff","kits","generateRows","count","slice","el","estimate","someIncomplete","broadcast","rows","channel","newValue","oldValue","col","broadcastlistener","update","disabled","userOptionField","JSON","stringify","HIVStatus","goOffline","offlineData","Offline","getOfflinePerson","offlineID","observationParams","res","find","encounterName","meta","hiv_result","push","selectionList","selection","title","preset","size","genderOptionField","facts","gender","ageOptionField","age","buildNumericEstimate","numericKeypad","isEstimate","toastWarning","toggleButton","strictNumbers","approachOptionField","resultOptionField","self_test_kits","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","providers","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","patient","isEnrolledInProgam","created","$route","params","patient_id","initOfflineData","Store","get","then","patientData","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","patientDashboardUrl","isOnline","isOfflineMode","person","birthdate","ProgramService","getSessionDate","saveObsOffline","formdata","labOrders","status","observations","uploadStatus","resolveObs","enc","createEncounter","saveObservationList","callback","error","Error","skipNextTask","nextTask","runflowState","state","states","username","split","provider","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","finding","program","programID","getProgramID","toastDanger","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","names","latestName","given_name","family_name","toOption","mapStrToOptions","items","path","loadingController","create","backdropDismiss","message","present","getTop","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","reduce","accum","cur","concat","inArray","arr","expression","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","isCondition","ignored","undefined","prop","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","description","text","info","ref","getUserProp","setUserProp","UserProp","getSelectedTests","req","trim","defaultKits","kitName","UNIGOLD","lotNo","expiryDate","testGroup","visible","userProp","DETERMINE","BIOLINE","SYPHILIS","HEPATITIS","selectedKits","TEST_KIT_USER_PROPERTY","prevKits","parse","kit","k","Service","saveKits"],"mappings":"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","file":"js/chunk-466beead.4b61cdba.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsItemsGivenService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 196, providerID)\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Items Given\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { HtsItemsGivenService } from \"../../services/hts_items_given\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { IonPage } from \"@ionic/vue\";\nimport keyboard, { numericKeypad, selectionList } from \"@/utils/PopupKeyboard\";\nimport { find, isEmpty } from \"lodash\";\nimport { alertConfirmation, toastWarning } from \"@/utils/Alerts\";\nimport { toDate } from \"@/utils/Strs\";\nimport dayjs from \"dayjs\";\nimport { ObservationService } from '@/services/observation_service';\nimport { TestKit, KitProp } from \"../../composables/testKits\";\nimport { Offline } from \"@/composables/offline\";\nimport { ObservationOffline } from \"@/interfaces/Sync\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsItemsGivenService,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsItemsGivenService(\n            this.patientID,\n            this.providerID\n          );\n          this.fields = [\n            this.itemsGivenToClientField(),\n            this.itemsGivenHiddenField(),\n            this.selfTestsGivenToClientField(),\n            this.hivTestKitDetailsField(),\n          ];\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    async obs(concept: string) { return await ObservationService.getFirstValueCoded(this.patientID, concept) || 'Unknown'},\n    onFinish(formData: any, computedData: any) {\n      this.saveFormEncounterAndProceed({\n        encounterTypeID: this.service.encounterTypeID,\n        formData,\n        computedData,\n      })\n    },\n    getSelfKitCount(f: Record<string, any>) {\n      if (f.items_given_to_client && Array.isArray(f.items_given_to_client)) {\n        return find(f.items_given_to_client, { label: \"Self-Test Kit\" })?.value || 0;\n      }\n      return 0;\n    },\n    itemsGivenToClientField(): Field {\n      return {\n        id: \"items_given_to_client_selection\",\n        helpText: \"Items given to the client\",\n        type: FieldType.TT_ADHERENCE_INPUT,\n        isRequired: () => true,\n        appearInSummary: () => false,\n        beforeNext: async (v: Option[]) => {\n          if (v.every((d) => parseInt(`${d.value}`) <= 0)) {\n            if (\n              !(await alertConfirmation(\n                \"Do you want to proceed client without items given?\"\n              ))\n            ) {\n              return false;\n            }\n          }\n          return true;\n        },\n        validation: (v: Option[]) => {\n          const maxSelfKits = 3;\n          const maxMaleCondoms = 30;\n          const maxFemaleCondoms = 30;\n          const maxFRS = 5;\n          if (\n            v.some((d) => /self-test/i.test(d.label) && parseInt(`${d.value}`) > maxSelfKits)\n          ) {\n            return [\n              `Cannot distribute more than ${maxSelfKits} Self-test kits. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => /male condoms/i.test(d.label.toLowerCase()) && parseInt(`${d.value}`) > maxMaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxMaleCondoms} Male Condoms. Please adjust the number accordingly`,\n            ];\n         }if (\n            v.some((d) => d.label == 'Female condoms' && parseInt(`${d.value}`) > maxFemaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFemaleCondoms} Female Condoms. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => /frs/i.test(d.label.toLowerCase()) && parseInt(`${d.value}`) > maxFRS)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFRS} FRS. Please adjust the number accordingly`,\n            ];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          if (!isEmpty(f.items_given_to_client_selection)) {\n            return f.items_given_to_client_selection;\n          }\n          return [\n            { label: \"Self-Test Kit\", value: \"\" },\n            { label: \"Male condoms\", value: \"\" },\n            { label: \"Female condoms\", value: \"\" },\n            { label: \"FRS\", value: \"\" },\n          ] as Option[];\n        },\n        config: {\n          noFloat: true,\n          titles: {\n            label: \"Item\",\n            value: \"Quantity\",\n          },\n        },\n      };\n    },\n    itemsGivenHiddenField(): Field {\n      return {\n        id: \"items_given_to_client\",\n        helpText: \"Items given\",\n        type: FieldType.TT_HIDDEN,\n        summaryMapValue: (v: Option) => {\n          return {\n            label: `${v.label} given`,\n            value: v.value,\n          };\n        },\n        defaultValue: (f: Record<string, Option[]>) => {\n          if (f.items_given_to_client_selection.every((d) => parseInt(`${d.value}`) <= 0)) {\n            return {\n              label: \"No items\",\n              value: \"Yes\",\n            };\n          }\n          return f.items_given_to_client_selection.filter((d) => parseInt(`${d.value}`) > 0);\n        },\n        finalComputedValue: (v: Option[] | Option) => {\n          if (Array.isArray(v)) {\n            return {\n              obs: v.map((d: Option) =>\n                this.service.buildValueNumber(d.label, parseInt(`${d.value}`))\n              ),\n            };\n          }\n          return {\n            obs: this.service.buildValueCoded(\"None\", \"Yes\"),\n          };\n        },\n      };\n    },\n    hivTestKitDetailsField(): Field {\n      const { \n        initKits, \n        getLotNo, \n        getExpiryDate \n      } = TestKit()\n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        init: async () => {\n          await initKits()\n          return true\n        },\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v?.other?.fields,\n        validation: (v: Option[]) => {\n          const incomplete = v\n            .map((d: Option) => d.other.fields)\n            .some((d: Option[]) => d.some((x: Option) => x.value === \"\"));\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        condition: (f: any) => this.getSelfKitCount(f) >= 1 && !getLotNo(KitProp.HIV_SELF_KIT),\n        finalComputedValue: (v: Option[]) => {\n          const data = v.map((d) => d.other.fields);\n          return {\n            obs: data.map(async (options: Option[]) => {\n              const [parentObs, ...childObs] = options\n                .filter((l: Option) => typeof l.other.obs === \"function\")\n                .map((d: Option) => d.other.obs(d));\n              return {\n                ...(await parentObs),\n                child: await Promise.all(childObs),\n              };\n            }),\n          };\n        },\n        defaultOutput: (f: any) => {\n          if (this.getSelfKitCount(f) >= 1 && getLotNo(KitProp.HIV_SELF_KIT)) {\n            return Array.from({ length: this.getSelfKitCount(f) }).map(() => {\n              return {\n                label: KitProp.HIV_SELF_KIT,\n                value: getLotNo(KitProp.HIV_SELF_KIT),\n                other: {\n                  fields: [\n                    {\n                      label: \"Kit name\",\n                      value: KitProp.HIV_SELF_KIT,\n                      other: {\n                        obs: () => this.service.buildValueText(\"Kit name\", KitProp.HIV_SELF_KIT)\n                      }\n                    },\n                    {\n                      label: \"KitLot No.\",\n                      value: getLotNo(KitProp.HIV_SELF_KIT),\n                      other: {\n                        obs: () => this.service.buildValueText(\"Kit lot number\",\n                          getLotNo(KitProp.HIV_SELF_KIT)\n                        )\n                      }\n                    },\n                    {\n                      label: \"Kit Expiry date\",\n                      value: getExpiryDate(KitProp.HIV_SELF_KIT),\n                      other: {\n                        obs: () => this.service.buildValueDate(\"kit expiry date\",\n                          getExpiryDate(KitProp.HIV_SELF_KIT)\n                        )\n                      }\n                    }\n                  ]\n                }\n              }\n            })\n          }\n        },\n        options: async (f: any) => {\n          if (f.test_kit != null) return f.test_kit;\n          const kitNameOption = () => ({\n            label: \"Kit Name\",\n            value: KitProp.HIV_SELF_KIT,\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueText(\"Kit name\", v.value as string),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"name\",\n                    helpText: \"Kit Name\",\n                    type: FieldType.TT_TEXT,\n                    isRequired: () => true\n                  },\n                  (v: Option) => {\n                    val.value = v.value;\n                    // Use first row's Lot number to update other Lot numbers which are empty\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/name/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          });\n          const kitLotNoOption = () => ({\n            label: \"Kit Lot No.\",\n            value: getLotNo(KitProp.HIV_SELF_KIT),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueNumber(\n                  \"Kit lot number\",\n                  v.value as number\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard({\n                  id: 'lot',\n                  helpText: 'Enter Lot Number',\n                  type: FieldType.TT_TEXT,\n                  isRequired: () => true\n                }, \n                (v: Option) => {\n                  val.value = v.value\n                  // Use first row's Lot number to update other Lot numbers which are empty\n                  if (index === 0) {\n                    listData.forEach((i: Option) => {\n                      i.other.fields.forEach((d: Option) => {\n                        if (/lot/i.test(d.label) && d.value === '') {\n                          d.value = val.value\n                        }\n                      })\n                    })\n                  }\n                })\n              },\n            },\n          });\n          const kitExpiryDateOption = () => ({\n            label: \"Kit Expiry Date\",\n            value: getExpiryDate(KitProp.HIV_SELF_KIT),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueDate(\n                  \"kit expiry date\",\n                  v.value as string\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(this.service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(this.service.date),\n                        ];\n                      }\n                      const monthsFromNow = dayjs(v.label).diff(this.service.date, \"month\")\n                      if (monthsFromNow <= 2) {\n                        return [\"It's not advisable to use a test kit that will expire in less than 2 months\"]\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => {\n                    val.value = v.value\n                    // Use first row's expiry date to update other expiry dates\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/expiry/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          })\n          const kits = this.getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"\",\n                value: \"\",\n                other: {\n                  fields: [\n                   kitNameOption(),\n                   kitLotNoOption(),\n                   kitExpiryDateOption(),\n                  ],\n                },\n              };\n            });\n            if (Array.isArray(f.test_kit)) {\n              if (kits < f.test_kit.length) {\n                return f.test_kit.slice(0, kits);\n              } else if (kits > f.test_kit.length) {\n                return [\n                  ...f.test_kit,\n                  ...generateRows(\n                    kits - f.test_kit.length\n                  ),\n                ];\n              } else {\n                return f.test_kit;\n              }\n          }\n          return generateRows();\n        },\n      };\n    },\n    selfTestsGivenToClientField(): Field {\n      return {\n        id: \"self_test_kits\",\n        helpText: \"Self-test kit users\",\n        type: FieldType.TT_INPUT_ARRAY,\n        isRequired: () => true,\n        condition: (f: any) =>\n          f.items_given_to_client.some(\n            (d: Option) => /self-test/i.test(d.label) && parseInt(`${d.value}`) > 0\n          ),\n        finalComputedValue: (v: Option[]) => {\n          return {\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d.value, d));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        summaryMapValue: (v: Option) => v.other.fields.map((d: Option) => {\n          const el = {...d}\n          if (el.label === 'Age' && el?.other?.estimate) {\n            el.value = `${el.value} (Estimated)`\n          }\n          return el\n        }),\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 4;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        config: {\n          columns: [\n            { label: \"End-User\" },\n            { label: \"Sex\" },\n            { label: \"Age\" },\n            { label: \"Approach\" },\n            { label: \"Result\" },\n          ],\n        },\n        options: (f: any) => {\n          const broadcast = (rows: Option[], channel: string, newValue: string|number, oldValue: string|number) => {\n            rows.forEach(col => {\n              if (typeof col?.other?.broadcastlistener === \"function\") {\n                const update = col.other.broadcastlistener(channel, newValue, oldValue)\n                if (update) {\n                  col.value = update.value\n                  col.disabled = update.disabled\n                }\n              }\n            })\n          }\n          const userOptionField = () => ({\n            label: \"User\",\n            value: \"\",\n            other: {\n              obs: (v: string) =>\n                this.service.buildValueCoded(\"Self-test end user\", v),\n              onclick: async (\n                val: Option,\n                rows: Option[],\n                index: number,\n                i: number,\n                listData: Option[]\n              ) => {\n                const options = [];\n                if (!/Self/.test(JSON.stringify(listData.filter((_: any, i) => i != index)))) {\n                  let HIVStatus = ''\n                  if (this.goOffline()) {\n                    const offlineData = Offline().getOfflinePerson(this.offlineID)\n                    if (Array.isArray(offlineData?.observationParams)) {\n                      const res = offlineData?.observationParams.find((obs: ObservationOffline) => {\n                        return obs.encounterName === 'testing'\n                      })\n                      HIVStatus = `${res?.meta?.hiv_result?.label}`\n                    }\n                  } else {\n                    HIVStatus = await this.obs(\"HIV status\")\n                  }\n                  if(!/positive/.test(HIVStatus.toLowerCase())) options.push(\"Self\");\n                }\n                selectionList(\n                  [...options, \"Sexual partner\", \"Other\"],\n                  (selection: string) => {\n                    broadcast(rows, 'User', selection, val.value)\n                    val.value = selection;\n                  },\n                  {\n                    title: \"Select End-User\",\n                    preset: val != null ? val.value : \"\",\n                    size: \"small-modal\",\n                  }\n                );\n              },\n            },\n          });\n          const genderOptionField = () => ({\n            label: \"Sex\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string, oldValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { \n                      value: this.facts.gender === 'M' ? \"Male\" : \"Female\", \n                      disabled: true \n                    }\n                  }\n                  if (oldValue === 'Self') {\n                    return { value: '', disabled: false }\n                  }\n                }\n              },\n              obs: (v: string) => this.service.buildValueCoded(\"Gender of contact\", v),\n              onclick: (val: Option) => {\n                selectionList(\n                  [\"Female\", \"Male\"],\n                  (selection: string) => (val.value = selection),\n                  {\n                    title: \"Select sex\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const ageOptionField = () => ({\n            label: \"Age\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { value: `${this.facts.age}`, disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string, d: Option) => {\n                const age = parseInt(v)\n                if (d?.other?.estimate) {\n                  return this.service.buildNumericEstimate('Age of contact', age)\n                } else {\n                  return this.service.buildValueNumber(\"Age of contact\", age)\n                }\n              },\n              onclick: (val: Option) => {\n                numericKeypad((age: number | string, isEstimate: boolean | undefined) => {\n                  if (age && parseInt(`${age}`) >= 125) {\n                    val.value =''\n                    return toastWarning(`Age exceeds maximum human life expectancy of 124 years`)\n                  }\n                  val.value = age\n                  val.other.estimate = isEstimate\n                }, \n                {\n                  title: 'Age',\n                  preset: ' ',\n                  toggleButton: \"Age is estimated?\",\n                  noFloat: true,\n                  strictNumbers: true\n                });\n              },\n            },\n          });\n          const approachOptionField = () => ({\n            label: \"Approach\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue != 'Self') {\n                    return { value: \"Un-assisted\", disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string) => this.service.buildValueCoded(\"Self-test approach\", v),\n              onclick: (val: Option, rows: Option[]) => {\n                selectionList(\n                  [\"Directly-assisted\", \"Un-assisted\"],\n                  (v: string) => {\n                    broadcast(rows, 'Approach', v, val.value)\n                    val.value = v\n                  },\n                  {\n                    title: \"Select approach\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const resultOptionField = () => ({\n            label: \"Result\",\n            value: \"N/A\",\n            other: {\n              obs: (v: string) => {\n                if (v && !/n\\/a/i.test(`${v}`)) {\n                  return this.service.buildValueCoded('Test 1', v)\n                }\n              },\n              onclick: (val: Option, rows: Option[]) => {\n                selectionList([\n                  'Negative',\n                  'Positive',\n                  'N/A'\n                ], \n                (selection: string) => {\n                  broadcast(rows, 'Result', selection, val.value)\n                  val.value = selection\n                }, {\n                  title: 'Directly-assisted HIV Result'\n                })\n              }\n            }\n          })\n          const kits = this.getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"item\",\n                value: \"N/A\",\n                other: {\n                  fields: [\n                    userOptionField(),\n                    genderOptionField(),\n                    ageOptionField(),\n                    approachOptionField(),\n                    resultOptionField()\n                  ],\n                },\n              };\n            });\n          if (Array.isArray(f.self_test_kits)) {\n            if (this.getSelfKitCount(f) < f.self_test_kits.length) {\n              return f.self_test_kits.slice(0, this.getSelfKitCount(f));\n            } else if (this.getSelfKitCount(f) > f.self_test_kits.length) {\n              return [\n                ...f.self_test_kits,\n                ...generateRows(\n                  this.getSelfKitCount(f) - f.self_test_kits.length\n                ),\n              ];\n            } else {\n              return f.self_test_kits;\n            }\n          }\n          return generateRows();\n        },\n      };\n    },\n  },\n});\n","import { render } from \"./HtsItemsGivenToClient.vue?vue&type=template&id=9d62e028&ts=true\"\nimport script from \"./HtsItemsGivenToClient.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsItemsGivenToClient.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const { getOfflinePerson } = Offline()\n            const person = getOfflinePerson(this.offlineID)\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        saveObsOffline(encounterTypeID: number, formdata: any, obs: any, labOrders=undefined as any, status='Pending') {\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: encounterTypeID,\n                meta: formdata,\n                labOrders\n            })\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            try {\n                const enc = new AppEncounterService(\n                    this.patientID,\n                    params.encounterTypeID, \n                    this.providerID\n                )\n                if ((await enc.createEncounter())) {\n                    if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                        status = 'Success'\n                    }\n                }\n                if (typeof params.callback === 'function') {\n                    await params.callback(enc)\n                }\n            } catch (e) {\n                if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                    status = 'NetworkError'\n                } else {\n                    status = 'Exception'\n                }\n                console.error(`${e}`)\n            }\n            if (status === 'Exception') {\n                throw new Error('Unable to proceed!')\n            }\n            this.saveObsOffline(\n                params.encounterTypeID, \n                params.formData,\n                obs,\n                params.labOrders,\n                status\n            )\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Service } from \"@/services/service\";\nimport { find, isEmpty } from \"lodash\";\nimport { ref } from \"vue\";\nimport UserProp from \"@/composables/userproperty\"\n\nexport enum KitProp {\n    TEST_KIT_USER_PROPERTY = 'hts_user_assigned_kits',\n    HIV_SELF_KIT = 'HIV self-kit',\n    SYPHILIS = 'Syphilis',\n    HEPATITIS = 'Hepatitis B',\n    BIOLINE = 'Bioline',\n    DETERMINE = 'Determine',\n    UNIGOLD = 'Unigold'\n}\n\nexport function TestKit() {\n    const kits = ref<any>([])\n    const { getUserProp, setUserProp } = UserProp()\n\n    const getSelectedTests = async () => {\n        try {\n            const req = await getUserProp('HTS_PROGRAMS')\n            return `${req||''}`.split(',').map((prop: string) => prop.trim())\n        } catch (e) {\n            console.error(`${e}`)\n        }\n        return []\n    }\n\n    const initKits = async () => {\n        const defaultKits = [\n            {\n                kitName: KitProp.UNIGOLD,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.DETERMINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.BIOLINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.HIV_SELF_KIT,\n                lotNo: '',\n                expiryDate: '',\n                visible: true\n            },\n            {\n                kitName: KitProp.SYPHILIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Syphilis Test\"\n            },\n            {\n                kitName: KitProp.HEPATITIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Hepatitis B Test\"\n            }\n        ]\n        try {\n            const selectedKits = await getSelectedTests()\n            const req: any = await getUserProp(KitProp.TEST_KIT_USER_PROPERTY)\n            const prevKits = JSON.parse(req||'')\n\n            defaultKits.forEach((kit: any) => {\n                if (kit.userProp && !isEmpty(selectedKits)) {\n                    kit.visible = selectedKits.includes(kit.userProp)\n                }\n                const preset = find(prevKits, { kitName: kit.kitName })\n                if (preset) {\n                    kit.lotNo = preset.lotNo\n                    kit.expiryDate = preset.expiryDate\n                }\n            })\n            kits.value = defaultKits.filter((k: any) => k.visible)\n        } catch (e) {\n            kits.value = defaultKits\n            console.error(`${e}`)\n        }\n        \n    }\n\n    const getLotNo = (kitName: KitProp) => {\n        const data = find(kits.value, { kitName })\n        if (data) {\n            if(new Date(data.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return data.lotNo\n        } \n        return ''\n    }\n\n    const getExpiryDate = (kitName: KitProp) => {\n        const date = find(kits.value, { kitName })\n        if (date) {\n            if (new Date(date.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return date.expiryDate\n        }\n        return ''\n    }\n\n    const saveKits = () => setUserProp(\n        KitProp.TEST_KIT_USER_PROPERTY, \n        JSON.stringify(kits.value)\n    )\n\n    return {\n        kits,\n        initKits,\n        saveKits,\n        getLotNo,\n        getExpiryDate\n    }\n}\n"],"sourceRoot":""}