{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsCode.vue?298b","webpack:///./src/apps/HTS/views/encounters/HtsCode.vue","webpack:///./src/apps/HTS/views/encounters/HtsCode.vue?0a51","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/services/hts_art_initiation_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","HtsArtInitiationService","patientID","providerID","htsLinkageCodeField","immediate","methods","nextTask","linkageCode","id","helpText","type","FieldType","TT_TEXT_BANNER","init","async","getHtsCode","options","mapStrToOptions","config","footerBtns","name","slot","onClick","printHtsLinkageId","showKeyboard","isFilterDataViaApi","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","patient","facts","isEnrolledInProgam","route","params","patient_id","toUpperCase","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","programID","ProgramService","getProgramID","e","console","error","toastDanger","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","formData","computedData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","AppEncounterService","constructor","super","PrintoutService","code","printoutService","printLbl","Prop","sitePrefix"],"mappings":"yIAEM,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAA+BC,8BAAkB,qBACjDC,EAAsBD,8BAAkB,YAE9C,OAAQE,yBAAcC,yBAAaF,EAAqB,KAAM,CAC5DG,QAASC,qBAAS,IAAM,CACtBC,yBAAaP,EAA8B,CACzCQ,UAAW,gBACXC,OAAQf,EAAKe,OACbC,eAAgBhB,EAAKiB,SACrBC,aAAa,EACbC,sBAAuBnB,EAAKoB,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,4BAE3CC,EAAG,I,oDCVQC,+BAAgB,CAC7BC,WAAY,CAAEC,gBACdC,OAAQ,CAACC,QACTC,KAAM,KAAM,CACVC,QAAS,KAEXC,MAAO,CACLC,MAAO,CACLC,QAAQD,GACFA,IACFE,KAAKJ,QAAU,IAAIK,OACjBD,KAAKE,UACLF,KAAKG,YAEPH,KAAKjB,OAAS,CAACiB,KAAKI,yBAGxBC,WAAW,IAGfC,QAAS,CACPrB,WACEe,KAAKO,YAEPH,sBACE,IAAII,EAAc,GAClB,MAAO,CACLC,GAAI,eACJC,SAAU,eACVC,KAAMC,OAAUC,eAChBC,KAAMC,UACJP,QAAoBR,KAAKJ,QAAQoB,cAC1B,GAETC,QAAS,IAAMjB,KAAKkB,gBAAgB,CAACV,IACrCW,OAAQ,CACNC,WAAY,CACV,CACEC,KAAM,QACNC,KAAM,MACNC,QAASR,eACDf,KAAKJ,QAAQ4B,kBAAkBhB,KAG3CiB,cAAc,EACdC,oBAAoB,Q,qBC9C9B,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS5D,KAErD,gB,0DCHH6D,E,yEAAZ,SAAYA,GACRA,iCACAA,+CACAA,uDACAA,6CACAA,yBACAA,kBANJ,CAAYA,MAAS,KAQrB,MAAMC,EAAWC,GAAcC,OAAQC,2BAA2BF,GAErDG,EAA2D,CACpE,qEAAsE,CAClEC,SAAU,EACVC,QAAS,CACLC,MAAOrB,OAASsB,uBACZ,MAAMC,QAAeC,eACjB,6BACA,mBAAmBV,EAAQQ,GAC3B,qEACA,CACI,CAAEhB,KAAM,SAAUC,KAAM,MAAOkB,MAAO,WACtC,CAAEnB,KAAM,iBAAkBC,KAAM,MAAOkB,MAAO,WAC9C,CAAEnB,KAAM,kBAAmBC,KAAM,MAAOkB,MAAO,YAGvD,MAAkB,WAAXF,EACDV,EAAUa,wBACC,mBAAXH,EACAV,EAAUc,uBACVd,EAAUe,WAGxBC,WAAY,CACRC,QAAQA,GACJ,MAAmB,iBAAZA,GAEXR,iBAAiBS,GAAmB,YAAEC,IAClC,OAAOA,GAAeD,KAIlC,+DAAgE,CAC5DZ,SAAU,EACVC,QAAS,CACLC,MAAOrB,OAASiC,YAAWD,kBACvB,MAAMT,QAAeC,eACjB,6BAA8B,GAC9B,gBAAgBV,EAAQkB,iCAA2ClB,EAAQmB,KAC3E,CACI,CAAE3B,KAAM,SAAUC,KAAM,MAAOkB,MAAO,UACtC,CAAEnB,KAAM,sBAAuBC,KAAM,MAAOkB,MAAO,aAG3D,MAAkB,wBAAXF,EACDV,EAAUqB,oBACVrB,EAAUa,0BAGxBG,WAAY,CACRI,UAAUA,GAAmB,YAAED,IAC3B,OAAOA,EAAcC,KAIjC,oDAAqD,CACjDd,SAAU,EACVC,QAAS,CACLe,UAAWnC,OAASoC,YAAWC,gBAAeL,cAAaM,cACvD,MAAMC,QAAcC,eAChB,gCAAgCH,EAChC,QAAQvB,EAAQkB,iBAA2BlB,EAAQwB,KACnDF,EACA,CACI,CAAE9B,KAAM,SAAUmB,MAAO,SAAUlB,KAAM,QAASkC,KAAM,WACxD,CAAEnC,KAAM,UAAWC,KAAM,MAAOkC,KAAM,YAG9C,MAAwB,WAAjBF,EAAMhB,OACP,CAAEmB,OAAQ,EAAGC,UAAW9B,EAAUa,yBAClC,CAAEgB,MAAOH,EAAMJ,UAAWQ,UAAW9B,EAAU+B,gBAG7Df,WAAY,CACRgB,UAAUC,GACN,OAAOA,M,gEC3ERvE,+BAAgB,CAC3BC,WAAY,CAAEuE,wBACdnE,KAAM,KAAM,CACRoE,QAAS,GACThF,OAAQ,GACRmB,UAAW,GACXC,YAAa,EACbgD,UAAW,GACXa,MAAO,CACHjB,YAAa,GACbM,QAAS,GACTY,oBAAoB,EACpBb,cAAe,MACfD,UAAW,GACXS,WAAW,EACXZ,UAAW,GACXH,QAAS,GACTR,iBAAkB,IAEtBvD,UAAW,GACXgB,OAAO,IAEXD,MAAO,CACJ,OAAU,CACLE,QAAQmE,GACDA,EAAMC,OAAOC,YAAcpE,KAAKE,WAAagE,EAAMC,OAAOC,aACzDpE,KAAKlB,WAAY,GAAGoF,EAAM7C,MAAOgD,cACjCrE,KAAKE,UAAYoE,SAASJ,EAAMC,OAAOC,YACvCG,OAAMC,IAAI,iBAAkB,CAAEtE,UAAWF,KAAKE,YACzCuE,KAAKC,IACF1E,KAAK+D,QAAUW,EACf1E,KAAK2E,oBAAoBF,KAAK,KAC1BzE,KAAK4E,2BAA2BH,KAAK,KACjCzE,KAAKF,OAAQ,UAMrCO,WAAW,EACXwE,MAAM,IAGdC,SAAU,CACN1F,oBACI,OAAOY,KAAK+E,wBAGpBzE,QAAS,CACL0E,aAAaC,EAAkBd,EAAO,MAClC,MAAMe,EAAc,GAmBpB,GAlBAA,EAAOtD,EAAU+B,cAAiBT,IAC9B,MAAQiC,GAAajC,EAAUkC,MAAM,KAC/BC,EAAWC,kBAAKtF,KAAKmD,UAAW,CAAEgC,aAExC,OADIE,IAAUrF,KAAKG,WAAakF,EAASE,WAClC3D,EAAUe,UAErBuC,EAAOtD,EAAUqB,qBAAuB,KACpCjD,KAAKwF,QAAQC,KAAK,kDAAkDzF,KAAKE,WAClE0B,EAAU8D,MAErBR,EAAOtD,EAAUc,wBAA0B,KACvC1C,KAAKwF,QAAQC,KAAK,qBAAqBzF,KAAKE,WACrC0B,EAAU8D,MAErBR,EAAOtD,EAAUa,yBAA2B,KACxCzC,KAAK2F,uBACE/D,EAAU8D,MAEjBT,KAASC,EACT,OAAOA,EAAOD,GAAOd,IAG7B,iCACI,MAAMyB,EAAWC,eAAkB7F,KAAKgE,MAAO/B,GAC/C,IAAI,MAAM6D,KAASF,EAAU,SACzB,MAAMG,EAAUH,EAASE,GACzB,GAAW,OAAPC,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAS5D,eAAO,OAAhB,EAAkBC,MAAO,OACzB,MAAM4D,EAAShG,KAAKgF,mBAA2B,OAAPe,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAS5D,eAAO,WAAT,EAAP,EAAkBC,MAAMpC,KAAKgE,SACrE,GAAIgC,IAAWpE,EAAU8D,KAAM,OAEnC,GAAW,OAAPK,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAS5D,eAAO,OAAhB,EAAkBe,UAAW,OAC7B,MAAMA,QAAyB,OAAP6C,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAS5D,eAAO,WAAT,EAAP,EAAkBe,UAAUlD,KAAKgE,QACzDhE,KAAKgF,aAAa9B,EAAUQ,UAAWR,EAAUO,UAI7D,0BACI,IACI,MAAMwC,QAAgB1B,OAAMC,IAAI,kBAAmB,CAAEtE,UAAWF,KAAKE,YACrEF,KAAKgE,MAAMC,mBAAqBgC,EAAQC,YAAcC,OAAeC,eACrEpG,KAAKgE,MAAMnB,QAAUoD,EAAQpD,QAC7B7C,KAAKgE,MAAM3B,iBAAmB4D,EAAQnD,UACxC,MAAOuD,GACLC,QAAQC,MAAMF,GACdG,eAAY,GAAGH,GAEnBrG,KAAKgE,MAAMjB,YAAcoD,OAAeM,iBACxCzG,KAAKgE,MAAMX,QAAU8C,OAAeO,mBACpC1G,KAAKgE,MAAMJ,UAAYuC,OAAetC,QACtC7D,KAAKgE,MAAMhB,UAAYhD,KAAK+D,QAAQ4C,eACpC3G,KAAKgE,MAAMZ,cAAgBpD,KAAK4G,OAAOvF,KACjCrB,KAAK4G,OAAOvF,KAAKwF,WAAWxC,cAC5B,MACF8B,OAAetC,UACf7D,KAAKmD,gBAAkBoB,OAAMC,IAAI,aACjCxE,KAAKgE,MAAMb,UAAYnD,KAAKmD,UACvB2D,KAAK,CAACC,EAAQC,KACX,MAAMC,EAAYF,EAAE5B,SAASd,cACvB6C,EAAYF,EAAE7B,SAASd,cAC7B,OAAO4C,EAAYC,GAAa,EAAID,EAAYC,EAAa,EAAI,IAEpEC,IAAKC,IAAU,MACZ,IAAI/F,EAAO,GAAG+F,EAAEjC,SAChB,IAAKkC,qBAAS,OAADD,QAAC,IAADA,GAAS,QAAR,EAADA,EAAGE,cAAM,WAAR,EAAD,EAAWC,OAAQ,OAC5B,MAAQC,IAAuB,QAAR,EAAAJ,EAAEE,cAAM,aAAR,EAAUC,QAAS,GAC1ClG,GAAQ,KAAKmG,EAAWC,cAAcD,EAAWE,eAErD,OAAOrG,MAIvBsG,SAASC,EAAeC,EAAM,IAC1B,MAAO,CACHD,QACAnE,MAAOmE,EACPC,UAGR3G,gBAAgB4G,GACZ,OAAOA,EAAMX,IAAIY,GAAkB,kBAANA,GAA+B,kBAANA,EAC/C,CAAEH,MAAOG,EAAGtE,MAAOsE,GAAMA,IAGpChD,sBACI,MAAO,sBAAsB/E,KAAKE,WAEtCyF,uBACI,OAAO3F,KAAKwF,QAAQC,KAAK,CAACuC,KAAMhI,KAAK+E,yBAEzC,wBACWkD,OAAkBC,OAAO,CAC5BC,iBAAiB,EACjBC,QAAS,0BACTC,UACJ,UACU9H,eAASP,KAAKE,UAAWF,KAAKwF,QAASxF,KAAK4G,QACpD,MAAOP,GACLC,QAAQC,MAAMF,GAElB4B,OAAkBK,SAAS7D,KAAK8D,GAAKA,GAAKN,OAAkBO,YAEhEC,eACI,MAAO,CACH,CAAEb,MAAO,MAAOnE,MAAO,OACvB,CAAEmE,MAAO,KAAMnE,MAAO,QAG9BiF,cAAcd,EAAeC,EAAW,IACpC,MAAO,CACHD,QACAnE,MAAO,GACPoE,MAAO,IACAA,EACHc,OAAQ3I,KAAKyI,kBAIzBG,WAAW3H,GACP,OAAOA,EAAQkG,IAAK0B,IACT,CAAEjB,MAAOiB,EAAQpF,MAAOoF,MAGvCC,qBAAqB7H,GACjB,MAAM8H,EAAkB,GACxB,IAAI,MAAMF,KAAU5H,GACS,mBAAd4H,EAAO,IACVA,EAAO,KAGfE,EAAMtD,KAAKzF,KAAK2H,SAASkB,EAAO,KAEpC,OAAOE,GAEXC,sBACI,MAAO,CACH,CAAEpB,MAAO,MAAOnE,MAAO,OACvB,CAAEmE,MAAO,KAAMnE,MAAO,MACtB,CAAEmE,MAAO,UAAWnE,MAAO,aAGnCwF,WAAWC,EAAUC,EAAI,IACrB,MAAMR,EAAcS,OAAOT,OAAOO,GAC7BG,OAAQvH,GAAWA,IAAMA,EAAEqH,MAAQA,GAAe,KAARA,IAC1CG,OAAO,CAACC,EAAYC,KACjB,MAAM7J,EAAO6J,EAAIN,IAAMM,EAAIN,IAAMM,EAQjC,OAPIC,MAAMC,QAAQ/J,GACd4J,EAAQA,EAAMI,OAAOhK,GACE,oBAATA,EACd4J,EAAM9D,KAAK9F,KAEX4J,EAAM9D,KAAK9F,GAER4J,GACJ,IACX,OAAOK,QAAQC,IAAIlB,IAEvBmB,QAAQC,EAAiBC,GACrB,IACI,OAAOD,EAAIV,OAAQtB,GAAWiC,EAAWjC,IAAIkC,OAAS,EACxD,MAAO5D,GACL,OAAO,IAGf6D,eAAetH,GACX,IACI,IAAI,MAAMmF,KAAKnF,EAAY,CACvB,MAAMuH,EAAYvH,EAAWmF,KAE7B,GAAIoC,EAAW,OAAOA,GAE5B,MAAO9D,GACL,MAAO,CAACA,QCxOxB,MAAM1E,EAAc,EAEL,U,kDCHT,SAAU5D,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQI,yBAAcC,yBAAa0L,qCAAyBpM,EAAKqM,UAAW,CAC1EtL,OAAQf,EAAKe,OACbG,YAAalB,EAAKkB,YAClBoL,YAAatM,EAAKsM,YAClBnL,sBAAuBnB,EAAKmB,sBAC5BoL,WAAYvM,EAAKiB,SACjBA,SAAUjB,EAAKgB,eACfwL,UAAWxM,EAAKyM,SACf,KAAM,GAAI,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN5FnL,+BAAgB,CAC3B+B,KAAM,kBACN9B,WAAY,CAAEmL,wBACdC,MAAO,CACH,WACA,WAEJhL,KAAM,KAAM,CACR0K,SAAU,sBAEdO,MAAO,CACH5L,eAAgB,CACZ2B,KAAMkK,UAEV3L,YAAa,CACTyB,KAAMmK,QACNnM,SAAS,GAEb2L,YAAa,CACT3J,KAAMoK,QAEVhM,OAAQ,CACJ4B,KAAMyI,OACN4B,UAAU,GAEd7L,sBAAuB,CACnBwB,KAAMoK,OACNC,UAAU,IAGlB1K,QAAS,CACLrB,SAASgM,EAAeC,GACpBlL,KAAKmL,MAAM,WAAYF,EAAUC,IAErCT,QAAQ1C,GACJ/H,KAAKmL,MAAM,UAAWpD,O,qBCnClC,MAAMpG,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS5D,KAErD,U,8ECsBf,SAASqN,EAAYpH,EAA4BpB,GAC7C,MAAMqC,EAAQ,GACRoG,EAAU,EAAE,EAAG,GAAI,UAAMC,GAE/B,IAAI,MAAMC,KAAQ3I,EAAY,CAC1B,KAAM2I,KAAQvH,GACV,SAEJ,MAAMP,EAAQO,EAAMuH,GAChBF,EAAQG,SAAS/H,GACjBwB,EAAMQ,MAAK,GAIfR,EAAMQ,KAAK7C,EAAW2I,GAAM9H,EAAOO,IAEvC,OAAOiB,EAAMwG,MAAMX,SAQvB,SAASY,EAAe9F,GACpB,OAAOA,EAASkB,KAAK,CAACC,EAAGC,IAAOD,EAAE7E,UAAY8E,EAAE9E,UAAa6E,EAAE7E,SAAW8E,EAAE9E,UAAY,EAAI,GAGhG,SAASyJ,EAAa/F,GAClB,OAAOA,EAASkB,KAAK,CAACC,EAAGC,IAAOD,EAAE6E,QAAU5E,EAAE4E,QAAW7E,EAAE6E,OAAS5E,EAAE4E,QAAU,EAAI,GAgBlF,SAAU/F,EACZ7B,EACA6H,EACAC,EAAO,GACPC,EAAY,GACZC,EAAO,YACP,MAAMC,EAAU,GAChB,IAAI,MAAMC,KAAkBL,EAAY,CACpC,MAAMlM,EAA2BkM,EAAWK,GACtCC,EAAoB,CACrBxM,EAAKmM,QAAUA,GAAUnM,EAAKmM,QAAUA,EACxCnM,EAAKoM,aAAeA,GACdpM,EAAKoM,aAAeA,GAG3BI,EAAkBC,KAAKtB,UAIvBM,EAAYpH,EAAOrE,EAAKiD,cACxBjD,EAAK0M,MAAQH,EACTvM,EAAK2M,cACL3M,EAAK2M,YAAYC,KAAO5M,EAAK2M,YAAYE,KAAKxI,IAElDiI,EAAQxG,KAAK9F,IAGrB,MAAkB,aAAXqM,EAAwBN,EAAeO,GAAWN,EAAaM,K,wHClGpE,MAAOhM,UAAgCwM,OAI3CC,YAAYxM,EAAmBC,GAAa,GACxCwM,MAAMzM,EAAW,GAAIC,GAAY,8EAHF,IAAIyM,QAInC5M,KAAKE,UAAYA,EAGrB,wBAAwB2M,SAChB7M,KAAK8M,gBAAgBC,SACzB,aAAa/M,KAAKE,2CAA2C2M,KAI/D,mBACI,MAAO,SAAUG,OAAKC,cAAiB,aAAajN,KAAKE","file":"js/chunk-7b204f29.9a91f742.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"View HTS Code\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        skipSummary: true,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { HtsArtInitiationService } from \"../../services/hts_art_initiation_service\";\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsArtInitiationService,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsArtInitiationService(\n            this.patientID,\n            this.providerID\n          );\n          this.fields = [this.htsLinkageCodeField()];\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    onFinish() {\n      this.nextTask();\n    },\n    htsLinkageCodeField() {\n      let linkageCode = \"\";\n      return {\n        id: \"linkage_code\",\n        helpText: \"LINKAGE CODE\",\n        type: FieldType.TT_TEXT_BANNER,\n        init: async () => {\n          linkageCode = await this.service.getHtsCode();\n          return true;\n        },\n        options: () => this.mapStrToOptions([linkageCode]),\n        config: {\n          footerBtns: [\n            {\n              name: \"Print\",\n              slot: \"end\",\n              onClick: async () =>\n                await this.service.printHtsLinkageId(linkageCode),\n            },\n          ],\n          showKeyboard: true,\n          isFilterDataViaApi: true,\n        },\n      };\n    },\n  },\n});\n","import { render } from \"./HtsCode.vue?vue&type=template&id=6477ace8&ts=true\"\nimport script from \"./HtsCode.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsCode.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.formLabel = `${route.name}`.toUpperCase()\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                await nextTask(this.patientID, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { PrintoutService } from '@/services/printout_service';\nimport Prop from \"@/apps/GLOBAL_APP/global_prop\";\nexport class HtsArtInitiationService extends AppEncounterService {\n  patientID: number\n  printoutService: PrintoutService = new PrintoutService()\n    \n  constructor(patientID: number, providerID = -1) {\n      super(patientID, 79, providerID);\n      this.patientID = patientID;\n  }\n\n  async printHtsLinkageId(code: string) {\n    await this.printoutService.printLbl(\n      `/patients/${this.patientID}/labels/print_hts_linkage_code/${code}`\n    );\n  }\n\n    async getHtsCode() {\n        return `${(await Prop.sitePrefix()) || 'FAC'}-HTS-${this.patientID}`\n    }\n}\n"],"sourceRoot":""}