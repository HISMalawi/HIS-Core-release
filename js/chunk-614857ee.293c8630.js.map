{"version":3,"sources":["webpack:///./src/apps/Registration/views/encounters/Services.vue?d33c","webpack:///./src/apps/Registration/services/patient_services_service.ts","webpack:///./src/apps/Registration/views/encounters/Services.vue","webpack:///./src/apps/Registration/views/encounters/Services.vue?3247","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","PatientServicesService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","patientServicesService","watch","ready","isReady","this","patient","getID","getFields","immediate","deep","methods","formData","computedData","encounter","createEncounter","toastWarning","registrationData","resolveObs","registrationObs","saveObservationList","nextTask","id","helpText","type","FieldType","TT_SELECT","validation","value","Validation","required","computedValue","v","obs","buildValueText","options","mapOptions","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","offlineID","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","endTime","elapsedTime","minutes","userAgentObs","getPlatformName","durationObs","buildValueNumber","saveObsOffline","observations","uploadStatus","encounterTypeID","meta","labOrders","synchronizeRecord","skipNextTask","nextOfflineFlow","error","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","toastDanger","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","toOption","label","other","mapStrToOptions","items","i","path","task","nextPatientWorkflowActivity","patientUrl","yesNoOptions","toYesNoOption","values","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-614857ee.293c8630.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class PatientServicesService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 5, providerID) \n    }\n}","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientServicesService } from '@/apps/Registration/services/patient_services_service'; \nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { toastWarning } from '@/utils/Alerts';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        patientServicesService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.patientServicesService = new PatientServicesService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            const encounter = await this.patientServicesService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create registration encounter')\n            \n            const registrationData = await this.resolveObs({...computedData})\n            const registrationObs = await this.patientServicesService.saveObservationList(registrationData)\n            if (!registrationObs) return toastWarning('Unable to save observations')\n\n            this.nextTask()        \n        },\n        \n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'referral',\n                    helpText: 'Select service',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: (v: Option) => ({ obs: this.patientServicesService.buildValueText('Services ordered', v.value)}),\n                    options: ()=> this.mapOptions(['Casualty', 'Dental', 'Eye', 'Family Planing', 'Medical', 'OB/Gyn', 'Orthopedics',\n                        'Pediatrics', 'Skin', 'STI Clinic', 'Surgical', 'Other'\n                    ]) \n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Services.vue?vue&type=template&id=61befeee&ts=true\"\nimport script from \"./Services.vue?vue&type=script&lang=ts\"\nexport * from \"./Services.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n                Offline().saveObsOffline({\n                    observations: obs,\n                    id: this.offlineID,\n                    uploadStatus: status,\n                    encounterName: this.$route.name,\n                    encounterTypeID: params.encounterTypeID,\n                    meta: params.formData,\n                    labOrders: params.labOrders,\n                    created\n                }, created)\n                Offline().synchronizeRecord(this.offlineID)\n                if (!params.skipNextTask) this.nextOfflineFlow()\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            // if (!this.isOfflineMode()) {\n            //     try {\n            //         const enc = new AppEncounterService(\n            //             this.patientID,\n            //             params.encounterTypeID, \n            //             this.providerID\n            //         )\n            //         if ((await enc.createEncounter())) {\n            //             if ((await enc.saveObservationList(obs as ObsValue[]))) {\n            //                 status = 'Success'\n            //             }\n            //         }\n            //         if (typeof params.callback === 'function') {\n            //             await params.callback(enc)\n            //         }\n            //         created = true\n            //     } catch (e) {\n            //         created = false\n            //         if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n            //             status = 'NetworkError'\n            //         } else {\n            //             status = 'Exception'\n            //             console.error(`Exception while saving an encounter: ${e}`)\n            //         }\n            //     }\n            //     if (status === 'Exception') {\n            //         return toastDanger(\"An error has occured!\")\n            //     }\n            // }\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextOfflineFlow() {\n            const task = Offline().nextPatientWorkflowActivity(this.patientID)\n            if (!task || !task.patientUrl) return this.$router.push(`/patient/dashboard/${this.patientID}`)\n            return this.$router.push(`${task.patientUrl}/${this.patientID}`) \n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}