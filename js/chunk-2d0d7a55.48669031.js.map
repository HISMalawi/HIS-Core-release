{"version":3,"sources":["webpack:///./src/apps/CxCa/views/reports/clinic/Monthly_CxCa_Screen_Report.vue?6e59","webpack:///./src/apps/CxCa/views/reports/clinic/Monthly_CxCa_Screen_Report.vue","webpack:///./src/apps/CxCa/views/reports/clinic/Monthly_CxCa_Screen_Report.vue?e497"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_loading","_resolveComponent","_component_v2Datatable","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","isLoading","message","title","subtitle","period","columns","columnData","reportData","rowsPerPage","onConfigure","configure","csvQuarter","onRefresh","generate","order","headers","csvheaders","spacing","subHeaders","_","ref","startDate","endDate","defineComponent","components","IonPage","IonLoading","v2Datatable","setup","convertToArray","data","totals","convertedData","convertGroupToArray","first_time_screened","rescreened_after_prev_visit","post_treatment_followup","push","extractTotals","group","map","item","age_group","procedures","extractedTotals","key","obj","drilldown","async","patientIdentifiers","modalController","create","component","DrillPatientIds","backdropDismiss","cssClass","componentProps","onFinish","getTop","then","v","dismiss","present","label","span","thColspan","value","secondaryLabel","negative","length","tdClick","column","positive","for_same_day_tx","suspected","exportable","total_screened","total_negative","total_via_plus_eligible_for_same_day_tx","total_positive","total_suspect_cancer","total_via_reffered","suspects_reffered","total_reffered","toastWarning","report","CxCaReportService","rawReport","getClinicReport","e","toastDanger","console","error","MultiStepPopupForm","id","helpText","type","FieldType","TT_NUMBER","computedValue","validation","year","isPlainObject","Validation","validateSeries","required","isNaN","parseInt","rangeOf","HisDate","getYear","Service","getSessionDate","TT_SELECT","options","f","month","dayjs","Date","toISOString","endOf","format","toDate","onMounted","__exports__"],"mappings":"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","file":"js/chunk-2d0d7a55.48669031.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_loading = _resolveComponent(\"ion-loading\")!\n  const _component_v2Datatable = _resolveComponent(\"v2Datatable\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_loading, {\n        \"is-open\": _ctx.isLoading,\n        message: \"Please wait...\"\n      }, null, 8, [\"is-open\"]),\n      _createVNode(_component_v2Datatable, {\n        title: \"Monthly Screen Report\",\n        subtitle: _ctx.period,\n        columns: _ctx.columns,\n        columnData: _ctx.reportData,\n        rowsPerPage: 25,\n        onConfigure: _ctx.configure,\n        csvQuarter: _ctx.csvQuarter,\n        onRefresh: () => _ctx.generate(),\n        order: _ctx.order,\n        headers: _ctx.csvheaders,\n        \"csv-spacing\": _ctx.spacing,\n        \"csv-sub-header\": _ctx.subHeaders\n      }, null, 8, [\"subtitle\", \"columns\", \"columnData\", \"onConfigure\", \"csvQuarter\", \"onRefresh\", \"order\", \"headers\", \"csv-spacing\", \"csv-sub-header\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent, ref, onMounted } from 'vue';\nimport { IonPage, IonLoading, modalController } from \"@ionic/vue\"\nimport  v2Datatable from \"@/apps/CxCa/views/reports/clinic/TableView.vue\"\nimport { v2ColumnDataInterface, v2ColumnInterface } from '@/components/DataViews/tables/v2PocDatatable/types';\nimport { CxCaReportService } from \"@/apps/CxCa/services/reports/cxca_report_service\"\nimport { toastDanger, toastWarning } from '@/utils/Alerts';\nimport DrillPatientIds from '../../../../../components/DrillPatientIds.vue';\nimport { toDate } from '@/utils/Strs';\nimport { MultiStepPopupForm } from \"@/utils/PopupKeyboard\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { isPlainObject } from \"lodash\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Service } from \"@/services/service\"\nimport HisDate from \"@/utils/Date\"\nimport dayjs from \"dayjs\";\n\n\nconst reportData = ref<any>([])\nconst startDate = ref('')\nconst endDate = ref('')\nconst period = ref('')\nconst isLoading = ref(false)\nconst csvQuarter = ref('')\n\nexport default defineComponent({ \n    components: { \n        IonPage,\n        IonLoading,\n        v2Datatable,\n    },\n    setup() {\n        const totals = ref<any[]>([])\n\n        const convertToArray = (data: any, totals: any) => {\n            const convertedData = [\n                convertGroupToArray(data.first_time_screened),\n                convertGroupToArray(data.rescreened_after_prev_visit),\n                convertGroupToArray(data.post_treatment_followup),\n            ];\n\n            convertedData.push(extractTotals(totals))\n\n            return convertedData\n        }\n        const convertGroupToArray = (group: any) =>  {\n            return group.map((item: { [x: string]: any; age_group: any }) => {\n                const { age_group, ...procedures } = item;\n                return { ...procedures, age_group };\n            });\n        }\n\n        const extractTotals = (data: any) => {\n            const extractedTotals: { [key: string]: any }[] = [];\n            for (const key in data) {\n                const obj: { [key: string]: any } = {};\n                obj[key] = data[key];\n                extractedTotals.push(obj);\n            }\n            return extractedTotals;\n        }\n\n        const drilldown = async (title: string, patientIdentifiers: number[]) => {\n            (await modalController.create({\n                component: DrillPatientIds,\n                backdropDismiss: false,\n                cssClass: 'large-modal',\n                componentProps: {\n                    title,\n                    subtitle: period,\n                    patientIdentifiers,\n                    onFinish: () => modalController.getTop().then(v => v && modalController.dismiss())\n                }\n            })).present()\n        }\n        /**\n         * ordering of columns\n         */\n        const order = [\n            'age_group',\n            'negative',\n            'positive',\n            'for_same_day_tx',\n            'suspected'\n        ];\n\n        //csv headers\n        const csvheaders = [\n            'Age Group', \n            'Negative', \n            'Positive', \n            'For same day Tx',\n            'Suspected Cancer'\n        ];\n\n        //sub headers for report sections\n        const subHeaders = [\n                    [\"\",\"\",'1st time screened',\"\",\"\"],\n                    [\"\",\"\",'Rescreened after previous negative',\"\",\"\"],\n                    [\"\",\"\",'Post-treatment follow-up',\"\",\"\"],\n                    [\"\",\"\",'Month Summary',\"\",\"\"]\n            ];\n\n        //blank spacing for csv spacing\n        const spacing = 3;\n\n\n        /**\n         * Table column definition and value mapping\n         */\n        const columns: Array<v2ColumnInterface[]> = [\n            [\n                {\n                    label: \"Facility:\",\n                    ref: \"\"\n                },\n                {\n                    label: \"Month/Year:\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 1,\n                    }\n                },\n                {\n                    label: \"Report Officer:\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3,\n                    }\n                },\n            ],\n            [\n                {\n                    label: \"Age Disaggregate:\",\n                    ref: \"data.age_group\",\n                    value: (data: any) => data.age_group\n                },\n                {\n                    label: \"Negative\",\n                    ref: \"data.cryotherapy.length\",\n                    secondaryLabel: \"1st screened (negative)\",\n                    value: (data: any) => data.negative.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.negative\n                    )\n                },\n                {\n                    label: \"Positive\",\n                    ref: \"data.positive.length\",\n                    secondaryLabel: \"1st screened (positive)\",\n                    value: (data: any) => data.positive.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.positive\n                    )\n                },\n                {\n                    label: \"For same day Tx\",\n                    ref: \"data.for_same_day_tx.length\",\n                    secondaryLabel: \"1st screened (For same day Tx)\",\n                    value: (data: any) => data.for_same_day_tx.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.for_same_day_tx\n                    )\n                },\n                {\n                    label: \"Suspected Cancer\",\n                    ref: \"data.suspected.length\",\n                    secondaryLabel: \"1st screened (Suspected Cancer)\",\n                    value: (data: any) => data.suspected.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.suspected\n                    )\n                }\n            ],\n            [\n                {\n                    label: \"Age Disaggregate:\",\n                    ref: \"data.age_group\",\n                    value: (data: any) => data.age_group\n                },\n                {\n                    label: \"Negative\",\n                    ref: \"data.cryotherapy.length\",\n                    secondaryLabel: \"Rescreened after previous negative (negative)\",\n                    value: (data: any) => data.negative.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.negative\n                    )\n                },\n                {\n                    label: \"Positive\",\n                    ref: \"data.positive.length\",\n                    secondaryLabel: \"Rescreened after previous negative (positive)\",\n                    value: (data: any) => data.positive.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.positive\n                    )\n                },\n                {\n                    label: \"For same day Tx\",\n                    ref: \"data.for_same_day_tx.length\",\n                    secondaryLabel: \"Rescreened after previous negative (For same day Tx)\",\n                    value: (data: any) => data.for_same_day_tx.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.for_same_day_tx\n                    )\n                },\n                {\n                    label: \"Suspected Cancer\",\n                    ref: \"data.suspected.length\",\n                    secondaryLabel: \"Rescreened after previous negative (Suspected Cancer)\",\n                    value: (data: any) => data.suspected.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.suspected\n                    )\n                }\n            ],\n            [\n                {\n                    label: \"Age Disaggregate:\",\n                    ref: \"data.age_group\",\n                    value: (data: any) => data.age_group\n                },\n                {\n                    label: \"Negative\",\n                    ref: \"data.cryotherapy.length\",\n                    secondaryLabel: \"Post-treatment follow-up (negative)\",\n                    value: (data: any) => data.negative.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.negative\n                    )\n                },\n                {\n                    label: \"Positive\",\n                    ref: \"data.positive.length\",\n                    secondaryLabel: \"Post-treatment follow-up positive)\",\n                    value: (data: any) => data.positive.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.positive\n                    )\n                },\n                {\n                    label: \"For same day Tx\",\n                    ref: \"data.for_same_day_tx.length\",\n                    secondaryLabel: \"Post-treatment follow-up (For same day Tx)\",\n                    value: (data: any) => data.for_same_day_tx.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.for_same_day_tx\n                    )\n                },\n                {\n                    label: \"Suspected Cancer\",\n                    ref: \"data.suspected.length\",\n                    secondaryLabel: \"Post-treatment follow-up (Suspected Cancer)\",\n                    value: (data: any) => data.suspected.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.suspected\n                    )\n                }\n            ],\n            [\n                {\n                    label: \"1st time Screened\",\n                    ref: \"\",\n                    exportable: false,\n                    span: {\n                        thColspan: 7,\n                    }\n                }\n            ],\n            [\n                {\n                    label: \"Rescreened after previous negative\",\n                    ref: \"\",\n                    exportable: false,\n                    span: {\n                        thColspan: 7,\n                    }\n                }\n            ],\n            [\n                {\n                    label: \"Post-treatment follow-up\",\n                    ref: \"\",\n                    \n                    span: {\n                        thColspan: 7,\n                    }\n                }\n            ],\n            [\n                {\n                    label: \"Month Summary\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 7,\n                    }\n                }\n            ],\n            [\n                {\n                    label: \"Total Screened\",\n                    ref: \"data.total_screened.length\",\n                    secondaryLabel: \"Total Screened\",\n                    value: (data: any) => data.total_screened.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${column.secondaryLabel}`, data.total_screened\n                    )\n                }\n            ],\n            [\n                {\n                    label: \"Total Negative\",\n                    ref: \"data.total_negative.length\",\n                    secondaryLabel: \"Total Negative\",\n                    value: (data: any) => data.total_negative.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${column.secondaryLabel}`, data.total_negative\n                    )\n                }\n            ],\n            [\n                {\n                    label: \"Total Via + eligible for same day Tx\",\n                    ref: \"data.total_via_plus_eligible_for_same_day_tx.length\",\n                    secondaryLabel: \"Total Via + eligible for same day Tx\",\n                    value: (data: any) => data.total_via_plus_eligible_for_same_day_tx.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${column.secondaryLabel}`, data.total_via_plus_eligible_for_same_day_tx\n                    )\n                }\n            ],\n            [\n                {\n                    label: \"Total Positive\",\n                    ref: \"data.total_positive.length\",\n                    secondaryLabel: \"Total Positive\",\n                    value: (data: any) => data.total_positive.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${column.secondaryLabel}`, data.total_positive\n                    )\n                }\n            ],\n            [\n                {\n                    label: \"Total Suspected Cancer\",\n                    ref: \"data.total_suspect_cancer.length\",\n                    secondaryLabel: \"Total Suspected Cancer\",\n                    value: (data: any) => data.total_suspect_cancer.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${column.secondaryLabel}`, data.total_suspect_cancer\n                    )\n                }\n            ],\n            [\n                {\n                    label: \"Total VIA+ Referred\",\n                    ref: \"data.total_via_reffered.length\",\n                    secondaryLabel: \"Total VIA+ Referred\",\n                    value: (data: any) => data.total_via_reffered.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${column.secondaryLabel}`, data.total_via_reffered\n                    )\n                }\n            ],\n            [\n                {\n                    label: \"Total CXCA Suspect Referred\",\n                    ref: \"data.suspects_reffered.length\",\n                    secondaryLabel: \"Total CXCA Suspect Referred\",\n                    value: (data: any) => data.suspects_reffered.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${column.secondaryLabel}`, data.suspects_reffered\n                    )\n                }\n            ],\n            [\n                {\n                    label: \"Total Referred\",\n                    ref: \"data.total_reffered.length\",\n                    secondaryLabel: \"Total Referred\",\n                    value: (data: any) => data.total_reffered.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${column.secondaryLabel}`, data.total_reffered\n                    )\n                }\n            ]\n        ]\n        /**\n         * Generates report by start date and end date\n         */\n         const generate = async () => {\n            if (!(startDate.value && endDate.value))  {\n                return toastWarning('Start date and end date required!')\n            }\n            isLoading.value = true\n            reportData.value = []\n            const report = new CxCaReportService()\n            report.startDate = startDate.value\n            report.endDate = endDate.value\n            try {\n                const rawReport = (await report.getClinicReport('MONTHLY SCREEN'))\n                reportData.value = convertToArray(rawReport.data, rawReport.totals)\n            } catch (e) {\n                toastDanger(\"Unable to generate report!\")\n                console.error(e)\n            }\n            isLoading.value = false\n        }\n        /**\n         * Loads a dialogue to allow users to configure start and end date\n         */\n         const configure = () => MultiStepPopupForm([\n            {\n                id: 'year',\n                helpText: 'Select Year',\n                type: FieldType.TT_NUMBER,\n                computedValue: (v: Option) => v.value,\n                validation: (v: Option) => {\n                    const year = isPlainObject(v) ? v.value : -1\n                    return Validation.validateSeries([\n                        () => Validation.required(v),\n                        () => {\n                            if (isNaN(parseInt(`${year}`))) {\n                                return ['Invalid year']\n                            }\n                            return null\n                        },\n                        () => Validation.rangeOf(v, 2000, HisDate.getYear(Service.getSessionDate()))\n                    ])\n                }\n            },\n            {\n                id: 'month',\n                helpText: 'Select Month',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => v.value,\n                options: () => {\n                    return [\n                        {label: 'January', value: '01'},\n                        {label: 'February', value: '02'},\n                        {label: 'March', value: '03'},\n                        {label: 'April', value: '04'},\n                        {label: 'May', value: '05'},\n                        {label: 'June', value: '06'},\n                        {label: 'July', value: '07'},\n                        {label: 'August', value: '08'},\n                        {label: 'September', value: '09'},\n                        {label: 'October', value: '10'},\n                        {label: 'November', value: '11'},\n                        {label: 'December', value: '12'}\n                    ]\n                }\n            }\n        ],\n        {\n            onFinish: (f: any) => {\n                    startDate.value = `${f.year.value}-${f.month.value}-01`\n                    endDate.value = dayjs(new Date(startDate.value).toISOString()).endOf(\"month\").format(\"YYYY-MM-DD\")\n                    period.value = `Period (${toDate(startDate.value)} to ${toDate(endDate.value)})`\n                    modalController.dismiss()\n                    csvQuarter.value = `${toDate(startDate.value)} to ${toDate(endDate.value)}`\n                    generate()\n                }\n            }\n        )\n\n        /**\n         * Initialization code when the report is empty!\n         */\n        onMounted(() => !reportData.value.length && configure())\n\n\n        return  {\n            columns,\n            isLoading,\n            reportData,\n            period,\n            csvQuarter,\n            generate,\n            configure,\n            order,\n            csvheaders,\n            spacing,\n            subHeaders\n        }\n    }\n})\n\n","import { render } from \"./Monthly_CxCa_Screen_Report.vue?vue&type=template&id=466bdb3c&ts=true\"\nimport script from \"./Monthly_CxCa_Screen_Report.vue?vue&type=script&lang=ts\"\nexport * from \"./Monthly_CxCa_Screen_Report.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}