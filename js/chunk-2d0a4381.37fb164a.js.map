{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue?5e17","webpack:///./src/apps/CxCa/services/CxCaTreatmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue?dae6"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","TreatmentService","patientID","providerID","this","getFirstValueCoded","screeningResult","treatmentType","referralReason","AppEncounterService","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","reception","summaryData","watch","patient","handler","getSummary","setReason","getFields","deep","methods","reason","showSampleCollected","reasons","includes","formData","computed","createEncounter","encounter","toastWarning","programID","ProgramService","getProgramID","getProgramWorkflows","workflows","flows","forEach","w","states","f","conceptID","program_workflow_state_id","conceptName","concept","concept_names","name","stateValue","patient_outcome","value","state","getLocationName","date","getSessionDate","createState","saveState","vals","Object","keys","element","push","obs","Promise","all","saveObservationList","toastSuccess","nextTask","id","helpText","type","FieldType","TT_DATA_TABLE","config","rows","map","k","table","td","dataTableConfig","showIndex","TT_SELECT","validation","val","Validation","required","condition","match","options","mapOptions","computedValue","buildValueText","label","formdata","type_of_sample_collected","__exports__"],"mappings":"yIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,IAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,OAAQV,EAAKU,OACbC,eAAgBX,EAAKY,SACrBC,aAAa,EACbC,sBAAuBd,EAAKe,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,0B,sPCR9BC,EAAb,wDACI,WAAYC,EAAmBC,GAAkB,0CACvCD,EAAW,IAAKC,GAF9B,0GAII,wHACkCC,KAAKC,mBAAmB,qBAD1D,cACUC,EADV,gBAEgCF,KAAKC,mBAAmB,sCAFxD,cAEUE,EAFV,gBAGiCH,KAAKC,mBAAmB,mBAHzD,cAGUG,EAHV,yBAIW,CACL,mBAAoBF,EACpB,iBAAkBC,EAClB,kBAAmBC,GAAkC,QAP3D,iDAJJ,8DAAsCC,Q,oCCUvBC,+BAAgB,CAC7BC,OAAQ,CAACC,QACTC,WAAY,CAAEC,wBACdC,KAAM,iBAAO,CACXC,UAAW,GACXC,YAAa,GACbT,eAAgB,KAElBU,MAAO,CACLC,QAAS,CACDC,QADC,WACM,+JACX,EAAKJ,UAAY,IAAIf,EAAiB,EAAKC,UAAW,EAAKC,YADhD,SAEc,EAAKa,UAAUK,aAF7B,cAEX,EAAKJ,YAFM,gBAGL,EAAKK,YAHA,OAIX,EAAK3B,OAAS,EAAK4B,YAJR,8CAMbC,MAAM,IAGVC,QAAS,CACDH,UADC,WACQ,8KACQ,EAAKN,UAAUX,mBAAmB,mBAD1C,OACPqB,EADO,OAEb,EAAKlB,eAAiBkB,GAAkB,MAF3B,8CAKfC,oBANO,WAOL,IAAMC,EAAU,CAAC,sBAAsB,iBAAkB,wCACzD,OAAOA,EAAQC,SAASzB,KAAKI,iBAEzBX,SAVC,SAUQiC,EAAeC,GAAa,gMACjB,EAAKf,UAAUgB,kBADE,UACnCC,EADmC,OAGpCA,EAHsC,CAAF,wCAGlBC,eAAa,+BAHK,cAInCC,EAAYC,OAAeC,eAJQ,SAMjCD,OAAeE,oBAAoBF,OAAeC,gBANjB,cAKnCE,EALmC,OAOnCC,EAAQ,GACdD,EAAUE,SAAQ,SAACC,GACjBA,EAAEC,OAAOF,SAAQ,SAACG,GAChB,IAAMC,EAAYD,EAAEE,0BACdC,EAAcH,EAAEI,QAAQC,cAAc,GAAGC,KAC/CV,EAAMO,GAAeF,QAGnBM,EAAarB,EAASsB,gBAAkBtB,EAASsB,gBAAgBC,MAAQ,qBACzEC,EAAQ,CACZ,YAAelB,OAAemB,kBAC9BD,MAAOd,EAAMW,GACbK,KAAMpB,OAAeqB,kBAnBkB,UAqBjBrB,OAAesB,YACrC,EAAKxD,UACLiC,EACAmB,GAxBuC,WAqBnCK,EArBmC,OA0BpCA,EA1BsC,CAAF,yCA0BlBzB,eAAa,2BA1BK,eA2BnC0B,EAAY,GAClBC,OAAOC,KAAK/B,GAAUU,SAAQ,SAAAsB,GAC5BH,EAAKI,KAAKjC,EAASgC,GAASE,QA7BW,UA+BtBC,QAAQC,IAAR,UAAgBP,IA/BM,eA+BnC7C,EA/BmC,iBAiCvB,EAAKC,UAAUoD,oBAAoBrD,GAjCZ,WAiCnCkD,EAjCmC,OAmCpCA,EAnCsC,CAAF,yCAmCxB/B,eAAa,wCAnCW,QAoCzCmC,eAAa,uCACb,EAAKC,WArCoC,+CAwC3C/C,UAlDO,WAkDE,WACP,MAAO,CACL,CACEgD,GAAI,oBACJC,SAAU,oBACVC,KAAMC,OAAUC,cAChBC,OAAQ,CACNC,KAAM,WACJ,OAAOhB,OAAOC,KAAK,EAAK7C,aAAa6D,KAAI,SAACC,GACxC,MAAO,CAACC,OAAMC,GAAGF,GAAIC,OAAMC,GAAG,EAAKhE,YAAY8D,SAGrDG,gBAAiB,CACfC,WAAW,KAIf,CACEZ,GAAI,uBACJC,SAAU,uBACVC,KAAMC,OAAUU,UAChBC,WAAY,SAACC,GAAD,OAAcC,OAAWC,SAASF,IAC9CG,UAAW,kBAAM,EAAKjF,eAAekF,MAAM,cAC3CC,QAAS,kBACP,EAAKC,WAAW,CACd,mBACA,mBACA,mBACA,mBACA,mBAEFC,cAAe,SAACxC,GAAD,MAAiB,CAChCY,IAAK,EAAKjD,UAAU8E,eAAe,kCAAmCzC,EAAM0C,UAGhF,CACExB,GAAI,2BACJC,SAAU,2BACVC,KAAMC,OAAUU,UAChBC,WAAY,SAACC,GAAD,OAAcC,OAAWC,SAASF,IAC9CG,UAAU,kBAAK,EAAK9D,uBACpBgE,QAAS,kBACP,EAAKC,WAAW,CACd,eACA,eACA,mBAEJC,cAAe,SAACxC,GAAD,MAAiB,CAC9BY,IAAK,EAAKjD,UAAU8E,eAAe,SAAUzC,EAAM0C,UAGvD,CACExB,GAAI,oBACJC,SAAU,oBACVC,KAAMC,OAAUU,UAChBC,WAAY,SAACC,GAAD,OAAcC,OAAWC,SAASF,IAC9CG,UAAW,SAACO,GAAD,MAA+D,kBAA5CA,EAASC,yBAAyB5C,OAA6B,EAAK1B,uBAClGgE,QAAS,kBACP,EAAKC,WAAW,CACd,SACA,QACA,QACA,QACA,oBACA,4BACA,wBACA,mBAEFC,cAAe,SAACxC,GAAD,MAAiB,CAChCY,IAAK,EAAKjD,UAAU8E,eAAe,SAAUzC,EAAM0C,UAGvD,CACExB,GAAI,gBACJC,SAAU,gBACVC,KAAMC,OAAUU,UAChBC,WAAY,SAACC,GAAD,OAAcC,OAAWC,SAASF,IAC9CG,UAAW,SAACO,GAAD,MAA+D,kBAA5CA,EAASC,yBAAyB5C,OAA6B,EAAK1B,uBAClGgE,QAAS,kBACP,EAAKC,WAAW,CACd,WACA,OACA,UAEFC,cAAe,SAACxC,GAAD,MAAiB,CAChCY,IAAK,EAAKjD,UAAU8E,eAAe,gBAAiBzC,EAAM0C,UAI9D,CACExB,GAAI,mBACJC,SAAU,sBACVC,KAAMC,OAAUU,UAChBC,WAAY,SAACC,GAAD,OAAcC,OAAWC,SAASF,IAC9CK,QAAS,kBACP,EAAKC,WAAW,CACd,eACA,cACA,OACA,kBACA,QACA,aACA,oBACA,qBACA,qBAEJC,cAAe,SAACxC,GAAD,MAAiB,CAC9BY,IAAK,EAAKjD,UAAU8E,eAAe,YAAazC,EAAM0C,UAG1D,CACExB,GAAI,2BACJC,SAAU,2BACVC,KAAMC,OAAUU,UAChBC,WAAY,SAACC,GAAD,OAAcC,OAAWC,SAASF,IAC9CG,UAAW,iBAA6C,uBAAvC,EAAKxE,YAAY,mBAClC0E,QAAS,kBACP,EAAKC,WAAW,CACd,eACA,gBACA,aACA,wBAEFC,cAAe,SAACxC,GAAD,MAAiB,CAChCY,IAAK,EAAKjD,UAAU8E,eAAe,2BAA4BzC,EAAM0C,UAEvE,CACAxB,GAAI,kBACJC,SAAU,kBACVC,KAAMC,OAAUU,UAChBK,UAAW,iBAA6C,uBAAvC,EAAKxE,YAAY,mBAClCoE,WAAY,SAACC,GAAD,OAAcC,OAAWC,SAASF,IAC9CK,QAAS,kBACP,EAAKC,WAAW,CACd,qBACA,oBACA,sBACA,wB,qBCrNd,MAAMM,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASlH,KAErD","file":"js/chunk-2d0a4381.37fb164a.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class TreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 182, providerID) //TODO: Use encounter type reference name'\n    }\n    async getSummary() {\n        const screeningResult = await this.getFirstValueCoded('Screening results');\n        const treatmentType = await this.getFirstValueCoded('Directly observed treatment option');\n        const referralReason = await this.getFirstValueCoded('Referral reason');\n        return {\n          'Screening Result': screeningResult,\n          'Treatment Type': treatmentType,\n          'Referral Reason': referralReason ? referralReason : \"N/A\"  \n        }\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { TreatmentService } from \"@/apps/CxCa/services/CxCaTreatmentService\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ProgramWorkflow } from \"@/interfaces/program_workflow\";\nimport table from \"@/components/DataViews/tables/ReportDataTable\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    reception: {} as any,\n    summaryData: {} as any,\n    referralReason: \"\"\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.reception = new TreatmentService(this.patientID, this.providerID);\n        this.summaryData = await this.reception.getSummary();\n        await this.setReason();\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async setReason() {\n      const reason = await this.reception.getFirstValueCoded('Referral reason');\n      this.referralReason = reason ? reason : \"N/A\"\n\n    },\n    showSampleCollected() {\n      const reasons = ['Large Lesion (>75%)','Suspect cancer', 'Further Investigation and Management'];\n      return reasons.includes(this.referralReason);\n    },\n    async onFinish(formData: any, computed: any) {\n      const encounter = await this.reception.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const programID = ProgramService.getProgramID();\n      const workflows: ProgramWorkflow[] =\n        await ProgramService.getProgramWorkflows(ProgramService.getProgramID());\n      const flows = {} as any;\n      workflows.forEach((w) => {\n        w.states.forEach((f) => {\n          const conceptID = f.program_workflow_state_id;\n          const conceptName = f.concept.concept_names[0].name;\n          flows[conceptName] = conceptID;\n        });\n      });\n      const stateValue = formData.patient_outcome ? formData.patient_outcome.value : 'Continue follow-up';\n      const state = {\n        'location_id': ProgramService.getLocationName(),\n        state: flows[stateValue],\n        date: ProgramService.getSessionDate(),\n      };\n      const saveState = await ProgramService.createState(\n        this.patientID,\n        programID,\n        state\n      );\n      if (!saveState) return toastWarning(\"Unable to update state\");\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...vals]);\n\n      const obs = await this.reception.saveObservationList(data);\n\n      if (!obs) return toastWarning(\"Unable to save patient observations\");\n      toastSuccess(\"Observations and encounter created!\");\n      this.nextTask();\n    },\n\n    getFields(): any {\n      return [\n        {\n          id: \"screening_summary\",\n          helpText: \"Screening Summary\",\n          type: FieldType.TT_DATA_TABLE,\n          config: {\n            rows: () => {\n              return Object.keys(this.summaryData).map((k: string) => {\n                return [table.td(k), table.td(this.summaryData[k])];\n              });\n            },\n          dataTableConfig: {\n            showIndex: false\n          },\n          },\n        },\n        {\n          id: \"figo_staging_results\",\n          helpText: \"FIGO staging results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.referralReason.match(/suspect/gi),\n          options: () =>\n            this.mapOptions([\n              'Cervical stage 1',\n              'Cervical stage 2',\n              'Cervical stage 3',\n              'Cervical stage 4',\n              'Not available',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('FIGO staging of cervical cancer', value.label)\n          })\n        },\n        {\n          id: \"type_of_sample_collected\",\n          helpText: \"Type of sample collected\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition:()=> this.showSampleCollected(),\n          options: () =>\n            this.mapOptions([\n              'Punch Biopsy',\n              'LLETZ sample',\n              'Not available',\n            ]),\n          computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Sample', value.label)\n          })\n        },\n        {\n          id: \"histology_results\",\n          helpText: \"Histology results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formdata: any) => formdata.type_of_sample_collected.value !== \"Not available\" && this.showSampleCollected(), \n          options: () =>\n            this.mapOptions([\n              'Normal',\n              'CIN 1',\n              'CIN 2',\n              'CIN 3',\n              'Carcinoma in Situ',\n              'Invasive cancer of cervix',\n              'Benign cervical warts',\n              'Not available',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Sample', value.label)\n          })\n        },\n        {\n          id: \"complications\",\n          helpText: \"Complications\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formdata: any) => formdata.type_of_sample_collected.value !== \"Not available\" && this.showSampleCollected(), \n          options: () =>\n            this.mapOptions([\n              'Bleeding',\n              'Pain',\n              'None',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Complications', value.label)\n          })\n\n        },\n        {\n          id: \"referral_outcome\",\n          helpText: \"Treatment performed\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () =>\n            this.mapOptions([\n              'Hysterectomy',\n              'Cryotherapy',\n              'Leep',\n              'Palliative Care',\n              'LLETZ',\n              'Conisation',\n              'Thermocoagulation',\n              'Chronic cervicitis',\n              'Patient refused',\n            ]),\n          computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Treatment', value.label)\n          })\n        },\n        {\n          id: \"recommended_plan_of_care\",\n          helpText: \"Recommended plan of care\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.summaryData['Treatment Type'] !== \"Same day treatment\",\n          options: () =>\n            this.mapOptions([\n              'Hysterectomy',\n              'Trachelectomy',\n              'Discharged',\n              'Continue follow-up',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Recommended Plan of care', value.label)\n          })\n        },{\n          id: \"patient_outcome\",\n          helpText: \"Patient outcome\",\n          type: FieldType.TT_SELECT,\n          condition: () => this.summaryData['Treatment Type'] !== \"Same day treatment\",\n          validation: (val: any) => Validation.required(val),\n          options: () =>\n            this.mapOptions([\n              'Continue follow-up',\n              'Pallialative care',\n              'No Dysplasia/Cancer',\n              'Patient died',\n            ]),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTreatment.vue?vue&type=template&id=6730f0bc&ts=true\"\nimport script from \"./CxCaTreatment.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTreatment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}