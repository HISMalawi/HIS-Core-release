{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/composables/storage.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/guidelines/staging_guidelines.ts","webpack:///./src/apps/ART/services/staging_service.ts","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue?6de3","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","saveObsOffline","observations","id","uploadStatus","encounterTypeID","meta","formData","labOrders","synchronizeRecord","skipNextTask","nextOfflineFlow","error","toastWarning","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","toastDanger","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","toOption","label","other","mapStrToOptions","items","i","path","task","nextPatientWorkflowActivity","patientUrl","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","INDEX_STORE","DB_NAME","storageFactory","storageName","eval","LocalStorage","existsinStorage","key","localStorage","getItem","resolve","getFromStorage","reject","JSON","parse","deleteFromStorage","removeItem","saveToStorage","setItem","stringify","IndexedDBStorage","constructor","_defineProperty","openRequest","indexedDB","open","onupgradeneeded","result","createObjectStore","onsuccess","db","request","transaction","objectStore","onerror","filters","openCursor","cursor","filteredData","continue","put","delete","item","entries","every","isInteger","toLower","includes","isCondition","ignored","undefined","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","ADULT_WHO_STAGE_CRITERIA","concept","stage","reasonForArt","reason","CHILD_WHO_STAGE_CRITERIA","CONTRADICTING_STAGE_DEFINITIONS_ALERTS","alertConfirmation","bmi","confirmBtnLabel","cancelBtnLabel","selectedCondition","keepAsymptomatic","selectedConditions","stageThreeConditions","stageFourConditions","stageTwoConditions","RECOMMENDED_CHILD_STAGING_CONDITIONS","isChecked","show","weightPercentile","disabled","RECOMMENDED_ADULT_STAGING_CONDITIONS","CHILD_ART_ELIGIBILITY","ageInMonths","pshdConditions","ConceptService","getConceptsByCategory","pshdCondition","testType","cd4Date","date","cd4","cd4Modifier","modifier","breastFeeding","answer","pregnant","ADULT_ART_ELIGIBILITY","severeSymp","found","total","symp","StagingCategory","StagingService","super","confirmatoryTest","isAdult","isPedaid","setAge","getFacilities","LocationService","getConfirmatoryTestType","cd4CountIsValid","match","getAlertGuidelines","getWhoStageGuidelines","getProgramEligibilityGuidelines","getRecommendedConditionGuidelines","getStagingConditions","category","getStagingCategoryByNum","buildWhoStageObs","buildValueCoded","buildWhoCriteriaObs","buildReasonForArtObs","stageNumber","ADULT_STAGE_1","PEDAID_STAGE_1","ADULT_STAGE_2","PEDAID_STAGE_2","ADULT_STAGE_3","PEDAID_STAGE_3","ADULT_STAGE_4","PEDAID_STAGE_4","test","getFirstValueCoded","mixins","EncounterMixinVue","staging","showStagingWeightChart","canShowStagingFields","bmiObj","stagingFacts","isChildBearing","stageOneConditions","whoStage","watch","handler","v","getID","immediate","loadHivConfirmatoryTestType","getBMI","isMale","getAgeInMonths","calculateWeightPercentile","computedValues","encounter","createEncounter","stagingObservations","derivedObservations","saveObservationList","_findings$","_findings$2","_findings$3","ok","updateStagingFacts","curIndex","buildStagingOptions","previouslySelected","_conceptFinding$actio","_conceptFinding$actio2","conceptFinding","concept_id","setWhoStage","_findings$4","setReasonForArt","_findings$5","notAsymptomatic","f","stageOneC","stage_1_conditions","asymptomatics","hasTransferLater","has_transfer_letter","hasStaging","getStagingSummaryField","helpText","FieldType","TT_ART_STAGING_SUMMARY","onload","config","hiddenFooterBtns","isANCclient","getSuspendedProgram","getStagingFields","TT_MULTIPLE_YES_NO","validation","Validation","anyEmpty","summaryMapValue","computedValue","factID","pregnancy_status","TT_WEIGHT_CHART","getWeightHistory","x","y","TT_MULTIPLE_SELECT","onValue","onStagingCondition","unload","onConditionFalse","val","TT_SELECT","TT_TEXT","charAt","count","substring","s","isCd4","customKeyboard","CD4_COUNT_PAD_LO","cd4_available","generateDateFields","minDate","maxDate","getDate","estimation","allowUnknown","computeValue","isEstimate","buildValueDate","defaultValue","getLocationName","_","showKeyboard","isFilterDataViaApi","offlineStorage","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-563767ba.75f4243f.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n                Offline().saveObsOffline({\n                    observations: obs,\n                    id: this.offlineID,\n                    uploadStatus: status,\n                    encounterName: this.$route.name,\n                    encounterTypeID: params.encounterTypeID,\n                    meta: params.formData,\n                    labOrders: params.labOrders,\n                    created\n                }, created)\n                Offline().synchronizeRecord(this.offlineID)\n                if (!params.skipNextTask) this.nextOfflineFlow()\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            // if (!this.isOfflineMode()) {\n            //     try {\n            //         const enc = new AppEncounterService(\n            //             this.patientID,\n            //             params.encounterTypeID, \n            //             this.providerID\n            //         )\n            //         if ((await enc.createEncounter())) {\n            //             if ((await enc.saveObservationList(obs as ObsValue[]))) {\n            //                 status = 'Success'\n            //             }\n            //         }\n            //         if (typeof params.callback === 'function') {\n            //             await params.callback(enc)\n            //         }\n            //         created = true\n            //     } catch (e) {\n            //         created = false\n            //         if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n            //             status = 'NetworkError'\n            //         } else {\n            //             status = 'Exception'\n            //             console.error(`Exception while saving an encounter: ${e}`)\n            //         }\n            //     }\n            //     if (status === 'Exception') {\n            //         return toastDanger(\"An error has occured!\")\n            //     }\n            // }\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextOfflineFlow() {\n            const task = Offline().nextPatientWorkflowActivity(this.patientID)\n            if (!task || !task.patientUrl) return this.$router.push(`/patient/dashboard/${this.patientID}`)\n            return this.$router.push(`${task.patientUrl}/${this.patientID}`) \n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { StorageInterface } from '@/interfaces/storage';\nimport { filter, isInteger, toLower } from 'lodash';\n\nconst INDEX_STORE = 'openmrs'\nconst DB_NAME = 'offline_db'\n\ntype StorageName = \"LocalStorage\" | \"IndexedDBStorage\";\n\nexport const storageFactory = (storageName: StorageName='IndexedDBStorage'): StorageInterface => {\n  return eval(`new ${storageName}()`) as StorageInterface;\n};\n\nexport class LocalStorage implements StorageInterface {\n  existsinStorage(key: string): Promise<boolean> {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  getFromStorage(key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const data = localStorage.getItem(key);\n      if (data) {\n        return resolve(JSON.parse(data));\n      }\n      resolve([]);\n    });\n  }\n\n  deleteFromStorage(key: string): boolean {\n    localStorage.removeItem(key);\n    return true;\n  }\n\n  saveToStorage(key: string, data: JSON): boolean {\n    localStorage.setItem(key, JSON.stringify(data));\n    return true;\n  }\n}\n\nexport class IndexedDBStorage implements StorageInterface {\n  db!: IDBDatabase;\n\n  constructor() {\n    const openRequest = indexedDB.open(DB_NAME, 1);\n    openRequest.onupgradeneeded = function () {\n      openRequest.result.createObjectStore(INDEX_STORE);\n    };\n    openRequest.onsuccess = () => {\n      this.db = openRequest.result;\n    };\n  }\n\n  existsinStorage(key: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .get(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  getFromStorage(key: string, filters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = this.db\n        .transaction(INDEX_STORE)\n        .objectStore(INDEX_STORE)\n        .openCursor();\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          if (cursor.key === key) {\n            if (filters) {\n              resolve(filteredData(cursor, filters));\n            } else {\n              resolve(cursor.value.data);\n            }\n          }\n          cursor.continue();\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = () => {\n        reject(\"error\");\n      };\n    });\n  }\n\n  saveToStorage(key: string, data: any): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .put(data, key);\n    return true;\n  }\n\n  deleteFromStorage(key: string): boolean {\n    this.db\n      .transaction(INDEX_STORE, \"readwrite\")\n      .objectStore(INDEX_STORE)\n      .delete(key);\n    return true;\n  }\n}\n\nfunction filteredData(cursor: IDBCursorWithValue, filters: any): any {\n  return filter(cursor.value, (item: any) => {\n    return Object.entries(filters).every(([key, value]: any) => {\n      if (isInteger(item[key])) {\n        return !value || item[key] === value;\n      } else {\n        return !value || toLower(item[key]).includes(toLower(value));\n      }\n    });\n  });\n}\n\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { ConceptService } from \"@/services/concept_service\"\nimport { alertConfirmation } from \"@/utils/Alerts\"\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\n\nexport const ADULT_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Adults with stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV ADULT'\n        }\n    },\n    'Adults with stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Adults with stage 2 conditions': {\n        concept: 'WHO STAGE II ADULT',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2,\n        }\n    },\n    'Adults with stage 1 conditions': {\n        concept: 'WHO STAGE I ADULT',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CHILD_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Children with stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV PEDS'\n        }\n    },\n    'For children with stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Children with stage 2 conditions': {\n        concept: 'WHO STAGE II PEDS',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2\n        }\n    },\n    'Children with stage 1 conditions': {\n        concept: 'WHO STAGE I PEDS',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CONTRADICTING_STAGE_DEFINITIONS_ALERTS: Record<string, GuideLineInterface> = {\n    \"Warn if Severe weight loss is selected when actual patient BMI is acceptable\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => await alertConfirmation(`Patient's BMI of ${facts.bmi} greater than 18.5, do you wish to proceed?`, {\n                confirmBtnLabel: 'Yes, keep severe weightloss',\n                cancelBtnLabel: 'No, cancel'\n            }),\n        },\n        conditions: {\n            selectedCondition (condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi:(bmi: number) => bmi > 18.5\n        }\n    },\n    \"Warn for contradicting stage defining conditions\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => {\n                const keepAsymptomatic = await alertConfirmation('CONTRADICTING STAGE DEFINING CONDITIONS', {\n                    confirmBtnLabel: \"Keep Asymptomatic\",\n                    cancelBtnLabel: 'Keep other(s)'\n                })\n                if(keepAsymptomatic) {\n                    facts.stage = 1\n                    facts.selectedConditions = []\n                    facts.stageThreeConditions = []\n                    facts.stageFourConditions = []\n                    facts.stageTwoConditions = []\n                    return true\n                }\n                return false\n            },\n        },\n        conditions: {\n            selectedCondition(condition: string){\n                return condition === 'Asymptomatic HIV infection'\n            },\n            stage: (stage: number) => stage >= 2\n        }\n    },\n}\n\nexport const RECOMMENDED_CHILD_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'For children whose current weight percentile is less than 70' : {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has a low weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile < 70\n            }\n        }\n    },\n    'Enable Moderate unexplained malnutrition for children whose weight for height is 70-79%': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile >= 70 && weightPercentile <= 79\n            }\n        }\n    },\n    'Disable moderate weight loss when Severe unexplained weight loss is chosen': {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss/manutrition was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)')\n            }\n        }\n    }\n}\n\nexport const RECOMMENDED_ADULT_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'Adults with a BMI less than 16': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Adult has a low BMI of ${facts.bmi}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi: (bmi: number) => bmi < 16\n        }\n    },\n    'Adults whose BMI is between 16 and 18': {\n        priority: 3,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'warning',\n            show: 'onChecked',\n            info: (facts: any) => `BMI of ${facts.bmi} is between 16 and 18`,\n        },\n        conditions: {\n            selectedCondition: (condition: string) => condition === 'Moderate weight loss less than or equal to 10 percent, unexplained',\n            bmi: (bmi: number) => bmi >= 16.0 && bmi <= 18.5\n        }\n    },\n    \"Disable Moderate weight loss if severe weightloss is selected\": {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate weight loss less than or equal to 10 percent, unexplained'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained')\n            }\n        }\n    }\n}\n\nexport const CHILD_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 2,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'Children under twelve months who tested positive on Rapid test and have presumed severe HIV': {\n        concept: 'PRESUMED SEVERE HIV',\n        priority: 3,\n        conditions: {\n            ageInMonths(age: number){\n                return age < 12 \n            },\n            selectedConditions: (conditions: Array<string>) => {\n                const pshdConditions = ConceptService.getConceptsByCategory('pshd_condition')\n                for (const pshdCondition in pshdConditions) {\n                    if (conditions.includes(pshdCondition)) return true\n                }\n                return false\n            },\n            testType(testType: string){\n                return testType === 'HIV rapid test'\n            },\n        }\n    },\n    \"Children under twelve who tested positive via HIV DNA Polymerase Chain Reaction test\": {\n        concept: 'HIV DNA polymerase chain reaction',\n        priority: 4,\n        conditions: {\n            ageInMonths: (age: number) => age < 12,\n            testType: (testType: string) => testType === \"HIV DNA polymerase chain reaction\",\n        }\n    },\n    \"Children who are less than 24 months\": {\n        concept: 'HIV infected',\n        priority: 5,\n        conditions: {\n            ageInMonths: (age: number) => age < 24\n        }\n    },\n    \"Children between 24 and 56 months who have stage 2 or 1 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 750',\n        priority: 6,\n        conditions: {\n            ageInMonths(age: number) {\n                return age >= 24 && age <= 56\n            },\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 750\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children with CD4 count less than 500 and have stage 1 and stage 2 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 7,\n        conditions: {\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4Modifier(modifier: string){\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children over the date 2014-04-01 who are more than five years old and have cd4 count less than 500\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 9,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            age(age: number) {\n                return age > 5\n            },\n            cd4(cd4: number) {\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    \"Children over date 2014-04-01 and less than Five years old\": {\n        concept: 'HIV infected',\n        priority: 10,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            age(age: number) {\n                return age <= 5\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 11,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 12,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 13,\n        conditions: {\n            stage: (stage: number) => stage <= 2\n        }\n    }\n}\n\nexport const ADULT_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has HIV wasting syndrome identified in stage 3': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            selectedConditions: (conditions: Array<string>) => {\n                const severeSymp = ConceptService.getConceptsByCategory('severe_hiv_wasting_syndrome')\n                const found = severeSymp.reduce((total, symp) => conditions.includes(symp.name) ? total + 1 : 0, 0)\n                return found >= 2\n            }\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'CD4 less than 350 for adults before 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 4,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 250 for adults after 2014': {\n        concept: 'cd4 less than or equal to 250',\n        priority: 4,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 250\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 350 for adults after 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 5,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 500 for adults after 2014': {\n        concept: 'cd4 less than or equal to 500',\n        priority: 6,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 8,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 7,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 9,\n        conditions: {\n            stage: (stage: number) => stage <= 2,\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { LocationService } from \"@/services/location_service\"\nimport {\n    RECOMMENDED_ADULT_STAGING_CONDITIONS,\n    CHILD_ART_ELIGIBILITY,\n    ADULT_ART_ELIGIBILITY,\n    ADULT_WHO_STAGE_CRITERIA,\n    CHILD_WHO_STAGE_CRITERIA,\n    CONTRADICTING_STAGE_DEFINITIONS_ALERTS,\n    RECOMMENDED_CHILD_STAGING_CONDITIONS\n} from \"@/apps/ART/guidelines/staging_guidelines\"\n\n/**\n * Enable for filtering staging categories in ConceptName Dictionary\n */\nenum StagingCategory {\n    ADULT_STAGE_4 = 'stage_4_conditions_adults',\n    ADULT_STAGE_3 = 'stage_3_conditions_adults',\n    ADULT_STAGE_2 = 'stage_2_conditions_adults',\n    ADULT_STAGE_1 = 'stage_1_conditions_adults',\n    PEDAID_STAGE_4 = 'stage_4_conditions_pedaids',\n    PEDAID_STAGE_3 = 'stage_3_conditions_pedaids',\n    PEDAID_STAGE_2 = 'stage_2_conditions_pedaids',\n    PEDAID_STAGE_1 = 'stage_1_conditions_pedaids'\n}\n\nexport class StagingService extends AppEncounterService {\n    age: number\n    confirmatoryTest: string | null;\n    constructor(patientID: number, age: number, providerID: number) {\n        super(patientID, 52, providerID) //TODO: Use encounter type reference name\n        this.age = age\n        this.confirmatoryTest = null\n    }\n\n    isAdult() { return this.age >= 15 }\n\n    isPedaid() { return this.age <= 14 }\n\n    setAge(age: number) {\n        this.age = age\n    }\n\n    getFacilities (filter='') { return LocationService.getFacilities({name: filter}) }\n    \n    getConfirmatoryTestType() { return this.confirmatoryTest }\n\n    cd4CountIsValid(value: string) {\n        try {\n            return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n        }catch(e) {\n            return false\n        }\n    }\n\n    getAlertGuidelines() {\n        return CONTRADICTING_STAGE_DEFINITIONS_ALERTS\n    }\n\n    getWhoStageGuidelines() {\n        return this.isAdult() ? ADULT_WHO_STAGE_CRITERIA : CHILD_WHO_STAGE_CRITERIA\n    }\n\n    getProgramEligibilityGuidelines() {\n        return this.isAdult() ? ADULT_ART_ELIGIBILITY: CHILD_ART_ELIGIBILITY\n    }\n\n    getRecommendedConditionGuidelines() {\n        return this.isAdult() ? RECOMMENDED_ADULT_STAGING_CONDITIONS: RECOMMENDED_CHILD_STAGING_CONDITIONS\n    }\n\n    getStagingConditions(stage: number) {\n        const category = this.getStagingCategoryByNum(stage)\n        return AppEncounterService.getConceptsByCategory(category)\n    }\n\n    buildWhoStageObs(stage: string) {\n        return this.buildValueCoded('Who stage', stage)\n    }\n    \n    buildWhoCriteriaObs(condition: string) {\n        return this.buildValueCoded('Who stages criteria present', condition)\n    }\n\n    buildReasonForArtObs(reason: string) {\n        return this.buildValueCoded('Reason for ART eligibility', reason)\n    }\n\n    private getStagingCategoryByNum(stageNumber: number) {\n        switch(stageNumber) {\n            case 1:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_1 : StagingCategory.PEDAID_STAGE_1\n            case 2:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_2 : StagingCategory.PEDAID_STAGE_2\n            case 3:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_3 : StagingCategory.PEDAID_STAGE_3\n            case 4:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_4 : StagingCategory.PEDAID_STAGE_4\n            default: \n                return ''\n        }\n    }\n\n    async loadHivConfirmatoryTestType() {\n        const test = await AppEncounterService.getFirstValueCoded(\n            this.patientID, 'Confirmatory hiv test type'\n        )\n        if (test) this.confirmatoryTest = test\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { StagingService } from \"@/apps/ART/services/staging_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport {\n    getFacilities\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        staging: {} as any,\n        showStagingWeightChart: true,\n        canShowStagingFields: true as boolean,\n        bmiObj: {} as any, \n        stagingFacts : {\n            age: -1 as number,\n            bmi: -1 as number,\n            gender: '' as 'M' | 'F',\n            stage: -1 as number,\n            cd4: -1 as number,\n            cd4Date: '' as string,\n            date: '' as string,\n            isChildBearing: false as boolean,\n            stageOneConditions: [] as Array<string>,\n            stageTwoConditions: [] as Array<string>,\n            stageThreeConditions: [] as Array<string>,\n            stageFourConditions: [] as Array<string>,\n            reasonForArt: '' as string,\n            testType: '' as string,\n            pregnant: '' as 'Yes' | 'No',\n            breastFeeding: '' as 'Yes' | 'No',\n            selectedCondition: '' as string,\n            selectedConditions: [] as Array<string>,\n            weightPercentile: -1 as number,\n            ageInMonths: -1 as number,\n            cd4Modifier: '' as string,\n            whoStage: '' as string\n        }\n    }),\n    watch: {\n        ready : {\n            handler(v) {\n                if (v) {\n                    this.staging = new StagingService(this.patient.getID(), this.patient.getAge(), this.providerID)\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async initStaging(patient: any) {\n            await this.staging.loadHivConfirmatoryTestType()\n            this.bmiObj = await patient.getBMI()\n            this.stagingFacts.age = patient.getAge()\n            this.stagingFacts.bmi = this.bmiObj['index']\n            this.stagingFacts.date = StagingService.getSessionDate()\n            this.stagingFacts.gender = patient.isMale() ? 'M' : 'F' \n            this.stagingFacts.testType = this.staging.getConfirmatoryTestType()\n            this.stagingFacts.ageInMonths = patient.getAgeInMonths()\n            this.stagingFacts.isChildBearing = patient.isChildBearing()\n\n            if (this.staging.isPedaid()) {\n                this.stagingFacts.weightPercentile = await patient.calculateWeightPercentile()\n            }\n        },\n        async submitStaging(computedValues: any) {\n            const encounter = await this.staging.createEncounter()\n\n            if (!encounter) throw 'Unable to create staging encounter'\n\n            const stagingObservations = await this.resolveObs(computedValues, 'staging')\n            const derivedObservations = await Promise.all([\n                this.buildReasonForArtObs(), this.buildWhoStageObs()\n            ])\n\n            const obs = await this.staging.saveObservationList([\n                ...stagingObservations, ...derivedObservations\n            ])\n\n            if (!obs) throw 'Unable to save patient observations'\n        },\n        async onStagingCondition({ label }: Option) {\n            this.stagingFacts.selectedCondition = label\n \n            const guidelines =  this.staging.getAlertGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n            if (isEmpty(findings)) \n                return true\n\n            if (findings[0]?.actions && findings[0]?.actions.alert) {\n                const ok = await findings[0]?.actions.alert(this.stagingFacts)\n                return ok ? true : false\n            }\n            return true\n        },\n        getFacilities(filter='') {\n            return getFacilities(filter)\n        },\n        updateStagingFacts() {\n            const conditions = [\n                this.stagingFacts.stageOneConditions,\n                this.stagingFacts.stageTwoConditions,\n                this.stagingFacts.stageThreeConditions,\n                this.stagingFacts.stageFourConditions, \n            ]\n            this.stagingFacts.stage = conditions.reduce(\n                (stage, conditions: string[], curIndex) =>\n                    isEmpty(conditions) ? stage : curIndex + 1\n                , 0)\n            this.stagingFacts.selectedConditions = conditions.reduce(\n                (accum, cur) => accum.concat(cur), []\n            )\n        },\n        buildReasonForArtObs() {\n            return this.staging.buildReasonForArtObs(this.stagingFacts.reasonForArt)\n        },\n        buildWhoStageObs() {\n            return this.staging.buildWhoStageObs(this.stagingFacts.whoStage)\n        },\n        buildStagingOptions(stage: number, previouslySelected=[] as Array<string>) {\n            const guidelines = this.staging.getRecommendedConditionGuidelines()\n\n            return this.staging.getStagingConditions(stage).map((concept: any) => {\n                let disabled = false\n                let description: unknown\n                let isChecked = previouslySelected.includes(concept.name)\n                this.stagingFacts.selectedCondition = concept.name\n\n                const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n                if (!isEmpty(findings)) {\n                    const conceptFinding = findings[0] //get the first item only\n                    if (conceptFinding?.actions?.isChecked) {\n                        isChecked = true\n                    }\n                    if (conceptFinding?.actions?.disabled) {\n                        disabled = true\n                    }\n                    description = conceptFinding.description\n                }\n                return {\n                    label: concept.name,\n                    value: concept.concept_id,\n                    isChecked,\n                    disabled,\n                    description\n                }\n            })\n        },\n        setWhoStage() {\n            const guidelines = this.staging.getWhoStageGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.whoStage = findings[0]?.concept || ''\n        },\n        setReasonForArt() {\n            const guidelines = this.staging.getProgramEligibilityGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.reasonForArt = findings[0]?.concept || ''\n        },\n        notAsymptomatic(f: any) {\n            const stageOneC = f.stage_1_conditions\n            if (stageOneC) {\n                const asymptomatics = stageOneC.filter((i: Option) => {\n                    return i.label.match(/asymptomatic/i) && i.isChecked\n                })\n                return isEmpty(asymptomatics)\n            }\n            return true\n        },\n        hasTransferLater(f: Record<string, any>): boolean {\n            if ('has_transfer_letter' in f) {\n                return f.has_transfer_letter && f.has_transfer_letter.value === 'Yes'\n            }\n            return false\n        },\n        hasStaging(f: Record<string, any>) {\n            // For components that have Optional staging\n            if (this.hasTransferLater(f)) {\n                return true\n            }\n            return this.canShowStagingFields\n        },\n        getStagingSummaryField(helpText=\"Summary\" as string) {\n            return {\n                id: 'summary',\n                helpText,\n                type: FieldType.TT_ART_STAGING_SUMMARY,\n                condition: (f: any) => this.hasStaging(f),\n                onload: () => {\n                    this.setReasonForArt()\n                    this.setWhoStage()\n                },\n                options: () => [\n                    { \n                        label: 'WHO Stage', \n                        value: this.stagingFacts.whoStage,\n                        other: {\n                            type: 'title-section'\n                        }\n                    },\n                    { \n                        label: 'Condition on starting ART', \n                        value: this.stagingFacts.reasonForArt,\n                        other: {\n                            type: 'title-section'\n                        } \n                    },\n                    ...this.stagingFacts.selectedConditions.map((i: string) => ({ label: i, value: i }))\n                ],\n                config: {\n                    title: 'Selected stage defining conditions',\n                    hiddenFooterBtns: [\n                        'Clear'\n                    ]\n                }\n            }\n        },\n        isANCclient() {\n            return StagingService.getSuspendedProgram() === 'ANC'\n        },\n        getStagingFields(): Array<Field> {\n            return [\n                {\n                    id: 'pregnancy_status',\n                    helpText: 'Pregnant / Breastfeeding',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    validation: (v: any) => Validation.anyEmpty(v),\n                    summaryMapValue: (d: Option) => ({ \n                        label: d.label, \n                        value: d.value \n                    }),\n                    computedValue: (data: Array<Option>, f: Record<string, any>) => {\n                        let obs = []\n                        // For ANC clients, mark pregnancy status as 'Yes' always!!\n                        // The assumption here is also that the pregnancy option is not available for selection\n                        if (this.isANCclient() && !this.hasTransferLater(f)) {\n                            this.stagingFacts['pregnant'] = 'Yes' \n                            obs.push(this.staging.buildValueCoded('Is patient pregnant', 'Yes'))\n                        }\n                        obs = obs.concat(data.map(d => {\n                            const  { value, other } = d\n\n                            const factID: 'pregnant' | 'breastFeeding' = other.factID\n\n                            this.stagingFacts[factID] = `${value}`.match(/Yes/i) ? 'Yes' : 'No'\n\n                            return this.staging.buildValueCoded(other.concept, value)\n                        }))\n                        return {\n                            obs,\n                            tag: 'staging'\n                        }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.pregnancy_status)) {\n                            return f.pregnancy_status\n                        } else {\n                            const options = []\n                            // Hide pregnancy option for ANC clients who are not transferr in\n                            if (!this.isANCclient() || this.hasTransferLater(f)) {\n                                options.push({\n                                    label: 'Pregnant?',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                        concept: 'Is patient pregnant',\n                                        factID: 'pregnant'\n                                    }\n                                })\n                            }\n                            options.push({\n                                label: 'Breastfeeding?',\n                                value: '',\n                                other: {\n                                    values: this.yesNoOptions(),\n                                    concept: 'Is patient breast feeding',\n                                    factID: 'breastFeeding'\n                                }\n                            })\n                            return options\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.stagingFacts.isChildBearing,\n                },\n                {\n                    id: 'patient_weight_chart',\n                    helpText: 'Weight history',\n                    type: FieldType.TT_WEIGHT_CHART,\n                    options: async () => {\n                        let values = await this.patient.getWeightHistory()\n                        values = values.map((d: any) => ({ \n                            x: HisDate.toStandardHisDisplayFormat(d.date), \n                            y: d.weight\n                        }))\n                        return [\n                            {\n                                label: \"Weight for patient\",\n                                value: \"Weight trail\",\n                                other: {\n                                    values,\n                                    age: this.patient.getAge(),\n                                    bmi: this.bmiObj\n                                }\n                            }\n                        ]\n                    },\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.showStagingWeightChart\n                },\n                {\n                    id: 'stage_4_conditions',\n                    helpText: 'Stage 4 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(4, this.stagingFacts.stageFourConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageFourConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageFourConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_3_conditions',\n                    helpText: 'Stage 3 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(3, this.stagingFacts.stageThreeConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageThreeConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageThreeConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_2_conditions',\n                    helpText: 'Stage 2 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(2, this.stagingFacts.stageTwoConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Option[]) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageTwoConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageTwoConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_1_conditions',\n                    helpText: 'Stage 1 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (val: any) => {\n                        if (isEmpty(val) && isEmpty(this.stagingFacts.selectedConditions))\n                            return ['Please provide atleast one staging condition']\n                    },\n                    options: () => this.buildStagingOptions(1, this.stagingFacts.stageOneConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        const data = d.map(i => i.label)\n                        this.stagingFacts.stageOneConditions = data\n                        this.updateStagingFacts()\n                        return {\n                            tag: 'staging',\n                            obs: data.map(i => this.staging.buildWhoCriteriaObs(i))\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f),\n                },\n                {\n                    id: 'cd4_available',\n                    helpText: 'Recent CD4 count results available?',\n                    type: FieldType.TT_SELECT,\n                    condition: (f: any) => this.hasStaging(f),\n                    validation: (val: any) => Validation.required(val),\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'cd4_count',\n                    helpText: 'CD4 Count',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (d: Option) => {\n                        const value = d.value.toString()\n                        const modifier = value.charAt(0)\n                        const count = parseInt(value.substring(1))\n                        return {\n                            tag: 'staging',\n                            modifier,\n                            count,\n                            obs: this.staging.buildValueNumber(\n                                'CD4 count', count, modifier\n                            )\n                        }\n                    },\n                    unload: (d: any, s: any, f: any, computedData: any) => {\n                        const { count, modifier } = computedData['cd4_count']\n                        this.stagingFacts.cd4 = count\n                        this.stagingFacts.cd4Modifier = modifier\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.cd4 = -1\n                        this.stagingFacts.cd4Modifier = ''\n                    },\n                    validation: (val: any) => {\n                        const isCd4 = () => this.staging.cd4CountIsValid(val.value)\n                        return this.validateSeries([\n                            () => Validation.required(val),\n                            () => !isCd4() ? ['Please start with either modifier first: >, <, or ='] : null\n                        ])\n                    },\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Unknown', 'Delete']\n                            ]\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                },\n                ...generateDateFields({\n                    id: 'cd4_result_date',\n                    helpText: 'Cd4 Results',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) =>  this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        this.stagingFacts.cd4Date = date\n                        return {\n                            date,\n                            tag: 'staging',\n                            isEstimate,\n                            obs: this.staging.buildValueDate('Cd4 count datetime', date) \n                        }\n                    }\n                }, this.staging.getDate()),\n                {\n                    id: 'location',\n                    helpText: 'CD4 Location',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: () => StagingService.getLocationName(),\n                    computedValue: ({ label }: Option) => ({\n                        tag: 'staging',\n                        obs: this.staging.buildValueText('Cd4 count location', label)\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    options: (_, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                }\n            ]\n        }\n    }\n})\n","import script from \"./StagingMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./StagingMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { storageFactory } from \"@/composables/storage\"\nimport isEmpty from \"lodash/isEmpty\"\n\nconst offlineStorage = storageFactory()\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    let facilities = await offlineStorage.getFromStorage('locations', { name: filter })\n    if (isEmpty(facilities)) facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    let regions = await offlineStorage.getFromStorage('regions', [])\n    if (isEmpty(regions)) {\n        regions = await LocationService.getRegions()\n    }\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    let districts = await offlineStorage.getFromStorage('districts', { 'region_id': regionID })\n    if (isEmpty(districts)) districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    let TAs = await offlineStorage.getFromStorage('traditional_authorities', {\n        district_id: districtID, name\n    })\n    if (isEmpty(TAs)) TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    let villages = await offlineStorage.getFromStorage('villages', { \n        traditional_authority_id: traditionalAuthorityID, name\n    })\n    if (isEmpty(villages)) villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}