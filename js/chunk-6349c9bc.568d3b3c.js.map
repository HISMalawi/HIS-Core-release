{"version":3,"sources":["webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/views/PatientRegistration.vue?7026","webpack:///./src/views/PatientRegistration.vue","webpack:///./src/views/PatientRegistration.vue?841e","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","this","$emit","i","__exports__","mapToOption","listOptions","map","item","label","value","resolvePerson","computedForm","attr","values","isPlainObject","person","getGivenNameField","id","helpText","FieldType","TT_TEXT","computedValue","val","validation","Validation","isName","options","async","form","given_name","names","PersonService","searchGivenName","getFamilyNameField","family_name","searchFamilyName","getGenderField","customOptions","TT_SELECT","isEmpty","getDobConfig","includeHelpText","summaryLabel","minDate","HisDate","estimateDateFromAge","maxDate","getSessionDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","date","isEstimate","birthdate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","summaryMapValue","v","f","_f$home_region","test","home_region","dynamicHelpText","_f$home_region2","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","slot","color","onClick","c","field","filter","length","toastWarning","filtered","ok","alertConfirmation","address","LocationService","createAddress","toUpperCase","getHomeTaField","config","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","getCurrentDistrictField","_f$home_region3","current_region","match","getCurrentTAfield","_f$current_region","current_district","getCurrentVillageField","_f$current_region2","current_traditional_authority","getCellNumberField","number","split","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","condition","getFacilityLocationField","_","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","Array","isArray","person_attributes","reduce","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","person_id","gender","birthdate_estimated","getPersonAttributeOptions","patient","Patientservice","prop","getPatientInfoString","getID","getNationalID","other","patientID","npid","show","Service","getProgramName","_component_his_standard_form","_resolveComponent","formLabel","$event","fieldComponent","HisStandardForm","app","App","getActiveApp","ddeInstance","ddeDocID","ddeIsReassign","currentAddressAttributes","homeAddressAttributes","hasIncompleteData","editPersonData","editPerson","personAttribute","isMilitarySite","presets","registrationSummary","ddeEnabled","watch","query","PatientDemographicsExchangeService","edit_person","dde_reassign","doc_id","setPatientID","person_attribute","initEditMode","getFields","immediate","deep","push","personIndexField","hasScannedNationalID","concat","hiddenFieldsForScannedNationalID","givenNameField","familyNameField","genderField","searchResultField","hasNpidField","scanNpid","dobFields","homeRegionField","homeDistrictField","homeTAField","homeVillageField","currentRegionField","currentDistrictField","currentTAField","currentVillage","landmarkFields","cellPhoneField","patientTypeField","facilityLocationField","occupationField","relationshipField","possibleDuplicatesField","isEditMode","nationalIDStatus","personId","Store","get","parseInt","ancestryDistrict","ancestryTA","ancestryVillage","currentDistrict","currentTA","getAddresses","getGivenName","getFamilyName","getGender","getBirthdate","getPhoneNumber","getClosestLandmark","getOccupation","isOnline","update","create","isOfflineMode","createOffline","savePersonOffline","Offline","PersonField","attributes","resolvePersonAttributes","offlineID","nextTask","$router","registration","PatientRegistrationService","registerPatient","getPersonID","set","updateMWNationalId","malawiNationalID","onRegisterPatient","exit","$route","relationship","setPersonID","updatePerson","invalidate","back","editConditionCheck","includes","getDocID","assignNpid","printNationalID","delayPromise","e","toastDanger","d","personAttributes","console","error","TT_HIDDEN","defaultValue","toLowerCase","findByID","IS_ANC_APP","applicationName","IS_CXCA","defaultComputedOutput","beforeNext","newGender","oldGender","action","infoActionSheet","dobConfig","sdate","childBearingAgeInYrs","dayjs","subtract","format","STANDARD_DATE_FORMAT","generateDateFields","TT_YES_NO","isRequired","TT_BARCODE","has_npid","hiddenFooterBtns","currentRegion","_computedData$person","_computedData$person2","_computedData$person3","_computedData$person4","current_village","cellPhone","cell_phone_number","facility","patient_type","landmarks","PatientTypeService","getPatientTypes","init","regimentField","occupation","rankField","dateJoinedMilitaryFields","WorkflowService","IS_HTS","OPD","Registration","TT_PERSON_RESULT_VIEW","payload","patients","searchDemographics","itemData","search","state","disabled","onValue","results","createdPerson","duplicatePatients","TT_PERSON_MATCH_VIEW","checkPotentialDuplicates","toDate","toStandardHisDisplayFormat","score","patient_id","newPerson","foundPerson","docID","comparisons","visible","possible_duplicates","importPatient","then","result","catch","TT_TABLE_VIEWER","editButton","attribute","columns","rows","landmark","emptySets","indexes","class","forEach","r","isValueEmpty","rowColors","onload","reassignNpid","printNpid","confirmPatient","facilities","trim","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id"],"mappings":"gIAEM,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQC,yBAAcC,yBAAaC,qCAAyBR,EAAKS,UAAW,CAC1EC,OAAQV,EAAKU,OACbC,YAAaX,EAAKW,YAClBC,YAAaZ,EAAKY,YAClBC,sBAAuBb,EAAKa,sBAC5BC,WAAYd,EAAKe,SACjBA,SAAUf,EAAKgB,eACfC,UAAWjB,EAAKkB,SACf,KAAM,GAAI,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN5FC,+BAAgB,CAC3BC,KAAM,kBACNC,WAAY,CAAEC,wBACdC,MAAO,CACH,WACA,WAEJC,KAAMA,KAAA,CACFf,SAAU,sBAEdgB,MAAO,CACHT,eAAgB,CACZU,KAAMC,UAEVhB,YAAa,CACTe,KAAME,QACNC,SAAS,GAEbjB,YAAa,CACTc,KAAMI,QAEVpB,OAAQ,CACJgB,KAAMK,OACNC,UAAU,GAEdnB,sBAAuB,CACnBa,KAAMI,OACNE,UAAU,IAGlBC,QAAS,CACLlB,SAASmB,EAAeC,GACpBC,KAAKC,MAAM,WAAYH,EAAUC,IAErCjB,QAAQoB,GACJF,KAAKC,MAAM,UAAWC,O,qBCnClC,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASxC,KAErD,U,sLCaf,SAASyC,EAAYC,GACjB,OAAOA,EAAYC,IAAKC,IAAS,CAC7BC,MAAOD,EAAME,MAAOF,KAGb,QACXG,cAAcC,GACV,IAAIvB,EAAY,GAChB,IAAI,MAAMwB,KAAQD,EAAc,CAC5B,MAAME,EAASF,EAAaC,GACxBE,2BAAcD,IAAW,WAAYA,IACjCC,2BAAcD,EAAOE,QACrB3B,EAAO,IAAIA,KAASyB,EAAOE,QAE3B3B,EAAKwB,GAAQC,EAAO,WAIhC,OAAOzB,GAEX4B,oBACI,MAAO,CACHC,GAAI,aACJC,SAAU,aACV5B,KAAM6B,OAAUC,QAChBC,cAAgBC,IAAW,CAAOP,OAAQO,EAAIb,QAC9Cc,WAAaD,GAAaE,OAAWC,OAAOH,GAC5CI,QAASC,UACL,GAAIC,EAAKC,WAAY,CACjB,MAAMC,QAAcC,OAAcC,gBAAgBJ,EAAKC,WAAWpB,OAClE,OAAOL,EAAY0B,GAEvB,MAAO,MAInBG,qBACI,MAAO,CACHhB,GAAI,cACJC,SAAU,YACV5B,KAAM6B,OAAUC,QAChBC,cAAgBC,IAAW,CAAOP,OAAQO,EAAIb,QAC9Cc,WAAaD,GAAaE,OAAWC,OAAOH,GAC5CI,QAASC,UACL,GAAIC,EAAKM,YAAa,CAClB,MAAMJ,QAAcC,OAAcI,iBAAiBP,EAAKM,YAAYzB,OACpE,OAAOL,EAAY0B,GAEvB,MAAO,MAInBM,eAAeC,GACX,MAAQ,CACJpB,GAAI,SACJC,SAAU,MACV5B,KAAM6B,OAAUmB,UAChBjB,cAAgBC,IAAW,CAAOP,OAAQO,EAAIb,QAC9Cc,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAASA,IAAOa,qBAAQF,GAEjB,CACC,CACI7B,MAAO,SACPC,MAAO,KAEX,CACID,MAAO,OACPC,MAAO,MARb4B,IAadG,aAAaC,GAAkB,GAC3B,MAAQ,CACJxB,GAAI,aACJyB,aAAc,gBACdxB,SAAUuB,EAAkB,QAAU,GACtC7C,UAAU,EACV+C,QAASA,IAAMC,OAAQC,oBAAoB,KAC3CC,QAASA,IAAMf,OAAcgB,iBAC7BC,WAAY,CACRC,cAAc,EACdC,sBAAsB,EACtBC,oBAAqBC,OAAoBC,oBAE7CC,aAAcA,CAACC,EAAcC,KAClB,CACHD,OACAC,aACAzC,OAAQ,CACJ0C,UAAWF,EACX,oBAAuBC,OAM3CE,qBACI,MAAO,CACHzC,GAAI,cACJC,SAAU,mBACV5B,KAAM6B,OAAUmB,UAChBqB,MAAO,SACPC,aAAa,EACbvC,cAAgBC,IAAW,CAAOP,OAAQO,EAAId,QAC9Ce,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAASA,IAAMmC,mBAGvBC,uBACI,MAAQ,CACJ7C,GAAI,gBACJC,SAAU,qBACV5B,KAAM6B,OAAUmB,UAChBsB,aAAa,EACbG,gBAAiBA,CAACC,EAAWC,KAAU,IAAAC,EACnC,MAAO,CACH1D,MAAO,WAAW2D,KAAK,IAAI,OAADF,QAAC,IAADA,GAAc,QAAbC,EAADD,EAAGG,mBAAW,IAAAF,OAAA,EAAdA,EAAgB1D,QACpC,eACA,qBACNC,MAAOuD,EAAExD,QAGjB6D,gBAAkBJ,IAAU,IAAAK,EACxB,MAAI,WAAWH,KAAK,IAAI,OAADF,QAAC,IAADA,GAAc,QAAbK,EAADL,EAAGG,mBAAW,IAAAE,OAAA,EAAdA,EAAgB9D,QAC5B,eAEJ,sBAEXa,cAAgBC,IAAW,CAAOP,OAAQO,EAAId,QAC9CkB,QAAUE,GAAc2C,eAAa3C,EAAKwC,YAAY3D,SAG9D+D,mCAAmCC,EAAiBC,GAChD,MAAO,CACH1F,KAAM,OAAOyF,EACbE,KAAM,MACNC,MAAO,UACPC,QAASlD,MAAOsC,EAAQa,EAAQC,KAC3B,GAA2B,iBAAhBA,EAAMC,QAAsBD,EAAMC,OAAOC,OAAS,EAC1D,OAAOC,eAAa,wBAAwBT,GAE/C,IAAKlC,qBAAQwC,EAAMI,UAChB,OAAOD,eAAa,sBAAsBT,GAE7C,MAAMW,QAAWC,eAAkB,sBAAsBZ,KAAWM,EAAMC,WAE1E,IAAKI,EAAI,OAET,MAAME,QAAgBC,OAAgBC,cAAcf,EAASM,EAAMC,OAAQf,EAAES,GAAsBjE,OACnG,IAAI6E,EAID,OAAOJ,eAAa,iBAAiBT,GAFrCM,EAAMC,OAASD,EAAMC,OAAOS,iBAO5CC,iBACI,MAAQ,CACJzE,GAAI,6BACJC,SAAU,eACV5B,KAAM6B,OAAUmB,UAChBsB,aAAa,EACb+B,OAAQ,CACJC,cAAc,EACdC,oBAAoB,EACpBC,WAAY,CACR9F,KAAKwE,mCAAmC,KAAM,mBAGtDuB,cAAeA,KAAA,CAAQvF,MAAO,MAAOC,MAAO,QAC5CY,cAAgBC,IAAW,CAAOP,OAAQO,EAAId,QAC9Ce,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAASA,CAACE,EAAWoD,IAAmBgB,eAA0BpE,EAAKqE,cAAcxF,MAAOuE,KAGpGkB,sBACI,MAAO,CACHjF,GAAI,eACJC,SAAU,oBACV5B,KAAM6B,OAAUmB,UAChBqD,OAAQ,CACJC,cAAc,EACdC,oBAAoB,EACpBC,WAAY,CACR9F,KAAKwE,mCAAmC,UAAW,gCAG3DZ,aAAa,EACbmC,cAAeA,KAAA,CAASvF,MAAO,MAAOC,MAAO,QAC7CY,cAAgBC,IAAW,CAAOP,OAAQO,EAAId,QAC9Ce,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAASA,CAACE,EAAWoD,IAAmBmB,eAAYvE,EAAKwE,2BAA2B3F,MAAOuE,KAGnGqB,wBACI,MAAO,CACHpF,GAAI,iBACJC,SAAU,8BACV0C,aAAa,EACbtE,KAAM6B,OAAUmB,UAChBjB,cAAeA,CAACC,EAAa2C,IACrB,YAAYE,KAAK,GAAG7C,EAAIb,OACjB,CACHM,OAAQ,CACJ,eAAkBkD,EAAEG,YAAY5D,MAChC,iBAAoByD,EAAEgC,cAAczF,MACpC,8BAAiCyD,EAAEmC,2BAA2B5F,MAC9D,gBAAmByD,EAAEqC,aAAa9F,QAIvC,CAAEO,OAAQO,EAAId,OAEzBe,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAASA,IAAMmC,iBACf8B,OAAQ,CACJG,WAAY,CACV,CACE9G,KAAM,iBACN2F,KAAM,MACN4B,uBAAwB,CACtBC,SAAUA,IAAM,oBAElB3B,QAASA,IAAM,wBAM/B4B,0BACI,MAAO,CACHxF,GAAI,mBACJC,SAAU,WACV0C,aAAa,EACbtE,KAAM6B,OAAUmB,UAChByB,gBAAiBA,CAACC,EAAWC,KAAU,IAAAyC,EACnC,MAAO,CACHlG,MAAO,WAAW2D,KAAK,IAAI,OAADF,QAAC,IAADA,GAAc,QAAbyC,EAADzC,EAAGG,mBAAW,IAAAsC,OAAA,EAAdA,EAAgBlG,QACpC,kBACA,gCACNC,MAAOuD,EAAExD,QAGjB6D,gBAAkBJ,GACVA,EAAE0C,gBAAkB1C,EAAE0C,eAAenG,MAAMoG,MAAM,YAC1C,kBAEJ,gCAEXvF,cAAgBC,IAAW,CAAOP,OAAQO,EAAId,QAC9Ce,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAAUE,GAAc2C,eAAa3C,EAAK+E,eAAelG,SAGjEoG,oBACI,MAAU,CACN5F,GAAI,gCACJC,SAAU,0BACV0C,aAAa,EACbtE,KAAM6B,OAAUmB,UAChBqD,OAAQ,CACJC,cAAc,EACdC,oBAAoB,EACpBC,WAAY,CACR9F,KAAKwE,mCAAmC,KAAM,sBAGtDuB,cAAgB9B,IAAU,IAAA6C,EACtB,IAAK,YAAY3C,KAAK,IAAmB,QAAnB2C,EAAG7C,EAAE0C,sBAAc,IAAAG,OAAA,EAAhBA,EAAkBtG,QACvC,MAAO,CAAEA,MAAO,MAAOC,MAAO,QAGtCY,cAAgBC,IAAW,CAAOP,OAAQO,EAAId,QAC9Ce,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAASA,CAACE,EAAWoD,IAAmBgB,eAA0BpE,EAAKmF,iBAAiBtG,MAAOuE,KAGvGgC,yBACI,MAAO,CACH/F,GAAI,kBACJC,SAAU,+BACV0C,aAAa,EACbtE,KAAM6B,OAAUmB,UAChBqD,OAAQ,CACJC,cAAc,EACdC,oBAAoB,EACpBC,WAAY,CACR9F,KAAKwE,mCAAmC,UAAW,mCAG3DuB,cAAgB9B,IAAU,IAAAgD,EACtB,IAAK,YAAY9C,KAAK,IAAmB,QAAnB8C,EAAGhD,EAAE0C,sBAAc,IAAAM,OAAA,EAAhBA,EAAkBzG,QACvC,MAAO,CAAEA,MAAO,MAAOC,MAAO,QAGtCY,cAAgBC,IAAW,CAAOP,OAAQO,EAAId,QAC9Ce,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAASA,CAACE,EAAWoD,IAAmBmB,eAAYvE,EAAKsF,8BAA8BzG,MAAOuE,KAGtGmC,qBACI,MAAS,CACLlG,GAAI,oBACJC,SAAU,oBACVyC,MAAO,SACPrE,KAAM6B,OAAUC,QAChBC,cAAgBC,IAAW,CAAOP,OAAQO,EAAId,QAC9Ce,WAAaD,IACT,GAAIA,EAAK,CACL,GAAIA,EAAIb,MAAMmG,MAAM,iBAChB,OAAO,KAEX,IAAI,MAAMQ,KAAU,GAAG9F,EAAIb,OAAQ4G,MAAM,KACrC,GAAI7F,OAAW8F,gBAAgB,CAAC9G,MAAO4G,EAAQ3G,MAAO2G,IAClD,MAAO,CAAC,IAAIA,kCAGpB,OAAO,KAEX,MAAO,CAAC,iCAEZzB,OAAQ,CACJ4B,eAAgB,CACZ,CACI,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,GAAK,IAAK,KAEf,CACI,CAAE,OAAQ,KACV,CAAE,UAAW,OACb,CAAE,eAMtBC,oBACI,MAAO,CACH,CACIvG,GAAI,oBACJwG,QAAS,WACTvG,SAAU,kCACV5B,KAAM6B,OAAUmB,UAChBoF,gBAAkBzD,GAAwC,SAA7BA,EAAE0D,kBAAkBlH,MACjDY,cAAgBC,IAAW,CAAOP,OAAQO,EAAIb,QAC9Cc,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAASA,IAAMtB,EAAY,CACvB,kBACA,OACA,cACA,SACA,iBACA,WACA,mBACA,UACA,SACA,kBACA,WAGR,CACIa,GAAI,iBACJwG,QAAS,WACTvG,SAAU,kCACV5B,KAAM6B,OAAUyG,QAChBF,gBAAkBzD,GAAyC,UAA9BA,EAAE0D,kBAAkBlH,MACjDoH,UAAY5D,GAAyC,UAA9BA,EAAE0D,kBAAkBlH,MAC3CY,cAAgBC,IAAW,CAAOP,OAAQO,EAAIb,QAC9Cc,WAAayC,GAAcxC,OAAW5B,SAASoE,MAI3D8D,2BACI,MAAQ,CACJ7G,GAAI,WACJC,SAAU,8BACV5B,KAAM6B,OAAUmB,UAChBjB,cAAgBC,IAAW,CAAOP,OAAQO,EAAId,QAC9Ce,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAASA,CAACqG,EAAQ/C,EAAO,KAAOgD,eAAchD,GAC9CW,OAAQ,CACJC,cAAc,EACdC,oBAAoB,KAIhCoC,2BAA2BC,EAAgB5I,GACvC,OAAI4I,EAAUpG,MAAMmD,OACTiD,EAAUpG,MAAM,GAAGxC,GAEvB,IAEX6I,qBAAqBD,EAAgB5I,GACjC,OAAI8I,MAAMC,QAAQH,EAAUI,oBAAsBJ,EAAUI,kBAAkBrD,OACnEiD,EAAUI,kBAAkBC,OAAO,CAACvE,EAAWc,IAC9CA,EAAExF,KAAKN,OAASM,EACTwF,EAAErE,MAENuD,EACR,IAEA,IAEXwE,wBAAwBN,EACpB5I,GAQA,GAAI8I,MAAMC,QAAQH,EAAUO,YAAcP,EAAUO,UAAUxD,OAAQ,CAClE,MAAMK,EAAe4C,EAAUO,UAAU,GACnCC,EAAqC,CACvC,cAAiB,WACjB,aAAgB,oBAChB,2BAA8B,kBAC9B,gBAAmB,eACnB,8BAAkC,oBAClC,iBAAoB,kBAExB,OAAOpD,EAAQoD,EAAWpJ,IAE9B,MAAO,IAEXqJ,cAAcT,GACV,MAAMU,EAAY5I,KAAKiI,2BAA2BC,EAAW,cACvDW,EAAa7I,KAAKiI,2BAA2BC,EAAW,eACxDY,EAAe9I,KAAKwI,wBAAwBN,EAAW,iBACvDa,EAAc/I,KAAKwI,wBAAwBN,EAAW,gBACtDc,EAAShJ,KAAKwI,wBAAwBN,EAAW,8BACvD,MAAO,CACH,GAAMA,EAAUe,UAChB,KAAQ,GAAGL,KAAaC,IACxB,WAAcD,EACd,YAAeC,EACf,OAAUX,EAAUgB,OACpB,WAAchB,EAAUzE,UACxB,oBAAuByE,EAAUiB,oBACjC,cAAiBL,EACjB,aAAgBC,EAChB,2BAA8BC,EAC9B,aAAgB,GAAGF,KAAgBC,IACnC,iBAAoB/I,KAAKwI,wBAAwBN,EAAW,oBAC5D,8BAAiClI,KAAKwI,wBAAwBN,EAAW,iCACzE,kBAAqBlI,KAAKmI,qBAAqBD,EAAW,qBAC1D,SAAYlI,KAAKmI,qBAAqBD,EAAW,6BAGzDkB,0BAA0BrI,GACtB,MAAMsI,EAAU,IAAIC,OAAevI,GAC7BwI,EAAOA,CAACF,EAAcE,IAAiBA,KAAQF,EAAUA,EAAQE,KAAU,IACjF,MAAO,CACH/I,MAAO6I,EAAQG,uBACf/I,MAAO4I,EAAQI,SAAWJ,EAAQK,gBAClCC,MAAO,CACHC,UAAWP,EAAQI,QACnBI,KAAMR,EAAQK,gBACd3I,SACAW,QAAS,CACL,CACIlB,MAAO,cACPC,MAAO8I,EAAKF,EAAS,kBAEzB,CACI7I,MAAO,aACPC,MAAO8I,EAAKF,EAAS,gBACrBM,MAAO,CACHG,KAAMA,IAAmC,QAA7BC,OAAQC,mBAG5B,CACIxJ,MAAO,OACPC,MAAO8I,EAAKF,EAAS,gBAEzB,CACI7I,MAAO,MACPC,MAAO8I,EAAKF,EAAS,cAEzB,CACI7I,MAAO,YACPC,MAAO8I,EAAKF,EAAS,iBAEzB,CACI7I,MAAO,gBACPC,MAAO8I,EAAKF,EAAS,oBAEzB,CACI7I,MAAO,eACPC,MAAO8I,EAAKF,EAAS,mBAEzB,CACI7I,MAAO,mBACPC,MAAO8I,EAAKF,EAAS,uBAEzB,CACI7I,MAAO,cACPC,MAAO8I,EAAKF,EAAS,iBAEzB,CACI7I,MAAO,YACPC,MAAO8I,EAAKF,EAAS,yB,2DC9gBvC,SAAU1L,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMgM,EAA+BC,8BAAkB,qBAEvD,OAAQhM,yBAAcC,yBAAa8L,EAA8B,CAC/DE,UAAWvM,EAAKuM,UAChBtL,UAAWhB,EAAO,KAAOA,EAAO,GAAMuM,GAAiBxM,EAAKyM,eAAe,IAC3E9L,YAAaX,EAAKW,YAClBC,YAAaZ,EAAKyM,eAClB/L,OAAQV,EAAKU,OACbM,eAAgBhB,EAAKe,UACpB,KAAM,EAAG,CAAC,YAAa,cAAe,cAAe,SAAU,mB,mRCerDI,+BAAgB,CAC7BE,WAAY,CAAEqL,wBACdlL,KAAMA,KAAA,CACJ+K,UAAW,kBACXI,IAAKC,OAAIC,eACTC,YAAa,GACbC,SAAU,GACVC,eAAe,EACfrM,aAAa,EACbsM,yBAA0B,CACtB,iBACA,mBACA,kBACA,iCAEJC,sBAAuB,CACnB,cACA,gBACA,6BACA,gBAEJC,mBAAmB,EACnB1B,QAAS,GACT2B,eAAgB,GAChBC,YAAa,EACbC,gBAAiB,GACjB1M,YAAa,GACb6L,eAAgB,GAChB/L,OAAQ,GACR6M,gBAAgB,EAChBC,QAAS,GACTC,oBAAqB,GACrBzJ,KAAM,GACN0J,YAAY,IAEdC,MAAO,CACL,OAAU,CACN,eAAc,MAACC,IACZxL,KAAK0K,YAAc,IAAIe,OACnBD,EAAME,aACL1L,KAAK4K,cAAgBY,EAAMG,aAC3B3L,KAAK2K,SAAWa,EAAMI,OACtB5L,KAAK0K,YAAYmB,aAAaL,EAAME,aACjCF,EAAMM,mBAAkB9L,KAAKkL,gBAAkBM,EAAMM,wBAClD9L,KAAK+L,aAAaP,EAAME,cAE9B1L,KAAKoL,QAAUI,EAEnBxL,KAAK1B,OAAS0B,KAAKgM,aAEvBC,WAAW,EACXC,MAAM,IAGZrM,QAAS,CACPmM,YACI,IAAI1N,EAAuB,GAiC3B,OAhCAA,EAAO6N,KAAKnM,KAAKoM,oBACbpM,KAAKqM,uBACL/N,EAASA,EAAOgO,OAAOtM,KAAKuM,qCAE5BjO,EAAO6N,KAAKnM,KAAKwM,kBACjBlO,EAAO6N,KAAKnM,KAAKyM,mBACjBnO,EAAO6N,KAAKnM,KAAK0M,gBAErBpO,EAAO6N,KAAKnM,KAAK2M,qBACjBrO,EAAO6N,KAAKnM,KAAK4M,gBACjBtO,EAAO6N,KAAKnM,KAAK6M,YACZ7M,KAAKqM,yBACN/N,EAASA,EAAOgO,OAAOtM,KAAK8M,cAEhCxO,EAAO6N,KAAKnM,KAAK+M,mBACjBzO,EAAO6N,KAAKnM,KAAKgN,qBACjB1O,EAAO6N,KAAKnM,KAAKiN,eACjB3O,EAAO6N,KAAKnM,KAAKkN,oBACjB5O,EAAO6N,KAAKnM,KAAKmN,sBACjB7O,EAAO6N,KAAKnM,KAAKoN,wBACjB9O,EAAO6N,KAAKnM,KAAKqN,kBACjB/O,EAAO6N,KAAKnM,KAAKsN,kBACjBhP,EAASA,EAAOgO,OAAOtM,KAAKuN,kBAC5BjP,EAAO6N,KAAKnM,KAAKwN,kBACjBlP,EAAO6N,KAAKnM,KAAKyN,oBACjBnP,EAAO6N,KAAKnM,KAAK0N,yBACjBpP,EAAO6N,KAAKnM,KAAK2N,mBAIjBrP,EAAO6N,KAAKnM,KAAK4N,qBACjBtP,EAAO6N,KAAKnM,KAAK6N,2BACVvP,GAEXwP,aACI,OAAO9N,KAAKiL,YAAc,GAE9BoB,uBACI,MAAyC,SAAlCrM,KAAKoL,QAAQ2C,kBAExB,mBAAmBC,GACfhO,KAAKiL,WAAa+C,EAClBhO,KAAKqJ,cAAgB4E,OAAMC,IAAI,iBAAkB,CAAEtE,UAAWuE,SAAS,GAAGnO,KAAKiL,cAC/E,MAAM,iBACFmD,EAAgB,WAChBC,EAAU,gBACVC,EAAe,gBACfC,EAAe,eACfjB,EAAc,UACdkB,GACAxO,KAAKqJ,QAAQoF,eACjBzO,KAAKgL,eAAiB,CAClB,WAAchL,KAAKqJ,QAAQqF,eAC3B,YAAe1O,KAAKqJ,QAAQsF,gBAC5B,OAAU3O,KAAKqJ,QAAQuF,YACvB,UAAa5O,KAAKqJ,QAAQwF,eAC1B,cAAiBT,EACjB,2BAA8BC,EAC9B,aAAgBC,EAChB,iBAAoBC,EACpB,gBAAmBjB,EACnB,8BAAiCkB,EACjC,kBAAqBxO,KAAKqJ,QAAQyF,iBAClC,SAAY9O,KAAKqJ,QAAQ0F,qBACzB,WAAc/O,KAAKqJ,QAAQ2F,iBAE/BhP,KAAKoL,QAAUpL,KAAKgL,eACpBhL,KAAKzB,aAAc,EAChByB,KAAKkL,kBACJlL,KAAKxB,YAAcwB,KAAKkL,gBACxBlL,KAAKqK,eAAiBrK,KAAKxB,cAGnC,eAAeoD,EAAqD7B,GAC3DkP,OAASxO,OAITT,KAAK8N,aAGN9N,KAAKkP,OAAOnP,GAFZC,KAAKmP,OAAOvN,EAAM7B,GAItBqP,OAAc3O,OAAQ,GARlBT,KAAKqP,cAAczN,EAAM7B,IAUjCsP,cAAczN,EAAW7B,GACrB,MAAM,kBAAEuP,GAAsBC,iBACxBxO,EAAcyO,OAAY9O,cAAcX,GACxC0P,EAAyBzP,KAAK0P,wBAAwB3P,GACtD4P,EAAYL,EAAkB,sBAAuBvO,EAAQ0O,EAAgB,OAAJ7N,QAAI,IAAJA,OAAI,EAAJA,EAAMiI,MACrF+F,eAASD,EAAW3P,KAAK6P,UAE7B,aAAa9H,EAAQhI,GACjB,MAAMgB,EAAcyO,OAAY9O,cAAcX,GACxC0P,EAAyBzP,KAAK0P,wBAAwB3P,GACtD+P,EAAoB,IAAIC,OACxB1G,EAAU,IAAIC,aAAsBwG,EAAaE,gBAAgBjP,EAAQ0O,IACzE7F,EAAYkG,EAAaG,cAS/B,GAPAhC,OAAMiC,IAAI,iBAAkB7G,GAEQ,QAAjCrJ,KAAKoL,QAAQ2C,mBACZ/N,KAAKqJ,QAAUA,QACTrJ,KAAKqJ,QAAQ8G,mBAAmBnQ,KAAKoL,QAAQgF,mBAGnDpQ,KAAKuK,IAAI8F,kBAAmB,CAC5B,MAAMC,QAAatQ,KAAKuK,IAAI8F,kBACxBzG,EAAW7I,EAAQ0O,EAAYzP,KAAK6P,QAAS7P,KAAKuQ,OAClDxQ,GAEJ,GAAIuQ,EAAM,OAEd,GAA4B,QAAxBvP,EAAOyP,aACP,OAAOxQ,KAAK6P,QAAQ1D,KAAK,0BAA0BvC,SAEjDgG,eAAShG,EAAW5J,KAAK6P,UAEnC,aAAa9P,GACT,MAAMgB,EAAcyO,OAAY9O,cAAcX,GACxCmP,EAAS,IAAIa,OAEnBb,EAAOuB,YAAYzQ,KAAKiL,kBAClBiE,EAAOwB,aAAa3P,GAC1B,IAAI,MAAMH,KAAQG,EACVH,KAAQZ,KAAKgL,iBACbhL,KAAKgL,eAAepK,GAAQG,EAAOH,IAI3C,GADAqN,OAAM0C,WAAW,mBACb3Q,KAAKkL,gBAAiB,OAAOlL,KAAKqK,eAAiB,YACvDrK,KAAK6P,QAAQe,QAEjBC,mBAAmBpB,EAAW,IAC1B,QAAIzP,KAAK8N,eAAiB2B,EAAWqB,SAAS9Q,KAAKxB,eAKvD,uBAEI,GAAIwB,KAAKsL,cAAgBtL,KAAKqJ,QAAQ0H,YAC9B/Q,KAAKqJ,QAAQ0H,YAAc/Q,KAAKqJ,QAAQK,gBAAgB9C,MAAM,aAC9D,UACU5G,KAAKqJ,QAAQ2H,mBACbhR,KAAKqJ,QAAQ4H,wBACbC,eAAa,KACtB,MAAOC,GACJC,eAAY,8BAA8BD,GAGtDnR,KAAK6P,QAAQ1D,KAAK,+BAA+BnM,KAAKqJ,QAAQI,UAElEiG,wBAAwB9N,GACpB,OAAOjC,OAAOkB,OAAOe,GACRoD,OAAQqM,GAAWvQ,2BAAcuQ,IAAM,qBAAsBA,GAC7D/Q,IAAI,EAAEgR,sBAA2BA,IAElD,qCAAqC1H,EAAmB7J,GACpD,IAAK,MAAMG,KAAKP,OAAOkB,OAAOd,GAAe,CACzC,MAAMQ,EAAYL,EAClB,GAAsC,oBAA3BK,EAAK8P,kBACZ,UACU9P,EAAK8P,kBAAkBzG,GAC/B,MAAOuH,GACLI,QAAQC,MAAM,GAAGL,GACjBC,eAAY,GAAGD,MAK/B/Q,YAAYC,GACR,OAAOA,EAAYC,IAAKC,IAAS,CAAQC,MAAOD,EAAME,MAAOF,MAEjEgM,mCACI,MAAM8E,EAAK/P,IAAqB,CAAOd,MAAOc,EAAKb,MAAOa,IAC1D,MAAO,CACH,CACIL,GAAI,aACJC,SAAU,aACV5B,KAAM6B,OAAUsQ,UAChBC,aAAcA,IAAML,EAAErR,KAAKoL,QAAQvJ,YACnCR,cAAeA,KAAA,CAAQN,OAASf,KAAKoL,QAAQvJ,cAEjD,CACIZ,GAAI,cACJC,SAAU,YACV5B,KAAM6B,OAAUsQ,UAChBC,aAAcA,IAAML,EAAErR,KAAKoL,QAAQlJ,aACnCb,cAAeA,KAAA,CAAQN,OAASf,KAAKoL,QAAQlJ,eAEjD,CACIjB,GAAI,SACJC,SAAU,SACV5B,KAAM6B,OAAUsQ,UAChBC,aAAcA,KAAA,CACVlR,MAAOR,KAAKoL,QAAQlC,OACpBzI,MAA6C,SAAtCT,KAAKoL,QAAQlC,OAAOyI,cACrB,IACsC,WAAtC3R,KAAKoL,QAAQlC,OAAOyI,cACpB,IACA,QAEVtQ,cAAeA,KAAA,CAAQN,OAASf,KAAKoL,QAAQlC,UAEjD,CACIjI,GAAI,oBACJC,SAAU,aACV5B,KAAM6B,OAAUsQ,UAChBC,aAAcA,IAAML,EAAErR,KAAKoL,QAAQ3H,WACnCpC,cAAeA,KAAA,CACXN,OAAS,CACL,UAAaf,KAAKoL,QAAQ3H,UAC1B,qBAAuB,MAInC,CACIxC,GAAI,sBACJC,SAAU,sBACV5B,KAAM6B,OAAUsQ,UAChBC,aAAcA,IAAML,EAAErR,KAAKoL,QAAQgF,kBACnC/O,cAAeA,KAAA,CACXgP,kBAAoB1O,UAChB,MAAM0H,QAAgBC,OAAesI,SAAShI,GAC9C5J,KAAKqJ,QAAU,IAAIC,OAAeD,GAClCrJ,KAAKqJ,QAAQ8G,mBAAmBnQ,KAAKoL,QAAQgF,wBAMjE5D,iBACI,MAAMxN,EAAcwQ,OAAYxO,oBAGhC,OAFAhC,EAAK6I,UAAY,IAAM7H,KAAK6Q,mBAAmB,CAAC,eAChD7R,EAAK0S,aAAe,IAAM1R,KAAKoL,QAAQvJ,WAChC7C,GAEXyN,kBACI,MAAMzN,EAAcwQ,OAAYvN,qBAGhC,OAFAjD,EAAK6I,UAAY,IAAM7H,KAAK6Q,mBAAmB,CAAC,gBAChD7R,EAAK0S,aAAe,IAAM1R,KAAKoL,QAAQlJ,YAChClD,GAEX0N,cACI,MAAMmF,EAA0C,QAA7B7R,KAAKuK,IAAIuH,gBACtBC,EAAuC,SAA7B/R,KAAKuK,IAAIuH,gBACnB5I,EAAgBsG,OAAYpN,iBAsClC,OArCA8G,EAAOtF,YAAc5D,KAAK8N,aAC1B5E,EAAOwI,aAAe,IAAM1R,KAAKoL,QAAQlC,OACzCA,EAAOrB,UAAY,OACV7H,KAAK8N,eAAiB+D,GAAcE,KAGlC/R,KAAK6Q,mBAAmB,CAAC,YAE/BgB,IAAcE,GAAa/R,KAAK8N,eACjC5E,EAAOnD,cAAgB,KAAM,CAAGvF,MAAO,SAAUC,MAAO,MACxDyI,EAAO8I,sBAAwB,KAAM,CAAGjR,OAAQ,OAGpDmI,EAAO+I,WAAatQ,UAIhB,MAAMuQ,EAAY9S,EAAKqB,MACjB0R,EAAYnS,KAAKoL,QAAQlC,OAC/B,GAAIlJ,KAAK8N,cAAgBoE,GAAaC,EAAW,CAC7C,MAAMC,QAAeC,eACjB,UACA,wBAAwBF,QAAgBD,IACxC,6EACA,CACI,CACIlT,KAAM,SAAU2F,KAAM,SAE1B,CACI3F,KAAM,gBAAiB2F,KAAM,MAAOC,MAAO,YAIvD,MAAkB,kBAAXwN,EAEX,OAAO,GAEJlJ,GAEX4D,YACI,MAAMwF,EAAY9C,OAAYhN,eAO9B,GANA8P,EAAUZ,aAAe,IAAM1R,KAAKoL,QAAQ3H,UAC5C6O,EAAUzK,UAAY,IAAM7H,KAAK6Q,mBAAmB,CAChD,kBAAmB,mBAAoB,mBAIV,QAA7B7Q,KAAKuK,IAAIuH,gBAA2B,CACpC,MAAMS,EAAQjJ,OAAevG,iBACvByP,EAAuB,GAC7BF,EAAUxP,QAAU,IAAM2P,IAAMF,GAC3BG,SAASF,EAAsB,SAC/BG,OAAOC,QAEhB,OAAOC,eAAmBP,IAE9B1F,eACI,MAAO,CACH3L,GAAI,WACJC,SAAU,6CACV5B,KAAM6B,OAAU2R,UAChBC,WAAYA,KAAM,EAClBlL,UAAWA,KAAO7H,KAAK8N,cAAgBsB,OAAc3O,QAAUwO,OAASxO,MACxEiB,QAASA,IACE,CACH,CACIlB,MAAO,mCACPC,MAAO,GACPI,OAAQ,CACJ,CAAEL,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,KAAMC,MAAO,WAO9CoM,WACI,MAAO,CACH5L,GAAI,OACJC,SAAU,0CACV5B,KAAM6B,OAAU6R,WAChBpP,aAAa,EACbiE,UAAY5D,GAAW,OAAOE,KAAK,GAAGF,EAAEgP,UACxCtN,OAAQ,CACJuN,iBAAkB,CACd,UAGRH,WAAYA,KAAM,IAG1BhG,kBACI,MAAO,IACAyC,OAAY9L,qBACfmE,UAAWA,IAAM7H,KAAK6Q,mBAAmB7Q,KAAK8K,yBAGtDkC,oBACI,MAAO,IACAwC,OAAY1L,uBACf+D,UAAWA,IAAM7H,KAAK6Q,mBAAmB7Q,KAAK8K,yBAGtDmC,cACI,MAAO,IACAuC,OAAY9J,iBACfmC,UAAYjG,GAAc5B,KAAK6Q,mBAAmB7Q,KAAK8K,yBAC/ClJ,EAAKwC,YAAY5D,MAAMoG,MAAM,uBAG7CsG,mBACI,MAAO,IACAsC,OAAYtJ,sBACf2B,UAAYjG,GAAc5B,KAAK6Q,mBAAmB7Q,KAAK8K,yBAC/ClJ,EAAKwC,YAAY5D,MAAMoG,MAAM,uBAG7CuG,qBACI,MAAMgG,EAAuB3D,OAAYnJ,wBA0BzC,OAzBA8M,EAAcpP,gBAAkB,CAACC,EAAWC,EAAQlE,KACZ,IAAAqT,EAAAC,EAAAC,EAAAC,EAApC,MAAI,YAAYpP,KAAK,GAAGH,EAAEvD,OACf,CACH,CAAED,MAAO,iBAAkBC,MAA0B,QAArB2S,EAAErT,EAAagB,cAAM,IAAAqS,OAAA,EAAnBA,EAAqBzM,gBACvD,CAAEnG,MAAO,2BAA4BC,MAA0B,QAArB4S,EAAEtT,EAAagB,cAAM,IAAAsS,OAAA,EAAnBA,EAAqBtM,kBACjE,CAAEvG,MAAO,gCAAiCC,MAA0B,QAArB6S,EAAEvT,EAAagB,cAAM,IAAAuS,OAAA,EAAnBA,EAAqBpM,+BACtE,CAAE1G,MAAO,kBAAmBC,MAA0B,QAArB8S,EAAExT,EAAagB,cAAM,IAAAwS,OAAA,EAAnBA,EAAqBC,kBAGzD,CAAEhT,MAAO,iBAAkBC,MAAOuD,EAAExD,QAE3CR,KAAK8N,eACLqF,EAAc9R,cAAiBC,IAC3B,GAAI,YAAY6C,KAAK,GAAG7C,EAAIb,OACxB,MAAO,CACHM,OAAQ,CACJ,iBAAoBf,KAAKgL,eAAe/E,cACxC,8BAAiCjG,KAAKgL,eAAe5E,2BACrD,gBAAmBpG,KAAKgL,eAAe1E,iBAM3D6M,EAActL,UAAY,IAAM7H,KAAK6Q,mBAAmB7Q,KAAK6K,0BACtDsI,GAEX/F,uBACI,MAAMmB,EAAyBiB,OAAY/I,0BAG3C,OAFA8H,EAAgB1G,UAAa5D,IAAY,YAAYE,KAAKF,EAAE0C,eAAenG,QACtER,KAAK6Q,mBAAmB7Q,KAAK6K,0BAC3B0D,GAEXlB,iBACI,MAAMmB,EAAmBgB,OAAY3I,oBAGrC,OAFA2H,EAAU3G,UAAajG,GAAc5B,KAAK6Q,mBAAmB7Q,KAAK6K,4BAC1DjJ,EAAK+E,eAAenG,MAAMoG,MAAM,qBACjC4H,GAEXlB,iBACI,MAAMA,EAAwBkC,OAAYxI,yBAG1C,OAFAsG,EAAezF,UAAajG,GAAc5B,KAAK6Q,mBAAmB7Q,KAAK6K,4BAC/DjJ,EAAK+E,eAAenG,MAAMoG,MAAM,qBACjC0G,GAEXE,iBACI,MAAMiG,EAAmBjE,OAAYrI,qBAGrC,OAFAsM,EAAU5L,UAAY,IAAM7H,KAAK6Q,mBAAmB,CAAC,sBACrD4C,EAAU/B,aAAe,IAAM1R,KAAKoL,QAAQsI,kBACrCD,GAEX/F,wBACG,MAAMiG,EAAkBnE,OAAY1H,2BAKpC,OAJA6L,EAAS9L,UAAajG,GAAc,CAChC,cACA,yBACFkP,SAASlP,EAAKgS,aAAanT,OACtBkT,GAEVpG,iBACI,MAAMsG,EAAqBrE,OAAYhI,oBAEvC,OADAqM,EAAU,GAAGhM,UAAY,IAAM7H,KAAK6Q,mBAAmB,CAAC,sBACjDgD,GAEXpG,mBACI,MAAO,CACHxM,GAAI,eACJC,SAAU,kBACV5B,KAAM6B,OAAUmB,UAChBjB,cAAgBC,IAAW,CAAOP,OAAQO,EAAIb,QAC9CoH,UAAWA,IAAM7H,KAAK6Q,mBAAmB,CAAC,kBACN,QAA7B7Q,KAAKuK,IAAIuH,gBAChBvQ,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAASA,IAAMoS,OAAmBC,oBAG1CpG,kBACI,MAAO,CACH1M,GAAI,aACJC,SAAU,aACV5B,KAAM6B,OAAUmB,UAChB0R,KAAMrS,UACH3B,KAAKmL,qBAAuB8C,OAAMC,IAAI,qBAC/B,GAEV7M,cAAgBC,IAAW,CAAOP,OAAQO,EAAIb,QAC9CoH,UAAWA,IAAM7H,KAAK6Q,mBAAmB,CAAC,gBAAkB7Q,KAAKmL,eACjE5J,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAASA,IAAM1B,KAAKI,YAAY,CAC5B,WACA,eAIZ6T,gBACI,MAAO,CACHhT,GAAI,qBACJC,SAAU,cACV5B,KAAM6B,OAAUC,QAChBC,cAAeA,EAAEZ,YAAmB,CAChC6Q,iBAAkB,CACd,yBAA4B,GAC5B,MAAS7Q,KAGjBoH,UAAYjG,GAAc5B,KAAK6Q,mBAAmB,CAAC,qBAAsB,gBAAkBjP,EAAKsS,YAActS,EAAKsS,WAAWzT,MAAMmG,MAAM,aAC1IrF,WAAaD,GAAaE,OAAW5B,SAAS0B,KAGtD6S,YACI,MAAO,CACHlT,GAAI,OACJC,SAAU,OACV5B,KAAM6B,OAAUmB,UAChBf,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CD,cAAeA,EAAEZ,YAAmB,CAChC6Q,iBAAkB,CACd,yBAA4B,GAC5B,MAAS7Q,KAGjBoH,UAAYjG,GAAc5B,KAAK6Q,mBAAmB,CAAC,OAAQ,gBAAkBjP,EAAKsS,YAActS,EAAKsS,WAAWzT,MAAMmG,MAAM,aAC5HlF,QAASA,IAAM1B,KAAKI,YAAY,CAC5B,mBACA,UACA,QACA,qBACA,UACA,oBACA,qBACA,UACA,UACA,WACA,iBACA,WACA,iBACA,0BACA,8BAIZgU,2BACI,OAAOvB,eAAmB,CACtB5R,GAAI,8BACJC,SAAU,kBACVtB,UAAU,EACViI,UAAYjG,GAAe5B,KAAK6Q,mBAAmB,CAC/C,mCACA,oCACA,kCACA,gBACEjP,EAAKsS,YAActS,EAAKsS,WAAWzT,MAAMmG,MAAM,aACrDjE,QAASA,IAAMC,OAAQC,oBAAoB,KAC3CC,QAASA,IAAMuR,OAAgBtR,iBAC/BC,WAAY,CACRC,cAAc,GAElBK,aAAeC,IAAY,CACvBA,OACA+N,iBAAmB,CACf,yBAA4B,GAAI,MAAS/N,QAKzDqK,oBACI,MAAM0G,EAAsC,QAA7BtU,KAAKuK,IAAIuH,gBAClBC,EAAuC,SAA7B/R,KAAKuK,IAAIuH,gBACnByC,EAAmC,QAA7BvU,KAAKuK,IAAIuH,gBACf0C,EAA4C,iBAA7BxU,KAAKuK,IAAIuH,gBAC9B,MAAO,CACH7Q,GAAI,eACJC,SAAU,qBACV5B,KAAM6B,OAAUmB,UAChBjB,cAAgBC,IAAW,CAAOP,OAAQO,EAAIb,QAC9CoH,UAAWA,IAAM7H,KAAK6Q,mBAAmB,CAAC,mBAAqBkB,IAAYwC,IAAQC,IAAiBF,EACpG/S,WAAaD,GAAaE,OAAW5B,SAAS0B,GAC9CI,QAASA,IAAM1B,KAAKI,YAAY,CAAC,MAAO,SAGhDuM,oBACI,MAAO,CACH1L,GAAI,UACJC,SAAU,iBACV5B,KAAM6B,OAAUsT,sBAChBT,KAAMrS,UACG3B,KAAK8N,eACN9N,KAAKsL,iBAAmB2C,OAAMC,IAAI,oBAE/B,GAEX7J,gBAAkBzC,GACP,uBAAuBA,EAAKC,WAAWpB,SAASmB,EAAKM,YAAYzB,WAAWmB,EAAKsH,OAAO1I,SAEnGkH,gBAAiBA,KAAM,EACvBG,UAAWA,KAAO7H,KAAK8N,eAAiBsB,OAAc3O,MACtDiB,QAASC,UACL,MAAM+S,EAAU,CACZ,WAAc9S,EAAKC,WAAWpB,MAC9B,YAAemB,EAAKM,YAAYzB,MAChC,OAAUmB,EAAKsH,OAAOzI,OAG1B,GAAIT,KAAKsL,WAAY,CACjB,MAAMqJ,QAAiB3U,KAAK0K,YAAYkK,mBAAmBF,GAC3D,OAAOC,EAASrU,IAAKC,IACjB,MAAMsU,EAAWrF,OAAYpG,0BAA0B7I,GASvD,OARAsU,EAASlL,MAAMjI,QAAQyK,KAAK,CACxB3L,MAAO,eACPC,MAAOF,EAAKqT,eAEhBiB,EAASlL,MAAMjI,QAAQyK,KAAK,CACxB3L,MAAO,SACPC,MAAOF,EAAKqL,SAETiJ,IAIf,MAAMF,QAAiBrL,OAAewL,OAAOJ,GAC7C,OAAOC,EAASrU,IAAKC,GAAciP,OAAYpG,0BAA0B7I,KAE7EoF,OAAQ,CACJuN,iBAAkB,CACd,QACA,OACA,QAEJpN,WAAY,CACR,CACI9G,KAAM,cACN2F,KAAM,MACNE,QAASA,KACL7E,KAAKqK,eAAiB,cAE1B0K,MAAO,CACHC,SAAU,CACNvV,QAASA,IAAMO,KAAKqM,0BAKhC,CACIrN,KAAM,aACN2F,KAAM,MACNE,QAASA,KACL7E,KAAKqK,eAAiB,iBAG9B,CACIrL,KAAM,WACN4F,MAAO,UACPD,KAAM,MACNoQ,MAAO,CACHC,SAAU,CACNvV,QAASA,KAAM,EACfwV,QAAQlN,EAAOnG,GACX,OAAOW,qBAAQX,EAAKsT,YAIhCrQ,QAAUjD,GACFA,EAAKsT,QAAQvL,MAAMC,UACZ5J,KAAK6P,QAAQ1D,KAAK,+BAA+BvK,EAAKsT,QAAQzU,OAElET,KAAK6P,QAAQ1D,KAAK,qCAAqCvK,EAAKsT,QAAQzU,YAOnGoN,0BACI,IAAIsH,EAAqB,GACrBC,EAAyB,GAC7B,MAAO,CACHnU,GAAI,sBACJC,SAAU,wBACV5B,KAAM6B,OAAUkU,qBAChBxN,UAAWlG,MAAOoG,EAAQjD,OAClB9E,KAAKsL,YAActL,KAAKiL,YAAc,KACtCkK,EAAgB3F,OAAY9O,cAAcoE,GAC1CsQ,QAA0BpV,KAAK0K,YAC1B4K,yBAAyBH,GACvBC,EAAkBnQ,QAAU,GAI3CvD,QAASC,UACL,MAAM4T,EAAUhS,GAAiBX,OAAQ4S,2BAA2BjS,GACpE,OAAO6R,EAAkB9U,IAAI,EAAGmV,QAAO1U,aACnC,MAAM/B,EAAO,GAAG+B,EAAOc,cAAcd,EAAOmB,cAC5C,MAAO,CACH1B,MAAOxB,EACPyB,MAAOM,EAAO2U,WACd/L,MAAO,CACH8L,MAAkB,IAARA,EAAH,IACPE,UAAWR,EACXS,YAAa7U,EACb8U,MAAO9U,EAAOE,GACd6U,YAAa,CACT,CACI,OACA,GAAGX,EAActT,cAAcsT,EAAcjT,cAC7C,GAAGnB,EAAOc,cAAcd,EAAOmB,eAEnC,CACI,SACAiT,EAAcjM,OACdnI,EAAOmI,QAEX,CACI,YACAqM,EAAOJ,EAAc1R,WACrB8R,EAAOxU,EAAO0C,YAElB,CACI,gBACA0R,EAAclP,cACdlF,EAAOkF,eAEX,CACI,UACAkP,EAAc/O,2BACdrF,EAAOqF,kCAO/BT,OAAQ,CACJuN,iBAAkB,CACd,QACA,QAEJpN,WAAY,CACR,CACI9G,KAAM,gBACN2F,KAAM,QACNoQ,MAAO,CACHgB,QAAS,CACLtW,QAASA,KAAM,EACfwV,QAASA,CAAClN,EAAQ9D,KAAY1B,qBAAQ0B,EAAE+R,uBAGhDnR,QAASA,KACL7E,KAAKqK,eAAiB,iBAG9B,CACIrL,KAAM,SACN2F,KAAM,MACNC,MAAO,UACPmQ,MAAO,CACHgB,QAAS,CACLtW,QAASA,KAAM,EACfwV,QAASA,CAAClN,EAAQ9D,KAAY1B,qBAAQ0B,EAAE+R,uBAGhDnR,QAAUjD,IACN5B,KAAK0K,YAAYuL,cAAcrU,EAAKoU,oBAAoBrM,MAAMkM,OACzDK,KAAMC,IACHnW,KAAK6P,QAAQ1D,KAAK,+BAA+BgK,EAAOT,cACzDU,MAAM,KACLpW,KAAK6P,QAAQ1D,KAAK,+BAA+BvK,EAAKoU,oBAAoBvV,eAQ1G2L,mBACI,MAAO,CACHnL,GAAI,YACJC,SAAU,oBACV5B,KAAM6B,OAAUkV,gBAChBrC,KAAMrS,UACE3B,KAAK8N,eACL9N,KAAKmK,UAAY,cACjBnK,KAAKsL,iBAAmB2C,OAAMC,IAAI,kBAClClO,KAAKmL,qBAAuB8C,OAAMC,IAAI,sBAEnC,GAEXrG,UAAWA,IAAM7H,KAAK8N,aACtBpM,QAASC,UACL,MAAM2U,EAAcC,IAAiB,CACjCvX,KAAM,OACNM,KAAM,SACN8S,OAAQA,KACJpS,KAAKxB,YAAc+X,EACnBvW,KAAKqK,eAAiBrK,KAAKxB,eAG7BgY,EAAU,CAAC,aAAc,SAAU,QACnCC,EAAO,CACT,CAAC,aAAczW,KAAKgL,eAAenJ,WAAYyU,EAAW,eAC1D,CAAC,cAAetW,KAAKgL,eAAe9I,YAAaoU,EAAW,gBAC5D,CAAC,SAAUtW,KAAKgL,eAAe9B,OAASoN,EAAW,WACnD,CAAC,YAAa1T,OAAQ4S,2BAA2BxV,KAAKgL,eAAevH,WAAa6S,EAAW,oBAC7F,CAAC,oBAAqBtW,KAAKgL,eAAe0I,kBAAmB4C,EAAW,sBACxE,CAAC,gBAAiBtW,KAAKgL,eAAe/E,cAAeqQ,EAAW,gBAChE,CAAC,UAAWtW,KAAKgL,eAAe5E,2BAA6BkQ,EAAW,gBACxE,CAAC,eAAgBtW,KAAKgL,eAAe1E,aAAegQ,EAAW,gBAC/D,CAAC,mBAAmBtW,KAAKgL,eAAejE,iBAAkBuP,EAAW,mBACrE,CAAC,kBAAkBtW,KAAKgL,eAAewI,gBAAiB8C,EAAW,mBACnE,CAAC,cAAetW,KAAKgL,eAAe9D,8BAA+BoP,EAAW,mBAC9E,CAAC,WAAYtW,KAAKgL,eAAe0L,SAAUJ,EAAW,uBAEtDtW,KAAKmL,gBACLsL,EAAKtK,KAAK,CAAC,aAAcnM,KAAKgL,eAAekJ,WAAYoC,EAAW,gBAGxE,MAAMK,EAAiB,CAACC,QAAS,GAAIC,MAAO,uBAM5C,OALAJ,EAAKK,QAAQ,CAACC,EAAQ7W,KACd8W,eAAaD,EAAE,KACfJ,EAAUC,QAAQzK,KAAKjM,KAE/BF,KAAK+K,kBAAoB4L,EAAUC,QAAQ3R,QAAU,EAC9C,CAAC,CACJzE,MAAO,GACPC,MAAO,GACPkJ,MAAO,CACH8M,OACAD,UACAS,UAAW,CAACN,OAIxBhR,OAAQ,CACJG,WAAY,CAKR,CACI9G,KAAM,WACN2F,KAAM,MACNC,MAAO,UACPmQ,MAAO,CACHgB,QAAS,CACLtW,QAASA,KAAM,EACfyX,OAAQA,IACJlX,KAAKsL,YACFtL,KAAK4K,gBACJ5K,KAAK+K,oBAIrBlG,QAASlD,UACL,UACU3B,KAAK0K,YAAYyM,aAAanX,KAAK2K,SAAU3K,KAAKiL,kBAClDjL,KAAK0K,YAAY0M,YACvBpX,KAAK6P,QAAQ1D,KAAK,+BAA+BnM,KAAKiL,YACxD,MAAMkG,GACJjM,eAAa,GAAGiM,MAO5B,CACInS,KAAM,UACN2F,KAAM,MACNC,MAAO,UACPmQ,MAAO,CACHgB,QAAS,CACLmB,OAAQA,KAAOlX,KAAK4K,gBAAkB5K,KAAK+K,oBAGnDlG,QAASlD,SAAY3B,KAAKqX,mBAGlCnE,iBAAkB,CAAC,QAAS,c,qBC35B5C,MAAM/S,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASxC,KAErD,gB,kCCPf,4SAIOgE,eAAeqG,EAAchD,EAAO,IACvC,MAAMsS,QAAmB/R,OAAgByC,cAAc,CAAChJ,KAAMgG,IAC9D,OAAOsS,EAAWtS,OAAQf,IAAY1B,qBAAQ0B,IAAsB,IAAhBA,EAAEjF,KAAKuY,QACtDjX,IAAKqT,IAAa,CACfnT,MAAOmT,EAAS3U,KAChByB,MAAOkT,EAAS6D,YAChB7N,MAAOgK,KAIZhS,eAAe8V,EAAiBzS,EAAO,IAC1C,MAAMsS,QAAmB/R,OAAgBmS,QAAQ,CAAC,YAAe1S,IACjE,OAAOsS,EAAWhX,IAAKqT,IAAa,CAC5BnT,MAAOmT,EACPlT,MAAOkT,KAIZhS,eAAegW,EAAiB3S,EAAO,IAC1C,MAAM4S,QAAcrS,OAAgByC,cAAc,CAC9ChJ,KAAMgG,EACN6S,IAAK,4BAGT,OAAOD,EAAMtX,IAAKwX,IAAS,CACvBtX,MAAOsX,EAAK9Y,KACZyB,MAAOqX,EAAK9Y,KACZ2K,MAAOmO,KAIRnW,eAAeoW,IAClB,MAAMC,QAAgBzS,OAAgBwS,uBACtC,OAAOC,EAAQ1X,IAAK2X,IAAW,CAC3BzX,MAAOyX,EAAOjZ,KACdyB,MAAOwX,EAAOjZ,KACd2K,MAAOsO,KAIRtW,eAAekC,IAClB,MAAMqU,QAAgB3S,OAAgB1B,aACtC,OAAOqU,EAAQ5X,IAAK6X,IAAW,CAC3B3X,MAAO2X,EAAOnZ,KACdyB,MAAO0X,EAAOC,UACdzO,MAAOwO,KAIRxW,eAAe4C,EAAa8T,GAC/B,MAAMC,QAAkB/S,OAAgBhB,aAAa8T,GACrD,OAAOC,EAAUhY,IAAKiY,IAAa,CAC/B/X,MAAO+X,EAASvZ,KAChByB,MAAO8X,EAASC,YAChB7O,MAAO4O,KAIR5W,eAAeqE,EAA0ByS,EAAoBzZ,EAAK,IACrE,MAAM0Z,QAAYnT,OAAgBS,0BAA0ByS,EAAYzZ,GACxE,OAAO0Z,EAAIpY,IAAKqY,IAAO,CACnBnY,MAAOmY,EAAG3Z,KACVyB,MAAOkY,EAAGC,yBACVjP,MAAOgP,KAIRhX,eAAewE,EAAY0S,EAAgC7Z,EAAK,IACnE,MAAM8Z,QAAiBvT,OAAgBY,YAAY0S,EAAwB7Z,GAC3E,OAAO8Z,EAASxY,IAAKyY,IAAY,CAC7BvY,MAAOuY,EAAQ/Z,KACfyB,MAAOsY,EAAQC,WACfrP,MAAOoP","file":"js/chunk-6349c9bc.568d3b3c.js","sourcesContent":["import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Region of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'District of current residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'District of current residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'TA of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Village of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    formLabel: _ctx.formLabel,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.fieldComponent,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish\n  }, null, 8, [\"formLabel\", \"skipSummary\", \"activeField\", \"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport { WorkflowService } from \"@/services/workflow_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\"\nimport App from \"@/apps/app_lib\"\nimport { AppInterface } from \"@/apps/interfaces/AppInterface\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { isValueEmpty } from \"@/utils/Strs\"\nimport { PatientDemographicsExchangeService } from \"@/services/patient_demographics_exchange_service\"\nimport { toastDanger, toastWarning } from \"@/utils/Alerts\"\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport dayjs from \"dayjs\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from \"@/composables/offline\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    formLabel: 'Find / Register',\n    app: App.getActiveApp() as AppInterface,\n    ddeInstance: {} as any,\n    ddeDocID: '' as string,\n    ddeIsReassign: false as boolean,\n    skipSummary: false as boolean,\n    currentAddressAttributes: [\n        'current_region',\n        'current_district',\n        'current_village',\n        'current_traditional_authority'\n    ] as string[],\n    homeAddressAttributes: [\n        'home_region',\n        'home_district',\n        'home_traditional_authority',\n        'home_village'\n    ] as string[],\n    hasIncompleteData: false as boolean,\n    patient: {} as any,\n    editPersonData: {} as any,\n    editPerson: -1 as number,\n    personAttribute: '' as string,\n    activeField: '' as string,\n    fieldComponent: '' as string,\n    fields: [] as Array<Field>,\n    isMilitarySite: false,\n    presets: {} as any,\n    registrationSummary: {} as any,\n    form: {} as Record<string, Option> | Record<string, null>,\n    ddeEnabled: false as boolean,\n  }),\n  watch: {\n    '$route': {\n        async handler({query}: any) {\n           this.ddeInstance = new PatientDemographicsExchangeService()\n           if (query.edit_person) {\n                this.ddeIsReassign = query.dde_reassign\n                this.ddeDocID = query.doc_id\n                this.ddeInstance.setPatientID(query.edit_person)\n                if(query.person_attribute) this.personAttribute = query.person_attribute\n                await this.initEditMode(query.edit_person)\n            } else {\n                this.presets = query\n            }\n            this.fields = this.getFields()\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    getFields(): Array<Field> {\n        let fields: Array<Field> = []\n        fields.push(this.personIndexField())\n        if (this.hasScannedNationalID()) {\n            fields = fields.concat(this.hiddenFieldsForScannedNationalID())\n        } else {\n            fields.push(this.givenNameField())\n            fields.push(this.familyNameField())\n            fields.push(this.genderField())\n        }\n        fields.push(this.searchResultField())\n        fields.push(this.hasNpidField())\n        fields.push(this.scanNpid())\n        if (!this.hasScannedNationalID()) {\n            fields = fields.concat(this.dobFields())\n        }\n        fields.push(this.homeRegionField())\n        fields.push(this.homeDistrictField())\n        fields.push(this.homeTAField())\n        fields.push(this.homeVillageField())\n        fields.push(this.currentRegionField())\n        fields.push(this.currentDistrictField())\n        fields.push(this.currentTAField())\n        fields.push(this.currentVillage())\n        fields = fields.concat(this.landmarkFields())\n        fields.push(this.cellPhoneField())\n        fields.push(this.patientTypeField())\n        fields.push(this.facilityLocationField())\n        fields.push(this.occupationField())\n        // fields.push(this.regimentField())\n        // fields = fields.concat(this.dateJoinedMilitaryFields())\n        // fields.push(this.rankField())\n        fields.push(this.relationshipField())\n        fields.push(this.possibleDuplicatesField())\n        return fields\n    },\n    isEditMode() {\n        return this.editPerson >= 1\n    },\n    hasScannedNationalID() {\n        return this.presets.nationalIDStatus === 'true'\n    },\n    async initEditMode(personId: number) {\n        this.editPerson = personId\n        this.patient = await Store.get('ACTIVE_PATIENT', { patientID: parseInt(`${this.editPerson}`)})\n        const {\n            ancestryDistrict,\n            ancestryTA,\n            ancestryVillage,\n            currentDistrict,\n            currentVillage,\n            currentTA\n        } = this.patient.getAddresses()\n        this.editPersonData = {\n            'given_name': this.patient.getGivenName(),\n            'family_name': this.patient.getFamilyName(),\n            'gender': this.patient.getGender(),\n            'birthdate': this.patient.getBirthdate(),\n            'home_district': ancestryDistrict,\n            'home_traditional_authority': ancestryTA,\n            'home_village': ancestryVillage,\n            'current_district': currentDistrict,\n            'current_village': currentVillage,\n            'current_traditional_authority': currentTA,\n            'cell_phone_number': this.patient.getPhoneNumber(),\n            'landmark': this.patient.getClosestLandmark(),\n            'occupation': this.patient.getOccupation()\n        }\n        this.presets = this.editPersonData\n        this.skipSummary = true\n        if(this.personAttribute) {\n            this.activeField = this.personAttribute\n            this.fieldComponent = this.activeField\n        }\n    },\n    async onFinish(form: Record<string, Option> | Record<string, null>, computedData: any) {\n        if (!isOnline.value) {\n            this.createOffline(form, computedData)\n            return\n        }        \n        if (!this.isEditMode()) {\n            this.create(form, computedData)\n        } else {\n            this.update(computedData)\n        }\n        isOfflineMode.value = false\n    },\n    createOffline(form: any, computedData: any) {\n        const { savePersonOffline } = Offline()\n        const person: any = PersonField.resolvePerson(computedData)\n        const attributes: Array<any> = this.resolvePersonAttributes(computedData)\n        const offlineID = savePersonOffline('Client registration', person, attributes, form?.npid)\n        nextTask(offlineID, this.$router)\n    },\n    async create(_: any, computedData: any) {\n        const person: any = PersonField.resolvePerson(computedData)\n        const attributes: Array<any> = this.resolvePersonAttributes(computedData)\n        const registration: any = new PatientRegistrationService()\n        const patient = new Patientservice((await registration.registerPatient(person, attributes)))\n        const patientID = registration.getPersonID()\n\n        Store.set('ACTIVE_PATIENT', patient) // update patient store\n \n        if(this.presets.nationalIDStatus == \"true\"){ \n            this.patient = patient\n            await this.patient.updateMWNationalId(this.presets.malawiNationalID)\n        }\n\n        if (this.app.onRegisterPatient) {\n            const exit = await this.app.onRegisterPatient(\n                patientID, person, attributes, this.$router, this.$route,\n                computedData\n            )\n            if (exit) return\n        }\n        if (person.relationship === 'Yes') {\n            return this.$router.push(`/guardian/registration/${patientID}`)\n        }\n        await nextTask(patientID, this.$router)\n    },\n    async update(computedData: any) {\n        const person: any = PersonField.resolvePerson(computedData)\n        const update = new PatientRegistrationService()\n\n        update.setPersonID(this.editPerson)\n        await update.updatePerson(person)\n        for(const attr in person) {\n            if (attr in this.editPersonData) {\n                this.editPersonData[attr] = person[attr]\n            }\n        }\n        Store.invalidate('ACTIVE_PATIENT')\n        if(!this.personAttribute) return this.fieldComponent = 'edit_user'\n        this.$router.back()\n    },\n    editConditionCheck(attributes=[] as Array<string>): boolean {\n        if (this.isEditMode() && !attributes.includes(this.activeField)) {\n            return false\n        }\n        return true\n    },\n    async confirmPatient() {\n        // Attempt to assign or reassign a patient's NPID if they dont have a valid one\n        if (this.ddeEnabled && (!this.patient.getDocID() \n            || (this.patient.getDocID() && this.patient.getNationalID().match(/unknown/i)))) {\n                try {\n                    await this.patient.assignNpid()\n                    await this.patient.printNationalID()\n                    await delayPromise(300)\n               } catch (e) {\n                    toastDanger(`Failed to assign new NPID: ${e}`)\n                }\n        }\n        this.$router.push(`/patients/confirm?person_id=${this.patient.getID()}`)\n    },\n    resolvePersonAttributes(form: Record<string, Option> | Record<string, null>) {\n        return Object.values(form)\n                    .filter((d: any) => isPlainObject(d) && 'personAttributes' in d)\n                    .map(({personAttributes}: any) => personAttributes)\n    },\n    async resolveOnRegistrationCallbacks(patientID: number, computedData: any) {\n        for (const i of Object.values(computedData)) {\n            const item: any = i\n            if (typeof item.onRegisterPatient === 'function') {\n                try {\n                    await item.onRegisterPatient(patientID)\n                } catch (e) {\n                    console.error(`${e}`)\n                    toastDanger(`${e}`)\n                }\n            }\n        }\n    },\n    mapToOption(listOptions: Array<string>): Array<Option> {\n        return listOptions.map((item: any) => ({ label: item, value: item }))\n    },\n    hiddenFieldsForScannedNationalID(): Field[] {\n        const d = (val: string | boolean) => ({label: val, value: val})\n        return [\n            {\n                id: 'given_name',\n                helpText: 'First name',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => d(this.presets.given_name),\n                computedValue: () => ({person : this.presets.given_name})\n            },\n            {\n                id: 'family_name',\n                helpText: 'Last name',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => d(this.presets.family_name),\n                computedValue: () => ({person : this.presets.family_name})\n            },\n            {\n                id: 'gender',\n                helpText: 'Gender',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => ({\n                    label: this.presets.gender,\n                    value: this.presets.gender.toLowerCase() === 'male'\n                        ? 'M'\n                        : this.presets.gender.toLowerCase() === 'female'\n                        ? 'F'\n                        : 'N/A'\n                }),\n                computedValue: () => ({person : this.presets.gender})\n            },\n            {\n                id: 'scanned_birthdate',\n                helpText: 'Birth date',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => d(this.presets.birthdate),\n                computedValue: () => ({\n                    person : {\n                        'birthdate': this.presets.birthdate,\n                        'birthdate_estimated': false\n                    }\n                })\n            },\n            {\n                id: 'scanned_national_id',\n                helpText: 'Scanned National ID',\n                type: FieldType.TT_HIDDEN,\n                defaultValue: () => d(this.presets.malawiNationalID),\n                computedValue: () => ({\n                    onRegisterPatient : async (patientID: number) => {\n                        const patient = await Patientservice.findByID(patientID)\n                        this.patient = new Patientservice(patient)\n                        this.patient.updateMWNationalId(this.presets.malawiNationalID)\n                    }\n                })\n            }\n        ]\n    },\n    givenNameField(): Field {\n        const name: Field = PersonField.getGivenNameField()\n        name.condition = () => this.editConditionCheck(['given_name'])\n        name.defaultValue = () => this.presets.given_name\n        return name\n    },\n    familyNameField(): Field {\n        const name: Field = PersonField.getFamilyNameField()\n        name.condition = () => this.editConditionCheck(['family_name'])\n        name.defaultValue = () => this.presets.family_name\n        return name\n    },\n    genderField(): Field {\n        const IS_ANC_APP = this.app.applicationName === 'ANC'\n        const IS_CXCA = this.app.applicationName === 'CxCa'\n        const gender: Field = PersonField.getGenderField()\n        gender.requireNext = this.isEditMode()\n        gender.defaultValue = () => this.presets.gender\n        gender.condition = () => {\n            if (!this.isEditMode() && (IS_ANC_APP || IS_CXCA)) {\n                return false\n            }\n            return this.editConditionCheck(['gender'])\n        }\n        if ((IS_ANC_APP || IS_CXCA) && !this.isEditMode()) {\n            gender.defaultOutput = () => ({ label: 'Female', value: 'F' })\n            gender.defaultComputedOutput = () => ({ person: 'F' })\n        } \n\n        gender.beforeNext = async (data: Option) => {\n            /**\n             * Provide warning when changing gender in edit mode\n            */\n            const newGender = data.value\n            const oldGender = this.presets.gender\n            if (this.isEditMode() && newGender != oldGender) {\n                const action = await infoActionSheet(\n                    'Warning',\n                    `Changing gender from ${oldGender} to ${newGender}`,\n                    \"This change will cause data inconsistency and will affect alot of Reports.\",\n                    [\n                        {\n                            name: 'Cancel', slot: 'start'\n                        },\n                        {\n                            name: 'Change gender', slot: 'end', color: 'danger'\n                        }\n                    ]\n                )\n                return action === 'Change gender'\n            }\n            return true\n        }\n        return gender\n    },\n    dobFields(): Array<Field> {\n        const dobConfig = PersonField.getDobConfig()\n        dobConfig.defaultValue = () => this.presets.birthdate\n        dobConfig.condition = () => this.editConditionCheck([\n            'year_birth_date', 'month_birth_date', 'day_birth_date'\n        ])\n        // ANC validation to ensure that we are not registering\n        // Non child bearing youngsters\n        if (this.app.applicationName === 'ANC') {\n            const sdate = Patientservice.getSessionDate()\n            const childBearingAgeInYrs = 12\n            dobConfig.maxDate = () => dayjs(sdate)\n                .subtract(childBearingAgeInYrs, 'years')\n                .format(STANDARD_DATE_FORMAT)\n        }\n        return generateDateFields(dobConfig)\n    },\n    hasNpidField() : Field {\n        return {\n            id: \"has_npid\",\n            helpText: \"National Patient Identifier (NPID) Barcode\",\n            type: FieldType.TT_YES_NO,\n            isRequired: () => true,\n            condition: () => !this.isEditMode() && isOfflineMode.value || !isOnline.value,\n            options: () => {\n                return [\n                    {\n                        label: \"Has client brought NPID barcode?\",\n                        value: \"\",\n                        values: [\n                            { label: \"Yes\", value: \"Yes\" },\n                            { label: \"No\", value: \"No\" }\n                        ]\n                    }\n                ]\n            }\n        }\n    },\n    scanNpid(): Field {\n        return {\n            id: \"npid\",\n            helpText: \"Scan National Patient Identifier (NPID)\",\n            type: FieldType.TT_BARCODE,\n            requireNext: false,\n            condition: (f: any) => /yes/i.test(`${f.has_npid}`),\n            config: {\n                hiddenFooterBtns: [\n                    'Clear'\n                ]\n            },\n            isRequired: () => true\n        }\n    },\n    homeRegionField(): Field { \n        return {\n            ...PersonField.getHomeRegionField(),\n            condition: () => this.editConditionCheck(this.homeAddressAttributes)\n        }\n    },\n    homeDistrictField(): Field {\n        return {\n            ...PersonField.getHomeDistrictField(),\n            condition: () => this.editConditionCheck(this.homeAddressAttributes)\n        }\n    },\n    homeTAField(): Field {\n        return {\n            ...PersonField.getHomeTaField(),\n            condition: (form: any) => this.editConditionCheck(this.homeAddressAttributes)\n                && !form.home_region.label.match(/foreign|use home/i)\n        }\n    },\n    homeVillageField(): Field {\n        return {\n            ...PersonField.getHomeVillageField(),\n            condition: (form: any) => this.editConditionCheck(this.homeAddressAttributes)\n                && !form.home_region.label.match(/foreign|use home/i)\n        }\n    },\n    currentRegionField(): Field {\n        const currentRegion: Field = PersonField.getCurrentRegionField()\n        currentRegion.summaryMapValue = (v: Option, f: any, computedData: any) => {\n            if (/use home/i.test(`${v.value}`)) {\n                return [\n                    { label: 'Current region', value: computedData.person?.current_region},\n                    { label: 'Current District/Country', value: computedData.person?.current_district },\n                    { label: 'Current Traditional Authority', value: computedData.person?.current_traditional_authority },\n                    { label: 'Current village', value: computedData.person?.current_village}\n                ]\n            }\n            return { label: 'Current Region', value: v.label }\n        }\n        if (this.isEditMode()) {\n            currentRegion.computedValue = (val: Option) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_district': this.editPersonData.home_district,\n                            'current_traditional_authority': this.editPersonData.home_traditional_authority,\n                            'current_village': this.editPersonData.home_village\n                        }\n                    }\n                }\n            }\n        }\n        currentRegion.condition = () => this.editConditionCheck(this.currentAddressAttributes)\n        return currentRegion\n    },\n    currentDistrictField(): Field {\n        const currentDistrict: Field = PersonField.getCurrentDistrictField()\n        currentDistrict.condition = (f: any) => !/use home/i.test(f.current_region.label) &&\n             this.editConditionCheck(this.currentAddressAttributes)\n        return currentDistrict\n    },\n    currentTAField(): Field {\n        const currentTA: Field = PersonField.getCurrentTAfield()\n        currentTA.condition = (form: any) => this.editConditionCheck(this.currentAddressAttributes)\n            && !form.current_region.label.match(/foreign|use home/i)\n        return currentTA\n    },\n    currentVillage(): Field {\n        const currentVillage: Field = PersonField.getCurrentVillageField()\n        currentVillage.condition = (form: any) => this.editConditionCheck(this.currentAddressAttributes)\n            && !form.current_region.label.match(/foreign|use home/i)\n        return currentVillage\n    },\n    cellPhoneField(): Field {\n        const cellPhone: Field = PersonField.getCellNumberField()\n        cellPhone.condition = () => this.editConditionCheck(['cell_phone_number'])\n        cellPhone.defaultValue = () => this.presets.cell_phone_number\n        return cellPhone\n    },\n    facilityLocationField(): Field {\n       const facility: Field = PersonField.getFacilityLocationField()\n       facility.condition = (form: any) => [\n           'Drug Refill',\n           'External consultation'\n       ].includes(form.patient_type.value)\n       return facility\n    },\n    landmarkFields(): Field[] {\n        const landmarks: Field[] = PersonField.getLandmarkFields()\n        landmarks[0].condition = () => this.editConditionCheck(['default_landmarks'])\n        return landmarks\n    },\n    patientTypeField(): Field {\n        return {\n            id: 'patient_type',\n            helpText: 'Type of patient',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['patient_type'])\n                && this.app.applicationName === 'ART',\n            validation: (val: any) => Validation.required(val),\n            options: () => PatientTypeService.getPatientTypes()\n        }\n    },\n    occupationField(): Field {\n        return {\n            id: 'occupation',\n            helpText: 'Occupation',\n            type: FieldType.TT_SELECT,\n            init: async () => {\n               this.isMilitarySite = await Store.get('IS_MILITARY_SITE')\n               return true\n            },\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['occupation']) && this.isMilitarySite,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.mapToOption([\n                'Military',\n                'Civilian'\n            ])\n        }\n    },\n    regimentField(): Field {\n        return {\n            id: 'person_regiment_id',\n            helpText: 'Regiment ID',\n            type: FieldType.TT_TEXT,\n            computedValue: ({value}: Option) => ({\n                personAttributes: {\n                    'person_attribute_type_id': 35,\n                    'value': value\n                }\n            }),\n            condition: (form: any) => this.editConditionCheck(['person_regiment_id', 'occupation']) && form.occupation && form.occupation.value.match(/Military/i),\n            validation: (val: any) => Validation.required(val)\n        }\n    },\n    rankField(): Field {\n        return {\n            id: 'rank',\n            helpText: 'Rank',\n            type: FieldType.TT_SELECT,\n            validation: (val: any) => Validation.required(val),\n            computedValue: ({value}: Option) => ({\n                personAttributes: {\n                    'person_attribute_type_id': 36,\n                    'value': value\n                }\n            }),\n            condition: (form: any) => this.editConditionCheck(['rank', 'occupation']) && form.occupation && form.occupation.value.match(/Military/i),\n            options: () => this.mapToOption([\n                'First Lieutenant',\n                'Captain',\n                'Major',\n                'Lieutenant Colonel',\n                'Colonel',\n                'Brigadier General',\n                'Lieutenant General',\n                'General',\n                'Private',\n                'Corporal',\n                'Lance Corporal',\n                'Seargent',\n                'Staff Seargent',\n                'Warrant Officer class 1',\n                'Warrant Officer class 2'\n            ])\n        }\n    },\n    dateJoinedMilitaryFields(): Array<Field> {\n        return generateDateFields({\n            id: 'person_date_joined_military',\n            helpText: 'Joined Military',\n            required: true,\n            condition: (form: any) =>  this.editConditionCheck([\n                'year_person_date_joined_military',\n                'month_person_date_joined_military',\n                'day_person_date_joined_military',\n                'occupation'\n            ]) && form.occupation && form.occupation.value.match(/Military/i),\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => WorkflowService.getSessionDate(),\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => ({\n                date,\n                personAttributes : {\n                    'person_attribute_type_id': 37, 'value': date\n                }\n            })\n        })\n    },\n    relationshipField(): Field {\n        const IS_HTS = this.app.applicationName === 'ITS'\n        const IS_CXCA = this.app.applicationName === 'CxCa'\n        const OPD = this.app.applicationName === 'OPD'\n        const Registration = this.app.applicationName === 'Registration'\n        return {\n            id: 'relationship',\n            helpText: 'Register guardian?',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['relationship']) && !IS_CXCA && !OPD && !Registration && !IS_HTS,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.mapToOption(['Yes', 'No'])\n        }\n    },\n    searchResultField(): Field {\n        return {\n            id: 'results',\n            helpText: 'Search results',\n            type: FieldType.TT_PERSON_RESULT_VIEW,\n            init: async () => {\n                if (!this.isEditMode()) { \n                    this.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n                }\n                return true\n            },\n            dynamicHelpText: (form: any) => {\n                return `Search results for \"${form.given_name.value} ${form.family_name.value} | ${form.gender.label}\"`;\n            },\n            appearInSummary: () => false,\n            condition: () => !this.isEditMode() && !isOfflineMode.value,\n            options: async (form: any) => {\n                const payload = {\n                    'given_name': form.given_name.value,\n                    'family_name': form.family_name.value,\n                    'gender': form.gender.value\n                }\n                // DDE enabled search\n                if (this.ddeEnabled) {\n                    const patients = await this.ddeInstance.searchDemographics(payload)\n                    return patients.map((item: any) => {\n                        const itemData = PersonField.getPersonAttributeOptions(item)\n                        itemData.other.options.push({\n                            label: 'Patient Type',\n                            value: item.patient_type\n                        })\n                        itemData.other.options.push({\n                            label: 'Doc ID',\n                            value: item.doc_id\n                        })\n                        return itemData\n                    })\n                }\n                // Regular search\n                const patients = await Patientservice.search(payload);\n                return patients.map((item: any) => PersonField.getPersonAttributeOptions(item))\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Edit Search',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldComponent = 'given_name'\n                        },\n                        state: {\n                            disabled: {\n                                default: () => this.hasScannedNationalID()\n                            }\n                        }\n                        \n                    },\n                    {\n                        name: 'New Client',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldComponent = '_NEXT_FIELD_'\n                        }\n                    },\n                    {\n                        name: 'Continue',\n                        color: 'success',\n                        slot: 'end',\n                        state: {\n                            disabled: {\n                                default: () => true,\n                                onValue(_: any,form: any) {\n                                    return isEmpty(form.results)\n                                }\n                            }\n                        },\n                        onClick: (form: any) => {\n                            if (form.results.other.patientID) {\n                                return this.$router.push(`/patients/confirm?person_id=${form.results.value}`)\n                            }\n                            return this.$router.push(`/patients/confirm?patient_barcode=${form.results.value}`)\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    possibleDuplicatesField(): Field {\n        let createdPerson: any = {}\n        let duplicatePatients: any = {}\n        return {\n            id: 'possible_duplicates',\n            helpText: 'Possible Duplicate(s)',\n            type: FieldType.TT_PERSON_MATCH_VIEW,\n            condition: async (_: any, c: any) => {\n                if (this.ddeEnabled && this.editPerson <= 0) {\n                    createdPerson = PersonField.resolvePerson(c)\n                    duplicatePatients = await this.ddeInstance\n                        .checkPotentialDuplicates(createdPerson)\n                    return duplicatePatients.length >= 1\n                }\n                return false\n            },\n            options: async () => {\n                const toDate = (date: string) => HisDate.toStandardHisDisplayFormat(date)\n                return duplicatePatients.map(({ score, person }: any) => {\n                    const name = `${person.given_name} ${person.family_name}`\n                    return {\n                        label: name,\n                        value: person.patient_id,\n                        other: {\n                            score: `${score * 100}%`,\n                            newPerson: createdPerson,\n                            foundPerson: person,\n                            docID: person.id,\n                            comparisons: [\n                                [\n                                    'Name',\n                                    `${createdPerson.given_name} ${createdPerson.family_name}`,\n                                    `${person.given_name} ${person.family_name}`\n                                ],\n                                [\n                                    'Gender',\n                                    createdPerson.gender,\n                                    person.gender\n                                ],\n                                [\n                                    'Birthdate',\n                                    toDate(createdPerson.birthdate),\n                                    toDate(person.birthdate)\n                                ],\n                                [\n                                    'Home District',\n                                    createdPerson.home_district,\n                                    person.home_district\n                                ],\n                                [\n                                    'Home TA',\n                                    createdPerson.home_traditional_authority,\n                                    person.home_traditional_authority\n                                ]\n                            ]\n                        }\n                    }\n                })\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Not Duplicate',\n                        slot: 'start',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onValue: (_: any, f: any) => !isEmpty(f.possible_duplicates)\n                            }\n                        },\n                        onClick: () => {\n                            this.fieldComponent = '_NEXT_FIELD_'\n                        }\n                    },\n                    {\n                        name: 'Select',\n                        slot: 'end',\n                        color: 'success',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onValue: (_: any, f: any) => !isEmpty(f.possible_duplicates)\n                            }\n                        },\n                        onClick: (form: any) => {\n                            this.ddeInstance.importPatient(form.possible_duplicates.other.docID)\n                                .then((result: any) => {\n                                    this.$router.push(`/patients/confirm?person_id=${result.patient_id}`)\n                                }).catch(() => {\n                                    this.$router.push(`/patients/confirm?person_id=${form.possible_duplicates.value}`)\n                                })\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    personIndexField(): Field {\n        return {\n            id: 'edit_user',\n            helpText: 'Edit Demographics',\n            type: FieldType.TT_TABLE_VIEWER,\n            init: async () => {\n                if (this.isEditMode()) {\n                    this.formLabel = 'View / Edit'\n                    this.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n                    this.isMilitarySite = await Store.get('IS_MILITARY_SITE')\n                }\n                return true\n            },\n            condition: () => this.isEditMode(),\n            options: async () => {\n                const editButton = (attribute: string) => ({\n                    name: 'Edit',\n                    type: 'button',\n                    action: () => {\n                        this.activeField = attribute\n                        this.fieldComponent = this.activeField\n                    }\n                })\n                const columns = ['Attributes', 'Values', 'Edit']\n                const rows = [\n                    ['Given Name', this.editPersonData.given_name, editButton('given_name')],\n                    ['Family Name', this.editPersonData.family_name, editButton('family_name')],\n                    ['Gender', this.editPersonData.gender,  editButton('gender')],\n                    ['Birthdate', HisDate.toStandardHisDisplayFormat(this.editPersonData.birthdate),  editButton('year_birth_date')],\n                    ['Cell Phone Number', this.editPersonData.cell_phone_number, editButton('cell_phone_number')],\n                    ['Home District', this.editPersonData.home_district, editButton('home_region')],\n                    ['Home TA', this.editPersonData.home_traditional_authority,  editButton('home_region')],\n                    ['Home Village', this.editPersonData.home_village,  editButton('home_region')],\n                    ['Current district',this.editPersonData.current_district, editButton('current_region')],\n                    ['Current Village',this.editPersonData.current_village, editButton('current_region')],\n                    ['Current T/A', this.editPersonData.current_traditional_authority, editButton('current_region')],\n                    ['Landmark', this.editPersonData.landmark, editButton('default_landmarks')]\n                ]\n                if (this.isMilitarySite) {\n                    rows.push(['Occupation', this.editPersonData.occupation, editButton('occupation')])\n                }\n                // Tag rows with empty values\n                const emptySets: any = {indexes: [], class: 'his-empty-set-color'}\n                rows.forEach((r: any, i: number) => {\n                    if (isValueEmpty(r[1])) \n                        emptySets.indexes.push(i)\n                })\n                this.hasIncompleteData = emptySets.indexes.length >= 1\n                return [{\n                    label: '', \n                    value: '',\n                    other: {\n                        rows,\n                        columns,\n                        rowColors: [emptySets]\n                    }\n                }]\n            },\n            config: {\n                footerBtns: [\n                    /**\n                     * Custom button that Appears when DDE wants to\n                     * Reassign a patient with incomplete data\n                    */\n                    {\n                        name: 'Reassign',\n                        slot: 'end',\n                        color: 'success',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onload: () => (\n                                    this.ddeEnabled\n                                    && this.ddeIsReassign\n                                    && !this.hasIncompleteData\n                                )\n                            }\n                        },\n                        onClick: async () => {\n                            try {\n                                await this.ddeInstance.reassignNpid(this.ddeDocID, this.editPerson)\n                                await this.ddeInstance.printNpid()\n                                this.$router.push(`/patients/confirm?person_id=${this.editPerson}`)\n                            } catch(e) {\n                                toastWarning(`${e}`)\n                            }\n                        }\n                    },\n                    /**\n                     * Custom button that redirects to patient confirmation page\n                     */\n                    {\n                        name: 'Confirm',\n                        slot: 'end',\n                        color: 'warning',\n                        state: {\n                            visible: {\n                                onload: () => !this.ddeIsReassign && !this.hasIncompleteData\n                            }\n                        },\n                        onClick: async () => this.confirmPatient()\n                    }\n                ],\n                hiddenFooterBtns: ['Clear', 'Next']\n            }\n        }\n    }\n  }\n})\n","import { render } from \"./PatientRegistration.vue?vue&type=template&id=141b08ea&ts=true\"\nimport script from \"./PatientRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./PatientRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}