{"version":3,"sources":["webpack:///./src/apps/ART/services/htn_service.ts","webpack:///./src/services/regimen_service.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/apps/ART/services/prescription_service.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["HTN_SESSION_KEY","BPManagementService","AppEncounterService","constructor","patientID","providerID","super","sbp","dbp","bpTrail","firstRecentGrade","secondRecentGrade","Object","values","sort","a","b","date","map","bp","this","getBpGrade","getSystolicBp","ObservationService","getFirstValueNumber","getDiastolicBp","query","getFirstValueCoded","getJson","drugID","pills","postJson","state","getDrugs","HCZ","drugs","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","adherence","notes","Enalapril","remaining","Amlodipine","Atenolol","RegimenService","Service","getProgramID","patientId","getSessionDate","DrugOrderService","orders","dispensations","order","pageSize","params","defineComponent","components","HisStandardForm","data","patient","fields","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","ready","watch","handler","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","states","FlowState","SET_PROVIDER","selection","username","split","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","$router","push","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","gotoPatientDashboard","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","value","program","startDate","e","console","error","toastDanger","ProgramService","getCachedApiDate","isBDE","getBirthdate","$route","name","toString","toUpperCase","usernameA","usernameB","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","filter","d","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","conditions","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","dformat","HisDate","toStandardHisDisplayFormat","priority","async","action","infoActionSheet","slot","color","modal","optionsActionSheet","role","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","FieldType","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_SELECT","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_TEXT","TT_NUMBER","TT_MONTHLY_DAYS","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","AdverseEffectsCategories","PrescriptionService","_defineProperty","nextVisitInterval","fastTrack","regimenExtras","fastTrackMedications","hangingPills","medicationOrders","treatmentState","contraindications","sideEffects","tptPrescriptionCount","lastSideEffectDate","setNextVisitInterval","getHangingPills","getMedicationOrders","getCachedConceptName","getTptPrescriptionCount","getLastSideEffectDate","getContraindications","getSideEffects","getRegimenExtras","getPatientRegimens","getRegimens","getARVs","getCustomIngridients","getFastTrackMedications","getTreatmentState","isFastTrack","medicationOrdersAvailable","shouldPrescribeArvs","arvs","getCachedConceptID","shouldPrescribeExtras","extras","getConceptsByCategory","extrasAvailable","concept_id","getRegimenStarterpack","regimenCode","patientWeight","regimen","contraindication","getConceptID","getObs","forEach","o","toStandardHisFormat","obs_datetime","concept","value_coded","drugInduced","value_drug","res","count","yes","meds","getAll","value_numeric","toDate","_o$order","drug_order","drug_inventory_id","getLastDrugsReceived","withDosages","drug","dosage","getDrugDosages","drug_id","units","am","noon","pm","frequency","req","findAndGroupDrugSideEffects","allSideEffects","calculatePillsPerDay","parseFloat","estimatePackSize","pillsPerDay","packSize","packs","roundedPacks","Math","round","calculateDosage","morningTabs","eveningTabs","dose","calculateEquivalentDosage","calculateDateFromInterval","dateObj","Date","setDate","getDate","getDrugPackSize","pack_size","barcodes","tabs","getInstructions","toOrderObj","id","reason","getFirstValueText","drugOrders","create","encounterID","response","saveValueTextObs","reasonForSwitch","webpackAsyncContext","__webpack_require__","resolve","Error","code","ids","slice","keys","module","exports"],"mappings":"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AAKyY,iBAAiB,wBAAyBC,M,qBCpV9D,IAAI5Y,EAAM,CACT,wBAAyB,CACxB,OACA,qBAED,wBAAyB,CACxB,OACA,qBAED,iCAAkC,CACjC,OACA,qBAED,+BAAgC,CAC/B,OACA,qBAED,0BAA2B,CAC1B,OACA,qBAED,yBAA0B,CACzB,OACA,iBACA,qBAED,sBAAuB,CACtB,OACA,qBAED,kCAAmC,CAClC,OACA,qBAED,0BAA2B,CAC1B,OACA,iBACA,qBAED,mBAAoB,CACnB,OACA,qBAED,yBAA0B,CACzB,OACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,oBAAqB,CACpB,OACA,sBAED,wBAAyB,CACxB,OACA,2DACA,sBAED,+BAAgC,CAC/B,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,iBACA,sBAED,yBAA0B,CACzB,OACA,iBACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,+BAAgC,CAC/B,OACA,2DACA,sBAED,4BAA6B,CAC5B,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,sBAAuB,CACtB,OACA,2DACA,sBAED,uBAAwB,CACvB,OACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,wCAAyC,CACxC,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,gBAAiB,CAChB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,sBAED,2BAA4B,CAC3B,OACA,iBACA,sBAED,kBAAmB,CAClB,OACA,sBAED,mBAAoB,CACnB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,sBAAuB,CACtB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,oBAAqB,CACpB,OACA,sBAED,oBAAqB,CACpB,OACA,uBAGF,SAAS6Y,EAAoBrC,GAC5B,IAAIsC,EAAoBlE,EAAE5U,EAAKwW,GAC9B,OAAO3M,QAAQkP,UAAU9U,MAAK,WAC7B,IAAI4C,EAAI,IAAImS,MAAM,uBAAyBxC,EAAM,KAEjD,MADA3P,EAAEoS,KAAO,mBACHpS,KAIR,IAAIqS,EAAMlZ,EAAIwW,GAAM4B,EAAKc,EAAI,GAC7B,OAAOrP,QAAQC,IAAIoP,EAAIC,MAAM,GAAGnZ,IAAI8Y,EAAoBjS,IAAI5C,MAAK,WAChE,OAAO6U,EAAoBV,MAG7BS,EAAoBO,KAAO,WAC1B,OAAO1Z,OAAO0Z,KAAKpZ,IAEpB6Y,EAAoBT,GAAK,OACzBiB,EAAOC,QAAUT","file":"js/chunk-2bd4b5aa.60282984.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ObservationService } from \"@/services/observation_service\"\n\nexport enum HTN_SESSION_KEY {\n  Prescription = \"htnPrescription\"\n}\n\nexport class BPManagementService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n      super(patientID, 48, providerID) //TODO: Use encounter type reference name'\n    }\n\n    static getBpGrade(sbp: number, dbp: number) {\n      if ((sbp < 140) && (dbp < 90)) {\n        return \"normal\"\n      }\n      else if ((sbp >= 140 && sbp < 160) || (dbp >= 100 && dbp < 110)) {\n        return \"grade 1\"\n      }\n      else if ((sbp >= 180 && dbp > 110) || sbp >= 180) {\n        return \"grade 3\"\n      }\n      else if ((sbp >= 160 && sbp < 180) || (dbp >= 110)) {\n        return \"grade 2\"\n      }\n      return 'N/A'\n    }\n\n    /**\n     * BP is normointensive if two most recent consecutive tests are normal\n     * @param bpTrail \n     * @returns\n    */\n    static isBpNormotensive(bpTrail: any) {\n      const [ firstRecentGrade, secondRecentGrade ] = Object.values(bpTrail)\n        .sort((a: any, b: any) => a.date < b.date ? 1 : 0)\n        .map((bp: any) => this.getBpGrade(bp.sbp, bp.dbp))\n      return firstRecentGrade === 'normal' && secondRecentGrade === 'normal'\n    }\n\n    getSystolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Systolic blood pressure')\n    }\n\n    getDiastolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Diastolic blood pressure')\n    }\n\n    async onBpDrugs() {\n      const query = await ObservationService.getFirstValueCoded(this.patientID, 'Treatment status')\n      return query ? query === 'Yes' : false\n    }\n  \n    async getBPTrail() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/bp_trail`);\n    }\n    async getCurrentDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/current_bp_drugs`);\n    }\n    async getLastDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/last_bp_drugs_dispensation`);\n    }\n    async getAdherence(drugID: number, pills: number) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/remaining_bp_drugs`, {\n        'drug_id': drugID,\n        pills: pills\n      });\n    }\n    async enrollPatient(state: any) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/update_or_create_htn_state`, state);\n    }\n    static htnDrugReferences() {\n      return [\n        { \n          'drug_id': 275,\n          'drug_name': \"HCZ (25mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 942,\n          'drug_name': \"Enalapril (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 943,\n          'drug_name': \"Enalapril (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 558,\n          'drug_name': \"Amlodipine (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 559,\n          'drug_name': \"Amlodipine (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 117,\n          'drug_name': \"Atenolol (50mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 11,\n          'drug_name': \"Atenolol(100mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        }\n      ]\n    }\n    getDrugs() {\n        return {\n        HCZ: {\n          drugs: [\n            {\n              drugName: \"HCZ (25mg tablet)\",\n              drugID: 275,\n              amount: '25mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Enalapril: {\n          drugs: [\n            {\n              drugName: \"Enalapril (5mg tablet)\",\n              drugID: 942,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Enalapril (10mg tablet)\",\n              drugID: 943,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Amlodipine: {\n          drugs: [\n            {\n              drugName: \"Amlodipine (5mg tablet)\",\n              drugID: 558,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Amlodipine (10mg tablet)\",\n              drugID: 559,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Atenolol: {\n          drugs: [\n            {\n              drugName: \"Atenolol (50mg tablet)\",\n              drugID: 117,\n              amount: '50mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Atenolol(100mg tablet)\",\n              drugID: 11,\n              amount: '100mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n      }\n    }\n}","import { Service } from \"./service\";\n\nexport class RegimenService extends Service {\n    constructor() {\n        super()\n    } \n\n    static getAllArvRegimens() {\n        return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)\n    }\n\n    static getRegimens(patientId: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {'patient_id': patientId})\n    }\n\n    static getCustomIngridients() {\n        return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)\n    }\n\n    static getCurrentRegimen(patientId: number, date=this.getSessionDate()) {\n        return this.getJson(`programs/${this.getProgramID()}/${patientId}`, {date})   \n    }\n}","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { toDate } from \"@/utils/Strs\";\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getARVs() {\n        return RegimenService.getJson('arv_drugs')\n    }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = (await AppEncounterService.getAll(this.patientID, 'Pills brought'))||[]\n        this.hangingPills = pills.filter((o: any) => {\n            if (o.value_numeric >= 1) {\n                // Condition for detecting pills brought during transfer in.. This is a bit hack-ish\n                if (o.value_drug && toDate(o.obs_datetime) === toDate(this.date)) {\n                    return true\n                }\n                // This is for normal workflow adherence pills\n                return o.order||false\n            }\n            return false\n        }).map((o: any) => o?.order?.drug_order?.drug_inventory_id||o.value_drug)        \n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / (packSize || 1)\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-45847ec4\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"TouchFormElement14~TouchFormElement21~TouchFormElement25\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"TouchFormElement14~TouchFormElement21~TouchFormElement25\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"TouchFormElement14~TouchFormElement21~TouchFormElement25\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-45847ec4\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"chunk-362ef7b9\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}