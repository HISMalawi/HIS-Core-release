{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HTSDBsOrder.vue?9576","webpack:///./src/apps/HTS/services/hts_dbs_order.ts","webpack:///./src/apps/HTS/views/encounters/HTSDBsOrder.vue","webpack:///./src/apps/HTS/views/encounters/HTSDBsOrder.vue?ecc8","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","HtsDbsOrder","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","hivGroup","watch","ready","this","ObservationService","getFirstObsValue","isDBSsampleCollected","dbsSpecimenID","immediate","methods","formData","computedData","labOrders","undefined","dbs_sample_collection","buildDBSOrder","dbs_specimen_id","saveFormEncounterAndProceed","encounterTypeID","callback","async","createDBSOrder","accessionNumber","age","HisDate","getAgeInYears","facts","birthDate","concept","getCachedConceptID","concept_id","specimenConcept","reason","specimenID","order","LabOrderService","encounter","createEncounter","orders","OrderService","buildLabOrders","saveOrdersArray","encounter_id","helpText","id","type","FieldType","TT_YES_NO","isRequired","finalComputedValue","v","obs","buildValueCoded","options","label","value","values","yesNoOptions","TT_BARCODE","requireNext","condition","f","test","buildValueText","config","hiddenFooterBtns","__exports__","FlowState","dformat","d","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","encounterStartTime","npid","givenName","familyName","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","endTime","elapsedTime","minutes","userAgentObs","getPlatformName","durationObs","buildValueNumber","resolveObs","error","toastWarning","enc","saveObservationList","toastDanger","saveObsOffline","observations","uploadStatus","meta","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","toOption","other","mapStrToOptions","items","i","path","toYesNoOption","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","isCondition","ignored","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-2a19e2a2.b92887de.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"DBS Order\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsDbsOrder extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 199, providerID)\n    }\n}\n","\n  import EncounterMixinVue from \"@/views/EncounterMixin.vue\";\n  import { FieldType } from \"@/components/Forms/BaseFormElements\";\n  import { defineComponent } from \"vue\";\n  import { IonPage } from \"@ionic/vue\";\n  import { Field, Option } from \"@/components/Forms/FieldInterface\";\n  import { LabOrderService } from \"@/apps/ART/services/lab_order_service\";\n  import { OrderService } from \"@/services/order_service\";\n  import { HtsDbsOrder } from \"../../services/hts_dbs_order\";\n  import { ObservationService } from '@/services/observation_service';\n  import HisDate from \"@/utils/Date\";\n  \n  export default defineComponent({\n    components: { IonPage },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n      service: {} as HtsDbsOrder,\n      hivGroup: null,\n    }),\n    watch: {\n      ready: {\n        async handler(ready: boolean) {\n          if (ready) {\n            this.service = new HtsDbsOrder(\n              this.patientID,\n              this.providerID\n            );\n            this.hivGroup = await ObservationService.getFirstObsValue(this.patientID, \"HIV group\", 'value_coded')\n            this.fields = [\n              this.isDBSsampleCollected(),\n              this.dbsSpecimenID()\n            ];\n          }\n        },\n        immediate: true,\n      },\n    },\n    methods: {\n      onFinish(formData: any, computedData: any) {\n        let labOrders: any = undefined;\n        if (formData.dbs_sample_collection === 'Yes') {\n          labOrders = this.buildDBSOrder(formData.dbs_specimen_id)\n        }\n        this.saveFormEncounterAndProceed({\n          encounterTypeID: this.service.encounterTypeID,\n          formData,\n          computedData,\n          labOrders,\n          callback: async () => {\n            if (labOrders) {\n              await this.createDBSOrder(formData.dbs_specimen_id)\n            }\n          }\n        })\n      },\n      buildDBSOrder(accessionNumber: string) {\n        const age = HisDate.getAgeInYears(this.facts.birthDate)\n        let concept;\n\n        if (age < 1 || this.hivGroup == 'Inconclusive Re-test') concept = 844\n          else concept = HtsDbsOrder.getCachedConceptID('HIV viral load')        \n\n        return [{\n          concept_id: concept,\n          specimenConcept: HtsDbsOrder.getCachedConceptID(\"DBS (Free drop to DBS card)\", true),\n          accessionNumber,\n          reason: 'Routine',\n        }]\n      },\n      async createDBSOrder(specimenID: string) {\n        const order = new LabOrderService(this.patientID, this.providerID)\n        const encounter = await order.createEncounter()\n        if (encounter) {\n          const orders = OrderService.buildLabOrders(encounter, this.buildDBSOrder(specimenID))\n          await OrderService.saveOrdersArray(encounter?.encounter_id, orders)\n        }\n      },\n      isDBSsampleCollected(): Field {\n        let helpText = \"DBS Sample\";\n        const age = HisDate.getAgeInYears(this.facts.birthDate)\n        if(this.hivGroup == 'Inconclusive Re-test') helpText = \"DBS Sample for Incoclusive Re-test\";\n        if(age < 1) helpText = \"DBS Sample (EID)\";\n        \n\n        if(age < 1) helpText = \"DBS Sample (EID)\";\n        return {\n          id: \"dbs_sample_collection\",\n          helpText: helpText,\n          type: FieldType.TT_YES_NO,\n          isRequired: () => true,\n          finalComputedValue: (v: any) => {\n            return {\n              obs: this.service.buildValueCoded(\"Is DBS Sample Collected\", v),\n            };\n          },\n          options: () => {\n            return [\n              {\n                label: \"Is DBS Sample Collected?\",\n                value: \"\",\n                values: this.yesNoOptions(),\n              },\n            ];\n          },\n        };\n      },\n      dbsSpecimenID(): Field {\n        return {\n          id: \"dbs_specimen_id\",\n          helpText: \"DBS Specimen ID\",\n          type: FieldType.TT_BARCODE,\n          requireNext: false,\n          condition: (f: any) => /yes/i.test(`${f.dbs_sample_collection}`),\n          finalComputedValue: (v: Option) => {\n            return {\n              obs: this.service.buildValueText(\"DBS Specimen ID\", `${v}`),\n            };\n          },\n          config: {\n            hiddenFooterBtns: [\n              'Clear'\n            ]\n          },\n          isRequired: () => true\n        };\n      },\n    },\n  });\n  ","import { render } from \"./HTSDBsOrder.vue?vue&type=template&id=4d218da8&ts=true\"\nimport script from \"./HTSDBsOrder.vue?vue&type=script&lang=ts\"\nexport * from \"./HTSDBsOrder.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}