{"version":3,"sources":["webpack:///./src/apps/ART/views/reports/clinic/ClinicHypertensionReport.vue?8e36","webpack:///./src/apps/ART/Components/ArtDrilldown.vue?9804","webpack:///./src/apps/ART/Components/ArtDrilldown.vue","webpack:///./src/apps/ART/Components/ArtDrilldown.vue?c8ff","webpack:///./src/apps/ART/views/reports/clinic/ClinicHypertensionReport.vue","webpack:///./src/apps/ART/views/reports/clinic/ClinicHypertensionReport.vue?22fc","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/apps/ART/services/reports/clinic_report_service.ts","webpack:///./src/utils/ReportDateSelectionPrompt.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_loading","_resolveComponent","_component_v2Datatable","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","isLoading","message","title","subtitle","period","columns","columnData","reportData","rowsPerPage","onConfigure","configure","onRefresh","generate","_","onFinish","ITEMS_PER_PAGE","defineComponent","props","type","String","patientIdentifiers","Object","Function","components","IonPage","v2Datatable","setup","ref","router","useRouter","label","exportable","tdClick","data","push","path","patient_id","value","watch","async","length","backlog","chunk","log","id","patient","Patientservice","findByID","getArvNumber","getGender","toDate","getBirthdate","e","console","error","delayPromise","immediate","__exports__","IonLoading","report","ClinicReportService","screened","column","drilldown","normal_reading","mild_reading","moderate_reading","hydrochlorothiazide_25mg","amlodipine_5mg","amlodipine_10mg","enalapril_5mg","enalapril_10mg","atenolol_5mg","atenolol_10mg","total_regimen","modalController","create","component","ArtDrilldown","backdropDismiss","cssClass","componentProps","getTop","then","v","dismiss","present","startDate","endDate","toastWarning","res","getHypertensionReport","keys","reduce","a","k","M","age_group","gender","F","concat","map","d","i","index","toastDanger","DateSelection","sDate","eDate","periodstr","onMounted","SYMBOLS_CONFIG","SYMBOLS","NUMBERS_ONLY","NUMBER_PAD_LO","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","MONTHLY_DAYS_LO","A_TO_Z","ALPHABETICAL_LO","QWERTY","QWERTY_LO","KEY_BTN_NAV","btn","keyboard","ArtReportService","constructor","super","getTtpOutcomes","this","getReport","programID","DatePeriodInputType","HtsReportPreference","ReportPreferences","reactive","datePeriodInputType","localStorage","getItem","PERIOD_INPUT_TYPE","MULTI_FIELD_DATE","params","MultiStepPopupForm","generateDateFields","helpText","required","minDate","maxDate","Service","getSessionDate","condition","estimation","allowUnknown","computeValue","date","c","start_date","proxyID","FieldType","TT_FULL_DATE","validation","Date","computedValue","SINGLE_DATE_INPUT_FIELD","defaultValue","f","TT_DATE_PICKER","CALENDAR_FIELD","StandardValidations","config","infoItems","end_date","persistInfoItems","EstimationFieldType","getYearField","name","showUnknown","primaryFunctions","appearInSummary","TT_TEXT","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","getDefaultDate","form","field","datePart","year","month","day","split","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","min","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","unload","toString","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","val","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","dayjs","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD"],"mappings":"yIAEM,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAAyBC,8BAAkB,eAC3CC,EAAyBD,8BAAkB,eAC3CE,EAAsBF,8BAAkB,YAE9C,OAAQG,yBAAcC,yBAAaF,EAAqB,KAAM,CAC5DG,QAASC,qBAAS,IAAM,CACtBC,yBAAaR,EAAwB,CACnC,UAAWN,EAAKe,UAChBC,QAAS,kBACR,KAAM,EAAG,CAAC,YACbF,yBAAaN,EAAwB,CACnCS,MAAO,sBACPC,SAAUlB,EAAKmB,OACfC,QAASpB,EAAKoB,QACdC,WAAYrB,EAAKsB,WACjBC,YAAa,GACbC,YAAaxB,EAAKyB,UAClBC,UAAWA,IAAM1B,EAAK2B,YACrB,KAAM,EAAG,CAAC,WAAY,UAAW,aAAc,cAAe,gBAEnEC,EAAG,I,oFCrBD,SAAU7B,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMG,EAAyBD,8BAAkB,eAC3CE,EAAsBF,8BAAkB,YAE9C,OAAQG,yBAAcC,yBAAaF,EAAqB,KAAM,CAC5DG,QAASC,qBAAS,IAAM,CACtBC,yBAAaN,EAAwB,CACnCS,MAAOjB,EAAKiB,MACZC,SAAUlB,EAAKkB,SACfG,WAAYrB,EAAKsB,WACjBF,QAASpB,EAAKoB,QACd,YAAapB,EAAK6B,SAClBN,YAAavB,EAAK8B,gBACjB,KAAM,EAAG,CAAC,QAAS,WAAY,aAAc,UAAW,YAAa,kBAE1EF,EAAG,I,gECNP,MAAME,EAAiB,GACRC,mCAAgB,CAC3BC,MAAO,CACHf,MAAO,CACHgB,KAAMC,OACNtB,QAAS,aAEbuB,mBAAoB,CAChBF,KAAMG,QAEVP,SAAU,CACNI,KAAMI,WAGdC,WAAY,CACRC,eACAC,oBAEJC,MAAMT,GACF,MAAMd,EAAWwB,iBAAI,KACfpB,EAAaoB,iBAAS,IACtBC,EAASC,iBACTxB,EAAsC,CACxC,CACI,CACIyB,MAAO,aACPH,IAAK,cAET,CACIG,MAAO,SACPH,IAAK,UAET,CACIG,MAAO,YACPH,IAAK,aAET,CACIG,MAAO,SACPH,IAAK,aACLI,YAAY,EACZC,QAASA,EAAEC,UAAiCL,EAAOM,KAAK,CAAEC,KAAM,sBAAsBF,EAAKG,aAC3FC,MAAOA,IAAM,iBA6BzB,OAxBAC,mBAAM,IAAMrB,EAAMG,mBAAoBmB,UAGlC,GAFAhC,EAAW8B,MAAQ,GACnBlC,EAASkC,MAAQ,YACXJ,IAAQA,EAAKO,OAAS,OAC5B,MAAMC,EAAUC,mBAAMT,EAAMlB,GAC5B,IAAI,MAAM4B,KAAOF,EAAS,CACtB,IAAK,MAAMG,KAAMD,EAAK,CAClB,IACI,MAAME,EAAU,IAAIC,aAAsBA,OAAeC,SAASH,IAClErC,EAAW8B,MAAMH,KAAK,CAClB,WAAcW,EAAQG,eACtB,OAAUH,EAAQI,YAClB,UAAaC,eAAOL,EAAQM,kBAElC,MAAOC,GACLC,QAAQC,MAAMF,GACd7C,EAAW8B,MAAMH,KAAK,IAE1B/B,EAASkC,MAAQ,UAAU9B,EAAW8B,MAAMG,cAAcP,GAAM,IAAIO,eAElEe,eAAa,OAExB,CAAEC,WAAW,IAER,CACJnD,UACAF,WACAI,aACAQ,qB,qBChFZ,MAAM0C,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS,KAErD,QCGAzC,+BAAgB,CAC3BO,WAAY,CACRC,eACAkC,kBACAjC,oBAEJC,QACI,MAAMnB,EAAaoB,iBAAI,IACjBvB,EAASuB,iBAAI,IACb3B,EAAY2B,kBAAI,GAChBgC,EAAS,IAAIC,OACbvD,EAAsC,CACxC,CACI,CACIyB,MAAO,IACPH,IAAK,SAET,CACIG,MAAO,YACPH,IAAK,aAET,CACIG,MAAO,SACPH,IAAK,UAET,CACIG,MAAO,WACPH,IAAK,WACLU,MAAQJ,GAAcA,EAAK4B,SAASrB,OACpCR,QAASA,EAAG8B,SAAQ7B,UAAW8B,EAC3B,GAAGD,EAAOhC,MAASG,EAAK4B,WAGhC,CACI/B,MAAO,iBACPH,IAAK,iBACLU,MAAQJ,GAAcA,EAAK+B,eAAexB,OAC1CR,QAASA,EAAG8B,SAAQ7B,UAAW8B,EAAU,GAAGD,EAAOhC,MAASG,EAAK+B,iBAErE,CACIlC,MAAO,eACPH,IAAK,eACLU,MAAQJ,GAAcA,EAAKgC,aAAazB,OACxCR,QAASA,EAAG8B,SAAQ7B,UAAW8B,EAAU,GAAGD,EAAOhC,MAASG,EAAKgC,eAErE,CACInC,MAAO,mBACPH,IAAK,mBACLU,MAAQJ,GAAcA,EAAKiC,iBAAiB1B,OAC5CR,QAASA,EAAG8B,SAAQ7B,UAAW8B,EAAU,GAAGD,EAAOhC,MAASG,EAAKiC,mBAErE,CACIpC,MAAO,2BACPH,IAAK,2BACLU,MAAQJ,GAAcA,EAAKkC,yBAAyB3B,OACpDR,QAASA,EAAG8B,SAAQ7B,UAAW8B,EAAU,GAAGD,EAAOhC,MAASG,EAAKkC,2BAErE,CACIrC,MAAO,iBACPH,IAAK,iBACLU,MAAQJ,GAAcA,EAAKmC,eAAe5B,OAC1CR,QAASA,EAAG8B,SAAQ7B,UAAW8B,EAAU,GAAGD,EAAOhC,MAASG,EAAKmC,iBAErE,CACItC,MAAO,kBACPH,IAAK,kBACLU,MAAQJ,GAAcA,EAAKoC,gBAAgB7B,OAC3CR,QAASA,EAAG8B,SAAQ7B,UAAW8B,EAAU,GAAGD,EAAOhC,MAASG,EAAKoC,kBAErE,CACIvC,MAAO,gBACPH,IAAK,gBACLU,MAAQJ,GAAcA,EAAKqC,cAAc9B,OACzCR,QAASA,EAAG8B,SAAQ7B,UAAW8B,EAAU,GAAGD,EAAOhC,MAASG,EAAKqC,gBAErE,CACIxC,MAAO,iBACPH,IAAK,iBACLU,MAAQJ,GAAcA,EAAKsC,eAAe/B,OAC1CR,QAASA,EAAG8B,SAAQ7B,UAAW8B,EAAU,GAAGD,EAAOhC,MAASG,EAAKsC,iBAErE,CACIzC,MAAO,eACPH,IAAK,eACLU,MAAQJ,GAAcA,EAAKuC,aAAahC,OACxCR,QAASA,EAAG8B,SAAQ7B,UAAW8B,EAAU,GAAGD,EAAOhC,MAASG,EAAKuC,eAErE,CACI1C,MAAO,gBACPH,IAAK,gBACLU,MAAQJ,GAAcA,EAAKwC,cAAcjC,OACzCR,QAASA,EAAG8B,SAAQ7B,UAAW8B,EAAU,GAAGD,EAAOhC,MAASG,EAAKwC,gBAErE,CACI3C,MAAO,gBACPH,IAAK,gBACLU,MAAQJ,GAAcA,EAAKyC,cAAclC,OACzCR,QAASA,EAAG8B,SAAQ7B,UAAW8B,EAAU,GAAGD,EAAOhC,MAASG,EAAKyC,kBAKvEX,EAAYxB,MAAOrC,EAAekB,YAC7BuD,OAAgBC,OAAO,CAC1BC,UAAWC,EACXC,iBAAiB,EACjBC,SAAU,cACVC,eAAgB,CACZ/E,QACAC,SAAUC,EACVgB,qBACAN,SAAUA,IAAM6D,OAAgBO,SAASC,KAAKC,GAAKA,GAAKT,OAAgBU,eAE5EC,WAKD1E,EAAW2B,UACd,IAAMoB,EAAO4B,YAAa5B,EAAO6B,QAC7B,OAAOC,eAAa,qCAExBzF,EAAUqC,OAAQ,EAClB9B,EAAW8B,MAAQ,GACnB,IACI,MAAMqD,QAAY/B,EAAOgC,wBACnB1D,EAAOZ,OAAOuE,KAAKF,GAAKG,OAAO,CAACC,EAAQC,KAC1CD,EAAEE,EAAE9D,KAAK,CACL+D,UAAWF,EACXG,OAAQ,UACLR,EAAIK,GAAG,OAEdD,EAAEK,EAAEjE,KAAK,CACL+D,UAAWF,EACXG,OAAQ,YACLR,EAAIK,GAAG,OAEPD,GAEX,CACIK,EAAG,GACHH,EAAG,KAEPzF,EAAW8B,MAAQJ,EAAKkE,EAAEC,OAAOnE,EAAK+D,GAAGK,IAAI,CAACC,EAAQC,KAAW,CAAEC,MAAOD,EAAE,KAAMD,KACpF,MAAOlD,GACLqD,eAAY,8BACZpD,QAAQC,MAAMF,GAElBpD,EAAUqC,OAAQ,GAMf3B,EAAYA,IAAMgG,eAAc,CACnC5F,SAAUA,CAAC6F,EAAeC,EAAeC,KACrCzG,EAAOiC,MAAQ,WAAWwE,KAC1BlD,EAAO4B,UAAYoB,EACnBhD,EAAO6B,QAAUoB,EACjBhG,OASR,OAFAkG,uBAAU,KAAOvG,EAAW8B,MAAMG,QAAU9B,KAErC,CACHH,aACAP,YACAU,YACAE,WACAP,UACAD,aCnLZ,MAAM,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASpB,KAErD,gB,oCCPf,gSAeO,MAAM+H,EAAiB,CAC1BC,OACA,CACI,CAAC,GAAI,YAIAC,EAAe,CACxBC,OACA,CACI,CAAC,YAIIC,EAAuB,CAChCD,OACA,CACI,CAAC,SAAU,aAINE,EAAwB,CACjCF,OACA,CACI,CAAC,OACD,CAAC,SAAU,aAING,EAA6B,CACtCH,OACA,CACI,CAAC,YAIII,EAAU,CACnBJ,OACA,CACI,CAAC,UAAW,UACZ,CAAC,SAAU,SAINK,EAAe,CACxBC,OACA,CACI,CAAC,aAIIC,EAAS,CAClBC,OACA,CACI,CAAC,MAAO,UACR,CAAC,SAAU,WACX,CAAC,GAAI,WAIAC,EAAS,CAClBC,OACA,CACI,CAAC,GAAI,UACL,CAAC,OAAQ,OACT,CAAC,QAAS,aAOLC,EAAc,CACvB,CACIC,IAAK,MACLC,SAAUT,GAEd,CACIQ,IAAK,OACLC,SAAUhB,GAEd,CACIe,IAAK,MACLC,SAAUN,GAEd,CACIK,IAAK,SACLC,SAAUJ,K,oCCtGlB,kDAEM,MAAO/D,UAA4BoE,OACrCC,cACIC,QAGJC,iBACI,OAAOC,KAAKC,UAAU,YAAYD,KAAKE,iCAG3C3C,wBACI,OAAOyC,KAAKC,UAAU,YAAYD,KAAKE,4C,oCCZ/C,sCAWYC,EAMAC,EAjBZ,6GAWA,SAAYD,GACRA,EAAA,4CACAA,EAAA,6BACAA,EAAA,+CAHJ,CAAYA,MAAmB,KAM/B,SAAYC,GACRA,EAAA,mDADJ,CAAYA,MAAmB,KAIxB,MAAMC,EAAoBC,sBAAS,CACtCC,oBAAqBC,aAAaC,QAAQL,EAAoBM,oBAAsBP,EAAoBQ,mBA0BtG,SAAUrC,EAAcsC,GAC1BC,eAAmB,IACZC,eAAmB,CAClBtG,GAAI,aACJuG,SAAU,QACVC,UAAU,EACVC,QAASA,KAAY,OAANL,QAAM,IAANA,OAAM,EAANA,EAAQK,UAAW,GAClCC,QAASA,KAAY,OAANN,QAAM,IAANA,OAAM,EAANA,EAAQM,UAAWC,OAAQC,iBAC1CC,UAAWA,IAAOhB,EAAkBE,sBAAwBJ,EAAoBQ,iBAChFW,WAAY,CACRC,cAAc,GAElBC,aAAeC,GAAiBA,OAEjCX,eAAmB,CAClBtG,GAAI,WACJuG,SAAU,MACVC,UAAU,EACVC,QAASA,CAACxI,EAAQiJ,IAAWA,EAAEC,WAC/BT,QAASA,KAAY,OAANN,QAAM,IAANA,OAAM,EAANA,EAAQM,UAAWC,OAAQC,iBAC1CC,UAAWA,IAAOhB,EAAkBE,sBAAwBJ,EAAoBQ,iBAChFW,WAAY,CACRC,cAAc,GAElBC,aAAeC,GAAiBA,IAEpC,CACIjH,GAAI,iBACJoH,QAAS,aACTb,SAAU,aACVjI,KAAM+I,OAAUC,aAChBC,WAAa/E,IACT,IAAKA,EAAG,MAAO,CAAC,oBAEhB,MAAMkE,EAAUN,EAAOM,SAAWC,OAAQC,iBAC1C,OAAIR,EAAOK,SAAW,IAAIe,KAAKhF,EAAE/C,OAAS,IAAI+H,KAAKpB,EAAOK,SAC/C,CAAC,GAAGnG,eAAO,GAAGkC,EAAE/C,uCAAyCa,eAAO8F,EAAOK,YAE9EC,GAAW,IAAIc,KAAKhF,EAAE/C,OAAS,IAAI+H,KAAKd,GACjC,CAAC,GAAGpG,eAAO,GAAGkC,EAAE/C,sCAAwCa,eAAOoG,MAEnE,MAEXe,cAAgBjF,GAAcA,EAAE/C,MAChCoH,UAAWA,IAAMhB,EAAkBE,sBAAwBJ,EAAoB+B,yBAEnF,CACI1H,GAAI,eACJoH,QAAS,WACTb,SAAU,WACVjI,KAAM+I,OAAUC,aAChBK,aAAeC,GAAWA,EAAET,WAAW1H,MACvC8H,WAAYA,CAAC/E,EAAWoF,KACpB,IAAKpF,EAAG,MAAO,CAAC,oBAEhB,MAAMkE,EAAUN,EAAOM,SAAWC,OAAQC,iBAC1C,OAAIgB,EAAET,WAAW1H,OAAS,IAAI+H,KAAKhF,EAAE/C,OAAS,IAAI+H,KAAKI,EAAET,WAAW1H,OACzD,CAAC,GAAGa,eAAO,GAAGkC,EAAE/C,uCAAyCa,eAAOsH,EAAET,WAAW1H,UAEpFiH,GAAW,IAAIc,KAAKhF,EAAE/C,OAAS,IAAI+H,KAAKd,GACjC,CAAC,GAAGpG,eAAO,GAAGkC,EAAE/C,sCAAwCa,eAAOoG,MAEnE,MAEXe,cAAgBjF,GAAcA,EAAEtD,MAChC2H,UAAWA,IAAMhB,EAAkBE,sBAAwBJ,EAAoB+B,yBAEnF,CACI1H,GAAI,sBACJoH,QAAS,aACTb,SAAU,aACVjI,KAAM+I,OAAUQ,eAChBJ,cAAgBjF,GAAcA,EAC9BqE,UAAWA,IAAMhB,EAAkBE,sBAAwBJ,EAAoBmC,eAC/EP,WAAa/E,GAAcuF,OAAoBvB,SAAShE,GACxDwF,OAAQ,CACJvB,QAASA,IAAML,EAAOK,SAAW,KACjCC,QAASA,IAAMN,EAAOM,SAAWC,OAAQC,iBACzCqB,UAAWA,CAAChB,EAAcW,IACf,CACH,CAAE1I,MAAO,aAAcO,MAAOa,eAAO2G,IAAS,KAC9C,CAAE/H,MAAO,WAAYO,MAAOa,eAAOsH,EAAEM,WAAa,MAG1DC,kBAAkB,IAG1B,CACInI,GAAI,oBACJoH,QAAS,WACTb,SAAU,WACVjI,KAAM+I,OAAUQ,eAChBN,WAAa/E,GAAcuF,OAAoBvB,SAAShE,GACxDmF,aAAeC,GAAWA,EAAET,WAAW1H,MACvCgI,cAAgBjF,GAAcA,EAC9BqE,UAAWA,IAAMhB,EAAkBE,sBAAwBJ,EAAoBmC,eAC/EE,OAAQ,CACJvB,QAAUmB,GAAWA,EAAET,WAAW1H,MAClCiH,QAASA,IAAMN,EAAOM,SAAWC,OAAQC,iBACzCqB,UAAWA,CAAChB,EAAcW,IACf,CACH,CAAE1I,MAAO,aAAcO,MAAOa,eAAOsH,EAAET,aAAe,KACtD,CAAEjI,MAAO,WAAYO,MAAOa,eAAO2G,KAG3CkB,kBAAkB,KAI9BxI,MAAOiI,EAAQV,KACXzG,QAAQV,IAAImH,GACZnF,OAAgBU,UAChB,IACI,MAAMjF,EAAS,GAAG8C,eAAO4G,EAAEC,kBAAkB7G,eAAO4G,EAAEgB,YACtD9B,EAAOlI,SAASgJ,EAAEC,WAAYD,EAAEgB,SAAU1K,GAC5C,MAAOgD,GACLqD,eAAY,8B,8HC1JZuE,E,YCVI,GACZ,CACIlJ,MAAO,MACPO,MAAO,GAEX,CACIP,MAAO,MACPO,MAAO,GAEX,CACIP,MAAO,MACPO,MAAO,GAEX,CACIP,MAAO,MACPO,MAAO,GAEX,CACIP,MAAO,MACPO,MAAO,GAEX,CACIP,MAAO,MACPO,MAAO,GAEX,CACIP,MAAO,MACPO,MAAO,GAEX,CACIP,MAAO,MACPO,MAAO,GAEX,CACIP,MAAO,MACPO,MAAO,GAEX,CACIP,MAAO,MACPO,MAAO,IAEX,CACIP,MAAO,MACPO,MAAO,IAEX,CACIP,MAAO,MACPO,MAAO,K,iFDRT,SAAU4I,EAAarI,EAAYsI,EAAcC,GAAY,GAC/D,MAAMC,EAAmB,GAEzB,OADID,GAAaC,EAAiBlJ,KAAK,WAChC,CACHU,KACAuG,SAAa+B,EAAH,QACVG,gBAAiBA,KAAM,EACvBnK,KAAM+I,OAAUqB,QAChBV,OAAQ,CACJW,eAAgB,CACZrE,OACA,CACIkE,EACA,CAAC,cAOf,SAAUI,EAAc5I,EAAYsI,GACtC,MAAO,CACHtI,KACAuG,SAAa+B,EAAH,SACVG,gBAAiBA,KAAM,EACvBnK,KAAM+I,OAAUwB,UAChBC,QAASA,IAAMC,GAIjB,SAAUC,EAAYhJ,EAAYsI,GACpC,MAAO,CACHtI,KACAuG,SAAa+B,EAAH,OACVhK,KAAM+I,OAAU4B,gBAChBR,gBAAiBA,KAAM,GAIzB,SAAUS,EAA8BlJ,EAAYsI,GACtD,MAAO,CACHtI,KACAuG,SAAa+B,EAAH,oBACVhK,KAAM+I,OAAUwB,UAChBJ,gBAAiBA,KAAM,EACvBK,QAASA,IAAO,CACZ,CAAE5J,MAAO,eAAgBO,MAAO,KAChC,CAAEP,MAAO,gBAAiBO,MAAO,KACjC,CAAEP,MAAO,gBAAiBO,MAAO,KACjC,CAAEP,MAAO,gBAAiBO,MAAO,KACjC,CAAEP,MAAO,mBAAoBO,MAAO,OAK1C,SAAU0J,EAAoBnJ,EAAYsI,GAC5C,MAAO,CACHtI,KACAuG,SAAa+B,EAAH,gBACVhK,KAAM+I,OAAU+B,UAChBX,gBAAiBA,KAAM,EACvBT,OAAQ,CACJqB,OAAQ5E,SAKpB,SAAS6E,EAAkBC,GACvB,OAAOC,SAASD,GAAK,GAAK,IAAIA,EAAMA,EAGxC5J,eAAe8J,EAAeC,EAAWC,EAA2BC,GAChE,GAAID,EAAMhC,aAAc,CACpB,MAAMV,QAAa0C,EAAMhC,aAAa+B,GACtC,GAAIzC,EAAM,CACN,MAAO4C,EAAMC,EAAOC,GAAO9C,EAAK+C,MAAM,KACtC,OAAOJ,GACH,IAAK,OACD,OAAOC,GAAQ,GACnB,IAAK,QACD,OAAOL,SAASM,IAAU,GAC9B,IAAK,MACD,OAAON,SAASO,IAAQ,KAIxC,MAAO,GAGX,SAASrG,EAAEuD,GACP,OAAOgD,OAAQC,2BAA2BjD,GAG9C,SAASkD,EAAelD,EAAc0C,EAA2BD,EAAWU,GACxE,GAAIT,EAAMlD,QAAS,CACf,MAAM4D,EAAMV,EAAMlD,QAAQiD,EAAMU,GAChC,GAAI,IAAI5C,KAAKP,GAAQ,IAAIO,KAAK6C,GAC1B,MAAO,CAAC,GAAG3G,EAAEuD,mCAAsCvD,EAAE2G,MAG7D,GAAIV,EAAMjD,QAAS,CACf,MAAM4D,EAAMX,EAAMjD,QAAQgD,EAAMU,GAChC,GAAIE,GAAO,IAAI9C,KAAKP,GAAQ,IAAIO,KAAK8C,GACjC,MAAO,CAAC,GAAG5G,EAAEuD,mCAAsCvD,EAAE4G,OAY3D,SAAUhE,EAAmBqD,EAA2BY,EAAQ,IAClE,IAAIC,EAAW,GACXC,EAAY,GACZC,EAAa,GACbC,EAAW,GACXC,GAAkB,EAEtB,MAAMC,EAAS,QAAQlB,EAAM3J,GACvB8K,EAAU,SAASnB,EAAM3J,GACzB+K,EAAQ,OAAOpB,EAAM3J,GACrBgL,EAAgB,gBAAgBrB,EAAM3J,GACtCiL,EAAqB,qBAAqBtB,EAAM3J,GAEhD6J,EAAOxB,EAAawC,EAAQlB,EAAMpD,SAAUoD,EAAM7C,WAAWC,cAC7D+C,EAAQlB,EAAckC,EAASnB,EAAMpD,UACrCwD,EAAMf,EAAY+B,EAAOpB,EAAMpD,UAE/B2E,EAAc/B,EAAoB6B,EAAerB,EAAMpD,UACvD4E,EAAmBjC,EAA8B+B,EAAoBtB,EAAMpD,UAE3E6E,EAAsE,mBAA1CzB,EAAM7C,WAAWuE,sBAC5C1B,EAAM7C,WAAWuE,qBAElBC,EAAqB1D,KACnBA,EAAEiD,IAAWjD,EAAEiD,GAAQpL,OACnB,CAAC,WAAW8L,SAAS3D,EAAEiD,GAAQpL,WAIhCkK,EAAM9C,WAAY8C,EAAM9C,UAAUe,IAQvC4D,EAAoBA,CAAC/L,EAAYgM,KACnC,MAAMC,EAAQ,CACV,CAAEpN,KAAM,OAAQmB,MAAOgL,EAAWxN,QAAS,QAC3C,CAAEqB,KAAM,QAASmB,MAAOiL,EAAYzN,QAAS,MAC7C,CAAEqB,KAAM,MAAOmB,MAAOkL,EAAU1N,QAAS,OAE7C,OAAOyO,EAAMzI,OAAO,CAAC0I,EAAiBC,KAClC,MAAMC,EAAK,CAAC,UAAMC,EAAW,UAAW,IAcxC,OAbIL,IAASG,EAAMtN,KACXuN,EAAGN,SAAS9L,GACZkM,EAAWrM,KAAKsM,EAAM3O,SAEtB0O,EAAWrM,KAAKG,GAGhBoM,EAAGN,SAASK,EAAMnM,OAClBkM,EAAWrM,KAAKsM,EAAM3O,SAEtB0O,EAAWrM,KAAKsM,EAAMnM,OAGvBkM,GACR,IAAII,KAAK,MAGU,oBAAfpC,EAAMqC,OAAqBnC,EAAKmC,KAAOrC,EAAMqC,MAGxDnC,EAAKoC,sBAAyB5M,GAAc,GAAGwK,EAAKtD,aAAaiF,EAAsB,OAAJnM,QAAI,IAAJA,OAAI,EAAJA,EAAMH,MAAO,WAEhG2K,EAAKzC,QAAUuC,EAAM3J,GAErB6J,EAAKqC,OAAU1J,GAAciI,EAAYjI,EAAE/C,MAAM0M,WAEjDtC,EAAK7B,OAAS,IAAK6B,EAAK7B,UAAW2B,EAAM3B,QAEzC6B,EAAKlC,aAAgBC,GAAW6B,EAAe7B,EAAG+B,EAAO,QAEzDE,EAAKhD,UAAae,IAAW+B,EAAM9C,WAC7B8C,EAAM9C,UAAUe,GAGtBiC,EAAKtC,WAAa,CAAC/E,EAAWoF,EAAQV,KAClC,GAAIyC,EAAMnD,UAAYuB,OAAoBvB,SAAShE,GAC/C,MAAO,CAAC,wBAEZ,MAAMqH,EAAOrH,EAAIA,EAAE/C,MAAQ,GAC3B,IAAKkK,EAAM7C,WAAWC,cACf8C,EAAKsC,WAAWC,MAAM,YACzB,MAAO,CAAC,kCAGZ,GAAIvC,IAAS,CAAC,WAAW0B,SAAS1B,IAC3BwC,MAAMxC,IACNA,EAAO,KACV,MAAO,CAAC,gBAGZ,GAAIA,GAAiC,oBAAlBF,EAAMlD,QAAwB,CAC7C,MAAM6F,EAAUrC,OAAQsC,QAAQ5C,EAAMlD,QAAQmB,EAAGV,IACjD,GAAIsC,SAASK,GAAeyC,EACxB,MAAO,CAAC,WAAWzC,kCAAqCyC,KAIhE,GAAIzC,GAAiC,oBAAlBF,EAAMjD,QAAwB,CAC7C,MAAM4D,EAAMX,EAAMjD,QAAQkB,EAAGV,GAC7B,GAAIoD,GAAOT,EAAOI,OAAQsC,QAAQjC,GAC9B,MAAO,CAAC,WAAWT,6BAAgCI,OAAQsC,QAAQjC,MAI3E,OAAO,MAOXT,EAAK2C,gBAAkB,KAAM,CACzBtN,MAAOyK,EAAM8C,cAAgB9C,EAAMpD,SACnC9G,MAAO+K,EAAW9G,EAAE8G,GAAY,YAKpCX,EAAKpB,gBAAkB,CAACxK,EAAQc,IAAgBA,IAAQ4K,EAAM3J,GAO9D6J,EAAKpC,cAAiBiF,IAClB,GAAIlC,EAAU,CACV,MAAOvM,EAAG6L,EAAOC,GAAOS,EAASR,MAAM,KAEvC,OADAQ,EAAW,GAAGkC,EAAIjN,SAASqK,KAASC,IAC7BJ,EAAM3C,aAAawD,GAAU,GAExC,GAAIkC,GAAqB,YAAdA,EAAIjN,MAEX,OADA+K,EAAW,GACJb,EAAM3C,aAAa,WAAW,IAK7C8C,EAAMmC,sBAAyB5M,GAAc,GAAGyK,EAAMvD,aAAaiF,EAAsB,OAAJnM,QAAI,IAAJA,OAAI,EAAJA,EAAMH,MAAO,YAElG4K,EAAM1C,QAAUuC,EAAM3J,GAEtB8J,EAAMoC,OAAU1J,GAAckI,EAAapB,EAAkB9G,EAAE/C,MAAM0M,YAErErC,EAAMjD,UAAae,GAAY0D,EAAkB1D,GAEjDkC,EAAMvC,WAAc/E,GAAcuF,OAAoBvB,SAAShE,GAE/DsH,EAAMnC,aAAgBC,GAAW6B,EAAe7B,EAAG+B,EAAO,SAGtDyB,IACAtB,EAAMhB,QAAU,IAAM,IAAIC,EAAc,CAAE7J,MAAO,UAAWO,MAAO,aASvEqK,EAAMrC,cAAgB,CAACiF,EAAa9E,KAEhC,IAAI,GAAG8E,EAAIjN,OAAQ2M,MAAM,YAErB,OADA5B,EAAc5C,EAAEiD,GAAQpL,MAAb,SACJkK,EAAM3C,aAAawD,GAAU,GAGxC,GAAIA,EAAU,CACV,MAAOX,EAAM5L,EAAG8L,GAAOS,EAASR,MAAM,KAChCF,EAAQR,EAAkB,GAAGoD,EAAIjN,OAEvC,OADA+K,EAAW,GAAGX,KAAQC,KAASC,IACxBJ,EAAM3C,aAAawD,GAAU,KAI5CT,EAAI3C,QAAUuC,EAAM3J,GAEpB+J,EAAIkC,sBAAyB5M,GAAc,GAAG0K,EAAIxD,aAAaiF,EAAsB,OAAJnM,QAAI,IAAJA,OAAI,EAAJA,EAAMH,MAAO,UAE9F6K,EAAIlD,UAAae,KAAY,GAAGA,EAAEkD,GAASrL,OAAQ2M,MAAM,aAAed,EAAkB1D,GAE1FmC,EAAIxC,WAAc,CAAC/E,EAAWoF,EAAQV,IAC9Ba,OAAoBvB,SAAShE,GACtB,CAAC,6BAEZoI,KAAkB,GAAGpI,EAAE/C,OAAQ2M,MAAM,YAErCzB,EAAWC,EAAkB,KAAQtB,EAAkB,GAAG9G,EAAE/C,OAC5D+K,EAAW,GAAGC,KAAaC,KAAcC,IAClCR,EAAeK,EAAUb,EAAO/B,EAAGV,IAG9C6C,EAAIpC,aAAgBC,GAAW6B,EAAe7B,EAAG+B,EAAO,OAExDI,EAAItC,cAAgB,IACTkC,EAAM3C,aAAawD,EAAUI,GAGxCb,EAAImC,OAAS,CAACxI,EAAQ6F,EAAQ3B,EAAQV,KAC9ByC,EAAMuC,QAAQvC,EAAMuC,OAAOxI,EAAG6F,EAAG3B,EAAGV,IAG5C6C,EAAI4C,WAAa,CAACnK,EAAQoF,KACd+B,EAAMgD,YAERhD,EAAMgD,WAAWnC,EAAU5C,GAGrCmC,EAAI/B,OAAS,CAGT6B,KAAOjC,GAAWA,EAAEiD,GAAQpL,MAC5BqK,MAAQlC,GAAWA,EAAEkD,GAASrL,OAI7B2L,IAAoBrB,EAAI/B,OAAO4E,gBAAkB,IAEtD,MAAMC,EAAyBA,CAACjF,EAAQkF,KACpC,MAAMC,EAAa,CACK,YAApBnF,EAAEiD,GAAQpL,OACVkK,EAAM9C,WAAY8C,EAAM9C,UAAUe,GAClC+B,EAAM7C,WAAWkG,sBAAwBF,GAE7C,OAAOC,EAAWE,MAAMC,UA6D5B,OAzDAhC,EAAY9D,QAAUuC,EAAM3J,GAE5BkL,EAAY3D,WAAa,CAAC/E,EAAWoF,EAAQV,KACzC,GAAI1E,GAAKA,EAAE/C,MAAQ,IACf,MAAO,CAAC,4DAEZ,GAAI4M,MAAM7C,SAAShH,EAAE/C,MAAM0M,aACvB,MAAO,CAAC,+BAEZ,MAAMgB,EAAmB,qCACzB,IAAI3K,EAAE/C,MAAM0M,WAAWC,MAAMe,GACzB,MAAO,CAAC,4BAEZ,MAAMtD,EAAOuD,IAAMzG,OAAQC,kBACtByG,SAAS7K,EAAE/C,MAAiB,SAC5BoK,OAEL,OADAW,EAAcX,EAAH,SACJM,EAAeK,EAAUb,EAAO/B,EAAGV,IAG9CgE,EAAYrE,UAAa6C,GAAcmD,EACnCnD,EAAMtB,EAAoBkF,oBAG9BpC,EAAYzD,cAAgB,IAAMkC,EAAM3C,aAAawD,GAAU,GAE/DU,EAAYyB,WAAa,CAACnK,EAAQoF,KACtB+B,EAAMgD,YAERhD,EAAMgD,WAAWnC,EAAU5C,GAIrCuD,EAAiB/D,QAAUuC,EAAM3J,GAEjCmL,EAAiB5D,WAAa,CAAC/E,EAAWoF,EAAQV,IAC1Ca,OAAoBvB,SAAShE,GACtB,CAAC,8BAEZgI,EAAW4C,IAAMzG,OAAQC,kBACpByG,SAAS7K,EAAE/C,MAAiB,OAC5B8N,OAAOC,QACLrD,EAAeK,EAAUb,EAAO/B,EAAGV,IAG9CiE,EAAiBtE,UAAa6C,GAAcmD,EACxCnD,EAAMtB,EAAoBqF,sBAG9BtC,EAAiB1D,cAAgB,IAAMkC,EAAM3C,aAAawD,GAAU,GAEpEW,EAAiBwB,WAAa,CAAC1O,EAAQ2J,KAC3B+B,EAAMgD,YAERhD,EAAMgD,WAAWnC,EAAU5C,GAG9B,CACHiC,EACAC,EACAC,EACAmB,EACAC,IAxbR,SAAY/C,GACRA,EAAA,2CACAA,EAAA,uDAFJ,CAAYA,MAAmB","file":"js/chunk-eea47390.b27397ad.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_loading = _resolveComponent(\"ion-loading\")!\n  const _component_v2Datatable = _resolveComponent(\"v2Datatable\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_loading, {\n        \"is-open\": _ctx.isLoading,\n        message: \"Please wait...\"\n      }, null, 8, [\"is-open\"]),\n      _createVNode(_component_v2Datatable, {\n        title: \"Hypertension Report\",\n        subtitle: _ctx.period,\n        columns: _ctx.columns,\n        columnData: _ctx.reportData,\n        rowsPerPage: 30,\n        onConfigure: _ctx.configure,\n        onRefresh: () => _ctx.generate()\n      }, null, 8, [\"subtitle\", \"columns\", \"columnData\", \"onConfigure\", \"onRefresh\"])\n    ]),\n    _: 1\n  }))\n}","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_v2Datatable = _resolveComponent(\"v2Datatable\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_v2Datatable, {\n        title: _ctx.title,\n        subtitle: _ctx.subtitle,\n        columnData: _ctx.reportData,\n        columns: _ctx.columns,\n        \"on-finish\": _ctx.onFinish,\n        rowsPerPage: _ctx.ITEMS_PER_PAGE\n      }, null, 8, [\"title\", \"subtitle\", \"columnData\", \"columns\", \"on-finish\", \"rowsPerPage\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent, ref, PropType, watch } from 'vue';\nimport { IonPage } from \"@ionic/vue\"\nimport  v2Datatable from \"@/components/DataViews/tables/v2PocDatatable/TableView.vue\"\nimport { v2ColumnDataInterface, v2ColumnInterface } from '@/components/DataViews/tables/v2PocDatatable/types';\nimport { useRouter } from \"vue-router\"\nimport { chunk } from 'lodash';\nimport { delayPromise } from '@/utils/Timers';\nimport { Patientservice } from '@/services/patient_service';\nimport { toDate } from '@/utils/Strs';\n\nconst ITEMS_PER_PAGE = 20\nexport default defineComponent({ \n    props: {\n        title: {\n            type: String,\n            default: 'Drilldown'\n        },\n        patientIdentifiers: {\n            type: Object as PropType<number[]>\n        },\n        onFinish: {\n            type: Function\n        }\n    },\n    components: {\n        IonPage,\n        v2Datatable\n    },\n    setup(props) {\n        const subtitle = ref('-')\n        const reportData = ref<any>([])\n        const router = useRouter()\n        const columns: Array<v2ColumnInterface[]> = [\n            [\n                {\n                    label: 'ARV Number',\n                    ref: 'arv_number'\n                },\n                {\n                    label: 'Gender',\n                    ref: 'gender'\n                },\n                {\n                    label: 'Birthdate',\n                    ref: 'birthdate'\n                },\n                {\n                    label: 'Action',\n                    ref: 'patient_id',\n                    exportable: false,\n                    tdClick: ({data}: v2ColumnDataInterface) => router.push({ path: `/patient/dashboard/${data.patient_id}`}) ,\n                    value: () => 'View client'\n                }\n            ]\n        ]\n        \n        watch(() => props.patientIdentifiers, async (data) => {\n            reportData.value = []\n            subtitle.value = `Total: 0`\n            if (!(data && data.length)) return\n            const backlog = chunk(data, ITEMS_PER_PAGE)\n            for(const log of backlog) {\n                for (const id of log) {\n                    try {\n                        const patient = new Patientservice((await Patientservice.findByID(id)))\n                        reportData.value.push({\n                            'patient_id': patient.getArvNumber(),\n                            'gender': patient.getGender(),\n                            'birthdate': toDate(patient.getBirthdate())\n                        })\n                    } catch (e) {\n                        console.error(e)\n                        reportData.value.push({})\n                    }\n                    subtitle.value = `Total: ${reportData.value.length} of ${(data||[]).length}`\n                }\n                await delayPromise(500)\n            }\n        }, { immediate: true })\n\n        return  {\n            columns,\n            subtitle,\n            reportData,\n            ITEMS_PER_PAGE\n        }\n    }\n})\n","import { render } from \"./ArtDrilldown.vue?vue&type=template&id=6043fe17&ts=true\"\nimport script from \"./ArtDrilldown.vue?vue&type=script&lang=ts\"\nexport * from \"./ArtDrilldown.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\nimport { IonPage, IonLoading, modalController } from \"@ionic/vue\"\nimport { defineComponent, onMounted, ref } from 'vue'\nimport  v2Datatable from \"@/components/DataViews/tables/v2PocDatatable/TableView.vue\"\nimport { v2ColumnInterface } from '@/components/DataViews/tables/v2PocDatatable/types';\nimport { DateSelection } from '@/utils/ReportDateSelectionPrompt';\nimport { toastDanger, toastWarning } from '@/utils/Alerts';\nimport { ClinicReportService } from \"@/apps/ART/services/reports/clinic_report_service\";\nimport ArtDrilldown from \"@/apps/ART/Components/ArtDrilldown.vue\";\n\nexport default defineComponent({\n    components: { \n        IonPage,\n        IonLoading,\n        v2Datatable\n    },\n    setup() {\n        const reportData = ref([])\n        const period = ref('')\n        const isLoading = ref(false)\n        const report = new ClinicReportService()\n        const columns: Array<v2ColumnInterface[]> = [\n            [\n                {\n                    label: \"#\",\n                    ref: \"index\"\n                },\n                {\n                    label: \"Age group\",\n                    ref: 'age_group'\n                },\n                {\n                    label: \"Gender\",\n                    ref: 'gender'\n                },\n                {\n                    label: \"Screened\",\n                    ref: \"screened\",\n                    value: (data: any) => data.screened.length,\n                    tdClick: ({ column, data }) => drilldown(\n                        `${column.label}`, data.screened\n                    )\n                },\n                {\n                    label: \"Normal reading\",\n                    ref: \"normal_reading\",\n                    value: (data: any) => data.normal_reading.length,\n                    tdClick: ({ column, data }) => drilldown(`${column.label}`, data.normal_reading)\n                },\n                {\n                    label: \"Mild reading\",\n                    ref: \"mild_reading\",\n                    value: (data: any) => data.mild_reading.length,\n                    tdClick: ({ column, data }) => drilldown(`${column.label}`, data.mild_reading)\n                },\n                {\n                    label: \"Moderate reading\",\n                    ref: \"moderate_reading\",\n                    value: (data: any) => data.moderate_reading.length,\n                    tdClick: ({ column, data }) => drilldown(`${column.label}`, data.moderate_reading)\n                },\n                {\n                    label: \"Hydrochlorothiazide 25mg\",\n                    ref: \"hydrochlorothiazide_25mg\",\n                    value: (data: any) => data.hydrochlorothiazide_25mg.length,\n                    tdClick: ({ column, data }) => drilldown(`${column.label}`, data.hydrochlorothiazide_25mg)\n                },\n                {\n                    label: \"Amlodipine 5mg\",\n                    ref: \"amlodipine_5mg\",\n                    value: (data: any) => data.amlodipine_5mg.length,\n                    tdClick: ({ column, data }) => drilldown(`${column.label}`, data.amlodipine_5mg)\n                },\n                {\n                    label: \"Amlodipine 10mg\",\n                    ref: \"amlodipine_10mg\",\n                    value: (data: any) => data.amlodipine_10mg.length,\n                    tdClick: ({ column, data }) => drilldown(`${column.label}`, data.amlodipine_10mg)\n                },\n                {\n                    label: \"Enalapril 5mg\",\n                    ref: \"enalapril_5mg\",\n                    value: (data: any) => data.enalapril_5mg.length,\n                    tdClick: ({ column, data }) => drilldown(`${column.label}`, data.enalapril_5mg)\n                },\n                {\n                    label: \"Enalapril 10mg\",\n                    ref: \"enalapril_10mg\",\n                    value: (data: any) => data.enalapril_10mg.length,\n                    tdClick: ({ column, data }) => drilldown(`${column.label}`, data.enalapril_10mg)\n                },\n                {\n                    label: \"Atenolol 5mg\",\n                    ref: \"atenolol_5mg\",\n                    value: (data: any) => data.atenolol_5mg.length,\n                    tdClick: ({ column, data }) => drilldown(`${column.label}`, data.atenolol_5mg)\n                },\n                {\n                    label: \"Atenolol 10mg\",\n                    ref: \"atenolol_10mg\",\n                    value: (data: any) => data.atenolol_10mg.length,\n                    tdClick: ({ column, data }) => drilldown(`${column.label}`, data.atenolol_10mg)\n                },\n                {\n                    label: \"Total Regimen\",\n                    ref: \"total_regimen\",\n                    value: (data: any) => data.total_regimen.length,\n                    tdClick: ({ column, data }) => drilldown(`${column.label}`, data.total_regimen)\n                }\n            ]\n        ]\n\n        const drilldown = async (title: string, patientIdentifiers: number[]) => {\n            (await modalController.create({\n                component: ArtDrilldown,\n                backdropDismiss: false,\n                cssClass: 'large-modal',\n                componentProps: {\n                    title,\n                    subtitle: period,\n                    patientIdentifiers,\n                    onFinish: () => modalController.getTop().then(v => v && modalController.dismiss())\n                }\n            })).present()\n        }\n        /**\n         * Generates report by start date and end date\n         */\n         const generate = async () => {\n            if (!(report.startDate && report.endDate))  {\n                return toastWarning('Start date and end date required!')\n            }\n            isLoading.value = true\n            reportData.value = []\n            try {\n                const res = await report.getHypertensionReport()\n                const data = Object.keys(res).reduce((a: any, k) => {\n                    a.M.push({\n                        age_group: k,\n                        gender: 'Male',\n                        ...res[k]['M']\n                    })\n                    a.F.push({\n                        age_group: k,\n                        gender: 'Female',\n                        ...res[k]['F']\n                    })\n                    return a\n                },\n                {\n                    F: [],\n                    M: []\n                })\n                reportData.value = data.F.concat(data.M).map((d: any, i: any) => ({index: i+1, ...d}))\n            } catch (e) {\n                toastDanger(\"Unable to generate report!\")\n                console.error(e)\n            }\n            isLoading.value = false\n        }\n\n        /**\n         * Loads a dialogue to allow users to configure start and end date\n         */\n         const configure = () => DateSelection({\n            onFinish: (sDate: string, eDate: string, periodstr: string) => {\n                period.value = `Period (${periodstr})`\n                report.startDate = sDate\n                report.endDate = eDate\n                generate()\n            }\n        })\n\n        /**\n         * Initialization code when the report is empty!\n        */\n        onMounted(() => !reportData.value.length && configure())\n\n        return {\n            reportData,\n            isLoading,\n            configure,\n            generate,\n            columns,\n            period\n        }\n    }\n})\n","import { render } from \"./ClinicHypertensionReport.vue?vue&type=template&id=cbcf4442&ts=true\"\nimport script from \"./ClinicHypertensionReport.vue?vue&type=script&lang=ts\"\nexport * from \"./ClinicHypertensionReport.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { ArtReportService } from \"./art_report_service\";\n\nexport class ClinicReportService extends ArtReportService {\n    constructor() {\n        super()\n    }\n    \n    getTtpOutcomes() {\n        return this.getReport(`programs/${this.programID}/reports/tpt_outcome`)\n    }\n\n    getHypertensionReport() {\n        return this.getReport(`programs/${this.programID}/reports/hypertension_report`)\n    }\n}\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Service } from \"@/services/service\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { toDate } from \"@/utils/Strs\"\nimport { MultiStepPopupForm } from \"@/utils/PopupKeyboard\"\nimport { toastDanger } from \"@/utils/Alerts\"\nimport { modalController } from \"@ionic/vue\"\nimport { reactive } from \"vue\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\n\nexport enum DatePeriodInputType {\n    MULTI_FIELD_DATE = 'Multipage date fields',\n    CALENDAR_FIELD = 'Calendar',\n    SINGLE_DATE_INPUT_FIELD = 'Single page date'\n}\n\nexport enum HtsReportPreference {\n    PERIOD_INPUT_TYPE = 'hts_report_date_period_type'\n}\n\nexport const ReportPreferences = reactive({\n    datePeriodInputType: localStorage.getItem(HtsReportPreference.PERIOD_INPUT_TYPE) || DatePeriodInputType.MULTI_FIELD_DATE\n} as any)\n\nexport function DateSelectionPreference() {\n    MultiStepPopupForm([\n        {\n            id: 'date_field_type',\n            helpText: 'Date input preference',\n            type: FieldType.TT_SELECT,\n            defaultValue: () => ReportPreferences.datePeriodInputType,\n            options: () => {\n                return [\n                    { label: 'Calendar', value: DatePeriodInputType.CALENDAR_FIELD },\n                    { label: 'Single page date', value: DatePeriodInputType.SINGLE_DATE_INPUT_FIELD},\n                    { label: 'Multipage date fields', value: DatePeriodInputType.MULTI_FIELD_DATE },\n                ]\n            }\n        }\n    ],\n    (f: any) => {\n        ReportPreferences.datePeriodInputType = f.date_field_type.value\n        localStorage.setItem(HtsReportPreference.PERIOD_INPUT_TYPE, ReportPreferences.datePeriodInputType)\n        modalController.dismiss()\n    })\n}\n\nexport function DateSelection(params: any) {\n    MultiStepPopupForm([\n        ...generateDateFields({\n            id: 'start_date',\n            helpText: 'Start',\n            required: true,\n            minDate: () => params?.minDate || '',\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date \n        }),\n        ...generateDateFields({\n            id: 'end_date',\n            helpText: 'End',\n            required: true,\n            minDate: (_: any, c: any) => c.start_date,\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date\n        }),\n        {\n            id: 'alt_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_FULL_DATE,\n            validation: (v: Option) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (params.minDate && new Date(v.value) < new Date(params.minDate)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(params.minDate)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.value,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'alt_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_FULL_DATE,\n            defaultValue: (f: any) => f.start_date.value,\n            validation: (v: Option, f: any) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (f.start_date.value && new Date(v.value) < new Date(f.start_date.value)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(f.start_date.value)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.label,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'calendar_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_DATE_PICKER,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            validation: (v: Option) => StandardValidations.required(v),\n            config: {\n                minDate: () => params.minDate || null,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(date) || '-' },\n                        { label: 'End Date', value: toDate(f.end_date) || '-'}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        },\n        {\n            id: 'calendar_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_DATE_PICKER,\n            validation: (v: Option) => StandardValidations.required(v),\n            defaultValue: (f: any) => f.start_date.value,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            config: {\n                minDate: (f: any) => f.start_date.value,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(f.start_date) || '-' },\n                        { label: 'End Date', value: toDate(date)}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        }\n    ], \n    async (f: any, c: any) => {\n        console.log(c)\n        modalController.dismiss()\n        try {\n            const period = `${toDate(c.start_date)} to ${toDate(c.end_date)}`\n            params.onFinish(c.start_date, c.end_date, period)\n        } catch (e) {\n            toastDanger(\"An error has occurred\")\n        }\n    })\n}","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])"],"sourceRoot":""}