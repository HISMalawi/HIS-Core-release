{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/Dispensing.vue?1e6c","webpack:///./src/apps/OPD/services/dispensation_service.ts","webpack:///./src/apps/OPD/views/encounters/Dispensing.vue","webpack:///./src/apps/OPD/views/encounters/Dispensing.vue?2950","webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","skipSummary","cancelDestinationPath","cancelDestination","fields","DispensationService","AppEncounterService","constructor","patientID","providerID","super","_defineProperty","this","drugHistory","currentDrugOrder","getDrugHistory","getCurrentOrder","buildDispensations","orderId","quantity","date","saveDispensations","dispensations","postJson","getProgramID","void","res","DrugOrderService","getDrugOrderHistory","getDrugOrders","Promise","all","calcCompletePack","drug","units","drugOrderBarcodes","barcodes","sort","a","b","tabs","length","i","parseInt","smallestAvailableTab","completePack","defineComponent","mixins","EncounterMixinVue","data","dispensation","watch","patient","getID","loadCurrentDrugOrder","loadDrugHistory","getFields","deep","methods","item","other","order_id","value","buildMedicationHistory","dateA","Date","order","start_date","dateB","map","d","medication","name","HisDate","toStandardHisDisplayFormat","amount","buildOrderOptions","label","drug_id","calculateCompletePack","getPackSizesRows","drugId","availableStock","packs","getDrugPackSizes","packSize","parseFloat","amount_needed","isDoneDispensing","orders","o","every","Boolean","option","isOk","totalTabs","toString","amountNeeded","percentageGiven","alertConfirmation","id","helpText","type","FieldType","TT_DRUG_DISPENSER","onValueUpdate","async","l","gotoPatientDashboard","onValue","isBarcodeScanned","voided","voidOrder","isValidDispensation","dispensed","toastWarning","config","medicationHistory","toolbarInfo","getFullName","getGender","getBirthdate","hiddenFooterBtns","options","__exports__","Service","getSessionDate","getJson","pageSize","drugID","params","patientId","FlowState","dformat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","components","HisStandardForm","offlineID","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","$route","patient_id","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getAge","toUpperCase","usernameA","usernameB","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","mapStrToOptions","items","path","yesNoOptions","toYesNoOption","values","mapOptions","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","inArray","arr","expression","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","default","String","required","$emit","isCondition","ignored","undefined","prop","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-0d8a9648.c3f956a7.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields\n  }, null, 8, [\"cancelDestinationPath\", \"fields\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\n\nexport class DispensationService extends AppEncounterService {\n  drugHistory: Array<any>;\n  currentDrugOrder: Array<any>;\n\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 54, providerID)\n    this.drugHistory = []\n    this.currentDrugOrder = []\n  }\n\n  getDrugHistory() {\n    return this.drugHistory\n  }\n\n  getCurrentOrder() {\n    return this.currentDrugOrder\n  }\n\n  buildDispensations(orderId: number, quantity: number) {\n    return [{\n      'drug_order_id': orderId,\n      date: this.date,\n      quantity: quantity\n    }]\n  }\n\n  saveDispensations(dispensations: Array<any>) {\n    return AppEncounterService.postJson('/dispensations', { \n      dispensations, \n      'program_id': AppEncounterService.getProgramID()\n    })\n  }\n\n  async voidOrder(orderId: number) {\n    return AppEncounterService.void(`/dispensations/${orderId}`, {})\n  }\n\n  async loadDrugHistory() {\n    const res = await DrugOrderService.getDrugOrderHistory(this.patientID)\n    if (res) {\n      this.drugHistory = res\n    }\n  }\n\n  async loadCurrentDrugOrder() {\n    const res = await DrugOrderService.getDrugOrders(this.patientID)\n    if (res) {\n      this.currentDrugOrder = await Promise.all(res)        \n    }\n  }\n\n  calcCompletePack(drug: any, units: number) {\n     //sorting in an ascending order by tabs\n    const drugOrderBarcodes = drug.barcodes.sort(function (a: any, b: any) {\n      return a.tabs - b.tabs;\n    });\n    if (drugOrderBarcodes.length == 0 || units == 0.0) {\n      return units;\n    }\n    for (let i = 0; i <= drugOrderBarcodes.length - 1; i++) {\n      if (parseInt(drugOrderBarcodes[i].tabs) >= units) {\n        return drugOrderBarcodes[i].tabs;\n      }\n    }\n    const smallestAvailableTab = parseInt(drugOrderBarcodes[0].tabs)\n    let completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n    while (completePack < units) {\n      completePack += smallestAvailableTab\n    }\n    return completePack\n  }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, alertConfirmation } from \"@/utils/Alerts\"\nimport { DispensationService } from \"@/apps/OPD/services/dispensation_service\"\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport HisDate from \"@/utils/Date\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    dispensation: {} as any\n  }),\n  watch: {\n    patient: {\n      async handler(patient: any){\n        this.dispensation = new DispensationService(patient.getID(), this.providerID)\n        await this.dispensation.loadCurrentDrugOrder()\n        await this.dispensation.loadDrugHistory()\n        this.fields = this.getFields()\n      },\n      deep: true\n    }\n  },\n  methods: {\n    saveDispensations(item: Option) {\n      const dispensations = this.buildDispensations(item)\n      return this.dispensation.saveDispensations(dispensations)    \n    },\n    buildDispensations(item: Option) {\n      return this.dispensation.buildDispensations(\n        item.other.order_id, item.value\n      )\n    },\n    buildMedicationHistory() {\n      return this.dispensation.getDrugHistory()\n      .sort((a: any, b: any) => {\n        const dateA: any = new Date(a.order.start_date)\n        const dateB: any = new Date(b.order.start_date)\n        return dateB - dateA\n      })\n      .map((d: any) => ({\n        medication: d.drug.name,\n        date: HisDate.toStandardHisDisplayFormat(d.order.start_date),\n        amount: d.quantity\n      }))\n    },\n    buildOrderOptions() {\n      return this.dispensation.getCurrentOrder().map((d: any) => ({\n        label: d.drug.name,\n        value: d.quantity || 0,\n        other: {\n          'drug_id': d.drug.drug_id,\n          'order_id': d.order.order_id,\n          'amount_needed': this.calculateCompletePack(d),\n        }\n      }))\n    },\n    getPackSizesRows(drugId: number, availableStock: number) {\n      const packs = this.dispensation.getDrugPackSizes(drugId)\n      return packs.map((packSize: number) => {\n        const packs = availableStock > 0 ? (availableStock / packSize) : '-'\n        return [packSize, packs, 0, 0]\n      })\n    },\n    calculateCompletePack(order: any) {\n      const units = parseFloat(order.amount_needed) - (order.quantity || 0)\n      const completePack = this.dispensation.calcCompletePack(order, units)\n      return completePack < 0 ? 0 : completePack\n    },\n    isDoneDispensing(orders: Array<Option>) {\n      return orders.map(o => o.value != 0).every(Boolean)\n    },\n    async isValidDispensation(option: Option) {\n      let isOk = true\n      const totalTabs = parseInt(option.value.toString())\n      const amountNeeded = option.other['amount_needed']\n      const percentageGiven = (totalTabs / amountNeeded) * 100\n      if (percentageGiven > 110) {\n        isOk = await alertConfirmation('Are you sure you want to dispense over 110% of the prescribed pill count?')\n      }\n      if (percentageGiven < 100) {\n        isOk = await alertConfirmation('Are you sure you want to dispense less than 100% of the prescribe amount?')\n      }\n      return isOk\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: 'dispenses',\n          helpText: 'Dispensation',\n          type: FieldType.TT_DRUG_DISPENSER,\n          onValueUpdate: async(i: Option, l: Option[]) => {\n            if(i.value != -1 && this.isDoneDispensing(l)) {\n              return this.gotoPatientDashboard()\n            }\n            i.other['amount_needed'] = 0\n            await this.dispensation.loadCurrentDrugOrder()\n            return this.buildOrderOptions()\n          },\n          onValue: async (i: Option, isBarcodeScanned: boolean) => {\n            if (i.value  === -1) {\n              const voided = await this.dispensation.voidOrder(i.other.order_id)\n              return voided? true : false\n            }\n            if (!isBarcodeScanned) {\n              const isValidDispensation = await this.isValidDispensation(i)\n              if (!isValidDispensation) return false\n            }\n            const dispensed = await this.saveDispensations(i)\n            if (dispensed) return true\n            toastWarning('Unable to save dispensation')\n            return false\n          },\n          config: {\n            medicationHistory: this.buildMedicationHistory(),\n            toolbarInfo: [\n              { label: 'Name', value: this.patient.getFullName() },\n              { label: 'Gender', value: this.patient.getGender() },\n              { label: 'Date Of Birth', value: HisDate.toStandardHisDisplayFormat(\n                this.patient.getBirthdate()\n              )}\n            ],\n            hiddenFooterBtns: [ \n              'Clear',\n              'Finish'\n            ]\n          },\n          options: () => this.buildOrderOptions()\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Dispensing.vue?vue&type=template&id=1e367495&ts=true\"\nimport script from \"./Dispensing.vue?vue&type=script&lang=ts\"\nexport * from \"./Dispensing.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}