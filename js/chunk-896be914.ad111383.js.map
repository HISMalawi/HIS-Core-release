{"version":3,"sources":["webpack:///./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/views/GuardianRegistration.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","onOnIndex","$event","fieldComponent","skipSummary","activeField","fields","onFinishAction","onFinish","cancelDestinationPath","patientData","id","defineComponent","components","HisStandardForm","data","guardianData","fieldAction","form","redirectURL","currentAddressAttributes","homeAddressAttributes","watch","params","query","patient_id","patient","Patientservice","findByID","this","PersonFieldHelper","mapPersonData","person","edit_guardian","getFields","source","immediate","deep","methods","push","guardianSelection","guardianIndex","scanGuardian","givenNameField","familyNameField","genderField","searchResultField","concat","dobFields","homeRegionField","homeDistrictField","homeTAField","homeVillageField","currentRegionField","currentDistrictField","currentTAField","currentVillage","landmarkFields","cellPhoneField","relationsField","computedData","isEditMode","reg","PatientRegistrationService","setPersonID","updatePerson","PersonField","resolvePerson","Object","keys","forEach","i","date","relation","RelationsService","amendRelation","relationship_id","relations","other","relationship_type_id","isSameAsPatient","toastWarning","guardianID","isRegistrationMode","guardian","registerGuardian","getPersonID","createRelation","$router","name","$route","nextTask","isSearchMode","includes","canEdit","groups","defaultCondition","mandatoryCondition","birthdate","gender","HisDate","toStandardHisDisplayFormat","birth_date","given_name","family_name","toLowerCase","helpText","type","FieldType","TT_SELECT","condition","validation","v","Validation","required","options","async","relationship","RelationshipService","getRelationships","isEmpty","map","r","label","b_is_to_a","value","person_id","details","delayPromise","action","infoActionSheet","slot","color","back","config","footerBtns","onClick","getDefaultVal","fieldID","e","TT_TABLE_VIEWER","f","select_guardian","editButton","attribute","rows","cell_phone_number","home_district","home_traditional_authority","home_village","current_district","current_traditional_authority","landmark","overrideDefaultFooterBtns","nextBtn","popVoidReason","voidRelation","reason","hiddenFooterBtns","getGivenNameField","defaultValue","getFamilyNameField","getGenderField","dob","getDobConfig","generateDateFields","home","getHomeRegionField","district","getHomeDistrictField","ta","getHomeTaField","home_region","match","village","getHomeVillageField","region","getCurrentRegionField","currentDistrict","getCurrentDistrictField","currentTA","getCurrentTAfield","current_region","getCurrentVillageField","cellPhone","getCellNumberField","landmarks","getLandmarkFields","proxyID","TT_RELATION_SELECTION","val","onload","context","cdata","relationships","getRelations","description","TT_BARCODE","requireNext","onValue","searchResults","findByNpid","TT_PERSON_RESULT_VIEW","dynamicHelpText","appearInSummary","patients","search","item","getPersonAttributeOptions","state","disabled","default","_","results","__exports__","PersonAttributeService","Service","constructor","attributes","postJson","personId","personID","personAttributes","createPerson","createPersonAttributes","createPatient","printPatient","PersonService","update","create","ProgramService","index","PatientPrintoutService","printNidLbl","patientID","relationID","void","curRelationID","newRelationTypeID","getJson","patientA","patientB","relationType","callback","size","modal","optionsActionSheet","role","selection"],"mappings":"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","file":"js/chunk-896be914.ad111383.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    skipSummary: true,\n    activeField: _ctx.fieldComponent,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    cancelDestinationPath: `/patient/dashboard/${_ctx.patientData.id}`\n  }, null, 8, [\"activeField\", \"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { RelationsService } from \"@/services/relations_service\"\nimport { isEmpty } from \"lodash\"\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { RelationshipService } from \"@/services/relationship_service\";\nimport PersonFieldHelper from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport { infoActionSheet } from \"@/utils/ActionSheets\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    patientData: {} as any,\n    guardianData: {} as any,\n    fieldAction: '' as 'Scan' | 'Search' | 'Registration' | 'edit',\n    fieldComponent: '' as string,\n    fields: [] as Array<Field>,\n    form: {} as Record<string, Option> | Record<string, null>,\n    redirectURL: '' as string,\n    activeField: '' as string,\n    currentAddressAttributes: [\n        'current_region',\n        'current_district',\n        'current_village',\n        'current_traditional_authority'\n    ] as string[],\n    homeAddressAttributes: [\n        'home_region',\n        'home_district',\n        'home_traditional_authority',\n        'home_village'\n    ] as string[]\n  }),\n  watch: {\n    '$route': {\n        async handler({params, query}: any) {\n            if (params.patient_id) {\n                const patient = await Patientservice.findByID(params.patient_id)\n                if (patient) {\n                    this.patientData = PersonFieldHelper.mapPersonData(patient.person)\n                    if (query.edit_guardian) {\n                        this.fieldAction = 'edit'\n                    }\n                    this.fields = this.getFields()\n                }\n            }\n            if(query.source) this.redirectURL = query.source\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    getFields(): Array<Field> {\n        let fields: Array<Field> = []\n        fields.push(this.guardianSelection())\n        fields.push(this.guardianIndex())\n        fields.push(this.scanGuardian())\n        fields.push(this.givenNameField())\n        fields.push(this.familyNameField())\n        fields.push(this.genderField())\n        fields.push(this.searchResultField())\n        fields = fields.concat(this.dobFields())\n        fields.push(this.homeRegionField())\n        fields.push(this.homeDistrictField())\n        fields.push(this.homeTAField())\n        fields.push(this.homeVillageField())\n        fields.push(this.currentRegionField())\n        fields.push(this.currentDistrictField())\n        fields.push(this.currentTAField())\n        fields.push(this.currentVillage())\n        fields = fields.concat(this.landmarkFields())\n        fields.push(this.cellPhoneField())\n        fields.push(this.relationsField())\n        return fields\n    },\n    async onFinish(form: any, computedData: any) {\n        if (this.isEditMode()) {\n            if (this.activeField != 'relations') {\n                const reg = new PatientRegistrationService()\n                reg.setPersonID(this.guardianData.id)\n                await reg.updatePerson(PersonField.resolvePerson(computedData))\n                // Patch updated values\n                Object.keys(computedData).forEach((i: string) => {\n                    if (i in this.guardianData) {\n                        this.guardianData[i] = computedData[i]?.date || computedData[i].person\n                    }\n                })\n            } else {\n                if (this.guardianData?.relation) {\n                    const relation = await RelationsService.amendRelation(\n                        this.patientData.id,\n                        this.guardianData.id,\n                        this.guardianData.relation.relationship_id,\n                        form.relations.other.relationship_type_id\n                    )\n                    if (relation) {\n                        this.guardianData.relation = relation\n                    }\n                }\n            }\n            this.fieldComponent = 'guardian_index'\n        } else {\n            if(this.isSameAsPatient(computedData)) {\n                toastWarning(\"Guardian cannot be the same patient\")\n            } else {\n                let guardianID = -1\n                if (this.isRegistrationMode()) {\n                    const guardian: any = new PatientRegistrationService()\n                    await guardian.registerGuardian(PersonField.resolvePerson(computedData))\n                    guardianID = guardian.getPersonID()\n                } else {\n                    guardianID = this.guardianData.id\n                }\n                await RelationsService.createRelation(\n                    this.patientData.id, guardianID, form.relations.other.relationship_type_id\n                )\n                if(this.redirectURL) this.$router.push({name: this.redirectURL})\n                else if (this.$route.query.edit_guardian) this.fieldComponent = 'select_guardian'\n                else await nextTask(this.patientData.id, this.$router, this.$route)\n            }   \n        }\n    },\n    isEditMode() {\n        return this.fieldAction === 'edit'\n    },\n    isSearchMode() {\n        return ['Search', 'Registration'].includes(this.fieldAction)\n    },\n    isRegistrationMode() {\n        return this.fieldAction === 'Registration'\n    },\n    canEdit(groups: Array<string|number>, defaultCondition=true, mandatoryCondition=true) {\n        if (this.isEditMode()) {\n            return groups.includes(this.activeField) && mandatoryCondition\n        }\n        return defaultCondition\n    },\n    isSameAsPatient(guardian: any) {\n        let birthdate = ''\n        let name = ''\n        let gender = ''\n\n        if(this.isRegistrationMode()) {\n            birthdate = HisDate.toStandardHisDisplayFormat(guardian.birth_date.date)\n            name = guardian.given_name.person && guardian.family_name.person\n            gender = guardian.gender.person\n        } else {\n            birthdate = this.guardianData.birth_date\n            name = this.guardianData.name\n            gender = this.guardianData.gender  \n        }\n\n        return (name.toLowerCase() === this.patientData.name.toLowerCase()) \n            && (birthdate === this.patientData.birth_date)\n            && (gender === this.patientData.gender)\n    },\n    guardianSelection(): Field {\n        return {\n            id: 'select_guardian',\n            helpText: 'Select guardian to edit/view',\n            type: FieldType.TT_SELECT,\n            condition: () => this.isEditMode(),\n            validation: (v: Option) => Validation.required(v),\n            options: async () => {\n                const relationship = await RelationshipService.getRelationships(this.patientData.id)\n                if (!isEmpty(relationship)) {\n                    return relationship.map((r: any) => {\n                        const guardian = PersonField.mapPersonData(r.relation)\n                        return {\n                            label: `${guardian.name} (${r.type.b_is_to_a})`, \n                            value: r.relation.person_id, \n                            other: {\n                                relations: r, \n                                details: guardian \n                            }\n                        }\n                    })\n                } else {\n                    await delayPromise(450)\n                    const action = await infoActionSheet(\n                        'Patient has no guardians', '',\n                        'Select option to proceed',\n                        [\n                            {\n                                name: 'Cancel',\n                                slot: 'start',\n                                color: 'danger'\n                            },\n                            {\n                                name: 'Register new',\n                                slot: 'start',\n                                color: 'success'\n                            }\n                        ]\n                    )\n                    if (action === 'Register new') {\n                        this.guardianData = {}\n                        this.fieldAction = 'Registration'\n                        this.fieldComponent = 'scan'\n                    } else {\n                        this.$router.back()\n                    }\n                }\n                return []\n            },\n            config: {\n                footerBtns: [\n                    {\n                        name: 'New Guardian',\n                        slot: 'end',\n                        color: 'primary',\n                        onClick: () => {\n                            this.guardianData = {}\n                            this.fieldAction = 'Registration'\n                            this.fieldComponent = 'scan'\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    getDefaultVal(fieldID: string | number) {\n        try {\n            return this.guardianData[fieldID]\n        } catch (e) {\n            return ''\n        }\n    },\n    guardianIndex(): Field {\n        return {\n            id: 'guardian_index',\n            helpText: 'Guardian details',\n            type: FieldType.TT_TABLE_VIEWER,\n            condition: (f: any) => f.select_guardian.value, \n            options: (f: any) => {\n                if (this.guardianData && this.guardianData.id != f.select_guardian.value) {\n                    this.guardianData = {\n                        ...f.select_guardian.other.details,\n                        relation: f.select_guardian.other.relations\n                    }\n                }\n                const editButton = (attribute: string) => ({\n                    name: 'Edit',\n                    type: 'button',\n                    action: () => {\n                        this.activeField = attribute\n                        this.fieldComponent = this.activeField\n                    }\n                })\n                const rows = [\n                    ['Given Name', this.guardianData.given_name, editButton('given_name')],\n                    ['Family Name', this.guardianData.family_name, editButton('family_name')],\n                    ['Gender', this.guardianData.gender, editButton('gender')],\n                    ['Birthdate', HisDate.toStandardHisDisplayFormat(this.guardianData.birth_date), editButton('year_birth_date')],\n                    ['Cell Phone Number', this.guardianData.cell_phone_number, editButton('cell_phone_number')],\n                    ['Home District', this.guardianData.home_district, editButton('home_region')],\n                    ['Home TA', this.guardianData.home_traditional_authority, editButton('home_region')],\n                    ['Home Village', this.guardianData.home_village,  editButton('home_region')],\n                    ['Current district', this.guardianData.current_district, editButton('current_region')],\n                    ['Current T/A', this.guardianData.current_traditional_authority, editButton('current_region')],\n                    ['Landmark', this.guardianData.landmark, editButton('default_landmarks')],\n                    ['Relation', this.guardianData.relation.type.b_is_to_a, editButton('relations')]\n                ]\n                return [{\n                    label: '', \n                    value: '',\n                    other: {\n                        rows\n                    }\n                }]\n            },\n            config : {\n                overrideDefaultFooterBtns: {\n                    nextBtn: {\n                        name: 'Finish',\n                        slot: 'end',\n                        color: 'success',\n                        onClick: () => this.fieldComponent = 'select_guardian'\n                    }\n                },\n                footerBtns: [\n                    {\n                        name: 'Void Relation',\n                        slot: 'start',\n                        color: 'danger',\n                        onClick: async () => {\n                            popVoidReason(async (reason: string) => {\n                                await RelationsService.voidRelation(\n                                    this.patientData.id, \n                                    this.guardianData.relation.relationship_id,\n                                    reason\n                                )\n                                this.fieldComponent = 'select_guardian'\n                            })\n                        }\n                    }\n                ],\n                hiddenFooterBtns: ['Clear', 'Back']\n            }\n        }\n    },\n    givenNameField(): Field {\n        const name: Field = PersonField.getGivenNameField()\n        name.helpText = 'Guardian First name'\n        name.defaultValue = () => this.getDefaultVal(name.id)\n        name.condition = () => this.canEdit([name.id], this.isSearchMode())\n        return name\n    },\n    familyNameField(): Field {\n        const name: Field = PersonField.getFamilyNameField()\n        name.helpText = 'Guardian Last name'\n        name.defaultValue = () => this.getDefaultVal(name.id)\n        name.condition = () => this.canEdit([name.id], this.isSearchMode())\n        return name\n    },\n    genderField(): Field {\n        const gender: Field = PersonField.getGenderField()\n        gender.defaultValue = () => this.getDefaultVal(gender.id)\n        gender.condition = () => this.canEdit([gender.id], this.isSearchMode())\n        return gender\n    },\n    dobFields(): Array<Field> {\n        const dob =PersonField.getDobConfig()\n        dob.defaultValue = () => this.getDefaultVal('birth_date')\n        dob.condition = () => this.canEdit([\n            'year_birth_date', \n            'month_birth_date', \n            'day_birth_date'\n            ], \n            this.isRegistrationMode()\n        ) \n        return generateDateFields(dob)\n    },\n    homeRegionField(): Field {\n        const home: Field = PersonField.getHomeRegionField()\n        home.condition = () => this.canEdit(this.homeAddressAttributes, this.isRegistrationMode())\n        return home\n    },\n    homeDistrictField(): Field {\n        const district: Field = PersonField.getHomeDistrictField()\n        district.condition = () => this.canEdit(this.homeAddressAttributes, this.isRegistrationMode())\n        return district\n    },\n    homeTAField(): Field {\n        const ta: Field =  PersonField.getHomeTaField()\n        ta.condition = (form: any) => this.canEdit(\n            this.homeAddressAttributes, \n            this.isRegistrationMode() && !form.home_region.label.match(/foreign/i),\n            !form.home_region.label.match(/foreign/i)\n        )\n        return ta\n    },\n    homeVillageField(): Field {\n        const village: Field = PersonField.getHomeVillageField()\n        village.condition = (form: any) => this.canEdit(\n            this.homeAddressAttributes, \n            this.isRegistrationMode() && !form.home_region.label.match(/foreign/i),\n            !form.home_region.label.match(/foreign/i)\n        )\n        return village\n    },\n    currentRegionField(): Field {\n        const region: Field = PersonField.getCurrentRegionField()\n        region.condition = () => this.canEdit(this.currentAddressAttributes, this.isRegistrationMode())\n        return region\n    },\n    currentDistrictField(): Field {\n        const currentDistrict: Field = PersonField.getCurrentDistrictField()\n        currentDistrict.condition = () => this.canEdit(this.currentAddressAttributes, this.isRegistrationMode())\n        return currentDistrict\n    },\n    currentTAField(): Field {\n        const currentTA: Field = PersonField.getCurrentTAfield()\n        currentTA.condition = (form: any) => this.canEdit(\n            this.currentAddressAttributes, \n            this.isRegistrationMode() && !form.current_region.label.match(/foreign/i),\n            !form.current_region.label.match(/foreign/i)\n        )\n        return currentTA\n    },\n    currentVillage(): Field {\n        const currentVillage: Field = PersonField.getCurrentVillageField()\n        currentVillage.condition = (form: any) => this.canEdit(\n            this.currentAddressAttributes, \n            this.isRegistrationMode() && !form.current_region.label.match(/foreign/i),\n            !form.current_region.label.match(/foreign/i)\n        )\n        return currentVillage\n    },\n    cellPhoneField(): Field {\n        const cellPhone: Field = PersonField.getCellNumberField()\n        cellPhone.condition = () => this.canEdit([cellPhone.id], this.isRegistrationMode())\n        return cellPhone \n    },\n    landmarkFields(): Field[] {\n        const landmarks: Field[] = PersonField.getLandmarkFields()\n        const id = landmarks[0].proxyID || landmarks[0].id\n        landmarks[0].defaultValue =  () => this.getDefaultVal(id)\n        landmarks[0].condition = () => this.canEdit([id], this.isRegistrationMode())\n        return landmarks\n    },\n    relationsField(): Field {\n        return {\n            id: 'relations',\n            helpText: 'Select relationship type',\n            type: FieldType.TT_RELATION_SELECTION,\n            defaultValue: () => this.getDefaultVal('relations'),\n            validation: (val: Option) => Validation.required(val),\n            condition: () => this.canEdit(['relations']),\n            onload: (context: any) => {\n                context.patient = this.patientData\n                if (this.isRegistrationMode()) {\n                    const person = PersonField.resolvePerson(context.cdata)\n                    context.guardian = {\n                        'name': `${person.given_name} ${person.family_name}`,\n                        'birth_date': HisDate.toStandardHisDisplayFormat(person.birthdate),\n                        'home_address': `${person.home_district} ${person.home_traditional_authority}`\n                    }\n                } else {\n                    context.guardian = this.guardianData\n                }\n            },\n            options: async() => {\n                const relationships = await RelationsService.getRelations()\n                return relationships.map((r: any) => ({\n                    label: r.b_is_to_a, \n                    value: r.description, \n                    other: r\n                }))\n            },\n            config: {\n                hiddenFooterBtns: [\n                  'Clear'\n                ]\n            }\n        }\n    },\n    scanGuardian(): Field {\n        return {\n            id: 'scan',\n            helpText: 'Scan or Register Guardian',\n            type: FieldType.TT_BARCODE,\n            requireNext: false,\n            condition: () => !this.isEditMode(),\n            onValue: async (id: string) => {\n                const searchResults = await Patientservice.findByNpid(id)\n                if (!isEmpty(searchResults)) {\n                    this.guardianData = PersonFieldHelper.mapPersonData(searchResults[0].person)\n                    this.fieldComponent = 'relations'\n                    this.fieldAction = 'Scan'\n                }\n                return false\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns : [\n                    {\n                        name: 'Find or Register Guardian',\n                        color: 'success',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Search'\n                            this.fieldComponent = 'given_name'\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    searchResultField(): Field {\n        return {\n            id: 'results',\n            helpText: 'Search results',\n            type: FieldType.TT_PERSON_RESULT_VIEW,\n            dynamicHelpText: (f: any) => {\n                return `Search results for \n                \"${f.given_name.value} ${f.family_name.value} | ${f.gender.label}\"\n                `\n            },\n            appearInSummary: () => false,\n            condition: () => this.isSearchMode(),\n            validation: (val: Option) => Validation.required(val),\n            options: async (form: any) => {\n                const patients = await Patientservice.search({\n                    'given_name': form.given_name.value, \n                    'family_name': form.family_name.value, \n                    'gender': form.gender.value, \n                });\n                return patients.map((item: any) => PersonField.getPersonAttributeOptions(item))\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Edit Search',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Search'\n                            this.fieldComponent = 'given_name'\n                        }\n                    },\n                    {\n                        name: 'New Guardian',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Registration'\n                            this.fieldComponent = 'year_birth_date'\n                        }\n                    },\n                    {\n                        name: 'Continue Guardian',\n                        color: 'success',\n                        slot: 'end',\n                        state: {\n                            disabled: {\n                                default: () => true,\n                                onValue(_: any,form: any) {\n                                    return isEmpty(form.results)\n                                }\n                            }\n                        },\n                        onClick: (form: any) => {\n                            this.guardianData = PersonFieldHelper.mapPersonData(\n                                form.results.other.person.person\n                            )\n                            this.fieldComponent = 'relations'\n                            this.fieldAction = 'Search'\n                        }\n                    }\n                ]\n            }\n        }\n    }\n  }\n})\n","import { render } from \"./GuardianRegistration.vue?vue&type=template&id=0334418a&ts=true\"\nimport script from \"./GuardianRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./GuardianRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { optionsActionSheet } from '@/utils/ActionSheets'\n\nexport default async function popVoidReason(callback: Function, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n"],"sourceRoot":""}