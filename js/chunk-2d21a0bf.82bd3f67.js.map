{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/CxCa/views/encounters/CxCaReception.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","ReceptionService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","reception","watch","patient","this","getFields","deep","methods","formData","encounter","createEncounter","toastWarning","receptionObs","buildValueCoded","value","saveObs","toastSuccess","nextTask","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","mapOptions","__exports__"],"mappings":"uIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,MAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,OAAQV,EAAKU,OACbC,eAAgBX,EAAKY,SACrBC,aAAa,EACbC,sBAAuBd,EAAKe,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,0B,gECRrC,MAAOC,UAAyBC,OAClCC,YAAYC,EAAmBC,GAC3BC,MAAMF,EAAW,IAAKC,I,gBCKfE,+BAAgB,CAC7BC,OAAQ,CAACC,QACTC,WAAY,CAAEC,wBACdC,KAAM,KAAM,CACVC,UAAW,KAEbC,MAAO,CACLC,QAAS,CACP,gBACEC,KAAKH,UAAY,IAAIZ,EACnBe,KAAKZ,UACLY,KAAKX,YAEPW,KAAKrB,OAASqB,KAAKC,aAErBC,MAAM,IAGVC,QAAS,CACP,eAAeC,GACb,MAAMC,QAAkBL,KAAKH,UAAUS,kBAEvC,IAAKD,EAAW,OAAOE,eAAa,8BACpC,MAAMX,EAAOQ,EAAS,oBAChBI,QAAqBR,KAAKH,UAAUY,gBAAgB,mBAAoBb,EAAKc,aAEjEV,KAAKH,UAAUc,QAAQH,GACzCI,eAAa,uCACbZ,KAAKa,YAGPZ,YACE,MAAO,CACL,CACEa,GAAI,mBACJC,SAAU,mBACVC,KAAMC,OAAUC,UAChBC,WAAaC,GAAaC,OAAWC,SAASF,GAC9CG,QAAS,IAAMvB,KAAKwB,WAAW,CAC7B,oBAAoB,sBAAsB,+CAC1C,uBAAuB,gCAAgC,mB,qBC5CnE,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASzD,KAErD","file":"js/chunk-2d21a0bf.82bd3f67.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ReceptionService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 184, providerID) //TODO: Use encounter type reference name'\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport {ReceptionService} from \"@/apps/CxCa/services/CxCaReceptionService\"\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    reception: {} as any,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.reception = new ReceptionService(\n          this.patientID,\n          this.providerID\n        );\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      const encounter = await this.reception.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const data = formData['reason_for_visit'];\n      const receptionObs = await this.reception.buildValueCoded('Reason for visit', data.value);\n\n      const obs = await this.reception.saveObs(receptionObs)\n      toastSuccess(\"Observations and encounter created!\");\n      this.nextTask();\n    },\n    \n    getFields(): any {\n      return [\n        {\n          id: \"reason_for_visit\",\n          helpText: \"Reason for visit\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.mapOptions([\n            \"Initial screening\",\"Postponed treatment\",\"One year subsequent check-up after treatment\",\n            \"Subsequent screening\",\"Problem visit after treatment\",\"Referral\"\n          ])\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaReception.vue?vue&type=template&id=c242c12a&ts=true\"\nimport script from \"./CxCaReception.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaReception.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}