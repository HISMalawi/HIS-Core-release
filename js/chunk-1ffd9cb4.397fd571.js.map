{"version":3,"sources":["webpack:///./src/apps/ART/views/reports/ReportMixin.vue","webpack:///./src/apps/ART/views/reports/ReportMixin.vue?5c96","webpack:///./src/apps/ART/views/ARTStock/AuditTrail.vue?8514","webpack:///./src/utils/PopupKeyboard.ts","webpack:///./src/apps/ART/views/ARTStock/AuditTrail.vue","webpack:///./src/apps/ART/views/ARTStock/AuditTrail.vue?7557","webpack:///./src/apps/ART/services/reports/art_report_service.ts","webpack:///./src/apps/ART/services/reports/stock_report_service.ts"],"names":["defineComponent","data","fields","report","reportReady","period","startDate","endDate","customFileName","drillDownCache","methods","formatGender","gender","toGenderString","toDate","date","HisDate","toStandardHisDisplayFormat","sortByArvNumber","attr","sort","a","b","this","getArvInt","e","console","error","arv","prfx","art","arvNumStr","split","arvNumInt","parseInt","tdARV","params","table","td","sortValue","confirmPatient","patient","$router","push","title","columns","asyncRows","canExport","modal","modalController","create","component","DrilldownTable","cssClass","componentProps","showFilters","rowsPerPage","paginated","showReportStamp","footerColor","onFinish","dismiss","present","rows","rowParser","getDefaultDrillDownTable","thTxt","async","ARV_NUM_INDEX","t","tableRows","map","id","index","isArray","defaultRow","num","key","oldIndex","rest","Patientservice","findByID","row","getArvNumber","getGender","tdDate","getBirthdate","toString","tdBtn","path","Promise","all","runTableDrill","drilldownData","drill","values","length","tdLink","getQuaterOptions","quarters","ArtReportService","getReportQuarters","q","label","name","value","start","other","getDateDurationFields","useQuarter","setCustomQuarterPeriod","maxQuarter","maxDate","Service","getSessionDate","minDate","helpText","type","FieldType","TT_SELECT","condition","validation","val","Validation","required","options","items","generateDateFields","f","quarter","estimation","allowUnknown","computeValue","unload","d","s","c","end_date","_","start_date","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_openBlock","_createBlock","customBtns","size","slot","color","visible","onClick","setReport","MultiStepPopupForm","onCancel","TouchScreenForm","backdropDismiss","skipSummary","disableAutoModalDismiss","cancelAction","mixins","ReportMixin","components","ReportTemplate","mounted","loadingController","message","StockReportService","setStartDate","setEndDate","getDateIntervalPeriod","loadTrail","then","stock","forEach","product_code","drug_name","transaction_date","transaction_type","tdNum","amount_committed_to_stock","username","transaction_reason","catch","toastDanger","constructor","super","programID","getProgramID","setQuarter","getReport","url","getJson","buildRequest","config","payload","year","daysInMonth","m","dayjs","startMonth","endMonth","qtr","end","qtrBounds","getQuarterBounds","getFullYear","Date","qtrName","maxQuarters","qtrs","currDate","currYear","curYr","getMonth","getDate","currentQtr","getQtrByDate","i","buildQtrObj","paginate","getStockReport","groupStock","pharmacyData","drugId","pack_size","current_quantity","parseFloat","Object","drug","currentQuantity","Math","trunc","expiryDate","expiry_dates","drugName","quantityIsTabs"],"mappings":"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","file":"js/chunk-1ffd9cb4.397fd571.js","sourcesContent":["\nimport { Service } from \"@/services/service\"\nimport { defineComponent } from 'vue'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { modalController } from \"@ionic/vue\";\nimport DrilldownTable from \"@/apps/ART/views/reports/BasicReportTemplate.vue\"\nimport { ArtReportService } from \"@/apps/ART/services/reports/art_report_service\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { isArray } from \"lodash\"\nimport { toGenderString } from \"@/utils/Strs\"\n\nexport default defineComponent({\n    data: () => ({\n        fields: [] as Array<Field>,\n        report: {} as any,\n        reportReady: false as boolean,\n        period: '' as string,\n        startDate: '' as string,\n        endDate: '' as string,\n        customFileName: '' as string,\n        drillDownCache: {} as Record<number, Array<any>>\n    }),\n    methods: {\n        formatGender(gender: string) {\n            return toGenderString(gender)\n        },\n        toDate(date: string) {\n            return HisDate.toStandardHisDisplayFormat(date)\n        },\n        sortByArvNumber(data: Array<any>, attr='arv_number') {\n            try {\n                return data.sort((a: any, b: any) => this.getArvInt(a[attr]) > this.getArvInt(b[attr]) ? 1 : -1)\n            } catch(e) {\n                console.error(e)\n                return data\n            }\n        },\n        getArvInt(arv: string) {\n            if (typeof arv === 'string') {\n                const [prfx, art, arvNumStr] = arv.split('-')\n                const arvNumInt = parseInt(arvNumStr)\n                return typeof arvNumInt === 'number' ? arvNumInt : 0 \n            }\n            return 0\n        },\n        tdARV(arv: string, params={}) {\n            return table.td(arv, { sortValue: this.getArvInt(arv), ...params})\n        },\n        confirmPatient(patient: number) {\n            return this.$router.push(`/patients/confirm?person_id=${patient}`)\n        },\n        async drilldownAsyncRows(title: string, columns: Array<any>, asyncRows: Function, canExport=true) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    asyncRows,\n                    canExport,\n                    showFilters: true,\n                    rowsPerPage: 50,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        async drilldownData(title: string, columns: Array<any>, rows: Array<any>, rowParser: any) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    rows,\n                    rowParser,\n                    rowsPerPage: 50,\n                    showFilters: true,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        getDefaultDrillDownTable() {\n            const columns = [\n                [\n                    table.thTxt('ARV number'), \n                    table.thTxt('Gender'),\n                    table.thTxt('Birth Date'), \n                    table.thTxt('Actions')\n                ]\n            ]\n            const rowParser = async (tableRows: Array<any[]>) => {\n                let ARV_NUM_INDEX = 0\n                const t = tableRows.map(async (defaultRow: Array<any>) => {\n                    let id: any = null\n                    let index: null | number = null\n                    if (isArray(defaultRow)) {\n                        const [num, key ] = defaultRow\n                        index = num\n                        if (key in this.drillDownCache) {\n                            const [oldIndex, ...rest] = this.drillDownCache[key]\n                            return [index, ...rest] // Assign new index number and maintain patient record\n                        }\n                    } else {\n                        id = defaultRow\n                        if (id in this.drillDownCache) {\n                            return this.drillDownCache[id]\n                        }\n                    }\n    \n                    const data = await Patientservice.findByID(id)\n                    const patient = new Patientservice(data)\n                    const row = []\n                    if (index) {\n                        ARV_NUM_INDEX = 1\n                        row.push(index)\n                    } \n                    row.push(this.tdARV(patient.getArvNumber()))\n                    row.push(table.td(this.formatGender(patient.getGender())))\n                    row.push(table.tdDate(patient.getBirthdate().toString()))\n                    row.push(table.tdBtn('Show', async () => {\n                        await modalController.dismiss({})\n                        this.$router.push({ path: `/patient/dashboard/${id}`})\n                    }))\n                    this.drillDownCache[id] = row\n                    return row\n                })\n                const rows = await Promise.all(t)\n                return rows.sort((a: any, b: any) => \n                        a[ARV_NUM_INDEX].sortValue > b[ARV_NUM_INDEX].sortValue \n                        ? 1 : -1)\n            }\n            return { rowParser, columns }\n        },\n        runTableDrill(data: any, title='Drilldown patients') {\n            const { columns, rowParser } = this.getDefaultDrillDownTable()\n            this.drilldownData(title, columns, data, rowParser)\n        },\n        drill(values: Array<number>, title='Drill table') {\n            if (values && values.length > 0) {\n                return table.tdLink(\n                    values.length, \n                    () => this.runTableDrill(values, title)\n                )\n            }\n            return table.td(0)\n        },\n        getQuaterOptions() {\n            const quarters = ArtReportService.getReportQuarters()\n            return quarters.map((q: any) => ({\n                label: q.name, value: q.start, other: q\n            }))\n        },\n        getDateDurationFields(\n            useQuarter=false, \n            setCustomQuarterPeriod=false, \n            maxQuarter=5, \n            maxDate=Service.getSessionDate() as string | null,\n        ): Array<Field> {\n            const minDate = '2000-01-01'\n            return [\n                {\n                    id: 'quarter',\n                    helpText: 'Select Quarter',\n                    type: FieldType.TT_SELECT,\n                    condition: () => useQuarter,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => {\n                        const quarters = ArtReportService.getReportQuarters(maxQuarter)\n                        let items: Array<Option> = quarters.map((q: any) => ({\n                            label: q.name,\n                            value: q.start,\n                            other: q\n                        }))\n                        if (setCustomQuarterPeriod) {\n                            items = [\n                                {\n                                    label: 'Set custom period',\n                                    value: 'custom_period',\n                                    other: {}\n                                },\n                                ...items\n                            ]\n                        }\n                        return items\n                    }\n                },\n                ...generateDateFields({\n                    id: 'start_date',\n                    helpText: 'Start',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    minDate: () => minDate,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date \n                }),\n                ...generateDateFields({\n                    id: 'end_date',\n                    helpText: 'End',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    unload: (d: any, s: any, f: any, c: any) => {\n                        if (s === 'next') {\n                            this.endDate = c.end_date\n                        }\n                    },\n                    minDate: (_: any, c: any) => c.start_date,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date\n                })\n            ]\n        }\n    }\n})\n","import script from \"./ReportMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./ReportMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_report_template = _resolveComponent(\"report-template\")!\n\n  return (_openBlock(), _createBlock(_component_report_template, {\n    title: _ctx.title,\n    rows: _ctx.rows,\n    paginated: true,\n    customBtns: [\n            {\n                name: 'DATE',\n                size: 'large',\n                slot: 'end',\n                color: 'warning',\n                visible: true,\n                onClick: _ctx.setReport\n            }\n        ],\n    columns: _ctx.columns\n  }, null, 8, [\"title\", \"rows\", \"customBtns\", \"columns\"]))\n}","import { Field } from \"@/components/Forms/FieldInterface\";\nimport { modalController } from \"@ionic/vue\";\nimport TouchField from \"@/components/Forms/SIngleTouchField.vue\"\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\n\nexport async function MultiStepPopupForm(fields: Field[], onFinish: Function, onCancel: Function | null =null) {\n    (await modalController.create({\n        component: TouchScreenForm,\n        backdropDismiss: false,\n        cssClass: \"full-modal\",\n        componentProps: {\n            onFinish,\n            fields: fields,\n            skipSummary: true,\n            disableAutoModalDismiss: true,\n            cancelAction: () => {\n                if (typeof onCancel === 'function') { \n                    onCancel()\n                }\n                modalController.dismiss()\n            } \n        }\n    })).present()\n}\n\nexport default async function PopupKeyboard(field: Field, onFinish: any) {\n    (await modalController.create({\n        component: TouchField,\n        backdropDismiss: false,\n        cssClass: \"full-modal\",\n        componentProps: {\n            dismissType: 'modal',\n            currentField: field,\n            onFinish\n        }\n    })).present()\n}\n","\nimport { defineComponent } from 'vue'\nimport { StockReportService } from \"@/apps/ART/services/reports/stock_report_service\"\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport ReportTemplate from \"@/apps/ART/views/reports/BasicReportTemplate.vue\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { MultiStepPopupForm } from \"@/utils/PopupKeyboard\"\nimport { toastDanger } from '@/utils/Alerts'\nimport { loadingController, modalController } from '@ionic/core'\n\nexport default defineComponent({\n    mixins: [ReportMixin],\n    components: { ReportTemplate },\n    data: () => ({\n        title: 'Audit trail',\n        rows: [] as Array<any>,\n        columns: [\n            [\n                table.thTxt('Product Code'),\n                table.thTxt('Medication'), \n                table.thTxt('Transaction date'), \n                table.thTxt('Transaction type'),\n                table.thTxt('Quantity'),\n                table.thTxt('Username'),\n                table.thTxt('reason')\n            ]\n        ]\n    }),\n    mounted() {\n        this.setReport()\n    },\n    methods: {\n        setReport() {\n            this.rows = []\n            MultiStepPopupForm(this.getDateDurationFields(),\n            async (_: any, c: any) => {\n                await modalController.dismiss();\n                (await loadingController.create({\n                    message: 'Please wait',\n                    backdropDismiss: false\n                })).present()\n                this.report = new StockReportService()\n                this.report.setStartDate(c.start_date)\n                this.report.setEndDate(c.end_date)\n                this.title = `Audit trail ${this.report.getDateIntervalPeriod()}`\n                this.report.loadTrail()\n                    .then((stock: any) => {\n                        stock.forEach((s: any) => {\n                            this.rows.push([\n                                table.td(s.product_code || ''),\n                                table.td(s.drug_name),\n                                table.tdDate(s.transaction_date),\n                                table.td(s.transaction_type),\n                                table.tdNum(s.amount_committed_to_stock),\n                                table.td(s.username),\n                                table.td(s.transaction_reason),\n                            ])\n                        })\n                        loadingController.dismiss()\n                    }).catch((e: any) => {\n                        loadingController.dismiss()\n                        toastDanger(e)\n                    })\n            })\n        }\n    }\n})\n","import { render } from \"./AuditTrail.vue?vue&type=template&id=037dea81&ts=true\"\nimport script from \"./AuditTrail.vue?vue&type=script&lang=ts\"\nexport * from \"./AuditTrail.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\nimport dayjs from \"dayjs\";\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\nexport class ArtReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    quarter: string\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.quarter = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n    setQuarter(quarter: string) {\n        this.quarter = quarter\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': this.programID}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        if (this.quarter) {\n            payload['quarter'] = this.quarter\n        }\n        return { ...payload, ...config }\n    }\n\n    static getQuarterBounds(year: number) {\n        const daysInMonth = (m: string) => dayjs(`${year}-${m}-01`).daysInMonth()\n        const startMonth = (m: string) => `${year}-${m}-01 00:00`\n        const endMonth = (m: string) => `${year}-${m}-${daysInMonth(m)} 00:00`\n\n        return {\n            'Q1': {\n                qtr: 1,\n                start: startMonth('01'),\n                end: endMonth('03')\n            },\n            'Q2': {\n                qtr: 2,\n                start: startMonth('04'),\n                end: endMonth('06')\n            },\n            'Q3': {\n                qtr: 3,\n                start: startMonth('07'),\n                end: endMonth('09')\n            },\n            'Q4': {\n                qtr: 4,\n                start: startMonth('10'),\n                end: endMonth('12')\n            }\n        }\n    }\n\n    static getQtrByDate(date: Date) {\n        const qtrBounds: any = this.getQuarterBounds(date.getFullYear())\n        for(const qtr in qtrBounds) {\n            const { start, end } = qtrBounds[qtr]\n            if (date >= new Date(start) && date <= new Date(end)) {\n                return qtrBounds[qtr]\n            }\n        }\n        return null\n    }\n\n    static buildQtrObj(qtrName: string, year: number): QuarterInterface {\n        const qtrBounds: any = this.getQuarterBounds(year)\n        const { start, end } = qtrBounds[qtrName]\n        return {\n            start,\n            end,\n            name: `${qtrName} ${year}`,\n        }\n    }\n\n    static getReportQuarters(maxQuarters=5) {\n        const qtrs: QuarterInterface[] = [];\n        let currDate = new Date();\n        let currYear = currDate.getFullYear();\n        const curYr = currYear\n        \n        currDate = new Date(`${curYr}-${currDate.getMonth() + 1}-${currDate.getDate()} 00:00`);\n        const currentQtr = this.getQtrByDate(currDate);\n        let qtr = currentQtr.qtr;\n        let i = 0;\n\n        if (qtr === 4) qtrs.push(this.buildQtrObj('Q1', currYear + 1))\n\n        while (i < maxQuarters) {\n          // Add following quarter\n          if (i === 0 && qtr < 4) qtrs.push(this.buildQtrObj(`Q${qtr + 1}`, currYear))\n\n          qtrs.push(this.buildQtrObj(`Q${qtr}`, currYear))\n          qtr = qtr > 0 ? (qtr -= 1) : qtr;\n          currYear = qtr == 0 ? currYear - 1 : currYear;\n          qtr =  qtr == 0 ? ( qtr += 4) : qtr;\n          i++;\n        }\n        return qtrs;\n    }\n}\n","import { ArtReportService } from \"./art_report_service\";\n\nexport class StockReportService extends ArtReportService {\n    stock: Array<any>;\n    constructor() {\n        super()\n        this.stock = []\n    }   \n\n    async loadStock() {\n        this.stock = await ArtReportService.getJson(`pharmacy/items`, { paginate: false })\n    }\n    \n    getStockReport() {\n        return ArtReportService.getJson(`pharmacy/stock_report`, { paginate: false })\n    }\n\n    loadTrail() {\n        return this.getReport('pharmacy/audit_trail')\n    }\n\n    /**Code adapted from BHT-Core Art system */\n    groupStock() {\n        const pharmacyData: any = {};\n        for (const index in this.stock) {\n            const data = this.stock[index]\n            const drugId = data[\"drug_id\"];\n\n            if (!pharmacyData[drugId]) {\n                pharmacyData[drugId] = {\n                    'current_quantity': 0,\n                    'expiry_dates': [],\n                    'pack_size': data.pack_size,\n                    'drug_name': data[\"drug_name\"] === null ? data[\"drug_legacy_name\"] : data[\"drug_name\"]\n                }\n            }\n\n            if (data.current_quantity === 0) continue;\n\n            pharmacyData[drugId][\"current_quantity\"] += parseFloat(data.current_quantity);\n            pharmacyData[drugId][\"expiry_dates\"].push(data[\"expiry_date\"]);\n        }\n        return Object.values(pharmacyData).map((drug: any) => {\n            let currentQuantity: any = '0'\n            if(drug.pack_size == null) {\n                currentQuantity  = drug.current_quantity + '(tabs)';\n            }else {\n                currentQuantity = Math.trunc(drug.current_quantity / drug.pack_size);\n            }\n            const expiryDate = drug.expiry_dates.sort((a: any, b: any) => +new Date(a) - +new Date(b))[0]\n            return {\n                drugName: drug.drug_name,\n                currentQuantity,\n                quantityIsTabs: drug.pack_size === null,\n                expiryDate\n            }\n        })\n    }\n}\n"],"sourceRoot":""}