{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/ANC/Views/Encounters/AncVitals.vue?a242","webpack:///./src/apps/ANC/Views/Encounters/AncVitals.vue","webpack:///./src/apps/ANC/Views/Encounters/AncVitals.vue?d40a","webpack:///./src/apps/ART/services/vitals_service.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","facts","age","gender","isEnrolledInProgam","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","isOnline","isOfflineMode","getOfflinePerson","person","birthdate","dayjs","ProgramService","getSessionDate","diff","saveObsOffline","encounterTypeID","formdata","obs","labOrders","status","observations","id","uploadStatus","meta","resolveObs","computedData","enc","AppEncounterService","createEncounter","saveObservationList","callback","test","error","Error","formData","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","program","programID","getProgramID","toastDanger","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","loadingController","create","backdropDismiss","message","present","getTop","v","dismiss","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","_component_his_standard_form","_resolveComponent","mixins","EncounterMixinVue","recentHeight","vitals","weightForHeight","medianWeightandHeight","watch","init","immediate","VitalsService","getID","getGender","lastHeight","getRecentHeight","getMedianWeightHeight","getWeightForHeightValues","getFields","_","validateVitals","l","checkRequiredVitals","val","sanitizeVitals","validateAll","element","helpText","FieldType","TT_VITALS_ENTRY","validation","computedValue","doNotSave","forEach","buildValueNumber","config","hiddenFooterBtns","onUpdateAlertStatus","bp","sys","dis","onChangeOption","activeItem","errs","validator","showHeight","modifier","icon","visible","dia","constructor","super","isNotEmptyandNumber","vital","match","isNotEmptyandFloat","checkMinMax","min","max","parseFloat","j","mergeErrors","errors","holder","isValidBPReading","isValidBP","bpSystolic","bpDiastolic","emptyErrors","minErrors","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-f79e9b48.cdcc3eaf.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { loadingController } from '@ionic/core'\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const { getOfflinePerson } = Offline()\n            const person = getOfflinePerson(this.offlineID)\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        saveObsOffline(encounterTypeID: number, formdata: any, obs: any, labOrders=undefined as any, status='Pending') {\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: encounterTypeID,\n                meta: formdata,\n                labOrders\n            })\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            const obs = await this.resolveObs(params.computedData)\n            let status = 'Pending'\n            try {\n                const enc = new AppEncounterService(\n                    this.patientID,\n                    params.encounterTypeID, \n                    this.providerID\n                )\n                if ((await enc.createEncounter())) {\n                    if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                        status = 'Success'\n                    }\n                }\n                if (typeof params.callback === 'function') {\n                    await params.callback(enc)\n                }\n            } catch (e) {\n                if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                    status = 'NetworkError'\n                } else {\n                    status = 'Exception'\n                }\n                console.error(`${e}`)\n            }\n            if (status === 'Exception') {\n                throw new Error('Unable to proceed!')\n            }\n            this.saveObsOffline(\n                params.encounterTypeID, \n                params.formData,\n                obs,\n                params.labOrders,\n                status\n            )\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            (await loadingController.create({\n                backdropDismiss: false,\n                message: 'Checking Next task..'\n            })).present()\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(e)\n            }\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { VitalsService } from \"@/apps/ART/services/vitals_service\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { find } from \"lodash\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    age: null as any,\n    gender: null as any,\n    recentHeight: null,\n    vitals: {} as any,\n    weightForHeight: {} as any,\n    medianWeightandHeight: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready) {\n        if (ready) await this.init(this.patient)\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async init(patient: any) {\n        this.vitals = new VitalsService(patient.getID(), this.providerID);\n        this.age = patient.getAge();\n        this.gender = patient.getGender();\n        const lastHeight = await patient.getRecentHeight();\n        this.recentHeight = lastHeight == -1 ? null : lastHeight;\n        if (this.age <= 14) {\n            this.medianWeightandHeight = await patient.getMedianWeightHeight();\n            this.weightForHeight = await ProgramService.getWeightForHeightValues();\n        }\n        this.fields = this.getFields();\n    },\n    async onFinish(_: any, computedData: any) {\n      await this.vitals.createEncounter()\n      await this.vitals.saveObservationList(\n        (await this.resolveObs(computedData))\n      )\n      this.nextTask();\n    },\n    validateVitals(vitals: any) {\n      const l = this.checkRequiredVitals(vitals);\n      if (l.length > 0) {\n        return l.map((val) => {\n          return [`${val.label} can not be empty`];\n        });\n      }\n      const v = this.sanitizeVitals(vitals);\n      return this.vitals.validateAll(v);\n    },\n    sanitizeVitals(vitals: Array<Option>) {\n      return vitals.filter((element) => {\n        if (element.label === \"Height\" && element.other.required == false) {\n          return false;\n        }\n        return element.value !== \"\" && element.label !== \"Age\";\n      })\n    },\n    checkRequiredVitals(vitals: Array<Option>) {\n      return vitals.filter((element) => {\n        return element.value === \"\" && element.other.required === true;\n      });\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"vitals\",\n          helpText: \"Vitals entry\",\n          type: FieldType.TT_VITALS_ENTRY,\n          validation: (value: any) => this.validateVitals(value),\n          computedValue: (value: Option[]) => {\n            let obs: any = []\n            const data = value.filter(v => !v.other.doNotSave)\n            data.forEach((d: Option) => {\n                if (!d.value) {\n                    return\n                }\n                if (typeof d.other?.computed === 'function') {\n                    obs = obs.concat(d.other.computed(d.value))\n                } else {\n                    obs.push(this.vitals.buildValueNumber(d.label, d.value))\n                }\n            })\n            return obs\n          },\n          config: {\n            hiddenFooterBtns : [\n              'Clear'\n            ],\n            onUpdateAlertStatus: (params: Option[]) => {\n                const bp = find(params, { label: 'BP' })\n                if (bp && bp.value != '') {\n                    const [sys, dis] = `${bp.value}`.split('/').map(v => parseInt(v))\n                    if (sys >= 140 && dis >= 90) {\n                        return {\n                            status: 'Client is at risk of pre-eclampsia, refer for urine protein test.',\n                            color: 'brown'\n                        }\n                    }\n                    if (sys < 120 || sys > 140) {\n                        return {\n                            status: 'Systolic reading is out of normal range',\n                            color: 'brown'\n                        }\n                    }\n                    if (dis < 80 || dis > 90) {\n                        return {\n                            status: 'Diastolic reading is out of normal range',\n                            color: 'brown'\n                        }\n                    }\n                    if ((sys >= 130 && sys <= 139) && (dis >= 80 && dis <= 89)) {\n                        return {\n                            status: 'Prehypertension',\n                            color: 'brown'\n                        }\n                    }\n                }\n                return { status: '', color: ''}\n            },\n            onChangeOption: (activeItem: any) => {\n              if (!activeItem.value && activeItem.other.required) {\n                throw `Value for ${activeItem.label} is required`\n              }else if (activeItem.value) {\n                const errs = this.vitals.validator(activeItem)\n                if(errs && errs.length) throw errs\n              }\n            }\n          },\n          options: () => {\n            const recentHeight = this.recentHeight && this.age > 18? this.recentHeight : \"\";\n            const showHeight = !(recentHeight && this.age > 18);\n            return [\n                {\n                    label: \"Weight\",\n                    value: \"\",\n                    other: {\n                        modifier: \"KG\",\n                        icon: \"weight\",\n                        required: true,\n                    },\n                },\n                {\n                    label: \"Height\",\n                    value: `${recentHeight}`,\n                    other: {\n                        modifier: \"CM\",\n                        icon: \"height\",\n                        recentHeight: this.recentHeight,\n                        visible: showHeight\n                    }\n                },\n                { \n                    label: \"BP\", \n                    value: \"\", \n                    other: {\n                        computed: (bp: string) => {\n                            const  [sys, dia] = bp.split(\"/\");\n                            return [\n                                this.vitals.buildValueNumber(\"Systolic\", sys),\n                                this.vitals.buildValueNumber(\"Diastolic\", dia)\n                            ]\n                        },\n                        modifier: \"mmHG\", \n                        icon: \"bp\"\n                    } \n                },\n                {\n                    label: \"Age\",\n                    value: this.age,\n                    other: {\n                        doNotSave: true,\n                        modifier: \"Years old\", \n                        icon: \"\", \n                        visible: false \n                    }\n                }\n            ]\n          }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./AncVitals.vue?vue&type=template&id=211590db&ts=true\"\nimport script from \"./AncVitals.vue?vue&type=script&lang=ts\"\nexport * from \"./AncVitals.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { isArray } from \"lodash\";\nimport { Option } from '@/components/Forms/FieldInterface';\nexport class VitalsService extends AppEncounterService{\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 6, providerID);\n  }\n  isNotEmptyandNumber(vital: Option) {\n    return `${vital.value}`.match(/^-?\\d+\\.?\\d*$/) ? null : [`Invalid entry for ${vital.label}`]\n  }\n  isNotEmptyandFloat(vital: Option) {\n    return `${vital.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/) \n      ? null \n      : [`Invalid entry for ${vital.label}. Don't forget to add a decimal. e.g. 56.2 ${vital.other.modifier}`]\n  }\n  checkMinMax(val: Option, min: number, max: number) {\n    const p = [];\n    if (parseFloat(`${val.value}`) < min) {\n      p.push([`${val.label} entered is less than minimum ${min} ${val?.other?.modifier || ''}`])\n    }\n    if (parseFloat(`${val.value}`) > max) {\n      p.push([`${val.label} entered is greater than maximum ${max} ${val?.other?.modifier || ''}`])\n    }\n    return p.length > 0 ? p : null;\n  }\n  validateAll(vitals: Option[]) {\n    const p: any = [];\n    vitals.map((vital: any) => {\n      const j = this.validator(vital);\n      return isArray(j) ? p.push(j) : null\n    })\n    return p.length > 0 ? p : null;\n  }\n\n  mergeErrors(errors: any[]) {\n    const holder: any = [];\n    errors.forEach(element => {\n      if (isArray(element)) {\n        holder.push(element)\n      }\n    });\n    return holder.length > 0 ? holder : null\n  }\n  isValidBPReading(vital: any) {\n    const p = [];\n    const isValidBP =  `${vital.value}`.match(/^\\d{1,3}\\/\\d{1,3}$/g) ? null : ['Invalid BP reading']\n    p.push(isValidBP);\n    if(isValidBP == null) {\n      const value = `${vital.value}`.split('/');\n      \n      const bpSystolic = {\n        label: 'Systolic',\n        value: value[0]\n      };\n      const bpDiastolic = {\n        label: 'Diastolic',\n        value: value[1]\n      };\n      p.push(this.checkMinMax(bpDiastolic, 30, 200))\n      p.push(this.checkMinMax(bpSystolic, 40, 250))\n    }\n    return this.mergeErrors(p)\n  }\n  validator(vital: Option) {\n    const values = [\n      {\n        name: \"Weight\",\n        validator: (val: Option) => {\n          const emptyErrors = this.isNotEmptyandFloat(val);\n          const minErrors = this.checkMinMax(val, 2.0, 250.0);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      },\n      {\n        name: \"Height\",\n        validator: (val: Option) => {\n          const errors = []\n          errors.push(this.isNotEmptyandNumber(val))\n          errors.push(this.checkMinMax(val, 40, 220))\n          return this.mergeErrors(errors); \n        },\n      }, {\n        name: \"BP\",\n        validator: (val: any) => {\n          return this.isValidBPReading(val)\n        },\n      }, {\n        name: \"Temp\",\n        validator: (val: any) => {\n          const emptyErrors = this.isNotEmptyandNumber(val);\n          const minErrors = this.checkMinMax(val, 30, 42);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      }, {\n        name: \"SP02\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 40, 100);\n          return this.mergeErrors([minErrors]); \n        },\n      }, {\n        name: \"Pulse\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 50, 120);\n          return this.mergeErrors([minErrors]); \n        },\n      }\n    ]\n    const v = values.filter(element => {\n      return element.name === vital.label;\n    });\n    if (v.length > 0) {\n      return v[0].validator(vital);\n    }\n    return null\n  }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}