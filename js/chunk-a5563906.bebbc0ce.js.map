{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ANC/Views/Encounters/LabResults.vue?6ded","webpack:///./src/apps/ANC/anc_global_props.ts","webpack:///./src/apps/ANC/Views/Encounters/LabResults.vue","webpack:///./src/apps/ANC/Views/Encounters/LabResults.vue?9f2f"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","saveObsOffline","observations","id","uploadStatus","encounterTypeID","meta","formData","labOrders","synchronizeRecord","skipNextTask","nextOfflineFlow","error","toastWarning","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","toastDanger","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","toOption","label","other","mapStrToOptions","items","i","path","task","nextPatientWorkflowActivity","patientUrl","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","formFields","_","ANC_GLOBAL_PROP","recencyEssayActivated","GlobalPropertyService","isProp","RECENCY_ESSAY_ACTIVATED","IonPage","mixins","EncounterMixinVue","arvNumber","hivStatus","artStatus","arvStartDate","riskOfPreclampsia","service","watch","AncLabResultService","loadSubsequentVisit","loadArtStatus","ANC_PROP","getFields","immediate","createEncounter","saveObservationList","printLabResults","helpText","FieldType","TT_SUMMARY","isHivPositive","getHivStatus","getArtStatus","getArvStartDate","getArvNumber","TT_MULTIPLE_YES_NO","isPregnancyTestDone","f","lab_results","isPrengnacyTestDone","concept","validation","v","Validation","computedValue","buildValueCoded","TT_SELECT","generateDateFields","minDate","maxDate","getDate","estimation","allowUnknown","_f$prev_hiv_test_resu","prev_hiv_test_result","computeValue","date","buildValueDate","TT_TEXT","on_art","recency_essay","TT_MULTIPLE_SELECT","onValueUpdate","listData","l","isChecked","_f$prev_hiv_test_resu2","hivPos","urine","isAtRiskOfPreEclampsia","ok","alertConfirmation","header","cancelBtnLabel","confirmBtnLabel","config","footerBtns","onClickComponentEvents","refreshOptions","o","onClick","exitsForm","available_test_results","hiv_status","on_art_1","TT_NUMBER","isFloatingPointNumber","rangeOf","keypad","FLOAT_KEYPAD","buildOptionsOnce","available_urine_tests"],"mappings":"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","file":"js/chunk-a5563906.bebbc0ce.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n                Offline().saveObsOffline({\n                    observations: obs,\n                    id: this.offlineID,\n                    uploadStatus: status,\n                    encounterName: this.$route.name,\n                    encounterTypeID: params.encounterTypeID,\n                    meta: params.formData,\n                    labOrders: params.labOrders,\n                    created\n                }, created)\n                Offline().synchronizeRecord(this.offlineID)\n                if (!params.skipNextTask) this.nextOfflineFlow()\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            // if (!this.isOfflineMode()) {\n            //     try {\n            //         const enc = new AppEncounterService(\n            //             this.patientID,\n            //             params.encounterTypeID, \n            //             this.providerID\n            //         )\n            //         if ((await enc.createEncounter())) {\n            //             if ((await enc.saveObservationList(obs as ObsValue[]))) {\n            //                 status = 'Success'\n            //             }\n            //         }\n            //         if (typeof params.callback === 'function') {\n            //             await params.callback(enc)\n            //         }\n            //         created = true\n            //     } catch (e) {\n            //         created = false\n            //         if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n            //             status = 'NetworkError'\n            //         } else {\n            //             status = 'Exception'\n            //             console.error(`Exception while saving an encounter: ${e}`)\n            //         }\n            //     }\n            //     if (status === 'Exception') {\n            //         return toastDanger(\"An error has occured!\")\n            //     }\n            // }\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextOfflineFlow() {\n            const task = Offline().nextPatientWorkflowActivity(this.patientID)\n            if (!task || !task.patientUrl) return this.$router.push(`/patient/dashboard/${this.patientID}`)\n            return this.$router.push(`${task.patientUrl}/${this.patientID}`) \n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { GlobalPropertyService } from \"@/services/global_property_service\"\n\nexport enum ANC_GLOBAL_PROP {\n    RECENCY_ESSAY_ACTIVATED = 'recency_essay_activated'\n}\n\nfunction recencyEssayActivated() {\n    return GlobalPropertyService.isProp(`${ANC_GLOBAL_PROP.RECENCY_ESSAY_ACTIVATED}=Yes`)\n}\n\nexport default {\n    recencyEssayActivated\n}","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncLabResultService } from \"@/apps/ANC/Services/anc_lab_result_service\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { ObsValue } from '@/services/observation_service'\nimport { generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper'\nimport HisDate from \"@/utils/Date\"\nimport ANC_PROP from \"@/apps/ANC/anc_global_props\"\nimport { alertConfirmation } from '@/utils/Alerts'\nimport { find } from 'lodash'\nimport { FLOAT_KEYPAD } from \"@/components/Keyboard/KbLayouts\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    arvNumber: '' as string,\n    hivStatus: '' as string,\n    artStatus: '' as string,\n    arvStartDate: '' as string,\n    recencyEssayActivated: false as boolean,\n    riskOfPreclampsia: null as boolean | null,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n            this.service = new AncLabResultService(this.patientID, this.providerID)\n            await this.service.loadSubsequentVisit()\n            await this.service.loadArtStatus()\n            this.recencyEssayActivated = await ANC_PROP.recencyEssayActivated()\n            this.formFields = this.getFields()\n        } \n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData)\n      await this.service.createEncounter()\n      await this.service.saveObservationList(obs as ObsValue[])\n      await this.service.printLabResults()\n      this.nextTask()\n    },\n    getFields(): Field[] {\n        return [\n            {\n                id: 'art_summary',\n                helpText: 'ART Summary',\n                type: FieldType.TT_SUMMARY,\n                condition: () => this.service.isHivPositive(),\n                options: () => {\n                    return [\n                        {\n                            label: 'HIV Status', \n                            value: `\n                                <b style=\"color:${this.service.isHivPositive() ? 'red': 'green'}\">\n                                    ${this.service.getHivStatus()}\n                                </b>\n                            `\n                        },\n                        {\n                            label: 'On Art', value: this.service.getArtStatus() || 'N/A'\n                        },\n                        {\n                            label: 'Art Start date', value: HisDate.toStandardHisDisplayFormat(this.service.getArvStartDate()) || 'N/A'\n                        },\n                        {\n                            label: 'ARV Number', value: this.service.getArvNumber() || 'N/A'\n                        }\n                    ]\n                }\n            },\n            {\n                id: 'lab_results',\n                helpText: 'Lab Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: () => !this.service.isPregnancyTestDone && !this.hivStatus,\n                options: (f: any) => {\n                    if (f.lab_results) {\n                        return f.lab_results\n                    }\n                    const options: Option[] = []\n                    if (!this.service.isPrengnacyTestDone) {\n                        options.push(this.toYesNoOption('Pregnancy test done', { concept: 'B-HCG'}))\n                    }\n                    if (!this.service.hivStatus) {\n                        options.push(this.toYesNoOption('Previous HIV test done', { concept: 'Previous HIV test done'}))\n                    }\n                    return options\n                },\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option[]) => v.map(d => this.service.buildValueCoded(d.other.concept, d.value))\n            },\n            {\n                id: 'prev_hiv_test_result',\n                helpText: 'Previous HIV test results',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => this.inArray(\n                    f.lab_results, (v: Option) => v.label === 'Previous HIV test done' && v.value === 'Yes'), \n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive',\n                        'Inconclusive',\n                        'Unknown'\n                    ])\n                },\n                computedValue: (v: Option) => this.service.buildValueCoded('Previous HIV Test Results', v.value)\n            },\n            ...generateDateFields({\n                id: 'prev_hiv_test_date',\n                helpText: 'Previous HIV test',\n                required: true,\n                minDate: () => this.patient.getBirthdate(),\n                maxDate: () => this.service.getDate(),\n                estimation: {\n                    allowUnknown: false\n                },\n                condition: (f: any) => f.prev_hiv_test_result?.value ? true : false,\n                computeValue: (date: string) => this.service.buildValueDate('Previous HIV Test Date', date)\n            }),\n            {\n                id: 'on_art',\n                helpText: 'Patient on ART',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('On Art', v.value),\n                condition: (f: any) => f.prev_hiv_test_result.value === 'Positive',\n                options: () => this.yesNoOptions()\n            },\n            {\n                id: 'arv_number',\n                helpText: 'ARV Number',\n                type: FieldType.TT_TEXT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueText('Art number', v.value),\n                condition: (f: any) => f.on_art.value === 'Yes'\n            },\n            {\n                id: 'recency_essay',\n                helpText: 'Rapid Recency Essay - Asante Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: (f: any) => f.prev_hiv_test_result.value === 'Positive' && this.recencyEssayActivated,\n                computedValue: (v: Option[]) => v ? v.map(d => this.service.buildValueCoded(d.label, d.value)) : null,\n                options: (f: any) => {\n                    if (f.recency_essay) return f.recency_essay\n                    return [\n                        this.toYesNoOption('Line 1. Control Line Present'),\n                        this.toYesNoOption('Line 2. Positive Verification Line Present'),\n                        this.toYesNoOption('Line 3. Long-Term Line Present')\n                    ]\n                }\n            },\n            {\n                id: 'available_test_results',\n                helpText: 'Available Lab Tests',\n                type: FieldType.TT_MULTIPLE_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option[]) => {\n                    if (find(v, { label: 'None'})) {\n                        return this.service.buildValueCoded('Lab test done', 'No')\n                    }\n                    return null\n                },\n                onValueUpdate(listData: Option[], value: Option) {\n                    return listData.map(l => {\n                        if (value.value === 'None' && l.value !='None') {\n                            l.isChecked = false\n                        }\n                        if (value.value != 'None' && value.isChecked && l.value === 'None') {\n                            l.isChecked = false\n                        }\n                        return l\n                    })\n                },\n                options: async (f: any) => {\n                    const options: Option[] = []\n                    const hivPos = !this.service.isHivPositive() ? f.prev_hiv_test_result?.value === 'Positive' : true\n                    if (!hivPos) {\n                        options.push(this.toOption('HIV'))\n                    }\n                    options.push(this.toOption('HB'))\n                    options.push(this.toOption('Syphilis'))\n                    options.push(this.toOption('Malaria'))\n                    options.push(this.toOption('Blood Group'))\n                    const urine: Option = {\n                        label: 'Urine',\n                        value: 'Urine',\n                        isChecked: false\n                    }\n                    if (this.riskOfPreclampsia === null) {\n                        this.riskOfPreclampsia = await this.service.isAtRiskOfPreEclampsia()\n                        if (this.riskOfPreclampsia) {\n                            const ok: boolean = await alertConfirmation(\n                                'Select urine test to conduct urine protein test', {\n                                header: 'Client is at risk of pre-eclampsia.',\n                                cancelBtnLabel: 'Remind later',\n                                confirmBtnLabel: 'Select Urine Test'\n                            })\n                            urine.isChecked = ok\n                        }\n                    }\n                    return [...options, urine, this.toOption('None')]\n                },\n                config: {\n                    footerBtns: [\n                        {\n                            name: \"None\",\n                            slot: \"end\",\n                            onClickComponentEvents: {\n                                refreshOptions: (_: any, listData: Option[]) => {\n                                    return listData.map(o => {\n                                        o.isChecked = o.label === 'None'\n                                        return o\n                                    })\n                                }\n                            },\n                            onClick: () => 'None'\n                        }\n                    ]\n                },\n                exitsForm: (f: any) => find(f.available_test_results, {label: 'None'}),\n            },\n            {\n                id: 'hiv_status',\n                helpText: 'HIV Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('HIV'),\n                computedValue: (v: Option) => this.service.buildValueCoded('HIV status', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive',\n                        'Inconclusive'\n                    ])\n                }\n            },\n            {\n                id: 'on_art_1',\n                helpText: 'Patient on ART',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.hiv_status.value === 'Positive',\n                computedValue: (v: Option) => this.service.buildValueCoded('On Art', v.value),\n                options: () => this.yesNoOptions()\n            },\n            {\n                id: 'arv_number_1',\n                helpText: 'ARV Number',\n                type: FieldType.TT_TEXT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueText('Art number', v.value),\n                condition: (f: any) => f.on_art_1.value === 'Yes'\n            },\n            {\n                id: 'recency_essay_1',\n                helpText: 'Rapid Recency Essay - Asante Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: (f: any) => f.hiv_status.value === 'Positive' && this.recencyEssayActivated,\n                computedValue: (v: Option[]) => v ? v.map(d => this.service.buildValueCoded(d.label, d.value)) : null,                \n                options: () => {\n                    return [\n                        this.toYesNoOption('Line 1. Control Line Present'),\n                        this.toYesNoOption('Line 2. Positive Verification Line Present'),\n                        this.toYesNoOption('Line 3. Long-term Line Present')\n                    ]\n                }\n            },\n            {\n                id: 'hb_result',\n                helpText: 'HB Test Result (g/dl)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.isFloatingPointNumber(v),\n                    () => Validation.rangeOf(v, 2, 16)\n                ]),\n                config: {\n                    keypad: [\n                        FLOAT_KEYPAD,\n                        [\n                            [ 'Delete' ]\n                        ]\n                    ]\n                },\n                computedValue: (v: Option) => this.service.buildValueNumber('HB Test Result', v.value),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('HB'),\n            },\n            {\n                id: 'syphilis',\n                helpText: 'Syphilis Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('Syphilis Test Result', v.value),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Syphilis'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive'\n                    ])\n                }\n            },\n            {\n                id: 'malaria',\n                helpText: 'Malaria Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Malaria'),\n                computedValue: (v: Option) => this.service.buildValueCoded('Malaria Test Result', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive'\n                    ])\n                }\n            },\n            {\n                id: 'blood_group',\n                helpText: 'Blood Group Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Blood Group'),\n                computedValue: (v: Option) => this.service.buildValueText('Blood group', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"A+\",\n                        \"A-\",\n                        \"B+\",\n                        \"B-\",\n                        \"AB+\",\n                        \"AB-\",\n                        \"O+\",\n                        \"O-\"\n                    ])\n                }\n            },\n            {\n                id: 'available_urine_tests',\n                helpText: 'Available Urine Tests Results',\n                type: FieldType.TT_MULTIPLE_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Urine'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Protein\",\n                        \"Glucose\",\n                        \"WBC\",\n                        \"RBC\",\n                        \"Nitrate\"\n                    ])\n                },\n                config: {\n                    buildOptionsOnce: true\n                }\n            },\n            {\n                id: 'protein',\n                helpText: 'Urine Protein Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Protein'),\n                computedValue: (v: Option) => this.service.buildValueText('Urine protein', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Negative\",\n                        \"(+)\",\n                        \"+\",\n                        \"++\",\n                        \"+++\",\n                        \"++++\",\n                    ])\n                }\n            },\n            {\n                id: 'glucose',\n                helpText: 'Glucose Test Result (mg/dl)',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Glucose'),\n                computedValue: (v: Option) => this.service.buildValueText('Blood glucose', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Normal\",\n                        \"+\",\n                        \"++\",\n                        \"+++\"\n                    ])\n                }\n            },\n            {\n                id: 'wbc',\n                helpText: 'White Blood Cells Test Result (cmm)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 1000000)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('White blood cells', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('WBC'),\n            },\n            {\n                id: 'rbc',\n                helpText: 'Red Blood Cells Test Result (cmm)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 1000000)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('Red blood cells', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('RBC'),\n            },\n            {\n                id: 'nitrate',\n                helpText: 'Nitrate Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('Urine Nitrate Test', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Nitrate'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Negative\",\n                        \"Trace\",\n                        \"Positive\"\n                    ])\n                }\n            }\n        ]\n    }\n  }\n})\n","import { render } from \"./LabResults.vue?vue&type=template&id=5591a52f&ts=true\"\nimport script from \"./LabResults.vue?vue&type=script&lang=ts\"\nexport * from \"./LabResults.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}