{"version":3,"sources":["webpack:///./src/apps/HTS/services/hts_items_given.ts","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue?ebef","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue","webpack:///./src/apps/HTS/views/encounters/HtsESelfTestRegister.vue?5019","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/HTS/composables/testKits.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["HtsItemsGivenService","AppEncounterService","constructor","patientID","providerID","super","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","cancelDestinationPath","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","accessPointTypeField","facilityAccessPointField","communityAccessPoints","genderField","ageField","pregnancyStatusField","lastHivTestResultField","lastTimeHIVTestedField","itemsGivenToClientField","selfTestsGivenToClientField","hivTestKitDetailsField","visitTypeField","patientDemographics","immediate","methods","f","computedData","obs","resolveObs","person","PersonField","resolvePerson","isOnline","registration","PatientRegistrationService","Patientservice","registerBasicPatient","getPersonID","createEncounter","saveObservationList","saveObsOffline","savePersonOffline","Offline","id","observations","encounterName","encounterTypeID","meta","$router","push","getSelfKitCount","items_given_to_client","label","value","helpText","type","FieldType","TT_SELECT","isRequired","finalComputedValue","v","tag","buildValueCoded","options","mapStrToOptions","TT_SELECT_GRID","condition","accesspoint_type","summaryMapValue","buildValueText","toString","config","columnsPerRow","TT_NUMBER","validation","val","parseInt","test","isNaN","birthdate","DateHelper","estimateDateFromAge","birthdate_estimated","gender","TT_AGE_INPUT","last_hiv_result","maxDaysAllowed","maxWeeksAllowed","maxMonthsAllowed","other","timeUnit","length","buildObs","date","excludeUnits","TT_ADHERENCE_INPUT","every","d","some","maxSelfKits","maxMaleCondoms","maxFemaleCondoms","maxFRS","toLowerCase","isEmpty","filter","map","buildValueNumber","noFloat","titles","initKits","getLotNo","getExpiryDate","TestKit","TT_INPUT_ARRAY","columns","init","async","incomplete","x","KitProp","HIV_SELF_KIT","defaultOutput","Array","from","buildValueDate","parentObs","childObs","l","child","Promise","all","test_kit","kitNameOption","onclick","r","index","t","listData","keyboard","TT_TEXT","forEach","i","kitLotNoOption","kitExpiryDateOption","TT_FULL_DATE","Date","toDate","monthsFromNow","dayjs","diff","kits","generateRows","count","isArray","slice","el","estimate","someIncomplete","broadcast","rows","channel","newValue","oldValue","col","broadcastlistener","update","disabled","userOptionField","otherRows","JSON","stringify","HIVStatus","selectionList","selection","title","preset","size","genderOptionField","resultOptionField","ageOptionField","age","buildNumericEstimate","estimatedDOB","numericKeypad","isEstimate","toastWarning","toggleButton","strictNumbers","approachOptionField","self_test_kits","TT_HIDDEN","computedValue","name","getGivenNameField","getFamilyNameField","getHomeDistrictField","getHomeTaField","getHomeVillageField","getCurrentDistrictField","getCurrentTAfield","getCurrentVillageField","getCellNumberField","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","providers","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","facts","isEnrolledInProgam","village","district","currentTA","created","$route","params","patient_id","goOffline","initOfflineData","Store","get","then","patientData","cachePatient","setEncounterFacts","checkEncounterGuidelines","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","isOfflineMode","offline","findByID","personParams","ProgramService","getSessionDate","current_district","current_village","current_traditional_authority","status","userAgentObs","getPlatformName","error","enc","callback","toastDanger","uploadStatus","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","EXIT","gotoPatientDashboard","findings","matchToGuidelines","finding","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toUpperCase","sort","a","b","usernameA","usernameB","p","names","latestName","given_name","family_name","toOption","items","path","yesNoOptions","toYesNoOption","values","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","Object","reduce","accum","cur","concat","inArray","arr","expression","validateSeries","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","mapToOption","listOptions","item","computedForm","attr","isPlainObject","Validation","isName","form","PersonService","searchGivenName","searchFamilyName","getGenderField","customOptions","getDobConfig","includeHelpText","summaryLabel","minDate","maxDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","getHomeRegionField","group","requireNext","getRegions","home_region","dynamicHelpText","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","onClick","c","field","filtered","ok","alertConfirmation","address","LocationService","createAddress","showKeyboard","isFilterDataViaApi","footerBtns","getTraditionalAuthorities","home_district","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","current_region","match","number","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","getFacilityLocationField","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","person_attributes","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","getPersonAttributeOptions","prop","getPatientInfoString","getID","getNationalID","npid","show","Service","getProgramName","isCondition","ignored","undefined","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","description","text","info","ref","getUserProp","setUserProp","UserProp","getSelectedTests","req","trim","defaultKits","kitName","UNIGOLD","lotNo","expiryDate","testGroup","visible","userProp","DETERMINE","BIOLINE","SYPHILIS","HEPATITIS","selectedKits","TEST_KIT_USER_PROPERTY","prevKits","parse","kit","k","saveKits","facilities","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-09a4aadc.283d8e09.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsItemsGivenService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 196, providerID)\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Self Test Registration\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: `/`\n      }, null, 8, [\"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { find, isEmpty } from \"lodash\";\nimport keyboard, { numericKeypad, selectionList } from \"@/utils/PopupKeyboard\";\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport dayjs from \"dayjs\";\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport { HtsItemsGivenService } from \"../../services/hts_items_given\";\nimport { toDate } from \"@/utils/Strs\";\nimport DateHelper from \"@/utils/Date\"\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { KitProp, TestKit } from \"../../composables/testKits\";\nimport { Offline } from  \"@/composables/offline\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler() {\n        this.service = new HtsItemsGivenService(-1);\n        this.fields = [\n          ...[\n            this.accessPointTypeField(),\n            this.facilityAccessPointField(),\n            this.communityAccessPoints(),\n            this.genderField(),\n            this.ageField(),\n            this.pregnancyStatusField(),\n            this.lastHivTestResultField(),\n            this.lastTimeHIVTestedField(),\n            this.itemsGivenToClientField(),\n            this.selfTestsGivenToClientField(),\n            this.hivTestKitDetailsField(),\n            this.visitTypeField(),\n          ],\n          ...this.patientDemographics(),\n        ];\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      const obs = await this.resolveObs(computedData, \"reg\")\n      const person = PersonField.resolvePerson(computedData);\n      if (this.isOnline()) {\n        const registration: any = new PatientRegistrationService();\n        new Patientservice(await registration.registerBasicPatient(person));\n        this.service.patientID = registration.getPersonID();\n        await this.service.createEncounter();\n        await this.service.saveObservationList(obs);\n      } else {\n        const { saveObsOffline, savePersonOffline } = Offline()\n        const id = savePersonOffline('Self test client registration',person, [])\n        saveObsOffline({\n          id,\n          observations: obs,\n          encounterName: \"Self-test kit register\",\n          encounterTypeID: this.service.encounterTypeID,\n          meta: f\n        })\n      }\n      this.$router.push(`/`);\n    },\n    getSelfKitCount(f: Record<string, any>) {\n      return (\n        find(f.items_given_to_client || [], { label: \"Self-Test Kit\" })\n          ?.value || 0\n      );\n    },\n    accessPointTypeField(): Field {\n      return {\n        id: \"accesspoint_type\",\n        helpText: \"Distribution point type\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueCoded(\"HTS Access Type\", v.value),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\"Health Facility\", \"Community\"]);\n        },\n      };\n    },\n    facilityAccessPointField(): Field {\n      return {\n        id: \"facility_access_points\",\n        helpText: \"Health facility distribution point\",\n        type: FieldType.TT_SELECT_GRID,\n        isRequired: () => true,\n        condition: (f: any) => f.accesspoint_type.value === \"Health Facility\",\n        summaryMapValue: (v: Option) => {\n          return v;\n        },\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              v.value.toString()\n            ),\n          };\n        },\n        config: {\n          columnsPerRow: 2\n        },\n        options: () => {\n          return [\n            {label: \"1 | VCT\", value: \"VCT\"},\n            {label: \"2 | ANC\", value: \"ANC First Visit\"},\n            {label: \"3 | Inpatient\", value: \"Inpatient\"},\n            {label: \"4 | STI\", value: \"STI\"},\n            {label: \"5 | PMTCT-Follow-up (ANC FUP, Mat, Post-nat, BF)\", value: \"PMTCT FUP\"},\n            {label: \"6 | Index\", value: \"Index\"},\n            {label: \"7 | Paediatric\", value: \"Paediatric\"},\n            {label: \"8 | VMMC\", value: \"VMMC\"},\n            {label: \"9 | Malnutrition\", value: \"Malnutrition\"},\n            {label: \"10 | TB\", value: \"TB\"},\n            {label: \"11 | OPD\", value: \"OPD\"},\n            {label: \"12 | Other PITC (PrEP, dental e.t.c)\", value: \"Other\"},\n            {label: \"18 | SNS (Social Network Strategies)\", value: \"SNS\"},\n          ];\n        },\n      };\n    },\n    communityAccessPoints(): Field {\n      return {\n        id: \"community_access_points\",\n        helpText: \"Community distribution points\",\n        type: FieldType.TT_SELECT,\n        condition: (f: any) => f.accesspoint_type.value === \"Community\",\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueText(\n              \"Location where test took place\",\n              `${v.value}`\n            ),\n          };\n        },\n         options: () => {\n          return [\n            {label: \"13 | VCT\", value: \"VCT\"},\n            {label: \"14 | Index\", value: \"Index\"},\n            {label: \"15 | VMMC\", value: \"VMMC\"},\n            {label: \"16 | Other\", value: \"Other\"},\n            {label: \"17 | SNS\", value: \"SNS\"},\n            {label: \"19 | Mobile\", value: \"Mobile\"},\n          ];\n        },\n      };\n    },\n    genderField(): Field {\n      return {\n        id: \"gender\",\n        helpText: \"Recipient's Sex\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            person: v.value,\n          };\n        },\n        options: () => {\n          return [\n            { label: \"Female\", value: \"F\" },\n            { label: \"Male\", value: \"M\" },\n          ];\n        },\n      };\n    },\n    ageField(): Field {\n      return {\n        id: \"birthdate\",\n        helpText: \"Recipient's age\",\n        type: FieldType.TT_NUMBER,\n        isRequired: () => true,\n        validation: (v: Option) => {\n          const val = parseInt(`${v.value}`)\n          if (/unknown/i.test(`${v.value}`)) return null\n          if (val <= 10 || val >= 125 || isNaN(val)) {\n            return [\"Invalid Age\"];\n          }\n          return null;\n        },\n        finalComputedValue: (v: any) => {\n          return {\n            person: {\n              birthdate: DateHelper.estimateDateFromAge(v.value),\n              birthdate_estimated: true,\n            },\n          };\n        },\n      };\n    },\n    pregnancyStatusField(): Field {\n      return {\n        id: \"pregnancy_status\",\n        helpText: \"Pregnancy Status\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        condition: (f: any) => f.gender.value === \"F\",\n        finalComputedValue: (v: Option) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueCoded(\"Pregnancy status\", v.value),\n          };\n        },\n        options: () => {\n          return [\n            { label: \"Non-pregnant\", value: \"Not Pregnant / Breastfeeding\" },\n            { label: \"Pregnant\", value: \"Pregnant woman\" },\n            { label: \"Breastfeeding\", value: \"Breastfeeding\" },\n          ];\n        },\n      };\n    },\n    lastHivTestResultField(): Field {\n      return {\n        id: \"last_hiv_result\",\n        helpText: \"Recipient's Last HIV Test Results\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: any) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildValueCoded(\n              \"Previous HIV Test Results\",\n              v.value\n            ),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\n            \"Never Tested\",\n            \"Negative\",\n            \"Positive NOT on ART\",\n            \"Positive on ART\",\n            \"Inconclusive\",\n          ]);\n        },\n      };\n    },\n    lastTimeHIVTestedField(): Field {\n      return {\n        id: \"last_time_hiv_tested\",\n        helpText: \"Time since last HIV test\",\n        type: FieldType.TT_AGE_INPUT,\n        condition: (f: any) =>\n          f.last_hiv_result.value && f.last_hiv_result.value != \"Never Tested\",\n        isRequired: () => true,\n        validation: (v: Option, f: any) => {\n          const maxDaysAllowed = 90;\n          const maxWeeksAllowed = 12;\n          const maxMonthsAllowed = 24;\n          if (parseInt(`${v.other.value}`) <= 0 && !/day/i.test(v.other.timeUnit)) {\n            return [`Enter ${v.other.timeUnit} greater than zero`];\n          }\n           if(v.other.timeUnit === 'Days' && parseInt(`${v.other.value}`) > maxDaysAllowed) {\n            return [`Enter ${v.other.timeUnit} less than ${maxDaysAllowed}, use Weeks Instead`];\n          }\n          if(v.other.timeUnit === 'Weeks' && parseInt(`${v.other.value}`) > maxWeeksAllowed) {\n            return [`Enter ${v.other.timeUnit} less than ${maxWeeksAllowed}, use Months Instead`];\n          }\n          if(v.other.timeUnit === 'Months' && parseInt(`${v.other.value}`) > maxMonthsAllowed) {\n            return [`Enter ${v.other.timeUnit} less than ${maxMonthsAllowed}, use Years Instead`];\n          }\n          if(v.other.timeUnit === 'Years' && parseInt(`${v.other.value}`) > parseInt(f.birthdate.value)) {\n            return [ `${\n                v.label\n              } is greater than client's age of ${f.birthdate.value} Years`];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          if (v.other.value.length > 1 && v.other.value[0] === \"0\") {\n            return [`Value ${v.other.value} is invalid!`];\n          }\n          return null;\n        },\n        finalComputedValue: (v: any) => {\n          return {\n            tag: \"reg\",\n            obs: this.service.buildObs(\"Time of HIV test\", {\n              'value_datetime': v.other.date,\n              'value_text': v.value\n            })\n          }\n        },\n        config: {\n          excludeUnits: [\"Hours\"],\n        },\n      };\n    },\n    itemsGivenToClientField(): Field {\n      return {\n        id: \"items_given_to_client\",\n        helpText: \"Items given to the client\",\n        type: FieldType.TT_ADHERENCE_INPUT,\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v,\n        validation: (v: Option[]) => {\n          if (v.every((d) => d.value === \"\")) {\n            return [\"Values cannot be empty\"];\n          }\n          if (\n            v.some(\n              (d) => /self-test/i.test(d.label) && (!d.value || parseInt(`${d.value}`) <= 0)\n            )\n          ) {\n            return [`Please enter number of self kits to give client`];\n          }\n          const maxSelfKits = 3;\n          const maxMaleCondoms = 99;\n          const maxFemaleCondoms = 99;\n          const maxFRS = 5;\n          if (\n            v.some((d) => /self-test/i.test(d.label) && parseInt(`${d.value}`) > maxSelfKits)\n          ) {\n            return [\n              `Cannot distribute more than ${maxSelfKits} Self-test kits. Please adjust the number accordingly`,\n            ];\n          }\n          if (\n            v.some((d) => d.label == 'Male condoms' && parseInt(`${d.value}`) > maxMaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxMaleCondoms} Male Condoms. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => d.label == 'Female condoms' && parseInt(`${d.value}`) > maxFemaleCondoms)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFemaleCondoms} Female Condoms. Please adjust the number accordingly`,\n            ];\n          }if (\n            v.some((d) => /frs/i.test(d.label.toLowerCase()) && parseInt(`${d.value}`) > maxFRS)\n          ) {\n            return [\n              `Cannot distribute more than ${maxFRS} FRS. Please adjust the number accordingly`,\n            ];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          if (!isEmpty(f.items_given_to_client)) {\n            return f.items_given_to_client;\n          }\n          return [\n            { label: \"Self-Test Kit\", value: \"\" },\n            { label: \"Male condoms\", value: \"\" },\n            { label: \"Female condoms\", value: \"\" },\n            { label: \"FRS\", value: \"\" },\n          ] as Option[];\n        },\n        finalComputedValue: (v: Option[]) => {\n          return {\n            tag: \"reg\",\n            obs: v\n              .filter((d: Option) => d.value)\n              .map((d: Option) =>\n                this.service.buildValueNumber(d.label, parseInt(`${d.value}`))\n              ),\n          };\n        },\n        config: {\n          noFloat: true,\n          titles: {\n            label: \"Item\",\n            value: \"Quantity\",\n          },\n        },\n      };\n    },\n    hivTestKitDetailsField(): Field {\n      const { \n        initKits, \n        getLotNo, \n        getExpiryDate \n      } = TestKit()\n      return {\n        id: \"test_kit\",\n        helpText: \"Kit information\",\n        type: FieldType.TT_INPUT_ARRAY,\n        //summaryMapValue: (v: Option) => v?.other?.fields,\n        config: {\n          columns: [\n            { label: \"Kit Name\" },\n            { label: \"Kit Lot No.\" },\n            { label: \"Kit Expiry Date\" },\n          ],\n        },\n        init: async () => {\n          await initKits()\n          return true\n        },\n        isRequired: () => true,\n        summaryMapValue: (v: Option) => v?.other?.fields,\n        validation: (v: Option[]) => {\n          const incomplete = v\n            .map((d: Option) => d.other.fields)\n            .some((d: Option[]) => d.some((x: Option) => x.value === \"\"));\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        condition: () => !getLotNo(KitProp.HIV_SELF_KIT),\n        defaultOutput: (f: any) => {\n          if (this.getSelfKitCount(f) >= 1 && getLotNo(KitProp.HIV_SELF_KIT)) {\n            return Array.from({ length: this.getSelfKitCount(f) }).map(() => {\n              return {\n                label: KitProp.HIV_SELF_KIT,\n                value: getLotNo(KitProp.HIV_SELF_KIT),\n                other: {\n                  fields: [\n                    {\n                      label: \"Kit name\",\n                      value: KitProp.HIV_SELF_KIT,\n                      other: {\n                        obs: () => this.service.buildValueText(\"Kit name\", KitProp.HIV_SELF_KIT)\n                      }\n                    },\n                    {\n                      label: \"KitLot No.\",\n                      value: getLotNo(KitProp.HIV_SELF_KIT),\n                      other: {\n                        obs: () => this.service.buildValueText(\"Kit lot number\",\n                          getLotNo(KitProp.HIV_SELF_KIT)\n                        )\n                      }\n                    },\n                    {\n                      label: \"Kit Expiry date\",\n                      value: getExpiryDate(KitProp.HIV_SELF_KIT),\n                      other: {\n                        obs: () => this.service.buildValueDate(\"kit expiry date\",\n                          getExpiryDate(KitProp.HIV_SELF_KIT)\n                        )\n                      }\n                    }\n                  ]\n                }\n              }\n            })\n          }\n        },\n        finalComputedValue: (v: Option[]) => {\n          const data = v.map((d) => d.other.fields);\n          return {\n            obs: data.map(async (options: Option[]) => {\n              const [parentObs, ...childObs] = options\n                .filter((l: Option) => typeof l.other.obs === \"function\")\n                .map((d: Option) => d.other.obs(d));\n              return {\n                ...(await parentObs),\n                child: await Promise.all(childObs),\n              };\n            }),\n          };\n        },\n        options: async (f: any) => {\n          if (f.test_kit != null) return f.test_kit;\n          const kitNameOption = () => ({\n            label: \"Kit Name\",\n            value: KitProp.HIV_SELF_KIT,\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueText(\"Kit name\", v.value as string),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"name\",\n                    helpText: \"Kit Name\",\n                    type: FieldType.TT_TEXT,\n                    isRequired: () => true\n                  },\n                  (v: Option) => {\n                    val.value = v.value;\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/name/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          });\n          const kitLotNoOption = () => ({\n            label: \"Kit Lot No.\",\n            value: getLotNo(KitProp.HIV_SELF_KIT),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueNumber(\n                  \"Kit lot number\",\n                  v.value as number\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard({\n                  id: 'lot',\n                  helpText: 'Enter Lot Number',\n                  type: FieldType.TT_TEXT,\n                  isRequired: () => true\n                }, \n                (v: Option) => {\n                  val.value = v.value\n                  // Use first row's Lot number to update other Lot numbers which are empty\n                  if (index === 0) {\n                    listData.forEach((i: Option) => {\n                      i.other.fields.forEach((d: Option) => {\n                        if (/lot/i.test(d.label) && d.value === '') {\n                          d.value = val.value\n                        }\n                      })\n                    })\n                  }\n                })\n              },\n            },\n          });\n          const kitExpiryDateOption = () => ({\n            label: \"Kit Expiry Date\",\n            value: getExpiryDate(KitProp.HIV_SELF_KIT),\n            other: {\n              obs: (v: Option) =>\n                this.service.buildValueDate(\n                  \"kit expiry date\",\n                  v.value as string\n                ),\n              onclick: (val: Option, r: any, index: any, t: any, listData: Option[]) => {\n                keyboard(\n                  {\n                    id: \"end_user\",\n                    helpText: \"Kit Expiry Date\",\n                    type: FieldType.TT_FULL_DATE,\n                    isRequired: () => true,\n                    validation: (v: Option) => {\n                      if (new Date(v.label) < new Date(this.service.date)) {\n                        return [\n                          \"Expiry date cannot be less than current date \" +\n                            toDate(this.service.date),\n                        ];\n                      }\n                      const monthsFromNow = dayjs(v.label).diff(this.service.date, \"month\")\n                      if (monthsFromNow <= 2) {\n                        return [\"It's not advisable to use a test kit that will expire in less than 2 months\"]\n                      }\n                      return null;\n                    },\n                  },\n                  (v: Option) => {\n                    val.value = v.value\n                    // Use first row's expiry date to update other expiry dates\n                    if (index === 0) {\n                      listData.forEach((i: Option) => {\n                        i.other.fields.forEach((d: Option) => {\n                          if (/expiry/i.test(d.label) && d.value === '') {\n                            d.value = val.value\n                          }\n                        })\n                      })\n                    }\n                  }\n                );\n              },\n            },\n          })\n          const kits = this.getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"\",\n                value: \"\",\n                other: {\n                  fields: [\n                   kitNameOption(),\n                   kitLotNoOption(),\n                   kitExpiryDateOption(),\n                  ],\n                },\n              };\n            });\n            if (Array.isArray(f.test_kit)) {\n              if (kits < f.test_kit.length) {\n                return f.test_kit.slice(0, kits);\n              } else if (kits > f.test_kit.length) {\n                return [\n                  ...f.test_kit,\n                  ...generateRows(\n                    kits - f.test_kit.length\n                  ),\n                ];\n              } else {\n                return f.test_kit;\n              }\n          }\n          return generateRows();\n        },\n      };\n    },\n    selfTestsGivenToClientField(): Field {\n      return {\n        id: \"self_test_kits\",\n        helpText: \"Self-test kit users\",\n        type: FieldType.TT_INPUT_ARRAY,\n        isRequired: () => true,\n        condition: (f: any) =>\n          f.items_given_to_client.some(\n            (d: Option) => /self-test/i.test(d.label) && parseInt(`${d.value}`) > 0\n          ),\n        finalComputedValue: (v: Option[]) => {\n          return {\n            tag: \"reg\",\n            obs: v\n              .map((d) => d.other.fields)\n              .map(async (options: Option[]) => {\n                const [parentObs, ...childObs] = options\n                  .filter((l: Option) => typeof l.other.obs === \"function\")\n                  .map((d: Option) => d.other.obs(d.value, d));\n                return {\n                  ...(await parentObs),\n                  child: await Promise.all(childObs),\n                };\n              }),\n          };\n        },\n        summaryMapValue: (v: Option) => v.other.fields.map((d: Option) => {\n          const el = {...d}\n          if (el.label === 'Age' && el?.other?.estimate) {\n            el.value = `${el.value} (Estimated)`\n          }\n          return el\n        }),\n        config: {\n          columns: [\n            { label: \"End-User\" },\n            { label: \"Sex\" },\n            { label: \"Age\" },\n            { label: \"Approach\" },\n            { label: \"Result\"}\n          ],\n        },\n        validation: (v: Option[]) => {\n          const data = v.map((d: Option) => d.other.fields);\n          const someIncomplete = data.some((d: Option[]) => {\n            const count = d.filter((x: Option) => x.value != \"\").length;\n            return count > 0 && count < 4;\n          });\n          if (someIncomplete) {\n            return [\"Some rows have incomplete data!\"];\n          }\n          const incomplete = data.some((d: Option[]) => {\n            return d.some((x: Option) => x.value === \"\");\n          });\n          if (incomplete) {\n            return [`Some rows are missing data`];\n          }\n          return null;\n        },\n        options: (f: any) => {\n          const broadcast = (rows: Option[], channel: string, newValue: string|number, oldValue: string|number) => {\n            rows.forEach(col => {\n              if (typeof col?.other?.broadcastlistener === \"function\") {\n                const update = col.other.broadcastlistener(channel, newValue, oldValue)\n                if (update) {\n                  col.value = update.value\n                  col.disabled = update.disabled\n                }\n              }\n            })\n          }\n          const userOptionField = () => ({\n            label: \"User\",\n            value: \"\",\n            other: {\n              obs: (v: string) => this.service.buildValueCoded(\"Self-test end user\", v),\n              onclick: async (\n                val: Option,\n                rows: Option[],\n                index: number,\n                i: number,\n                listData: Option[]\n              ) => {\n                const otherRows = listData.filter((_: any, i) => i != index);\n                const options = [];\n                if (!/Self/.test(JSON.stringify(otherRows))) {\n                  const HIVStatus = f.last_hiv_result?.value;\n                  if(!/positive/.test(HIVStatus.toLowerCase())) options.push(\"Self\");\n                }\n                selectionList(\n                  [...options, \"Sexual partner\", \"Other\"],\n                  (selection: string) => {\n                    broadcast(rows, 'User', selection, val.value)\n                    val.value = selection;\n                  },\n                  {\n                    title: \"Select End-User\",\n                    preset: val != null ? val.value : \"\",\n                    size: \"small-modal\",\n                  }\n                );\n              },\n            },\n          });\n          const genderOptionField = () => ({\n            label: \"Sex\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string, oldValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { value: f.gender.label, disabled: true }\n                  }\n                  if (oldValue === 'Self') {\n                    return { value: '', disabled: false }\n                  }\n                }\n              },\n              obs: (v: string) => this.service.buildValueCoded(\"Gender of contact\", v),\n              onclick: (val: Option) => {\n                selectionList(\n                  [\"Female\", \"Male\"],\n                  (selection: string) => val.value = selection,\n                  {\n                    title: \"Select sex\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                )\n              }\n            },\n          });\n          const resultOptionField = () => ({\n            label: \"Result\",\n            value: \"N/A\",\n            other: {\n              obs: (v: string) => {\n                if (v && !/n\\/a/i.test(`${v}`)) {\n                  return this.service.buildValueCoded('Test 1', v)\n                }\n              },\n              onclick: (val: Option, rows: Option[]) => {\n                selectionList([\n                  'Negative',\n                  'Positive',\n                  'N/A'\n                ], \n                (selection: string) => {\n                  broadcast(rows, 'Result', selection, val.value)\n                  val.value = selection\n                }, {\n                  title: 'Directly-assisted HIV Result'\n                })\n              }\n            }\n          })\n          const ageOptionField = () => ({\n            label: \"Age\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue === 'Self') {\n                    return { value: `${f.birthdate.value}`, disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string, d: Option) => {\n                const age = parseInt(v)\n                if (d?.other?.estimate) {\n                  return this.service.buildNumericEstimate('Age of contact', age)\n                } else {\n                  const estimatedDOB = DateHelper.estimateDateFromAge(age)\n                  return this.service.buildObs(\"Age of contact\", {\n                      'value_datetime': estimatedDOB,\n                      'value_numeric': age\n                  })\n                }\n              },\n              onclick: (val: Option) => {\n                numericKeypad((age: number | string, isEstimate: boolean | undefined) => {\n                  if (age && parseInt(`${age}`) >= 125) {\n                    val.value =''\n                    return toastWarning(`Age exceeds maximum human life expectancy of 124 years`)\n                  }\n                  val.value = age\n                  val.other.estimate = isEstimate\n                }, \n                {\n                  title: 'Age',\n                  preset: ' ',\n                  toggleButton: \"Age is estimated?\",\n                  noFloat: true,\n                  strictNumbers: true\n                });\n              },\n            },\n          });\n          const approachOptionField = () => ({\n            label: \"Approach\",\n            value: \"\",\n            other: {\n              broadcastlistener: (channel: string, newValue: string) => {\n                if (channel === 'User') {\n                  if (newValue != 'Self') {\n                    return { value: \"Un-assisted\", disabled: true }\n                  }\n                  return { value: \"\", disabled: false }\n                }\n              },\n              obs: (v: string) => this.service.buildValueCoded(\"Self-test approach\", v),\n              onclick: (val: Option, rows: any[]) => {\n                selectionList(\n                  [\"Directly-assisted\", \"Un-assisted\"],\n                  (v: string) => {\n                    broadcast(rows, 'Approach', v, val.value)\n                    val.value = v\n                  },\n                  {\n                    title: \"Select approach\",\n                    size: \"small-modal\",\n                    preset: val != null ? val.value : \"\",\n                  }\n                );\n              },\n            },\n          });\n          const kits = this.getSelfKitCount(f);\n          const generateRows = (count = kits) =>\n            Array.from({ length: count }, () => {\n              return {\n                label: \"item\",\n                value: \"N/A\",\n                other: {\n                  fields: [\n                    userOptionField(),\n                    genderOptionField(),\n                    ageOptionField(),\n                    approachOptionField(),\n                    resultOptionField()\n                  ],\n                },\n              };\n            });\n          if (Array.isArray(f.self_test_kits)) {\n            if (kits < f.self_test_kits.length) {\n              return f.self_test_kits.slice(0, kits);\n            } else if (kits > f.self_test_kits.length) {\n              return [\n                ...f.self_test_kits,\n                ...generateRows(\n                  kits - f.self_test_kits.length\n                ),\n              ];\n            } else {\n              return f.self_test_kits;\n            }\n          }\n          return generateRows();\n        },\n      };\n    },\n    visitTypeField(): Field {\n      return {\n        id: \"visit_type\",\n        helpText: \"Visit Type\",\n        type: FieldType.TT_HIDDEN,\n        isRequired: () => true,\n        computedValue: (v: Option) => {\n          return {\n            tag: 'reg',\n            obs: this.service.buildValueCoded(\"Visit type\", \"Self test distribution\")\n          }\n        },\n      }\n    },\n    patientDemographics(): Field[] {\n      return [\n        (() => {\n          const name = PersonField.getGivenNameField();\n          name.validation = () => {\n            return true;\n          };\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getFamilyNameField();\n          name.type = FieldType.TT_HIDDEN;\n          name.validation = () => {\n            return true;\n          };\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeDistrictField();\n          name.type = FieldType.TT_HIDDEN;\n\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeTaField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getHomeVillageField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentDistrictField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentTAfield();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCurrentVillageField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n        (() => {\n          const name = PersonField.getCellNumberField();\n          name.type = FieldType.TT_HIDDEN;\n          name.computedValue = () => {\n            return { person: \"Unknown\" };\n          };\n          return name;\n        })(),\n      ];\n    },\n  },\n});\n","import { render } from \"./HtsESelfTestRegister.vue?vue&type=template&id=0aff3c87&ts=true\"\nimport script from \"./HtsESelfTestRegister.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsESelfTestRegister.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                            created = true\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            })\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Region of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'District of current residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'District of current residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'TA of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Village of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { Service } from \"@/services/service\";\nimport { find, isEmpty } from \"lodash\";\nimport { ref } from \"vue\";\nimport UserProp from \"@/composables/userproperty\"\n\nexport enum KitProp {\n    TEST_KIT_USER_PROPERTY = 'hts_user_assigned_kits',\n    HIV_SELF_KIT = 'HIV self-kit',\n    SYPHILIS = 'Syphilis',\n    HEPATITIS = 'Hepatitis B',\n    BIOLINE = 'Bioline',\n    DETERMINE = 'Determine',\n    UNIGOLD = 'Unigold'\n}\n\nexport function TestKit() {\n    const kits = ref<any>([])\n    const { getUserProp, setUserProp } = UserProp()\n\n    const getSelectedTests = async () => {\n        try {\n            const req = await getUserProp('HTS_PROGRAMS')\n            return `${req||''}`.split(',').map((prop: string) => prop.trim())\n        } catch (e) {\n            console.error(`${e}`)\n        }\n        return []\n    }\n\n    const initKits = async () => {\n        const defaultKits = [\n            {\n                kitName: KitProp.UNIGOLD,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.DETERMINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.BIOLINE,\n                lotNo: '',\n                expiryDate: '',\n                testGroup: 'profession_hiv_kit',\n                visible: true,\n                userProp: \"HIV Test\"\n            },\n            {\n                kitName: KitProp.HIV_SELF_KIT,\n                lotNo: '',\n                expiryDate: '',\n                visible: true\n            },\n            {\n                kitName: KitProp.SYPHILIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Syphilis Test\"\n            },\n            {\n                kitName: KitProp.HEPATITIS,\n                lotNo: '',\n                expiryDate: '',\n                visible: true,\n                userProp: \"Hepatitis B Test\"\n            }\n        ]\n        try {\n            const selectedKits = await getSelectedTests()\n            const req: any = await getUserProp(KitProp.TEST_KIT_USER_PROPERTY)\n            const prevKits = JSON.parse(req||'')\n\n            defaultKits.forEach((kit: any) => {\n                if (kit.userProp && !isEmpty(selectedKits)) {\n                    kit.visible = selectedKits.includes(kit.userProp)\n                }\n                const preset = find(prevKits, { kitName: kit.kitName })\n                if (preset) {\n                    kit.lotNo = preset.lotNo\n                    kit.expiryDate = preset.expiryDate\n                }\n            })\n            kits.value = defaultKits.filter((k: any) => k.visible)\n        } catch (e) {\n            kits.value = defaultKits\n            console.error(`${e}`)\n        }\n        \n    }\n\n    const getLotNo = (kitName: KitProp) => {\n        const data = find(kits.value, { kitName })\n        if (data) {\n            if(new Date(data.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return data.lotNo\n        } \n        return ''\n    }\n\n    const getExpiryDate = (kitName: KitProp) => {\n        const date = find(kits.value, { kitName })\n        if (date) {\n            if (new Date(date.expiryDate) <= new Date(Service.getSessionDate())) {\n                return ''\n            }\n            return date.expiryDate\n        }\n        return ''\n    }\n\n    const saveKits = () => setUserProp(KitProp.TEST_KIT_USER_PROPERTY, JSON.stringify(kits.value))\n\n    return {\n        kits,\n        initKits,\n        saveKits,\n        getLotNo,\n        getExpiryDate\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}