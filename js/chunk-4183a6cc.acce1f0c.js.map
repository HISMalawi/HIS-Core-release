{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/Registration.vue?5d96","webpack:///./src/apps/ART/services/registration_service.ts","webpack:///./src/apps/ART/views/encounters/Registration.vue","webpack:///./src/apps/ART/views/encounters/Registration.vue?e39f","webpack:///./src/apps/ART/services/vitals_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","ClinicRegistrationService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","mixins","StagingMixin","data","registration","prescription","dispensation","regimens","customRegimens","vitals","watch","ready","this","canShowStagingFields","VitalsService","showStagingWeightChart","getRegistrationFields","immediate","methods","formData","computedData","fObs","createEncounter","hasStaging","submitStaging","saveObservationList","resolveObs","toastSuccess","nextTask","buildDateObs","conceptName","date","isEstimate","obs","match","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","type","FieldType","TT_MULTIPLE_YES_NO","summaryMapValue","value","label","validation","v","validateSeries","Validation","required","anyEmpty","computedValue","d","forEach","push","buildValueCoded","tag","options","f","isEmpty","followup_agreement","other","values","yesNoOptions","TT_YES_NO","TT_TEXT","condition","has_linkage_code","TT_SELECT","generateDateFields","minDate","patient","getBirthdate","maxDate","staging","getDate","received_arvs","estimation","allowUnknown","computeValue","yesNoUnknownOptions","year_date_last_taken_arvs","duration","taken_art_in_last_two_months","HisDate","getDateBeforeByDays","val","ever_registered_at_art_clinic","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","init","async","initStaging","beforeNext","age","dayjs","diff","setAge","stagingFacts","ageInMonths","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","setDate","TT_NUMBER","has_transfer_letter","buildValueNumber","isNumber","rangeOf","unload","s","weight","height","bmi","BMIService","getBMI","getGender","getAge","isPedaid","medianWh","getMedianWeightHeight","weightPercentile","parseFloat","e","fullValue","modifier","isNotEmptyandFloat","customKeyboard","getStagingFields","new_cd4_percent_available","parseInt","toString","substring","onValue","cd4CountIsValid","toastWarning","CD4_COUNT_PAD_LO","infoActionSheet","name","color","slot","disabled","defaultValue","getLocationName","type_of_confirmatory_hiv_test","timeElapsed","action","confirmatory_hiv_test_location","getStagingSummaryField","__exports__","isNotEmptyandNumber","vital","checkMinMax","min","max","p","length","validateAll","map","j","validator","isArray","mergeErrors","errors","holder","element","isValidBPReading","isValidBP","split","bpSystolic","bpDiastolic","emptyErrors","minErrors"],"mappings":"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","file":"js/chunk-4183a6cc.acce1f0c.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ClinicRegistrationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 9, providerID) //TODO: Use encounter type reference name'\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport StagingMixin from \"@/apps/ART/views/encounters/StagingMixin.vue\"\nimport {ClinicRegistrationService} from \"@/apps/ART/services/registration_service\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { toastWarning, toastSuccess} from \"@/utils/Alerts\"\nimport { VitalsService } from \"@/apps/ART/services/vitals_service\";\nimport { BMIService } from \"@/services/bmi_service\"\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport HisDate from \"@/utils/Date\"\nimport dayjs from \"dayjs\";\nimport { isEmpty } from 'lodash'\n\nexport default defineComponent({\n    mixins: [StagingMixin],\n    data: () => ({\n        registration: {} as any,\n        prescription: {} as any,\n        dispensation: {} as any,\n        regimens: [] as Option[],\n        customRegimens: [] as Option[],\n        vitals: {} as any,\n    }),\n    watch: {\n        ready: {\n            async handler(ready: any) {\n                if (!ready) return\n                // Hide staging fields defined in StagingMixin by Default\n                this.canShowStagingFields = false\n                this.registration = new ClinicRegistrationService(this.patientID, this.providerID)\n                this.vitals = new VitalsService(this.patientID, this.providerID)\n                this.showStagingWeightChart = false\n                this.fields = this.getRegistrationFields()\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any) {\n            const fObs = {...computedData}\n\n            await this.registration.createEncounter()\n\n            if (this.hasStaging(formData)) {\n                await this.submitStaging(computedData)\n                await this.vitals.createEncounter()\n                await this.vitals.saveObservationList(\n                    (await this.resolveObs(fObs, 'vitals'))\n                )\n            }\n\n            await this.registration.saveObservationList(\n                (await this.resolveObs(fObs, 'reg'))\n            )\n\n            toastSuccess('Clinic registration complete!')\n\n            this.nextTask()\n        },\n        buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n            let obs = {}\n            if (date.match(/unknown/i)) {\n                obs = this.registration.buildValueText(conceptName, 'Unknown')\n            } else if (isEstimate) {\n                obs = this.registration.buildValueDateEstimated(conceptName, date)\n            } else {\n                obs = this.registration.buildValueDate(conceptName, date)\n            }\n            return obs\n        },\n        getRegistrationFields() {\n            return [\n                {\n                    id: 'followup_agreement',\n                    helpText: 'Agrees to follow-up',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    summaryMapValue: ({value, label}: Option) => ({\n                        value,\n                        label: `${label} followup`\n                    }),\n                    validation: (v: any) => this.validateSeries([\n                       () => Validation.required(v), \n                       () => Validation.anyEmpty(v)\n                    ]),\n                    computedValue: (d: Array<Option>) => {\n                        const obs: any = []\n                        d.forEach(({ label, value }: Option) => {\n                            obs.push(this.registration.buildValueCoded(label, value))\n                            obs.push(this.registration.buildValueCoded('Agrees to followup', label))\n                        })\n                        return { tag:'reg', obs }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.followup_agreement)) {\n                            return f.followup_agreement\n                        } else {\n                            return [\n                                {\n                                    label: 'Phone',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                    }\n                                },\n                                {\n                                    label: 'Home visit',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions()\n                                    }\n                                }\n                            ] \n                        }\n                    }\n                },\n                {\n                    id: \"has_linkage_code\",\n                    helpText: 'HTS Linkage number confirmation',\n                    type: FieldType.TT_YES_NO,\n                    summaryMapValue: (v: any) => {\n                        return {\n                            label: \"Has HTS Linkage number?\",\n                            value: v\n                        }\n                    },\n                    validation: (v: string) => Validation.required(v),\n                    options: () => [\n                        {\n                            label: \"Does client have an HTS Linkage number?\",\n                            value: \"\",\n                            values: this.yesNoOptions(),\n                        }\n                    ]\n                },\n                {\n                    id: 'hts_serial_number',\n                    helpText: 'HTS Linkage Number',\n                    type: FieldType.TT_TEXT,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => f.has_linkage_code === 'Yes',\n                    computedValue: (v: Option) => {\n                        return {\n                            tag: 'reg',\n                            obs: this.registration.buildValueText('HTC Serial number', v.value)\n                        }\n                    }\n                },\n                {\n                    id: 'received_arvs',\n                    helpText: 'Ever received ARVs for treatment or prophylaxis?',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({value}: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Ever received ART', value\n                        )\n                    }),\n                    validation: (v: any) => Validation.required(v),\n                    options: () => this.yesNoOptions()\n                },\n                ...generateDateFields({\n                    id: 'date_last_taken_arvs',\n                    helpText: 'Last taken ARVS',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) => f.received_arvs.value === 'Yes',\n                    estimation: {\n                        allowUnknown: true\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Date ART last taken', date, isEstimate) \n                        }\n                    }\n                }, this.registration.getDate()),\n                {\n                    id: 'taken_art_in_last_two_months',\n                    helpText: 'Taken ARVs in the last two months?',\n                    type: FieldType.TT_SELECT,\n                    validation: (v: any) => Validation.required(v),\n                    computedValue: ({value}: Option) => {\n                        return {\n                            tag:'reg',\n                            obs: [\n                                this.registration.buildValueCoded(\n                                    'Has the patient taken ART in the last two months', value\n                                )\n                            ]\n                        }\n                    },\n                    options: () => this.yesNoUnknownOptions(),\n                    condition: (f: any) => f.year_date_last_taken_arvs.value === 'Unknown'\n                },\n                {\n                    id: 'taken_art_in_last_two_weeks',\n                    helpText: \"Taken ARV's in the last two weeks?\",\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({ value }: Option, f: any) => {\n                        let date = ''\n                        const obs = []\n                        let duration = -1\n\n                        if (value === 'Yes') {\n                            duration = 14\n                        } else if (f.taken_art_in_last_two_months.value === 'Yes') {\n                            duration = 60\n                        }\n\n                        if (duration > 0) {\n                            date = HisDate.getDateBeforeByDays(this.registration.getDate(), duration)\n                            obs.push(this.registration.buildValueDateEstimated('Date ART last taken', date))\n                        }\n                        return {\n                            date,\n                            tag:'reg',\n                            obs: [\n                                ...obs,\n                                this.registration.buildValueCoded(\n                                    'Has the patient taken ART in the last two weeks', value\n                                )\n                            ]\n                        }\n                    },\n                    validation: (v: any) => Validation.required(v),\n                    condition: (f: any) => f.taken_art_in_last_two_months.value === 'Yes',\n                    options: () => this.yesNoUnknownOptions()\n                },\n                {\n                    id: 'ever_registered_at_art_clinic',\n                    helpText: 'Ever registered at an ART clinic?',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Ever registered at ART clinic', value\n                        )\n                    }),\n                    validation: (v: any) => Validation.required(v),\n                    condition: (f: any) => f.received_arvs.value === 'Yes',\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'location_of_art_initialization',\n                    helpText: 'Location of ART initiation',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({label}: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'Location of ART initiation', label\n                        )\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    options: (_: any, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                ...generateDateFields({\n                    id: 'date_started_art',\n                    helpText: 'Started ART',\n                    required: true,\n                    init: async () => {\n                        await this.initStaging(this.patient)\n                        return true\n                    },\n                    beforeNext: (date: string) => {\n                        const age = dayjs(date).diff(this.patient.getBirthdate(), 'years')\n                        this.staging.setAge(age)\n                        this.stagingFacts.age = age\n                        this.stagingFacts.ageInMonths = age * 12\n                        return true\n                    },\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        this.staging.setDate(date)\n                        this.vitals.setDate(date)\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Date ART started', date, isEstimate) \n                        }\n                    },\n                }, this.registration.getDate()),\n                {\n                    id: 'previous_art_number',\n                    helpText: 'ART number at previous location',\n                    type: FieldType.TT_TEXT,\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    computedValue: (d: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'ART number at previous location', d.value\n                        )\n                    }),\n                    validation: (val: Option) => Validation.required(val)\n                },\n                {\n                    id: 'has_transfer_letter',\n                    helpText: 'Has staging information?',\n                    type: FieldType.TT_SELECT,\n                    validation: (v: any) => Validation.required(v),\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Has transfer letter', value\n                        )\n                    }),\n                    options: () => this.yesNoOptions(),\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                },\n                {\n                    id: 'height',\n                    helpText: 'Height (CM)',\n                    type: FieldType.TT_NUMBER,\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    computedValue: ({ value }: Option) => ({\n                        tag:'vitals',\n                        obs: this.vitals.buildValueNumber('Height', value)\n                    }),\n                    validation: (val: any) => this.validateSeries([\n                        () => Validation.required(val),\n                        () => Validation.isNumber(val),\n                        () => Validation.rangeOf(val, 40, 222)\n                    ])\n                },\n                {\n                    id: 'weight',\n                    helpText: 'Weight (Kg)',\n                    type: FieldType.TT_TEXT,\n                    unload: async (d: any, s: string, f: any) => {\n                        const weight = f.weight.value\n                        const height = f.height.value\n                        const bmi = await BMIService.getBMI(\n                            weight, height, \n                            this.patient.getGender(),\n                            this.patient.getAge()\n                        )\n\n                        this.stagingFacts.bmi = bmi['index']\n\n                        if (!this.staging.isPedaid()) return\n\n                        const medianWh = await this.patient.getMedianWeightHeight()\n\n                        try {\n                            //TODO: this calculation is already defined in patient_service.. must refactor it to make it reusable here\n                            this.stagingFacts.weightPercentile = parseFloat(weight) / (parseFloat(medianWh[\"weight\"])) * 100\n                        } catch (e) {\n                            this.stagingFacts.weightPercentile = 0\n                        }\n                    },\n                    computedValue: ({ value }: Option) => ({\n                        tag:'vitals',\n                        obs: this.vitals.buildValueNumber('weight', value)\n                    }),\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    validation: (val: any) => this.validateSeries([\n                        () => {\n                            const fullValue = {\n                                ...val, other: { modifier: '.' }\n                            }\n                            return this.vitals.isNotEmptyandFloat(fullValue)\n                        },\n                        () => Validation.rangeOf(val, 1, 300)\n                    ]),\n                    config: {\n                        customKeyboard: [\n                            [\n                                ['1', '2', '3', ''],\n                                ['4', '5', '6', ''],\n                                ['7', '8', '9', '.'],\n                                ['',  '0', '' , '']\n                            ],\n                            [\n                                ['Delete']\n                            ]\n                        ]\n                    }\n                },\n                /*** \n                    Start Staging Fields\n                ***/\n                ...this.getStagingFields(),\n                /** \n                    End Staging Fields\n                ***/\n                {\n                    id: 'new_cd4_percent_available',\n                    helpText: 'CD4 percent available',\n                    type: FieldType.TT_SELECT,\n                    options: () => this.yesNoOptions(),\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    validation: (val: any) => Validation.required(val)\n                },\n                {\n                    id: 'cd4_percent',\n                    helpText: 'CD4 Percent',\n                    type: FieldType.TT_TEXT,\n                    condition: (f: any) => f.new_cd4_percent_available.value === 'Yes',\n                    computedValue: ({ value }: Option) => ({\n                        tag:'staging',\n                        obs: this.registration.buildValueNumber(\n                            'CD4 percent', parseInt(value.toString().substring(1)), '%'\n                        )\n                    }),\n                    onValue: (d: Option) => {\n                        if (d.value && !this.staging.cd4CountIsValid(d.value)) {\n                            toastWarning('Cd4 percentage invalid. Use one modifier or start with either of these symbols: >, < or =')\n                            return false\n                        }\n                        return true\n                    },\n                    validation: (val: any) => Validation.required(val),\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Delete']\n                            ]\n                        ]\n                    }\n                },\n                {\n                    id: 'type_of_confirmatory_hiv_test',\n                    helpText: 'Confirmatory HIV test',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: any) => Validation.required(val),\n                    onValue: async (val: Option) => {\n                        if (val.value === 'Not done') {\n                            await infoActionSheet(\n                                'Reminder',\n                                'UNKNOWN HIV CONFIRMATORY TEST',\n                                'Please arrange for a confirmatory test',\n                                [\n                                    { name: 'Agreed', color: 'success', slot: 'start'}\n                                ]\n                            )\n                        }\n                        return true\n                    },\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Confirmatory hiv test type', value\n                        )\n                    }),\n                    options: (f: any) => ([\n                        { label: 'Rapid antibody test', value: 'HIV rapid test'},\n                        { label: 'DNA PCR', value: 'HIV DNA polymerase chain reaction'},\n                        { label: 'Not done', value: 'Not done', disabled: f.has_linkage_code === 'Yes' }\n                    ])\n                },\n                {\n                    id: 'confirmatory_hiv_test_location',\n                    helpText: 'Location of confirmatory HIV test',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: (d: any) => (d.ever_registered_at_art_clinic && d.ever_registered_at_art_clinic.value) === \"Yes\"? '' : ClinicRegistrationService.getLocationName(),\n                    computedValue: (d: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'Confirmatory HIV test location', d.label\n                        ) \n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    condition: (f: any) => f.type_of_confirmatory_hiv_test.value != 'Not done',\n                    options: (_: any, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                ...generateDateFields({\n                    id: 'date_of_confirmatory_hiv_test',\n                    helpText: 'Confirmatory HIV test',\n                    beforeNext: async (date: string, formData: any) => {\n                        if (formData.received_arvs.value != 'Yes') {\n                            const timeElapsed = dayjs(this.staging.getDate()).diff(date, 'days')\n                            if (timeElapsed >= 20) {\n                                const action = await infoActionSheet(\n                                    'Data inconsistency warning',\n                                    `Confirmatory Date for newly initiated ART patient is ${timeElapsed} days ago`,\n                                    'Are you sure this is accurate?',\n                                    [\n                                        { name: 'No, Re-enter date', slot: 'start', color: 'success'},\n                                        { name: 'Yes, its accurate', slot: 'end', color: 'danger'}\n                                    ]\n                                )\n                                return action === 'Yes, its accurate'\n                            }\n                        }\n                        return true\n                    },\n                    condition: (f: any) => f.confirmatory_hiv_test_location.value,\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Confirmatory HIV test date', date, isEstimate) \n                        }\n                    },\n                }, this.registration.getDate()),\n                this.getStagingSummaryField('Staging summary')\n            ]\n        }\n    }\n})\n","import { render } from \"./Registration.vue?vue&type=template&id=a8d823a2&ts=true\"\nimport script from \"./Registration.vue?vue&type=script&lang=ts\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { isArray } from \"lodash\";\nimport { Option } from '@/components/Forms/FieldInterface';\nexport class VitalsService extends AppEncounterService{\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 6, providerID);\n  }\n  isNotEmptyandNumber(vital: Option) {\n    return `${vital.value}`.match(/^-?\\d+\\.?\\d*$/) ? null : [`Invalid entry for ${vital.label}`]\n  }\n  isNotEmptyandFloat(vital: Option) {\n    return `${vital.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/) \n      ? null \n      : [`Invalid entry for ${vital.label}. Don't forget to add a decimal. e.g. 56.2 ${vital.other.modifier}`]\n  }\n  checkMinMax(val: Option, min: number, max: number) {\n    const p = [];\n    if (parseFloat(`${val.value}`) < min) {\n      p.push([`${val.label} entered is less than minimum ${min} ${val?.other?.modifier || ''}`])\n    }\n    if (parseFloat(`${val.value}`) > max) {\n      p.push([`${val.label} entered is greater than maximum ${max} ${val?.other?.modifier || ''}`])\n    }\n    return p.length > 0 ? p : null;\n  }\n  validateAll(vitals: Option[]) {\n    const p: any = [];\n    vitals.map((vital: any) => {\n      const j = this.validator(vital);\n      return isArray(j) ? p.push(j) : null\n    })\n    return p.length > 0 ? p : null;\n  }\n\n  mergeErrors(errors: any[]) {\n    const holder: any = [];\n    errors.forEach(element => {\n      if (isArray(element)) {\n        holder.push(element)\n      }\n    });\n    return holder.length > 0 ? holder : null\n  }\n  isValidBPReading(vital: any) {\n    const p = [];\n    const isValidBP =  `${vital.value}`.match(/^\\d{1,3}\\/\\d{1,3}$/g) ? null : ['Invalid BP reading']\n    p.push(isValidBP);\n    if(isValidBP == null) {\n      const value = `${vital.value}`.split('/');\n      \n      const bpSystolic = {\n        label: 'Systolic',\n        value: value[0]\n      };\n      const bpDiastolic = {\n        label: 'Diastolic',\n        value: value[1]\n      };\n      p.push(this.checkMinMax(bpDiastolic, 30, 200))\n      p.push(this.checkMinMax(bpSystolic, 40, 250))\n    }\n    return this.mergeErrors(p)\n  }\n  validator(vital: Option) {\n    const values = [\n      {\n        name: \"Weight\",\n        validator: (val: Option) => {\n          const emptyErrors = this.isNotEmptyandFloat(val);\n          const minErrors = this.checkMinMax(val, 2.0, 250.0);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      },\n      {\n        name: \"Height\",\n        validator: (val: Option) => {\n          const errors = []\n          errors.push(this.isNotEmptyandNumber(val))\n          errors.push(this.checkMinMax(val, 40, 220))\n          return this.mergeErrors(errors); \n        },\n      }, {\n        name: \"BP\",\n        validator: (val: any) => {\n          return this.isValidBPReading(val)\n        },\n      }, {\n        name: \"Temp\",\n        validator: (val: any) => {\n          const emptyErrors = this.isNotEmptyandNumber(val);\n          const minErrors = this.checkMinMax(val, 30, 42);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      }, {\n        name: \"SP02\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 40, 100);\n          return this.mergeErrors([minErrors]); \n        },\n      }, {\n        name: \"Pulse\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 50, 120);\n          return this.mergeErrors([minErrors]); \n        },\n      }\n    ]\n    const v = values.filter(element => {\n      return element.name === vital.label;\n    });\n    if (v.length > 0) {\n      return v[0].validator(vital);\n    }\n    return null\n  }\n}"],"sourceRoot":""}