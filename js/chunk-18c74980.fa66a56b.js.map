{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/Examination.vue?591c","webpack:///./src/apps/ANC/Services/anc_examination_service.ts","webpack:///./src/apps/ANC/Views/Encounters/Examination.vue","webpack:///./src/apps/ANC/Views/Encounters/Examination.vue?02c1","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ANC/Services/anc_current_pregnancy.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","FUNDAL_CM_TO_WEEKS","AncExaminationService","AppEncounterService","constructor","patientID","providerID","super","_defineProperty","this","gestationWeeks","expectedFundalHeightForGestationWeeks","getEquivalentFundalHeight","res","getJson","programID","dateofLmp","p","AncCurrentPregnancyService","parseInt","calculateWeekOfFirstVisit","getEquivalentFundalWeeks","fundalHeight","cm","weeks","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","loadPregnancyStatus","getFields","immediate","methods","computedData","createEncounter","saveObservationList","resolveObs","nextTask","diagnosisOptions","onMap","ConceptService","getConceptsByCategory","name","map","c","toOption","isChecked","id","helpText","type","FieldType","TT_SELECT","validation","v","Validation","required","computedValue","buildValueCoded","value","options","yesNoOptions","buildValueText","condition","f","ultrasound","label","mapStrToOptions","TT_GROUP_SELECTOR","validateSeries","_v$other","_v$other2","_v$other3","other","subGroupOptions","isEmpty","subGroupOptionValue","subgroupTitle","_v$other4","_v$other5","_v$other6","_v$other7","_v$other8","obs","_v$other9","push","concept","presentation","TT_NUMBER","dynamicHelpText","title","beforeNext","async","match","includes","alertConfirmation","expectedFundalHeight","val","rangeOf","buildValueNumber","buildObs","config","keypad","NUMBERS_WITH_UNKNOWN","min","max","ok","fetal_heart_beat","fetal_movement_felt","yesNoUnknownOptions","TT_MULTIPLE_SELECT","d","onValueUpdate","listData","l","o","footerBtns","slot","onClickComponentEvents","refreshOptions","onClick","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","created","$route","params","patient_id","goOffline","initOfflineData","Store","get","then","patientData","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","endTime","elapsedTime","minutes","userAgentObs","getPlatformName","durationObs","error","toastWarning","enc","encounterTypeID","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","formData","labOrders","skipNextTask","runflowState","state","states","username","split","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","_p$person","names","_p$person2","latestName","given_name","family_name","items","i","path","toYesNoOption","values","mapOptions","option","toConditionalOptions","final","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","$emit","isCondition","ignored","undefined","prop","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","description","text","info","PatientProgramService","enrollProgram","setStateDate","date","setStateId","updateState","lnmpDate","theDate","setDate","getDate","today","s","Math","floor","calculateGestationDateFromPeriod","period","subtract","endOf","format","estimateDelieveryDate","setMonth","getMonth","month","AppendleadingZero","day","getFullYear"],"mappings":"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","file":"js/chunk-18c74980.fa66a56b.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { AncCurrentPregnancyService } from \"@/apps/ANC/Services/anc_current_pregnancy\";\n\nexport const FUNDAL_CM_TO_WEEKS: Record<string, number> = {\n  '12' : 13,\n  '13' : 14,\n  '14' : 16,\n  '15' : 17,\n  '16' : 18,\n  '17' : 19,\n  '18' : 20,\n  '19' : 21,\n  '20' : 22,\n  '21' : 24,\n  '22' : 25,\n  '23' : 25, // Not in the actual CM to Weeks chart reference documentation in clinics..\n  '24' : 27,\n  '25' : 28,\n  '26' : 29,\n  '27' : 30,\n  '28' : 32,\n  '29' : 33,\n  '30' : 34,\n  '31' : 35,\n  '32' : 36,\n  '33' : 37,\n  '34' : 38,\n  '35' : 39,\n  '36' : 40,\n  '37' : 42\n}\n\nexport class AncExaminationService extends AppEncounterService {\n  gestationWeeks: number;\n  constructor(patientID: number, providerID: number){\n    super(patientID, 98, providerID)\n    this.gestationWeeks = 0\n  }\n\n  expectedFundalHeightForGestationWeeks() {\n    return this.getEquivalentFundalHeight(this.gestationWeeks)\n  }\n\n  async loadPregnancyStatus() {\n    const res = await AppEncounterService.getJson(`programs/${this.programID}/patients/${this.patientID}`)\n    if (res) {\n      const dateofLmp = res['date_of_lnmp']\n      if (dateofLmp) {\n        const p = new AncCurrentPregnancyService(this.patientID, this.providerID)\n        this.gestationWeeks = parseInt(p.calculateWeekOfFirstVisit(res['date_of_lnmp']))\n      }\n    }\n  }\n\n  getEquivalentFundalWeeks(fundalHeight: number): number {\n    if (fundalHeight < 12) {\n      return FUNDAL_CM_TO_WEEKS['12']\n    }\n    if (fundalHeight > 37) {\n      return FUNDAL_CM_TO_WEEKS['37']\n    }\n    return FUNDAL_CM_TO_WEEKS[fundalHeight]\n  }\n\n  getEquivalentFundalHeight(gestationWeeks: number) {\n    for (const cm in FUNDAL_CM_TO_WEEKS) {\n      const weeks = FUNDAL_CM_TO_WEEKS[cm]\n      if (gestationWeeks <= weeks) { \n        return parseInt(cm)\n      }\n    }\n    return gestationWeeks > 42 ? 37 : gestationWeeks < 13 ? 12 : 0\n  }\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncExaminationService } from \"@/apps/ANC/Services/anc_examination_service\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { ConceptService } from '@/services/concept_service'\nimport { isEmpty } from 'lodash'\nimport { alertConfirmation } from '@/utils/Alerts'\nimport { NUMBERS_WITH_UNKNOWN } from \"@/components/Keyboard/HisKbConfigurations\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n            this.service = new AncExaminationService(this.patientID, this.providerID)\n            await this.service.loadPregnancyStatus()\n            this.fields = this.getFields() as Field[]\n        } \n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      await this.service.createEncounter()\n      await this.service.saveObservationList((await this.resolveObs(computedData)))\n      this.nextTask()\n    },\n    diagnosisOptions(onMap: (item: Option) => Option) {\n        return [...ConceptService.getConceptsByCategory('anc_diagnosis'),{ name: 'None'}]\n            .map((c: any) => (onMap({\n                ...this.toOption(c.name), isChecked: false \n            })))\n    },\n    getFields() {\n      return [\n        {\n          id: 'ultrasound',\n          helpText: 'Ultrasound scan results available',\n          type: FieldType.TT_SELECT,\n          validation: (v: Option) => Validation.required(v),\n          computedValue: (v: Option) => this.service.buildValueCoded(\n            'Ultrasound', v.value\n          ),\n          options: () => this.yesNoOptions()\n        },\n        {\n            id: 'multiple_gestation',\n            helpText: 'Number of fetuses',\n            type: FieldType.TT_SELECT,\n            validation: (v: Option) => Validation.required(v),\n            computedValue: (v: Option) => this.service.buildValueText(\n                'Multiple gestation', v.value),\n            condition: (f: any) => f.ultrasound.value === 'Yes',\n            options: () => [\n                { label: 'One', value: 1 },\n                { label: 'Two', value: 2 },\n                { label: 'Three', value: 3 },\n                { label: 'Four', value: 4 },\n                { label: 'Unknown', value: 'Unknown' }\n            ]\n        },\n        {\n            id: 'liquor',\n            helpText: 'Liquor',\n            type: FieldType.TT_SELECT,\n            validation: (v: Option) => Validation.required(v),\n            computedValue: (v: Option) => this.service.buildValueText(\n                'LIQUOR', v.value),\n            condition: (f: any) => f.ultrasound.value === 'Yes',\n            options: () => this.mapStrToOptions([\n                'Adequate',\n                'Not adequate',\n                'Unknown'\n            ])\n        },\n        {\n            id: 'lie',\n            helpText: 'Lie',\n            type: FieldType.TT_SELECT,\n            validation: (v: Option) => Validation.required(v),\n            computedValue: (v: Option) => this.service.buildValueText(\n                'Lie', v.value),\n            condition: (f: any) => f.ultrasound.value === 'Yes',\n            options: () => this.mapStrToOptions([\n                'Longitudinal',\n                'Transverse',\n                'Unknown'\n            ])\n        },\n        {\n            id: 'fetal_heart_movement_seen',\n            helpText: 'Fetal heart movement seen',\n            type: FieldType.TT_SELECT,\n            validation: (v: Option) => Validation.required(v),\n            computedValue: (v: Option) => this.service.buildValueCoded(\n                'Fetal heart movement seen', v.value),\n            condition: (f: any) => f.ultrasound.value === 'Yes',\n            options: () => this.yesNoOptions()\n        },\n        {\n            id: 'presentation',\n            helpText: 'Presentation',\n            type: FieldType.TT_GROUP_SELECTOR,\n            validation: (v: Option) => this.validateSeries([\n                () => Validation.required(v),\n                () => {\n                    /**\n                     * Validate if Presentation's value is selected\n                     */\n                    if (v && !v.value) {\n                        return [`Presentation cannot be Empty!`]\n                    } \n                    return null\n                },\n                () => {\n                    /**\n                     * Validate if option has subgroup options but value is not selected\n                     */\n                    if (v && v?.other?.subGroupOptions && isEmpty(v?.other?.subGroupOptionValue)) {\n                        return [`${v?.other?.subgroupTitle || 'Subgroup'} has no value selected`]\n                    }\n                    return null\n                },\n                () => {\n                    /**\n                     * Validate if the subgroup with Options has selected items\n                     */\n                    if (v && !isEmpty(v?.other?.subGroupOptionValue) \n                        && !isEmpty(v?.other?.subGroupOptionValue?.other?.options)\n                        && !v?.other?.subGroupOptionValue?.value) {\n                            return [`${v?.other?.subGroupOptionValue?.label}'s value isnt selected`]\n                        }\n                    return null\n                }\n            ]),\n            computedValue: (v: Option) => {\n                const obs = [this.service.buildValueText('Presentation', v.label)]\n                if (v?.other?.subGroupOptionValue?.value) {\n                    obs.push(this.service.buildValueText(\n                        'Position', v?.other?.subGroupOptionValue?.value\n                    ))\n                }\n                return obs\n            },\n            options: (f: any) => {\n                const toOption = (label: string, value='',other={}) => ({\n                    label, value, other\n                })\n                const subGroupOptions = [\n                    toOption('Vertex', '', {\n                        options: this.mapStrToOptions([\n                            'Left Occipito Anterior',\n                            'Left Occipito Transverse',\n                            'Left Occipito Posterior',\n                            'Right Occipito Anterior',\n                            'Right Occipito Transverse',\n                            'Right Occipito Posterior',\n                            'Unknown'\n                        ])\n                    }),\n                    this.toOption('Oblique'),\n                    this.toOption('Transverse'),\n                    this.toOption('Breech',{\n                        options: this.mapStrToOptions([\n                            'Left Sacro Anterior',\n                            'Left Sacro Transverse',\n                            'Left Sacro Posterior',\n                            'Right Sacro Anterior',\n                            'Right Sacro Transverse',\n                            'Right Sacro Posterior',\n                            'Unknown'\n                        ])\n                    }),\n                    toOption('Face', '', {\n                        concept: 'Position',\n                        options: this.mapStrToOptions([\n                            'Left Mento Anterior',\n                            'Left Mento Transverse',\n                            'Left Mento Posterior',\n                            'Right Mento Anterior',\n                            'Right Mento Transverse',\n                            'Right Mento Posterior',\n                            'Unknown'\n                        ])\n                    }),\n                    toOption('Shoulder', '', {\n                        options: this.mapStrToOptions([\n                            'Left Acromion Dorsal Anterior',\n                            'Left Acromion Dorsal Transverse',\n                            'Left Acromion Dorsal Posterior',\n                            'Right Acromion Dorsal Anterior',\n                            'Right Acromion Dorsal Transverse',\n                            'Right Acromion Dorsal Posterior',\n                            'Unknown'\n                        ])\n                    })\n                ]\n                return f.presentation  ? f.presentation : [\n                    toOption('Cephalic', '', {\n                        subGroupOptions,\n                        subgroupTitle: 'Cephalic Position',\n                        options: this.mapStrToOptions([\n                            'Right Occipito Anterior',\n                            'Left Occipito Anterior',\n                            'Unknown'\n                        ])\n                    }),\n                    toOption('Breech', '', {\n                        subGroupOptions,\n                        subgroupTitle: 'Breech Position',\n                        options: this.mapStrToOptions([\n                            'Right Sacro Anterior',\n                            'Left Sacro Anterior',\n                            'Unknown'\n                        ]),\n                    }),\n                    this.toOption('Ball'),\n                    this.toOption('Nil palpable')\n                ] as Option[]\n            }\n        },\n        {\n            id: 'enter_fundal_height',\n            helpText: 'Fundal height (cm)',\n            type: FieldType.TT_NUMBER,\n            dynamicHelpText: () => {\n                const title = 'Fundal height (cm)'\n                if (this.service.gestationWeeks) {\n                    return `${title} (${this.service.gestationWeeks}wks/${this.service.getEquivalentFundalHeight(this.service.gestationWeeks)} cm)`\n                }\n                return title\n            },\n            beforeNext: async (v: Option, f: any) => {\n                if (v && `${v.value}`.match(/unknown/i) && !['Nil palpable', 'Ball'].includes(f.presentation.value)) {\n                    return (await alertConfirmation(`Do you want to proceed with Unknown Fundal height?`)) ? true : false\n                }\n                const expectedFundalHeight = this.service.expectedFundalHeightForGestationWeeks()\n                const val: string | number = v ? parseInt(v.value as string) : -1\n                if (this.service.gestationWeeks && (v && typeof val === 'number') \n                    && (val < expectedFundalHeight || val > expectedFundalHeight)) {\n                    return (await alertConfirmation(`\n                        Fundal height is not equal to expected ${expectedFundalHeight} cm from gestation weeks of ${this.service.gestationWeeks} .\n                        Are you sure about this value?`\n                    )) ? true : false\n                }\n                return true\n            },\n            validation: (v: Option) => this.validateSeries([\n                () => Validation.required(v),\n                () => v && !`${v.value}`.match(/unknown/i) \n                    ? Validation.rangeOf(v, 10, 45) \n                    : null\n            ]),\n            computedValue: (v: Option) => {\n                return v.value != 'Unknown' \n                    ? this.service.buildValueNumber('Fundus', v.value as number)\n                    : this.service.buildObs('Fundus', {\n                        'value_coded': v.value,\n                        'value_numeric': 0\n                    })\n            },\n            config: {\n                keypad: NUMBERS_WITH_UNKNOWN\n            }\n        },\n        {\n            id: 'fetal_heart_beat',\n            helpText: 'Fetal heart beat',\n            type: FieldType.TT_SELECT,\n            validation: (v: Option) => Validation.required(v),\n            computedValue: (v: Option) => this.service.buildValueText(\n                'Fetal Heart Beat', v.value),\n            options: () => this.mapStrToOptions([\n                'Heard',\n                'Not heard'\n            ])\n        },\n        {\n            id: 'fetal_heart_rate',\n            helpText: 'Fetal heart rate',\n            type: FieldType.TT_NUMBER,\n            validation: (v: Option) => Validation.required(v),\n            beforeNext: async (v: Option) => {\n                const min = 120\n                const max = 140\n                const val: string | number = v ? parseInt(v.value as string) : -1\n                if (v && typeof val === 'number') {\n                    if (val < min || val > max) {\n                        const ok = await alertConfirmation(`\n                            The value is out of Range of ${min} - ${max}.\n                            Are you sure about this value?`\n                        )\n                        return ok ? true : false\n                    }\n                }\n                return true\n            },\n            condition: (f: any) => f.fetal_heart_beat.value === 'Heard',\n            computedValue: (v: Option) => {\n                return v.value != 'Unknown'\n                    ? this.service.buildValueNumber('Fetal heart movement seen', `${v.value}`)\n                    : this.service.buildObs('Fetal heart movement seen', {\n                        'value_numeric': 0, 'value_coded': v.value\n                    })\n            },\n            config: {\n                keypad: NUMBERS_WITH_UNKNOWN\n            }\n        },\n        {\n            id: 'enter_fetal_movement',\n            helpText: 'Fetal movement heard',\n            type: FieldType.TT_SELECT,\n            validation: (v: Option) => Validation.required(v),\n            computedValue: (v: Option) => this.service.buildValueCoded(\n                'Fetal movement heard', `${v.value}`),\n            options: () => this.yesNoOptions()\n        },\n        {\n            id: 'fetal_movement_felt',\n            helpText: 'Fetal movement felt',\n            type: FieldType.TT_SELECT,\n            validation: (v: Option) => Validation.required(v),\n            condition: (f: any) => !['Ball', 'Nil palpable'].includes(f.presentation.label),\n            computedValue: (v: Option) => this.service.buildValueCoded('Fetal movement felt', `${v.value}`),\n            options: () => this.yesNoOptions()\n        },\n        {\n            id: 'last_fmf',\n            helpText: 'Last fetal movement felt (in Weeks)',\n            type: FieldType.TT_NUMBER,\n            validation: (v: Option) => Validation.required(v),\n            condition: (f: any) => f.fetal_movement_felt.value != 'Unknown',\n            computedValue: (v: Option) => {\n                return v.value != 'Unknown'\n                    ? this.service.buildValueNumber('Last Fetal movement felt', v.value as number)\n                    : this.service.buildObs('Last Fetal movement felt', {\n                        'value_numeric': 0, 'value_coded': v.value\n                    })\n            },\n            options: () => this.yesNoUnknownOptions()\n        },\n        {\n            id: 'diagnosis',\n            helpText: 'Diagnosis',\n            type: FieldType.TT_MULTIPLE_SELECT,\n            validation: (v: Option) => Validation.required(v),\n            computedValue: (v: Option[]) => {\n                if (v && v.map(d => d.value).includes('None')) {\n                    return []\n                }\n                return v.map(d => this.service.buildValueCoded(d.label, 'Yes'))\n            },\n            onValueUpdate(listData: Option[], value: Option) {\n                return listData.map(l => {\n                    if (value.value === 'None' && l.value !='None') {\n                        l.isChecked = false\n                    }\n                    if (value.value != 'None' && value.isChecked && l.value === 'None') {\n                        l.isChecked = false\n                    }\n                    return l\n                })\n            },\n            options: () => this.diagnosisOptions(o => o),\n            config: {\n                footerBtns: [\n                    {\n                        name: \"None\",\n                        slot: \"end\",\n                        onClickComponentEvents: {\n                            refreshOptions: () => {\n                                return this.diagnosisOptions(o => {\n                                    o.isChecked = o.label === 'None'\n                                    return o\n                                })\n                            }\n                        },\n                        onClick: () => 'None'\n                    }\n                ]\n            }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Examination.vue?vue&type=template&id=64dbe1c6&ts=true\"\nimport script from \"./Examination.vue?vue&type=script&lang=ts\"\nexport * from \"./Examination.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { PatientProgramService } from \"@/services/patient_program_service\"\nimport dayjs from \"dayjs\";\nimport { AppendleadingZero } from \"@/utils/Strs\";\n\nexport class AncCurrentPregnancyService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 81, providerID)\n    }\n\n    async enrollPatient() {\n        const program = new PatientProgramService(this.patientID)\n        /**\n         * TODO: Check if patient is already enrolled first\n        */\n        await program.enrollProgram()\n        program.setStateDate(this.date)\n        program.setStateId(118) //Currently on treatment state... Please remove this ID hack if you can\n        await program.updateState()\n    }\n\n    calculateWeekOfFirstVisit(lnmpDate: string) {\n        const theDate: any = new Date(lnmpDate)\n        theDate.setDate(theDate.getDate() + 7);\n        const today: any = new Date(this.getDate());\n        const s = today - theDate;\n        return String(Math.floor(s / (24 * 60 * 60 * 7 * 1000)));\n    }\n\n    calculateGestationDateFromPeriod(period: number) {\n        return dayjs(this.date).subtract(period, 'months').endOf('month').format('YYYY-MM-DD')\n    }\n\n    estimateDelieveryDate(lnmpDate: string) {\n        const theDate: any = new Date(lnmpDate)\n        theDate.setDate(theDate.getDate() + 7);\n        theDate.setMonth(theDate.getMonth() + 9);\n        const month = AppendleadingZero(theDate.getMonth()+1)\n        const day = AppendleadingZero(theDate.getDate())\n        return `${theDate.getFullYear()}-${month}-${day}`\n    }\n}\n"],"sourceRoot":""}