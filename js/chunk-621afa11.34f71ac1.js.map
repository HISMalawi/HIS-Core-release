{"version":3,"sources":["webpack:///./src/apps/HTS/views/encounters/HtsRecencyResult.vue?128d","webpack:///./src/apps/HTS/services/hts_recency_service.ts","webpack:///./src/apps/HTS/views/encounters/HtsRecencyResult.vue","webpack:///./src/apps/HTS/views/encounters/HtsRecencyResult.vue?f0f4","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","formLabel","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","_","HtsRecencyService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","this","recencyTestField","immediate","methods","formData","computedData","saveFormEncounterAndProceed","encounterTypeID","id","helpText","type","FieldType","TT_SELECT","isRequired","finalComputedValue","v","obs","buildValueCoded","value","options","mapStrToOptions","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","offlineID","patient","encounterStartTime","facts","npid","givenName","familyName","age","gender","birthEstimated","isEnrolledInProgam","village","district","currentTA","created","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","patientDashboardUrl","Date","getTime","isOnline","isOfflineMode","_offline$personParams","_offline$personParams2","_offline$personParams3","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","birthdate_estimated","given_name","family_name","current_district","current_village","current_traditional_authority","status","endTime","elapsedTime","minutes","userAgentObs","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","error","toastWarning","enc","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","uploadStatus","meta","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getNationalID","getGivenName","getFamilyName","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","toOption","label","other","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"yIAEM,SAAUA,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAA+BC,8BAAkB,qBACjDC,EAAsBD,8BAAkB,YAE9C,OAAQE,yBAAcC,yBAAaF,EAAqB,KAAM,CAC5DG,QAASC,qBAAS,IAAM,CACtBC,yBAAaP,EAA8B,CACzCQ,UAAW,UACXC,OAAQf,EAAKe,OACbC,eAAgBhB,EAAKiB,SACrBC,aAAa,EACbC,sBAAuBnB,EAAKoB,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,4BAE3CC,EAAG,I,oDCdD,MAAOC,UAA0BC,OACnCC,YAAYC,EAAmBC,GAAa,GACxCC,MAAMF,EAAW,IAAKC,ICIfE,mCAAgB,CAC7BC,WAAY,CAAEC,gBACdC,OAAQ,CAACC,QACTC,KAAMA,KAAA,CACJC,QAAS,KAEXC,MAAO,CACLC,MAAO,CACLC,QAAQD,GACFA,IACFE,KAAKJ,QAAU,IAAIZ,EACjBgB,KAAKb,UACLa,KAAKZ,YAEPY,KAAKvB,OAAS,CACZuB,KAAKC,sBAIXC,WAAW,IAGfC,QAAS,CACPxB,SAASyB,EAAeC,GACtBL,KAAKM,4BAA4B,CAC/BC,gBAAiBP,KAAKJ,QAAQW,gBAC9BH,WACAC,kBAGJJ,mBACE,MAAO,CACLO,GAAI,eACJC,SAAU,eACVC,KAAMC,OAAUC,UAChBC,WAAYA,KAAM,EAClBC,mBAAqBC,IACZ,CACLC,IAAKhB,KAAKJ,QAAQqB,gBAAgB,eAAgBF,EAAEG,SAGxDC,QAASA,IACAnB,KAAKoB,gBAAgB,CAC1B,YACA,SACA,WACA,UACA,kB,qBClDZ,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS5D,KAErD,gB,0DCHH6D,E,yEAAZ,SAAYA,GACRA,EAAA,+BACAA,EAAA,6CACAA,EAAA,qDACAA,EAAA,2CACAA,EAAA,uBACAA,EAAA,gBANJ,CAAYA,MAAS,KAQrB,MAAMC,EAAWC,GAAcC,OAAQC,2BAA2BF,GAErDG,EAA2D,CACpE,qEAAsE,CAClEC,SAAU,EACVC,QAAS,CACLC,MAAOC,OAASC,uBACZ,MAAMC,QAAeC,eACjB,6BACA,mBAAmBX,EAAQS,GAC3B,qEACA,CACI,CAAEG,KAAM,SAAUC,KAAM,MAAOC,MAAO,WACtC,CAAEF,KAAM,iBAAkBC,KAAM,MAAOC,MAAO,WAC9C,CAAEF,KAAM,kBAAmBC,KAAM,MAAOC,MAAO,YAGvD,MAAkB,WAAXJ,EACDX,EAAUgB,wBACC,mBAAXL,EACAX,EAAUiB,uBACVjB,EAAUkB,WAGxBC,WAAY,CACRC,QAAQA,GACJ,MAAmB,iBAAZA,GAEXV,iBAAiBW,GAAmB,YAAEC,IAClC,OAAOA,GAAeD,KAIlC,+DAAgE,CAC5Df,SAAU,EACVC,QAAS,CACLC,MAAOC,OAASc,YAAWD,kBACvB,MAAMX,QAAeC,eACjB,6BAA8B,GAC9B,gBAAgBX,EAAQqB,iCAA2CrB,EAAQsB,KAC3E,CACI,CAAEV,KAAM,SAAUC,KAAM,MAAOC,MAAO,UACtC,CAAEF,KAAM,sBAAuBC,KAAM,MAAOC,MAAO,aAG3D,MAAkB,wBAAXJ,EACDX,EAAUwB,oBACVxB,EAAUgB,0BAGxBG,WAAY,CACRI,UAAUA,GAAmB,YAAED,IAC3B,OAAOA,EAAcC,KAIjC,oDAAqD,CACjDjB,SAAU,EACVC,QAAS,CACLkB,UAAWhB,OAASiB,YAAWC,gBAAeL,cAAaM,cACvD,MAAMC,QAAcC,eAChB,gCAAgCH,EAChC,QAAQ1B,EAAQqB,iBAA2BrB,EAAQ2B,KACnDF,EACA,CACI,CAAEb,KAAM,SAAUE,MAAO,SAAUD,KAAM,QAASiB,KAAM,WACxD,CAAElB,KAAM,UAAWC,KAAM,MAAOiB,KAAM,YAG9C,MAAwB,WAAjBF,EAAMlB,OACP,CAAEf,OAAQ,EAAGoC,UAAWhC,EAAUgB,yBAClC,CAAEpB,MAAOiC,EAAMJ,UAAWO,UAAWhC,EAAUiC,gBAG7Dd,WAAY,CACRe,UAAUC,GACN,OAAOA,M,6GCvERnE,+BAAgB,CAC3BC,WAAY,CAAEmE,wBACd/D,KAAMA,KAAA,CACFgE,UAAW,KACXC,QAAS,GACTnF,OAAQ,GACRU,UAAW,GACXC,YAAa,EACb4D,UAAW,GACXa,mBAAoB,KACpBC,MAAO,CACHC,KAAM,GACNC,UAAW,GACXC,WAAY,GACZC,KAAM,EACNC,OAAQ,GACRtB,UAAW,GACXuB,gBAAgB,EAChBxB,YAAa,GACbM,QAAS,GACTmB,oBAAoB,EACpBpB,cAAe,MACfD,UAAW,GACXQ,WAAW,EACXd,QAAS,GACTV,iBAAkB,GAClBsC,QAAS,GACTC,SAAU,GACVC,UAAW,IAEfhG,UAAW,GACXsB,OAAO,IAEX2E,UACQzE,KAAK0E,OAAOC,OAAOC,aACnB5E,KAAK2D,UAAY3D,KAAK0E,OAAOC,OAAOC,WACpC5E,KAAKb,UAAY0F,SAAS,GAAG7E,KAAK0E,OAAOC,OAAOC,YAC5C5E,KAAK8E,YACL9E,KAAK+E,kBAELC,OAAMC,IAAI,iBAAkB,CAAE9F,UAAWa,KAAKb,YACzC+F,KAAKC,IACFnF,KAAK4D,QAAUuB,EACVC,qBAAQpF,KAAK4D,UACdyB,iBAAUC,aAAatF,KAAK4D,SAEhC5D,KAAKuF,oBAAoBL,KAAK,KAC1BlF,KAAKwF,2BAA2BN,KAAK,KACjClF,KAAKF,OAAQ,EACbE,KAAKyF,iBACNC,MAAOC,GAAMC,QAAQC,IAAIF,MAC7BD,MAAM,KACD1F,KAAK8E,aACL9E,KAAK+E,wBAOjCe,SAAU,CACNhH,oBAA8B,OAAOkB,KAAK+F,wBAE9C5F,QAAS,CACLsF,eACIzF,KAAK6D,oBAAqB,IAAImC,MAAOC,WAEzCnB,YACI,OAAQoB,OAAShF,OAASiF,OAAcjF,OAE5CgF,WACI,OAAOA,OAAShF,OAEpBiF,gBACI,OAAOA,OAAcjF,OAEzB6D,kBAAe,IAAAqB,EAAAC,EAAAC,EACX,MAAMC,EAAUlB,iBAAUmB,SAASxG,KAAK2D,WAClC8C,EAAgB,OAAPF,QAAO,IAAPA,GAAqB,QAAdH,EAAPG,EAASG,oBAAY,IAAAN,OAAA,EAArBA,EAAuBK,OACjCA,IACLzG,KAAK8D,MAAMjB,UAAY4D,EAAOE,UAC9B3G,KAAK8D,MAAMI,IAAM0C,IAAMC,OAAeC,kBAAkBC,KACpD/G,KAAK8D,MAAMjB,UAAW,SAE1B7C,KAAK8D,MAAMM,gBAAwB,OAAPmC,QAAO,IAAPA,GAAqB,QAAdF,EAAPE,EAASG,oBAAY,IAAAL,OAAA,EAArBA,EAAuBI,OAAOO,uBAAuB,EACjFhH,KAAK8D,MAAMC,KAAc,OAAPwC,QAAO,IAAPA,GAAqB,QAAdD,EAAPC,EAASG,oBAAY,IAAAJ,OAAA,EAArBA,EAAuBvC,KACzC/D,KAAK8D,MAAME,UAAYyC,EAAOQ,WAC9BjH,KAAK8D,MAAMG,WAAawC,EAAOS,YAC/BlH,KAAK8D,MAAMS,SAAWkC,EAAOU,iBAC7BnH,KAAK8D,MAAMQ,QAAUmC,EAAOW,gBAC5BpH,KAAK8D,MAAMU,UAAYiC,EAAOY,8BAC9BrH,KAAK8D,MAAMK,OAASsC,EAAOtC,OAC3BnE,KAAKF,OAAQ,EACbE,KAAKyF,iBAET,kCAAkCd,EAAO,IACrC,IAAI2C,EAAS,UACT7C,GAAU,EACVzD,EAAM,KACV,MAAMuG,GAAU,IAAIvB,MAAOC,UACrBuB,GAAeD,EAAUvH,KAAK6D,oBAAsB,IACpD4D,EAAUD,EAAc,GAC9B,IACI,MAAME,QAAqBzI,OAAoB0I,eAC3C,SAAUC,kBAERC,QAAoB5I,OAAoB6I,iBAC1C,cAAeL,GAEnBzG,EAAM,UAAWhB,KAAK+H,WAAWpD,EAAOtE,cAAgBqH,EAAcG,GACxE,MAAOlC,GAEL,OADAC,QAAQoC,MAAM,GAAGrC,GACVsC,eAAa,kCAExB,IAAKjI,KAAKmG,gBAAiB,CACvB,IACI,MAAM+B,EAAM,IAAIjJ,OACZe,KAAKb,UACLwF,EAAOpE,gBACPP,KAAKZ,kBAEE8I,EAAIC,yBACAD,EAAIE,oBAAoBpH,KAC/BsG,EAAS,WAGc,oBAApB3C,EAAO0D,gBACR1D,EAAO0D,SAASH,GAE1BzD,GAAU,EACZ,MAAOkB,GACLlB,GAAU,EACN,gCAAgC6D,KAAK,GAAG3C,GACxC2B,EAAS,gBAETA,EAAS,YACT1B,QAAQoC,MAAM,wCAAwCrC,IAG9D,GAAe,cAAX2B,EACA,OAAOiB,eAAY,yBAG3BlD,iBAAUmD,eAAe,CACrBC,aAAczH,EACdR,GAAIR,KAAK2D,UACT+E,aAAcpB,EACdrE,cAAejD,KAAK0E,OAAOvC,KAC3B5B,gBAAiBoE,EAAOpE,gBACxBoI,KAAMhE,EAAOvE,SACbwI,UAAWjE,EAAOiE,UAClBnE,WACDA,GACEE,EAAOkE,cAAc7I,KAAK8I,YAEnCC,aAAaC,EAAkBrE,EAAO,MAClC,MAAMsE,EAAc,GAmBpB,GAlBAA,EAAO3H,EAAUiC,cAAiBR,IAC9B,MAAQmG,GAAanG,EAAUoG,MAAM,KAC/BC,EAAWC,kBAAKrJ,KAAKgD,UAAW,CAAEkG,aAExC,OADIE,IAAUpJ,KAAKZ,WAAagK,EAASE,WAClChI,EAAUkB,UAErByG,EAAO3H,EAAUwB,qBAAuB,KACpC9C,KAAKuJ,QAAQC,KAAK,kDAAkDxJ,KAAKb,WAClEmC,EAAUmI,MAErBR,EAAO3H,EAAUiB,wBAA0B,KACvCvC,KAAKuJ,QAAQC,KAAK,qBAAqBxJ,KAAKb,WACrCmC,EAAUmI,MAErBR,EAAO3H,EAAUgB,yBAA2B,KACxCtC,KAAK0J,uBACEpI,EAAUmI,MAEjBT,KAASC,EACT,OAAOA,EAAOD,GAAOrE,IAG7B,iCACI,MAAMgF,EAAWC,eAAkB5J,KAAK8D,MAAOnC,GAC/C,IAAI,MAAMkI,KAASF,EAAU,KAAAG,EAAAC,EACzB,MAAMC,EAAUL,EAASE,GACzB,GAAW,OAAPG,QAAO,IAAPA,GAAgB,QAATF,EAAPE,EAASnI,eAAO,IAAAiI,GAAhBA,EAAkBhI,MAAO,KAAAmI,EACzB,MAAM3C,EAAStH,KAAK+I,mBAA2B,OAAPiB,QAAO,IAAPA,GAAgB,QAATC,EAAPD,EAASnI,eAAO,IAAAoI,OAAA,EAAhBA,EAAkBnI,MAAM9B,KAAK8D,SACrE,GAAIwD,IAAWhG,EAAUmI,KAAM,OAEnC,GAAW,OAAPO,QAAO,IAAPA,GAAgB,QAATD,EAAPC,EAASnI,eAAO,IAAAkI,GAAhBA,EAAkBhH,UAAW,KAAAmH,EAC7B,MAAMnH,QAAyB,OAAPiH,QAAO,IAAPA,GAAgB,QAATE,EAAPF,EAASnI,eAAO,IAAAqI,OAAA,EAAhBA,EAAkBnH,UAAU/C,KAAK8D,QACzD9D,KAAK+I,aAAahG,EAAUO,UAAWP,EAAU7B,UAI7D,0BACI,IACI,MAAMiJ,QAAgBnF,OAAMC,IAAI,kBAAmB,CAAE9F,UAAWa,KAAKb,YACrEa,KAAK8D,MAAMO,mBAAqB8F,EAAQC,YAAcvD,OAAewD,eACrErK,KAAK8D,MAAMpB,QAAUyH,EAAQzH,QAC7B1C,KAAK8D,MAAM9B,iBAAmBmI,EAAQxH,UACxC,MAAOgD,GACLC,QAAQoC,MAAMrC,GACd4C,eAAY,GAAG5C,GAEnB3F,KAAK8D,MAAMC,KAAO/D,KAAK4D,QAAQ0G,gBAC/BtK,KAAK8D,MAAME,UAAYhE,KAAK4D,QAAQ2G,eACpCvK,KAAK8D,MAAMG,WAAajE,KAAK4D,QAAQ4G,gBACrCxK,KAAK8D,MAAMU,UAAYxE,KAAK4D,QAAQ6G,eACpCzK,KAAK8D,MAAMS,SAAWvE,KAAK4D,QAAQ8G,qBACnC1K,KAAK8D,MAAMQ,QAAUtE,KAAK4D,QAAQ+G,oBAClC3K,KAAK8D,MAAMlB,YAAciE,OAAeC,iBACxC9G,KAAK8D,MAAMZ,QAAU2D,OAAe+D,mBACpC5K,KAAK8D,MAAMN,UAAYqD,OAAepD,QACtCzD,KAAK8D,MAAMjB,UAAY7C,KAAK4D,QAAQiH,eACpC7K,KAAK8D,MAAMI,IAAMlE,KAAK4D,QAAQkH,SAC9B9K,KAAK8D,MAAMb,cAAgBjD,KAAK0E,OAAOvC,KACjCnC,KAAK0E,OAAOvC,KAAK4I,WAAWC,cAC5B,MACFnE,OAAepD,UACfzD,KAAKgD,gBAAkBgC,OAAMC,IAAI,aACjCjF,KAAK8D,MAAMd,UAAYhD,KAAKgD,UACvBiI,KAAK,CAACC,EAAQC,KACX,MAAMC,EAAYF,EAAEhC,SAAS8B,cACvBK,EAAYF,EAAEjC,SAAS8B,cAC7B,OAAOI,EAAYC,GAAa,EAAID,EAAYC,EAAa,EAAI,IAEpEC,IAAKC,IAAU,IAAAC,EACZ,IAAIrJ,EAAO,GAAGoJ,EAAErC,SAChB,IAAK9D,qBAAS,OAADmG,QAAC,IAADA,GAAS,QAARC,EAADD,EAAG9E,cAAM,IAAA+E,OAAA,EAATA,EAAWC,OAAQ,KAAAC,EAC5B,MAAQC,IAAuB,QAARD,EAAAH,EAAE9E,cAAM,IAAAiF,OAAA,EAARA,EAAUD,QAAS,GAC1CtJ,GAAQ,KAAKwJ,EAAW1E,cAAc0E,EAAWzE,eAErD,OAAO/E,MAIvByJ,SAASC,EAAeC,EAAM,IAC1B,MAAO,CACHD,QACA3K,MAAO2K,EACPC,UAGR1K,gBAAgB2K,GACZ,OAAOA,EAAMT,IAAIU,GAAkB,kBAANA,GAA+B,kBAANA,EAC/C,CAAEH,MAAOG,EAAG9K,MAAO8K,GAAMA,IAGpCjG,sBACI,MAAO,sBAAsB/F,KAAK0E,OAAOC,OAAOC,YAEpD8E,uBACI,OAAO1J,KAAKuJ,QAAQC,KAAK,CAACyC,KAAMjM,KAAK+F,yBAEzC,iBACI,IACI,MAAMvF,EAAKR,KAAK2D,WAAa3D,KAAKb,gBAC5B2J,eAAStI,EAAIR,KAAKuJ,QAASvJ,KAAK0E,QACxC,MAAOiB,GACLC,QAAQoC,MAAM,kBAAqBrC,GACnC3F,KAAK0J,yBAGbwC,eACI,MAAO,CACH,CAAEL,MAAO,MAAO3K,MAAO,OACvB,CAAE2K,MAAO,KAAM3K,MAAO,QAG9BiL,cAAcN,EAAeC,EAAW,IACpC,MAAO,CACHD,QACA3K,MAAO,GACP4K,MAAO,IACAA,EACHM,OAAQpM,KAAKkM,kBAIzBG,WAAWlL,GACP,OAAOA,EAAQmK,IAAKgB,IACT,CAAET,MAAOS,EAAQpL,MAAOoL,MAGvCC,qBAAqBpL,GACjB,MAAMqL,EAAkB,GACxB,IAAI,MAAMF,KAAUnL,GACS,mBAAdmL,EAAO,IACVA,EAAO,KAGfE,EAAMhD,KAAKxJ,KAAK4L,SAASU,EAAO,KAEpC,OAAOE,GAEXC,sBACI,MAAO,CACH,CAAEZ,MAAO,MAAO3K,MAAO,OACvB,CAAE2K,MAAO,KAAM3K,MAAO,MACtB,CAAE2K,MAAO,UAAW3K,MAAO,aAGnC6G,WAAW/G,EAAU0L,EAAI,IACrB,MAAMN,EAAcO,OAAOP,OAAOpL,GAC7B4L,OAAQpL,GAAWA,IAAMA,EAAEkL,MAAQA,GAAe,KAARA,IAC1CG,OAAO,CAACC,EAAYC,KACjB,MAAMpN,EAAOoN,EAAI/L,IAAM+L,EAAI/L,IAAM+L,EAQjC,OAPIC,MAAMC,QAAQtN,GACdmN,EAAQA,EAAMI,OAAOvN,GACE,oBAATA,EACdmN,EAAMtD,KAAK7J,KAEXmN,EAAMtD,KAAK7J,GAERmN,GACJ,IACX,OAAOK,QAAQC,IAAIhB,IAEvBiB,QAAQC,EAAiBC,GACrB,IACI,OAAOD,EAAIV,OAAQZ,GAAWuB,EAAWvB,IAAIwB,OAAS,EACxD,MAAO7H,GACL,OAAO,IAGf8H,eAAehL,GACX,IACI,IAAI,MAAMuJ,KAAKvJ,EAAY,CACvB,MAAMiL,EAAYjL,EAAWuJ,KAE7B,GAAI0B,EAAW,OAAOA,GAE5B,MAAO/H,GACL,MAAO,CAACA,QC1VxB,MAAMtE,EAAc,EAEL,U,kDCHT,SAAU5D,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQI,yBAAcC,yBAAauP,qCAAyBjQ,EAAKkQ,UAAW,CAC1EnP,OAAQf,EAAKe,OACbG,YAAalB,EAAKkB,YAClBiP,YAAanQ,EAAKmQ,YAClBhP,sBAAuBnB,EAAKmB,sBAC5BiP,WAAYpQ,EAAKiB,SACjBA,SAAUjB,EAAKgB,eACfqP,UAAWrQ,EAAKsQ,SACf,KAAM,GAAI,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN5F1O,+BAAgB,CAC3B6C,KAAM,kBACN5C,WAAY,CAAE0O,wBACdC,MAAO,CACH,WACA,WAEJvO,KAAMA,KAAA,CACFiO,SAAU,sBAEdO,MAAO,CACHzP,eAAgB,CACZgC,KAAM0N,UAEVxP,YAAa,CACT8B,KAAM2N,QACNhQ,SAAS,GAEbwP,YAAa,CACTnN,KAAM4N,QAEV7P,OAAQ,CACJiC,KAAMiM,OACN4B,UAAU,GAEd1P,sBAAuB,CACnB6B,KAAM4N,OACNC,UAAU,IAGlBpO,QAAS,CACLxB,SAASyB,EAAeC,GACpBL,KAAKwO,MAAM,WAAYpO,EAAUC,IAErC2N,QAAQhC,GACJhM,KAAKwO,MAAM,UAAWxC,O,qBCnClC,MAAM3K,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS5D,KAErD,U,8ECsBf,SAASgR,EAAY3K,EAA4BrB,GAC7C,MAAMuG,EAAQ,GACR0F,EAAU,EAAE,EAAG,GAAI,UAAMC,GAE/B,IAAI,MAAMC,KAAQnM,EAAY,CAC1B,KAAMmM,KAAQ9K,GACV,SAEJ,MAAM5C,EAAQ4C,EAAM8K,GAChBF,EAAQG,SAAS3N,GACjB8H,EAAMQ,MAAK,GAIfR,EAAMQ,KAAK/G,EAAWmM,GAAM1N,EAAO4C,IAEvC,OAAOkF,EAAM8F,MAAMT,SAQvB,SAASU,EAAepF,GACpB,OAAOA,EAASsB,KAAK,CAACC,EAAGC,IAAOD,EAAEtJ,UAAYuJ,EAAEvJ,UAAasJ,EAAEtJ,SAAWuJ,EAAEvJ,UAAY,EAAI,GAGhG,SAASoN,EAAarF,GAClB,OAAOA,EAASsB,KAAK,CAACC,EAAGC,IAAOD,EAAE+D,QAAU9D,EAAE8D,QAAW/D,EAAE+D,OAAS9D,EAAE8D,QAAU,EAAI,GAgBlF,SAAUrF,EACZ9F,EACAoL,EACAC,EAAO,GACPC,EAAY,GACZC,EAAO,YACP,MAAMC,EAAU,GAChB,IAAI,MAAMC,KAAkBL,EAAY,CACpC,MAAMvP,EAA2BuP,EAAWK,GACtCC,EAAoB,CACrB7P,EAAKwP,QAAUA,GAAUxP,EAAKwP,QAAUA,EACxCxP,EAAKyP,aAAeA,GACdzP,EAAKyP,aAAeA,GAG3BI,EAAkBC,KAAKpB,UAIvBI,EAAY3K,EAAOnE,EAAK8C,cACxB9C,EAAK+P,MAAQH,EACT5P,EAAKgQ,cACLhQ,EAAKgQ,YAAYC,KAAOjQ,EAAKgQ,YAAYE,KAAK/L,IAElDwL,EAAQ9F,KAAK7J,IAGrB,MAAkB,aAAX0P,EAAwBN,EAAeO,GAAWN,EAAaM","file":"js/chunk-621afa11.34f71ac1.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        formLabel: \"Recency\",\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        skipSummary: true,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class HtsRecencyService extends AppEncounterService {\n    constructor(patientID: number, providerID = -1) {\n        super(patientID, 198, providerID)\n    }\n}\n","\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { defineComponent } from \"vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { HtsRecencyService } from \"../../services/hts_recency_service\";\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as HtsRecencyService,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.service = new HtsRecencyService(\n            this.patientID,\n            this.providerID\n          );\n          this.fields = [\n            this.recencyTestField()\n          ];\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    onFinish(formData: any, computedData: any) {\n      this.saveFormEncounterAndProceed({\n        encounterTypeID: this.service.encounterTypeID,\n        formData,\n        computedData,\n      })\n    },\n    recencyTestField(): Field {\n      return {\n        id: \"recency_test\",\n        helpText: \"Recency Test\",\n        type: FieldType.TT_SELECT,\n        isRequired: () => true,\n        finalComputedValue: (v: Option) => {\n          return {\n            obs: this.service.buildValueCoded(\"Recency Test\", v.value),\n          };\n        },\n        options: () => {\n          return this.mapStrToOptions([\n            \"Long-Term\",\n            \"Recent\",\n            \"Negative\",\n            \"Invalid\",\n            \"NOT done\"\n          ]);\n        },\n      };\n    },\n  },\n});\n","import { render } from \"./HtsRecencyResult.vue?vue&type=template&id=3cb78c9a&ts=true\"\nimport script from \"./HtsRecencyResult.vue?vue&type=script&lang=ts\"\nexport * from \"./HtsRecencyResult.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            npid: '' as string,\n            givenName: '' as string,\n            familyName: '' as string,\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            birthEstimated: false as boolean,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.birthEstimated = offline?.personParams?.person.birthdate_estimated || false\n            this.facts.npid = offline?.personParams?.npid\n            this.facts.givenName = person.given_name\n            this.facts.familyName = person.family_name\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.npid = this.patient.getNationalID()\n            this.facts.givenName = this.patient.getGivenName()\n            this.facts.familyName = this.patient.getFamilyName()\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}