{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/OPD/views/encounters/Registration.vue?9eac","webpack:///./src/apps/OPD/services/patient_registration_service.ts","webpack:///./src/apps/OPD/views/encounters/Registration.vue","webpack:///./src/apps/OPD/views/encounters/Registration.vue?8474","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","offlineID","patient","fields","patientID","providerID","encounterStartTime","facts","age","gender","isEnrolledInProgam","village","district","currentTA","formLabel","ready","created","this","$route","params","patient_id","parseInt","goOffline","initOfflineData","Store","get","then","patientData","isEmpty","Offline","cachePatient","setEncounterFacts","checkEncounterGuidelines","setStartTime","catch","e","console","log","computed","cancelDestination","patientDashboardUrl","methods","Date","getTime","isOnline","isOfflineMode","_offline$personParams","offline","findByID","person","personParams","birthdate","dayjs","ProgramService","getSessionDate","diff","current_district","current_village","current_traditional_authority","status","obs","endTime","elapsedTime","minutes","userAgentObs","AppEncounterService","buildValueText","getPlatformName","durationObs","buildValueNumber","resolveObs","computedData","error","toastWarning","enc","encounterTypeID","createEncounter","saveObservationList","callback","test","toastDanger","saveObsOffline","observations","id","uploadStatus","meta","formData","labOrders","skipNextTask","nextTask","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","_finding$actions4","program","programID","getProgramID","getCurrentTA","getCurrentDistrict","getCurrentVillage","getCachedApiDate","getBirthdate","getAge","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","options","option","toConditionalOptions","final","yesNoUnknownOptions","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","onSubmit","PatientVisitRegistrationService","constructor","super","mixins","EncounterMixinVue","registrationService","watch","isReady","getID","getFields","immediate","deep","asignNID","encounter","registrationData","registrationObs","nidAvailable","nid","updateMWNationalId","people","Patientservice","findByOtherID","MALAWI_NATIONAL_ID_TYPE","helpText","FieldType","TT_SELECT","validation","Validation","computedValue","v","buildValueCoded","visit_type","_","getFacilities","config","showKeyboard","isFilterDataViaApi","getMWNationalID","appearInSummary","TT_TEXT","isMWNationalID","national_id_available","beforeNext","field","mwIdExists","summaryMapValue","casing","customKeyboard","CHARACTERS_AND_NUMBERS_LO","isChildBearing","facilities","LocationService","f","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village_id"],"mappings":"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","file":"js/chunk-75953fe1.88c1f2a7.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger, toastWarning } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\nimport { Offline, isOfflineMode, isOnline } from '@/composables/offline'\nimport dayjs from 'dayjs'\nimport { AppEncounterService } from '@/services/app_encounter_service'\nimport { ObsValue } from '@/services/observation_service'\nimport { getPlatformName } from '@/composables/usePlatform'\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        offlineID: null as any,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        encounterStartTime: null as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            birthDate: '' as string,\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            isEnrolledInProgam: false as boolean,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            outcome: '' as string,\n            outcomeStartDate: '' as string,\n            village: '' as string,\n            district: '' as string,\n            currentTA: '' as string,\n        },\n        formLabel: '' as string,\n        ready: false\n    }),\n    created() {\n        if (this.$route.params.patient_id) {\n            this.offlineID = this.$route.params.patient_id\n            this.patientID = parseInt(`${this.$route.params.patient_id}`);\n            if (this.goOffline()) {\n                this.initOfflineData()\n            } else {\n                Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                    .then(patientData => {\n                        this.patient = patientData\n                        if (!isEmpty(this.patient)) {\n                            Offline().cachePatient(this.patient)\n                        }\n                        this.setEncounterFacts().then(() => {\n                            this.checkEncounterGuidelines().then(() => {\n                                this.ready = true\n                                this.setStartTime()\n                            }).catch((e) => console.log(e))\n                        }).catch(() => {\n                            if (this.goOffline()) {\n                                this.initOfflineData()\n                            }\n                        })\n                    })\n            }\n        }\n    },\n    computed: {\n        cancelDestination(): string { return this.patientDashboardUrl() }\n    },\n    methods: {\n        setStartTime() {\n            this.encounterStartTime = new Date().getTime()\n        },\n        goOffline(){\n            return !isOnline.value || isOfflineMode.value\n        },\n        isOnline() {\n            return isOnline.value\n        },\n        isOfflineMode() {\n            return isOfflineMode.value\n        },\n        initOfflineData() {\n            const offline = Offline().findByID(this.offlineID)\n            const person = offline?.personParams?.person\n            if (!person) return\n            this.facts.birthDate = person.birthdate\n            this.facts.age = dayjs(ProgramService.getSessionDate()).diff(\n                this.facts.birthDate, 'years'\n            )\n            this.facts.district = person.current_district\n            this.facts.village = person.current_village\n            this.facts.currentTA = person.current_traditional_authority\n            this.facts.gender = person.gender\n            this.ready = true\n            this.setStartTime()\n        },\n        async saveFormEncounterAndProceed(params={} as any) {\n            let status = 'Pending'\n            let created = false\n            let obs = null\n            const endTime = new Date().getTime();\n            const elapsedTime = (endTime - this.encounterStartTime) / 1000; // Time in seconds\n            const minutes = elapsedTime / 60;\n            try {\n                const userAgentObs = await AppEncounterService.buildValueText(\n                    'Device', getPlatformName()\n                )\n                const durationObs = await AppEncounterService.buildValueNumber(\n                    'Review Time', minutes\n                )\n                obs = [...(await this.resolveObs(params.computedData)), userAgentObs, durationObs]\n            } catch (e) {\n                console.error(`${e}`)\n                return toastWarning(\"Unable to resolve observations\")\n            }\n            if (!this.isOfflineMode()) {\n                try {\n                    const enc = new AppEncounterService(\n                        this.patientID,\n                        params.encounterTypeID, \n                        this.providerID\n                    )\n                    if ((await enc.createEncounter())) {\n                        if ((await enc.saveObservationList(obs as ObsValue[]))) {\n                            status = 'Success'\n                        }\n                    }\n                    if (typeof params.callback === 'function') {\n                        await params.callback(enc)\n                    }\n                    created = true\n                } catch (e) {\n                    created = false\n                    if (/NetworkError|Failed to fetch/i.test(`${e}`)) {\n                        status = 'NetworkError'\n                    } else {\n                        status = 'Exception'\n                        console.error(`Exception while saving an encounter: ${e}`)\n                    }\n                }\n                if (status === 'Exception') {\n                    return toastDanger(\"An error has occured!\")\n                }\n            }\n            Offline().saveObsOffline({\n                observations: obs,\n                id: this.offlineID,\n                uploadStatus: status,\n                encounterName: this.$route.name,\n                encounterTypeID: params.encounterTypeID,\n                meta: params.formData,\n                labOrders: params.labOrders,\n                created\n            }, created)\n            if (!params.skipNextTask) this.nextTask()\n        },\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.isEnrolledInProgam = program.programID === ProgramService.getProgramID()\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.currentTA = this.patient.getCurrentTA()\n            this.facts.district = this.patient.getCurrentDistrict()\n            this.facts.village = this.patient.getCurrentVillage()\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.age = this.patient.getAge()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: Array<string | Option>) {\n            return items.map(i => typeof i === 'string' || typeof i === 'number'  \n                ?  { label: i, value: i } : i \n            )\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.$route.params.patient_id}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        async nextTask() {\n            try {\n                const id = this.offlineID || this.patientID\n                await nextTask(id, this.$router, this.$route)\n            } catch (e) {\n                console.error(\"Workflow error \" +  e)\n                this.gotoPatientDashboard()\n            }\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });        \n        },\n        toConditionalOptions(options: Array<Array<string | boolean | undefined>>) {\n            const final: Option[] = []\n            for(const option of options) {\n                if (typeof option[1] === 'boolean') {\n                    if (option[1]) final.push(this.toOption(option[0] as string))\n                    continue\n                }\n                final.push(this.toOption(option[0] as string))\n            }\n            return final\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class PatientVisitRegistrationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 104, providerID) \n    }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientVisitRegistrationService } from \"@/apps/OPD/services/patient_registration_service\"\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { toastWarning } from '@/utils/Alerts';\nimport { Patientservice } from '@/services/patient_service';\nimport { MALAWI_NATIONAL_ID_TYPE } from '@/constants';\nimport { CHARACTERS_AND_NUMBERS_LO, NOTE_PAD_KEYBOARD } from '@/components/Keyboard/KbLayouts';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        registrationService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.registrationService = new PatientVisitRegistrationService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            await this.asignNID(formData)\n            const encounter = await this.registrationService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create registration encounter')\n            \n            const registrationData = await this.resolveObs({...computedData})\n            const registrationObs = await this.registrationService.saveObservationList(registrationData)\n            if (!registrationObs) return toastWarning('Unable to save observations')\n\n            this.nextTask()        \n        },\n        async asignNID(formData: any) {\n            const nidAvailable = formData['national_id_available']\n            const nid = formData['national_id']\n            if(nidAvailable && nidAvailable.value === 'Yes') {\n                await this.patient.updateMWNationalId(nid.value)\n            }\n        },\n        async mwIdExists(nid: string) {\n            if(!nid) return false\n            const people = await Patientservice.findByOtherID(MALAWI_NATIONAL_ID_TYPE, nid)\n            return people.length > 0\n        },\n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'visit_type',\n                    helpText: 'Type of visit',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: (v: Option) => ({ obs: this.registrationService.buildValueCoded('Type of visit', v.value)}),\n                    options: () => {\n                        return [\n                            { label: 'New', value: 'New patient' },\n                            { label: 'Referral', value: 'Referral' },\n                            { label: 'Re-visiting', value: 'Re-visiting' },\n                        ]\n                    }\n                },\n                {\n                    id: 'referring_facility_name',\n                    helpText: 'Referred from',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ label }: Option) => ({obs: this.registrationService.buildValueText('Referred from', label)}),\n                    condition: (fields: any) => fields.visit_type.value === 'Referral',\n                    options: (_: any, filter='') => getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                {\n                    id: 'national_id_available',\n                    helpText: 'National ID Available',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    condition: () => this.patient.getMWNationalID() === 'Unknown',\n                    options: () => this.yesNoUnknownOptions(),\n                    appearInSummary: () => false\n                },\n                {\n                    id: 'national_id',\n                    helpText: 'Enter National ID',\n                    type: FieldType.TT_TEXT,\n                    validation: (value: Option) => Validation.isMWNationalID(value),\n                    condition: (fields: any) => fields.national_id_available.value === 'Yes',\n                    beforeNext: async (field: Option) => {\n                        if(field.value && (await this.mwIdExists(field.value.toString()))){\n                            toastWarning('National ID already exists')\n                            return false\n                        }\n                        return true\n                    },\n                    summaryMapValue: ({ value }: Option) => ({\n                        value,\n                        label: 'National ID'\n                    }),\n                    config: {\n                        casing: 'uppercase',\n                        customKeyboard: [CHARACTERS_AND_NUMBERS_LO, [['Delete']]],\n                    }\n                },\n                {\n                    id: 'patient_pregnant',\n                    helpText: 'Patient pregnant',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({value}: Option) => ({obs: this.registrationService.buildValueCoded('PATIENT PREGNANT', value)}),\n                    condition: () => this.patient.isChildBearing(),\n                    options: () => this.yesNoUnknownOptions(),\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Registration.vue?vue&type=template&id=ae0eb2d8&ts=true\"\nimport script from \"./Registration.vue?vue&type=script&lang=ts\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}