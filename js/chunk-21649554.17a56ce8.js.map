{"version":3,"sources":["webpack:///./src/apps/ART/views/FilingNumberManagement.vue?5b31","webpack:///./src/apps/ART/services/filing_number_service.ts","webpack:///./src/apps/ART/views/FilingNumberManagement.vue","webpack:///./src/apps/ART/views/FilingNumberManagement.vue?a871","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","skipSummary","activeField","fieldComponent","onOnIndex","$event","fields","FilingNumberService","Service","constructor","super","_defineProperty","this","patientID","activePrefix","dormantPrefix","getActivePrx","getDormantPrx","getPatientID","setPatientID","formatNumber","num","prefix","search","substring","length","prx","ART_PROP","filingNumberPrefix","split","isActiveFilingNum","filingNumber","match","RegExp","isDormantFilingNum","postJson","identifier","res","getJson","map","person","patient","Patientservice","getID","getGivenName","getFamilyName","archiveFilingNumber","archivePatient","secondaryPatient","getArchivingCandidates","page","pageSize","getPastFilingNumbers","printFilingNumber","printer","PrintoutService","printLbl","defineComponent","components","HisStandardForm","data","service","nextWorkflowRouteName","filingNumberAssignment","watch","query","params","patient_id","getPatient","loadFilingPrefix","getFilingNumberField","getCandidateSelectionField","getFilingNumberHistoryField","archive","assign","onAssignFilingNumber","trail","next_workflow_task","immediate","deep","methods","toFID","filingID","assigned","newFilingNumber","Store","invalidate","toastWarning","assignment","primary","label","value","name","other","activeNumber","dormantNumber","archived","presentLoading","assignFilingNumber","loadingController","dismiss","isEmpty","new_identifier","archived_identifier","candidate","swapped","active_number","given_name","family_name","dormant_number","message","loading","create","backdropDismiss","present","findByID","_patient","id","getFilingNumber","e","toastDanger","$router","back","modal","modalController","component","Keypad","cssClass","componentProps","title","strictNumbers","onKeyPress","onDidDismiss","pageNumber","candidates","formatCandidateOptions","state","list","style","color","fontWeight","HisDate","toStandardHisDisplayFormat","appointment_date","type","FieldType","TT_TABLE_VIEWER","helpText","condition","options","async","columns","rows","d","isActive","voided","date_created","date_voided","config","toolbarInfo","hiddenFooterBtns","footerBtns","slot","visible","default","onClick","selectorInstance","filingNumbeSearchTerm","filingOptionsBackup","TT_CARD_SELECTOR","validation","val","Validation","required","onload","instance","onValue","ok","alertConfirmation","swapExistingFilingNumbers","listData","filingNumberSearchKeypad","filingNumbers","disabled","TT_FILING_NUMBER_VIEW","_this$filingNumberAss","dormantPatient","nextTask","$route","__exports__","_resolveDynamicComponent","formType","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","Object","formData","computedData","$emit","i"],"mappings":"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","file":"js/chunk-21649554.17a56ce8.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    activeField: _ctx.fieldComponent,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    fields: _ctx.fields\n  }, null, 8, [\"activeField\", \"fields\"]))\n}","import { Service } from \"@/services/service\";\nimport { PrintoutService } from \"@/services/printout_service\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport ART_PROP from \"../art_global_props\";\n\nexport class FilingNumberService extends Service {\n    patientID: number;\n    activePrefix: string;\n    dormantPrefix: string;\n\n    constructor() {\n        super()\n        this.patientID = 0\n        this.activePrefix = ''\n        this.dormantPrefix = ''\n    }\n\n    getActivePrx() {\n        return this.activePrefix\n    }\n\n    getDormantPrx() {\n        return this.dormantPrefix\n    }\n\n    getPatientID() {\n        return this.patientID\n    }\n\n    setPatientID(patientID: number) {\n        this.patientID = patientID\n    }\n\n    formatNumber(num: string) {\n        const prefix = num.search(this.activePrefix) >= 0 \n            ? this.activePrefix\n            : num.search(this.dormantPrefix) >= 0 \n            ? this.dormantPrefix\n            : ''\n        return prefix ? num.substring(prefix.length, num.length) : num\n    }\n\n    async loadFilingPrefix() {\n        const prx = await ART_PROP.filingNumberPrefix()\n        if (prx) {\n            const [activePrefix, dormantPrefix] = prx.split(',')\n            this.activePrefix = activePrefix\n            this.dormantPrefix = dormantPrefix\n        }\n    }\n\n    isActiveFilingNum(filingNumber: string) {\n        return filingNumber.match(new RegExp(this.activePrefix, 'i'))\n            ? true\n            : false\n    }\n\n    isDormantFilingNum(filingNumber: string) {\n        return filingNumber.match(new RegExp(this.dormantPrefix, 'i'))\n            ? true\n            : false\n    }\n\n    async assignFilingNumber() {\n        return Service.postJson(`patients/${this.patientID}/filing_number`, {})\n    }\n\n    async getFilingNumber(filingNumber: string) {\n        const identifier = `${this.activePrefix}${filingNumber}`\n        const res = await Service.getJson(`search/patients/by_identifier`, {\n            'type_id': 17, \n            'identifier': identifier\n        })\n        if (res) {\n            return res.map((person: any) => {\n                const patient = new Patientservice(person)\n                return {\n                    identifier,\n                    'patient_id': patient.getID(),\n                    'given_name': patient.getGivenName(),\n                    'family_name': patient.getFamilyName(),\n                    'state': 'N/A',\n                    'appointment_date': ''\n                }\n            })\n        }\n        return []\n    }\n\n    archiveFilingNumber() {\n        return Service.getJson(`archive_active_filing_number`, {\n            'patient_id': this.patientID\n        })\n    }\n\n    archivePatient(secondaryPatient: number, identifier: string | number) {\n        return Service.postJson('swap_active_number', {\n            'primary_patient_id': this.patientID,\n            'secondary_patient_id': secondaryPatient,\n            identifier\n        })\n    }\n\n    getArchivingCandidates(page=0, pageSize=10) {\n        return Service.getJson(`archiving_candidates`, {\n            page,'page_size': pageSize\n        })\n    }\n\n    getPastFilingNumbers() {\n        return Service.getJson(`patients/${this.patientID}/past_filing_numbers`)\n    }\n\n    printFilingNumber() {\n        const printer = new PrintoutService()\n        return printer.printLbl(`patients/${this.patientID}/labels/filing_number`) \n    }\n}","\nimport { defineComponent } from 'vue'\nimport { isEmpty } from 'lodash';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { loadingController, modalController } from \"@ionic/vue\"\nimport { Patientservice } from '@/services/patient_service';\nimport { FilingNumberService } from '@/apps/ART/services/filing_number_service'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { alertConfirmation, toastDanger, toastWarning  } from \"@/utils/Alerts\"\nimport HisDate from \"@/utils/Date\"\nimport Keypad from \"@/components/Keyboard/HisKeypad.vue\"\nimport { nextTask } from '@/utils/WorkflowTaskHelper';\nimport Store from \"@/composables/ApiStore\"\n\n/**\n * Manages filing number assignment\n * Can view filing number trail\n * Can swap filing numbers between candidates\n */\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        service: {} as any,\n        patient: {} as any,\n        fieldComponent: '' as string,\n        fields: [] as Array<Field>,\n        nextWorkflowRouteName: '' as string,\n        filingNumberAssignment: {} as Record<string, Option>,\n    }),\n    watch: {\n        /**\n         * Initiates service and Detects parameters \n         * in the url and switch to appropriate actions\n         */\n        '$route': {\n            async handler({query, params}: any) {\n                if (params && params.patient_id) {\n                    this.service = new FilingNumberService()\n                    this.service.setPatientID(params.patient_id)\n                    this.patient = await this.getPatient(params.patient_id)\n                    await this.service.loadFilingPrefix()\n                }\n                if (query) {\n                    this.fields = [\n                        this.getFilingNumberField(),\n                        this.getCandidateSelectionField(),\n                        this.getFilingNumberHistoryField()\n                    ]\n                    if (query.archive === \"true\") {\n                        await this.archiveFilingNumber()\n                        return \n                    }\n                    if (query.assign === \"true\") {\n                        await this.onAssignFilingNumber()\n                    }\n                    if (query.trail === \"true\") {\n                       this.fieldComponent = 'view_filing_history'\n                    }\n                    if (query.next_workflow_task) {\n                        this.nextWorkflowRouteName = query.next_workflow_task\n                    }\n                }             \n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        /**\n         * Helper method for formatting filing numbers \n         * for display purposes only!\n         */\n        toFID(filingID: string) {\n            return this.service.formatNumber(filingID)\n        },\n        async onAssignFilingNumber() {\n            const assigned = await this.newFilingNumber()\n            if (assigned) {\n                this.filingNumberAssignment = assigned\n                this.fieldComponent = 'filing_number_management'\n                Store.invalidate('ACTIVE_PATIENT')\n            } else {\n                this.fieldComponent = 'select_candidate_to_swap'\n                toastWarning('Out of filing numbers, Please select eligible candidate')\n            }\n        },\n        /**\n         * Assigns and creates filing number assignment object\n         */\n        async newFilingNumber(): Promise<Record<string, Option> | undefined> {\n            const assignment: Record<string, Option> = {\n                primary: {\n                    label: 'Dormant → Active',\n                    value: this.patient.name,\n                    other: {\n                        activeNumber: this.patient.filingID \n                            ? this.toFID(this.patient.filingID)\n                            : 'N/A', \n                        dormantNumber: 'N/A'\n                    }\n                },\n                archived:  {\n                    label: 'Active → Dormant',\n                    value: 'N/A',\n                    other: {\n                        activeNumber: 'N/A', \n                        dormantNumber: 'N/A'\n                    }\n                }\n            }\n            /**\n             * Do assign a new filing number if the patient already\n             * has one\n             */\n            if (this.service.isActiveFilingNum(this.patient.filingID)) {\n                return assignment\n            }\n\n            await this.presentLoading()\n\n            const assigned = await this.service.assignFilingNumber()\n\n            loadingController.dismiss()\n\n            if (isEmpty(assigned)) return\n\n            assignment.primary.other = {\n                activeNumber: this.toFID(\n                    assigned.new_identifier.identifier\n                ),\n                dormantNumber: this.service\n                    .isDormantFilingNum(this.patient.filingID) \n                    ? this.toFID(this.patient.filingID)\n                    : 'N/A'\n            }\n\n            if (!isEmpty(assigned.archived_identifier)) {\n                const patient = await this.getPatient(\n                    assigned.archived_identifier.patient_id\n                )\n                assignment.archived = {\n                    label: 'Active → Dormant',\n                    value: patient.name,\n                    other: {\n                        activeNumber: this.toFID(\n                            assigned.archived_identifier.identifier\n                        ), \n                        dormantNumber: this.toFID(\n                            assigned.new_identifier.identifier\n                        )\n                    }\n                }\n            }\n            return assignment\n        },\n        /**\n         * Swap filing numbers between an active candidate with a dormant candidate\n        */\n        async swapExistingFilingNumbers(candidate: any) {\n            const swapped = await this.service.archivePatient(\n               candidate.patient_id, candidate.identifier\n            )\n            if (swapped) {\n                return {\n                    primary: {\n                        label: 'Dormant → Active',\n                        value: this.patient.name,\n                        other: {\n                            activeNumber: this.toFID(swapped.active_number), \n                            dormantNumber: this.toFID(this.patient.filingID) || 'N/A'\n                        }\n                    },\n                    archived:  {\n                        label: 'Active → Dormant',\n                        value: `${candidate.given_name} ${candidate.family_name}`,\n                        other: {\n                            patientID: candidate.patient_id,\n                            activeNumber: this.toFID(swapped.dormant_number), \n                            dormantNumber:this.toFID(swapped.active_number)\n                        }\n                    }\n                }\n            }\n        },\n        async presentLoading(message=\"Please wait...\") {\n            const loading = await loadingController.create({\n                message, backdropDismiss: false\n            })\n            await loading.present()\n        },\n        async getPatient(patientID: number): Promise<Record<string, number | string>> {\n            const patient = await Patientservice.findByID(patientID)\n            if (patient) {\n                const _patient = new Patientservice(patient)\n                return {\n                    id: _patient.getID(),\n                    filingID: _patient.getFilingNumber(),\n                    name: `${_patient.getGivenName()} ${_patient.getFamilyName()}`\n                }\n            }\n            return {}\n        },\n        /**\n         * Archives currrent patient and routes to the previous page view\n         */\n        async archiveFilingNumber() {\n            await this.presentLoading('Archiving filing number')\n            try {\n                await this.service.archiveFilingNumber()\n                await this.service.printFilingNumber()\n                Store.invalidate('ACTIVE_PATIENT')\n            }catch(e) {\n                toastDanger(`${e}`)\n            }\n            await loadingController.dismiss()\n            this.$router.back()\n        },\n        async filingNumberSearchKeypad() {\n            const modal = await modalController.create({\n                component: Keypad,\n                backdropDismiss: false,\n                cssClass: 'keypad-modal',\n                componentProps: {\n                    title: 'Find Active number',\n                    strictNumbers: false,\n                    onKeyPress: () => {\n                        //TODO: do nothing!\n                    }\n                }\n            })\n            await modal.present()\n            const { data } = await modal.onDidDismiss()\n            return data\n        },\n        async getArchivingCandidates(pageNumber=0): Promise<Option[]> {\n            const candidates = await this.service.getArchivingCandidates(pageNumber)\n            return this.formatCandidateOptions(candidates)\n        },\n        /**\n         * Converts array of objects with candidates to a list options array\n         */\n        formatCandidateOptions(candidates: Array<any>): Option[] {\n            return candidates.map((candidate: any) => ({\n                label: `${candidate.given_name} ${candidate.family_name} (${candidate.state})`,\n                value: candidate.identifier,\n                other: {\n                    data: candidate,\n                    list: [\n                        {\n                            label: 'Filing #',\n                            value: this.toFID(candidate.identifier),\n                            style: {\n                                color: 'green', \n                                fontWeight: 'bold'\n                            }\n                        },\n                        {\n                            label: 'Given name',\n                            value: candidate.given_name\n                        },\n                        {\n                            label: 'Family name',\n                            value: candidate.family_name\n                        },\n                        {\n                            label: 'Outcome',\n                            value: candidate.state.match(/trans/i)\n                                ? 'TO'\n                                : candidate.state.match(/stop/i) \n                                ? 'Tx stopped'\n                                : candidate.state\n                        },\n                        {\n                            label: 'LAD',\n                            value: HisDate.toStandardHisDisplayFormat(\n                                candidate.appointment_date\n                            )\n                        }\n                    ]   \n                }\n            }))\n        },\n        /*\n        * Form field that a table of all filing numbers assigned to a patient\n         */\n        getFilingNumberHistoryField(): Field {\n            return {\n                id: 'view_filing_history',\n                type: FieldType.TT_TABLE_VIEWER,\n                helpText: 'Filing Number Trail',\n                condition: () => false,\n                options: async () => {\n                    const columns = ['Status', 'Filing #', 'Date Created', 'Date voided']\n                    const data = await this.service.getPastFilingNumbers()\n                    const rows = data.map((d: any) => {\n                        const isActive = d.voided === 0\n                        return [\n                            isActive ? 'Active' : 'Voided',\n                            this.toFID(d.identifier),\n                            HisDate.toStandardHisDisplayFormat(d.date_created),\n                            !isActive ? HisDate.toStandardHisDisplayFormat(d.date_voided): 'N/A'\n                        ]\n                    })\n                    return [\n                        {\n                            label: 'Filing Number Trail',\n                            value: 'Trail',\n                            other: { columns, rows }\n                        }\n                    ]\n                },\n                config: {\n                    toolbarInfo: [\n                        {\n                            label: 'Current filing #',\n                            value: this.toFID(this.patient.filingID)\n                        },\n                        {\n                            label: 'Status',\n                            value: this.service.isActiveFilingNum(\n                                this.patient.filingID\n                            )\n                            ?\n                            'Active'\n                            : this.service.isDormantFilingNum(\n                                this.patient.filingID\n                            )\n                            ?\n                            'Dormant'\n                            :\n                            'N/A'\n                        }\n                    ],\n                    hiddenFooterBtns: [\n                        'Clear',\n                        'Next',\n                        'Back',\n                        'Finish'\n                    ],\n                    footerBtns: [\n                        /**\n                         * Navigate to get new filing number if they have dormant one.\n                         */\n                        {\n                            name: 'Get filing #',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: () => this.service.isDormantFilingNum(\n                                        this.patient.filingID\n                                    )\n                                }\n                            },\n                            onClick: async () => await this.onAssignFilingNumber()\n                        }\n                    ]\n                }\n            }\n        },\n        /**\n         * A form field that displays a list of patients with filing numbers\n         * to swap with\n         */\n        getCandidateSelectionField(): Field {\n            // Keeps track of the component object that's presented on the screen\n            let selectorInstance: any = {}\n            // Candidate list is paginated, tracking page here\n            let pageNumber = 0\n            let filingNumbeSearchTerm = ''\n            // Restore point for archived candidates\n            let filingOptionsBackup: Option[] = []\n\n            return {\n                id: 'select_candidate_to_swap',\n                type: FieldType.TT_CARD_SELECTOR,\n                helpText: 'Filing Number (Archive)',\n                condition: () => false,\n                validation: (val: Option) => Validation.required(val),\n                onload: (instance: any) => selectorInstance = instance,\n                onValue: async (val: Option) => {\n                    if(val) {\n                        const ok = await alertConfirmation(`Do you want to archive ${val.value}`)\n                        if (ok) {\n                            const swapped = await this.swapExistingFilingNumbers(\n                                val.other.data\n                            )\n                            if (swapped) {\n                                this.filingNumberAssignment = swapped\n                                this.fieldComponent = 'filing_number_management'\n                                return true\n                            }                     \n                        }\n                    }\n                    return false\n                },\n                options: () => this.getArchivingCandidates(),\n                config: {\n                    hiddenFooterBtns: [\n                        'Clear',\n                        'Back',\n                        'Finish',\n                        'Next'\n                    ],\n                    footerBtns: [\n                        /**\n                         * Resets listData to previous state after a search term was triggerred.\n                         * Note: Only visible when users searches filing numbers\n                         */\n                        {\n                            name: 'Reset',\n                            slot: 'end',\n                            color: 'warning',\n                            state: {\n                                visible: {\n                                    default: () => filingNumbeSearchTerm ? true : false \n                                }\n                            },\n                            onClick: () => {\n                                // Clear values and restore previous listData prior to search \n                                // results\n                                filingNumbeSearchTerm = ''\n                                selectorInstance.listData = filingOptionsBackup\n                                filingOptionsBackup = []\n                            }\n                        },\n                        /**\n                         * Loads a key pad for searching for a filing candidate\n                         */\n                        {\n                            name: 'Specify',\n                            slot: 'end',\n                            color: 'success',\n                            onClick: async () => {\n                                filingNumbeSearchTerm = await this.filingNumberSearchKeypad()\n                                if (filingNumbeSearchTerm) {\n                                    const filingNumbers = await this.service.getFilingNumber(\n                                        filingNumbeSearchTerm\n                                    )\n                                    // Create a restore point for archived candidates\n                                    filingOptionsBackup = [...selectorInstance.listData]\n                                    selectorInstance.listData = this.formatCandidateOptions(filingNumbers)\n                                }\n                            }\n                        },\n                        /**\n                         * List pagination button that decrements the page number.\n                         * Note: this button will only appear when no filing number were manually searched.\n                         * It will also appear when pageNumber is greater than 1\n                         */\n                        {\n                            name: 'Previous batch',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: () => !filingNumbeSearchTerm\n                                },\n                                disabled: {\n                                    default: () => pageNumber <= 0 \n                                }\n                            },\n                            onClick: async () => {\n                                pageNumber -= 1\n                                selectorInstance.listData = await this.getArchivingCandidates(pageNumber)\n                            }\n                        },\n                        /**\n                         * List pagination button that increments the page number.\n                         * Note: this button will only appear when no filing number were manually searched\n                         * and if the list has 10 or more items\n                         */\n                        {\n                            name: 'Next batch',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: () => !filingNumbeSearchTerm\n                                },\n                                disabled: {\n                                    default: () => (\n                                        selectorInstance.listData \n                                        && selectorInstance.listData.length <= 1\n                                    ) \n                                }\n                            },\n                            onClick: async () => {\n                                pageNumber += 1\n                                selectorInstance.listData = await this.getArchivingCandidates(pageNumber)\n                            }\n                        }\n                    ]\n                }\n            }\n        },\n        /**\n         * Form field that displays new filing number assigned to a\n         * Patient\n         */\n        getFilingNumberField(): Field {\n            return {\n                id: \"filing_number_management\",\n                type: FieldType.TT_FILING_NUMBER_VIEW,\n                helpText: \"Filing Number Management\",\n                onload: async () => await this.service.printFilingNumber(),\n                condition: () => false,\n                options: () => [ \n                    this.filingNumberAssignment.primary, \n                    this.filingNumberAssignment.archived \n                ],\n                config: {\n                    hiddenFooterBtns: [\n                        'Cancel',\n                        'Clear',\n                        'Next'\n                    ],\n                    footerBtns: [\n                        {\n                            name: 'Print #',\n                            slot: 'start',\n                            onClick: async () => this.service.printFilingNumber()\n                        },\n                        {\n                            name: 'Print Dormant#',\n                            slot: 'start',\n                            state: {\n                                visible: {\n                                    default: () => this.filingNumberAssignment\n                                        ?.archived\n                                        ?.other\n                                        ?.patientID ? true : false\n                                }\n                            },\n                            onClick: async () => {\n                                const dormantPatient = new FilingNumberService()\n                                dormantPatient.setPatientID(\n                                    this.filingNumberAssignment\n                                    .archived\n                                    .other\n                                    .patientID\n                                )\n                                await dormantPatient.printFilingNumber()\n                            }\n                        },\n                        {\n                            name: 'Continue',\n                            color: 'success',\n                            slot: 'end',\n                            onClick: () => nextTask(this.patient.id, this.$router, this.$route)\n                        }\n                    ]\n                }\n            }\n        }\n    }\n})\n","import { render } from \"./FilingNumberManagement.vue?vue&type=template&id=34eaede2&ts=true\"\nimport script from \"./FilingNumberManagement.vue?vue&type=script&lang=ts\"\nexport * from \"./FilingNumberManagement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}