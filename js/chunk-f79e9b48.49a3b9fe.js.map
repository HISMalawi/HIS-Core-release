{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?f5b0","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?1898","webpack:///./src/apps/ANC/Views/Encounters/AncVitals.vue?a242","webpack:///./src/apps/ANC/Views/Encounters/AncVitals.vue","webpack:///./src/apps/ANC/Views/Encounters/AncVitals.vue?1dcf","webpack:///./src/apps/ART/services/vitals_service.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","split","username","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","_component_his_standard_form","_resolveComponent","mixins","EncounterMixinVue","age","gender","recentHeight","vitals","weightForHeight","medianWeightandHeight","init","VitalsService","getID","getAge","getGender","getRecentHeight","lastHeight","getMedianWeightHeight","getWeightForHeightValues","getFields","_","createEncounter","saveObservationList","validateVitals","l","checkRequiredVitals","val","v","sanitizeVitals","validateAll","element","id","helpText","FieldType","TT_VITALS_ENTRY","validation","computedValue","doNotSave","forEach","buildValueNumber","config","hiddenFooterBtns","onUpdateAlertStatus","bp","sys","dis","onChangeOption","activeItem","errs","validator","showHeight","modifier","icon","visible","dia","vital","match","min","max","parseFloat","j","errors","holder","isValidBP","bpSystolic","bpDiastolic","checkMinMax","mergeErrors","emptyErrors","isNotEmptyandFloat","minErrors","isNotEmptyandNumber","isValidBPReading","AppEncounterService","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-f79e9b48.49a3b9fe.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { VitalsService } from \"@/apps/ART/services/vitals_service\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { find } from \"lodash\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    age: null as any,\n    gender: null as any,\n    recentHeight: null,\n    vitals: {} as any,\n    weightForHeight: {} as any,\n    medianWeightandHeight: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready) {\n        if (ready) await this.init(this.patient)\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async init(patient: any) {\n        this.vitals = new VitalsService(patient.getID(), this.providerID);\n        this.age = patient.getAge();\n        this.gender = patient.getGender();\n        const lastHeight = await patient.getRecentHeight();\n        this.recentHeight = lastHeight == -1 ? null : lastHeight;\n        if (this.age <= 14) {\n            this.medianWeightandHeight = await patient.getMedianWeightHeight();\n            this.weightForHeight = await ProgramService.getWeightForHeightValues();\n        }\n        this.fields = this.getFields();\n    },\n    async onFinish(_: any, computedData: any) {\n      await this.vitals.createEncounter()\n      await this.vitals.saveObservationList(\n        (await this.resolveObs(computedData))\n      )\n      this.nextTask();\n    },\n    validateVitals(vitals: any) {\n      const l = this.checkRequiredVitals(vitals);\n      if (l.length > 0) {\n        return l.map((val) => {\n          return [`${val.label} can not be empty`];\n        });\n      }\n      const v = this.sanitizeVitals(vitals);\n      return this.vitals.validateAll(v);\n    },\n    sanitizeVitals(vitals: Array<Option>) {\n      return vitals.filter((element) => {\n        if (element.label === \"Height\" && element.other.required == false) {\n          return false;\n        }\n        return element.value !== \"\" && element.label !== \"Age\";\n      })\n    },\n    checkRequiredVitals(vitals: Array<Option>) {\n      return vitals.filter((element) => {\n        return element.value === \"\" && element.other.required === true;\n      });\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"vitals\",\n          helpText: \"Vitals entry\",\n          type: FieldType.TT_VITALS_ENTRY,\n          validation: (value: any) => this.validateVitals(value),\n          computedValue: (value: Option[]) => {\n            let obs: any = []\n            const data = value.filter(v => !v.other.doNotSave)\n            data.forEach((d: Option) => {\n                if (!d.value) {\n                    return\n                }\n                if (typeof d.other?.computed === 'function') {\n                    obs = obs.concat(d.other.computed(d.value))\n                } else {\n                    obs.push(this.vitals.buildValueNumber(d.label, d.value))\n                }\n            })\n            return obs\n          },\n          config: {\n            hiddenFooterBtns : [\n              'Clear'\n            ],\n            onUpdateAlertStatus: (params: Option[]) => {\n                const bp = find(params, { label: 'BP' })\n                if (bp && bp.value != '') {\n                    const [sys, dis] = `${bp.value}`.split('/').map(v => parseInt(v))\n                    if (sys >= 140 && dis >= 90) {\n                        return {\n                            status: 'Client is at risk of pre-eclampsia, refer for urine protein test.',\n                            color: 'brown'\n                        }\n                    }\n                    if (sys < 120 || sys > 140) {\n                        return {\n                            status: 'Systolic reading is out of normal range',\n                            color: 'brown'\n                        }\n                    }\n                    if (dis < 80 || dis > 90) {\n                        return {\n                            status: 'Diastolic reading is out of normal range',\n                            color: 'brown'\n                        }\n                    }\n                    if ((sys >= 130 && sys <= 139) && (dis >= 80 && dis <= 89)) {\n                        return {\n                            status: 'Prehypertension',\n                            color: 'brown'\n                        }\n                    }\n                }\n                return { status: '', color: ''}\n            },\n            onChangeOption: (activeItem: any) => {\n              if (!activeItem.value && activeItem.other.required) {\n                throw `Value for ${activeItem.label} is required`\n              }else if (activeItem.value) {\n                const errs = this.vitals.validator(activeItem)\n                if(errs && errs.length) throw errs\n              }\n            }\n          },\n          options: () => {\n            const recentHeight = this.recentHeight && this.age > 18? this.recentHeight : \"\";\n            const showHeight = !(recentHeight && this.age > 18);\n            return [\n                {\n                    label: \"Weight\",\n                    value: \"\",\n                    other: {\n                        modifier: \"KG\",\n                        icon: \"weight\",\n                        required: true,\n                    },\n                },\n                {\n                    label: \"Height\",\n                    value: `${recentHeight}`,\n                    other: {\n                        modifier: \"CM\",\n                        icon: \"height\",\n                        recentHeight: this.recentHeight,\n                        visible: showHeight\n                    }\n                },\n                { \n                    label: \"BP\", \n                    value: \"\", \n                    other: {\n                        computed: (bp: string) => {\n                            const  [sys, dia] = bp.split(\"/\");\n                            return [\n                                this.vitals.buildValueNumber(\"Systolic\", sys),\n                                this.vitals.buildValueNumber(\"Diastolic\", dia)\n                            ]\n                        },\n                        modifier: \"mmHG\", \n                        icon: \"bp\"\n                    } \n                },\n                {\n                    label: \"Age\",\n                    value: this.age,\n                    other: {\n                        doNotSave: true,\n                        modifier: \"Years old\", \n                        icon: \"\", \n                        visible: false \n                    }\n                }\n            ]\n          }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./AncVitals.vue?vue&type=template&id=211590db&ts=true\"\nimport script from \"./AncVitals.vue?vue&type=script&lang=ts\"\nexport * from \"./AncVitals.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { isArray } from \"lodash\";\nimport { Option } from '@/components/Forms/FieldInterface';\nexport class VitalsService extends AppEncounterService{\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 6, providerID);\n  }\n  isNotEmptyandNumber(vital: Option) {\n    return `${vital.value}`.match(/^-?\\d+\\.?\\d*$/) ? null : [`Invalid entry for ${vital.label}`]\n  }\n  isNotEmptyandFloat(vital: Option) {\n    return `${vital.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/) \n      ? null \n      : [`Invalid entry for ${vital.label}. Don't forget to add a decimal. e.g. 56.2 ${vital.other?.modifier || ''}`]\n  }\n  checkMinMax(val: Option, min: number, max: number) {\n    const p = [];\n    if (parseFloat(`${val.value}`) < min) {\n      p.push([`${val.label} entered is less than minimum ${min} ${val?.other?.modifier || ''}`])\n    }\n    if (parseFloat(`${val.value}`) > max) {\n      p.push([`${val.label} entered is greater than maximum ${max} ${val?.other?.modifier || ''}`])\n    }\n    return p.length > 0 ? p : null;\n  }\n  validateAll(vitals: Option[]) {\n    const p: any = [];\n    vitals.map((vital: any) => {\n      const j = this.validator(vital);\n      return isArray(j) ? p.push(j) : null\n    })\n    return p.length > 0 ? p : null;\n  }\n\n  mergeErrors(errors: any[]) {\n    const holder: any = [];\n    errors.forEach(element => {\n      if (isArray(element)) {\n        holder.push(element)\n      }\n    });\n    return holder.length > 0 ? holder : null\n  }\n  isValidBPReading(vital: any) {\n    const p = [];\n    const isValidBP =  `${vital.value}`.match(/^\\d{1,3}\\/\\d{1,3}$/g) ? null : ['Invalid BP reading']\n    p.push(isValidBP);\n    if(isValidBP == null) {\n      const value = `${vital.value}`.split('/');\n      \n      const bpSystolic = {\n        label: 'Systolic',\n        value: value[0]\n      };\n      const bpDiastolic = {\n        label: 'Diastolic',\n        value: value[1]\n      };\n      p.push(this.checkMinMax(bpDiastolic, 30, 200))\n      p.push(this.checkMinMax(bpSystolic, 40, 250))\n    }\n    return this.mergeErrors(p)\n  }\n  validator(vital: Option) {\n    const values = [\n      {\n        name: \"Weight\",\n        validator: (val: Option) => {\n          const emptyErrors = this.isNotEmptyandFloat(val);\n          const minErrors = this.checkMinMax(val, 2.0, 250.0);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      },\n      {\n        name: \"Height\",\n        validator: (val: Option) => {\n          const errors = []\n          errors.push(this.isNotEmptyandNumber(val))\n          errors.push(this.checkMinMax(val, 40, 220))\n          return this.mergeErrors(errors); \n        },\n      }, {\n        name: \"BP\",\n        validator: (val: any) => {\n          return this.isValidBPReading(val)\n        },\n      }, {\n        name: \"Temp\",\n        validator: (val: any) => {\n          const emptyErrors = this.isNotEmptyandNumber(val);\n          const minErrors = this.checkMinMax(val, 30, 42);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      }, {\n        name: \"SP02\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 40, 100);\n          return this.mergeErrors([minErrors]); \n        },\n      }, {\n        name: \"Pulse\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 50, 120);\n          return this.mergeErrors([minErrors]); \n        },\n      }\n    ]\n    const v = values.filter(element => {\n      return element.name === vital.label;\n    });\n    if (v.length > 0) {\n      return v[0].validator(vital);\n    }\n    return null\n  }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}